[(Example({'sql_prompt': "Update the name of the passenger with the id 3 to 'Emily Lee'.", 'sql_context': "CREATE TABLE PASSENGERS (id INT, name VARCHAR(50)); INSERT INTO PASSENGERS VALUES (3, 'James Brown');", 'sql': "UPDATE PASSENGERS SET name = 'Emily Lee' WHERE id = 3;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='update the name of the passenger with id 3. We need to locate the row where `id` is 3 and then update its `name` field.',
    sql="UPDATE PASSENGERS SET name = 'Emily Lee' WHERE id = 3;"
), 1), (Example({'sql_prompt': "What is the number of women-led agricultural businesses in the 'business_data' table?", 'sql_context': "CREATE TABLE business_data (business_id INT, business_name VARCHAR(50), gender VARCHAR(10)); INSERT INTO business_data (business_id, business_name, gender) VALUES (1, 'Green Acres', 'female'), (2, 'Brown Farms', 'male'), (3, 'Eco Harvest', 'non-binary');", 'sql': "SELECT COUNT(business_id) FROM business_data WHERE gender = 'female';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${produce the sql}. We need to count the number of businesses where the gender is 'female'.",
    sql="SELECT COUNT(*) FROM business_data WHERE gender = 'female';"
), 1), (Example({'sql_prompt': "What is the average rating for 'Gluten-Free' items?", 'sql_context': "CREATE TABLE ratings (item_name TEXT, is_gluten_free BOOLEAN, rating INTEGER); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Quinoa Salad', true, 4); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Chicken Stir Fry', false, 5);", 'sql': 'SELECT AVG(rating) FROM ratings WHERE is_gluten_free = true;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${produce the sql}. We need to filter out 'Gluten-Free' items first and then calculate their average rating.",
    sql='SELECT AVG(rating) FROM ratings WHERE is_gluten_free = true;'
), 1), (Example({'sql_prompt': 'What is the maximum amount of dissolved oxygen (DO) in the ocean_health table for each month in 2021?', 'sql_context': "CREATE TABLE ocean_health (date DATE, do_value INT); INSERT INTO ocean_health (date, do_value) VALUES ('2021-01-01', 8), ('2021-01-02', 7), ('2021-02-01', 6), ('2021-02-02', 9);", 'sql': "SELECT EXTRACT(MONTH FROM date) as month, MAX(do_value) as max_do_value FROM ocean_health WHERE date BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY EXTRACT(MONTH FROM date);"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We need to filter data for each month of 2021 and then find the maximum `do_value` for that month.',
    sql="SELECT EXTRACT(MONTH FROM date) AS Month, MAX(do_value) AS MaxDO FROM ocean_health WHERE date BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY EXTRACT(MONTH FROM date);"
), 1), (Example({'sql_prompt': 'What are the total sales and quantity of goods sold by each salesperson, grouped by city?', 'sql_context': 'CREATE TABLE salesperson (id INT, name TEXT, city TEXT); CREATE TABLE sales (id INT, salesperson_id INT, product TEXT, quantity INT, total_sales FLOAT);', 'sql': 'SELECT s.name, s.city, SUM(s.total_sales) as total_sales, SUM(s.quantity) as total_quantity FROM sales s JOIN salesperson sp ON s.salesperson_id = sp.id GROUP BY s.city, s.name;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We need to join the `sales` table with the `salesperson` table on the `salesperson_id` column. Then we can group the results by `city` and calculate the sum of `total_sales` and `quantity`.',
    sql='SELECT salesperson.city, SUM(sales.total_sales) AS total_sales, SUM(sales.quantity) AS quantity_sold FROM sales JOIN salesperson ON sales.salesperson_id = salesperson.id GROUP BY salesperson.city;'
), 0), (Example({'sql_prompt': 'What is the total funding received by startups in the technology sector that were founded by women?', 'sql_context': "CREATE TABLE startups(id INT, name TEXT, sector TEXT, founder_gender TEXT, funding FLOAT); INSERT INTO startups VALUES (1, 'Acme Inc', 'Technology', 'Female', 2000000); INSERT INTO startups VALUES (2, 'Beta Corp', 'Retail', 'Male', 3000000); INSERT INTO startups VALUES (3, 'Gamma Start', 'Technology', 'Female', 5000000);", 'sql': "SELECT SUM(funding) FROM startups WHERE sector = 'Technology' AND founder_gender = 'Female';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We need to filter for startups that are in the technology sector and founded by women. Then we sum up their funding.',
    sql="SELECT SUM(funding) FROM startups WHERE sector = 'Technology' AND founder_gender = 'Female';"
), 1), (Example({'sql_prompt': 'What is the recycling rate of plastic in the residential sector in the state of New York?', 'sql_context': "CREATE TABLE recycling_rates_city (sector VARCHAR(20), city VARCHAR(20), material VARCHAR(20), recycling_rate DECIMAL(5,2)); INSERT INTO recycling_rates_city (sector, city, material, recycling_rate) VALUES ('residential', 'New York City', 'plastic', 0.25), ('commercial', 'New York City', 'plastic', 0.30), ('residential', 'New York City', 'paper', 0.45), ('commercial', 'New York City', 'paper', 0.50), ('residential', 'Los Angeles', 'plastic', 0.20), ('commercial', 'Los Angeles', 'plastic', 0.35), ('residential', 'Los Angeles', 'paper', 0.40), ('commercial', 'Los Angeles', 'paper', 0.50);", 'sql': "SELECT recycling_rate FROM recycling_rates_city WHERE sector = 'residential' AND material = 'plastic' AND city = 'New York City';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We need to filter for residential sector and plastic recycling rate in New York City.',
    sql="SELECT recycling_rate FROM recycling_rates_city WHERE sector = 'residential' AND city = 'New York City' AND material = 'plastic';"
), 1), (Example({'sql_prompt': "Which startups in the 'StartupFunding' table received funding in 2020 or later and have a budget greater than $500,000?", 'sql_context': "CREATE SCHEMA BiotechStartups; CREATE TABLE StartupFunding (startup_name VARCHAR(50), funding_year INT, funding DECIMAL(10, 2)); INSERT INTO StartupFunding VALUES ('StartupA', 2019, 500000), ('StartupB', 2020, 750000);", 'sql': 'SELECT startup_name FROM BiotechStartups.StartupFunding WHERE funding_year >= 2020 AND funding > 500000;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We need to select startups that received funding after 2020 and have a budget greater than $500,000. This means we should filter on both `funding_year` being greater than or equal to 2021 (since 2020 is inclusive) and `funding` being greater than $500,000.',
    sql='SELECT startup_name FROM StartupFunding WHERE funding_year >= 2021 AND funding > 500000;'
), 0), (Example({'sql_prompt': "How many female engineers are there in 'australian_mines'?", 'sql_context': "CREATE SCHEMA if not exists australia_schema;CREATE TABLE australia_schema.australian_mines (id INT, name VARCHAR, gender VARCHAR, role VARCHAR);INSERT INTO australia_schema.australian_mines (id, name, gender, role) VALUES (1, 'S worker', 'Female', 'Engineer'), (2, 'T engineer', 'Male', 'Engineer');", 'sql': "SELECT COUNT(*) FROM australia_schema.australian_mines WHERE gender = 'Female' AND role = 'Engineer';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${produce the sql}. We need to filter for female engineers specifically working in 'australian_mines'.",
    sql="SELECT COUNT(*) FROM australia_schema.australian_mines WHERE gender = 'Female' AND role = 'Engineer' AND name LIKE '%australian_mines%';"
), 1), (Example({'sql_prompt': 'What is the average salary of employees in each position?', 'sql_context': "CREATE TABLE Employees (EmployeeID INT, Name VARCHAR(50), Department VARCHAR(50), Position VARCHAR(50), Salary FLOAT); INSERT INTO Employees (EmployeeID, Name, Department, Position, Salary) VALUES (1, 'John Doe', 'IT', 'Developer', 75000.00), (2, 'Jane Smith', 'IT', 'Developer', 80000.00), (3, 'Alice Johnson', 'Marketing', 'Marketing Specialist', 60000.00), (4, 'Bob Brown', 'HR', 'HR Specialist', 65000.00);", 'sql': 'SELECT Position, AVG(Salary) FROM Employees GROUP BY Position;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${produce the sql}. We need to calculate the average salary for each position. First, we will select the distinct positions from the Employees table. Then, for each unique position, we'll aggregate the salaries and compute their average.",
    sql='SELECT Position, AVG(Salary) AS AverageSalary FROM Employees GROUP BY Position;'
), 1), (Example({'sql_prompt': 'What are the names and ranks of all military personnel in country W who were demoted in the year 2019?', 'sql_context': "CREATE TABLE military_demotions (id INT, name TEXT, country TEXT, rank TEXT, demotion_year INT);INSERT INTO military_demotions (id, name, country, rank, demotion_year) VALUES (1, 'John Doe', 'Country W', 'Colonel', 2019);", 'sql': "SELECT name, rank FROM military_demotions WHERE country = 'Country W' AND demotion_year = 2019;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="produce the sql.\n\n1. First, we need to select the columns `name` and `rank`.\n2. Then, filter for rows where `country` is 'Country W'.\n3. Next, filter for rows where `demotion_year` is 2019.\n4. Finally, order the results by `rank`.",
    sql="SELECT name, rank FROM military_demotions WHERE country = 'Country W' AND demotion_year = 2019 ORDER BY rank;"
), 1), (Example({'sql_prompt': "List the top 2 sectors with the highest donation amounts in the 'Asia' region for the year 2018, ordered by the donation amount in descending order.", 'sql_context': "CREATE TABLE Donors (donor_id INT, donor_name VARCHAR(255), donation_amount INT, sector VARCHAR(255), region VARCHAR(255), donation_date DATE); INSERT INTO Donors (donor_id, donor_name, donation_amount, sector, region, donation_date) VALUES (1, 'DonorA', 100000, 'Health', 'Asia', '2018-01-01');", 'sql': "SELECT sector, SUM(donation_amount) AS total_donation FROM Donors WHERE region = 'Asia' AND donation_date >= '2018-01-01' AND donation_date < '2019-01-01' GROUP BY sector ORDER BY total_donation DESC LIMIT 2;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${produce the sql}. We need to filter donors who made donations in the 'Asia' region for the year 2018. Then, we should group them by sector and calculate the sum of their donation amounts. Finally, we sort the results in descending order based on the total donation amount and limit the output to the top 2 sectors.",
    sql="SELECT sector, SUM(donation_amount) as total_donation FROM Donors WHERE region = 'Asia' AND YEAR(donation_date) = 2018 GROUP BY sector ORDER BY total_donation DESC LIMIT 2;"
), 1), (Example({'sql_prompt': "Display the vendor with the highest average price for 'Salmon' in the 'sales' table.", 'sql_context': "CREATE TABLE sales (id INT PRIMARY KEY, vendor VARCHAR(50), quantity INT, species VARCHAR(50), price DECIMAL(5,2)); INSERT INTO sales (id, vendor, quantity, species, price) VALUES (1, 'Seafood Haven', 20, 'Salmon', 15.99), (2, 'Sea Bounty', 30, 'Tilapia', 9.49), (3, 'Sea Bounty', 15, 'Cod', 14.50), (4, 'Fresh Catch', 25, 'Salmon', 17.99);", 'sql': "SELECT vendor, AVG(price) FROM sales WHERE species = 'Salmon' GROUP BY vendor ORDER BY AVG(price) DESC LIMIT 1;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${produce the sql}. We need to find the vendor with the highest average price for 'Salmon'. First, we filter rows where species is 'Salmon' and then calculate the average price per vendor.",
    sql="SELECT vendor, AVG(price) as avg_price FROM sales WHERE species = 'Salmon' GROUP BY vendor ORDER BY avg_price DESC LIMIT 1;"
), 1), (Example({'sql_prompt': "Add new military equipment to 'military_equipment' table", 'sql_context': "CREATE TABLE military_equipment (id INT PRIMARY KEY, name VARCHAR(255), type VARCHAR(255), country VARCHAR(255)); INSERT INTO military_equipment (id, name, type, country) VALUES (1, 'M1 Abrams', 'Tank', 'USA');", 'sql': "INSERT INTO military_equipment (id, name, type, country) VALUES (2, 'Leopard 2', 'Tank', 'Germany');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="add new military equipment. We need to identify the details of the new equipment such as its name, type, and country of origin. Once we have this information, we can use an `INSERT INTO` statement to add a new row into the 'military_equipment' table with these values.",
    sql="INSERT INTO military_equipment (id, name, type, country) VALUES (2, 'Leclerc', 'Tank', 'France');"
), 1), (Example({'sql_prompt': 'Show total number of union members by state', 'sql_context': "CREATE TABLE union_members (id INT, name VARCHAR(50), state VARCHAR(2), city VARCHAR(20), occupation VARCHAR(20)); INSERT INTO union_members (id, name, state, city, occupation) VALUES (1, 'John Doe', 'NY', 'New York', 'Engineer'); INSERT INTO union_members (id, name, state, city, occupation) VALUES (2, 'Jane Smith', 'CA', 'Los Angeles', 'Teacher'); INSERT INTO union_members (id, name, state, city, occupation) VALUES (3, 'Alice Johnson', 'NY', 'Buffalo', 'Nurse');", 'sql': 'SELECT state, COUNT(*) as total_members FROM union_members GROUP BY state;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We need to count the number of union members for each state. First, we should select distinct states from the `union_members` table. Then, we can use a GROUP BY clause on the selected states to aggregate the counts.',
    sql='SELECT state, COUNT(*) as total_members FROM union_members GROUP BY state;'
), 1), (Example({'sql_prompt': 'What is the total value of military equipment sales to all countries?', 'sql_context': "CREATE TABLE military_sales (id INT, country VARCHAR, value FLOAT); INSERT INTO military_sales (id, country, value) VALUES (1, 'Canada', 5000000), (2, 'Mexico', 3000000), (3, 'Canada', 7000000);", 'sql': 'SELECT SUM(value) FROM military_sales;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We need to sum up all the values from the `military_sales` table regardless of which country they are associated with.',
    sql='SELECT SUM(value) FROM military_sales;'
), 1), (Example({'sql_prompt': 'Identify the top 3 countries with the highest number of social impact projects in 2019.', 'sql_context': "CREATE TABLE countries (id INT, name VARCHAR(255), total_projects INT); INSERT INTO countries (id, name, total_projects) VALUES (1, 'Brazil', 500), (2, 'India', 700), (3, 'South Africa', 350); CREATE TABLE projects_by_country (country VARCHAR(255), project_count INT); INSERT INTO projects_by_country (country, project_count) SELECT country, COUNT(*) FROM projects GROUP BY country;", 'sql': 'SELECT c.name, p.project_count FROM countries c JOIN (SELECT country, COUNT(*) AS project_count FROM projects GROUP BY country ORDER BY project_count DESC LIMIT 3) p ON c.name = p.country;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We first need to join the `countries` and `projects_by_country` tables on their respective countries. Then we can filter for 2019 (which is not explicitly mentioned but assumed based on context), sort the results, and limit them to the top 3.',
    sql='SELECT c.name, COUNT(p.project_count) as total_projects\nFROM countries c \nJOIN projects_by_country p ON c.name = p.country\nWHERE YEAR(p.date) = 2019\nGROUP BY c.name\nORDER BY total_projects DESC\nLIMIT 3;'
), 0), (Example({'sql_prompt': 'What is the maximum market price of Terbium in China for 2017?', 'sql_context': 'CREATE TABLE Terbium_Market_Prices (id INT, year INT, country VARCHAR(255), market_price FLOAT);', 'sql': "SELECT MAX(market_price) FROM Terbium_Market_Prices WHERE year = 2017 AND country = 'China';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="produce the sql.\n\n1. Identify the table we need data from: `Terbium_Market_Prices`.\n2. We're interested in rows where:\n   - The year is 2017 (`year = 2017`).\n   - The country is China (`country = 'China'`).\n3. We want to find the maximum market price for these conditions, which means we need to use the `MAX()` function on the `market_price` column.",
    sql="SELECT MAX(market_price) FROM Terbium_Market_Prices WHERE year = 2017 AND country = 'China';"
), 1), (Example({'sql_prompt': 'What is the maximum amount of research grant received by a faculty member in the Arts and Humanities department?', 'sql_context': "CREATE TABLE grants_faculty (id INT, department VARCHAR(50), faculty_name VARCHAR(50), amount DECIMAL(10,2), grant_date DATE); INSERT INTO grants_faculty (id, department, faculty_name, amount, grant_date) VALUES (1, 'Arts and Humanities', 'Grace', 12000.00, '2018-06-10'), (2, 'Arts and Humanities', 'Harry', 18000.00, '2019-12-20'), (3, 'Arts and Humanities', 'Ida', 20000.00, '2020-08-05');", 'sql': "SELECT MAX(amount) FROM grants_faculty WHERE department = 'Arts and Humanities';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We need to filter for faculty members in the Arts and Humanities department first, then find the maximum amount of research grant they received.',
    sql="SELECT MAX(amount) FROM grants_faculty WHERE department = 'Arts and Humanities';"
), 1), (Example({'sql_prompt': 'What is the total mass of all space debris in orbit?', 'sql_context': "CREATE TABLE Space_Debris (ID INT, Object_Type VARCHAR(50), Mass FLOAT); INSERT INTO Space_Debris (ID, Object_Type, Mass) VALUES (1, 'Defunct Satellite', 1500.0), (2, 'Rocket Body', 2000.0), (3, 'Fuel Tank', 500.0), (4, 'Nuts and Bolts', 100.0), (5, 'Spent Rocket Stage', 3000.0);", 'sql': 'SELECT SUM(Mass) FROM Space_Debris;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We need to select the sum of the `Mass` column from the `Space_Debris` table.',
    sql='SELECT SUM(Mass) FROM Space_Debris;'
), 1), (Example({'sql_prompt': 'What is the average age of players who play "Racing Simulator 2022"?', 'sql_context': "CREATE TABLE Players (PlayerID INT, PlayerName VARCHAR(50), Game VARCHAR(50), Age INT); INSERT INTO Players (PlayerID, PlayerName, Game, Age) VALUES (1, 'John Doe', 'Racing Simulator 2022', 25), (2, 'Jane Smith', 'Racing Simulator 2022', 30), (3, 'Alice Johnson', 'Shooter Game 2022', 22);", 'sql': "SELECT AVG(Age) FROM Players WHERE Game = 'Racing Simulator 2022';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We need to filter players who play "Racing Simulator 2022" first. Once we have those players, we can calculate their average age.',
    sql="SELECT AVG(Age) FROM Players WHERE Game = 'Racing Simulator 2022';"
), 1), (Example({'sql_prompt': 'What is the total revenue generated by concert ticket sales in the US?', 'sql_context': "CREATE TABLE concert_tickets (ticket_id int, venue_id int, ticket_price decimal, timestamp datetime, country varchar(255)); INSERT INTO concert_tickets (ticket_id, venue_id, ticket_price, timestamp, country) VALUES (1, 789, 50.00, '2022-06-01 12:00:00', 'United States');", 'sql': "SELECT SUM(ticket_price) as total_revenue FROM concert_tickets WHERE timestamp BETWEEN '2022-01-01' AND '2022-12-31' AND country = 'United States';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We need to filter out tickets sold in the US and then sum up their prices.',
    sql="SELECT SUM(ticket_price) FROM concert_tickets WHERE country = 'United States';"
), 0), (Example({'sql_prompt': "How many cases did attorney 'Jane Doe' handle in total?", 'sql_context': "CREATE TABLE Attorneys (AttorneyID int, Name varchar(50), Specialty varchar(50)); INSERT INTO Attorneys (AttorneyID, Name, Specialty) VALUES (2, 'Jane Doe', 'Civil'); CREATE TABLE Cases (CaseID int, ClientID int, Category varchar(50), AttorneyID int); INSERT INTO Cases (CaseID, ClientID, Category, AttorneyID) VALUES (301, 3, 'Civil', 2);", 'sql': "SELECT COUNT(*) as TotalCases FROM Cases WHERE AttorneyID = (SELECT AttorneyID FROM Attorneys WHERE Name = 'Jane Doe');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${produce the sql}. We need to find all cases handled by attorney 'Jane Doe'. First, we should select the `AttorneyID` for 'Jane Doe' from the `Attorneys` table. Then, we can join this with the `Cases` table on the `AttorneyID` column to get all cases where Jane Doe is listed as an attorney. Finally, we count the number of rows in the result.",
    sql="SELECT COUNT(*) FROM Attorneys JOIN Cases ON Attorneys.AttorneyID = Cases.AttorneyID WHERE Attorneys.Name = 'Jane Doe';"
), 1), (Example({'sql_prompt': 'Show the top 3 content categories in Japan with the most posts.', 'sql_context': "CREATE TABLE content_categories (id INT, content_category VARCHAR(255)); CREATE TABLE posts_extended (id INT, content_category_id INT, content TEXT, country VARCHAR(255)); INSERT INTO content_categories (id, content_category) VALUES (1, 'AI'), (2, 'Data Science'), (3, 'Machine Learning'); INSERT INTO posts_extended (id, content_category_id, content, country) VALUES (1, 1, 'Hello', 'Japan'), (2, 1, 'World', 'Japan'), (3, 2, 'AI', 'Japan');", 'sql': "SELECT content_categories.content_category, COUNT(posts_extended.id) AS post_count FROM content_categories JOIN posts_extended ON posts_extended.content_category_id = content_categories.id WHERE posts_extended.country = 'Japan' GROUP BY content_categories.content_category ORDER BY post_count DESC LIMIT 3;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${produce the sql}. We need to join the `content_categories` and `posts_extended` tables on their respective IDs. Then we can filter for posts from Japan using a WHERE clause with `country = 'Japan'`. After that, we group the results by content category (`content_category`) and order them in descending order based on the count of posts per category. Finally, we limit the output to the top 3 categories.",
    sql="SELECT content_categories.content_category, COUNT(posts_extended.id) as post_count FROM content_categories JOIN posts_extended ON content_categories.id = posts_extended.content_category_id WHERE posts_extended.country = 'Japan' GROUP BY content_categories.content_category ORDER BY post_count DESC LIMIT 3;"
), 1), (Example({'sql_prompt': 'How many defense contracts were signed in each quarter of 2020?', 'sql_context': "CREATE TABLE defense_contracts (contract_id INT, contract_date DATE); INSERT INTO defense_contracts VALUES (1, '2020-03-15'), (2, '2020-06-01'), (3, '2020-09-15');", 'sql': "SELECT TO_CHAR(contract_date, 'YYYY-Q') AS quarter, COUNT(*) FROM defense_contracts WHERE contract_date >= DATE '2020-01-01' AND contract_date < DATE '2021-01-01' GROUP BY quarter;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We need to extract the quarter from each contract date. The quarter can be determined using the MONTH function and dividing it by 3 since there are approximately three months per quarter.',
    sql="SELECT \n    CASE\n        WHEN MONTH(contract_date) BETWEEN 1 AND 3 THEN 'Q1'\n        WHEN MONTH(contract_date) BETWEEN 4 AND 6 THEN 'Q2'\n        WHEN MONTH(contract_date) BETWEEN 7 AND 9 THEN 'Q3'\n        ELSE 'Q4'\n    END AS Quarter,\n    COUNT(contract_id) AS Contracts_Signed\nFROM defense_contracts\nWHERE YEAR(contract_date) = 2020\nGROUP BY Quarter;"
), 0), (Example({'sql_prompt': 'What is the total duration played for each player?', 'sql_context': "CREATE TABLE PlayerGame (PlayerID INT, GameID INT, Played DATE, StartTime TIMESTAMP, EndTime TIMESTAMP); INSERT INTO PlayerGame (PlayerID, GameID, Played, StartTime, EndTime) VALUES (1, 1, '2022-01-01', '2022-01-01 10:00:00', '2022-01-01 12:00:00'), (2, 2, '2022-01-02', '2022-01-02 14:00:00', '2022-01-02 16:00:00'), (3, 1, '2022-01-03', '2022-01-03 10:00:00', '2022-01-03 11:00:00'), (4, 3, '2022-01-04', '2022-01-04 18:00:00', '2022-01-04 19:00:00');", 'sql': 'SELECT PlayerID, SUM(TIMESTAMPDIFF(MINUTE, StartTime, EndTime)) FROM PlayerGame GROUP BY PlayerID;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Find the total duration played for each player:\n\n1. **Identify the relevant columns**: We need `PlayerID` and the duration of play, which is calculated as the difference between `EndTime` and `StartTime`.\n\n2. **Calculate the duration**: The duration can be found by subtracting `StartTime` from `EndTime`. This will give us a time interval for each game played.\n\n3. **Group by player**: We need to group the data by `PlayerID` so that we can calculate the total duration of play for each individual player.\n\n4. **Summarize the durations**: For each player, sum up all their durations to get the total amount of time they've played.\n\nHere's how you could write this SQL query:",
    sql='SELECT PlayerID, SUM(EndTime - StartTime) AS TotalDurationPlayed\nFROM PlayerGame\nGROUP BY PlayerID;'
), 1), (Example({'sql_prompt': 'Find the percentage change in tourism to Thailand between 2019 and 2021.', 'sql_context': 'CREATE TABLE thailand_tourism (year INT, total_visitors INT); INSERT INTO thailand_tourism (year, total_visitors) VALUES (2019, 40000), (2021, 30000);', 'sql': 'SELECT (30000 - 40000) * 100.0 / 40000 AS change_percentage FROM thailand_tourism WHERE year = 2021;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${find the percentage change}. First, we need to calculate the difference between the number of visitors in 2021 and 2019. Then, we divide this difference by the number of visitors in 2019 and multiply it by 100 to get the percentage.',
    sql='SELECT ((total_visitors - (SELECT total_visitors FROM thailand_tourism WHERE year = 2019)) / (SELECT total_visitors FROM thailand_tourism WHERE year = 2019)) * 100 AS percent_change FROM thailand_tourism WHERE year = 2021;'
), 1), (Example({'sql_prompt': 'How many students with physical disabilities have not received any accommodations in the last year?', 'sql_context': 'CREATE TABLE Accommodations (id INT, student VARCHAR(255), date DATE); CREATE TABLE Students (id INT, name VARCHAR(255), age INT, disability VARCHAR(255));', 'sql': "SELECT COUNT(*) FROM Students LEFT JOIN Accommodations ON Students.id = Accommodations.student WHERE disability = 'physical disability' AND date IS NULL;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We first need to find all students with physical disabilities. Then we will filter those who have not received any accommodations within the last year.\n\nSql Prompt: How many students with physical disabilities have not received any accommodations in the last year?\nSql Context: CREATE TABLE Accommodations (id INT, student VARCHAR(255), date DATE); CREATE TABLE Students (id INT, name VARCHAR(255), age INT, disability VARCHAR(255));',
    sql="SELECT COUNT(*) FROM Students WHERE disability = 'Physical Disability' AND NOT EXISTS (\n  SELECT * FROM Accommodations \n  WHERE Accommodations.student = Students.name\n  AND date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)\n)"
), 0), (Example({'sql_prompt': 'What is the maximum property price in neighborhoods with inclusive housing policies, and the minimum size of properties in those neighborhoods?', 'sql_context': "CREATE TABLE property (id INT, price INT, size_sqft INT, area VARCHAR(255), has_inclusive_policy BOOLEAN); INSERT INTO property (id, price, size_sqft, area, has_inclusive_policy) VALUES (1, 500000, 1500, 'urban', true), (2, 400000, 1200, 'urban', false);", 'sql': "SELECT MAX(price), MIN(size_sqft) FROM property WHERE area = 'urban' AND has_inclusive_policy = true;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${produce the sql}. We need to first filter out neighborhoods with inclusive housing policies. Then we'll find the maximum property price and minimum size of properties within those neighborhoods.",
    sql='```sql\nSELECT \n    MAX(property.price) AS max_price, \n    MIN(property.size_sqft) AS min_size\nFROM \n    property\nWHERE \n    property.has_inclusive_policy = true;\n```'
), 0), (Example({'sql_prompt': "Add a new safety incident to the safety_incidents table (id: 4, aircraft: 'Space Shuttle Challenger', date: '1986-01-28', description: 'O-ring failure')", 'sql_context': 'CREATE TABLE safety_incidents (id INT, aircraft VARCHAR(255), date DATE, description VARCHAR(255));', 'sql': "INSERT INTO safety_incidents (id, aircraft, date, description) VALUES (4, 'Space Shuttle Challenger', '1986-01-28', 'O-ring failure');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='add a new row to the `safety_incidents` table. We need to insert values for each column of the row we want to add.',
    sql="INSERT INTO safety_incidents (id, aircraft, date, description) VALUES (4, 'Space Shuttle Challenger', '1986-01-28', 'O-ring failure');"
), 1), (Example({'sql_prompt': "What is the average age of players who prefer the 'FPS' genre in the 'player_preferences' and 'player_demographics' tables?", 'sql_context': "CREATE TABLE player_preferences (player_id INT, genre VARCHAR(50)); CREATE TABLE player_demographics (player_id INT, age INT); INSERT INTO player_preferences (player_id, genre) VALUES (1, 'FPS'), (2, 'RPG'), (3, 'FPS'), (4, 'Simulation'); INSERT INTO player_demographics (player_id, age) VALUES (1, 25), (2, 30), (3, 35), (4, 40);", 'sql': "SELECT AVG(age) as avg_fps_age FROM player_demographics JOIN player_preferences ON player_preferences.player_id = player_demographics.player_id WHERE genre = 'FPS';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${produce the sql}. We need to find players who prefer 'FPS' genre first. Then we will join this result with player_demographics table to get their ages. Finally, we calculate the average age of these players.",
    sql="```sql\nSELECT AVG(player_demographics.age) \nFROM player_preferences \nJOIN player_demographics ON player_preferences.player_id = player_demographics.player_id \nWHERE player_preferences.genre = 'FPS';\n```"
), 1), (Example({'sql_prompt': 'What is the diversity ratio (percentage of non-male employees) in each department?', 'sql_context': "CREATE TABLE Employees (EmployeeID int, Department varchar(20), Gender varchar(10)); INSERT INTO Employees (EmployeeID, Department, Gender) VALUES (1, 'Marketing', 'Male'); INSERT INTO Employees (EmployeeID, Department, Gender) VALUES (2, 'Marketing', 'Female'); INSERT INTO Employees (EmployeeID, Department, Gender) VALUES (3, 'IT', 'Male'); INSERT INTO Employees (EmployeeID, Department, Gender) VALUES (4, 'IT', 'Non-binary');", 'sql': "SELECT Department, (COUNT(CASE WHEN Gender <> 'Male' THEN 1 END) / COUNT(*)) * 100 AS DiversityRatio FROM Employees GROUP BY Department;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${produce the sql}. We need to calculate the diversity ratio for each department. First, we'll count the total number of employees in each department using a GROUP BY clause on `Department`. Then, we'll count the number of non-male employees (excluding 'Male' and 'Non-binary') by filtering those out with an INNER JOIN against the Employees table. Finally, we'll calculate the diversity ratio as the percentage of non-male employees to the total number of employees in each department.",
    sql="```sql\nSELECT \n    Department,\n    COUNT(e.EmployeeID) AS TotalEmployees,\n    (COUNT(CASE WHEN e.Gender NOT IN ('Male', 'Non-binary') THEN e.EmployeeID END) / NULLIF(COUNT(e"
), 0), (Example({'sql_prompt': 'What is the average donation per donor in India?', 'sql_context': "CREATE TABLE donations (donor_id INT, donation_amount DECIMAL(10, 2), donation_date DATE, country TEXT); INSERT INTO donations VALUES (1, 50.00, '2021-05-15', 'India'), (2, 100.00, '2021-06-10', 'India'), (3, 25.00, '2021-04-01', 'India');", 'sql': "SELECT AVG(donation_amount) FROM donations WHERE country = 'India';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We need to calculate the average donation per donor for donors from India.',
    sql="SELECT AVG(donation_amount) FROM donations WHERE country = 'India';"
), 1), (Example({'sql_prompt': 'How many wildlife habitats in South Africa have a total area greater than 50000 hectares?', 'sql_context': 'CREATE TABLE wildlife_habitats (id INT, name TEXT, area REAL, country TEXT);', 'sql': "SELECT COUNT(*) FROM wildlife_habitats WHERE country = 'South Africa' GROUP BY country HAVING SUM(area) > 50000;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="produce the sql.\n\n1. First, we need to select all rows from the `wildlife_habitats` table where the `country` column is 'South Africa'.\n2. Then, filter those results further to only include habitats with an area greater than 50000 hectares.\n3. Finally, count the number of rows returned by these conditions.",
    sql="SELECT COUNT(*) FROM wildlife_habitats WHERE country = 'South Africa' AND area > 50000;"
), 0), (Example({'sql_prompt': 'What is the percentage of faculty members who identify as AAPI in the School of Business?', 'sql_context': "CREATE TABLE faculty_members (id INT, faculty_name VARCHAR(50), faculty_department VARCHAR(50), faculty_race VARCHAR(20)); INSERT INTO faculty_members (id, faculty_name, faculty_department, faculty_race) VALUES (1, 'Taylor Smith', 'Business Administration', 'AAPI'), (2, 'James Johnson', 'Marketing', 'White'), (3, 'Avery Brown', 'Finance', 'Black'), (4, 'Katie Davis', 'Management', 'White'), (5, 'Jamie Wilson', 'Accounting', 'Latinx'), (6, 'Leah Kim', 'Business Analytics', 'AAPI');", 'sql': "SELECT (COUNT(*) FILTER (WHERE faculty_race = 'AAPI')) * 100.0 / COUNT(*) FROM faculty_members WHERE faculty_department LIKE '%Business%';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${produce the sql}. We need to find out how many faculty members identify as AAPI in the School of Business. First, we should filter for rows where `faculty_race` is 'AAPI' and `faculty_department` is 'Business Administration'. Then, we can calculate the percentage by dividing this count by the total number of faculty members in the 'School of Business'.",
    sql="SELECT \n    (COUNT(CASE WHEN faculty_race = 'AAPI' AND faculty_department = 'Business Administration' THEN 1 END) * 100.0 / COUNT(*)) AS AAPI_percentage\nFROM \n    faculty_members;"
), 0), (Example({'sql_prompt': 'How many water treatment plants are there in the province of Ontario, Canada?', 'sql_context': "CREATE TABLE water_treatment_plants_ontario (id INT, province VARCHAR); INSERT INTO water_treatment_plants_ontario (id, province) VALUES (1, 'Ontario'), (2, 'Quebec'), (3, 'Ontario'), (4, 'British Columbia');", 'sql': "SELECT COUNT(*) FROM water_treatment_plants_ontario WHERE province = 'Ontario';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='produce the sql. We need to find out how many water treatment plants are there in the province of Ontario, Canada.',
    sql="SELECT COUNT(*) FROM water_treatment_plants_ontario WHERE province = 'Ontario';"
), 1), (Example({'sql_prompt': 'Delete vessels that have not been inspected in the last 12 months', 'sql_context': "CREATE TABLE vessel_inspection (vessel_id INT, inspection_date DATE); INSERT INTO vessel_inspection (vessel_id, inspection_date) VALUES (1, '2020-01-01'), (2, '2021-06-15'), (3, '2019-12-20');", 'sql': 'DELETE FROM vessel_inspection WHERE vessel_id IN (SELECT vessel_id FROM vessel_inspection WHERE inspection_date < DATE_SUB(CURDATE(), INTERVAL 12 MONTH));'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='delete the vessels that have not been inspected in the last 12 months. We first need to find out which vessel IDs are associated with inspection dates more than a year ago, and then use those IDs to delete the corresponding rows from the table.',
    sql='DELETE FROM vessel_inspection WHERE inspection_date < DATE_SUB(CURDATE(), INTERVAL 1 YEAR);'
), 1), (Example({'sql_prompt': "Which materials in the 'inventory' table have a quantity of at least 100 and are not used in the production of any product in the 'products' table?", 'sql_context': "CREATE TABLE inventory(id INT, material VARCHAR(255), quantity INT); CREATE TABLE products(id INT, material VARCHAR(255), quantity INT); INSERT INTO inventory(id, material, quantity) VALUES (1, 'organic cotton', 75), (2, 'conventional cotton', 100), (3, 'organic cotton', 30), (4, 'hemp', 60); INSERT INTO products(id, material, quantity) VALUES (1, 'organic cotton', 150), (2, 'conventional cotton', 200), (3, 'hemp', 100);", 'sql': 'SELECT material FROM inventory i WHERE quantity >= 100 AND NOT EXISTS (SELECT * FROM products p WHERE i.material = p.material);'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We need to find materials that are not used in production. First, we identify all unique materials from the inventory table. Then, we select only those materials which have a quantity of at least 100 and are not present in the products table.',
    sql='SELECT DISTINCT i.material FROM inventory i WHERE i.quantity >= 100 AND i.material NOT IN (SELECT p.material FROM products p)'
), 1), (Example({'sql_prompt': "What is the minimum billing amount for cases in the region 'South'?", 'sql_context': 'CREATE TABLE cases (case_id INT, region TEXT, billing_amount INT);', 'sql': "SELECT MIN(billing_amount) FROM cases WHERE region = 'South';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="produce the sql.\n\n1. Identify the table we need to query from, which is `cases`.\n2. We are interested in rows where the `region` column has a value of 'South'.\n3. The specific information we want is the minimum value of the `billing_amount` column for these rows.\n4. To find this minimum value, we use the SQL MIN function.",
    sql="SELECT MIN(billing_amount) FROM cases WHERE region = 'South';"
), 1), (Example({'sql_prompt': 'What is the total number of postpaid and prepaid mobile subscribers in each region?', 'sql_context': "CREATE TABLE mobile_subscribers (subscriber_id INT, subscriber_type VARCHAR(10), region VARCHAR(20)); INSERT INTO mobile_subscribers (subscriber_id, subscriber_type, region) VALUES (1, 'postpaid', 'West'), (2, 'prepaid', 'East'), (3, 'postpaid', 'North'), (4, 'prepaid', 'South'), (5, 'postpaid', 'East');", 'sql': 'SELECT region, COUNT(*) as total_subscribers FROM mobile_subscribers GROUP BY region;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We need to count the number of subscribers for each `subscriber_type` and group them by their respective `region`.',
    sql='SELECT subscriber_type, region, COUNT(subscriber_id) as total_subscribers FROM mobile_subscribers GROUP BY subscriber_type, region;'
), 1), (Example({'sql_prompt': 'Identify the top 3 mining companies with the highest total production of Praseodymium in 2021 and their respective production amounts.', 'sql_context': "CREATE TABLE Company (Name TEXT, Location TEXT, Established INT); INSERT INTO Company (Name, Location, Established) VALUES ('Delta Minerals', 'Brazil', 2000), ('Epsilon Ore', 'South Africa', 2010), ('Zeta Extraction', 'Canada', 2005), ('Eta Mines', 'Russia', 2008); CREATE TABLE ProductionCompany (Year INT, Company TEXT, Element TEXT, Quantity INT); INSERT INTO ProductionCompany (Year, Company, Element, Quantity) VALUES (2021, 'Delta Minerals', 'Praseodymium', 1000), (2021, 'Epsilon Ore', 'Praseodymium', 1400), (2021, 'Zeta Extraction', 'Praseodymium', 1800), (2021, 'Eta Mines', 'Praseodymium', 1100);", 'sql': "SELECT Company, SUM(Quantity) FROM ProductionCompany WHERE Element = 'Praseodymium' AND Year = 2021 GROUP BY Company ORDER BY SUM(Quantity) DESC FETCH FIRST 3 ROWS ONLY;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${produce the sql}. We need to:\n\n1. Join the `Company` and `ProductionCompany` tables on their common column (`Company`) to match each company with its production data.\n2. Filter for the year 2021 using a WHERE clause.\n3. Select the top 3 companies based on total production of Praseodymium, which can be achieved by ordering the results in descending order and limiting the output to 3 rows.\n\nSQL Query:\n```sql\nSELECT c.Name, SUM(pc.Quantity) as TotalProduction\nFROM Company c\nJOIN ProductionCompany pc ON c.Name = pc.Company\nWHERE pc.Year = 2021 AND pc.Element = 'Praseodymium'\nGROUP BY c.Name\nORDER",
    sql="```sql\nSELECT c.Name, SUM(pc.Quantity) as TotalProduction \nFROM Company c \nJOIN ProductionCompany pc ON c.Name = pc.Company \nWHERE pc.Year = 2021 AND pc.Element = 'Praseodymium'\nGROUP BY c.Name \nORDER BY TotalProduction DESC \nLIMIT 3;\n```"
), 1), (Example({'sql_prompt': 'How many volunteer hours were recorded for each program in Q2 2021?', 'sql_context': "CREATE TABLE VolunteerHours (VolunteerID INT, ProgramID INT, Hours DECIMAL(5,2), HourDate DATE); INSERT INTO VolunteerHours (VolunteerID, ProgramID, Hours, HourDate) VALUES (1, 1, 5, '2021-04-15'), (2, 2, 3, '2021-06-02'), (1, 1, 4, '2021-05-31'), (3, 3, 2, '2021-04-01'); CREATE TABLE Programs (ProgramID INT, ProgramName TEXT); INSERT INTO Programs (ProgramID, ProgramName) VALUES (1, 'Arts & Culture'), (2, 'Health & Wellness'), (3, 'Environment');", 'sql': "SELECT ProgramID, SUM(Hours) as TotalHours FROM VolunteerHours WHERE HourDate BETWEEN '2021-04-01' AND '2021-06-30' GROUP BY ProgramID;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We need to filter records for Q2 2021 first. This means we should select rows where `HourDate` is between April 1st and June 30th of 2021. Then, we join this with the Programs table on ProgramID to get the name of each program. Finally, we group by ProgramName to count the total hours for each program.',
    sql="```sql\nSELECT p.ProgramName, SUM(v.Hours) as TotalHours\nFROM VolunteerHours v\nJOIN Programs p ON v.ProgramID = p.ProgramID\nWHERE v.HourDate BETWEEN '2021-04-01' AND '2021-06-3"
), 0), (Example({'sql_prompt': 'What is the maximum production capacity of the chemical manufacturing plants located in Canada?', 'sql_context': "CREATE TABLE chemical_plants (id INT, plant_name VARCHAR(100), country VARCHAR(50), production_capacity INT); INSERT INTO chemical_plants (id, plant_name, country, production_capacity) VALUES (1, 'Canada Plant 1', 'Canada', 5000), (2, 'Canada Plant 2', 'Canada', 7000);", 'sql': "SELECT MAX(production_capacity) FROM chemical_plants WHERE country = 'Canada';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='produce the SQL. We need to filter plants located in Canada first and then find the maximum production capacity among them.',
    sql="SELECT MAX(production_capacity) FROM chemical_plants WHERE country = 'Canada';"
), 1), (Example({'sql_prompt': 'Who is the oldest artist from the United States?', 'sql_context': "CREATE TABLE artists (id INT, name VARCHAR(255), age INT, country VARCHAR(255)); INSERT INTO artists (id, name, age, country) VALUES (1, 'Bruce Springsteen', 72, 'United States'), (2, 'Beyoncé', 40, 'United States');", 'sql': "SELECT name, MAX(age) FROM artists WHERE country = 'United States';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='produce the sql.\n\n1. First, we need to filter artists from the United States.\n2. Then, among those artists, we should find the one with the highest age.',
    sql="SELECT name FROM artists WHERE country = 'United States' ORDER BY age DESC LIMIT 1;"
), 0), (Example({'sql_prompt': 'Find the average height of basketball players in the NBA, categorized by their position.', 'sql_context': 'CREATE TABLE nba_players_height (id INT, player_id INT, height_feet INT, height_inches INT); CREATE TABLE nba_players (id INT, name VARCHAR(100), team VARCHAR(50), position VARCHAR(50));', 'sql': 'SELECT position, AVG(height_feet + height_inches / 12) as avg_height FROM nba_players_height JOIN nba_players ON nba_players_height.player_id = nba_players.id GROUP BY position;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${produce the sql}. We first need to join the `nba_players_height` table with the `nba_players` table using their respective IDs. Then, we can filter for players whose positions are 'Center', 'Power Forward', 'Small Forward', 'Point Guard', and 'Shooting Guard'. After that, we calculate the average height of these players by summing up all heights in feet and inches, converting them to a single unit (e.g., centimeters or inches), and then dividing by the count of players.",
    sql='SELECT AVG(average_height) FROM (\n    SELECT \n        nba_players.position,\n        ((nba_players_height.height_feet * 12 + nba_players_height.height_inches) /'
), 0), (Example({'sql_prompt': 'Identify all suppliers who provide non-GMO ingredients to restaurants with Michelin stars.', 'sql_context': 'CREATE TABLE Suppliers (id INT, name VARCHAR(50), isNonGMO BOOLEAN); CREATE TABLE Restaurants (id INT, name VARCHAR(50), numStars INT); CREATE TABLE Ingredients (supplierId INT, restaurantId INT, isNonGMO BOOLEAN);', 'sql': 'SELECT Suppliers.name FROM Suppliers INNER JOIN Ingredients ON Suppliers.id = Ingredients.supplierId INNER JOIN Restaurants ON Ingredients.restaurantId = Restaurants.id WHERE Restaurants.numStars > 2 AND Ingredients.isNonGMO = TRUE;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${identify all suppliers who provide non-GMO ingredients to restaurants with Michelin stars}. We need to find the intersection of suppliers that are providing non-GMO ingredients and have supplied those ingredients to restaurants with at least one Michelin star.',
    sql='SELECT DISTINCT Suppliers.name FROM Suppliers \nJOIN Ingredients ON Suppliers.id = Ingredients.supplierId\nJOIN Restaurants ON Ingredients.restaurantId = Restaurants.id\nWHERE Suppliers.isNonGMO = TRUE AND Restaurants.numStars >= 1;'
), 0), (Example({'sql_prompt': 'How many licenses were issued in each state as of 2022-01-01?', 'sql_context': "CREATE TABLE Licenses (id INT, state TEXT, issued_date DATE); INSERT INTO Licenses (id, state, issued_date) VALUES (1, 'California', '2021-01-01'), (2, 'Oregon', '2021-01-01'), (3, 'Washington', '2021-01-01');", 'sql': "SELECT state, COUNT(*) AS num_licenses FROM Licenses WHERE issued_date <= '2022-01-01' GROUP BY state;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='produce the sql. We need to filter licenses issued as of 2022-01-01 and then group them by state.',
    sql="SELECT state, COUNT(id) FROM Licenses WHERE issued_date = '2022-01-01' GROUP BY state;"
), 1), (Example({'sql_prompt': 'What is the number of smart city initiatives implemented in each country?', 'sql_context': "CREATE TABLE smart_city_initiatives (initiative_id INT, country VARCHAR(50), city VARCHAR(100), status VARCHAR(50)); INSERT INTO smart_city_initiatives (initiative_id, country, city, status) VALUES (1, 'France', 'Paris', 'Implemented');", 'sql': "SELECT country, COUNT(*) as implemented_initiatives FROM smart_city_initiatives WHERE status = 'Implemented' GROUP BY country;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We need to count the number of initiatives for each country. The `smart_city_initiatives` table contains information about these initiatives.',
    sql='SELECT country, COUNT(*) as num_initiatives FROM smart_city_initiatives GROUP BY country;'
), 0), (Example({'sql_prompt': "How many tickets were sold for each team's away games in Q2 of 2022?", 'sql_context': "CREATE TABLE teams (id INT, name VARCHAR(255)); INSERT INTO teams (id, name) VALUES (1, 'TeamA'), (2, 'TeamB'), (3, 'TeamC'); CREATE TABLE games (id INT, home_team_id INT, away_team_id INT, home_team_score INT, away_team_score INT, price DECIMAL(5,2), game_date DATE); CREATE VIEW away_games AS SELECT id, away_team_id, price, game_date FROM games;", 'sql': "SELECT t.name, COUNT(*) as tickets_sold FROM away_games h JOIN teams t ON h.away_team_id = t.id WHERE h.game_date BETWEEN '2022-04-01' AND '2022-06-30' GROUP BY t.name;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We need to:\n\n1. Select the `away_team_id` from the `away_games` view.\n2. Join this with the `teams` table on the `away_team_id`.\n3. Filter for games where the `game_date` is within Q2 of 2022 (April, May, or June).\n4. Group by `teams.name` to count the number of tickets sold.',
    sql="SELECT teams.name, COUNT(*) as num_tickets_sold FROM away_games JOIN teams ON away_games.away_team_id = teams.id WHERE game_date BETWEEN '2022-04-01' AND '2022-06-30' GROUP BY teams.name;"
), 1), (Example({'sql_prompt': 'Show the names of companies that produced any Rare Earth elements in both 2015 and 2020.', 'sql_context': 'CREATE TABLE Producers (ProducerID INT PRIMARY KEY, Name TEXT, ProductionYear INT, RareEarth TEXT, Quantity INT);', 'sql': 'SELECT DISTINCT Name FROM Producers p1 JOIN Producers p2 ON p1.Name = p2.Name WHERE p1.ProductionYear = 2015 AND p2.ProductionYear = 2020;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${produce the sql}. We need to find companies that produced any Rare Earth elements in both 2015 and 2020. First, we will select all unique company names from the table where production year is either 2015 or 2020 and there's at least one row for each of these years with a non-zero quantity of Rare Earth elements.",
    sql='SELECT DISTINCT Name FROM Producers WHERE (ProductionYear = 2015 AND Quantity > 0) OR (ProductionYear = 2020 AND Quantity > 0);'
), 0), (Example({'sql_prompt': 'What is the total CO2 emissions of silk production in China?', 'sql_context': 'CREATE TABLE SilkProduction (id INT, country VARCHAR, co2_emissions INT);', 'sql': "SELECT SUM(co2_emissions) FROM SilkProduction WHERE country = 'China';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${produce the sql}. We need to select the `co2_emissions` column from the `SilkProduction` table. The specific condition is that the `country` should be 'China'. Therefore, we can use a WHERE clause to filter out the rows where country equals 'China'.",
    sql="SELECT co2_emissions FROM SilkProduction WHERE country = 'China';"
), 0), (Example({'sql_prompt': 'What is the total number of AI models developed in North America with an explainability score below 70?', 'sql_context': "CREATE TABLE na_models (model_name TEXT, region TEXT, explainability_score INTEGER); INSERT INTO na_models (model_name, region, explainability_score) VALUES ('Model1', 'North America', 75), ('Model2', 'North America', 65), ('Model3', 'North America', 80);", 'sql': "SELECT SUM(incident_count) FROM na_models WHERE region = 'North America' AND explainability_score < 70;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We need to filter out AI models developed in North America with an explainability score below 70.',
    sql="SELECT COUNT(*) FROM na_models WHERE region = 'North America' AND explainability_score < 70;"
), 1), (Example({'sql_prompt': 'Which mobile and broadband subscribers have not used their services in the last 30 days?', 'sql_context': "CREATE TABLE mobile_usage (customer_id INT, last_usage DATE); CREATE TABLE broadband_usage (customer_id INT, last_usage DATE); INSERT INTO mobile_usage (customer_id, last_usage) VALUES (1, '2022-01-01'), (2, '2022-02-01'); INSERT INTO broadband_usage (customer_id, last_usage) VALUES (1, '2022-01-15'), (3, '2022-02-10');", 'sql': 'SELECT customer_id FROM mobile_usage WHERE last_usage < NOW() - INTERVAL 30 DAY UNION SELECT customer_id FROM broadband_usage WHERE last_usage < NOW() - INTERVAL 30 DAY;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${produce the sql}. We need to find customers who have not used their mobile or broadband services in the last 30 days. This means we should look for customers with a `last_usage` date that is more than 30 days ago.\n\nFirst, let's select all rows from both tables where the `last_usage` date is older than '2022-01-01' (which represents 30 days before the current date). Then we'll use UNION to combine these results since a customer might have data in either mobile_usage or broadband_usage table.",
    sql="SELECT * FROM (\n    SELECT * FROM mobile_usage WHERE last_usage < '2022-01-01'\n    UNION"
), 0), (Example({'sql_prompt': 'What is the total number of grants given per city?', 'sql_context': 'CREATE TABLE Nonprofits (NonprofitID INT, Name VARCHAR(50), City VARCHAR(50), State VARCHAR(2), Zip VARCHAR(10), MissionStatement TEXT); CREATE TABLE Grants (GrantID INT, DonorID INT, NonprofitID INT, GrantAmount DECIMAL(10,2), Date DATE); CREATE TABLE Donors (DonorID INT, Name VARCHAR(50), City VARCHAR(50), State VARCHAR(2), Zip VARCHAR(10), DonationAmount DECIMAL(10,2));', 'sql': 'SELECT City, COUNT(*) FROM Grants G INNER JOIN Nonprofits N ON G.NonprofitID = N.NonprofitID GROUP BY City;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We need to join the `Grants` and `Nonprofits` tables on `NonprofitID`, then group by city from the `Nonprofits` table. To calculate the total number of grants given per city, we will sum up the `GrantID` column.',
    sql='SELECT Nonprofits.City, COUNT(Grants.GrantID) AS TotalGrants FROM Grants JOIN Nonprofits ON Grants.NonprofitID = Nonprofits.NonprofitID GROUP BY Nonprofits.City;'
), 1), (Example({'sql_prompt': 'Show the average soil moisture level for each field in the past week', 'sql_context': 'CREATE TABLE field (id INT, name VARCHAR(255), farm_id INT);CREATE TABLE soil_moisture (id INT, field_id INT, measurement DATE, level INT);', 'sql': 'SELECT field_id, AVG(level) FROM soil_moisture WHERE measurement >= DATEADD(day, -7, GETDATE()) GROUP BY field_id;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We need to filter data for the past week first. Then we join the `field` and `soil_moisture` tables based on their respective IDs. After that, we group the results by field name and calculate the average soil moisture level.',
    sql='SELECT field.name, AVG(soil_moisture.level) FROM field JOIN soil_moisture ON field.id = soil_moisture.field_id WHERE soil_moisture.measurement BETWEEN DATE_SUB(CURDATE(), INTERVAL 7 DAY) AND CURDATE() GROUP BY field.name;'
), 1), (Example({'sql_prompt': 'What is the total number of satellites deployed by SpaceComm in the Middle East?', 'sql_context': 'CREATE TABLE SatelliteDeployment (satellite_id INT, company VARCHAR(255), region VARCHAR(255));', 'sql': "SELECT COUNT(*) FROM SatelliteDeployment WHERE company = 'SpaceComm' AND region = 'Middle East';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="produce the SQL. We need to find all satellite deployments made by 'SpaceComm' in the 'Middle East'.",
    sql="SELECT COUNT(*) FROM SatelliteDeployment WHERE company = 'SpaceComm' AND region = 'Middle East';"
), 1), (Example({'sql_prompt': 'What is the total number of tickets sold for performances with a rating of 5?', 'sql_context': "CREATE TABLE performance (id INT PRIMARY KEY, name VARCHAR(255), date DATE, artist_id INT, rating INT); INSERT INTO performance (id, name, date, artist_id, rating) VALUES (1, 'Dance Recital', '2022-03-01', 1, 5);", 'sql': 'SELECT SUM(t.quantity) as total_tickets_sold FROM performance p INNER JOIN ticket t ON p.id = t.performance_id WHERE p.rating = 5;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${produce the sql}. We need to find all performances with a rating of 5 and then count the number of tickets sold for those performances. The 'tickets' table is not provided in the context, so we can only use the information from the 'performance' table.",
    sql='SELECT COUNT(*) FROM performance WHERE rating = 5;'
), 0), (Example({'sql_prompt': 'What is the average emergency response time by region for fire incidents?', 'sql_context': 'CREATE TABLE Regions (RegionID INT, RegionName VARCHAR(255)); CREATE TABLE Incidents (IncidentID INT, IncidentType VARCHAR(255), RegionID INT, ResponseTime INT);', 'sql': "SELECT AVG(ResponseTime) as AvgResponseTime, RegionName FROM Incidents i JOIN Regions r ON i.RegionID = r.RegionID WHERE IncidentType = 'Fire' GROUP BY RegionName;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We need to find the average emergency response time for fire incidents across different regions. First, we should filter out only the fire incidents from the `Incidents` table. Then, we join this filtered data with the `Regions` table on the `RegionID` column to get the region name for each incident. Finally, we calculate the average response time grouped by region.',
    sql="SELECT Regions.RegionName, AVG(Incidents.ResponseTime) AS AverageResponseTime FROM Incidents JOIN Regions ON Incidents.RegionID = Regions.RegionID WHERE Incidents.IncidentType = 'Fire' GROUP BY Regions.RegionName;"
), 1), (Example({'sql_prompt': "What is the average revenue of virtual tours in 'Spain'?", 'sql_context': "CREATE TABLE virtual_tours (id INT, name TEXT, country TEXT, revenue FLOAT); INSERT INTO virtual_tours (id, name, country, revenue) VALUES (1, 'Virtual Barcelona Tour', 'Spain', 2000);", 'sql': "SELECT AVG(revenue) FROM virtual_tours WHERE country = 'Spain';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='produce the SQL. We need to find the average revenue of virtual tours in Spain.',
    sql="SELECT AVG(revenue) FROM virtual_tours WHERE country = 'Spain';"
), 1), (Example({'sql_prompt': 'What is the total number of students and staff with accommodations in the "disability_services" schema, excluding the "accessibility_parking" type?', 'sql_context': 'CREATE SCHEMA disability_services; CREATE TABLE staff (id INT, name VARCHAR(50), accommodation VARCHAR(50)); CREATE TABLE students (id INT, name VARCHAR(50), accommodation VARCHAR(50));', 'sql': "SELECT COUNT(*) FROM disability_services.staff WHERE accommodation != 'accessibility_parking' UNION SELECT COUNT(*) FROM disability_services.students WHERE accommodation != 'accessibility_parking';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${produce the sql}. We need to:\n\n1. Select all records from both 'staff' and 'students' tables.\n2. Filter out records where the 'accommodation' field is not equal to 'accessibility_parking'.\n3. Sum up the count of distinct 'id's for both staff and students.",
    sql="```sql\nSELECT COUNT(DISTINCT CASE WHEN T1.accommodation != 'accessibility_parking' THEN T1.id ELSE NULL END) + COUNT(DISTINCT CASE WHEN T2.accommodation != 'accessibility_parking' THEN T2.id ELSE NULL END) AS total_accommodated FROM disability_services.staff AS T1 UNION SELECT disability_services.students.id FROM disability_services.students WHERE accommodation !="
), 0), (Example({'sql_prompt': 'What is the number of electric trams in service in Istanbul in 2021?', 'sql_context': "CREATE TABLE electric_trams (tram_id INT, service_date DATE, in_service INT); INSERT INTO electric_trams (tram_id, service_date, in_service) VALUES (1, '2021-01-01', 1), (2, '2021-01-02', 1), (3, '2021-01-03', 0);", 'sql': "SELECT COUNT(*) FROM electric_trams WHERE in_service = 1 AND service_date BETWEEN '2021-01-01' AND '2021-12-31';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='produce the sql. We need to find out how many electric trams were in service on any date in Istanbul in 2021.',
    sql="SELECT SUM(in_service) FROM electric_trams WHERE service_date BETWEEN '2021-01-01' AND '2021-12-31';"
), 1), (Example({'sql_prompt': "What is the total number of trips taken on accessible vehicles in the 'East' region for the current year?", 'sql_context': "CREATE TABLE Vehicles (VehicleID int, VehicleType varchar(255), Region varchar(255)); INSERT INTO Vehicles (VehicleID, VehicleType, Region) VALUES (1, 'Bus', 'East'), (2, 'Tram', 'West'), (3, 'Wheelchair Bus', 'South'), (4, 'Accessible Tram', 'East'); CREATE TABLE Trips (TripID int, VehicleID int, TripDateTime datetime);", 'sql': "SELECT COUNT(*) FROM Vehicles JOIN Trips ON Vehicles.VehicleID = Trips.VehicleID WHERE Vehicles.Region = 'East' AND Vehicles.VehicleType IN ('Wheelchair Bus', 'Accessible Tram') AND YEAR(Trips.TripDateTime) = YEAR(GETDATE());"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${produce the sql}. We need to find trips taken on accessible vehicles in the 'East' region for the current year. First, we should identify which vehicles are considered 'accessible'. In this case, 'Accessible Tram' and 'Wheelchair Bus' are marked as accessible. Then, we join the Vehicles table with the Trips table using VehicleID to find trips made by these accessible vehicles. Finally, we filter for trips in the 'East' region and check if the TripDateTime is within the current year.",
    sql="SELECT COUNT(Trips.TripID) FROM Trips JOIN Vehicles ON Trips.VehicleID = Vehicles.VehicleID WHERE Vehicles.Region = 'East' AND (Vehicles.VehicleType = 'Accessible Tram"
), 0), (Example({'sql_prompt': 'Identify the suppliers with the highest and lowest sustainability ratings in the supplier_ratings table.', 'sql_context': 'CREATE TABLE supplier_ratings (supplier_id INT, sustainability_rating INT); INSERT INTO supplier_ratings (supplier_id, sustainability_rating) VALUES (100, 95), (101, 60), (102, 90);', 'sql': 'SELECT supplier_id, sustainability_rating FROM (SELECT supplier_id, sustainability_rating, RANK() OVER (ORDER BY sustainability_rating DESC) AS rank, RANK() OVER (ORDER BY sustainability_rating ASC) AS reverse_rank FROM supplier_ratings) WHERE rank = 1 OR reverse_rank = 1;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${produce the sql}. We need to find both the highest and lowest sustainability ratings. First, we'll select all suppliers' IDs along with their ratings using a SELECT statement on the `supplier_ratings` table. Then, we can use MIN() and MAX() functions to identify the lowest and highest ratings respectively. To get the supplier IDs associated with these ratings, we can use subqueries in our main query.",
    sql='```sql\nSELECT \n    supplier_id,\n    sustainability_rating\nFROM \n    supplier_ratings\nWHERE \n    (sustainability_rating = (SELECT MIN(sustainability_rating) FROM supplier_ratings), \n     sustainability_rating = (SELECT MAX(sustainability_rating) FROM supplier_ratings));\n```'
), 0), (Example({'sql_prompt': 'What is the total amount of socially responsible loans issued to women in 2021?', 'sql_context': 'CREATE TABLE socially_responsible_lending (id INT PRIMARY KEY, loan_amount DECIMAL(10, 2), borrower_gender TEXT, lending_date DATE);', 'sql': "SELECT SUM(loan_amount) FROM socially_responsible_lending WHERE borrower_gender = 'Female' AND lending_date BETWEEN '2021-01-01' AND '2021-12-31';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We need to filter out loans issued to women and those made in the year 2021. Then we sum up the loan amounts for these filtered records.',
    sql="SELECT SUM(loan_amount) FROM socially_responsible_lending WHERE borrower_gender = 'Women' AND lending_date BETWEEN '2021-01-01' AND '2021-12-31';"
), 1), (Example({'sql_prompt': 'What is the maximum energy efficiency rating of hydroelectric dams in Canada?', 'sql_context': "CREATE TABLE hydro_dams (id INT, name TEXT, country TEXT, energy_efficiency_rating FLOAT); INSERT INTO hydro_dams (id, name, country, energy_efficiency_rating) VALUES (1, 'Robert-Bourassa', 'Canada', 0.94), (2, 'Churchill Falls', 'Canada', 0.92);", 'sql': "SELECT MAX(energy_efficiency_rating) FROM hydro_dams WHERE country = 'Canada';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="produce the sql.\n\n1. Identify the table that contains information about hydroelectric dams.\n   - The table is `hydro_dams`.\n2. Determine which columns are needed for the query.\n   - We need `energy_efficiency_rating` and `country`.\n3. Filter the results to only include dams in Canada (`country = 'Canada'`).\n4. Find the maximum energy efficiency rating among these dams.",
    sql="SELECT MAX(energy_efficiency_rating) FROM hydro_dams WHERE country = 'Canada';"
), 1), (Example({'sql_prompt': 'How many streams did each song by an artist get in a given month?', 'sql_context': "CREATE TABLE Songs (id INT, artist_id INT, title VARCHAR(50)); CREATE TABLE Streams (id INT, song_id INT, date DATE, streams INT); INSERT INTO Songs (id, artist_id, title) VALUES (1, 1, 'Shake it Off'), (2, 1, 'Blank Space'), (3, 2, 'Humble'), (4, 2, 'DNA'); INSERT INTO Streams (id, song_id, date, streams) VALUES (1, 1, '2022-01-01', 1000), (2, 1, '2022-01-02', 1500), (3, 2, '2022-01-01', 2000), (4, 2, '2022-01-02', 2500), (5, 3, '2022-01-01', 3000), (6, 3, '2022-01-02', 3500), (7, 4, '2022-01-01', 4000), (8, 4, '2022-01-02', 4500);", 'sql': "SELECT s.title, SUM(s.streams) as total_streams FROM Songs s JOIN Streams st ON s.id = st.song_id WHERE st.date BETWEEN '2022-01-01' AND '2022-01-31' GROUP BY s.title;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Answer the SQL query for "How many streams did each song by an artist get in a given month?".\n\n**Step 1:** Identify the relevant tables and their relationships. We have two tables, `Songs` and `Streams`. The relationship is that songs are linked to streams through their IDs.\n\n**Step 2:** Understand the question\'s requirements. It asks for the number of streams each song received in a given month. This means we need to group by both `song_id` (from `Songs`) and the month part of the date (`date` from `Streams`). \n\n**Step 3:** Write down the SQL query based on these steps:\n\n```sql\nSELECT \n    s.title AS Song_Title,\n    EXTRACT(YEAR',
    sql="```sql\nSELECT \n    s.title AS Song_Title,\n    EXTRACT(YEAR FROM Streams.date) AS Year,\n    EXTRACT(MONTH FROM Streams.date) AS Month,\n    COUNT(Streams.streams) AS Total_Streams\nFROM Songs s\nJOIN Streams ON s.id = Streams.song_id\nWHERE EXTRACT(YEAR FROM Streams.date) = '2022' AND EXTRACT(MONTH FROM Streams.date) = '1'\nGROUP BY Song_Title, Year, Month;\n```"
), 0), (Example({'sql_prompt': 'What is the total number of security incidents for each department in the organization?', 'sql_context': 'CREATE TABLE incident (incident_id INT, incident_date DATE, incident_description TEXT, department_id INT);CREATE TABLE department (department_id INT, department_name VARCHAR(255));', 'sql': 'SELECT d.department_name, COUNT(i.incident_id) AS incident_count FROM incident i JOIN department d ON i.department_id = d.department_id GROUP BY d.department_name;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We need to join the `incident` table with the `department` table on the `department_id` column. Then we can group the results by `department_name` and use the COUNT function to count the number of incidents for each department.',
    sql='SELECT department.department_name, COUNT(incident.incident_id) as total_incidents FROM incident JOIN department ON incident.department_id = department.department_id GROUP BY department.department_name;'
), 1), (Example({'sql_prompt': 'What is the market spend on sustainable tourism initiatives in Japan between 2017 and 2019?', 'sql_context': "CREATE TABLE sustainable_tourism_initiatives(initiative_id INT, name TEXT, country TEXT, start_year INT, end_year INT, market_spend INT);INSERT INTO sustainable_tourism_initiatives (initiative_id, name, country, start_year, end_year, market_spend) VALUES (1, 'Eco-friendly hotels in Tokyo', 'Japan', 2017, 2019, 5000000), (2, 'Sustainable transport in Kyoto', 'Japan', 2018, 2019, 7000000), (3, 'Carbon offsetting in Osaka', 'Japan', 2017, 2018, 3000000);", 'sql': "SELECT SUM(market_spend) FROM sustainable_tourism_initiatives WHERE country = 'Japan' AND start_year BETWEEN 2017 AND 2019;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We need to filter initiatives that are located in Japan and have a start year between 2017 and 2019. Then we sum up their market spends.',
    sql="SELECT SUM(market_spend) FROM sustainable_tourism_initiatives WHERE country = 'Japan' AND (start_year BETWEEN 2017 AND 2019);"
), 1), (Example({'sql_prompt': 'What is the percentage of hotels in Europe that offer virtual tours?', 'sql_context': "CREATE TABLE hotel_features (hotel_id INT, hotel_name TEXT, virtual_tour INT, country TEXT); INSERT INTO hotel_features (hotel_id, hotel_name, virtual_tour, country) VALUES (1, 'Hotel A', 1, 'France'), (2, 'Hotel B', 0, 'Germany'), (3, 'Hotel C', 1, 'Italy'), (4, 'Hotel D', 0, 'France'), (5, 'Hotel E', 1, 'Spain');", 'sql': "SELECT (COUNT(*) FILTER (WHERE virtual_tour = 1) * 100.0 / COUNT(*)) AS percentage FROM hotel_features WHERE country = 'Europe';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We need to find out how many hotels offer virtual tours and divide it by the total number of hotels in Europe.',
    sql="SELECT \n    CAST(SUM(CASE WHEN virtual_tour = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) as percentage\nFROM hotel_features\nWHERE country IN ('France', 'Germany', 'Italy', 'Spain');"
), 1), (Example({'sql_prompt': 'What are the ethical AI principles for the technology projects in India?', 'sql_context': "CREATE TABLE EthicalAI (principle_id INT, principle_name VARCHAR(50), project_location VARCHAR(20)); INSERT INTO EthicalAI (principle_id, principle_name, project_location) VALUES (1, 'Fairness', 'India'), (2, 'Accountability', 'India'), (3, 'Transparency', 'India'), (4, 'Data Minimization', 'India'), (5, 'Explainability', 'India'), (6, 'Human Oversight', 'India');", 'sql': "SELECT principle_name FROM EthicalAI WHERE project_location = 'India';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${produce the sql}. We need to select the principle_name from the EthicalAI table where project_location is 'India'.",
    sql="SELECT principle_name FROM EthicalAI WHERE project_location = 'India';"
), 1), (Example({'sql_prompt': 'What is the total mass of all spacecraft manufactured by SpaceX?', 'sql_context': "CREATE TABLE Spacecraft (SpacecraftID INT, SpacecraftName VARCHAR(50), Manufacturer VARCHAR(50), Mass FLOAT); INSERT INTO Spacecraft (SpacecraftID, SpacecraftName, Manufacturer, Mass) VALUES (1, 'SpaceX Dragon', 'SpaceX', 10000), (2, 'Orion', 'Lockheed Martin', 20000), (3, 'Starliner', 'Boeing', 15000);", 'sql': "SELECT SUM(Mass) FROM Spacecraft WHERE Manufacturer = 'SpaceX';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${produce the sql}. We need to select the total mass of spacecraft manufactured by SpaceX. First, we should filter out the rows where the manufacturer is 'SpaceX'. Then, we can sum up the Mass column for those filtered rows.",
    sql="SELECT SUM(Mass) FROM Spacecraft WHERE Manufacturer = 'SpaceX';"
), 1), (Example({'sql_prompt': "What is the total age of 'stone' artifacts in 'american_archaeology'?", 'sql_context': 'CREATE TABLE american_archaeology (id INT, site_name VARCHAR(50), artifact_name VARCHAR(50), age INT, material VARCHAR(20));', 'sql': "SELECT SUM(age) FROM american_archaeology WHERE material = 'stone';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${produce the sql}. We need to filter artifacts that are made of 'stone' and belong to 'american_archaeology'. Then we sum up their ages.",
    sql="SELECT SUM(age) FROM american_archaeology WHERE material = 'stone' AND site_name LIKE 'american_archaeology%';"
), 1), (Example({'sql_prompt': 'What is the average hotel price for beachfront hotels in Mexico?', 'sql_context': "CREATE TABLE hotels (hotel_id INT, name TEXT, country TEXT, has_beachfront BOOLEAN, price INT); INSERT INTO hotels (hotel_id, name, country, has_beachfront, price) VALUES (1, 'Beach Palace', 'Mexico', true, 200), (2, 'Green Valley', 'USA', false, 150);", 'sql': "SELECT AVG(price) FROM hotels WHERE has_beachfront = true AND country = 'Mexico';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We need to filter hotels that are beachfront and located in Mexico. Then we calculate the average price of these hotels.',
    sql="SELECT AVG(price) FROM hotels WHERE country = 'Mexico' AND has_beachfront = true;"
), 1), (Example({'sql_prompt': 'List all instructors and number of students they support with accommodations.', 'sql_context': 'CREATE TABLE Instructors (id INT, name VARCHAR(50), title VARCHAR(50));', 'sql': 'SELECT i.name, COUNT(a.student_id) as supported_students FROM Instructors i JOIN Accommodations a ON i.id = a.instructor_id GROUP BY i.name;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="produce the sql. We need to find out which instructors are supporting students with accommodations. First, we should identify all instructors who have a role related to student support or accommodations. However, based on the provided context, there is no direct information about instructors supporting students with accommodations. Therefore, we will assume that any instructor in our dataset could potentially be supporting students with accommodations.\n\nNext, we need to count the number of students each instructor supports. To do this, we'll join the `Instructors` table with a hypothetical `StudentSupport` table (which is not provided but assumed for the sake of this query) on an instructor ID that indicates they are providing support. Since there's no such table or column in the given context, we will create",
    sql='SELECT Instructors.name, COUNT(StudentSupport.student_id) as num_students_supported\nFROM Instructors\nLEFT JOIN StudentSupport ON Instructors.id = StudentSupport.instructor_id\nGROUP BY Instructors.name;'
), 1), (Example({'sql_prompt': "What is the total fare collected from bus routes that start with the letter 'B'?", 'sql_context': "CREATE TABLE bus_trips (trip_id INT, route_id INT, fare FLOAT); INSERT INTO bus_trips (trip_id, route_id, fare) VALUES (1, 101, 2.5), (2, 202, 3.0), (3, 303, 1.5), (4, 404, 2.0), (5, 505, 2.5), (6, 106, 3.0); CREATE TABLE bus_routes (route_id INT, route_name TEXT, starting_letter TEXT); INSERT INTO bus_routes (route_id, route_name, starting_letter) VALUES (101, 'Broadway', 'B'), (202, 'Park Ave', 'P'), (303, 'Lakeshore', 'L'), (404, 'Sunset Blvd', 'S'), (505, 'Beverly Hills', 'B');", 'sql': "SELECT SUM(bt.fare) FROM bus_trips bt JOIN bus_routes br ON bt.route_id = br.route_id WHERE br.starting_letter = 'B';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${produce the sql}. We need to find all bus routes that start with the letter 'B' first. This can be done using a WHERE clause with the condition `starting_letter = 'B'` on the `bus_routes` table. Then, we join this result with the `bus_trips` table based on the common column `route_id`. Finally, to get the total fare collected from these routes, we sum up the `fare` column in the `bus_trips` table.\n\nSQL Query:\n```sql\nSELECT SUM(bt.fare) AS total_fare_collected\nFROM bus_routes br\nJOIN bus_trips bt ON br.route_id = bt.route_id\nWHERE br.starting_letter = 'B';\n```",
    sql="```sql\nSELECT SUM(bt.fare) AS total_fare_collected \nFROM bus_routes br \nJOIN bus_trips bt ON br.route_id = bt.route_id \nWHERE br.starting_letter = 'B';\n```"
), 1), (Example({'sql_prompt': 'What is the percentage of total revenue from streaming and concert ticket sales for Pop music in 2018?', 'sql_context': 'CREATE TABLE StreamingRevenue (id INT, year INT, genre VARCHAR(50), revenue FLOAT); CREATE TABLE ConcertTicketSales (id INT, year INT, genre VARCHAR(50), revenue FLOAT);', 'sql': "SELECT (SUM(sr.revenue) + SUM(cts.revenue)) / (SELECT SUM(revenue) FROM (SELECT revenue FROM StreamingRevenue WHERE year = 2018 UNION ALL SELECT revenue FROM ConcertTicketSales WHERE year = 2018) t) FROM StreamingRevenue sr JOIN ConcertTicketSales cts ON sr.genre = cts.genre WHERE sr.year = 2018 AND sr.genre = 'Pop';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We need to first find out the total streaming and concert ticket sales for Pop music in 2018. Then we will calculate the sum of these two revenues, which represents the total revenue from streaming and concert tickets for Pop music in 2018. After that, we can divide this total by the overall total revenue to get the percentage.',
    sql="SELECT \n    (SUM(StreamingRevenue.revenue) + SUM(ConcertTicketSales.revenue)) * 100 / (\n        SELECT SUM(revenue)\n        FROM StreamingRevenue\n        WHERE year = 2018 AND genre = 'Pop'\n    ) AS PercentageOfTotalRevenue\nFROM StreamingRevenue, ConcertTicketSales\nWHERE"
), 0), (Example({'sql_prompt': 'What is the total defense spending by countries in Oceania in 2018?', 'sql_context': "CREATE TABLE defense_spending (country VARCHAR(50), continent VARCHAR(50), year INT, amount FLOAT); INSERT INTO defense_spending (country, continent, year, amount) VALUES ('Australia', 'Oceania', 2018, 750.3), ('New Zealand', 'Oceania', 2018, 23.4), ('Papua New Guinea', 'Oceania', 2018, 6.7);", 'sql': "SELECT SUM(amount) FROM defense_spending WHERE continent = 'Oceania' AND year = 2018;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We need to filter out countries located in Oceania and the year 2018 from the `defense_spending` table, then sum up their defense spending.',
    sql="SELECT SUM(amount) FROM defense_spending WHERE continent = 'Oceania' AND year = 2018;"
), 1), (Example({'sql_prompt': 'What is the total number of refugee families supported by each NGO in the last 6 months?', 'sql_context': "CREATE TABLE NGOs (NGOID int, NGOName varchar(50)); INSERT INTO NGOs (NGOID, NGOName) VALUES (1, 'International Rescue Committee'), (2, 'Save the Children'); CREATE TABLE RefugeeSupport (SupportID int, NGOID int, FamilyID int, SupportDate date); INSERT INTO RefugeeSupport (SupportID, NGOID, FamilyID, SupportDate) VALUES (1, 1, 1, '2022-01-01'), (2, 1, 2, '2022-02-01'), (3, 2, 1, '2022-03-01');", 'sql': 'SELECT NGOName, COUNT(DISTINCT FamilyID) as SupportedFamilies FROM NGOs INNER JOIN RefugeeSupport ON NGOs.NGOID = RefugeeSupport.NGOID WHERE SupportDate >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY NGOName;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We need to find out how many refugee families each NGO has supported within the last 6 months. First, we should filter the records from `RefugeeSupport` table where the `SupportDate` is between the current date minus 6 months and the current date. Then, we join this filtered data with the `NGOs` table on the `NGOID` column to get the name of each NGO. Finally, we group by `NGOName` to count the number of families supported by each NGO.\n\n```sql\nSELECT \n    NGOs.NGOName,\n    COUNT(RefugeeSupport.FamilyID) as TotalFamiliesSupported\nFROM \n    NGOs\nJOIN \n    RefugeeSupport ON NGOs',
    sql="NGOID = RefugeeSupport.NGOID WHERE Refugeesupport.SupportDate BETWEEN CURRENT_DATE - INTERVAL '6 MONTH' AND CURRENT_DATE GROUP BY NGOs.NGOName;"
), 0), (Example({'sql_prompt': "Which regulatory frameworks have been implemented in 'Country1'?", 'sql_context': "CREATE TABLE countries (id INT, name VARCHAR(255)); INSERT INTO countries (id, name) VALUES (1, 'Country1'); CREATE TABLE regulatory_frameworks (id INT, country_id INT, name VARCHAR(255)); INSERT INTO regulatory_frameworks (id, country_id, name) VALUES (1, 1, 'Framework1'); INSERT INTO regulatory_frameworks (id, country_id, name) VALUES (2, 1, 'Framework2'); INSERT INTO regulatory_frameworks (id, country_id, name) VALUES (3, 1, 'Framework3');", 'sql': "SELECT name FROM regulatory_frameworks WHERE country_id = (SELECT id FROM countries WHERE name = 'Country1');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${produce the sql}. We need to select the names of all the regulatory frameworks that have been implemented in 'Country1'. To do this, we first identify the country_id for 'Country1' from the countries table. Then, we join the regulatory_frameworks table with the countries table on the country_id column. Finally, we filter the results to only include rows where the name of the country is 'Country1'.",
    sql="SELECT regulatory_frameworks.name FROM regulatory_frameworks JOIN countries ON regulatory_frameworks.country_id = countries.id WHERE countries.name = 'Country1';"
), 1), (Example({'sql_prompt': 'What is the percentage of factories in each country that have implemented circular economy practices?', 'sql_context': "CREATE TABLE factory_circle (factory VARCHAR(255), country VARCHAR(255), practice VARCHAR(255)); INSERT INTO factory_circle (factory, country, practice) VALUES ('Factory1', 'Bangladesh', 'yes'), ('Factory2', 'Bangladesh', 'no'), ('Factory3', 'Bangladesh', 'yes'), ('Factory4', 'China', 'yes'), ('Factory5', 'China', 'no'), ('Factory6', 'India', 'no'), ('Factory7', 'India', 'yes'), ('Factory8', 'India', 'yes');", 'sql': "SELECT country, 100.0 * COUNT(*) FILTER (WHERE practice = 'yes') / COUNT(*) AS percentage FROM factory_circle GROUP BY country;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${produce the sql}. We first need to count the number of factories that have implemented circular economy practices for each country. Then, we'll calculate the total number of factories for each country. Finally, we will divide the number of factories with circular economy practices by the total number of factories and multiply it by 100 to get the percentage.",
    sql="SELECT \n    country,\n    (COUNT(CASE WHEN practice = 'yes' THEN factory END) * 100.0 / COUNT(factory)) AS percentage\nFROM \n    factory_circle\nGROUP BY \n    country;"
), 1)]