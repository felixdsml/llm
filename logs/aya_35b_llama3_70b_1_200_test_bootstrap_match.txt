[(Example({'sql_prompt': 'Delete records with sales amount over $50,000 in the MilitaryEquipmentSales table', 'sql_context': "CREATE TABLE MilitaryEquipmentSales (id INT, equipment_name VARCHAR(50), sale_amount INT, sale_date DATE); INSERT INTO MilitaryEquipmentSales (id, equipment_name, sale_amount, sale_date) VALUES (1, 'Fighter Jet', 45000, '2021-01-01'), (2, 'Tank', 75000, '2021-02-01');", 'sql': 'DELETE FROM MilitaryEquipmentSales WHERE sale_amount > 50000;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to delete records with sales amounts over $50,000 from the MilitaryEquipmentSales table:\n```sql\nDELETE FROM MilitaryEquipmentSales\nWHERE sale_amount > 50000;\n```\nThis query will remove all rows from the MilitaryEquipmentSales table where the sale amount is greater than $50,000.',
    sql='Here is the SQL query to delete records with sales amounts over $50,000 from the MilitaryEquipmentSales table:\n```sql\nDELETE FROM MilitaryEquipmentSales WHERE sale_amount > 50000;\n```\n\nThis query will remove all rows from the MilitaryEquipmentSales table where the sale amount is greater than $50,000.'
), 1), (Example({'sql_prompt': 'What is the average number of visitor reviews for heritage sites in each category?', 'sql_context': "CREATE TABLE HeritageSitesReviews (ID INT, SiteName VARCHAR(100), Category VARCHAR(50), Reviews INT); INSERT INTO HeritageSitesReviews (ID, SiteName, Category, Reviews) VALUES (1, 'Machu Picchu', 'Archaeological', 5000); INSERT INTO HeritageSitesReviews (ID, SiteName, Category, Reviews) VALUES (2, 'Taj Mahal', 'Architectural', 8000);", 'sql': 'SELECT Category, AVG(Reviews) OVER (PARTITION BY Category) AS AvgReviews FROM HeritageSitesReviews;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to find the average number of visitor reviews for heritage sites in each category:\n```sql\nSELECT Category, AVG(Reviews) AS AverageReviews\nFROM HeritageSitesReviews\nGROUP BY Category;\n```\n\nThis query selects the `Category` column and calculates the average of the `Reviews` column for each category using the `AVG` function. The `GROUP BY` clause groups the results by the `Category` column, so you get the average number of reviews for each heritage site category.',
    sql='Here is the SQL query to find the average number of visitor reviews for heritage sites in each category:\n```sql\nSELECT Category, AVG(Reviews) AS AverageReviews\nFROM HeritageSitesReviews\nGROUP BY Category;\n```\n\nThis query selects the `Category` column and calculates the average of the `Reviews` column for each category using the `AVG` function. The `GROUP BY` clause groups the results by the `Category` column, so you get the average number of reviews for each heritage site category.'
), 1), (Example({'sql_prompt': 'What is the total revenue from ads targeting users interested in veganism in Q3 2022?', 'sql_context': 'CREATE TABLE ads (id INT, user INT, platform VARCHAR(50), target VARCHAR(50), start_date DATE, end_date DATE, revenue DECIMAL(10, 2));', 'sql': "SELECT SUM(revenue) FROM ads WHERE target = 'veganism' AND platform IN ('Facebook', 'Instagram') AND start_date BETWEEN '2022-07-01' AND '2022-09-30';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to answer your question:\n```sql\nSELECT SUM(revenue) AS total_revenue\nFROM ads\nWHERE target = 'Veganism'\n  AND start_date BETWEEN '2022-07-01' AND '2022-09-30';\n```\n\nThis query sums up the `revenue` column from the `ads` table where the `target` is 'Veganism' and the `start_date` falls within the range of Q3 2022 (July to September). The result will give you the total revenue generated from ads targeting users interested in veganism during that quarter.",
    sql="Here is the SQL query to answer your question:\n```sql\nSELECT SUM(revenue) AS total_revenue\nFROM ads\nWHERE target = 'Veganism' AND start_date BETWEEN '2022-07-01' AND '2022-09-30';\n```\n\nThis query sums up the `revenue` column from the `ads` table where the `target` is 'Veganism' and the `start_date` falls within the range of Q3 2022 (July to September). The result will give you the total revenue generated from ads targeting users interested in veganism during that quarter."
), 1), (Example({'sql_prompt': 'What is the minimum duration of workouts for members who joined in 2019, grouped by gender?', 'sql_context': 'CREATE TABLE Workout (WorkoutID INT PRIMARY KEY, MemberID INT, Duration INT, Date DATE); CREATE TABLE Member (MemberID INT PRIMARY KEY, Age INT, Gender VARCHAR(10), MembershipStart DATE);', 'sql': "SELECT Member.Gender, MIN(Workout.Duration) FROM Workout INNER JOIN Member ON Workout.MemberID = Member.MemberID WHERE Member.MembershipStart BETWEEN '2019-01-01' AND '2019-12-31' GROUP BY Member.Gender;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query that answers the question you have described:\n```sql\nSELECT m.Gender, MIN(w.Duration) AS MinWorkoutDuration\nFROM Workout w\nJOIN Member m ON w.MemberID = m.MemberID\nWHERE YEAR(m.MembershipStart) = 2019\nGROUP BY m.Gender;\n```\n\nStep by step reasoning:\n1. We start by selecting the relevant columns from the "Workout" and "Member" tables.\n2. We use a JOIN operation to combine the two tables based on the common "MemberID" column.\n3. We filter the results using the WHERE clause to only include members who joined in 201',
    sql='Here is the SQL query that answers the question you have described:\n```sql\nSELECT m.Gender, MIN(w.Duration) AS MinWorkoutDuration\nFROM Workout w\nJOIN Member m ON w.MemberID = m.MemberID\nWHERE YEAR(m.MembershipStart) = 2019\nGROUP BY m.Gender;\n```\n\nStep by step reasoning:\n1. We start by selecting the relevant columns from the "Workout" and "Member" tables.\n2. We use a JOIN operation to combine the two tables based on the common "MemberID" column.\n3. We filter the results using the WHERE clause to only include members who joined in 201'
), 1), (Example({'sql_prompt': 'How many employees were hired in each month of 2022?', 'sql_context': "CREATE TABLE Employees (EmployeeID INT, HireDate DATE); INSERT INTO Employees (EmployeeID, HireDate) VALUES (1, '2022-01-15'); INSERT INTO Employees (EmployeeID, HireDate) VALUES (2, '2022-02-01');", 'sql': "SELECT EXTRACT(MONTH FROM HireDate) AS Month, COUNT(*) AS NumberOfHires FROM Employees WHERE HireDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY Month;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to find out how many employees were hired each month in 2022:\n```sql\nSELECT EXTRACT(MONTH FROM HireDate) AS Month, COUNT(*) AS NumberOfEmployees\nFROM Employees\nWHERE EXTRACT(YEAR FROM HireDate) = 2022\nGROUP BY EXTRACT(MONTH FROM HireDate)\nORDER BY Month;\n```\n\nStep by step reasoning:\n1. The `EXTRACT` function is used to get the month and year from the `HireDate` column.\n2. The `COUNT(*)` function counts the number of rows in each group.\n3. The `WHERE` clause filters the data to only include records from the year',
    sql='Here is the SQL query to find out how many employees were hired each month in 2022:\n```sql\nSELECT EXTRACT(MONTH FROM HireDate) AS Month, COUNT(*) AS NumberOfEmployees\nFROM Employees\nWHERE EXTRACT(YEAR FROM HireDate) = 2022\nGROUP BY EXTRACT(MONTH FROM HireDate)\nORDER BY Month;\n```\n\nStep by step reasoning:\n1. The `EXTRACT` function is used to get the month and year from the `HireDate` column.\n2. The `COUNT(*)` function counts the number of rows in each group.\n3. The `WHERE` clause filters the data to only include records from the year'
), 1), (Example({'sql_prompt': 'What is the maximum quantity of a single organic product delivered in the DELIVERY_RECORDS table?', 'sql_context': 'CREATE TABLE DELIVERY_RECORDS (id INT, supplier_id INT, product_id INT, is_organic BOOLEAN, quantity INT); INSERT INTO DELIVERY_RECORDS (id, supplier_id, product_id, is_organic, quantity) VALUES (1, 1, 1, true, 50), (2, 2, 2, true, 30);', 'sql': 'SELECT MAX(quantity) FROM DELIVERY_RECORDS WHERE is_organic = true;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to find the maximum quantity of a single organic product delivered in the DELIVERY_RECORDS table:\n```sql\nSELECT MAX(quantity) AS max_organic_quantity\nFROM DELIVERY_RECORDS\nWHERE is_organic = true;\n```\nThis query selects the maximum value of the "quantity" column from the "DELIVERY_RECORDS" table where the "is_organic" column is true, which indicates that the product is organic. The result will give you the maximum quantity of a single organic product delivered in the dataset.',
    sql='Here is the SQL query to find the maximum quantity of a single organic product delivered in the DELIVERY_RECORDS table:\n```sql\nSELECT MAX(quantity) AS max_organic_quantity\nFROM DELIVERY_RECORDS\nWHERE is_organic = true;\n```\n\nThis query selects the maximum value of the "quantity" column from the "DELIVERY_RECORDS" table where the "is_organic" column is true, indicating that the product is organic. The result will give you the maximum quantity of a single organic product delivered in the dataset.'
), 1), (Example({'sql_prompt': 'Update the description of a sustainable urbanism initiative in the sustainable_urbanism_initiatives table', 'sql_context': "CREATE TABLE public.sustainable_urbanism_initiatives (id SERIAL PRIMARY KEY, initiative_name VARCHAR(255), initiative_description TEXT, city_name VARCHAR(255), state_name VARCHAR(255)); INSERT INTO public.sustainable_urbanism_initiatives (initiative_name, initiative_description, city_name, state_name) VALUES ('Green City Program', 'Promotes green spaces and sustainable transportation options in urban areas', 'Portland', 'Oregon'), ('EcoDistricts Initiative', 'Encourages sustainable community development in city neighborhoods', 'Vancouver', 'British Columbia');", 'sql': "WITH updated_initiative AS (UPDATE public.sustainable_urbanism_initiatives SET initiative_description = 'Promotes green spaces, sustainable transportation, and energy-efficient buildings in urban areas' WHERE initiative_name = 'Green City Program' RETURNING *) INSERT INTO public.sustainable_urbanism_initiatives (initiative_name, initiative_description, city_name, state_name) SELECT initiative_name, initiative_description, city_name, state_name FROM updated_initiative;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is an SQL query that updates the description of a sustainable urbanism initiative in the `sustainable_urbanism_initiatives` table:\n```sql\nUPDATE public.sustainable_urbanism_initiatives\nSET initiative_description = 'Promotes green spaces, sustainable transportation, and eco-friendly building practices in urban areas.'\nWHERE initiative_name = 'Green City Program';\n```\n\nThis query updates the `initiative_description` column for the row where the `initiative_name` is 'Green City Program'. The new description emphasizes the initiative's focus on eco-friendly building practices in addition to green spaces and sustainable transportation.",
    sql="Here is an SQL query that updates the description of a sustainable urbanism initiative in the `sustainable_urbanism_initiatives` table:\n```sql\nUPDATE public.sustainable_urbanism_initiatives\nSET initiative_description = 'Promotes green spaces, sustainable transportation, and eco-friendly building practices in urban areas.'\nWHERE initiative_name = 'Green City Program';\n```\n\nThis query updates the `initiative_description` column for the row where the `initiative_name` is 'Green City Program'. The new description emphasizes the initiative's focus on eco-friendly building practices in addition to green spaces and sustainable transportation."
), 0), (Example({'sql_prompt': 'Calculate the year-over-year revenue growth for each restaurant.', 'sql_context': "CREATE TABLE restaurants (restaurant_id INT, restaurant_name VARCHAR(50), city VARCHAR(50), state VARCHAR(50), revenue FLOAT, year INT); INSERT INTO restaurants (restaurant_id, restaurant_name, city, state, revenue, year) VALUES (1, 'Restaurant A', 'City A', 'State A', 123456.78, 2021);", 'sql': 'SELECT restaurant_name, (revenue - LAG(revenue) OVER (PARTITION BY restaurant_name ORDER BY year)) / ABS(LAG(revenue) OVER (PARTITION BY restaurant_name ORDER BY year)) as revenue_growth FROM restaurants;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to calculate the year-over-year revenue growth for each restaurant:\n```sql\nSELECT \n    restaurant_name,\n    city,\n    state,\n    revenue AS current_year_revenue,\n    LAG(revenue) OVER (PARTITION BY restaurant_name ORDER BY year) AS previous_year_revenue,\n    ((revenue - LAG(revenue) OVER (PARTITION BY restaurant_name ORDER BY year)) / LAG(revenue) OVER (PARTITION BY restaurant_name ORDER BY year)) * 100 AS revenue_growth_percentage\nFROM restaurants;\n```\n\nIn this query:\n- We use the `LAG` window function to access the revenue value from the previous row within each partition of `restaurant',
    sql='Here is the SQL query to calculate the year-over-year revenue growth for each restaurant:\n```sql\nSELECT restaurant_name, city, state, revenue AS current_year_revenue,\n       LAG(revenue) OVER (PARTITION BY restaurant_name ORDER BY year) AS previous_year_revenue,\n       ((revenue - LAG(revenue) OVER (PARTITION BY restaurant_name ORDER BY year)) / LAG(revenue) OVER (PARTITION BY restaurant_name ORDER BY year)) * 100 AS revenue_growth_percentage\nFROM restaurants;\n```\n\nIn this query:\n- We use the `LAG` window function to access the revenue value from the previous row within each partition of `restaurant_name`. This'
), 0), (Example({'sql_prompt': 'What is the percentage of users in Canada who have used the hashtag #travel?', 'sql_context': "CREATE TABLE posts (id INT, user_id INT, hashtags TEXT); INSERT INTO posts (id, user_id, hashtags) VALUES (1, 1, '#travel'), (2, 1, '#food'), (3, 2, '#travel'), (4, 3, '#art'), (5, 4, '#music'); CREATE TABLE users (id INT, country VARCHAR(2)); INSERT INTO users (id, country) VALUES (1, 'CA'), (2, 'US'), (3, 'CA'), (4, 'DE');", 'sql': "SELECT 100.0 * COUNT(DISTINCT user_id) / (SELECT COUNT(DISTINCT user_id) FROM posts JOIN users ON posts.user_id = users.id WHERE users.country = 'CA') as percentage_travel FROM posts JOIN users ON posts.user_id = users.id WHERE hashtags LIKE '%#travel%' AND users.country = 'CA';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to calculate the percentage of users in Canada who have used the hashtag #travel:\n```sql\nSELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM users WHERE country = 'CA')) AS percentage\nFROM posts\nWHERE user_id IN (SELECT id FROM users WHERE country = 'CA') AND hashtags LIKE '%#travel%';\n```\n\nThis query calculates the count of posts with the hashtag #travel by users from Canada and then divides it by the total count of users from Canada, multiplying by 100 to get the percentage.",
    sql="Here is the SQL query to calculate the percentage of users in Canada who have used the hashtag #travel:\n```sql\nSELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM users WHERE country = 'CA')) AS percentage\nFROM posts\nWHERE user_id IN (SELECT id FROM users WHERE country = 'CA') AND hashtags LIKE '%#travel%';\n```\n\nThis query calculates the count of posts with the hashtag #travel by users from Canada and then divides it by the total count of users from Canada, multiplying by 100 to get the percentage."
), 0), (Example({'sql_prompt': 'What is the total number of points scored by each team in the NBA this season?', 'sql_context': "CREATE TABLE nba_teams (team_name TEXT, points_scored INT); INSERT INTO nba_teams (team_name, points_scored) VALUES ('Cavaliers', 8000), ('Warriors', 8500), ('Celtics', 7500);", 'sql': 'SELECT team_name, SUM(points_scored) FROM nba_teams GROUP BY team_name;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to find the total number of points scored by each team in the NBA this season:\n```sql\nSELECT team_name, SUM(points_scored) AS total_points FROM nba_teams GROUP BY team_name;\n```\n\nThis query uses the `SUM` function to calculate the total points scored by each team and groups the results by the team name using the `GROUP BY` clause.',
    sql='Here is the SQL query to find the total number of points scored by each team in the NBA this season:\n```sql\nSELECT team_name, SUM(points_scored) AS total_points\nFROM nba_teams\nGROUP BY team_name;\n```\n\nThis query uses the `SUM` function to calculate the total points scored by each team and groups the results by the team name using the `GROUP BY` clause.'
), 1), (Example({'sql_prompt': 'What is the highest number of hat-tricks scored by a player in a single Bundesliga season?', 'sql_context': "CREATE TABLE german_teams (team_id INT, team_name VARCHAR(50)); INSERT INTO german_teams (team_id, team_name) VALUES (1, 'Bayern Munich'), (2, 'Borussia Dortmund'), (3, 'RB Leipzig'); CREATE TABLE german_matches (match_id INT, home_team_id INT, away_team_id INT, home_team_player_hat_tricks INT, away_team_player_hat_tricks INT); INSERT INTO german_matches (match_id, home_team_id, away_team_id, home_team_player_hat_tricks, away_team_player_hat_tricks) VALUES (1, 1, 2, 1, 0), (2, 2, 3, 0, 1), (3, 3, 1, 1, 0);", 'sql': 'SELECT MAX(home_team_player_hat_tricks + away_team_player_hat_tricks) AS max_hat_tricks FROM german_matches;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To answer the question, we need to find the maximum number of hat-tricks scored by a player in a single season across all matches. We can achieve this by using the MAX function on the `home_team_player_hat_tricks` and `away_team_player_hat_tricks` columns. Here's the SQL query:\n```sql\nSELECT MAX(home_team_player_hat_tricks) AS max_hat_tricks,\n       MAX(away_team_player_hat_tricks) AS max_away_hat_tricks\nFROM german_matches;\n```\nThis query will return the maximum number of hat-tricks scored by a home team player and the maximum number of hat-tricks scored",
    sql='Here is the SQL query to find the highest number of hat-tricks scored by a player in a single Bundesliga season:\n```sql\nSELECT MAX(home_team_player_hat_tricks) AS max_hat_tricks,\n       MAX(away_team_player_hat_tricks) AS max_away_hat_tricks\nFROM german_matches;\n```\n\nThis query calculates the maximum number of hat-tricks scored by a player in a single season across all matches. The `MAX` function is applied to both the `home_team_player_hat_tricks` and `away_team_player_hat_tricks` columns, giving us the highest number of hat-tricks achieved by a home team'
), 0), (Example({'sql_prompt': "What is the average word count for articles published in the 'news' schema, grouped by author?", 'sql_context': "CREATE TABLE news.articles (article_id INT, title VARCHAR(100), author VARCHAR(100), word_count INT); INSERT INTO news.articles (article_id, title, author, word_count) VALUES (1, 'Article 1', 'John Doe', 500), (2, 'Article 2', 'Jane Doe', 600), (3, 'Article 3', 'John Doe', 700);", 'sql': 'SELECT author, AVG(word_count) FROM news.articles GROUP BY author;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to calculate the average word count for articles published in the 'news' schema, grouped by author:\n```sql\nSELECT author, AVG(word_count) AS avg_word_count\nFROM news.articles\nGROUP BY author;\n```\n\nThis query selects the `author` column and calculates the average of the `word_count` column for each author using the `AVG` function. The `GROUP BY` clause groups the results by the `author` column, so you get the average word count for each author.",
    sql="Here is the SQL query to calculate the average word count for articles published in the 'news' schema, grouped by author:\n```sql\nSELECT author, AVG(word_count) AS avg_word_count\nFROM news.articles\nGROUP BY author;\n```\n\nThis query selects the `author` column and calculates the average of the `word_count` column for each author using the `AVG` function. The `GROUP BY` clause groups the results by the `author` column, so you get the average word count for each author."
), 1), (Example({'sql_prompt': 'Show the total budget allocation for healthcare services in the top 5 states with the highest budget allocation', 'sql_context': 'CREATE TABLE healthcare_services (service_id INT, state_id INT, budget FLOAT);CREATE TABLE states (state_id INT, state_name TEXT);', 'sql': 'SELECT s.state_name, SUM(hs.budget)  FROM healthcare_services hs INNER JOIN states s ON hs.state_id = s.state_id GROUP BY s.state_name ORDER BY SUM(hs.budget) DESC LIMIT 5;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to show the total budget allocation for healthcare services in the top 5 states with the highest budget allocation:\n```sql\nWITH RankedStates AS (\n    SELECT s.state_name, hs.budget,\n           RANK() OVER (ORDER BY hs.budget DESC) AS rank\n    FROM states s\n    JOIN healthcare_services hs ON s.state_id = hs.state_id\n)\nSELECT state_name, budget, rank\nFROM RankedStates\nWHERE rank <= 5;\n```\n\nStep by step reasoning:\n1. The query starts by creating a Common Table Expression (CTE) named `RankedStates`. This CTE joins the `states` table with the `health',
    sql='Here is the SQL query to show the total budget allocation for healthcare services in the top 5 states with the highest budget allocation:\n```sql\nWITH RankedStates AS (\n    SELECT s.state_name, hs.budget, RANK() OVER (ORDER BY hs.budget DESC) AS rank\n    FROM states s\n    JOIN healthcare_services hs ON s.state_id = hs.state_id\n)\nSELECT state_name, budget, rank\nFROM RankedStates\nWHERE rank <= 5;\n```\n\nStep by step reasoning:\n1. The query starts by creating a Common Table Expression (CTE) named `RankedStates`. This CTE joins the `states` table with the `healthcare'
), 0), (Example({'sql_prompt': 'Find the total volume of timber sold in 2021', 'sql_context': "CREATE TABLE forests (id INT, name VARCHAR(50), hectares DECIMAL(5,2), year_planted INT, PRIMARY KEY (id)); INSERT INTO forests (id, name, hectares, year_planted) VALUES (1, 'Forest A', 123.45, 1990), (2, 'Forest B', 654.32, 1985); CREATE TABLE timber_sales (id INT, forest_id INT, year INT, volume DECIMAL(10,2), PRIMARY KEY (id)); INSERT INTO timber_sales (id, forest_id, year, volume) VALUES (1, 1, 2021, 120.50), (2, 1, 2022, 150.75), (3, 2, 2021, 450.23), (4, 2, 2022, 520.89);", 'sql': 'SELECT SUM(ts.volume) FROM timber_sales ts INNER JOIN forests f ON ts.forest_id = f.id WHERE ts.year = 2021;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to find the total volume of timber sold in 2021:\n```sql\nSELECT SUM(volume) AS total_volume_sold\nFROM timber_sales\nWHERE year = 2021;\n```\n\nThis query calculates the sum of the "volume" column from the "timber_sales" table where the "year" is equal to 2021, giving you the total volume of timber sold in that year.',
    sql='Here is the SQL query to find the total volume of timber sold in 2021:\n```sql\nSELECT SUM(volume) AS total_volume_sold\nFROM timber_sales\nWHERE year = 2021;\n```\n\nThis query calculates the sum of the "volume" column from the "timber_sales" table where the "year" is equal to 2021, giving you the total volume of timber sold in that year.'
), 1), (Example({'sql_prompt': 'Who are the top 3 suppliers of recycled polyester?', 'sql_context': "CREATE TABLE suppliers (id INT, name VARCHAR(255), material VARCHAR(255)); INSERT INTO suppliers (id, name, material) VALUES (1, 'Supplier A', 'Recycled Polyester'), (2, 'Supplier B', 'Organic Cotton'), (3, 'Supplier C', 'Recycled Polyester'), (4, 'Supplier D', 'Hemp'), (5, 'Supplier E', 'Recycled Polyester');", 'sql': "SELECT name FROM suppliers WHERE material = 'Recycled Polyester' GROUP BY name ORDER BY COUNT(*) DESC LIMIT 3;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to find the top 3 suppliers of recycled polyester:\n```sql\nSELECT * FROM suppliers\nWHERE material = \'Recycled Polyester\'\nORDER BY id ASC\nLIMIT 3;\n```\n\nThis query selects all columns from the "suppliers" table where the material is \'Recycled Polyester\'. The results are then ordered by supplier ID in ascending order using the `ORDER BY` clause. Finally, the `LIMIT 3` restricts the output to only the top 3 suppliers.',
    sql='Here is the SQL query to find the top 3 suppliers of recycled polyester:\n```sql\nSELECT * FROM suppliers WHERE material = \'Recycled Polyester\' ORDER BY id ASC LIMIT 3;\n```\n\nThis query selects all columns from the "suppliers" table where the material is \'Recycled Polyester\'. The results are then ordered by supplier ID in ascending order using the `ORDER BY` clause. Finally, the `LIMIT 3` restricts the output to only the top 3 suppliers.'
), 0), (Example({'sql_prompt': "How many donors have donated more than $100 in the 'Donations' table?", 'sql_context': "CREATE TABLE Donations (DonorID INT, DonationDate DATE, Amount DECIMAL(10, 2)); INSERT INTO Donations (DonorID, DonationDate, Amount) VALUES (1, '2022-02-01', 120.00), (2, '2022-01-15', 75.00), (3, '2022-03-05', 150.00);", 'sql': 'SELECT COUNT(*) FROM Donations WHERE Amount > 100;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to find out how many donors have donated more than $100 in the 'Donations' table:\n```sql\nSELECT COUNT(*) FROM Donations WHERE Amount > 100;\n```\nThis query counts the number of rows (donors) where the donation amount is greater than $100.",
    sql="Here is the SQL query to find out how many donors have donated more than $100 in the 'Donations' table:\n```sql\nSELECT COUNT(*) FROM Donations WHERE Amount > 100;\n```\nThis query counts the number of rows (donors) where the donation amount is greater than $100."
), 1), (Example({'sql_prompt': "Update the 'Angkor Wat' excavation to have a start date of 1300-01-01.", 'sql_context': "CREATE TABLE ExcavationSites (SiteID INT PRIMARY KEY, Name VARCHAR(255), Country VARCHAR(255), StartDate DATE, EndDate DATE); INSERT INTO ExcavationSites (SiteID, Name, Country, StartDate, EndDate) VALUES (5, 'Angkor Wat', 'Cambodia', '1860-01-01', '1860-05-01');", 'sql': "UPDATE ExcavationSites SET StartDate = '1300-01-01' WHERE Name = 'Angkor Wat';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to update the start date of the 'Angkor Wat' excavation to 1300-01-01:\n```sql\nUPDATE ExcavationSites\nSET StartDate = '1300-01-01'\nWHERE Name = 'Angkor Wat';\n```\nThis query uses the `UPDATE` statement to modify the existing record in the `ExcavationSites` table where the name is 'Angkor Wat'. The `SET` clause specifies that we want to change the `StartDate` column to the value '1300-01-01'.",
    sql="Here is the SQL query to update the start date of the 'Angkor Wat' excavation to 1300-01-01:\n```sql\nUPDATE ExcavationSites\nSET StartDate = '1300-01-01'\nWHERE Name = 'Angkor Wat';\n```\n\nThis query uses the `UPDATE` statement to modify the existing record in the `ExcavationSites` table where the name is 'Angkor Wat'. The `SET` clause specifies that we want to change the `StartDate` column to the value '1300-01-01'."
), 1), (Example({'sql_prompt': 'Calculate the total CO2 emissions (in metric tons) per capita for each country in the population_data and carbon_emissions tables.', 'sql_context': 'CREATE TABLE population_data (country VARCHAR(50), year INT, population INT); CREATE TABLE carbon_emissions (country VARCHAR(50), year INT, co2_emissions FLOAT);', 'sql': 'SELECT p.country, AVG(co2_emissions/population*1000000) as co2_emissions_per_capita FROM population_data p JOIN carbon_emissions c ON p.country = c.country GROUP BY p.country;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query that calculates the total CO2 emissions per capita for each country:\n```sql\nSELECT p.country, \n       (ce.co2_emissions / NULLIF(p.population, 0)) AS co2_per_capita\nFROM population_data p\nJOIN carbon_emissions ce ON p.country = ce.country AND p.year = ce.year;\n```\n\nStep by step explanation:\n1. The `population_data` and `carbon_emissions` tables are joined on the `country` column and the `year` column, ensuring that we're comparing data for the same country and year.\n2. The `NULLIF` function is used",
    sql="Here is the SQL query that calculates the total CO2 emissions per capita for each country:\n```sql\nSELECT p.country, (ce.co2_emissions / NULLIF(p.population, 0)) AS co2_per_capita\nFROM population_data p\nJOIN carbon_emissions ce ON p.country = ce.country AND p.year = ce.year;\n```\nStep by step explanation:\n1. The `population_data` and `carbon_emissions` tables are joined on the `country` column and the `year` column, ensuring that we're comparing data for the same country and year.\n2. The `NULLIF` function is used to handle"
), 0), (Example({'sql_prompt': "How many rural infrastructure projects were completed in '2022' in the 'Asia-Pacific' region?", 'sql_context': "CREATE TABLE rural_infrastructure(id INT, project TEXT, location TEXT, completion_year INT); INSERT INTO rural_infrastructure (id, project, location, completion_year) VALUES (1, 'Rural Road Project', 'Asia-Pacific', 2022);", 'sql': "SELECT COUNT(*) FROM rural_infrastructure WHERE location = 'Asia-Pacific' AND completion_year = 2022;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to answer the question:\n```sql\nSELECT COUNT(*) FROM rural_infrastructure WHERE completion_year = 2022 AND location = 'Asia-Pacific';\n```\nThe query counts the number of rows (projects) where the completion year is 2022 and the location is 'Asia-Pacific'.",
    sql="Here is the SQL query to answer the question:\n```sql\nSELECT COUNT(*) FROM rural_infrastructure WHERE completion_year = 2022 AND location = 'Asia-Pacific';\n```\nThe query counts the number of rows (projects) where the completion year is 2022 and the location is 'Asia-Pacific'."
), 1), (Example({'sql_prompt': "What is the average horsepower of luxury vehicles in the 'GreenCar' database produced after 2017?", 'sql_context': 'CREATE TABLE LuxuryVehicles (Id INT, Make VARCHAR(50), Model VARCHAR(50), Year INT, Horsepower INT);', 'sql': 'SELECT AVG(Horsepower) FROM LuxuryVehicles WHERE Year > 2017;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query that answers the question you have described:\n```sql\nSELECT AVG(Horsepower) AS AvgHorsepower\nFROM LuxuryVehicles\nWHERE Year > 2017;\n```\n\nThis query calculates the average horsepower of luxury vehicles produced after 2017 by using the `AVG` function on the "Horsepower" column and filtering the results based on the year of production.',
    sql='Here is the SQL query that answers the question you have described:\n```sql\nSELECT AVG(Horsepower) AS AvgHorsepower\nFROM LuxuryVehicles\nWHERE Year > 2017;\n```\n\nThis query calculates the average horsepower of luxury vehicles produced after 2017 by using the `AVG` function on the "Horsepower" column and filtering the results based on the year of production.'
), 1), (Example({'sql_prompt': 'What is the maximum response time for emergency calls in the city of Los Angeles?', 'sql_context': 'CREATE TABLE emergency_calls (id INT, city VARCHAR(20), response_time INT);', 'sql': "SELECT MAX(response_time) FROM emergency_calls WHERE city = 'Los Angeles';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to find the maximum response time for emergency calls in the city of Los Angeles:\n```sql\nSELECT MAX(response_time) AS max_response_time\nFROM emergency_calls\nWHERE city = 'Los Angeles';\n```\n\nThis query selects the maximum value of the `response_time` column from the `emergency_calls` table where the city is 'Los Angeles', giving you the longest response time for emergency calls in that city.",
    sql="Here is the SQL query to find the maximum response time for emergency calls in the city of Los Angeles:\n```sql\nSELECT MAX(response_time) AS max_response_time\nFROM emergency_calls\nWHERE city = 'Los Angeles';\n```\n\nThis query selects the maximum value of the `response_time` column from the `emergency_calls` table where the city is 'Los Angeles', giving you the longest response time for emergency calls in that city."
), 1), (Example({'sql_prompt': 'What is the maximum loan amount for socially responsible loans in the Asia-Pacific region?', 'sql_context': "CREATE TABLE socially_responsible_loans (loan_id INT, region VARCHAR(20), loan_amount DECIMAL(10,2)); INSERT INTO socially_responsible_loans (loan_id, region, loan_amount) VALUES (101, 'Asia-Pacific', 50000), (102, 'Europe', 30000), (103, 'Asia-Pacific', 70000);", 'sql': "SELECT MAX(srl.loan_amount) FROM socially_responsible_loans srl WHERE srl.region = 'Asia-Pacific';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to find the maximum loan amount for socially responsible loans in the Asia-Pacific region:\n```sql\nSELECT MAX(loan_amount) AS max_loan_amount\nFROM socially_responsible_loans\nWHERE region = 'Asia-Pacific';\n```\nThis query uses the MAX function on the loan_amount column to find the largest loan amount in the 'Asia-Pacific' region.",
    sql="Here is the SQL query to find the maximum loan amount for socially responsible loans in the Asia-Pacific region:\n```sql\nSELECT MAX(loan_amount) AS max_loan_amount\nFROM socially_responsible_loans\nWHERE region = 'Asia-Pacific';\n```\n\nThis query uses the `MAX` function on the `loan_amount` column to find the largest loan amount in the 'Asia-Pacific' region."
), 1), (Example({'sql_prompt': 'What is the maximum number of years a traditional art form has been preserved in each country?', 'sql_context': "CREATE TABLE countries (id INT, name TEXT); INSERT INTO countries (id, name) VALUES (1, 'Nigeria'), (2, 'Brazil'); CREATE TABLE art_forms (id INT, country_id INT, name TEXT, year_preserved INT); INSERT INTO art_forms (id, country_id, name, year_preserved) VALUES (1, 1, 'Tie-dye', 500), (2, 1, 'Batik', 1000), (3, 2, 'Capoeira', 400);", 'sql': 'SELECT c.name, MAX(af.year_preserved) FROM countries c JOIN art_forms af ON c.id = af.country_id GROUP BY c.id;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query that answers the prompt:\n```sql\nSELECT af.country_id, MAX(af.year_preserved) AS max_years_preserved\nFROM art_forms af\nJOIN countries c ON af.country_id = c.id\nGROUP BY af.country_id;\n```\n\nStep by step reasoning:\n1. We start by selecting the `country_id` and calculating the maximum `year_preserved` for each country using the `MAX` function.\n2. We then join the `art_forms` table (aliased as `af`) with the `countries` table (aliased as `c`) on the `country_id`.\n3. The `',
    sql='Here is the SQL query that answers the prompt:\n```sql\nSELECT af.country_id, MAX(af.year_preserved) AS max_years_preserved\nFROM art_forms af\nJOIN countries c ON af.country_id = c.id\nGROUP BY af.country_id;\n```\n\nStep by step reasoning:\n1. We start by selecting the `country_id` and calculating the maximum `year_preserved` for each country using the `MAX` function.\n2. We then join the `art_forms` table (aliased as `af`) with the `countries` table (aliased as `c`) on the `country_id`.\n3. The `'
), 0), (Example({'sql_prompt': 'What is the maximum hourly wage for each labor category in the construction industry?', 'sql_context': 'CREATE TABLE labor_statistics (id INT, industry VARCHAR(255), category VARCHAR(255), title VARCHAR(255), hourly_wage DECIMAL(5,2));', 'sql': "SELECT industry, category, MAX(hourly_wage) as max_hourly_wage FROM labor_statistics WHERE industry = 'construction' GROUP BY industry, category;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to find the maximum hourly wage for each labor category in the construction industry:\n```sql\nSELECT category, MAX(hourly_wage) AS max_hourly_wage\nFROM labor_statistics\nWHERE industry = 'Construction Industry'\nGROUP BY category;\n```\n\nThis query selects the `category` and calculates the maximum `hourly_wage` for each category in the 'Construction Industry' using the `MAX` function. The `WHERE` clause filters the data to include only records related to the construction industry, and the `GROUP BY` clause groups the results by labor category.",
    sql="Here is the SQL query to find the maximum hourly wage for each labor category in the construction industry:\n```sql\nSELECT category, MAX(hourly_wage) AS max_hourly_wage\nFROM labor_statistics\nWHERE industry = 'Construction Industry'\nGROUP BY category;\n```\n\nThis query selects the `category` and calculates the maximum `hourly_wage` for each category in the 'Construction Industry' using the `MAX` function. The `WHERE` clause filters the data to include only records related to the construction industry, and the `GROUP BY` clause groups the results by labor category."
), 1), (Example({'sql_prompt': 'List all the drought-impacted counties in Texas in 2018.', 'sql_context': "CREATE TABLE drought_impact(county VARCHAR(20), state VARCHAR(20), year INT, impacted BOOLEAN); INSERT INTO drought_impact(county, state, year, impacted) VALUES ('Harris', 'Texas', 2015, true), ('Harris', 'Texas', 2016, true), ('Harris', 'Texas', 2017, true), ('Harris', 'Texas', 2018, true), ('Bexar', 'Texas', 2015, false), ('Bexar', 'Texas', 2016, false), ('Bexar', 'Texas', 2017, false), ('Bexar', 'Texas', 2018, false);", 'sql': "SELECT county FROM drought_impact WHERE state = 'Texas' AND year = 2018 AND impacted = true;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to list all the drought-impacted counties in Texas in 2018:\n```sql\nSELECT county\nFROM drought_impact\nWHERE state = 'Texas' AND year = 2018 AND impacted = true;\n```\n\nThe query selects the `county` column from the `drought_impact` table where the `state` is 'Texas', the `year` is 2018, and the `impacted` boolean value is true. This will return a list of all counties in Texas that were impacted by drought in 2018.",
    sql="Here is the SQL query to list all the drought-impacted counties in Texas in 2018:\n```sql\nSELECT county FROM drought_impact WHERE state = 'Texas' AND year = 2018 AND impacted = true;\n```\nThe query selects the `county` column from the `drought_impact` table where the `state` is 'Texas', the `year` is 2018, and the `impacted` boolean value is true. This will return a list of all counties in Texas that were impacted by drought in 2018."
), 1), (Example({'sql_prompt': 'Find the top 3 genres with the highest revenue in 2022 for streaming services in the USA.', 'sql_context': "CREATE TABLE streaming_services (service_id INT, service_name VARCHAR(255), revenue DECIMAL(10,2)); INSERT INTO streaming_services (service_id, service_name, revenue) VALUES (1, 'StreamingCo', 5000000.00); CREATE TABLE genre_sales (sale_id INT, service_id INT, genre VARCHAR(255), sales DECIMAL(10,2)); INSERT INTO genre_sales (sale_id, service_id, genre, sales) VALUES (1, 1, 'Rock', 150000.00);", 'sql': "SELECT genre, SUM(sales) as total_sales FROM genre_sales gs JOIN streaming_services s ON gs.service_id = s.service_id WHERE s.service_country = 'USA' AND s.service_year = 2022 GROUP BY genre ORDER BY total_sales DESC LIMIT 3;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to find the top 3 genres with the highest revenue in 2022 for streaming services in the USA:\n```sql\nSELECT g.genre, SUM(ss.revenue) AS total_revenue\nFROM streaming_services ss\nJOIN genre_sales g ON ss.service_id = g.service_id\nWHERE EXTRACT(YEAR FROM ss.start_time) = 2022 AND ss.service_name = 'StreamingCo'\nGROUP BY g.genre\nORDER BY total_revenue DESC\nLIMIT 3;\n```\n\nStep-by-step reasoning:\n1. We start by selecting the `genre` from the `genre_sales` table",
    sql="Here is the SQL query to find the top 3 genres with the highest revenue in 2022 for streaming services in the USA:\n```sql\nSELECT g.genre, SUM(ss.revenue) AS total_revenue\nFROM streaming_services ss\nJOIN genre_sales g ON ss.service_id = g.service_id\nWHERE EXTRACT(YEAR FROM ss.start_time) = 2022\n  AND ss.service_name = 'StreamingCo'\nGROUP BY g.genre\nORDER BY total_revenue DESC\nLIMIT 3;\n```\n\nStep-by-step reasoning:\n1. We start by selecting the `genre` from the `genre_sales`"
), 0), (Example({'sql_prompt': "List all unique fields from the 'geology' and 'infrastructure' tables.", 'sql_context': 'CREATE TABLE geology (well_id INT, rock_type VARCHAR(50)); CREATE TABLE infrastructure (well_id INT, platform_type VARCHAR(50));', 'sql': "SELECT field FROM (SELECT 'geology' as table_name, column_name as field FROM information_schema.columns WHERE table_name = 'geology' UNION ALL SELECT 'infrastructure' as table_name, column_name as field FROM information_schema.columns WHERE table_name = 'infrastructure') as subquery;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query that lists all unique fields from the 'geology' and 'infrastructure' tables:\n```sql\nSELECT DISTINCT column_name\nFROM information_schema.columns\nWHERE table_name IN ('geology', 'infrastructure');\n```\n\nStep by step reasoning:\n1. The `information_schema.columns` table provides metadata about the columns in your database.\n2. The `DISTINCT` keyword ensures that only unique column names are selected.\n3. The `WHERE` clause filters the columns to only include those from the 'geology' and 'infrastructure' tables.",
    sql="Here is the SQL query that lists all unique fields from the 'geology' and 'infrastructure' tables:\n```sql\nSELECT DISTINCT column_name\nFROM information_schema.columns\nWHERE table_name IN ('geology', 'infrastructure');\n```\n\nStep-by-step reasoning: \n1. The `information_schema.columns` table provides metadata about the columns in your database. \n2. The `DISTINCT` keyword ensures that only unique column names are selected. \n3. The `WHERE` clause filters the columns to only include those from the 'geology' and 'infrastructure' tables."
), 1), (Example({'sql_prompt': 'Calculate the percentage of total Europium production for each country.', 'sql_context': 'CREATE TABLE europium_production (country VARCHAR(50), quantity INT);', 'sql': 'SELECT country, quantity * 100.0 / SUM(quantity) OVER (PARTITION BY NULL) AS percentage FROM europium_production;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to calculate the percentage of total Europium production for each country:\n```sql\nSELECT country,\n       quantity * 100.0 / SUM(quantity) OVER () AS percentage\nFROM europium_production;\n```\n\nThis query calculates the percentage by multiplying the quantity produced by each country with 100 and then dividing it by the total sum of quantities produced by all countries. The `SUM(quantity) OVER ()` part calculates the total sum of quantities across all rows, treating the result set as a single group.',
    sql='Here is the SQL query to calculate the percentage of total Europium production for each country:\n```sql\nSELECT country, quantity * 100.0 / SUM(quantity) OVER () AS percentage\nFROM europium_production;\n```\n\nThis query calculates the percentage by multiplying the quantity produced by each country with 100 and then dividing it by the total sum of quantities produced by all countries. The `SUM(quantity) OVER ()` part calculates the total sum of quantities across all rows, treating the result set as a single group.'
), 1), (Example({'sql_prompt': 'Find the mobile subscribers with consecutive speed drops greater than 25% for the last 3 months, ordered by subscription IDs.', 'sql_context': 'CREATE TABLE mobile_usage_detailed (subscriber_id INT, month INT, speed FLOAT); INSERT INTO mobile_usage_detailed (subscriber_id, month, speed) VALUES (1, 1, 100), (1, 2, 80), (1, 3, 70), (2, 1, 200), (2, 2, 180), (2, 3, 160), (3, 1, 150), (3, 2, 130), (3, 3, 110);', 'sql': 'SELECT subscriber_id, speed, month FROM (SELECT subscriber_id, speed, month, LAG(speed, 1) OVER (PARTITION BY subscriber_id ORDER BY month) as prev_speed, LAG(speed, 2) OVER (PARTITION BY subscriber_id ORDER BY month) as prev_prev_speed FROM mobile_usage_detailed) t WHERE t.speed < 0.75 * t.prev_speed AND t.speed < 0.75 * t.prev_prev_speed ORDER BY subscriber_id;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to find mobile subscribers with consecutive speed drops greater than 25% for the last 3 months, ordered by subscription IDs:\n```sql\nSELECT subscriber_id, month\nFROM (\n    SELECT subscriber_id, month, speed,\n           LAG(speed) OVER (PARTITION BY subscriber_id ORDER BY month) AS prev_speed,\n           ((speed - LAG(speed) OVER (PARTITION BY subscriber_id ORDER BY month)) / LAG(speed) OVER (PARTITION BY subscriber_id ORDER BY month)) * 100 AS speed_drop_percentage\n    FROM mobile_usage_detailed\n) AS speed_drops\nWHERE speed_drop_percentage > 25\nORDER BY subscriber_',
    sql='Here is the SQL query to find mobile subscribers with consecutive speed drops greater than 25% for the last 3 months, ordered by subscription IDs:\n```sql\nSELECT subscriber_id, month\nFROM (\n    SELECT subscriber_id, month, speed,\n           LAG(speed) OVER (PARTITION BY subscriber_id ORDER BY month) AS prev_speed,\n           ((speed - LAG(speed) OVER (PARTITION BY subscriber_id ORDER BY month)) / LAG(speed) OVER (PARTITION BY subscriber_id ORDER BY month)) * 100 AS speed_drop_percentage\n    FROM mobile_usage_detailed\n) AS speed_drops\nWHERE speed_drop_percentage > 25\nORDER BY subscriber_'
), 0), (Example({'sql_prompt': 'What is the distribution of AI safety research topics by year?', 'sql_context': "CREATE TABLE if not exists ai_safety_research (year INT, topic VARCHAR(255)); INSERT INTO ai_safety_research (year, topic) VALUES (2018, 'Explainable AI'), (2019, 'Algorithmic fairness'), (2020, 'AI safety'), (2021, 'Robust AI'), (2022, 'AI ethics');", 'sql': 'SELECT year, topic, COUNT(*) OVER (PARTITION BY year) as research_count FROM ai_safety_research ORDER BY year;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to answer the prompt:\n```sql\nSELECT year, COUNT(*) AS topic_count FROM ai_safety_research GROUP BY year;\n```\n\nThis query groups the data by the year and counts the number of research topics for each year, providing a distribution of AI safety research topics over time.',
    sql='Here is the SQL query to answer the prompt:\n```sql\nSELECT year, COUNT(*) AS topic_count\nFROM ai_safety_research\nGROUP BY year;\n```\nThis query groups the data by the year and counts the number of research topics for each year, providing a distribution of AI safety research topics over time.'
), 0), (Example({'sql_prompt': "How many forest management practices are recorded in the 'tropical_forests'?", 'sql_context': "CREATE TABLE forest_management (id INT, forest_type VARCHAR(50), practice_count INT); INSERT INTO forest_management (id, forest_type, practice_count) VALUES (1, 'Tropical Forests', 45); INSERT INTO forest_management (id, forest_type, practice_count) VALUES (2, 'Temperate Forests', 34);", 'sql': "SELECT practice_count FROM forest_management WHERE forest_type = 'Tropical Forests';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="The SQL query that answers the question is as follows:\n```sql\nSELECT practice_count FROM forest_management WHERE forest_type = 'Tropical Forests';\n```\nThis query retrieves the value of `practice_count` from the `forest_management` table where the `forest_type` is 'Tropical Forests'. This will give us the total number of forest management practices recorded for tropical forests.",
    sql="Here is the SQL query that answers the question:\n```sql\nSELECT practice_count FROM forest_management WHERE forest_type = 'Tropical Forests';\n```\n\nThis query retrieves the value of `practice_count` from the `forest_management` table where the `forest_type` is 'Tropical Forests'. This will give us the total number of forest management practices recorded for tropical forests."
), 1), (Example({'sql_prompt': 'What is the distribution of lifelong learning course enrollments by age group, in total?', 'sql_context': 'CREATE TABLE lifelong_learning (student_id INT, age_group VARCHAR(255), course_id INT); CREATE TABLE courses (course_id INT, course_name VARCHAR(255));', 'sql': 'SELECT l.age_group, COUNT(l.course_id) FROM lifelong_learning l INNER JOIN courses c ON l.course_id = c.course_id GROUP BY l.age_group;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query that answers the question you have described:\n```sql\nSELECT age_group, COUNT(*) AS total_enrollments\nFROM lifelong_learning ll\nJOIN courses c ON ll.course_id = c.course_id\nGROUP BY age_group;\n```\n\nStep-by-step reasoning:\n1. We start by selecting the `age_group` column from the `lifelong_learning` table, which represents the age groups of students enrolled in lifelong learning courses.\n2. We use a JOIN operation to combine the `lifelong_learning` table (aliased as `ll`) with the `courses` table (aliased as `c`) using the `course_',
    sql='Here is the SQL query that answers the question you have described:\n```sql\nSELECT age_group, COUNT(*) AS total_enrollments\nFROM lifelong_learning ll\nJOIN courses c ON ll.course_id = c.course_id\nGROUP BY age_group;\n```\n\nStep-by-step reasoning:\n1. We start by selecting the `age_group` column from the `lifelong_learning` table, which represents the age groups of students enrolled in lifelong learning courses.\n2. We use a JOIN operation to combine the `lifelong_learning` table (aliased as `ll`) with the `courses` table (aliased as `c`) using the `course_'
), 1), (Example({'sql_prompt': "Insert new records into the Employee table with the following data: EmployeeID 3, FirstName 'Mike', LastName 'Smith', Department 'Environment'.", 'sql_context': 'CREATE TABLE Employee (EmployeeID INT, FirstName VARCHAR(50), LastName VARCHAR(50), Department VARCHAR(50));', 'sql': "INSERT INTO Employee (EmployeeID, FirstName, LastName, Department) VALUES (3, 'Mike', 'Smith', 'Environment');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to insert a new record into the "Employee" table with the given data:\n```sql\nINSERT INTO Employee (EmployeeID, FirstName, LastName, Department)\nVALUES (3, \'Mike\', \'Smith\', \'Environment\');\n```\nThis query inserts a new row into the "Employee" table with the specified values. The "EmployeeID" is set to 3, the "FirstName" is \'Mike\', the "LastName" is \'Smith\', and the "Department" is \'Environment\'.',
    sql='Here is the SQL query to insert a new record into the "Employee" table with the given data:\n```sql\nINSERT INTO Employee (EmployeeID, FirstName, LastName, Department)\nVALUES (3, \'Mike\', \'Smith\', \'Environment\');\n```\n\nThis query inserts a new row into the "Employee" table with the specified values. The "EmployeeID" is set to 3, the "FirstName" is \'Mike\', the "LastName" is \'Smith\', and the "Department" is \'Environment\'.'
), 1), (Example({'sql_prompt': 'Which cosmetic brands have the highest average customer rating?', 'sql_context': "CREATE TABLE brand (id INT, name VARCHAR(255), avg_rating FLOAT); CREATE TABLE rating (brand_id INT, rating FLOAT); INSERT INTO brand (id, name, avg_rating) VALUES (1, 'Lush', 4.2), (2, 'The Body Shop', 4.1), (3, 'Sephora', 4.3); INSERT INTO rating (brand_id, rating) VALUES (1, 4.5), (1, 4.0), (2, 4.1), (2, 4.2), (3, 4.4), (3, 4.3);", 'sql': 'SELECT b.name, AVG(r.rating) as avg_rating FROM brand b JOIN rating r ON b.id = r.brand_id GROUP BY b.name ORDER BY avg_rating DESC;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query that answers the prompt:\n```sql\nSELECT b.name, AVG(r.rating) AS avg_rating\nFROM brand b\nJOIN rating r ON b.id = r.brand_id\nGROUP BY b.id, b.name\nORDER BY avg_rating DESC;\n```\n\nStep by step reasoning:\n1. We start by selecting the brand name (`b.name`) and calculating the average rating (`AVG(r.rating)`).\n2. We use a `JOIN` operation to combine the `brand` table (aliased as `b`) with the `rating` table (aliased as `r`) using their common column `brand_id`.\n3',
    sql='Here is the SQL query that answers the prompt:\n```sql\nSELECT b.name, AVG(r.rating) AS avg_rating\nFROM brand b\nJOIN rating r ON b.id = r.brand_id\nGROUP BY b.id, b.name\nORDER BY avg_rating DESC;\n```\n\nStep by step reasoning:\n1. We start by selecting the brand name (`b.name`) and calculating the average rating (`AVG(r.rating)`).\n2. We use a `JOIN` operation to combine the `brand` table (aliased as `b`) with the `rating` table (aliased as `r`) using their common column `brand_id`.\n3'
), 0), (Example({'sql_prompt': 'How many unique volunteers worked on projects in each cause area?', 'sql_context': "CREATE TABLE volunteers (id INT, name VARCHAR(30), cause_area VARCHAR(20)); INSERT INTO volunteers (id, name, cause_area) VALUES (1, 'Bob', 'children'), (2, 'Alice', 'children'), (3, 'Charlie', 'health');", 'sql': 'SELECT cause_area, COUNT(DISTINCT name) FROM volunteers GROUP BY cause_area;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to answer the question "How many unique volunteers worked on projects in each cause area?":\n```sql\nSELECT cause_area, COUNT(DISTINCT id) AS unique_volunteers\nFROM volunteers\nGROUP BY cause_area;\n```\n\nThis query groups the data by `cause_area` and then counts the distinct `id` values within each group to determine the number of unique volunteers for each cause area.',
    sql='Here is the SQL query to answer the question "How many unique volunteers worked on projects in each cause area?":\n```sql\nSELECT cause_area, COUNT(DISTINCT id) AS unique_volunteers\nFROM volunteers\nGROUP BY cause_area;\n```\nThis query groups the data by `cause_area` and then counts the distinct `id` values within each group to determine the number of unique volunteers for each cause area.'
), 1), (Example({'sql_prompt': 'Who were the top 3 content creators in terms of likes received on their posts in January 2022?', 'sql_context': "CREATE SCHEMA content; CREATE TABLE creators(creator_id INT, name VARCHAR(255), total_likes INT); INSERT INTO creators (creator_id, name, total_likes) VALUES (1, 'Alice', 5000); INSERT INTO creators (creator_id, name, total_likes) VALUES (2, 'Bob', 7000);", 'sql': 'SELECT name, SUM(total_likes) AS total_likes_january FROM content.creators WHERE MONTH(created_date) = 1 GROUP BY name ORDER BY total_likes_january DESC LIMIT 3;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to find the top 3 content creators with the most likes received on their posts in January 2022:\n```sql\nSELECT name, total_likes\nFROM creators\nORDER BY total_likes DESC\nLIMIT 3;\n```\n\nThis query selects the names and total likes of the top 3 creators from the `creators` table, ordering the results by `total_likes` in descending order using the `ORDER BY` clause. The `LIMIT 3` clause restricts the output to only the top 3 rows, giving us the desired result of identifying the top 3 content creators with the most likes received on their posts during the specified month.',
    sql='Here is the SQL query to find the top 3 content creators with the most likes received on their posts in January 2022:\n```sql\nSELECT name, total_likes\nFROM creators\nORDER BY total_likes DESC\nLIMIT 3;\n```\n\nThis query selects the names and total likes of the top 3 creators from the `creators` table, ordering the results by `total_likes` in descending order using the `ORDER BY` clause. The `LIMIT 3` clause restricts the output to only the top 3 rows, giving us the desired result of identifying the top 3 content creators with the most likes received on their posts during the specified month.'
), 1), (Example({'sql_prompt': "Update records in the 'Volunteers' table where the volunteer's skill level is 'Beginner' and change it to 'Intermediate'", 'sql_context': 'CREATE TABLE Volunteers (id INT PRIMARY KEY, volunteer_name VARCHAR(255), skill_level VARCHAR(255), last_volunteered DATE);', 'sql': "UPDATE Volunteers SET skill_level = 'Intermediate' WHERE skill_level = 'Beginner';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to update the skill level of volunteers from 'Beginner' to 'Intermediate':\n```sql\nUPDATE Volunteers\nSET skill_level = 'Intermediate'\nWHERE skill_level = 'Beginner';\n```\nThis query will update the `skill_level` column in the `Volunteers` table, changing the value from 'Beginner' to 'Intermediate' for all records where the current skill level is 'Beginner'.",
    sql="Here is the SQL query to update the skill level of volunteers from 'Beginner' to 'Intermediate':\n```sql\nUPDATE Volunteers SET skill_level = 'Intermediate' WHERE skill_level = 'Beginner';\n```\n\nThis query will update the `skill_level` column in the `Volunteers` table, changing the value from 'Beginner' to 'Intermediate' for all records where the current skill level is 'Beginner'."
), 1), (Example({'sql_prompt': 'Identify the number of farmers involved in urban agriculture initiatives in California and New York in 2019.', 'sql_context': "CREATE TABLE Urban_Agriculture (Farmer_ID INT, State VARCHAR(20), Initiative VARCHAR(20), Year INT); INSERT INTO Urban_Agriculture (Farmer_ID, State, Initiative, Year) VALUES (101, 'California', 'Community_Garden', 2019), (102, 'California', 'Rooftop_Farming', 2019), (103, 'New_York', 'Community_Garden', 2019);", 'sql': "SELECT COUNT(DISTINCT Farmer_ID) FROM Urban_Agriculture WHERE State IN ('California', 'New York') AND Year = 2019 AND Initiative IN ('Community_Garden', 'Rooftop_Farming');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to answer the prompt:\n```sql\nSELECT COUNT(DISTINCT Farmer_ID) AS NumberOfFarmers\nFROM Urban_Agriculture\nWHERE State IN (\'California\', \'New York\') AND Year = 2019;\n```\n\nThe query counts the distinct farmer IDs from the "Urban_Agriculture" table where the state is either California or New York and the year is 2019. This will give you the total number of farmers involved in urban agriculture initiatives in those two states for that specific year.',
    sql='Here is the SQL query to answer the prompt:\n```sql\nSELECT COUNT(DISTINCT Farmer_ID) AS NumberOfFarmers\nFROM Urban_Agriculture\nWHERE State IN (\'California\', \'New York\') AND Year = 2019;\n```\n\nThe query counts the distinct farmer IDs from the "Urban_Agriculture" table where the state is either California or New York and the year is 2019. This will give you the total number of farmers involved in urban agriculture initiatives in those two states for that specific year.'
), 0), (Example({'sql_prompt': "Update the accommodation type for a student with a StudentID of 2 from 'Assistive Listening Devices' to 'Sign Language Interpretation'.", 'sql_context': "CREATE TABLE StudentAccommodations (StudentID INT, StudentName VARCHAR(255), DisabilityType VARCHAR(255), AccommodationType VARCHAR(255), GraduationYear INT); INSERT INTO StudentAccommodations (StudentID, StudentName, DisabilityType, AccommodationType, GraduationYear) VALUES (1, 'John Doe', 'Visual Impairment', 'Sign Language Interpretation', 2018), (2, 'Jane Smith', 'Hearing Impairment', 'Assistive Listening Devices', NULL), (3, 'Michael Johnson', 'Mobility Impairment', 'Assistive Technology', 2019), (4, 'Sara Johnson', 'Physical Disability', 'Mobility Assistance', 2022);", 'sql': "UPDATE StudentAccommodations SET AccommodationType = 'Sign Language Interpretation' WHERE StudentID = 2;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to update the accommodation type for a student with a StudentID of 2 from "Assistive Listening Devices" to "Sign Language Interpretation":\n```sql\nUPDATE StudentAccommodations\nSET AccommodationType = \'Sign Language Interpretation\'\nWHERE StudentID = 2;\n```\nThis query uses the UPDATE statement to modify the existing record in the StudentAccommodations table. The SET clause specifies the column to be updated and the new value, and the WHERE clause identifies the specific record to be updated based on the StudentID of 2.',
    sql='Here is the SQL query to update the accommodation type for a student with a StudentID of 2 from "Assistive Listening Devices" to "Sign Language Interpretation":\n```sql\nUPDATE StudentAccommodations\nSET AccommodationType = \'Sign Language Interpretation\'\nWHERE StudentID = 2;\n```\n\nThis query uses the `UPDATE` statement to modify the existing record in the `StudentAccommodations` table. The `SET` clause specifies the column to be updated and the new value, and the `WHERE` clause identifies the specific record to be updated based on the StudentID of 2.'
), 1), (Example({'sql_prompt': 'What is the minimum square footage of an inclusive housing unit in the city of Miami?', 'sql_context': "CREATE TABLE housing (id INT, city VARCHAR(20), size INT, inclusive BOOLEAN); INSERT INTO housing (id, city, size, inclusive) VALUES (1, 'Miami', 800, TRUE), (2, 'Miami', 1000, FALSE), (3, 'Miami', 1200, TRUE);", 'sql': "SELECT MIN(size) FROM housing WHERE city = 'Miami' AND inclusive = TRUE;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the minimum square footage of an inclusive housing unit in Miami, we can use the following SQL query:\n```sql\nSELECT MIN(size) FROM housing WHERE city = \'Miami\' AND inclusive = TRUE;\n```\nThis query selects the minimum value of the "size" column from the "housing" table where the "city" is \'Miami\' and the "inclusive" column is true. This will give us the smallest square footage among the inclusive housing units in Miami.',
    sql='Here is the SQL query to find the minimum square footage of an inclusive housing unit in Miami:\n```sql\nSELECT MIN(size) FROM housing WHERE city = \'Miami\' AND inclusive = TRUE;\n```\n\nThis query selects the minimum value of the "size" column from the "housing" table where the "city" is \'Miami\' and the "inclusive" column is true. This will give us the smallest square footage among the inclusive housing units in Miami.'
), 1), (Example({'sql_prompt': 'How many works were exhibited in the year 1950?', 'sql_context': "CREATE TABLE exhibitions (exhibition_id INT PRIMARY KEY, exhibition_name TEXT, year INT, location TEXT);CREATE TABLE exhibits (exhibit_id INT PRIMARY KEY, work_id INT, exhibition_id INT, FOREIGN KEY (work_id) REFERENCES works(work_id), FOREIGN KEY (exhibition_id) REFERENCES exhibitions(exhibition_id));INSERT INTO exhibitions (exhibition_id, exhibition_name, year, location) VALUES (1, 'Documenta', 1950, 'Kassel, Germany'); INSERT INTO exhibits (exhibit_id, work_id, exhibition_id) VALUES (1, 1, 1);", 'sql': 'SELECT COUNT(*) FROM exhibits e JOIN exhibitions ex ON e.exhibition_id = ex.exhibition_id WHERE ex.year = 1950;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To answer the question, we need to determine how many works were exhibited in the year 1950. We can achieve this by performing a query that joins the exhibitions and exhibits tables based on the exhibition_id and filtering for the year 1950. Here's the SQL query:\n```sql\nSELECT COUNT(DISTINCT e.work_id) AS num_works_exhibited\nFROM exhibitions ex\nJOIN exhibits e ON ex.exhibition_id = e.exhibition_id\nWHERE ex.year = 1950;\n```\nThis query joins the exhibitions table (aliased as ex) with the exhibits table (aliased as e) on the exhibition_id. It",
    sql='Here is the SQL query to determine how many works were exhibited in the year 1950:\n```sql\nSELECT COUNT(DISTINCT e.work_id) AS num_works_exhibited\nFROM exhibitions ex\nJOIN exhibits e ON ex.exhibition_id = e.exhibition_id\nWHERE ex.year = 1950;\n```\n\nStep-by-step reasoning:\n1. We start by selecting the count of distinct work IDs from the exhibits table, which represents the number of unique works exhibited.\n2. We then perform an inner join between the exhibitions table (aliased as ex) and the exhibits table (aliased as e) using the exhibition_id'
), 0), (Example({'sql_prompt': 'What is the total number of articles written by each author in each region?', 'sql_context': "CREATE TABLE authors (id INT, name TEXT); CREATE TABLE regions (id INT, name TEXT); CREATE TABLE articles (id INT, title TEXT, content TEXT, author_id INT, region_id INT); INSERT INTO authors (id, name) VALUES (1, 'John Doe'), (2, 'Jane Smith'); INSERT INTO regions (id, name) VALUES (1, 'North'), (2, 'South'), (3, 'East'), (4, 'West'); INSERT INTO articles (id, title, content, author_id, region_id) VALUES (1, 'Article 1', 'Content 1', 1, 1), (2, 'Article 2', 'Content 2', 2, 2), (3, 'Article 3', 'Content 3', 1, 3), (4, 'Article 4', 'Content 4', 2, 4);", 'sql': 'SELECT authors.name, regions.name, COUNT(articles.id) FROM authors INNER JOIN articles ON authors.id = articles.author_id INNER JOIN regions ON regions.id = articles.region_id GROUP BY authors.name, regions.name;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query that answers the prompt:\n```sql\nSELECT a.name AS author_name, r.name AS region_name, COUNT(a.id) AS article_count\nFROM authors a\nJOIN articles art ON a.id = art.author_id\nJOIN regions r ON art.region_id = r.id\nGROUP BY a.name, r.name;\n```\n\nStep by step reasoning:\n1. We first select the names of authors and regions from their respective tables.\n2. We then join the `authors` table with the `articles` table on the `author_id` to link authors to their articles.\n3. Next, we join the resulting',
    sql='Here is the SQL query that answers the prompt:\n```sql\nSELECT a.name AS author_name, r.name AS region_name, COUNT(a.id) AS article_count\nFROM authors a\nJOIN articles art ON a.id = art.author_id\nJOIN regions r ON art.region_id = r.id\nGROUP BY a.name, r.name;\n```\n\nStep by step reasoning:\n1. We first select the names of authors and regions from their respective tables.\n2. We then join the `authors` table with the `articles` table on the `author_id` to link authors to their articles.\n3. Next, we join the resulting'
), 1), (Example({'sql_prompt': 'How many tunnels in Washington state were constructed after 2010?', 'sql_context': "CREATE TABLE tunnels (id INT, name TEXT, state TEXT, build_year INT); INSERT INTO tunnels (id, name, state, build_year) VALUES (1, 'WA-1 Underpass', 'WA', 2012);", 'sql': "SELECT COUNT(*) FROM tunnels WHERE state = 'WA' AND build_year > 2010;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To answer the question "How many tunnels in Washington state were constructed after 2010?", we can use the following SQL query:\n```sql\nSELECT COUNT(*) FROM tunnels WHERE state = \'WA\' AND build_year > 2010;\n```\nThis query counts the number of rows (tunnels) in the "tunnels" table where the state is \'WA\' (Washington) and the build year is greater than 2010. The result will give us the number of tunnels constructed after 2010 in Washington state.',
    sql='Here is the SQL query to answer the question "How many tunnels in Washington state were constructed after 2010?":\n```sql\nSELECT COUNT(*) FROM tunnels WHERE state = \'WA\' AND build_year > 2010;\n```\n\nThis query counts the number of rows (tunnels) in the "tunnels" table where the state is \'WA\' (Washington) and the build year is greater than 2010. The result will give us the number of tunnels constructed after 2010 in Washington state.'
), 1), (Example({'sql_prompt': 'List the top 5 models with the highest explainability scores and their development team names.', 'sql_context': 'CREATE TABLE ModelExplainabilityScores (ModelID INT, ExplainabilityScore INT, TeamID INT); CREATE TABLE TeamNames (TeamID INT, TeamName VARCHAR(50));', 'sql': 'SELECT ModelExplainabilityScores.ModelID, MAX(ModelExplainabilityScores.ExplainabilityScore) AS MaxExplainabilityScore, TeamNames.TeamName FROM ModelExplainabilityScores INNER JOIN TeamNames ON ModelExplainabilityScores.TeamID = TeamNames.TeamID GROUP BY ModelExplainabilityScores.TeamID ORDER BY MaxExplainabilityScore DESC, TeamNames.TeamName DESC LIMIT 5;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to list the top 5 models with the highest explainability scores and their development team names:\n```sql\nSELECT m.ModelID, m.ExplainabilityScore, t.TeamName\nFROM ModelExplainabilityScores m\nJOIN TeamNames t ON m.TeamID = t.TeamID\nORDER BY m.ExplainabilityScore DESC\nLIMIT 5;\n```\n\nStep by step reasoning:\n1. We want to retrieve data from two tables, `ModelExplainabilityScores` (aliased as `m`) and `TeamNames` (aliased as `t`).\n2. We use a `JOIN` operation to combine the rows from both tables based on the common column `Team',
    sql='Here is the SQL query to list the top 5 models with the highest explainability scores and their development team names:\n```sql\nSELECT m.ModelID, m.ExplainabilityScore, t.TeamName\nFROM ModelExplainabilityScores m\nJOIN TeamNames t ON m.TeamID = t.TeamID\nORDER BY m.ExplainabilityScore DESC\nLIMIT 5;\n```\n\nStep-by-step reasoning:\n1. We want to retrieve data from two tables, `ModelExplainabilityScores` (aliased as `m`) and `TeamNames` (aliased as `t`).\n2. We use a `JOIN` operation to combine the rows from both tables based on the common column'
), 0), (Example({'sql_prompt': 'How many renewable energy power plants are there in Texas?', 'sql_context': "CREATE TABLE power_plants (state VARCHAR(255), source_type VARCHAR(255), count INT); INSERT INTO power_plants (state, source_type, count) VALUES ('Texas', 'Wind', 45), ('Texas', 'Solar', 25), ('Texas', 'Hydro', 10);", 'sql': "SELECT SUM(count) FROM power_plants WHERE state = 'Texas';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To answer the question "How many renewable energy power plants are there in Texas?", we need to count the number of power plants in Texas that have a source type of renewable energy. Here\'s the SQL query to achieve that:\n```sql\nSELECT COUNT(*) AS renewable_plant_count\nFROM power_plants\nWHERE state = \'Texas\' AND source_type IN (\'Wind\', \'Solar\', \'Hydro\');\n```\n\nThis query counts the rows (power plants) where the state is Texas and the source type is either Wind, Solar, or Hydro, which are all forms of renewable energy. The result will give us the total number of renewable energy power plants in Texas.',
    sql='Here is the SQL query to answer the question "How many renewable energy power plants are there in Texas?":\n```sql\nSELECT COUNT(*) AS renewable_plant_count\nFROM power_plants\nWHERE state = \'Texas\' AND source_type IN (\'Wind\', \'Solar\', \'Hydro\');\n```\n\nStep-by-step reasoning: \n1. The `COUNT(*)` aggregate function counts the number of rows that match the specified conditions.\n2. The `WHERE` clause filters the rows based on certain conditions. In this case, we are filtering for power plants in Texas (`state = \'Texas\'`) and those with renewable energy source types (`source_type IN (\'Wind\', \'Solar\', \'Hydro\')`).'
), 0), (Example({'sql_prompt': 'Find the top 5 countries with the lowest financial capability scores in Europe.', 'sql_context': 'CREATE TABLE financial_capability (id INT, country VARCHAR(255), score INT);', 'sql': "SELECT country, score FROM (SELECT country, score, ROW_NUMBER() OVER (ORDER BY score ASC) rn FROM financial_capability WHERE region = 'Europe') t WHERE rn <= 5;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to find the top 5 countries with the lowest financial capability scores in Europe:\n```sql\nSELECT country, score\nFROM financial_capability\nWHERE country IN (\n    SELECT country\n    FROM financial_capability\n    WHERE country IN (\n        SELECT DISTINCT country\n        FROM financial_capability\n        WHERE country LIKE '%Europe%'\n    )\n    AND score = (\n        SELECT MIN(score)\n        FROM financial_capability\n        WHERE country IN (\n            SELECT DISTINCT country\n            FROM financial_capability\n            WHERE country LIKE '%Europe%'\n        )\n    )\n)\nORDER BY score ASC\nLIMIT 5;\n```\n\nStep by step explanation:\n1. The innermost subquery selects the minimum score among countries in Europe",
    sql="Here is the SQL query to find the top 5 countries with the lowest financial capability scores in Europe:\n```sql\nSELECT country, score\nFROM financial_capability\nWHERE country IN (\n    SELECT country\n    FROM financial_capability\n    WHERE country IN (\n        SELECT DISTINCT country\n        FROM financial_capability\n        WHERE country LIKE '%Europe%'\n    )\n    AND score = (\n        SELECT MIN(score)\n        FROM financial_capability\n        WHERE country IN (\n            SELECT DISTINCT country\n            FROM financial_capability\n            WHERE country LIKE '%Europe%'\n        )\n    )\n)\nORDER BY score ASC\nLIMIT 5;\n```\n\nStep by step explanation:\n1. The innermost subquery selects the minimum score among countries in Europe"
), 0), (Example({'sql_prompt': 'What is the correlation between climate change and biodiversity in the Arctic?', 'sql_context': "CREATE TABLE Climate_Change (id INT PRIMARY KEY, year INT, temperature FLOAT, region VARCHAR(50)); CREATE TABLE Biodiversity (id INT, year INT, species_count INT, region VARCHAR(50), climate_id INT, FOREIGN KEY (climate_id) REFERENCES Climate_Change(id)); INSERT INTO Climate_Change (id, year, temperature, region) VALUES (1, 2000, -10.0, 'Arctic'), (2, 2010, -9.5, 'Arctic'); INSERT INTO Biodiversity (id, year, species_count, region, climate_id) VALUES (1, 2000, 100, 'Arctic', 1), (2, 2010, 105, 'Arctic', 2);", 'sql': "SELECT Climate_Change.year, Climate_Change.temperature, Biodiversity.species_count FROM Climate_Change INNER JOIN Biodiversity ON Climate_Change.id = Biodiversity.climate_id WHERE Climate_Change.region = 'Arctic';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the correlation between climate change and biodiversity in the Arctic, we can use the following SQL query:\n```sql\nSELECT\n    cc.year,\n    cc.temperature,\n    bd.species_count,\n    cc.region,\n    cc.temperature - bd.species_count AS temperature_difference\nFROM Climate_Change cc\nJOIN Biodiversity bd ON cc.id = bd.climate_id AND cc.region = bd.region\nWHERE cc.region = 'Arctic';\n```\n\nThis query joins the `Climate_Change` and `Biodiversity` tables on the `id` and `region` columns, respectively. It then calculates the difference between the temperature and the species count for each year in the Arctic",
    sql="Here is the SQL query to find the correlation between climate change and biodiversity in the Arctic:\n```sql\nSELECT cc.year, cc.temperature, bd.species_count, cc.region,\n       cc.temperature - bd.species_count AS temperature_difference\nFROM Climate_Change cc\nJOIN Biodiversity bd ON cc.id = bd.climate_id AND cc.region = bd.region\nWHERE cc.region = 'Arctic';\n```\n\nThis query joins the `Climate_Change` and `Biodiversity` tables on the `id` and `region` columns, respectively. It then calculates the difference between the temperature and the species count for each year in the Arctic region. This difference can be interpreted"
), 0), (Example({'sql_prompt': 'What is the average budget allocated for ethical AI research by country?', 'sql_context': "CREATE TABLE Country (CountryID INT PRIMARY KEY, CountryName VARCHAR(100), Budget DECIMAL(10,2)); INSERT INTO Country (CountryID, CountryName, Budget) VALUES (1, 'USA', 5000000.00), (2, 'Canada', 3000000.00), (3, 'Mexico', 1000000.00);", 'sql': 'SELECT AVG(Budget) as AvgBudget, CountryName FROM Country GROUP BY CountryName;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to calculate the average budget allocated for ethical AI research by country:\n```sql\nSELECT CountryName, AVG(Budget) AS Avg_Budget\nFROM Country\nGROUP BY CountryName;\n```\n\nThis query selects the `CountryName` and calculates the average of the `Budget` column for each country using the `AVG` function. The `GROUP BY` clause groups the results by country name, so you get the average budget for each country.',
    sql='Here is the SQL query to calculate the average budget allocated for ethical AI research by country:\n```sql\nSELECT CountryName, AVG(Budget) AS Avg_Budget\nFROM Country\nGROUP BY CountryName;\n```\n\nThis query selects the `CountryName` and calculates the average of the `Budget` column for each country using the `AVG` function. The `GROUP BY` clause groups the results by country name, so you get the average budget for each country.'
), 1), (Example({'sql_prompt': 'What is the total fare collected for each train line?', 'sql_context': "CREATE TABLE train_lines (line_id INT, line_name TEXT); CREATE TABLE fares (fare_id INT, line_id INT, fare DECIMAL); INSERT INTO train_lines VALUES (1, 'Line 1'), (2, 'Line 2'), (3, 'Line 3'); INSERT INTO fares VALUES (1, 1, 3.50), (2, 1, 3.50), (3, 2, 4.25), (4, 3, 5.00), (5, 3, 5.00);", 'sql': 'SELECT train_lines.line_name, SUM(fares.fare) AS total_fare FROM train_lines INNER JOIN fares ON train_lines.line_id = fares.line_id GROUP BY train_lines.line_id;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to calculate the total fare collected for each train line:\n```sql\nSELECT tl.line_name, SUM(f.fare) AS total_fare_collected\nFROM train_lines tl\nJOIN fares f ON tl.line_id = f.line_id\nGROUP BY tl.line_name;\n```\n\nStep-by-step reasoning:\n1. We start by selecting the `line_name` from the `train_lines` table and calculating the sum of fares for each line.\n2. We use a `JOIN` operation to combine the `train_lines` table (aliased as `tl`) with the `fares` table (aliased as `f',
    sql='Here is the SQL query to calculate the total fare collected for each train line:\n```sql\nSELECT tl.line_name, SUM(f.fare) AS total_fare_collected\nFROM train_lines tl\nJOIN fares f ON tl.line_id = f.line_id\nGROUP BY tl.line_name;\n```\n\nStep-by-step reasoning:\n1. We start by selecting the `line_name` from the `train_lines` table and calculating the sum of fares for each line.\n2. We use a `JOIN` operation to combine the `train_lines` table (aliased as `tl`) with the `fares` table (aliased as `f'
), 1), (Example({'sql_prompt': 'What is the total revenue for cosmetics products that are not cruelty-free?', 'sql_context': 'CREATE TABLE product (product_id INT, name TEXT, price FLOAT, cruelty_free BOOLEAN); CREATE TABLE sales (sale_id INT, product_id INT, quantity INT);', 'sql': 'SELECT SUM(price * quantity) FROM product INNER JOIN sales ON product.product_id = sales.product_id WHERE cruelty_free = FALSE;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to find the total revenue for cosmetics products that are not cruelty-free:\n```sql\nSELECT SUM(p.price * s.quantity) AS total_revenue\nFROM product p\nJOIN sales s ON p.product_id = s.product_id\nWHERE p.cruelty_free = FALSE;\n```\n\nThis query joins the `product` and `sales` tables on the `product_id` column and filters for products that are not cruelty-free using the condition `p.cruelty_free = FALSE`. It then calculates the total revenue by multiplying the price of each product with its quantity sold and summing up the results.',
    sql='Here is the SQL query to find the total revenue for cosmetics products that are not cruelty-free:\n```sql\nSELECT SUM(p.price * s.quantity) AS total_revenue\nFROM product p\nJOIN sales s ON p.product_id = s.product_id\nWHERE p.cruelty_free = FALSE;\n```\n\nThis query joins the `product` and `sales` tables on the `product_id` column and filters for products that are not cruelty-free using the condition `p.cruelty_free = FALSE`. It then calculates the total revenue by multiplying the price of each product with its quantity sold and summing up the results.'
), 1), (Example({'sql_prompt': 'What is the total cost of permits for projects with permit numbers greater than 700?', 'sql_context': "CREATE TABLE permit_data (id INT, project VARCHAR(50), permit_number INT, start_date DATE, permit_cost DECIMAL(10,2)); INSERT INTO permit_data (id, project, permit_number, start_date, permit_cost) VALUES (1, 'Office Building', 450, '2019-12-20', 850.00), (2, 'Residential Apartments', 751, '2021-03-01', 1200.50), (3, 'School', 333, '2020-06-15', 500.25), (4, 'Mall', 780, '2020-12-01', 1500.75);", 'sql': 'SELECT SUM(permit_cost) FROM permit_data WHERE permit_number > 700;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to find the total cost of permits for projects with permit numbers greater than 700:\n```sql\nSELECT SUM(permit_cost) AS total_permit_cost\nFROM permit_data\nWHERE permit_number > 700;\n```\n\nThis query calculates the sum of the `permit_cost` column for rows where the `permit_number` is greater than 700, and assigns it an alias `total_permit_cost`. The result will be a single value representing the total cost of permits for projects with permit numbers greater than 700.',
    sql='Here is the SQL query to find the total cost of permits for projects with permit numbers greater than 700:\n```sql\nSELECT SUM(permit_cost) AS total_permit_cost\nFROM permit_data\nWHERE permit_number > 700;\n```\n\nThis query calculates the sum of the `permit_cost` column for rows where the `permit_number` is greater than 700 and assigns it an alias `total_permit_cost`. The result will be a single value representing the total cost of permits for projects with permit numbers greater than 700.'
), 1), (Example({'sql_prompt': 'Find the total square footage of wheelchair-accessible properties in Boston.', 'sql_context': "CREATE TABLE properties (id INT, city VARCHAR(20), square_footage INT, wheelchair_accessible BOOLEAN); INSERT INTO properties (id, city, square_footage, wheelchair_accessible) VALUES (1, 'Boston', 1000, true); INSERT INTO properties (id, city, square_footage, wheelchair_accessible) VALUES (2, 'Boston', 1200, false);", 'sql': "SELECT SUM(square_footage) FROM properties WHERE city = 'Boston' AND wheelchair_accessible = true;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to find the total square footage of wheelchair-accessible properties in Boston:\n```sql\nSELECT SUM(square_footage) AS total_square_footage\nFROM properties\nWHERE city = 'Boston' AND wheelchair_accessible = true;\n```\n\nThis query sums up the `square_footage` column for all rows where the `city` is 'Boston' and the `wheelchair_accessible` column is true, giving you the total square footage of wheelchair-accessible properties in Boston.",
    sql="Here is the SQL query to find the total square footage of wheelchair-accessible properties in Boston:\n```sql\nSELECT SUM(square_footage) AS total_square_footage\nFROM properties\nWHERE city = 'Boston' AND wheelchair_accessible = true;\n```\n\nThis query sums up the `square_footage` column for all rows where the `city` is 'Boston' and the `wheelchair_accessible` column is true, giving you the total square footage of wheelchair-accessible properties in Boston."
), 1), (Example({'sql_prompt': 'Which operators have the highest average production quantity per well?', 'sql_context': "CREATE TABLE wells (well_id INT, well_name TEXT, production_qty FLOAT, operator_id INT); INSERT INTO wells (well_id, well_name, production_qty, operator_id) VALUES (1, 'Well A', 1000, 1), (2, 'Well B', 1500, 1), (3, 'Well C', 800, 2); CREATE TABLE operators (operator_id INT, operator_name TEXT); INSERT INTO operators (operator_id, operator_name) VALUES (1, 'ABC Inc.'), (2, 'DEF'), (3, 'GHI Inc.');", 'sql': 'SELECT o.operator_name, AVG(w.production_qty) as avg_production FROM wells w JOIN operators o ON w.operator_id = o.operator_id GROUP BY o.operator_name ORDER BY avg_production DESC;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query that answers the question you have described:\n```sql\nSELECT o.operator_name, AVG(w.production_qty) AS avg_production_per_well\nFROM wells w\nJOIN operators o ON w.operator_id = o.operator_id\nGROUP BY o.operator_name\nORDER BY avg_production_per_well DESC;\n```\n\n**Step-by-step reasoning:**\n\n1. We start by selecting data from the `wells` table, which contains information about each well, including its production quantity and operator ID.\n2. We then join this table with the `operators` table using the `operator_id` as the common key. This allows',
    sql='Here is the SQL query that answers the question you have described:\n```sql\nSELECT o.operator_name, AVG(w.production_qty) AS avg_production_per_well\nFROM wells w\nJOIN operators o ON w.operator_id = o.operator_id\nGROUP BY o.operator_name\nORDER BY avg_production_per_well DESC;\n```\n\n**Step-by-step reasoning:**\n1. We start by selecting data from the `wells` table, which contains information about each well, including its production quantity and operator ID.\n2. We then join this table with the `operators` table using the `operator_id` as the common key. This allows'
), 1), (Example({'sql_prompt': 'What was the average number of comments per post in Oceania in the last month?', 'sql_context': "CREATE TABLE comments_posts(region VARCHAR(20), post_date DATE, comments INT, posts INT); INSERT INTO comments_posts(region, post_date, comments, posts) VALUES('Oceania', '2021-09-01', 10, 10), ('Oceania', '2021-09-02', 12, 12), ('Oceania', '2021-09-03', 14, 14), ('Oceania', '2021-09-04', 16, 16), ('Oceania', '2021-09-05', 18, 18), ('Oceania', '2021-09-06', 20, 20), ('Oceania', '2021-09-07', 22, 22);", 'sql': "SELECT AVG(comments/posts) FROM comments_posts WHERE region = 'Oceania' AND post_date >= DATEADD(month, -1, CURRENT_DATE)"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to find the average number of comments per post in Oceania in the last month:\n```sql\nSELECT AVG(comments) AS avg_comments_per_post\nFROM comments_posts\nWHERE region = \'Oceania\' AND post_date >= DATEADD(MONTH, -1, GETDATE());\n```\n\nThis query calculates the average value of the "comments" column for rows where the "region" is \'Oceania\' and the "post_date" is within the last month from the current date. The `DATEADD` function is used to subtract one month from the current date (`GETDATE()`), and then it\'s compared with the "post_date" column to filter the relevant data.',
    sql='Here is the SQL query to find the average number of comments per post in Oceania in the last month:\n```sql\nSELECT AVG(comments) AS avg_comments_per_post\nFROM comments_posts\nWHERE region = \'Oceania\' AND post_date >= DATEADD(MONTH, -1, GETDATE());\n```\n\nThis query calculates the average value of the "comments" column for rows where the "region" is \'Oceania\' and the "post_date" is within the last month from the current date. The `DATEADD` function is used to subtract one month from the current date (`GETDATE()`), and then it\'s compared with the "post_date" column to filter the relevant data.'
), 0), (Example({'sql_prompt': 'What is the geopolitical risk assessment score for each country in 2020?', 'sql_context': "CREATE TABLE GeopoliticalRiskAssessments (assessment_id INT, assessment_name VARCHAR(50), score INT, assessment_date DATE, country VARCHAR(50)); INSERT INTO GeopoliticalRiskAssessments (assessment_id, assessment_name, score, assessment_date, country) VALUES (1, 'Assessment A', 7, '2020-01-01', 'USA'), (2, 'Assessment B', 5, '2020-02-15', 'Russia'), (3, 'Assessment C', 8, '2020-03-31', 'China');", 'sql': "SELECT country, score FROM GeopoliticalRiskAssessments WHERE assessment_date BETWEEN '2020-01-01' AND '2020-12-31';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to retrieve the geopolitical risk assessment scores for each country in 2020:\n```sql\nSELECT country, score\nFROM GeopoliticalRiskAssessments\nWHERE EXTRACT(YEAR FROM assessment_date) = 2020;\n```\n\nStep by step reasoning:\n1. We start by selecting the columns we want to retrieve, which are `country` and `score`.\n2. We then specify the table we are querying, which is `GeopoliticalRiskAssessments`.\n3. The `WHERE` clause is used to filter the results based on a condition. In this case, we use the `EXTRACT` function to get the year from the `',
    sql='Here is the SQL query to retrieve the geopolitical risk assessment scores for each country in 2020:\n```sql\nSELECT country, score FROM GeopoliticalRiskAssessments WHERE EXTRACT(YEAR FROM assessment_date) = 2020;\n```\n\nStep-by-step reasoning:\n1. We start by selecting the columns we want to retrieve, which are `country` and `score`.\n2. We then specify the table we are querying, which is `GeopoliticalRiskAssessments`.\n3. The `WHERE` clause is used to filter the results based on a condition. In this case, we use the `EXTRACT` function to get the year from the `'
), 1), (Example({'sql_prompt': 'Find the total revenue for events with an attendance over 200 in 2021.', 'sql_context': "CREATE TABLE events (event_id INT, event_name VARCHAR(50), attendance INT, revenue DECIMAL(10,2), event_date DATE); INSERT INTO events (event_id, event_name, attendance, revenue, event_date) VALUES (1, 'Art Exhibition', 250, 15000, '2021-06-01'); INSERT INTO events (event_id, event_name, attendance, revenue, event_date) VALUES (2, 'Theater Performance', 180, 12000, '2021-07-15');", 'sql': 'SELECT SUM(revenue) FROM events WHERE attendance > 200 AND YEAR(event_date) = 2021;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to find the total revenue for events with an attendance over 200 in 2021:\n```sql\nSELECT SUM(revenue) AS total_revenue\nFROM events\nWHERE attendance > 200 AND EXTRACT(YEAR FROM event_date) = 2021;\n```\n\nThis query calculates the sum of the `revenue` column for all rows where the `attendance` is greater than 200 and the year of the `event_date` is 2021. The result will give you the total revenue generated from events meeting these criteria.',
    sql='Here is the SQL query to find the total revenue for events with an attendance over 200 in 2021:\n```sql\nSELECT SUM(revenue) AS total_revenue\nFROM events\nWHERE attendance > 200 AND EXTRACT(YEAR FROM event_date) = 2021;\n```\n\nThis query calculates the sum of the `revenue` column for all rows where the `attendance` is greater than 200 and the year of the `event_date` is 2021. The result will give you the total revenue generated from events meeting these criteria.'
), 1), (Example({'sql_prompt': "find the number of records in the CommunityHealthStatistics table where the State is 'TX' and the County is 'Harris'", 'sql_context': "CREATE TABLE CommunityHealthStatistics (ID INT, State TEXT, County TEXT, Population INT, AverageIncome FLOAT); INSERT INTO CommunityHealthStatistics (ID, State, County, Population, AverageIncome) VALUES (1, 'TX', 'Harris', 4500000, 60000), (2, 'CA', 'LA', 2500000, 70000);", 'sql': "SELECT * FROM CommunityHealthStatistics WHERE State = 'TX' AND County = 'Harris';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to find the number of records in the CommunityHealthStatistics table where the State is 'TX' and the County is 'Harris':\n```sql\nSELECT COUNT(*) FROM CommunityHealthStatistics WHERE State = 'TX' AND County = 'Harris';\n```\nThis query uses the COUNT() function to count the number of records that meet the specified conditions. The WHERE clause specifies the conditions that must be met for a record to be included in the count: State must be 'TX' and County must be 'Harris'.",
    sql="Here is the SQL query to find the number of records in the CommunityHealthStatistics table where the State is 'TX' and the County is 'Harris':\n```sql\nSELECT COUNT(*) FROM CommunityHealthStatistics WHERE State = 'TX' AND County = 'Harris';\n```\n\nThis query uses the COUNT() function to count the number of records that meet the specified conditions. The WHERE clause specifies the conditions that must be met for a record to be included in the count: State must be 'TX' and County must be 'Harris'."
), 0), (Example({'sql_prompt': "Insert a new record into the 'weapons' table with the following data: 'Javelin', 'USA', 'in-development'", 'sql_context': "CREATE TABLE weapons (id INT PRIMARY KEY, name VARCHAR(255), origin VARCHAR(255), status VARCHAR(255)); INSERT INTO weapons (id, name, origin) VALUES (1, 'AK-47', 'Russia'), (2, 'RPG-7', 'Russia');", 'sql': "INSERT INTO weapons (name, origin, status) VALUES ('Javelin', 'USA', 'in-development');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to insert a new record into the "weapons" table with the given data:\n```sql\nINSERT INTO weapons (name, origin, status) VALUES (\'Javelin\', \'USA\', \'in-development\');\n```\nThis query inserts a new row into the "weapons" table with the name "Javelin," origin as "USA," and status as "in-development."',
    sql='Here is the SQL query to insert a new record into the "weapons" table with the given data:\n```sql\nINSERT INTO weapons (name, origin, status)\nVALUES (\'Javelin\', \'USA\', \'in-development\');\n```\n\nThis query inserts a new row into the "weapons" table with the name "Javelin," origin as "USA," and status as "in-development."'
), 1), (Example({'sql_prompt': 'Count the number of mining incidents per month in 2021.', 'sql_context': "CREATE TABLE incidents (id INT, date DATE, incident_type TEXT); INSERT INTO incidents (id, date, incident_type) VALUES (1, '2021-01-05', 'equipment_failure'); INSERT INTO incidents (id, date, incident_type) VALUES (2, '2021-03-12', 'safety_violation');", 'sql': "SELECT DATE_PART('month', date) AS month, COUNT(*) FROM incidents WHERE date >= '2021-01-01' AND date < '2022-01-01' GROUP BY month;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to count the number of mining incidents per month in 2021:\n```sql\nSELECT EXTRACT(MONTH FROM date) AS month, COUNT(*) AS incident_count\nFROM incidents\nWHERE EXTRACT(YEAR FROM date) = 2021\nGROUP BY EXTRACT(MONTH FROM date)\nORDER BY month;\n```\n\nStep by step reasoning:\n1. We use the `EXTRACT` function to get the month from the "date" column and assign it an alias "month."\n2. We then use the `COUNT` function to count the number of incidents for each month.\n3. The `WHERE` clause filters the data to only include records from',
    sql='Here is the SQL query to count the number of mining incidents per month in 2021:\n```sql\nSELECT EXTRACT(MONTH FROM date) AS month, COUNT(*) AS incident_count\nFROM incidents\nWHERE EXTRACT(YEAR FROM date) = 2021\nGROUP BY EXTRACT(MONTH FROM date)\nORDER BY month;\n```\n\nStep-by-step reasoning:\n1. We use the `EXTRACT` function to get the month from the "date" column and assign it an alias "month."\n2. We then use the `COUNT` function to count the number of incidents for each month.\n3. The `WHERE` clause filters the data to only include'
), 1), (Example({'sql_prompt': "How many workers are employed in 'renewable energy' sector?", 'sql_context': "CREATE TABLE workers (id INT, worker_name VARCHAR(255), department VARCHAR(255)); INSERT INTO workers (id, worker_name, department) VALUES (1, 'John Doe', 'renewable energy'), (2, 'Jane Smith', 'textiles'), (3, 'Michael Brown', 'renewable energy');", 'sql': "SELECT COUNT(*) FROM workers WHERE department = 'renewable energy';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to find out how many workers are employed in the 'renewable energy' sector:\n```sql\nSELECT COUNT(*) FROM workers WHERE department = 'renewable energy';\n```\nThis query counts the number of rows (workers) where the department is 'renewable energy', giving us the total number of workers in that sector.",
    sql="Here is the SQL query to find out how many workers are employed in the 'renewable energy' sector:\n```sql\nSELECT COUNT(*) FROM workers WHERE department = 'renewable energy';\n```\nThis query counts the number of rows (workers) where the department is 'renewable energy', giving us the total number of workers in that sector."
), 1), (Example({'sql_prompt': 'What is the average performance score for each game genre?', 'sql_context': "CREATE TABLE game_genre_performance (game_id INT, game_genre VARCHAR(255), performance_score INT); INSERT INTO game_genre_performance (game_id, game_genre, performance_score) VALUES (1, 'RPG', 85), (2, 'Strategy', 90), (3, 'RPG', 80);", 'sql': 'SELECT game_genre, AVG(performance_score) as avg_score FROM game_genre_performance GROUP BY game_genre;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to calculate the average performance score for each game genre:\n```sql\nSELECT game_genre, AVG(performance_score) AS avg_performance\nFROM game_genre_performance\nGROUP BY game_genre;\n```\n\nThis query groups the data by `game_genre` and calculates the average `performance_score` for each group using the `AVG` function. The result will show the average performance score for each game genre.',
    sql='Here is the SQL query to calculate the average performance score for each game genre:\n```sql\nSELECT game_genre, AVG(performance_score) AS avg_performance\nFROM game_genre_performance\nGROUP BY game_genre;\n```\n\nThis query groups the data by `game_genre` and calculates the average `performance_score` for each group using the `AVG` function. The result will show the average performance score for each game genre.'
), 1), (Example({'sql_prompt': 'How many Indigenous communities in the Arctic are experiencing negative socio-economic impacts due to climate change?', 'sql_context': "CREATE TABLE IndigenousCommunities(community TEXT, socio_economic_impact TEXT, climate_change_impact TEXT); INSERT INTO IndigenousCommunities(community, socio_economic_impact, climate_change_impact) VALUES ('Inuit', 'High', 'Very High'), ('Sami', 'Medium', 'High');", 'sql': "SELECT COUNT(*) FROM IndigenousCommunities WHERE socio_economic_impact = 'High' AND climate_change_impact = 'High' OR socio_economic_impact = 'Very High' AND climate_change_impact = 'Very High';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To answer the question, we need to identify Indigenous communities in the Arctic that are experiencing negative socio-economic impacts due to climate change. Here's the SQL query to achieve that:\n```sql\nSELECT COUNT(*) FROM IndigenousCommunities\nWHERE community IN ('Inuit', 'Sami')\n  AND socio_economic_impact = 'High'\n  AND climate_change_impact = 'Very High';\n```\n\nThis query counts the number of rows (communities) that meet all three conditions: being in the Arctic (Inuit or Sami), having a high socio-economic impact, and experiencing very high negative impacts from climate change. The result will give us the number of Indigenous communities in the Arctic facing these specific challenges.",
    sql="Here is the SQL query to answer the question:\n```sql\nSELECT COUNT(*) FROM IndigenousCommunities WHERE community IN ('Inuit', 'Sami') AND socio_economic_impact = 'High' AND climate_change_impact = 'Very High';\n```\n\nStep-by-step reasoning:\n1. We start by selecting from the `IndigenousCommunities` table.\n2. The `WHERE` clause filters the data based on three conditions:\n   - `community IN ('Inuit', 'Sami')`: This ensures we are focusing on Indigenous communities in the Arctic, specifically the Inuit and Sami peoples.\n   - `socio_economic_impact = 'High'`: This condition selects communities with a"
), 0), (Example({'sql_prompt': 'What is the minimum depth recorded in the Mariana Trench?', 'sql_context': "CREATE TABLE ocean_floor_mapping (location VARCHAR(255), depth FLOAT);   INSERT INTO ocean_floor_mapping (location, depth) VALUES ('Mariana Trench', 10994.0), ('Challenger Deep', 10972.8);", 'sql': "SELECT MIN(depth) FROM ocean_floor_mapping WHERE location = 'Mariana Trench';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To answer the question "What is the minimum depth recorded in the Mariana Trench?", we can use the following SQL query:\n```sql\nSELECT MIN(depth) AS min_depth FROM ocean_floor_mapping WHERE location = \'Mariana Trench\';\n```\nThis query selects the minimum value of the "depth" column from the "ocean_floor_mapping" table where the "location" is \'Mariana Trench\'. The result will give us the minimum depth recorded in that specific location.',
    sql='Here is the SQL query to find the minimum depth recorded in the Mariana Trench:\n```sql\nSELECT MIN(depth) AS min_depth\nFROM ocean_floor_mapping\nWHERE location = \'Mariana Trench\';\n```\n\nStep by step reasoning: \n1. The `MIN` function is used to find the minimum value of the "depth" column from the "ocean_floor_mapping" table.\n2. The `WHERE` clause specifies that we are only interested in records where the "location" is \'Mariana Trench\'.\n3. The result will give us the minimum depth recorded in the Mariana Trench.'
), 1), (Example({'sql_prompt': 'List all farmers who have not serviced their irrigation systems in the last 6 months.', 'sql_context': "CREATE TABLE farmer_irrigation (id INT, farmer_id INT, system_type VARCHAR(50), service_date DATE); INSERT INTO farmer_irrigation (id, farmer_id, system_type, service_date) VALUES (1, 1, 'Drip', '2021-08-01'), (2, 2, 'Sprinkler', '2021-10-15'), (3, 3, 'Drip', '2021-11-01'), (4, 4, 'Sprinkler', '2022-02-01'), (5, 5, 'Drip', '2022-03-01'), (6, 6, 'Sprinkler', '2022-01-15'), (7, 7, 'Drip', '2021-06-01'), (8, 8, 'Sprinkler', '2022-04-01'), (9, 9, 'Drip', '2021-12-01'), (10, 10, 'Sprinkler', '2022-05-15');", 'sql': 'SELECT farmers.name FROM farmers LEFT JOIN farmer_irrigation ON farmers.id = farmer_irrigation.farmer_id WHERE farmer_irrigation.service_date <= DATE_SUB(CURDATE(), INTERVAL 6 MONTH);'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to list all farmers who have not serviced their irrigation systems in the last 6 months:\n```sql\nSELECT DISTINCT fi.farmer_id\nFROM farmer_irrigation fi\nWHERE fi.service_date < DATEADD(MONTH, -6, GETDATE());\n```\n\nStep by step reasoning:\n\n1. We start by selecting distinct farmer IDs from the `farmer_irrigation` table. This ensures that we only list each farmer once, even if they have multiple entries in the table.\n2. We use a WHERE clause to filter the results based on the `service_date`. We compare it with a date that is 6 months before the current date using the `',
    sql='Here are the SQL queries for the given prompts: \n\nPrompt 1:\n```sql\nSELECT EXTRACT(DOW FROM usage_time) AS day_of_week,\n       MAX(usage_data) AS peak_usage\nFROM usage_data\nGROUP BY day_of_week\nORDER BY peak_usage DESC;\n```\n\nPrompt 2:\n```sql\nSELECT DISTINCT fi.farmer_id\nFROM farmer_irrigation fi\nWHERE fi.service_date < DATEADD(MONTH, -6, GETDATE());\n```'
), 1), (Example({'sql_prompt': 'What is the most common type of medical equipment across hospitals?', 'sql_context': "CREATE TABLE medical_equipment (id INT, hospital_name TEXT, location TEXT, equipment TEXT, quantity INT, last_updated_date DATE); INSERT INTO medical_equipment (id, hospital_name, location, equipment, quantity, last_updated_date) VALUES (1, 'NY Presbyterian', 'NYC', 'Ventilators', 80, '2021-03-31'); INSERT INTO medical_equipment (id, hospital_name, location, equipment, quantity, last_updated_date) VALUES (2, 'Stanford Hospital', 'Palo Alto', 'Ventilators', 90, '2021-03-31');", 'sql': 'SELECT equipment, MAX(quantity) as max_quantity FROM medical_equipment GROUP BY equipment ORDER BY max_quantity DESC LIMIT 1;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to find the most common type of medical equipment across hospitals:\n```sql\nSELECT equipment, COUNT(*) AS equipment_count\nFROM medical_equipment\nGROUP BY equipment\nORDER BY equipment_count DESC\nLIMIT 1;\n```\n\nThis query groups the data by the "equipment" column and counts the number of occurrences of each type of equipment. The results are then ordered in descending order based on the count, and the `LIMIT 1` clause ensures that only the most common type is returned.',
    sql='Here is the SQL query to find the most common type of medical equipment across hospitals:\n```sql\nSELECT equipment, COUNT(*) AS equipment_count\nFROM medical_equipment\nGROUP BY equipment\nORDER BY equipment_count DESC\nLIMIT 1;\n```\n\nThis query groups the data by the "equipment" column and counts the number of occurrences of each type of equipment. The results are then ordered in descending order based on the count, and the `LIMIT 1` clause ensures that only the most common type is returned.'
), 1), (Example({'sql_prompt': "What is the average rating for 'Gluten-Free' items?", 'sql_context': "CREATE TABLE ratings (item_name TEXT, is_gluten_free BOOLEAN, rating INTEGER); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Quinoa Salad', true, 4); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Chicken Stir Fry', false, 5);", 'sql': 'SELECT AVG(rating) FROM ratings WHERE is_gluten_free = true;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To answer the question, we need to find the average rating of items that are marked as 'Gluten-Free'. Here's the SQL query to achieve that:\n```sql\nSELECT AVG(rating) AS avg_rating\nFROM ratings\nWHERE is_gluten_free;\n```\nThis query calculates the average of the 'rating' column for rows where the 'is_gluten_free' column is true, giving us the average rating for gluten-free items.",
    sql="Here is the SQL query to find the average rating for 'Gluten-Free' items:\n```sql\nSELECT AVG(rating) AS avg_rating\nFROM ratings\nWHERE is_gluten_free;\n```\n\nThis query calculates the average of the 'rating' column for rows where the 'is_gluten_free' column is true, giving us the average rating for gluten-free items."
), 1), (Example({'sql_prompt': 'How many water treatment facilities are there in each country, and what is their distribution by continent?', 'sql_context': "CREATE TABLE facilities (id INT, facility_name VARCHAR(50), country VARCHAR(50), total_employees INT); INSERT INTO facilities (id, facility_name, country, total_employees) VALUES (1, 'Water Treatment Plant 1', 'Brazil', 25); INSERT INTO facilities (id, facility_name, country, total_employees) VALUES (2, 'Water Treatment Plant 2', 'India', 30);", 'sql': 'SELECT country, COUNT(*) as facility_count, CONTINENT(location) as continent FROM facilities JOIN countries ON facilities.country = countries.country_name GROUP BY country, continent;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query that answers the question you have described:\n```sql\nSELECT country, COUNT(*) AS facility_count\nFROM facilities\nGROUP BY country;\n```\n\nThis query groups the data by country and counts the number of water treatment facilities in each country. The result will show a list of countries and the corresponding number of facilities in each country.',
    sql='Here is the SQL query that answers the question you have described:\n```sql\nSELECT country, COUNT(*) AS facility_count\nFROM facilities\nGROUP BY country;\n```\nThis query groups the data by country and counts the number of water treatment facilities in each country. The result will show a list of countries and the corresponding number of facilities in each country.'
), 0), (Example({'sql_prompt': "What is the maximum data usage in the 'urban' region?", 'sql_context': "CREATE TABLE subscribers (id INT, name VARCHAR(50), data_usage FLOAT, region VARCHAR(20)); INSERT INTO subscribers (id, name, data_usage, region) VALUES (1, 'John Doe', 20.0, 'urban'), (2, 'Jane Doe', 18.0, 'urban');", 'sql': "SELECT MAX(data_usage) FROM subscribers WHERE region = 'urban';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to find the maximum data usage in the 'urban' region:\n```sql\nSELECT MAX(data_usage) AS max_data_usage\nFROM subscribers\nWHERE region = 'urban';\n```\n\nThis query uses the `MAX` function to find the maximum value of the `data_usage` column for records where the `region` is 'urban'. The result will be a single value representing the highest data usage in that region.",
    sql="Here is the SQL query to find the maximum data usage in the 'urban' region:\n```sql\nSELECT MAX(data_usage) AS max_data_usage\nFROM subscribers\nWHERE region = 'urban';\n```\n\nThis query uses the `MAX` function to find the maximum value of the `data_usage` column for records where the `region` is 'urban'. The result will be a single value representing the highest data usage in that region."
), 1), (Example({'sql_prompt': 'Find the average depth of all underwater volcanoes in the Atlantic Ocean.', 'sql_context': "CREATE TABLE underwater_volcanoes (id INT, name VARCHAR(50), depth FLOAT, ocean VARCHAR(20)); INSERT INTO underwater_volcanoes (id, name, depth, ocean) VALUES (1, 'Lost City', 800, 'Atlantic'); INSERT INTO underwater_volcanoes (id, name, depth, ocean) VALUES (2, 'Eyjafjallajokull', 1650, 'Atlantic');", 'sql': "SELECT AVG(depth) FROM underwater_volcanoes WHERE ocean = 'Atlantic';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to find the average depth of all underwater volcanoes in the Atlantic Ocean:\n```sql\nSELECT AVG(depth) AS avg_depth FROM underwater_volcanoes WHERE ocean = \'Atlantic\';\n```\nThis query calculates the average depth of all underwater volcanoes located in the Atlantic Ocean by using the `AVG` function on the "depth" column and filtering the results with the condition `ocean = \'Atlantic\'`.',
    sql='Here is the SQL query to find the average depth of all underwater volcanoes in the Atlantic Ocean:\n```sql\nSELECT AVG(depth) AS avg_depth\nFROM underwater_volcanoes\nWHERE ocean = \'Atlantic\';\n```\n\nThis query calculates the average depth of all underwater volcanoes located in the Atlantic Ocean by using the `AVG` function on the "depth" column and filtering the results with the condition `ocean = \'Atlantic\'`.'
), 1), (Example({'sql_prompt': 'What is the total cost of Mars rover missions that have successfully landed?', 'sql_context': 'CREATE TABLE mars_rovers (id INT PRIMARY KEY, name VARCHAR(255), mission_type VARCHAR(255), agency VARCHAR(255), cost FLOAT, launched_date DATE, landed_date DATE);', 'sql': "SELECT SUM(cost) FROM mars_rovers WHERE mission_type = 'Lander' AND landed_date IS NOT NULL;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To answer the question, we need to identify the columns and conditions that will help us calculate the total cost of Mars rover missions that have successfully landed. Here are the steps:\n\n1. Identify the relevant table: The table provided is named "mars_rovers."\n2. Select the appropriate column: We need to select the "cost" column from the "mars_rovers" table.\n3. Apply conditions: We need to filter the data to include only those rows where the "landed_date" is not NULL, indicating that the rover has successfully landed on Mars.\n4. Calculate the sum: We need to calculate the sum of the "cost" values for the selected rows.\n\nHere\'s the SQL query based',
    sql='Here is the SQL query to calculate the total cost of Mars rover missions that have successfully landed:\n```sql\nSELECT SUM(cost) AS total_cost\nFROM mars_rovers\nWHERE landed_date IS NOT NULL;\n```\nStep-by-step reasoning:\n1. Identify the relevant table: The table provided is named "mars_rovers."\n2. Select the appropriate column: We need to select the "cost" column from the "mars_rovers" table.\n3. Apply conditions: We filter the data using the condition "WHERE landed_date IS NOT NULL," ensuring that we only consider rows where a successful landing date has been recorded.\n4. Calculate the sum: The "SUM" aggregate function'
), 0), (Example({'sql_prompt': "What is the earliest year a peacekeeping operation was conducted in 'Asia'?", 'sql_context': "CREATE TABLE Peacekeeping_Years (id INT, location VARCHAR(30), year INT); INSERT INTO Peacekeeping_Years (id, location, year) VALUES (1, 'Asia', 1990), (2, 'Asia', 2000);", 'sql': "SELECT MIN(year) FROM Peacekeeping_Years WHERE location = 'Asia';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the earliest year a peacekeeping operation was conducted in 'Asia', we can use the following SQL query:\n```sql\nSELECT MIN(year) AS earliest_year\nFROM Peacekeeping_Years\nWHERE location = 'Asia';\n```\nThis query uses the MIN() function to retrieve the minimum (earliest) value of the 'year' column from the 'Peacekeeping_Years' table where the 'location' is 'Asia'. The result will be the earliest year a peacekeeping operation was conducted in Asia.",
    sql="Here is the SQL query to find the earliest year a peacekeeping operation was conducted in 'Asia':\n```sql\nSELECT MIN(year) AS earliest_year\nFROM Peacekeeping_Years\nWHERE location = 'Asia';\n```\n\nThis query uses the `MIN()` function to retrieve the minimum (earliest) value of the 'year' column from the 'Peacekeeping_Years' table where the 'location' is 'Asia'. The result will be the earliest year a peacekeeping operation was conducted in Asia."
), 1), (Example({'sql_prompt': 'Identify the drug with the lowest sales amount in Europe in 2022.', 'sql_context': "CREATE TABLE sales (drug_name TEXT, continent TEXT, sales_amount INT, sale_date DATE); INSERT INTO sales (drug_name, continent, sales_amount, sale_date) VALUES ('Aspirin', 'Europe', 1000, '2022-01-01');", 'sql': "SELECT drug_name, MIN(sales_amount) FROM sales WHERE continent = 'Europe' AND sale_date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY drug_name;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to identify the drug with the lowest sales amount in Europe in 2022:\n```sql\nSELECT drug_name, sales_amount\nFROM sales\nWHERE continent = 'Europe' AND sale_date LIKE '2022%';\n```\n\nThis query selects the `drug_name` and `sales_amount` columns from the `sales` table where the `continent` is 'Europe' and the `sale_date` is in the year 2022. This will return the drugs sold in Europe during that year along with their sales amounts, allowing you to identify the drug(s) with the lowest sales.",
    sql="Here is the SQL query to identify the drug with the lowest sales amount in Europe in 2022:\n```sql\nSELECT drug_name, sales_amount\nFROM sales\nWHERE continent = 'Europe' AND sale_date LIKE '2022%';\n```\n\nThis query selects the `drug_name` and `sales_amount` columns from the `sales` table where the `continent` is 'Europe' and the `sale_date` is in the year 2022. This will return the drugs sold in Europe during that year along with their sales amounts, allowing you to identify the drug(s) with the lowest sales."
), 1), (Example({'sql_prompt': "Insert a new record into 'customer_preferences' for customer 101 and menu item 1 with a preference score of 90", 'sql_context': 'CREATE TABLE customer_preferences (customer_id INT, item_id INT, preference_score INT);', 'sql': 'INSERT INTO customer_preferences (customer_id, item_id, preference_score) VALUES (101, 1, 90);'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to insert a new record into the "customer_preferences" table for customer 101 and menu item 1 with a preference score of 90:\n```sql\nINSERT INTO customer_preferences (customer_id, item_id, preference_score)\nVALUES (101, 1, 90);\n```\nThis SQL statement inserts a new record into the "customer_preferences" table. It sets the "customer_id" to 101, the "item_id" to 1, and the "preference_score" to 90.',
    sql='Here is the SQL query to insert a new record into the "customer_preferences" table for customer 101 and menu item 1 with a preference score of 90:\n```sql\nINSERT INTO customer_preferences (customer_id, item_id, preference_score)\nVALUES (101, 1, 90);\n```\n\nThis SQL statement inserts a new record into the "customer_preferences" table. It sets the "customer_id" to 101, the "item_id" to 1, and the "preference_score" to 90.'
), 1), (Example({'sql_prompt': 'Who is the oldest donor from each city?', 'sql_context': "CREATE TABLE donors_2 (id INT PRIMARY KEY, name VARCHAR(50), age INT, city VARCHAR(50), state VARCHAR(50)); INSERT INTO donors_2 (id, name, age, city, state) VALUES (1, 'John Doe', 35, 'New York', 'NY'), (2, 'Jane Smith', 40, 'Buffalo', 'NY'), (3, 'Mike Johnson', 50, 'Boston', 'MA');", 'sql': 'SELECT city, MAX(age) as oldest_donor_age FROM donors_2 GROUP BY city;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query that addresses the prompt:\n```sql\nSELECT name, city, MAX(age) AS max_age\nFROM donors_2\nGROUP BY city;\n```\n\nStep by step reasoning:\n1. The goal is to find the oldest donor from each city.\n2. The `donors_2` table contains information about donors, including their names, ages, and cities.\n3. To find the oldest donor from each city, we can use the `MAX` function to get the maximum age for each city.\n4. The `GROUP BY` clause groups the records by city, so the `MAX` function operates on each group separately.\n5. The result will include the',
    sql='Here is the SQL query that addresses the prompt:\n```sql\nSELECT name, city, MAX(age) AS max_age\nFROM donors_2\nGROUP BY city;\n```\n\nStep-by-step reasoning:\n\n1. The goal is to find the oldest donor from each city.\n2. The `donors_2` table contains information about donors, including their names, ages, and cities.\n3. To find the oldest donor from each city, we can use the `MAX` function to get the maximum age for each city.\n4. The `GROUP BY` clause groups the records by city, so the `MAX` function operates on each group separately.\n5. The result will'
), 0), (Example({'sql_prompt': 'What are the union membership statistics for unions that have engaged in successful collective bargaining in the healthcare sector?', 'sql_context': "CREATE TABLE Membership (UnionName TEXT, Sector TEXT, MemberCount INT); INSERT INTO Membership (UnionName, Sector, MemberCount) VALUES ('UnionHealthA', 'Healthcare', 3000), ('UnionHealthB', 'Healthcare', 5000), ('UnionHealthC', 'Healthcare', 2000);", 'sql': "SELECT UnionName, MemberCount FROM Membership WHERE Sector = 'Healthcare' AND UnionName IN (SELECT UnionName FROM CBAs WHERE ExpirationDate > CURDATE());"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query that answers the prompt:\n```sql\nSELECT SUM(MemberCount) AS TotalMembers\nFROM Membership\nWHERE Sector = \'Healthcare\' AND UnionName IN (\n    SELECT UnionName\n    FROM CollectiveBargaining\n    WHERE Outcome = \'Successful\'\n);\n```\n\nStep-by-step reasoning:\n1. We start by selecting data from the "Membership" table, which contains information about union membership.\n2. We use a WHERE clause to filter the data and select only those records where the "Sector" is \'Healthcare\'. This narrows down the scope to unions in the healthcare sector.\n3. We then use a subquery to further filter the results. The subquery selects the "',
    sql='Here is the SQL query that answers the prompt:\n```sql\nSELECT SUM(MemberCount) AS TotalMembers\nFROM Membership\nWHERE Sector = \'Healthcare\' AND UnionName IN (\n    SELECT UnionName\n    FROM CollectiveBargaining\n    WHERE Outcome = \'Successful\'\n);\n```\n\nStep-by-step reasoning:\n1. We start by selecting data from the "Membership" table, which contains information about union membership.\n2. We use a WHERE clause to filter the data and select only those records where the "Sector" is \'Healthcare\'. This narrows down the scope to unions in the healthcare sector.\n3. We then use a subquery to further filter the results. The subquery selects the "'
), 0), (Example({'sql_prompt': 'Calculate the total gas consumption for Nigeria in 2019', 'sql_context': "CREATE TABLE gas_consumption (country VARCHAR(50), consumption_year INT, gas_consumption FLOAT); INSERT INTO gas_consumption (country, consumption_year, gas_consumption) VALUES ('Nigeria', 2019, 12000), ('Nigeria', 2018, 10000), ('Ghana', 2019, 8000), ('Ghana', 2018, 6000), ('Ivory Coast', 2019, 10000), ('Ivory Coast', 2018, 8000);", 'sql': "SELECT gas_consumption FROM gas_consumption WHERE country = 'Nigeria' AND consumption_year = 2019;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to calculate the total gas consumption for Nigeria in 2019:\n```sql\nSELECT SUM(gas_consumption) AS total_gas_consumption\nFROM gas_consumption\nWHERE country = 'Nigeria' AND consumption_year = 2019;\n```\n\nThis query sums up the `gas_consumption` values for Nigeria in the year 2019, providing the total gas consumption for that country during that specific year.",
    sql="Here is the SQL query to calculate the total gas consumption for Nigeria in 2019:\n```sql\nSELECT SUM(gas_consumption) AS total_gas_consumption\nFROM gas_consumption\nWHERE country = 'Nigeria' AND consumption_year = 2019;\n```\n\nThis query sums up the `gas_consumption` values for Nigeria in the year 2019, providing the total gas consumption for that country during that specific year."
), 0), (Example({'sql_prompt': 'What is the average socially responsible lending loan amount for microfinance institutions in Southeast Asia?', 'sql_context': "CREATE TABLE socially_responsible_lending(id INT, loan_number INT, institution_region VARCHAR(50), amount INT); INSERT INTO socially_responsible_lending VALUES (1, 701, 'Southeast Asia', 5000); INSERT INTO socially_responsible_lending VALUES (2, 702, 'South Asia', 7000); INSERT INTO socially_responsible_lending VALUES (3, 703, 'East Asia', 9000); INSERT INTO socially_responsible_lending VALUES (4, 704, 'Southeast Asia', 6000);", 'sql': "SELECT AVG(amount) FROM socially_responsible_lending WHERE institution_region = 'Southeast Asia' AND type = 'microfinance';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to find the average socially responsible lending loan amount for microfinance institutions in Southeast Asia:\n```sql\nSELECT AVG(amount) AS avg_loan_amount\nFROM socially_responsible_lending\nWHERE institution_region = \'Southeast Asia\';\n```\nThis query calculates the average value of the "amount" column for rows where the "institution_region" is \'Southeast Asia\', giving you the average loan amount for microfinance institutions in that region.',
    sql='Here is the SQL query to find the average socially responsible lending loan amount for microfinance institutions in Southeast Asia:\n```sql\nSELECT AVG(amount) AS avg_loan_amount\nFROM socially_responsible_lending\nWHERE institution_region = \'Southeast Asia\';\n```\n\nThis query calculates the average value of the "amount" column for rows where the "institution_region" is \'Southeast Asia\', giving you the average loan amount for microfinance institutions in that region.'
), 0), (Example({'sql_prompt': 'What is the average salary of employees who identify as Latinx in the Engineering department?', 'sql_context': "CREATE TABLE Employees (EmployeeID int, Name varchar(50), Gender varchar(10), Department varchar(50), Salary decimal(10,2), Ethnicity varchar(50)); INSERT INTO Employees (EmployeeID, Name, Gender, Department, Salary, Ethnicity) VALUES (1, 'Juan Garcia', 'Male', 'Engineering', 85000.00, 'Latinx'); INSERT INTO Employees (EmployeeID, Name, Gender, Department, Salary, Ethnicity) VALUES (2, 'Maria Rodriguez', 'Female', 'Engineering', 90000.00, 'Latinx');", 'sql': "SELECT AVG(Salary) FROM Employees WHERE Department = 'Engineering' AND Ethnicity = 'Latinx';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to find the average salary of employees who identify as Latinx in the Engineering department:\n```sql\nSELECT AVG(Salary) AS avg_salary\nFROM Employees\nWHERE Ethnicity = 'Latinx' AND Department = 'Engineering';\n```\nThis query calculates the average salary by filtering the records based on ethnicity and department.",
    sql="Here is the SQL query to find the average salary of employees who identify as Latinx in the Engineering department:\n```sql\nSELECT AVG(Salary) AS avg_salary\nFROM Employees\nWHERE Ethnicity = 'Latinx' AND Department = 'Engineering';\n```\n\nThis query calculates the average salary by filtering the records based on ethnicity and department."
), 1), (Example({'sql_prompt': 'What is the name and type of the vessel with the highest average speed?', 'sql_context': "CREATE TABLE Vessels (ID VARCHAR(20), Name VARCHAR(20), Type VARCHAR(20), AverageSpeed FLOAT); INSERT INTO Vessels VALUES ('V012', 'Vessel L', 'Passenger', 35.0), ('V013', 'Vessel M', 'Cargo', 19.5), ('V014', 'Vessel N', 'Passenger', 32.0);", 'sql': 'SELECT Name, Type FROM Vessels WHERE AverageSpeed = (SELECT MAX(AverageSpeed) FROM Vessels);'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to find the name and type of the vessel with the highest average speed:\n```sql\nSELECT Name, Type\nFROM Vessels\nORDER BY AverageSpeed DESC\nLIMIT 1;\n```\n\nThis query sorts the rows in the `Vessels` table based on the `AverageSpeed` column in descending order using the `ORDER BY` clause. The `LIMIT 1` clause ensures that only the top row (the one with the highest average speed) is returned.',
    sql='Here is the SQL query to find the name and type of the vessel with the highest average speed:\n```sql\nSELECT Name, Type FROM Vessels ORDER BY AverageSpeed DESC LIMIT 1;\n```\nThis query sorts the rows in the `Vessels` table based on the `AverageSpeed` column in descending order using the `ORDER BY` clause. The `LIMIT 1` clause ensures that only the top row (the one with the highest average speed) is returned.'
), 0), (Example({'sql_prompt': "List all the distinct producers of Gadolinium from the 'production' table, ordered alphabetically.", 'sql_context': 'CREATE TABLE production (element VARCHAR(10), year INT, month INT, producer VARCHAR(20), quantity INT);', 'sql': "SELECT DISTINCT producer FROM production WHERE element = 'Gadolinium' ORDER BY producer ASC;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to list all the distinct producers of Gadolinium from the 'production' table, ordered alphabetically:\n```sql\nSELECT DISTINCT producer\nFROM production\nWHERE element = 'Gadolinium'\nORDER BY producer;\n```\n\nThis query selects the distinct values of the 'producer' column from the 'production' table where the 'element' is 'Gadolinium', and orders the results by the 'producer' in ascending order.",
    sql="Here is the SQL query to list all the distinct producers of Gadolinium from the 'production' table, ordered alphabetically:\n```sql\nSELECT DISTINCT producer FROM production WHERE element = 'Gadolinium' ORDER BY producer;\n```\nThis query selects the distinct values of the 'producer' column from the 'production' table where the 'element' is 'Gadolinium', and orders the results by the 'producer' in ascending order."
), 1)]