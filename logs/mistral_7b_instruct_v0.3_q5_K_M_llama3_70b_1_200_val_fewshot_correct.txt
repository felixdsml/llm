[(Example({'sql_prompt': "What are the top 3 autonomous vehicles with the highest safety ratings in the 'auto_show' table?", 'sql_context': 'CREATE TABLE auto_show (id INT, vehicle_name VARCHAR(50), safety_rating INT);', 'sql': "SELECT vehicle_name, safety_rating FROM (SELECT vehicle_name, safety_rating, ROW_NUMBER() OVER (ORDER BY safety_rating DESC) as safety_rank FROM auto_show WHERE vehicle_name LIKE '%Autonomous%') AS auton_ranks WHERE safety_rank <= 3;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="`What are the top 3 autonomous vehicles with the highest safety ratings in the 'auto_show' table?`\n\n`CREATE TABLE auto_show (id INT, vehicle_name VARCHAR(50), safety_rating INT);`\n\nReasoning: To find the top 3 autonomous vehicles with the highest safety ratings, we first need to sort all vehicles by their safety rating in descending order. Then, we select only the top 3 vehicles (using the LIMIT clause) and display their names. Here's the SQL query:\n\n`Sql: SELECT vehicle_name FROM auto_show WHERE vehicle_name LIKE '%Autonomous%' ORDER BY safety_rating DESC",
    sql="Sql Prompt: What are the top 3 autonomous vehicles with the highest safety ratings in the 'auto_show' table?\n\nSql Context: CREATE TABLE auto_show (id INT, vehicle_name VARCHAR(50), safety_rating INT);\n\nReasoning: Let's think step by step in order to `What are the top 3 autonomous vehicles with the highest safety ratings in the 'auto_show' table?` `CREATE TABLE auto_show (id INT, vehicle_name VARCHAR(50), safety_rating INT);` Reasoning: To find the top 3 autonomous vehicles with the highest safety ratings, we first need to sort all vehicles by their"
), 1), (Example({'sql_prompt': 'Delete a record from the broadband_usage table', 'sql_context': 'CREATE TABLE broadband_usage (usage_id INT, subscriber_id INT, usage_start_time TIMESTAMP, usage_end_time TIMESTAMP, data_used DECIMAL(10,2));', 'sql': 'DELETE FROM broadband_usage WHERE usage_id = 11111;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Delete a record from the `broadband_usage` table. We need to specify which record we want to delete. However, the context provided does not contain enough information about the specific record to be deleted. To delete a record, we would typically use the DELETE statement with a WHERE clause that filters for the desired record based on one or more columns.\n\nHere's an example of how you might write the SQL query if you knew the `usage_id` of the record you wanted to delete:\n\n```sql\nDELETE FROM broadband_usage WHERE usage_id = <some_specific_usage_id>;\n```",
    sql="Sql Prompt: Delete a specific record from the `broadband_usage` table based on its `usage_id`.\n\nSql Context: CREATE TABLE broadband_usage (usage_id INT, subscriber_id INT, usage_start_time TIMESTAMP, usage_end_time TIMESTAMP, data_used DECIMAL(10,2));\n\nReasoning: Let's think step by step in order to Delete a specific record from the `broadband_usage` table based on its `usage_id`. We need to specify which record we want to delete. To delete a record, we would typically use the DELETE statement with a WHERE clause that filters for the desired"
), 0), (Example({'sql_prompt': 'How many recycling plants in Canada process exactly 5 types of waste?', 'sql_context': "CREATE TABLE recycling_plants (name TEXT, country TEXT, waste_types INTEGER); INSERT INTO recycling_plants (name, country, waste_types) VALUES ('Recycling Plant 1', 'Canada', 6), ('Recycling Plant 2', 'Canada', 4), ('Recycling Plant 3', 'Canada', 5), ('Recycling Plant 4', 'Canada', 5), ('Recycling Plant 5', 'Canada', 3);", 'sql': "SELECT COUNT(*) FROM recycling_plants WHERE country = 'Canada' AND waste_types = 5;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='${find the number of recycling plants in Canada that process exactly 5 types of waste.} We first need to filter the data for Canadian recycling plants and then count those with exactly 5 types of waste.',
    sql="SELECT COUNT(*) FROM recycling_plants WHERE country = 'Canada' AND waste_types = 5;"
), 1), (Example({'sql_prompt': 'What is the total revenue for each game in the "Gaming" category?', 'sql_context': 'CREATE TABLE Games (GameID int, GameName varchar(50), Category varchar(50), Revenue decimal(10,2));', 'sql': 'SELECT Category, SUM(Revenue) OVER(PARTITION BY Category) as TotalRevenue FROM Games;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='`What is the total revenue for each game in the "Gaming" category?`\n\n`CREATE TABLE Games (GameID int, GameName varchar(50), Category varchar(50), Revenue decimal(10,2));`\n\nReasoning: To find the total revenue for each game in the "Gaming" category, we need to filter the \'Games\' table by the \'Category\' column and sum up the \'Revenue\' for each unique game. Here is the SQL query:\n\n`Sql: SELECT GameName, SUM(Revenue) as Total_Revenue FROM Games WHERE Category = \'Gaming\' GROUP BY GameName;',
    sql='Sql Prompt: What is the average rating of movies in the "Action" genre?\n\nSql Context: CREATE TABLE Movies (MovieID int, MovieName varchar(50), Genre varchar(50), Rating float);\n\nReasoning: Let\'s think step by step in order to `What is the average rating of movies in the "Action" genre?` `CREATE TABLE Movies (MovieID int, MovieName varchar(50), Genre varchar(50), Rating float);` Reasoning: To find the average rating of movies in the "Action" genre, we need to filter the \'Movies\' table by the \'Genre'
), 0), (Example({'sql_prompt': 'Delete all flight safety records for a specific aircraft', 'sql_context': "CREATE SCHEMA if not exists aerospace;CREATE TABLE if not exists aerospace.flight_safety (id INT, incident VARCHAR(255), incident_date DATE, aircraft_id INT);INSERT INTO aerospace.flight_safety (id, incident, incident_date, aircraft_id) VALUES (1, 'Inc1', '2017-01-01', 1), (2, 'Inc2', '2018-01-01', 1);", 'sql': 'DELETE FROM aerospace.flight_safety WHERE aircraft_id = 1;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Delete all flight safety records for a specific aircraft.\n\nSql Context: CREATE SCHEMA if not exists aerospace;CREATE TABLE if not exists aerospace.flight_safety (id INT, incident VARCHAR(255), incident_date DATE, aircraft_id INT);INSERT INTO aerospace.flight_safety (id, incident, incident_date, aircraft_id) VALUES (1, 'Inc1', '2017-01-01', 1), (2, 'Inc2', '2018-01-01', 1);",
    sql='DELETE FROM aerospace'
), 0), (Example({'sql_prompt': 'What is the average hotel price in each city in Europe?', 'sql_context': "CREATE TABLE Hotels_Europe (id INT, name VARCHAR(50), price DECIMAL(5,2), city VARCHAR(50)); INSERT INTO Hotels_Europe (id, name, price, city) VALUES (1, 'Grand Hotel', 200.00, 'Paris'), (2, 'Hotel Colosseo', 350.00, 'Rome'), (3, 'Park Royal', 120.00, 'London'), (4, 'Hotel Versailles', 420.00, 'Paris');", 'sql': 'SELECT city, AVG(price) as avg_price FROM Hotels_Europe GROUP BY city;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='${produce the sql}. We first need to group the data by city and then calculate the average price for each city. Here is the SQL query:\n\n```sql\nSELECT city, AVG(price) AS average_hotel_price FROM Hotels_Europe GROUP BY city;\n```',
    sql='SELECT city, AVG(price) AS average_hotel_price FROM Hotels_Europe GROUP BY city;'
), 1), (Example({'sql_prompt': 'Show companies with below average ESG scores in the education sector.', 'sql_context': "INSERT INTO companies (id, name, country, sector, ESG_score) VALUES (4, 'EdCo', 'US', 'Education', 70.0), (5, 'LearnCo', 'UK', 'Education', 80.0);", 'sql': "SELECT * FROM companies WHERE sector = 'Education' AND ESG_score < (SELECT AVG(ESG_score) FROM companies WHERE sector = 'Education');"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="${produce the sql}. We first need to find the average ESG score for companies in the education sector. Then we can compare each company's ESG score with this average and filter out those below it. Here is the SQL query:\n\n```sql\n-- First, find the average ESG score for companies in the education sector\nSELECT AVG(ESG_score) AS avg_esg_score FROM companies WHERE sector = 'Education';\n\n-- Then, filter out companies with below-average ESG scores\nSELECT name FROM companies WHERE sector = 'Education' AND ESG_score < (<average ESG score from the previous query>);\n```",
    sql="Sql Prompt: Show companies with below average ESG scores in the education sector.\n\nSql Context: INSERT INTO companies (id, name, country, sector, ESG_score) VALUES (4, 'EdCo', 'US', 'Education', 70.0), (5, 'LearnCo', 'UK', 'Education', 80.0);\n\nReasoning: Let's think step by step in order to ${produce the sql}. We first need to find the average ESG score for companies in the education sector. Then we can compare each company's ESG score with this average and filter out those below it. Here is the"
), 1), (Example({'sql_prompt': "Find the daily new user registrations in 'data_privacy' table for the last week?", 'sql_context': 'CREATE TABLE data_privacy (user_id INT, registration_date DATE);', 'sql': 'SELECT registration_date, COUNT(*) FROM data_privacy WHERE registration_date >= CURDATE() - INTERVAL 7 DAY GROUP BY registration_date;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="`Find the daily new user registrations in 'data_privacy' table for the last week.`\n\n`CREATE TABLE data_privacy (user_id INT, registration_date DATE);`\n\n`Reasoning: Let's think step by step in order to find the daily new user registrations in the last week. We will first filter the records based on the registration date within the last week and then group them by the day. Finally, we will count the number of unique users for each day.`\n\n`Sql: SELECT EXTRACT(DAY FROM registration_date) as day, COUNT(DISTINCT user_id) as new_users FROM data_privacy",
    sql='WHERE registration_date >= DATEADD(day, -7, CURRENT_DATE) AND registration_date < CURRENT_DATE GROUP BY EXTRACT(DAY FROM registration_date);'
), 1), (Example({'sql_prompt': 'Update the total number of employees in the mining industry who identify as Native Hawaiian or Pacific Islander to 350 in California.', 'sql_context': "CREATE TABLE MiningEmployees (State VARCHAR(50), EmployeeEthnicity VARCHAR(50), EmployeeCount INT); INSERT INTO MiningEmployees(State, EmployeeEthnicity, EmployeeCount) VALUES ('Texas', 'Native American or Alaska Native', 200), ('Texas', 'Hispanic', 500), ('Texas', 'Black', 300), ('California', 'Native American or Alaska Native', 100), ('California', 'Hispanic', 700), ('California', 'Black', 600);", 'sql': "UPDATE MiningEmployees SET EmployeeCount = 350 WHERE State = 'California' AND EmployeeEthnicity = 'Native Hawaiian or Pacific Islander';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Update the `MiningEmployees` table to set the number of employees who identify as Native Hawaiian or Pacific Islander in California to 350.',
    sql="UPDATE MiningEmployees SET EmployeeCount = 350 WHERE State = 'California' AND EmployeeEthnicity = 'Native Hawaiian or Pacific Islander';"
), 1), (Example({'sql_prompt': 'What is the maximum number of patients served by a rural health center in Europe?', 'sql_context': 'CREATE TABLE centers (id INT, name VARCHAR(50), location VARCHAR(50), patients_served INT);', 'sql': "SELECT MAX(patients_served) FROM centers WHERE location LIKE '%Europe%' AND location LIKE '%rural%';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='${produce the sql}. We first need to filter out only the rural health centers located in Europe. Then, we find the maximum number of patients served by any of these centers.',
    sql="SELECT MAX(patients_served) FROM centers WHERE location LIKE '%Europe%' AND location LIKE '%rural%';"
), 1), (Example({'sql_prompt': 'Display the soldier names and branches from the view', 'sql_context': 'CREATE VIEW soldier_details AS SELECT id, name, branch FROM soldiers;', 'sql': 'SELECT name, branch FROM soldier_details;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='${produce the sql}. We first need to select the relevant fields from the created view. Here is the SQL query:',
    sql='SELECT name, branch FROM soldier_details;'
), 1), (Example({'sql_prompt': "What is the average attendance for 'Jazz' concerts?", 'sql_context': "CREATE TABLE concerts(id INT, genre VARCHAR(255), avg_attendance FLOAT); INSERT INTO concerts (id, genre, avg_attendance) VALUES (1, 'Jazz', 200.0), (2, 'Classical', 300.0), (3, 'Rock', 500.0);", 'sql': "SELECT avg_attendance FROM concerts WHERE genre = 'Jazz';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="${produce the sql}. We first need to identify the table that contains the data for Jazz concerts. Since it is not provided in the context, let's assume there is another table named `concert_attendance` with the following structure:\n\n```\nCREATE TABLE concert_attendance (id INT, concert_id INT, attendance INT);\n```\n\nNow we can join the `concerts` and `concert_attendance` tables to get the average attendance for Jazz concerts.",
    sql='```\nSELECT AVG(attendance) AS average_attendance FROM concert_attendance\nJOIN concerts ON concert_attendance.concert_id'
), 0), (Example({'sql_prompt': "How many astronauts are from 'Brazil'?", 'sql_context': "CREATE TABLE AstronautData (id INT, name VARCHAR(50), country VARCHAR(50), height FLOAT, weight FLOAT, blood_pressure FLOAT); INSERT INTO AstronautData (id, name, country, height, weight, blood_pressure) VALUES (1, 'John', 'USA', 180, 80, 120), (2, 'Jane', 'Canada', 170, 70, 110), (3, 'Alex', 'Brazil', 190, 90, 130), (4, 'Elena', 'Russia', 165, 60, 115);", 'sql': "SELECT COUNT(*) FROM AstronautData WHERE country = 'Brazil';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="${produce the sql}. We first need to filter the records where the country is 'Brazil'. Then, we count the number of unique records (astronauts) that match this condition.",
    sql="SELECT COUNT(DISTINCT name) FROM AstronautData WHERE country = 'Brazil';"
), 1), (Example({'sql_prompt': 'Delete all records in the "digital_divide_stats" table where the "country" is \'United States\'', 'sql_context': 'CREATE TABLE digital_divide_stats (id INT PRIMARY KEY, country VARCHAR(255), year INT, internet_users INT, total_population INT);', 'sql': "WITH deleted_data AS (DELETE FROM digital_divide_stats WHERE country = 'United States' RETURNING *) SELECT * FROM deleted_data;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Delete all records from the "digital_divide_stats" table where the "country" is \'United States\'.',
    sql="DELETE FROM digital_divide_stats WHERE country = 'United States';"
), 1), (Example({'sql_prompt': "What is the maximum depth of marine species in the 'marine_species' table, grouped by their phylum?", 'sql_context': "CREATE TABLE marine_species (id INT, name VARCHAR(255), phylum VARCHAR(255), depth FLOAT); INSERT INTO marine_species (id, name, phylum, depth) VALUES (1, 'Pacific salmon', 'Chordata', 50.0), (2, 'Hawaiian monk seal', 'Chordata', 500.0), (3, 'Sea anemone', 'Cnidaria', 0.01);", 'sql': 'SELECT phylum, MAX(depth) AS max_depth FROM marine_species GROUP BY phylum;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='produce the SQL query. We first need to identify the table and the column we are interested in (depth). Then, we want to group the results by phylum to find the maximum depth for each phylum. Here is the SQL query:\n\n```sql\nSELECT phylum, MAX(depth) FROM marine_species GROUP BY phylum;\n```',
    sql="Sql Prompt: What is the maximum depth of marine species in the 'marine_species' table, grouped by their phylum?\n\nSql Context: CREATE TABLE marine_species (id INT, name VARCHAR(255), phylum VARCHAR(255), depth FLOAT); INSERT INTO marine_species (id, name, phylum, depth) VALUES (1, 'Pacific salmon', 'Chordata', 50.0), (2, 'Hawaiian monk seal', 'Chordata', 500.0), (3, 'Sea anemone', 'C"
), 1), (Example({'sql_prompt': 'What is the percentage of autonomous vehicles sold in the US that are electric?', 'sql_context': 'CREATE TABLE AutonomousVehicles (Make VARCHAR(50), Model VARCHAR(50), Year INT, Country VARCHAR(50), Type VARCHAR(50), Sales INT);', 'sql': "SELECT 100.0 * SUM(CASE WHEN Type = 'Electric' THEN Sales ELSE 0 END) / SUM(Sales) AS Percentage FROM AutonomousVehicles WHERE Country = 'United States';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="${produce the sql}. We first need to filter out the electric autonomous vehicles sold in the US from the 'AutonomousVehicles' table. Then, we calculate the total number of these electric autonomous vehicles and compare it with the total number of all autonomous vehicles sold in the US. Finally, we find the percentage by dividing the number of electric autonomous vehicles by the total number of autonomous vehicles and multiplying by 100.",
    sql="```sql\nSELECT\n    (SUM(CASE WHEN Type = 'Electric' THEN Sales ELSE 0 END) / SUM(Sales)) * 100 AS percentage_electric\nFROM"
), 1), (Example({'sql_prompt': 'Show the average number of streams per day for artists who have held concerts in the USA and Canada.', 'sql_context': 'CREATE TABLE music_streaming (artist_id INT, artist_name VARCHAR(100), genre VARCHAR(50), total_streams BIGINT, stream_date DATE); CREATE TABLE concert_ticket_sales (concert_id INT, artist_id INT, concert_date DATE, venue VARCHAR(100), country VARCHAR(50));', 'sql': "SELECT AVG(ms.total_streams / COUNT(DISTINCT ms.stream_date)) AS avg_daily_streams FROM music_streaming ms INNER JOIN concert_ticket_sales cts ON ms.artist_id = cts.artist_id WHERE cts.country IN ('USA', 'Canada');"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="${produce the sql}. We first need to find the artists who have held concerts in the USA and Canada. Then, for those artists, we will calculate the average number of streams per day. Here is the SQL query:\n\n```sql\nSELECT AVG(total_streams / DATEDIFF(concert_date, stream_date)) as avg_daily_streams\nFROM music_streaming\nJOIN concert_ticket_sales ON music_streaming.artist_id = concert_ticket_sales.artist_id\nWHERE country IN ('USA', 'Canada') AND stream_date >= (SELECT MIN(concert_date)",
    sql="FROM (SELECT DISTINCT concert_date AS min_concert_date FROM concert_ticket_sales WHERE country IN ('USA', 'Canada')) AS subquery, music_streaming JOIN concert_ticket_sales ON music_streaming.artist_id = concert_ticket_sales.artist_id WHERE country IN ('USA', 'Canada') AND stream_date >= (SELECT min_concert_date FROM subquery) GROUP BY artist_name;\n\nThis query first identifies the earliest concert date for artists in the USA and Canada, then filters the music streaming data to only include streams after that date. It then groups the results by artist"
), 0), (Example({'sql_prompt': 'What is the minimum number of crimes committed in each type for the past year?', 'sql_context': "CREATE TABLE crimes (crime_id INT, crime_type VARCHAR(255), committed_date DATE); INSERT INTO crimes (crime_id, crime_type, committed_date) VALUES (1, 'Theft', '2022-01-01'), (2, 'Assault', '2022-01-02'), (3, 'Theft', '2022-01-03');", 'sql': 'SELECT c.crime_type, MIN(COUNT(c.crime_id)) FROM crimes c WHERE c.committed_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY c.crime_type;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="${produce the sql}. We first need to filter the crimes committed within the past year. Then, we group them by crime type and find the minimum number of crimes for each type. Here is the SQL query:\n\n```sql\nSELECT crime_type, MIN(COUNT(*)) as min_crimes\nFROM (\n    SELECT crime_type, COUNT(*) as num_crimes\n    FROM crimes\n    WHERE committed_date >= DATE('now', '1 year ago')\n    GROUP BY crime_type\n) AS subquery\nGROUP BY crime_type;\n```",
    sql="Sql Prompt: What is the minimum number of crimes committed in each type for the past year?\n\nSql Context: CREATE TABLE crimes (crime_id INT, crime_type VARCHAR(255), committed_date DATE); INSERT INTO crimes (crime_id, crime_type, committed_date) VALUES (1, 'Theft', '2022-01-01'), (2, 'Assault', '2022-01-02'), (3, 'Theft', '2022-01-03');\n\nReasoning: Let's think step by step in order to ${produce"
), 0), (Example({'sql_prompt': "Delete all marine species in the 'marine_species' table that belong to the 'Mollusca' phylum.", 'sql_context': "CREATE TABLE marine_species (id INT, name VARCHAR(255), phylum VARCHAR(255)); INSERT INTO marine_species (id, name, phylum) VALUES (1, 'Pacific salmon', 'Chordata'), (2, 'Blue whale', 'Chordata'), (3, 'Sea anemone', 'Cnidaria');", 'sql': "DELETE FROM marine_species WHERE phylum = 'Mollusca';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Delete all marine species from the 'marine_species' table that belong to the 'Mollusca' phylum. To do this, we need to filter out only the rows where the phylum is 'Mollusca'.",
    sql="DELETE FROM marine_species WHERE phylum = 'Mollusca';"
), 0), (Example({'sql_prompt': 'What is the average price of vegan menu items in the database?', 'sql_context': "CREATE TABLE menus (menu_id INT, menu_name TEXT, type TEXT, price DECIMAL); INSERT INTO menus (menu_id, menu_name, type, price) VALUES (1, 'Quinoa Salad', 'Vegetarian', 12.99), (2, 'Chicken Caesar Wrap', 'Gluten-free', 10.99), (3, 'Vegan Burger', 'Vegan', 14.99), (4, 'Falafel Wrap', 'Vegan', 9.99);", 'sql': "SELECT AVG(price) FROM menus WHERE type = 'Vegan';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="${produce the sql}. We first need to filter out only the vegan menu items from the `menus` table. Then, we calculate the average price of these vegan menu items. Here is the SQL query:\n\n```sql\nSELECT AVG(price) FROM menus WHERE type = 'Vegan';\n```",
    sql="SELECT AVG(price) FROM menus WHERE type = 'Vegan';"
), 1), (Example({'sql_prompt': "What is the total number of military vehicles produced by company 'XYZ'?", 'sql_context': "CREATE TABLE military_vehicles (company TEXT, quantity INT, production_date DATE); INSERT INTO military_vehicles (company, quantity, production_date) VALUES ('ABC', 100, '2023-01-01'); INSERT INTO military_vehicles (company, quantity, production_date) VALUES ('XYZ', 200, '2023-02-01');", 'sql': "SELECT SUM(quantity) FROM military_vehicles WHERE company = 'XYZ';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="${produce the sql}. We first need to filter the records where the company is 'XYZ'. Then, we sum up the quantity of military vehicles produced by this company. Here's the SQL query:",
    sql="SELECT SUM(quantity) FROM military_vehicles WHERE company = 'XYZ';"
), 1), (Example({'sql_prompt': 'Find the supplier with the lowest average delivery time for orders in the last month.', 'sql_context': "CREATE TABLE Suppliers (SupplierID int, SupplierName varchar(50)); CREATE TABLE Products (ProductID int, ProductName varchar(50), SupplierID int); CREATE TABLE Orders (OrderID int, ProductID int, OrderDate date, DeliveryTime int); INSERT INTO Suppliers VALUES (1, 'SupplierA'), (2, 'SupplierB'); INSERT INTO Products VALUES (1, 'Organic Apples', 1), (2, 'Bananas', 2); INSERT INTO Orders VALUES (1, 1, '2022-01-01', 2), (2, 2, '2022-01-03', 3);", 'sql': 'SELECT SupplierName, AVG(DeliveryTime) as AvgDeliveryTime FROM Orders o JOIN Products p ON o.ProductID = p.ProductID JOIN Suppliers sp ON p.SupplierID = sp.SupplierID WHERE OrderDate >= DATEADD(month, -1, GETDATE()) GROUP BY SupplierName ORDER BY AvgDeliveryTime ASC;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Find the supplier with the lowest average delivery time for orders in the last month.\n\nSql Context: CREATE TABLE Suppliers (SupplierID int, SupplierName varchar(50)); CREATE TABLE Products (ProductID int, ProductName varchar(50), SupplierID int); CREATE TABLE Orders (OrderID int, ProductID int, OrderDate date, DeliveryTime int, SupplierID int); INSERT INTO Suppliers VALUES (1, 'SupplierA'), (2, 'SupplierB'); INSERT INTO Products VALUES (1, 'Organic Apples', 1), (2, 'Bananas', 2);",
    sql='SELECT SupplierName, AVG(DeliveryTime) as AverageDeliveryTime\nFROM Orders\nWHERE OrderDate >= DATEADD(month, -1, GETDATE())\nGROUP BY SupplierID, SupplierName\nORDER BY AverageDeliveryTime ASC\nLIMIT 1;\n\nReasoning: To find the supplier with the lowest average delivery time for orders in the last month, we first need to filter the Orders table for records within the last month. Then, we group the data by SupplierID and SupplierName, calculating the average DeliveryTime for each group. Finally, we order the results in ascending order of average delivery time and select the top 1 result,'
), 1), (Example({'sql_prompt': 'What is the maximum number of games played concurrently by a player, for each platform?', 'sql_context': "CREATE TABLE PlayerGames (PlayerID INT, Platform VARCHAR(10), MaxGames INT); INSERT INTO PlayerGames (PlayerID, Platform, MaxGames) VALUES (1, 'PC', 3);", 'sql': 'SELECT Platform, MAX(MaxGames) as MaxConcurrentGames FROM PlayerGames GROUP BY Platform;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='${produce the sql}. We first need to find the maximum number of games played concurrently for each platform. Here is the SQL query:',
    sql='SELECT Platform, MAX(MaxGames) FROM PlayerGames GROUP BY Platform;\n\nThis query groups the data by platform and finds the maximum number of games played on each platform using the `MAX()` function.'
), 1), (Example({'sql_prompt': 'Which broadband subscribers have a download speed greater than 300 Mbps?', 'sql_context': 'CREATE TABLE broadband_subscribers (subscriber_id INT, download_speed FLOAT); INSERT INTO broadband_subscribers (subscriber_id, download_speed) VALUES (1, 250.6), (2, 350.8), (3, 120.9);', 'sql': 'SELECT subscriber_id FROM broadband_subscribers WHERE download_speed > 300;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='${produce the sql}. We first need to filter out the rows where the download speed is greater than 300 Mbps. Then, we select the `subscriber_id` from the filtered results.',
    sql='SELECT subscriber_id FROM broadband_subscribers WHERE download_speed > 300;'
), 1), (Example({'sql_prompt': 'Which cities have a higher average temperature in the "Finance" scheme than in the "Mitigation" scheme?', 'sql_context': "CREATE TABLE Mitigation (city VARCHAR(255), avg_temp FLOAT); INSERT INTO Mitigation VALUES ('CityA', 20.5), ('CityB', 22.3); CREATE TABLE Finance (city VARCHAR(255), avg_temp FLOAT); INSERT INTO Finance VALUES ('CityA', 23.0), ('CityX', 23.5);", 'sql': 'SELECT Finance.city FROM Finance, Mitigation WHERE Finance.city = Mitigation.city AND Finance.avg_temp > Mitigation.avg_temp'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="${produce the sql}. We first need to compare the average temperatures of cities between the 'Mitigation' and 'Finance' schemes. Here is the SQL query:\n\n```sql\nSELECT city\nFROM Finance\nWHERE avg_temp > (SELECT avg(avg_temp) FROM Mitigation WHERE city = Finance.city);\n```\n\nThis query selects cities from the 'Finance' table where the average temperature is higher than the corresponding average temperature in the 'Mitigation' table for that specific city.",
    sql='SELECT city FROM Finance WHERE avg_temp > (SELECT avg(avg_temp) FROM Mitigation WHERE city = Finance.city);'
), 0), (Example({'sql_prompt': "What is the average playtime, in hours, for players from Germany, for games in the 'Simulation' genre?", 'sql_context': 'CREATE TABLE games (game_id INT, game_genre VARCHAR(255), player_id INT, playtime_mins INT); CREATE TABLE players (player_id INT, player_country VARCHAR(255));', 'sql': "SELECT AVG(playtime_mins / 60) FROM games JOIN players ON games.player_id = players.player_id WHERE players.player_country = 'Germany' AND game_genre = 'Simulation';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="${produce the sql}. We first need to join the 'games' and 'players' tables on the `player_id` field. Then, we filter for players from Germany and games in the 'Simulation' genre. After that, we calculate the average playtime by dividing the total playtime (in minutes) by 60 to convert it into hours.",
    sql='```sql\nSELECT AVG(playtime_hours) AS average_playtime_hours\nFROM (\n    SELECT player_id, game_genre, playtime_mins, player_country\n    FROM games JOIN players ON games.player_id = players.player_id'
), 0), (Example({'sql_prompt': 'Show the sum of investments by year and industry', 'sql_context': "CREATE TABLE investments (id INT, investment_year INT, industry VARCHAR(255), investment_amount DECIMAL(10,2)); INSERT INTO investments (id, investment_year, industry, investment_amount) VALUES (1, 2020, 'Tech', 50000.00), (2, 2019, 'Biotech', 20000.00), (3, 2020, 'Tech', 75000.00);", 'sql': 'SELECT investment_year, industry, SUM(investment_amount) as total_investments FROM investments GROUP BY investment_year, industry;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Show the sum of investments by year and industry from the `investments` table.\n\nFirst, we need to group the data by both `investment_year` and `industry`. Then, for each group, we will calculate the sum of `investment_amount`.',
    sql='```sql\nSELECT investment_year, industry, SUM(investment_amount) as total_investments\nFROM investments\nGROUP BY investment_year, industry;\n```'
), 1), (Example({'sql_prompt': 'What is the total amount of funds allocated for each type of disaster?', 'sql_context': "CREATE TABLE DisasterFunds (DisasterType VARCHAR(20), FundID INT, AllocatedAmount DECIMAL(10,2)); INSERT INTO DisasterFunds (DisasterType, FundID, AllocatedAmount) VALUES ('Earthquake', 1, 5000.00), ('Flood', 2, 7500.00), ('Hurricane', 3, 10000.00), ('Tornado', 4, 12500.00), ('Volcano', 5, 15000.00);", 'sql': 'SELECT DisasterType, SUM(AllocatedAmount) as TotalFunds FROM DisasterFunds GROUP BY DisasterType;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="`What is the total amount of funds allocated for each type of disaster?`\n\nSql Context: CREATE TABLE DisasterFunds (DisasterType VARCHAR(20), FundID INT, AllocatedAmount DECIMAL(10,2)); INSERT INTO DisasterFunds (DisasterType, FundID, AllocatedAmount) VALUES ('Earthquake', 1, 5000.00), ('Flood', 2, 7500.00), ('Hurricane', 3, 10000.00), ('Tornado', 4, 12500",
    sql="SELECT DisasterType, SUM(AllocatedAmount) as TotalFunds FROM DisasterFunds GROUP BY DisasterType;\n\nReasoning: Let's think step by step in order to `What is the total amount of funds allocated for each type of disaster?` In this case, we want to find out how much money has been allocated for each disaster type. To do that, we need to group the data by DisasterType and then sum up the AllocatedAmount for each group. This will give us the total amount of funds allocated for each disaster type."
), 1), (Example({'sql_prompt': 'What is the market share of Hotel X in terms of revenue generated by hotels in New York City?', 'sql_context': "CREATE TABLE hotels (hotel_id INT, hotel_name TEXT, city TEXT, revenue FLOAT); INSERT INTO hotels (hotel_id, hotel_name, city, revenue) VALUES (1, 'Hotel X', 'New York City', 1000000), (2, 'Hotel Y', 'New York City', 800000), (3, 'Hotel Z', 'New York City', 700000);", 'sql': "SELECT (hotels.revenue / (SELECT SUM(revenue) FROM hotels WHERE city = 'New York City') * 100) as market_share FROM hotels WHERE hotel_name = 'Hotel X';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='${produce the sql}. We first need to find the total revenue generated by all hotels in New York City and then find the revenue generated by Hotel X. Finally, we will calculate the market share by dividing the revenue of Hotel X by the total revenue.',
    sql="SELECT (Hotel X's revenue) / SUM(revenue) as market_share FROM hotels WHERE city = 'New York City';\n\nTo find the revenue of Hotel X, we can modify the query as follows:\n\nSql: SELECT revenue FROM hotels WHERE hotel_name = 'Hotel X' AND city = 'New York City';"
), 1), (Example({'sql_prompt': "How many vehicles of type 'Trolleybus' are due for maintenance in the next 30 days?", 'sql_context': "CREATE TABLE vehicles (id INT, vehicle_type VARCHAR(255), model_year INT, last_maintenance_date DATE, next_maintenance_date DATE); INSERT INTO vehicles (id, vehicle_type, model_year, last_maintenance_date, next_maintenance_date) VALUES (2004, 'Trolleybus', 2020, '2022-04-20', '2022-07-20'), (2005, 'Tram', 2019, '2022-05-15', '2022-11-15');", 'sql': "SELECT vehicle_type, TIMESTAMPDIFF(DAY, CURDATE(), next_maintenance_date) as days_until_next_maintenance FROM vehicles WHERE vehicle_type = 'Trolleybus' HAVING days_until_next_maintenance <= 30;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="`How many vehicles of type 'Trolleybus' are due for maintenance in the next 30 days?`\n\n`Sql Context:` CREATE TABLE vehicles (id INT, vehicle_type VARCHAR(255), model_year INT, last_maintenance_date DATE, next_maintenance_date DATE); INSERT INTO vehicles (id, vehicle_type, model_year, last_maintenance_date, next_maintenance_date) VALUES (2004, 'Trolleybus', 2020, '2022-04-20', '2022-07-20'), (2",
    sql="SELECT COUNT(*) FROM vehicles WHERE vehicle_type = 'Trolleybus' AND next_maintenance_date <= DATE_ADD(CURDATE(), INTERVAL 30 DAY);\n\nReasoning: Let's think step by step in order to `How many vehicles of type 'Trolleybus' are due for maintenance in the next 30 days?` We need to find the number of rows where the vehicle_type is 'Trolleybus' and the next_maintenance_date is within the next 30 days. To achieve this, we use a SQL query that selects the count of rows from the vehicles table where the vehicle_type is 'Trol"
), 1), (Example({'sql_prompt': "Insert a new row into the 'startups' table for 'Health Startup 5', founded in '2022-03-15' by 'Middle Eastern' founder, with a funding amount of $7,500,000", 'sql_context': 'CREATE TABLE startups (id INT, name TEXT, industry TEXT, founding_date DATE, raised_funding FLOAT, founder_race TEXT);', 'sql': "INSERT INTO startups (name, industry, founding_date, raised_funding, founder_race) VALUES ('Health Startup 5', 'Healthcare', '2022-03-15', 7500000.00, 'Middle Eastern');"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Insert a new row into the 'startups' table. We first need to identify an available `id` for the new row, then insert the provided values for the other columns. Since the question does not specify an `id`, we will assume that the table has an auto-incrementing primary key column named `id`.",
    sql="INSERT INTO startups (name, industry, founding_date, raised_funding, founder_race) VALUES ('Health Startup 5', 'Healthcare', '2022-03-15', 7500000.0, 'Middle Eastern');\n\nIn a real-world scenario, it would be"
), 1), (Example({'sql_prompt': 'How many mental health parity complaints were filed in the last 12 months by state?', 'sql_context': "CREATE TABLE mental_health_parity_complaints (complaint_id INT, complaint_date DATE, state VARCHAR(20)); INSERT INTO mental_health_parity_complaints (complaint_id, complaint_date, state) VALUES (1, '2021-01-01', 'California'), (2, '2021-03-15', 'New York'), (3, '2020-12-31', 'Texas');", 'sql': 'SELECT state, COUNT(*) as num_complaints FROM mental_health_parity_complaints WHERE complaint_date >= DATE_SUB(CURRENT_DATE, INTERVAL 12 MONTH) GROUP BY state;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='${produce the sql}. We first need to filter complaints that were filed within the last 12 months. Then, we group the results by state to count the number of complaints per state. Here is the SQL query:\n\n```sql\nSELECT state, COUNT(*) as complaint_count\nFROM mental_health_parity_complaints\nWHERE complaint_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 12 MONTH)\nGROUP BY state;\n```',
    sql="Sql Prompt: How many mental health parity complaints were filed in the last 6 months by state?\n\nSql Context: CREATE TABLE mental_health_parity_complaints (complaint_id INT, complaint_date DATE, state VARCHAR(20)); INSERT INTO mental_health_parity_complaints (complaint_id, complaint_date, state) VALUES (1, '2021-01-01', 'California'), (2, '2021-03-15', 'New York'), (3, '2020-12-31', 'Texas');"
), 0), (Example({'sql_prompt': 'Which chemical plants have exceeded the maximum allowed emission limit in the last year?', 'sql_context': "CREATE TABLE plants (plant_id INT, plant_name VARCHAR(50)); CREATE TABLE emissions (plant_id INT, emission_level INT, emission_date DATE); INSERT INTO plants (plant_id, plant_name) VALUES (1, 'Plant A'), (2, 'Plant B'); INSERT INTO emissions (plant_id, emission_level, emission_date) VALUES (1, 500, '2022-01-01'), (2, 450, '2022-01-01');", 'sql': 'SELECT plants.plant_name FROM plants INNER JOIN emissions ON plants.plant_id = emissions.plant_id WHERE emissions.emission_level > (SELECT MAX(emission_limit) FROM allowed_emissions) AND emissions.emission_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="${produce the sql}. We first need to find the records where the emission level exceeded the maximum allowed limit. Since we don't have a maximum allowed limit specified in the context, let's assume it's any value greater than 450 (the lowest emission level).",
    sql='SELECT plant_name FROM plants JOIN emissions ON plants.plant_id = emissions.plant_id WHERE emissions.emission_level > 450 AND EXTRACT(YEAR FROM emission_date) = EXTRACT(YEAR FROM CURRENT_DATE());\n\nThis query will return the names of chemical plants that have exceeded the maximum allowed emission limit in the current year.'
), 1), (Example({'sql_prompt': 'What is the total duration played for each player?', 'sql_context': "CREATE TABLE PlayerGame (PlayerID INT, GameID INT, Played DATE, StartTime TIMESTAMP, EndTime TIMESTAMP); INSERT INTO PlayerGame (PlayerID, GameID, Played, StartTime, EndTime) VALUES (1, 1, '2022-01-01', '2022-01-01 10:00:00', '2022-01-01 12:00:00'), (2, 2, '2022-01-02', '2022-01-02 14:00:00', '2022-01-02 16:00:00'), (3, 1, '2022-01-03', '2022-01-03 10:00:00', '2022-01-03 11:00:00'), (4, 3, '2022-01-04', '2022-01-04 18:00:00', '2022-01-04 19:00:00');", 'sql': 'SELECT PlayerID, SUM(TIMESTAMPDIFF(MINUTE, StartTime, EndTime)) FROM PlayerGame GROUP BY PlayerID;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="`What is the total duration played for each player?`\n\nSql Context: CREATE TABLE PlayerGame (PlayerID INT, GameID INT, Played DATE, StartTime TIMESTAMP, EndTime TIMESTAMP); INSERT INTO PlayerGame (PlayerID, GameID, Played, StartTime, EndTime) VALUES (1, 1, '2022-01-01', '2022-01-01 10:00:00', '2022-01-01 12:00:00'), (2, 2, '2022-01-0",
    sql='SELECT PlayerID, TIMESTAMPDIFF(SECOND, StartTime, EndTime) AS TotalDuration FROM PlayerGame GROUP BY PlayerID;\n\nThis query calculates the difference between the EndTime and StartTime for each game played by a player, then groups the results by PlayerID to provide the total duration played for each player.'
), 1), (Example({'sql_prompt': 'What is the percentage of legal technology patents granted to applicants in California since 2010?', 'sql_context': 'CREATE TABLE legal_technology_patents (patent_id INT, grant_date DATE, state VARCHAR(20));', 'sql': "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM legal_technology_patents WHERE grant_date >= '2010-01-01')) AS percentage FROM legal_technology_patents WHERE state = 'California';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='${produce the sql}. We first need to filter the records for California and since 2010. Then we count the total number of patents and calculate the percentage.',
    sql="SELECT COUNT(*) as total_patents, COUNT(CASE WHEN state = 'California' AND grant_date >= '2010-01-01' THEN 1 END) as california_patents FROM legal_technology_patents;\nSELECT (california_patents / total_patents) * 100 AS percentage FROM ( SELECT COUNT(*) as total_patents, COUNT(CASE WHEN state = 'California'"
), 1), (Example({'sql_prompt': "What is the total quantity of menu items sold in the 'Appetizers' category from the 'Asian' cuisine type?", 'sql_context': "CREATE TABLE menu (menu_id INT, menu_name VARCHAR(50), category VARCHAR(50), cuisine VARCHAR(50), quantity_sold INT, price DECIMAL(5,2), month_sold INT); INSERT INTO menu (menu_id, menu_name, category, cuisine, quantity_sold, price, month_sold) VALUES (12, 'Spring Rolls', 'Appetizers', 'Asian', 30, 4.99, 1), (13, 'Edamame', 'Appetizers', 'Asian', 40, 3.99, 1);", 'sql': "SELECT SUM(quantity_sold) FROM menu WHERE category = 'Appetizers' AND cuisine = 'Asian';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="${produce the sql}. We first need to filter the records for the 'Appetizers' category and 'Asian' cuisine type. Then, we sum up the quantity_sold for those filtered records. Here is the SQL query:",
    sql="SELECT SUM(quantity_sold) FROM menu WHERE category = 'Appetizers' AND cuisine = 'Asian';"
), 1), (Example({'sql_prompt': 'How many volunteers signed up in each region in 2021?', 'sql_context': "CREATE TABLE volunteers (id INT, name TEXT, region TEXT, signup_date DATE); INSERT INTO volunteers (id, name, region, signup_date) VALUES (1, 'Alice', 'North', '2021-02-03'), (2, 'Bob', 'South', '2021-05-05'), (3, 'Charlie', 'East', '2020-12-12');", 'sql': 'SELECT region, COUNT(*) FROM volunteers WHERE YEAR(signup_date) = 2021 GROUP BY region;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='${produce the sql}. We first need to filter the records for the year 2021. Then, we group the results by region and count the number of volunteers in each group. Here is the SQL query:\n\n```sql\nSELECT region, COUNT(*) as volunteer_count FROM volunteers WHERE YEAR(signup_date) = 2021 GROUP BY region;\n```',
    sql='SELECT region, COUNT(*) as volunteer_count FROM volunteers WHERE YEAR(signup_date) = 2021 GROUP BY region;'
), 1), (Example({'sql_prompt': 'What is the total distance traveled for all buses in the London transit system in the past week?', 'sql_context': 'CREATE TABLE london_buses (bus_id INT, daily_distance FLOAT, date DATE);', 'sql': 'SELECT SUM(daily_distance) FROM london_buses WHERE date >= DATE_SUB(NOW(), INTERVAL 1 WEEK);'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='${produce the sql}. We first need to find the total distance traveled for each bus in the past week. Then, we sum up these distances for all buses. Here is the SQL query:\n\n```sql\nSELECT SUM(daily_distance) AS total_distance FROM london_buses WHERE date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 WEEK);\n```',
    sql="Sql Prompt: What is the total distance traveled for all buses in the London transit system in the past week?\n\nSql Context: CREATE TABLE london_buses (bus_id INT, daily_distance FLOAT, date DATE);\n\nReasoning: Let's think step by step in order to ${produce the sql}. We first need to find the total distance traveled for each bus in the past week. Then, we sum up these distances for all buses. Here is the SQL query: ```sql SELECT SUM(daily_distance) AS total_distance FROM london_buses WHERE date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1"
), 1), (Example({'sql_prompt': "List all suppliers who provide products to 'Organic Foods' store in the 'StoreSuppliers' table", 'sql_context': "CREATE TABLE StoreSuppliers (store VARCHAR(255), supplier VARCHAR(255)); INSERT INTO StoreSuppliers (store, supplier) VALUES ('Organic Foods', 'Supplier A'), ('Organic Foods', 'Supplier B'), ('Health Foods', 'Supplier C');", 'sql': "SELECT supplier FROM StoreSuppliers WHERE store = 'Organic Foods';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="List all suppliers who provide products to 'Organic Foods' store in the 'StoreSuppliers' table.\n\nSql Context: CREATE TABLE StoreSuppliers (store VARCHAR(255), supplier VARCHAR(255)); INSERT INTO StoreSuppliers (store, supplier) VALUES ('Organic Foods', 'Supplier A'), ('Organic Foods', 'Supplier B'), ('Health Foods', 'Supplier C');",
    sql="SELECT DISTINCT supplier FROM StoreSuppliers WHERE store = 'Organic Foods';"
), 1), (Example({'sql_prompt': 'What is the percentage of total humanitarian aid spent on education in each world region?', 'sql_context': "CREATE TABLE humanitarian_aid (id INT, region TEXT, category TEXT, amount FLOAT); INSERT INTO humanitarian_aid (id, region, category, amount) VALUES (1, 'Africa', 'Education', 500), (2, 'Asia', 'Health', 750), (3, 'Africa', 'Health', 250);", 'sql': "SELECT region, (SUM(case when category = 'Education' then amount else 0 end) / SUM(amount)) * 100 as education_percentage FROM humanitarian_aid GROUP BY region;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='${produce the sql}. We first need to find the total amount of humanitarian aid spent on education and the total amount of aid spent in each region. After that, we can calculate the percentage of aid spent on education for each region.',
    sql="```sql\nSELECT region, SUM(CASE WHEN category = 'Education' THEN amount ELSE 0 END) as total_education_aid, SUM(amount) as total_aid FROM humanitarian_aid GROUP BY region;\n\nWITH education_aid_by_region AS (\n    SELECT region, SUM(CASE WHEN category = 'Education' THEN amount ELSE 0 END"
), 1)]