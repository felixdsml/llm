[(Example({'sql_prompt': "Update the name of the passenger with the id 3 to 'Emily Lee'.", 'sql_context': "CREATE TABLE PASSENGERS (id INT, name VARCHAR(50)); INSERT INTO PASSENGERS VALUES (3, 'James Brown');", 'sql': "UPDATE PASSENGERS SET name = 'Emily Lee' WHERE id = 3;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to update the name of the passenger with ID 3 to "Emily Lee":\n```sql\nUPDATE PASSENGERS\nSET name = \'Emily Lee\'\nWHERE id = 3;\n```\n\n**Reasoning:** To update the name of a passenger in the `PASSENGERS` table, we use the `UPDATE` statement. We specify the table name (`PASSENGERS`) and then use the `SET` clause to indicate which column we want to modify and its new value. In this case, we are changing the `name` field to "Emily Lee". The `WHERE` clause is used to identify the specific row(s) to be updated, and we specify that',
    sql='SQL query:\n```sql\nUPDATE PASSENGERS\nSET name = \'Emily Lee\'\nWHERE id = 3;\n```\n\n**Reasoning:** To update the name of a passenger in the `PASSENGERS` table, we use the `UPDATE` statement. We specify the table name (`PASSENGERS`) and then use the `SET` clause to indicate which column we want to modify and its new value. In this case, we are changing the `name` field to "Emily Lee". The `WHERE` clause is used to identify the specific row(s) to be updated, and we specify that the ID of the passenger is 3. This ensures that only the row with the corresponding'
), 1), (Example({'sql_prompt': "What is the number of women-led agricultural businesses in the 'business_data' table?", 'sql_context': "CREATE TABLE business_data (business_id INT, business_name VARCHAR(50), gender VARCHAR(10)); INSERT INTO business_data (business_id, business_name, gender) VALUES (1, 'Green Acres', 'female'), (2, 'Brown Farms', 'male'), (3, 'Eco Harvest', 'non-binary');", 'sql': "SELECT COUNT(business_id) FROM business_data WHERE gender = 'female';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to answer the prompt:\n```sql\nSELECT COUNT(*) FROM business_data WHERE gender = 'female' AND business_name LIKE '%agricultural%';\n```\n\nThis query counts the number of rows where the gender is 'female' and the business name contains the word 'agricultural'.",
    sql="SQL query:\n```sql\nSELECT COUNT(*) FROM business_data WHERE gender = 'female' AND business_name LIKE '%agricultural%';\n```"
), 0), (Example({'sql_prompt': "What is the average rating for 'Gluten-Free' items?", 'sql_context': "CREATE TABLE ratings (item_name TEXT, is_gluten_free BOOLEAN, rating INTEGER); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Quinoa Salad', true, 4); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Chicken Stir Fry', false, 5);", 'sql': 'SELECT AVG(rating) FROM ratings WHERE is_gluten_free = true;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to find the average rating for 'Gluten-Free' items:\n```sql\nSELECT AVG(rating) AS average_rating\nFROM ratings\nWHERE is_gluten_free = true;\n```\n\nThis query calculates the average of the 'rating' column for rows where the 'is_gluten_free' column is true, which indicates that the item is gluten-free. The result will be a single value representing the average rating for gluten-free items.",
    sql="SQL query:\n```sql\nSELECT AVG(rating) AS average_rating\nFROM ratings\nWHERE is_gluten_free = true;\n```\n\nThis query calculates the average of the 'rating' column for rows where the 'is_gluten_free' column is true, indicating that the item is gluten-free. The result will be a single value representing the average rating for gluten-free items."
), 0), (Example({'sql_prompt': 'What is the maximum amount of dissolved oxygen (DO) in the ocean_health table for each month in 2021?', 'sql_context': "CREATE TABLE ocean_health (date DATE, do_value INT); INSERT INTO ocean_health (date, do_value) VALUES ('2021-01-01', 8), ('2021-01-02', 7), ('2021-02-01', 6), ('2021-02-02', 9);", 'sql': "SELECT EXTRACT(MONTH FROM date) as month, MAX(do_value) as max_do_value FROM ocean_health WHERE date BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY EXTRACT(MONTH FROM date);"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to find the maximum dissolved oxygen (DO) value for each month in 2021 from the `ocean_health` table:\n```sql\nSELECT EXTRACT(MONTH FROM date) AS month, MAX(do_value) AS max_do\nFROM ocean_health\nWHERE EXTRACT(YEAR FROM date) = 2021\nGROUP BY EXTRACT(MONTH FROM date)\nORDER BY month;\n```\n\nThis query uses the `EXTRACT` function to get the month from the "date" column and then groups the data by month. The `MAX` function is used to find the maximum DO value for each month. The results are ordered by month to see the',
    sql='SQL query:\n```sql\nSELECT EXTRACT(MONTH FROM date) AS month, MAX(do_value) AS max_do\nFROM ocean_health\nWHERE EXTRACT(YEAR FROM date) = 2021\nGROUP BY EXTRACT(MONTH FROM date)\nORDER BY month;\n```'
), 0), (Example({'sql_prompt': 'What are the total sales and quantity of goods sold by each salesperson, grouped by city?', 'sql_context': 'CREATE TABLE salesperson (id INT, name TEXT, city TEXT); CREATE TABLE sales (id INT, salesperson_id INT, product TEXT, quantity INT, total_sales FLOAT);', 'sql': 'SELECT s.name, s.city, SUM(s.total_sales) as total_sales, SUM(s.quantity) as total_quantity FROM sales s JOIN salesperson sp ON s.salesperson_id = sp.id GROUP BY s.city, s.name;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query:\n```sql\nSELECT s.city, SUM(sa.total_sales) AS total_sales, SUM(sa.quantity) AS total_quantity\nFROM salesperson s\nJOIN sales sa ON s.id = sa.salesperson_id\nGROUP BY s.city;\n```\n\n**Reasoning:**\nTo answer the query, we need to join the `salesperson` table with the `sales` table on the `id` and `salesperson_id` columns, respectively. Then, we can group the results by city and calculate the sum of total sales and quantity for each city.',
    sql='SQL query:\n```sql\nSELECT s.city, SUM(sa.total_sales) AS total_sales, SUM(sa.quantity) AS total_quantity\nFROM salesperson s\nJOIN sales sa ON s.id = sa.salesperson_id\nGROUP BY s.city;\n```'
), 0), (Example({'sql_prompt': 'What is the total funding received by startups in the technology sector that were founded by women?', 'sql_context': "CREATE TABLE startups(id INT, name TEXT, sector TEXT, founder_gender TEXT, funding FLOAT); INSERT INTO startups VALUES (1, 'Acme Inc', 'Technology', 'Female', 2000000); INSERT INTO startups VALUES (2, 'Beta Corp', 'Retail', 'Male', 3000000); INSERT INTO startups VALUES (3, 'Gamma Start', 'Technology', 'Female', 5000000);", 'sql': "SELECT SUM(funding) FROM startups WHERE sector = 'Technology' AND founder_gender = 'Female';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to answer the question:\n```sql\nSELECT SUM(funding) AS total_funding\nFROM startups\nWHERE sector = 'Technology' AND founder_gender = 'Female';\n```\n\nThis query sums up the funding received by startups in the technology sector that were founded by women. The result will give you the total funding amount.",
    sql="Here is the SQL query to answer the question:\n```sql\nSELECT SUM(funding) AS total_funding\nFROM startups\nWHERE sector = 'Technology' AND founder_gender = 'Female';\n```\nThis query sums up the funding received by startups in the technology sector that were founded by women. The result will give you the total funding amount."
), 0), (Example({'sql_prompt': 'What is the recycling rate of plastic in the residential sector in the state of New York?', 'sql_context': "CREATE TABLE recycling_rates_city (sector VARCHAR(20), city VARCHAR(20), material VARCHAR(20), recycling_rate DECIMAL(5,2)); INSERT INTO recycling_rates_city (sector, city, material, recycling_rate) VALUES ('residential', 'New York City', 'plastic', 0.25), ('commercial', 'New York City', 'plastic', 0.30), ('residential', 'New York City', 'paper', 0.45), ('commercial', 'New York City', 'paper', 0.50), ('residential', 'Los Angeles', 'plastic', 0.20), ('commercial', 'Los Angeles', 'plastic', 0.35), ('residential', 'Los Angeles', 'paper', 0.40), ('commercial', 'Los Angeles', 'paper', 0.50);", 'sql': "SELECT recycling_rate FROM recycling_rates_city WHERE sector = 'residential' AND material = 'plastic' AND city = 'New York City';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To answer the question, consider the following steps: \n\n**Step 1:** Identify the relevant tables and columns. In this case, we have a table named `recycling_rates_city` with columns for sector, city, material, and recycling rate. \n\n**Step 2:** Formulate the SQL query. We want to find the recycling rate of plastic in the residential sector specifically for the state of New York. Since the table includes data for both New York City and Los Angeles, we need to filter our results accordingly. Here's the SQL query:\n```sql\nSELECT recycling_rate\nFROM recycling_rates_city\nWHERE sector = 'residential' AND city LIKE 'New York%';\n```",
    sql="SELECT recycling_rate FROM recycling_rates_city WHERE sector = 'residential' AND city LIKE 'New York%';"
), 0), (Example({'sql_prompt': "Which startups in the 'StartupFunding' table received funding in 2020 or later and have a budget greater than $500,000?", 'sql_context': "CREATE SCHEMA BiotechStartups; CREATE TABLE StartupFunding (startup_name VARCHAR(50), funding_year INT, funding DECIMAL(10, 2)); INSERT INTO StartupFunding VALUES ('StartupA', 2019, 500000), ('StartupB', 2020, 750000);", 'sql': 'SELECT startup_name FROM BiotechStartups.StartupFunding WHERE funding_year >= 2020 AND funding > 500000;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query based on the provided prompt and context:\n```sql\nSELECT startup_name\nFROM StartupFunding\nWHERE funding_year >= 2020 AND funding > 500000;\n```\n\nThis query selects the `startup_name` from the `StartupFunding` table where the `funding_year` is greater than or equal to 2020 and the `funding` amount is greater than $500,000. This will return the names of startups that meet these criteria.',
    sql='SQL query:\n```sql\nSELECT startup_name FROM StartupFunding WHERE funding_year >= 2020 AND funding > 500000;\n```\n\nThis query selects the `startup_name` from the `StartupFunding` table where the `funding_year` is greater than or equal to 2020 and the `funding` amount exceeds $500,000. This will return the names of startups that received funding in 2020 or later and have a budget greater than the specified amount.'
), 0), (Example({'sql_prompt': "How many female engineers are there in 'australian_mines'?", 'sql_context': "CREATE SCHEMA if not exists australia_schema;CREATE TABLE australia_schema.australian_mines (id INT, name VARCHAR, gender VARCHAR, role VARCHAR);INSERT INTO australia_schema.australian_mines (id, name, gender, role) VALUES (1, 'S worker', 'Female', 'Engineer'), (2, 'T engineer', 'Male', 'Engineer');", 'sql': "SELECT COUNT(*) FROM australia_schema.australian_mines WHERE gender = 'Female' AND role = 'Engineer';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query based on the provided context and prompt:\n```sql\nSELECT COUNT(*) FROM australia_schema.australian_mines WHERE gender = 'Female' AND role = 'Engineer';\n```\n\nThis query counts the number of rows (records) in the `australian_mines` table where the `gender` is 'Female' and the `role` is 'Engineer'. The result will give you the total number of female engineers in the dataset.",
    sql="SELECT COUNT(*) FROM australia_schema.australian_mines WHERE gender = 'Female' AND role = 'Engineer';"
), 1), (Example({'sql_prompt': 'What is the average salary of employees in each position?', 'sql_context': "CREATE TABLE Employees (EmployeeID INT, Name VARCHAR(50), Department VARCHAR(50), Position VARCHAR(50), Salary FLOAT); INSERT INTO Employees (EmployeeID, Name, Department, Position, Salary) VALUES (1, 'John Doe', 'IT', 'Developer', 75000.00), (2, 'Jane Smith', 'IT', 'Developer', 80000.00), (3, 'Alice Johnson', 'Marketing', 'Marketing Specialist', 60000.00), (4, 'Bob Brown', 'HR', 'HR Specialist', 65000.00);", 'sql': 'SELECT Position, AVG(Salary) FROM Employees GROUP BY Position;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to find the average salary for each position:\n```sql\nSELECT Position, AVG(Salary) AS AverageSalary\nFROM Employees\nGROUP BY Position;\n```\nThis query selects the "Position" column and calculates the average salary for each unique position using the `AVG` function. The `GROUP BY` clause groups the results by the "Position" column, so you get the average salary for each distinct position in the "Employees" table.',
    sql='SQL query:\n```sql\nSELECT Position, AVG(Salary) AS AverageSalary\nFROM Employees\nGROUP BY Position;\n```'
), 0), (Example({'sql_prompt': 'What are the names and ranks of all military personnel in country W who were demoted in the year 2019?', 'sql_context': "CREATE TABLE military_demotions (id INT, name TEXT, country TEXT, rank TEXT, demotion_year INT);INSERT INTO military_demotions (id, name, country, rank, demotion_year) VALUES (1, 'John Doe', 'Country W', 'Colonel', 2019);", 'sql': "SELECT name, rank FROM military_demotions WHERE country = 'Country W' AND demotion_year = 2019;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query based on the provided context and prompt:\n```sql\nSELECT name, rank\nFROM military_demotions\nWHERE country = \'Country W\' AND demotion_year = 2019;\n```\n\nThis query selects the names and ranks of all military personnel from "Country W" who were demoted in the year 2019. The `WHERE` clause filters the data based on the specified conditions, ensuring that only relevant records are included in the result set.',
    sql="SQL query:\n```sql\nSELECT name, rank FROM military_demotions WHERE country = 'Country W' AND demotion_year = 2019;\n```"
), 1), (Example({'sql_prompt': "List the top 2 sectors with the highest donation amounts in the 'Asia' region for the year 2018, ordered by the donation amount in descending order.", 'sql_context': "CREATE TABLE Donors (donor_id INT, donor_name VARCHAR(255), donation_amount INT, sector VARCHAR(255), region VARCHAR(255), donation_date DATE); INSERT INTO Donors (donor_id, donor_name, donation_amount, sector, region, donation_date) VALUES (1, 'DonorA', 100000, 'Health', 'Asia', '2018-01-01');", 'sql': "SELECT sector, SUM(donation_amount) AS total_donation FROM Donors WHERE region = 'Asia' AND donation_date >= '2018-01-01' AND donation_date < '2019-01-01' GROUP BY sector ORDER BY total_donation DESC LIMIT 2;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query that answers the prompt:\n```sql\nSELECT sector, SUM(donation_amount) AS total_donation\nFROM Donors\nWHERE region = 'Asia' AND YEAR(donation_date) = 2018\nGROUP BY sector\nORDER BY total_donation DESC\nLIMIT 2;\n```\n\nStep-by-step reasoning:\n1. We start by selecting the `sector` and calculating the sum of `donation_amount` for each sector using the `SUM` function.\n2. We use the `WHERE` clause to filter the data for the 'Asia' region and donations made in the year 2018 using the `YEAR` function on the `donation_",
    sql='SQL query'
), 1), (Example({'sql_prompt': "Display the vendor with the highest average price for 'Salmon' in the 'sales' table.", 'sql_context': "CREATE TABLE sales (id INT PRIMARY KEY, vendor VARCHAR(50), quantity INT, species VARCHAR(50), price DECIMAL(5,2)); INSERT INTO sales (id, vendor, quantity, species, price) VALUES (1, 'Seafood Haven', 20, 'Salmon', 15.99), (2, 'Sea Bounty', 30, 'Tilapia', 9.49), (3, 'Sea Bounty', 15, 'Cod', 14.50), (4, 'Fresh Catch', 25, 'Salmon', 17.99);", 'sql': "SELECT vendor, AVG(price) FROM sales WHERE species = 'Salmon' GROUP BY vendor ORDER BY AVG(price) DESC LIMIT 1;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query that answers the prompt:\n```sql\nSELECT vendor, AVG(price) AS average_price\nFROM sales\nWHERE species = 'Salmon'\nGROUP BY vendor\nORDER BY average_price DESC\nLIMIT 1;\n```\n\nStep-by-step reasoning:\n1. We start by selecting the `vendor` and calculating the average price (`AVG(price)`) for each vendor who has sold `Salmon`.\n2. We use the `WHERE` clause to filter the data and only consider rows where the `species` is 'Salmon'.\n3. The `GROUP BY vendor` groups the data by each unique vendor, so we can calculate the average price for each vendor",
    sql="SQL query:\n```sql\nSELECT vendor, AVG(price) AS average_price\nFROM sales\nWHERE species = 'Salmon'\nGROUP BY vendor\nORDER BY average_price DESC\nLIMIT 1;\n```\n\nStep-by-step reasoning:\n1. We start by selecting the `vendor` and calculating the average price (`AVG(price)`) for each vendor who has sold `Salmon`.\n2. We use the `WHERE` clause to filter the data and only consider rows where the `species` is 'Salmon'.\n3. The `GROUP BY vendor` groups the data by each unique vendor, so we can calculate the average price for each vendor.\n4. We then order"
), 1), (Example({'sql_prompt': "Add new military equipment to 'military_equipment' table", 'sql_context': "CREATE TABLE military_equipment (id INT PRIMARY KEY, name VARCHAR(255), type VARCHAR(255), country VARCHAR(255)); INSERT INTO military_equipment (id, name, type, country) VALUES (1, 'M1 Abrams', 'Tank', 'USA');", 'sql': "INSERT INTO military_equipment (id, name, type, country) VALUES (2, 'Leopard 2', 'Tank', 'Germany');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is a possible SQL query to add new military equipment to the 'military_equipment' table:\n```sql\nINSERT INTO military_equipment (id, name, type, country)\nVALUES (2, 'F-35 Lightning II', 'Fighter Jet', 'USA'),\n       (3, 'T-700 Engine', 'Helicopter Engine', 'USA'),\n       (4, 'AH-64 Apache', 'Attack Helicopter', 'USA');\n```\n\nIn this query, we are using the `INSERT INTO` statement to add new rows to the 'military_equipment' table. Each row contains information about a piece of military equipment, including its name, type, and country of origin. The",
    sql='SQL query'
), 0), (Example({'sql_prompt': 'Show total number of union members by state', 'sql_context': "CREATE TABLE union_members (id INT, name VARCHAR(50), state VARCHAR(2), city VARCHAR(20), occupation VARCHAR(20)); INSERT INTO union_members (id, name, state, city, occupation) VALUES (1, 'John Doe', 'NY', 'New York', 'Engineer'); INSERT INTO union_members (id, name, state, city, occupation) VALUES (2, 'Jane Smith', 'CA', 'Los Angeles', 'Teacher'); INSERT INTO union_members (id, name, state, city, occupation) VALUES (3, 'Alice Johnson', 'NY', 'Buffalo', 'Nurse');", 'sql': 'SELECT state, COUNT(*) as total_members FROM union_members GROUP BY state;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query that answers the prompt:\n```sql\nSELECT state, COUNT(*) AS total_members\nFROM union_members\nGROUP BY state;\n```\n\nStep by step reasoning:\n1. The goal is to find the total number of union members by state.\n2. We start by selecting the `state` column from the `union_members` table.\n3. We use the `COUNT(*)` function to count the number of rows for each group, which is aliased as `total_members`.\n4. The `GROUP BY` clause groups the results by the `state` column, so we get one row for each unique state with the corresponding total member count.',
    sql='SQL query'
), 1), (Example({'sql_prompt': 'What is the total value of military equipment sales to all countries?', 'sql_context': "CREATE TABLE military_sales (id INT, country VARCHAR, value FLOAT); INSERT INTO military_sales (id, country, value) VALUES (1, 'Canada', 5000000), (2, 'Mexico', 3000000), (3, 'Canada', 7000000);", 'sql': 'SELECT SUM(value) FROM military_sales;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to answer the prompt:\n```sql\nSELECT SUM(value) AS total_sales FROM military_sales;\n```\n\n**Reasoning:** To find the total value of military equipment sales to all countries, we can use a simple `SUM` function on the "value" column of the "military_sales" table. This will give us the total sum of all the sales values in the table, representing the total value of military equipment sales.',
    sql='SQL query:\n```sql\nSELECT SUM(value) AS total_sales FROM military_sales;\n```\n\n**Reasoning:** To find the total value of military equipment sales to all countries, we can use a simple `SUM` function on the "value" column of the "military_sales" table. This will give us the total sum of all the sales values in the table, representing the total value of military equipment sales.'
), 0), (Example({'sql_prompt': 'Identify the top 3 countries with the highest number of social impact projects in 2019.', 'sql_context': "CREATE TABLE countries (id INT, name VARCHAR(255), total_projects INT); INSERT INTO countries (id, name, total_projects) VALUES (1, 'Brazil', 500), (2, 'India', 700), (3, 'South Africa', 350); CREATE TABLE projects_by_country (country VARCHAR(255), project_count INT); INSERT INTO projects_by_country (country, project_count) SELECT country, COUNT(*) FROM projects GROUP BY country;", 'sql': 'SELECT c.name, p.project_count FROM countries c JOIN (SELECT country, COUNT(*) AS project_count FROM projects GROUP BY country ORDER BY project_count DESC LIMIT 3) p ON c.name = p.country;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to identify the top 3 countries with the highest number of social impact projects in 2019:\n```sql\nSELECT c.name AS country_name, pbc.project_count\nFROM countries c\nJOIN projects_by_country pbc ON c.name = pbc.country\nWHERE EXTRACT(YEAR FROM pbc.project_start_date) = 2019\nORDER BY pbc.project_count DESC\nLIMIT 3;\n```\n\nStep by step reasoning:\n1. We start by selecting the country name and project count from the `countries` table, which we alias as `c`, and the `projects_by_country`',
    sql='SQL query:\n```sql\nSELECT c.name AS country_name, pbc.project_count\nFROM countries c\nJOIN projects_by_country pbc ON c.name = pbc.country\nWHERE EXTRACT(YEAR FROM pbc.project_start_date) = 2019\nORDER BY pbc.project_count DESC\nLIMIT 3;\n```\n\nStep-by-step reasoning:\n\n1. We start by selecting the country name and project count from the `countries` table, which we alias as `c`, and the `projects_by_country` table, which we alias as `pbc`.\n2. We then join these two tables on the `'
), 0), (Example({'sql_prompt': 'What is the maximum market price of Terbium in China for 2017?', 'sql_context': 'CREATE TABLE Terbium_Market_Prices (id INT, year INT, country VARCHAR(255), market_price FLOAT);', 'sql': "SELECT MAX(market_price) FROM Terbium_Market_Prices WHERE year = 2017 AND country = 'China';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to find the maximum market price of Terbium in China for 2017:\n```sql\nSELECT MAX(market_price) FROM Terbium_Market_Prices WHERE year = 2017 AND country = \'China\';\n```\n\n**Reasoning:** We start by selecting the maximum value of the "market_price" column from the "Terbium_Market_Prices" table. We use the WHERE clause to filter the data for the year 2017 and the country \'China\'. This ensures that we only consider market prices relevant to the given year and country. The MAX function then returns the highest market price among the filtered results, giving us the maximum market price',
    sql='SQL query:\n```sql\nSELECT MAX(market_price) FROM Terbium_Market_Prices WHERE year = 2017 AND country = \'China\';\n```\n\n**Reasoning:** We start by selecting the maximum value of the "market_price" column from the "Terbium_Market_Prices" table. We use the WHERE clause to filter the data for the year 2017 and the country \'China\'. This ensures that we only consider market prices relevant to the given year and country. The MAX function then returns the highest market price among the filtered results, giving us the maximum market price of Terbium in China for 2017.'
), 1), (Example({'sql_prompt': 'What is the maximum amount of research grant received by a faculty member in the Arts and Humanities department?', 'sql_context': "CREATE TABLE grants_faculty (id INT, department VARCHAR(50), faculty_name VARCHAR(50), amount DECIMAL(10,2), grant_date DATE); INSERT INTO grants_faculty (id, department, faculty_name, amount, grant_date) VALUES (1, 'Arts and Humanities', 'Grace', 12000.00, '2018-06-10'), (2, 'Arts and Humanities', 'Harry', 18000.00, '2019-12-20'), (3, 'Arts and Humanities', 'Ida', 20000.00, '2020-08-05');", 'sql': "SELECT MAX(amount) FROM grants_faculty WHERE department = 'Arts and Humanities';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To answer the question, consider the following steps:\n\n1. Identify the table and columns relevant to the query: The relevant table for this query is `grants_faculty`, and we need to focus on the `department` column (for 'Arts and Humanities') and the `amount` column (for the maximum amount).\n2. Write the SQL query: Use the `MAX` function to find the maximum value of the `amount` column where the `department` is 'Arts and Humanities'.\n3. Combine the steps into a single SQL query:\n\n```sql\nSELECT MAX(amount) AS max_grant_amount\nFROM grants_faculty\nWHERE department = 'Arts and Humanities';\n```\n\nNow,",
    sql="SQL query:\n```sql\nSELECT MAX(amount) AS max_grant_amount\nFROM grants_faculty\nWHERE department = 'Arts and Humanities';\n```"
), 0), (Example({'sql_prompt': 'What is the total mass of all space debris in orbit?', 'sql_context': "CREATE TABLE Space_Debris (ID INT, Object_Type VARCHAR(50), Mass FLOAT); INSERT INTO Space_Debris (ID, Object_Type, Mass) VALUES (1, 'Defunct Satellite', 1500.0), (2, 'Rocket Body', 2000.0), (3, 'Fuel Tank', 500.0), (4, 'Nuts and Bolts', 100.0), (5, 'Spent Rocket Stage', 3000.0);", 'sql': 'SELECT SUM(Mass) FROM Space_Debris;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To answer the question, we need to sum up the masses of all the space debris objects. Here's how we can do it:\n```sql\nSELECT SUM(Mass) AS Total_Mass FROM Space_Debris;\n```\nThis SQL query calculates the total mass of all space debris by summing up the 'Mass' column from the 'Space_Debris' table and assigns the result to a column named 'Total_Mass'.",
    sql='SQL query:\n```sql\nSELECT SUM(Mass) AS Total_Mass_In_Orbit FROM Space_Debris;\n```'
), 0), (Example({'sql_prompt': 'What is the average age of players who play "Racing Simulator 2022"?', 'sql_context': "CREATE TABLE Players (PlayerID INT, PlayerName VARCHAR(50), Game VARCHAR(50), Age INT); INSERT INTO Players (PlayerID, PlayerName, Game, Age) VALUES (1, 'John Doe', 'Racing Simulator 2022', 25), (2, 'Jane Smith', 'Racing Simulator 2022', 30), (3, 'Alice Johnson', 'Shooter Game 2022', 22);", 'sql': "SELECT AVG(Age) FROM Players WHERE Game = 'Racing Simulator 2022';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query:\n```sql\nSELECT AVG(Age) AS AverageAge\nFROM Players\nWHERE Game = \'Racing Simulator 2022\';\n```\n\nThis query calculates the average age of players who play "Racing Simulator 2022" by filtering the players based on their game and then computing the average of their ages.',
    sql='SQL query:\n```sql\nSELECT AVG(Age) AS AverageAge\nFROM Players\nWHERE Game = \'Racing Simulator 2022\';\n```\n\nThis query calculates the average age of players who play "Racing Simulator 2022" by filtering the players based on their game and then computing the average of their ages.'
), 0), (Example({'sql_prompt': 'What is the total revenue generated by concert ticket sales in the US?', 'sql_context': "CREATE TABLE concert_tickets (ticket_id int, venue_id int, ticket_price decimal, timestamp datetime, country varchar(255)); INSERT INTO concert_tickets (ticket_id, venue_id, ticket_price, timestamp, country) VALUES (1, 789, 50.00, '2022-06-01 12:00:00', 'United States');", 'sql': "SELECT SUM(ticket_price) as total_revenue FROM concert_tickets WHERE timestamp BETWEEN '2022-01-01' AND '2022-12-31' AND country = 'United States';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is a possible SQL query to answer the prompt:\n\n```sql\nSELECT SUM(ticket_price) AS total_revenue\nFROM concert_tickets\nWHERE country = 'United States';\n```\n\nThis query calculates the total revenue generated from concert ticket sales in the United States by summing up the ticket prices of all records where the country is 'United States'. The result will be a single value representing the total revenue.",
    sql="SQL query:\n```sql\nSELECT SUM(ticket_price) AS total_revenue\nFROM concert_tickets\nWHERE country = 'United States';\n```"
), 0), (Example({'sql_prompt': "How many cases did attorney 'Jane Doe' handle in total?", 'sql_context': "CREATE TABLE Attorneys (AttorneyID int, Name varchar(50), Specialty varchar(50)); INSERT INTO Attorneys (AttorneyID, Name, Specialty) VALUES (2, 'Jane Doe', 'Civil'); CREATE TABLE Cases (CaseID int, ClientID int, Category varchar(50), AttorneyID int); INSERT INTO Cases (CaseID, ClientID, Category, AttorneyID) VALUES (301, 3, 'Civil', 2);", 'sql': "SELECT COUNT(*) as TotalCases FROM Cases WHERE AttorneyID = (SELECT AttorneyID FROM Attorneys WHERE Name = 'Jane Doe');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to answer the prompt:\n```sql\nSELECT COUNT(*) AS total_cases\nFROM Cases\nWHERE AttorneyID = 2;\n```\n\nThis query counts the number of rows in the "Cases" table where the "AttorneyID" matches the ID of Jane Doe, which is 2 in this case. The result will give the total number of cases handled by Jane Doe.',
    sql='SQL query:\n```sql\nSELECT COUNT(*) AS total_cases\nFROM Cases\nWHERE AttorneyID = 2;\n```'
), 0), (Example({'sql_prompt': 'Show the top 3 content categories in Japan with the most posts.', 'sql_context': "CREATE TABLE content_categories (id INT, content_category VARCHAR(255)); CREATE TABLE posts_extended (id INT, content_category_id INT, content TEXT, country VARCHAR(255)); INSERT INTO content_categories (id, content_category) VALUES (1, 'AI'), (2, 'Data Science'), (3, 'Machine Learning'); INSERT INTO posts_extended (id, content_category_id, content, country) VALUES (1, 1, 'Hello', 'Japan'), (2, 1, 'World', 'Japan'), (3, 2, 'AI', 'Japan');", 'sql': "SELECT content_categories.content_category, COUNT(posts_extended.id) AS post_count FROM content_categories JOIN posts_extended ON posts_extended.content_category_id = content_categories.id WHERE posts_extended.country = 'Japan' GROUP BY content_categories.content_category ORDER BY post_count DESC LIMIT 3;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query that answers the prompt:\n```sql\nSELECT content_category, COUNT(*) AS post_count\nFROM posts_extended\nWHERE country = 'Japan'\nGROUP BY content_category\nORDER BY post_count DESC\nLIMIT 3;\n```\n\nStep-by-step reasoning:\n1. We start by selecting from the `posts_extended` table where the country is 'Japan'.\n2. We then group the results by `content_category`.\n3. We count the number of posts for each content category using `COUNT(*)`.\n4. We order the results in descending order based on the post count using `ORDER BY post_count DESC`.\n5. Finally, we",
    sql='SQL query'
), 1), (Example({'sql_prompt': 'How many defense contracts were signed in each quarter of 2020?', 'sql_context': "CREATE TABLE defense_contracts (contract_id INT, contract_date DATE); INSERT INTO defense_contracts VALUES (1, '2020-03-15'), (2, '2020-06-01'), (3, '2020-09-15');", 'sql': "SELECT TO_CHAR(contract_date, 'YYYY-Q') AS quarter, COUNT(*) FROM defense_contracts WHERE contract_date >= DATE '2020-01-01' AND contract_date < DATE '2021-01-01' GROUP BY quarter;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query based on the provided context and prompt:\n```sql\nSELECT COUNT(*) AS num_contracts,\n       QUARTER(contract_date) AS quarter\nFROM defense_contracts\nWHERE YEAR(contract_date) = 2020\nGROUP BY QUARTER(contract_date);\n```\n\nThis query uses the `QUARTER` function to extract the quarter from the `contract_date` and then groups the results by that quarter. The `COUNT` function is used to count the number of contracts signed in each quarter. The result will show the number of defense contracts signed in each quarter of 2020.',
    sql='SQL query:\n```sql\nSELECT COUNT(*) AS num_contracts, QUARTER(contract_date) AS quarter\nFROM defense_contracts\nWHERE YEAR(contract_date) = 2020\nGROUP BY QUARTER(contract_date);\n```\n\nThis query uses the `QUARTER` function to extract the quarter from the `contract_date` and then groups the results by that quarter. The `COUNT` function is used to count the number of contracts signed in each quarter. The result will show the number of defense contracts signed in each quarter of 2020.'
), 0), (Example({'sql_prompt': 'What is the total duration played for each player?', 'sql_context': "CREATE TABLE PlayerGame (PlayerID INT, GameID INT, Played DATE, StartTime TIMESTAMP, EndTime TIMESTAMP); INSERT INTO PlayerGame (PlayerID, GameID, Played, StartTime, EndTime) VALUES (1, 1, '2022-01-01', '2022-01-01 10:00:00', '2022-01-01 12:00:00'), (2, 2, '2022-01-02', '2022-01-02 14:00:00', '2022-01-02 16:00:00'), (3, 1, '2022-01-03', '2022-01-03 10:00:00', '2022-01-03 11:00:00'), (4, 3, '2022-01-04', '2022-01-04 18:00:00', '2022-01-04 19:00:00');", 'sql': 'SELECT PlayerID, SUM(TIMESTAMPDIFF(MINUTE, StartTime, EndTime)) FROM PlayerGame GROUP BY PlayerID;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to calculate the total duration played for each player:\n```sql\nSELECT PlayerID, \n       SUM(TIME_TO_SEC(TIMEDIFF(EndTime, StartTime))) AS TotalDurationSeconds\nFROM PlayerGame\nGROUP BY PlayerID;\n```\n\nStep by step reasoning:\n1. The `SELECT` statement is used to retrieve data from the `PlayerGame` table.\n2. We use the `SUM` function along with `TIME_TO_SEC` and `TIMEDIFF` functions to calculate the total duration in seconds for each player.\n3. The `GROUP BY PlayerID` groups the results by each unique `PlayerID`, so you get the total duration played for',
    sql='SQL query:\n```sql\nSELECT PlayerID, SUM(TIME_TO_SEC(TIMEDIFF(EndTime, StartTime))) AS TotalDurationSeconds\nFROM PlayerGame\nGROUP BY PlayerID;\n```\n\nStep-by-step reasoning:\n\n1. The `SELECT` statement is used to retrieve data from the `PlayerGame` table.\n2. We use the `SUM` function along with `TIME_TO_SEC` and `TIMEDIFF` functions to calculate the total duration in seconds for each player.\n3. The `GROUP BY PlayerID` groups the results by each unique `PlayerID`, so you get the total duration played for each player.'
), 0), (Example({'sql_prompt': 'Find the percentage change in tourism to Thailand between 2019 and 2021.', 'sql_context': 'CREATE TABLE thailand_tourism (year INT, total_visitors INT); INSERT INTO thailand_tourism (year, total_visitors) VALUES (2019, 40000), (2021, 30000);', 'sql': 'SELECT (30000 - 40000) * 100.0 / 40000 AS change_percentage FROM thailand_tourism WHERE year = 2021;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to find the percentage change in tourism to Thailand between 2019 and 2021:\n```sql\nSELECT ((30000 - 40000) / 40000) * 100 AS percentage_change\nFROM thailand_tourism;\n```\n\nThis query calculates the difference in total visitors between 2019 and 2021 and then divides it by the total visitors in 2019, multiplying the result by 100 to get the percentage change. The result will be the negative percentage change in tourism during this period.',
    sql='SQL query:\n```sql\nSELECT ((30000 - 40000) / 40000) * 100 AS percentage_change\nFROM thailand_tourism;\n```\n\nThis query calculates the difference in total visitors between 2019 and 2021 and then divides it by the total visitors in 2019, multiplying the result by 100 to get the percentage change. The result will be the negative percentage change in tourism during this period.'
), 0), (Example({'sql_prompt': 'How many students with physical disabilities have not received any accommodations in the last year?', 'sql_context': 'CREATE TABLE Accommodations (id INT, student VARCHAR(255), date DATE); CREATE TABLE Students (id INT, name VARCHAR(255), age INT, disability VARCHAR(255));', 'sql': "SELECT COUNT(*) FROM Students LEFT JOIN Accommodations ON Students.id = Accommodations.student WHERE disability = 'physical disability' AND date IS NULL;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is a possible SQL query to answer the prompt:\n```sql\nSELECT COUNT(DISTINCT s.id)\nFROM Students s\nJOIN Accommodations a ON s.id = a.student\nWHERE s.disability LIKE '%physical%'\n  AND a.date BETWEEN '2023-04-22' - INTERVAL 1 YEAR AND '2023-04-22';\n```\n\nThis query joins the `Students` and `Accommodations` tables on the student ID and filters for students with physical disabilities. It then checks if these students have received any accommodations in the last year, excluding today's date, and counts the distinct number of students who meet these",
    sql="SQL query:\n```sql\nSELECT COUNT(DISTINCT s.id)\nFROM Students s\nLEFT JOIN Accommodations a ON s.id = a.student\nWHERE s.disability LIKE '%physical%'\n  AND a.date IS NULL\n  AND a.date BETWEEN '2023-04-22' - INTERVAL 1 YEAR AND '2023-04-22';\n```\n\nThis query joins the `Students` and `Accommodations` tables on the student ID, filtering for students with physical disabilities. It then checks if these students have not received any accommodations in the last year (excluding today's date) by using a LEFT JOIN and checking for NULL"
), 0), (Example({'sql_prompt': 'What is the maximum property price in neighborhoods with inclusive housing policies, and the minimum size of properties in those neighborhoods?', 'sql_context': "CREATE TABLE property (id INT, price INT, size_sqft INT, area VARCHAR(255), has_inclusive_policy BOOLEAN); INSERT INTO property (id, price, size_sqft, area, has_inclusive_policy) VALUES (1, 500000, 1500, 'urban', true), (2, 400000, 1200, 'urban', false);", 'sql': "SELECT MAX(price), MIN(size_sqft) FROM property WHERE area = 'urban' AND has_inclusive_policy = true;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query based on the provided context and question:\n```sql\nSELECT MAX(price) AS max_property_price, MIN(size_sqft) AS min_property_size\nFROM property\nWHERE has_inclusive_policy = true;\n```\n\nThis query selects the maximum property price and minimum size of properties in neighborhoods with inclusive housing policies. The `MAX` function calculates the highest price, and the `MIN` function calculates the smallest size among the properties that meet the criteria.',
    sql='SQL query:\n```sql\nSELECT MAX(price) AS max_property_price, MIN(size_sqft) AS min_property_size\nFROM property\nWHERE has_inclusive_policy = true;\n```'
), 0), (Example({'sql_prompt': "Add a new safety incident to the safety_incidents table (id: 4, aircraft: 'Space Shuttle Challenger', date: '1986-01-28', description: 'O-ring failure')", 'sql_context': 'CREATE TABLE safety_incidents (id INT, aircraft VARCHAR(255), date DATE, description VARCHAR(255));', 'sql': "INSERT INTO safety_incidents (id, aircraft, date, description) VALUES (4, 'Space Shuttle Challenger', '1986-01-28', 'O-ring failure');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to add a new safety incident to the `safety_incidents` table:\n```sql\nINSERT INTO safety_incidents (id, aircraft, date, description)\nVALUES (4, 'Space Shuttle Challenger', '1986-01-28', 'O-ring failure');\n```\nThis query inserts a new row into the `safety_incidents` table with the provided values. The `id` column is set to 4, the `aircraft` column is set to 'Space Shuttle Challenger', the `date` column is set to '1986-01-28', and the `description` column is set to 'O-ring failure'.",
    sql="SQL query:\n```sql\nINSERT INTO safety_incidents (id, aircraft, date, description)\nVALUES (4, 'Space Shuttle Challenger', '1986-01-28', 'O-ring failure');\n```"
), 1), (Example({'sql_prompt': "What is the average age of players who prefer the 'FPS' genre in the 'player_preferences' and 'player_demographics' tables?", 'sql_context': "CREATE TABLE player_preferences (player_id INT, genre VARCHAR(50)); CREATE TABLE player_demographics (player_id INT, age INT); INSERT INTO player_preferences (player_id, genre) VALUES (1, 'FPS'), (2, 'RPG'), (3, 'FPS'), (4, 'Simulation'); INSERT INTO player_demographics (player_id, age) VALUES (1, 25), (2, 30), (3, 35), (4, 40);", 'sql': "SELECT AVG(age) as avg_fps_age FROM player_demographics JOIN player_preferences ON player_preferences.player_id = player_demographics.player_id WHERE genre = 'FPS';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query that answers the prompt:\n```sql\nSELECT AVG(pd.age)\nFROM player_preferences pp\nJOIN player_demographics pd ON pp.player_id = pd.player_id\nWHERE pp.genre = 'FPS';\n```\n\nStep-by-step reasoning:\n1. We need to find the average age of players who prefer the 'FPS' genre.\n2. We have two tables, `player_preferences` and `player_demographics`, that we need to join together using a common column, which in this case is `player_id`.\n3. We use the `JOIN` clause to combine the rows from both tables based on the matching `player_id",
    sql="SQL query:\n```sql\nSELECT AVG(pd.age) AS average_age\nFROM player_preferences pp\nJOIN player_demographics pd ON pp.player_id = pd.player_id\nWHERE pp.genre = 'FPS';\n```\n\nStep-by-step reasoning:\n\n1. We need to find the average age of players who prefer the 'FPS' genre.\n2. We have two tables, `player_preferences` and `player_demographics`, that we need to join together using a common column, which in this case is `player_id`.\n3. We use the `JOIN` clause to combine the rows from both tables based on the matching `player_id` values."
), 1), (Example({'sql_prompt': 'What is the diversity ratio (percentage of non-male employees) in each department?', 'sql_context': "CREATE TABLE Employees (EmployeeID int, Department varchar(20), Gender varchar(10)); INSERT INTO Employees (EmployeeID, Department, Gender) VALUES (1, 'Marketing', 'Male'); INSERT INTO Employees (EmployeeID, Department, Gender) VALUES (2, 'Marketing', 'Female'); INSERT INTO Employees (EmployeeID, Department, Gender) VALUES (3, 'IT', 'Male'); INSERT INTO Employees (EmployeeID, Department, Gender) VALUES (4, 'IT', 'Non-binary');", 'sql': "SELECT Department, (COUNT(CASE WHEN Gender <> 'Male' THEN 1 END) / COUNT(*)) * 100 AS DiversityRatio FROM Employees GROUP BY Department;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to calculate the diversity ratio (percentage of non-male employees) in each department:\n```sql\nSELECT \n    Department,\n    COUNT(*) AS TotalEmployees,\n    SUM(CASE WHEN Gender <> \'Male\' THEN 1 ELSE 0 END) AS NonMaleEmployees,\n    (SUM(CASE WHEN Gender <> \'Male\' THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS DiversityRatio\nFROM \n    Employees\nGROUP BY \n    Department;\n```\n\nStep by step reasoning:\n1. We use the `SELECT` statement to retrieve data from the "Employees" table.\n2. We select the "Department" column and use aggregate functions to calculate the total number of',
    sql="SQL query:\n```sql\nSELECT Department,\n       COUNT(*) AS TotalEmployees,\n       SUM(CASE WHEN Gender <> 'Male' THEN 1 ELSE 0 END) AS NonMaleEmployees,\n       (SUM(CASE WHEN Gender <> 'Male' THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS DiversityRatio\nFROM Employees\nGROUP BY Department;\n```"
), 0), (Example({'sql_prompt': 'What is the average donation per donor in India?', 'sql_context': "CREATE TABLE donations (donor_id INT, donation_amount DECIMAL(10, 2), donation_date DATE, country TEXT); INSERT INTO donations VALUES (1, 50.00, '2021-05-15', 'India'), (2, 100.00, '2021-06-10', 'India'), (3, 25.00, '2021-04-01', 'India');", 'sql': "SELECT AVG(donation_amount) FROM donations WHERE country = 'India';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to calculate the average donation per donor in India:\n```sql\nSELECT AVG(donation_amount) AS average_donation\nFROM donations\nWHERE country = 'India';\n```\n\nThis query calculates the average value of the `donation_amount` column for rows where the `country` column is equal to 'India'. The result will be a single value representing the average donation amount per donor in India.",
    sql="SQL query:\n```sql\nSELECT AVG(donation_amount) AS average_donation\nFROM donations\nWHERE country = 'India';\n```\n\nThis query calculates the average value of the `donation_amount` column for rows where the `country` column is equal to 'India'. The result will be a single value representing the average donation amount per donor in India."
), 0), (Example({'sql_prompt': 'How many wildlife habitats in South Africa have a total area greater than 50000 hectares?', 'sql_context': 'CREATE TABLE wildlife_habitats (id INT, name TEXT, area REAL, country TEXT);', 'sql': "SELECT COUNT(*) FROM wildlife_habitats WHERE country = 'South Africa' GROUP BY country HAVING SUM(area) > 50000;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query based on the provided context and prompt:\n```sql\nSELECT COUNT(*) FROM wildlife_habitats\nWHERE area > 50000 AND country = 'South Africa';\n```\n\n**Reasoning:**\n1. We want to find out how many wildlife habitats in South Africa have a total area greater than 50,000 hectares.\n2. The `wildlife_habitats` table contains information about wildlife habitats, including their names, areas, and countries.\n3. To count the number of habitats that meet the criteria, we use the `COUNT(*)` function in our `SELECT` statement.\n4. We use a `WHERE` clause to filter the results",
    sql="SQL query:\n```sql\nSELECT COUNT(*) FROM wildlife_habitats\nWHERE area > 50000 AND country = 'South Africa';\n```\n\n**Reasoning:**\n\n1. We want to find out how many wildlife habitats in South Africa have a total area greater than 50,000 hectares.\n2. The `wildlife_habitats` table contains information about wildlife habitats, including their names, areas, and countries.\n3. To count the number of habitats that meet the criteria, we use the `COUNT(*)` function in our `SELECT` statement.\n4. We use a `WHERE` clause to filter the results based on the specified conditions: the area must be"
), 0), (Example({'sql_prompt': 'What is the percentage of faculty members who identify as AAPI in the School of Business?', 'sql_context': "CREATE TABLE faculty_members (id INT, faculty_name VARCHAR(50), faculty_department VARCHAR(50), faculty_race VARCHAR(20)); INSERT INTO faculty_members (id, faculty_name, faculty_department, faculty_race) VALUES (1, 'Taylor Smith', 'Business Administration', 'AAPI'), (2, 'James Johnson', 'Marketing', 'White'), (3, 'Avery Brown', 'Finance', 'Black'), (4, 'Katie Davis', 'Management', 'White'), (5, 'Jamie Wilson', 'Accounting', 'Latinx'), (6, 'Leah Kim', 'Business Analytics', 'AAPI');", 'sql': "SELECT (COUNT(*) FILTER (WHERE faculty_race = 'AAPI')) * 100.0 / COUNT(*) FROM faculty_members WHERE faculty_department LIKE '%Business%';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to find the percentage of faculty members who identify as AAPI in the School of Business:\n```sql\nSELECT COUNT(*) AS aapi_count, COUNT(*) / (SELECT COUNT(*) FROM faculty_members) * 100 AS aapi_percentage\nFROM faculty_members\nWHERE faculty_department = 'School of Business' AND faculty_race = 'AAPI';\n```\nThis query first counts the number of AAPI faculty members in the School of Business and then calculates the percentage by dividing the count of AAPI faculty members by the total number of faculty members in the School of Business and multiplying by 100.",
    sql="SQL query:\n```sql\nSELECT COUNT(*) AS aapi_count,\n       COUNT(*) / (SELECT COUNT(*) FROM faculty_members) * 100 AS aapi_percentage\nFROM faculty_members\nWHERE faculty_department = 'School of Business'\n  AND faculty_race = 'AAPI';\n```"
), 0), (Example({'sql_prompt': 'How many water treatment plants are there in the province of Ontario, Canada?', 'sql_context': "CREATE TABLE water_treatment_plants_ontario (id INT, province VARCHAR); INSERT INTO water_treatment_plants_ontario (id, province) VALUES (1, 'Ontario'), (2, 'Quebec'), (3, 'Ontario'), (4, 'British Columbia');", 'sql': "SELECT COUNT(*) FROM water_treatment_plants_ontario WHERE province = 'Ontario';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to answer the prompt:\n```sql\nSELECT COUNT(*) FROM water_treatment_plants_ontario WHERE province = 'Ontario';\n```\n\n**Reasoning:** To find out how many water treatment plants are located in Ontario, Canada, we can use a simple `SELECT` statement with the `COUNT` function. We filter the results using the `WHERE` clause to only include records where the province is 'Ontario'. This will give us the count of water treatment plants specifically in that province.",
    sql="```sql\nSELECT COUNT(*) FROM water_treatment_plants_ontario WHERE province = 'Ontario';\n```"
), 1), (Example({'sql_prompt': 'Delete vessels that have not been inspected in the last 12 months', 'sql_context': "CREATE TABLE vessel_inspection (vessel_id INT, inspection_date DATE); INSERT INTO vessel_inspection (vessel_id, inspection_date) VALUES (1, '2020-01-01'), (2, '2021-06-15'), (3, '2019-12-20');", 'sql': 'DELETE FROM vessel_inspection WHERE vessel_id IN (SELECT vessel_id FROM vessel_inspection WHERE inspection_date < DATE_SUB(CURDATE(), INTERVAL 12 MONTH));'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to delete vessels that have not been inspected in the last 12 months:\n```sql\nDELETE FROM vessel_inspection\nWHERE inspection_date < DATEADD(MONTH, -12, GETDATE());\n```\n\nThis query uses the `DELETE` statement to remove rows from the `vessel_inspection` table where the `inspection_date` is earlier than 12 months ago from the current date. The `DATEADD` function is used to subtract 12 months from the current date (`GETDATE()`), and the result is compared with the `inspection_date` column to identify vessels that haven't been inspected recently.",
    sql='SQL query:\n```sql\nDELETE FROM vessel_inspection\nWHERE inspection_date < DATEADD(MONTH, -12, GETDATE());\n```'
), 0), (Example({'sql_prompt': "Which materials in the 'inventory' table have a quantity of at least 100 and are not used in the production of any product in the 'products' table?", 'sql_context': "CREATE TABLE inventory(id INT, material VARCHAR(255), quantity INT); CREATE TABLE products(id INT, material VARCHAR(255), quantity INT); INSERT INTO inventory(id, material, quantity) VALUES (1, 'organic cotton', 75), (2, 'conventional cotton', 100), (3, 'organic cotton', 30), (4, 'hemp', 60); INSERT INTO products(id, material, quantity) VALUES (1, 'organic cotton', 150), (2, 'conventional cotton', 200), (3, 'hemp', 100);", 'sql': 'SELECT material FROM inventory i WHERE quantity >= 100 AND NOT EXISTS (SELECT * FROM products p WHERE i.material = p.material);'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query that answers the prompt:\n```sql\nSELECT material\nFROM inventory\nWHERE quantity >= 100\nAND NOT EXISTS (\n    SELECT 1\n    FROM products\n    WHERE products.material = inventory.material\n);\n```\n\nStep-by-step reasoning:\n\n1. The outer `SELECT` statement retrieves the `material` column from the `inventory` table.\n2. The `WHERE` clause filters the rows in the `inventory` table based on two conditions:\n   - `quantity >= 100`: This ensures that we only consider materials with a quantity of at least 100.\n   - `NOT EXISTS (...)`: This checks for the non-existence of a condition',
    sql='SQL query:\n```sql\nSELECT material\nFROM inventory\nWHERE quantity >= 100\n  AND NOT EXISTS (\n    SELECT 1\n    FROM products\n    WHERE products.material = inventory.material\n  );\n```\n\nStep-by-step reasoning:\n\n1. The outer `SELECT` statement retrieves the `material` column from the `inventory` table.\n2. The `WHERE` clause filters the rows in the `inventory` table based on two conditions:\n   - `quantity >= 100`: This ensures that we only consider materials with a quantity of at least 100.\n   - `NOT EXISTS (...)`: This checks for the non-existence of a condition within a subquery. In this'
), 1), (Example({'sql_prompt': "What is the minimum billing amount for cases in the region 'South'?", 'sql_context': 'CREATE TABLE cases (case_id INT, region TEXT, billing_amount INT);', 'sql': "SELECT MIN(billing_amount) FROM cases WHERE region = 'South';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is a possible SQL query to answer the prompt:\n```sql\nSELECT MIN(billing_amount) FROM cases WHERE region = 'South';\n```\n\n**Reasoning:** To find the minimum billing amount for cases in the region 'South', we use the `MIN` aggregate function on the `billing_amount` column. We filter the cases table using a `WHERE` clause to only include rows where the region is equal to 'South'. This will give us the lowest billing amount among cases in that specific region.",
    sql="SQL query:\n```sql\nSELECT MIN(billing_amount) FROM cases WHERE region = 'South';\n```\n\n**Reasoning:** To find the minimum billing amount for cases in the region 'South', we use the `MIN` aggregate function on the `billing_amount` column. We filter the cases table using a `WHERE` clause to only include rows where the region is equal to 'South'. This will give us the lowest billing amount among cases in that specific region."
), 1), (Example({'sql_prompt': 'What is the total number of postpaid and prepaid mobile subscribers in each region?', 'sql_context': "CREATE TABLE mobile_subscribers (subscriber_id INT, subscriber_type VARCHAR(10), region VARCHAR(20)); INSERT INTO mobile_subscribers (subscriber_id, subscriber_type, region) VALUES (1, 'postpaid', 'West'), (2, 'prepaid', 'East'), (3, 'postpaid', 'North'), (4, 'prepaid', 'South'), (5, 'postpaid', 'East');", 'sql': 'SELECT region, COUNT(*) as total_subscribers FROM mobile_subscribers GROUP BY region;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query:\n```sql\nSELECT region,\n       subscriber_type,\n       COUNT(*) AS total_subscribers\nFROM mobile_subscribers\nGROUP BY region, subscriber_type;\n```\n\nThis query groups the data by both "region" and "subscriber_type," and then counts the number of subscribers for each combination of region and type. The result will show the total number of postpaid and prepaid subscribers for each region.',
    sql='SQL query:\n```sql\nSELECT region, subscriber_type, COUNT(*) AS total_subscribers\nFROM mobile_subscribers\nGROUP BY region, subscriber_type;\n```\n\nThis query groups the data by both "region" and "subscriber_type," and then counts the number of subscribers for each combination of region and type. The result will show the total number of postpaid and prepaid subscribers for each region.'
), 0), (Example({'sql_prompt': 'Identify the top 3 mining companies with the highest total production of Praseodymium in 2021 and their respective production amounts.', 'sql_context': "CREATE TABLE Company (Name TEXT, Location TEXT, Established INT); INSERT INTO Company (Name, Location, Established) VALUES ('Delta Minerals', 'Brazil', 2000), ('Epsilon Ore', 'South Africa', 2010), ('Zeta Extraction', 'Canada', 2005), ('Eta Mines', 'Russia', 2008); CREATE TABLE ProductionCompany (Year INT, Company TEXT, Element TEXT, Quantity INT); INSERT INTO ProductionCompany (Year, Company, Element, Quantity) VALUES (2021, 'Delta Minerals', 'Praseodymium', 1000), (2021, 'Epsilon Ore', 'Praseodymium', 1400), (2021, 'Zeta Extraction', 'Praseodymium', 1800), (2021, 'Eta Mines', 'Praseodymium', 1100);", 'sql': "SELECT Company, SUM(Quantity) FROM ProductionCompany WHERE Element = 'Praseodymium' AND Year = 2021 GROUP BY Company ORDER BY SUM(Quantity) DESC FETCH FIRST 3 ROWS ONLY;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to answer the prompt:\n```sql\nSELECT Company, SUM(Quantity) AS TotalProduction\nFROM ProductionCompany\nWHERE Year = 2021 AND Element = \'Praseodymium\'\nORDER BY TotalProduction DESC\nLIMIT 3;\n```\n\nStep-by-step reasoning:\n1. We want to identify the top 3 mining companies with the highest total production of Praseodymium in 2021, so we select data from the `ProductionCompany` table where the year is 2021 and the element is \'Praseodymium\'.\n2. To find the total production for each company, we use the `SUM` function on the "',
    sql='SQL query:\n```sql\nSELECT Company, SUM(Quantity) AS TotalProduction\nFROM ProductionCompany\nWHERE Year = 2021 AND Element = \'Praseodymium\'\nORDER BY TotalProduction DESC\nLIMIT 3;\n```\n\nStep-by-step reasoning:\n\n1. We want to identify the top 3 mining companies with the highest total production of Praseodymium in 2021, so we select data from the `ProductionCompany` table where the year is 2021 and the element is \'Praseodymium\'.\n2. To find the total production for each company, we use the `SUM` function on the "Quantity" column, which represents the'
), 0), (Example({'sql_prompt': 'How many volunteer hours were recorded for each program in Q2 2021?', 'sql_context': "CREATE TABLE VolunteerHours (VolunteerID INT, ProgramID INT, Hours DECIMAL(5,2), HourDate DATE); INSERT INTO VolunteerHours (VolunteerID, ProgramID, Hours, HourDate) VALUES (1, 1, 5, '2021-04-15'), (2, 2, 3, '2021-06-02'), (1, 1, 4, '2021-05-31'), (3, 3, 2, '2021-04-01'); CREATE TABLE Programs (ProgramID INT, ProgramName TEXT); INSERT INTO Programs (ProgramID, ProgramName) VALUES (1, 'Arts & Culture'), (2, 'Health & Wellness'), (3, 'Environment');", 'sql': "SELECT ProgramID, SUM(Hours) as TotalHours FROM VolunteerHours WHERE HourDate BETWEEN '2021-04-01' AND '2021-06-30' GROUP BY ProgramID;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query that answers the prompt:\n```sql\nSELECT ProgramID, SUM(Hours) AS TotalHours\nFROM VolunteerHours\nWHERE HourDate BETWEEN '2021-04-01' AND '2021-06-30'\nGROUP BY ProgramID;\n```\n\nStep by step reasoning:\n1. We need to calculate the total volunteer hours for each program in Q2 2021, which is from April to June.\n2. We use the `SUM` function to add up the hours for each program.\n3. The `WHERE` clause filters the data to only include records with `HourDate` between '2021",
    sql='SQL query'
), 1), (Example({'sql_prompt': 'What is the maximum production capacity of the chemical manufacturing plants located in Canada?', 'sql_context': "CREATE TABLE chemical_plants (id INT, plant_name VARCHAR(100), country VARCHAR(50), production_capacity INT); INSERT INTO chemical_plants (id, plant_name, country, production_capacity) VALUES (1, 'Canada Plant 1', 'Canada', 5000), (2, 'Canada Plant 2', 'Canada', 7000);", 'sql': "SELECT MAX(production_capacity) FROM chemical_plants WHERE country = 'Canada';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query based on the provided context and prompt:\n```sql\nSELECT MAX(production_capacity) AS max_production_capacity\nFROM chemical_plants\nWHERE country = 'Canada';\n```\n\nThis query selects the maximum value of the `production_capacity` column from the `chemical_plants` table where the `country` is 'Canada', giving us the maximum production capacity of chemical manufacturing plants located in Canada.",
    sql="SQL query:\n```sql\nSELECT MAX(production_capacity) AS max_production_capacity\nFROM chemical_plants\nWHERE country = 'Canada';\n```"
), 0), (Example({'sql_prompt': 'Who is the oldest artist from the United States?', 'sql_context': "CREATE TABLE artists (id INT, name VARCHAR(255), age INT, country VARCHAR(255)); INSERT INTO artists (id, name, age, country) VALUES (1, 'Bruce Springsteen', 72, 'United States'), (2, 'Beyoncé', 40, 'United States');", 'sql': "SELECT name, MAX(age) FROM artists WHERE country = 'United States';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query based on the provided context and prompt:\n\n```sql\nSELECT name, age\nFROM artists\nWHERE country = 'United States'\nORDER BY age DESC\nLIMIT 1;\n```\n\n**Reasoning:**\nTo find the oldest artist from the United States, we first select the columns `name` and `age` from the `artists` table. We then use a `WHERE` clause to filter the results to only include artists from the United States. Next, we order the results in descending order based on the `age` column using the `ORDER BY` clause. Finally, we use the `LIMIT 1` clause to retrieve only the top result, which will be the oldest artist",
    sql="SQL query:\n```sql\nSELECT name, age\nFROM artists\nWHERE country = 'United States'\nORDER BY age DESC\nLIMIT 1;\n```\n\n**Reasoning:** To find the oldest artist from the United States, we first select the columns `name` and `age` from the `artists` table. We then use a `WHERE` clause to filter the results to only include artists from the United States. Next, we order the results in descending order based on the `age` column using the `ORDER BY` clause. Finally, we use the `LIMIT 1` clause to retrieve only the top result, which will be the oldest artist."
), 0), (Example({'sql_prompt': 'Find the average height of basketball players in the NBA, categorized by their position.', 'sql_context': 'CREATE TABLE nba_players_height (id INT, player_id INT, height_feet INT, height_inches INT); CREATE TABLE nba_players (id INT, name VARCHAR(100), team VARCHAR(50), position VARCHAR(50));', 'sql': 'SELECT position, AVG(height_feet + height_inches / 12) as avg_height FROM nba_players_height JOIN nba_players ON nba_players_height.player_id = nba_players.id GROUP BY position;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query:\n```sql\nSELECT nba_players.position, AVG(nba_players_height.height_feet * 12 + nba_players_height.height_inches) AS average_height\nFROM nba_players\nJOIN nba_players_height ON nba_players.player_id = nba_players_height.player_id\nGROUP BY nba_players.position;\n```\n\nThis query joins the `nba_players` and `nba_players_height` tables on the `player_id` column and calculates the average height for each position by converting inches to feet and then taking the average. The results are grouped by',
    sql='SQL query'
), 1), (Example({'sql_prompt': 'Identify all suppliers who provide non-GMO ingredients to restaurants with Michelin stars.', 'sql_context': 'CREATE TABLE Suppliers (id INT, name VARCHAR(50), isNonGMO BOOLEAN); CREATE TABLE Restaurants (id INT, name VARCHAR(50), numStars INT); CREATE TABLE Ingredients (supplierId INT, restaurantId INT, isNonGMO BOOLEAN);', 'sql': 'SELECT Suppliers.name FROM Suppliers INNER JOIN Ingredients ON Suppliers.id = Ingredients.supplierId INNER JOIN Restaurants ON Ingredients.restaurantId = Restaurants.id WHERE Restaurants.numStars > 2 AND Ingredients.isNonGMO = TRUE;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query:\n```sql\nSELECT DISTINCT Suppliers.name\nFROM Suppliers\nJOIN Ingredients ON Suppliers.id = Ingredients.supplierId\nJOIN Restaurants ON Ingredients.restaurantId = Restaurants.id\nWHERE Suppliers.isNonGMO = true AND Restaurants.numStars >= 1;\n```\n\n**Reasoning:**\nTo identify suppliers who provide non-GMO ingredients to restaurants with Michelin stars, we need to join the "Suppliers," "Ingredients," and "Restaurants" tables. Here\'s how we construct the query:\n1. We start by selecting distinct supplier names from the "Suppliers" table.\n2. We then perform an inner join between the "Suppliers" table',
    sql='SQL query:\n```sql\nSELECT DISTINCT Suppliers.name\nFROM Suppliers\nJOIN Ingredients ON Suppliers.id = Ingredients.supplierId\nJOIN Restaurants ON Ingredients.restaurantId = Restaurants.id\nWHERE Suppliers.isNonGMO = true AND Restaurants.numStars >= 1;\n```\n\n**Reasoning:**\nTo identify suppliers who provide non-GMO ingredients to restaurants with Michelin stars, we need to join the "Suppliers," "Ingredients," and "Restaurants" tables. Here\'s how we construct the query:\n\n1. We start by selecting distinct supplier names from the "Suppliers" table.\n2. We then perform an inner join between the "Suppliers" table and the "'
), 0), (Example({'sql_prompt': 'How many licenses were issued in each state as of 2022-01-01?', 'sql_context': "CREATE TABLE Licenses (id INT, state TEXT, issued_date DATE); INSERT INTO Licenses (id, state, issued_date) VALUES (1, 'California', '2021-01-01'), (2, 'Oregon', '2021-01-01'), (3, 'Washington', '2021-01-01');", 'sql': "SELECT state, COUNT(*) AS num_licenses FROM Licenses WHERE issued_date <= '2022-01-01' GROUP BY state;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query based on the provided context and prompt:\n```sql\nSELECT state, COUNT(*) AS license_count\nFROM Licenses\nWHERE issued_date <= '2022-01-01'\nGROUP BY state;\n```\n\nThis query selects the state and counts the number of licenses issued in each state as of January 1st, 2022. The `WHERE` clause filters the records to only include those with an issue date on or before the specified date, and the `GROUP BY` clause groups the results by state.",
    sql="SQL query:\n```sql\nSELECT state, COUNT(*) AS license_count\nFROM Licenses\nWHERE issued_date <= '2022-01-01'\nGROUP BY state;\n```"
), 0), (Example({'sql_prompt': 'What is the number of smart city initiatives implemented in each country?', 'sql_context': "CREATE TABLE smart_city_initiatives (initiative_id INT, country VARCHAR(50), city VARCHAR(100), status VARCHAR(50)); INSERT INTO smart_city_initiatives (initiative_id, country, city, status) VALUES (1, 'France', 'Paris', 'Implemented');", 'sql': "SELECT country, COUNT(*) as implemented_initiatives FROM smart_city_initiatives WHERE status = 'Implemented' GROUP BY country;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query based on the provided context and prompt:\n```sql\nSELECT country, COUNT(*) AS initiative_count\nFROM smart_city_initiatives\nGROUP BY country;\n```\n\n**Reasoning:** To find the number of smart city initiatives implemented in each country, we can use the `COUNT` function along with the `GROUP BY` clause. This will group the data by the "country" column and count the number of initiatives for each country. The result will be a list of countries and their corresponding initiative counts.',
    sql='SQL query:\n```sql\nSELECT country, COUNT(*) AS initiative_count\nFROM smart_city_initiatives\nGROUP BY country;\n```\n\n**Reasoning:** To find the number of smart city initiatives implemented in each country, we can use the `COUNT` function along with the `GROUP BY` clause. This will group the data by the "country" column and count the number of initiatives for each country. The result will be a list of countries and their corresponding initiative counts.'
), 0), (Example({'sql_prompt': "How many tickets were sold for each team's away games in Q2 of 2022?", 'sql_context': "CREATE TABLE teams (id INT, name VARCHAR(255)); INSERT INTO teams (id, name) VALUES (1, 'TeamA'), (2, 'TeamB'), (3, 'TeamC'); CREATE TABLE games (id INT, home_team_id INT, away_team_id INT, home_team_score INT, away_team_score INT, price DECIMAL(5,2), game_date DATE); CREATE VIEW away_games AS SELECT id, away_team_id, price, game_date FROM games;", 'sql': "SELECT t.name, COUNT(*) as tickets_sold FROM away_games h JOIN teams t ON h.away_team_id = t.id WHERE h.game_date BETWEEN '2022-04-01' AND '2022-06-30' GROUP BY t.name;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to answer the prompt:\n```sql\nSELECT a.away_team_id, COUNT(*) AS ticket_count\nFROM away_games a\nJOIN teams t ON a.away_team_id = t.id\nWHERE EXTRACT(MONTH FROM a.game_date) BETWEEN 4 AND 6\nGROUP BY a.away_team_id;\n```\n\nStep by step reasoning:\n\n1. We start by selecting the `away_team_id` from the `away_games` view, which contains information about away games.\n2. We then join this view with the `teams` table using the `away_team_id` as the key to associate',
    sql='SQL query'
), 1), (Example({'sql_prompt': 'Show the names of companies that produced any Rare Earth elements in both 2015 and 2020.', 'sql_context': 'CREATE TABLE Producers (ProducerID INT PRIMARY KEY, Name TEXT, ProductionYear INT, RareEarth TEXT, Quantity INT);', 'sql': 'SELECT DISTINCT Name FROM Producers p1 JOIN Producers p2 ON p1.Name = p2.Name WHERE p1.ProductionYear = 2015 AND p2.ProductionYear = 2020;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query based on the provided context and prompt:\n```sql\nSELECT DISTINCT P.Name\nFROM Producers P\nWHERE P.ProductionYear IN (2015, 2020) AND P.RareEarth = 'Yes';\n```\n\n**Reasoning:** \n\nTo find companies that produced Rare Earth elements in both 2015 and 2020, we need to identify producers with production years covering both of these years. The `DISTINCT` keyword ensures that only unique company names are selected, preventing duplicates. \n\nThe query filters the `Producers` table to include only those rows where the `ProductionYear` is either 2015 or",
    sql="SQL query:\n```sql\nSELECT DISTINCT P.Name\nFROM Producers P\nWHERE P.ProductionYear IN (2015, 2020) AND P.RareEarth = 'Yes';\n```\n\n**Reasoning:** To find companies that produced Rare Earth elements in both 2015 and 2020, we need to identify producers with production years covering both of these years. The `DISTINCT` keyword ensures that only unique company names are selected, preventing duplicates. The query filters the `Producers` table to include only those rows where the `ProductionYear` is either 2015 or 2020 and the `RareEarth` column has a value"
), 0), (Example({'sql_prompt': 'What is the total CO2 emissions of silk production in China?', 'sql_context': 'CREATE TABLE SilkProduction (id INT, country VARCHAR, co2_emissions INT);', 'sql': "SELECT SUM(co2_emissions) FROM SilkProduction WHERE country = 'China';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is a possible SQL query to answer the prompt:\n\n```sql\nSELECT SUM(co2_emissions) AS total_co2_emissions\nFROM SilkProduction\nWHERE country = 'China';\n```\n\n**Reasoning:** To find the total CO2 emissions of silk production in China, we need to sum up the `co2_emissions` values from the `SilkProduction` table where the `country` is 'China'. This can be achieved using the `SUM` aggregate function along with a `WHERE` clause to filter the data by country. The result will give us the total CO2 emissions associated with silk production in China.",
    sql="SQL query:\n```sql\nSELECT SUM(co2_emissions) AS total_co2_emissions\nFROM SilkProduction\nWHERE country = 'China';\n```\n\n**Reasoning:** To find the total CO2 emissions from silk production in China, we need to sum up the `co2_emissions` values from the `SilkProduction` table where the `country` is 'China'. This can be achieved using the `SUM` aggregate function along with a `WHERE` clause to filter the data by country. The result will give us the total CO2 emissions associated with silk production in China."
), 0), (Example({'sql_prompt': 'What is the total number of AI models developed in North America with an explainability score below 70?', 'sql_context': "CREATE TABLE na_models (model_name TEXT, region TEXT, explainability_score INTEGER); INSERT INTO na_models (model_name, region, explainability_score) VALUES ('Model1', 'North America', 75), ('Model2', 'North America', 65), ('Model3', 'North America', 80);", 'sql': "SELECT SUM(incident_count) FROM na_models WHERE region = 'North America' AND explainability_score < 70;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to answer the prompt:\n```sql\nSELECT COUNT(*) FROM na_models WHERE region = 'North America' AND explainability_score < 70;\n```\n\nThis query counts the number of rows (AI models) in the `na_models` table where the `region` is 'North America' and the `explainability_score` is less than 70. The result will give you the total number of AI models that meet these criteria.",
    sql="SQL query:\n```sql\nSELECT COUNT(*) FROM na_models WHERE region = 'North America' AND explainability_score < 70;\n```\n\nThis query counts the number of rows (AI models) in the `na_models` table where the `region` is 'North America' and the `explainability_score` is less than 70. The result will give you the total number of AI models that meet these criteria."
), 0), (Example({'sql_prompt': 'Which mobile and broadband subscribers have not used their services in the last 30 days?', 'sql_context': "CREATE TABLE mobile_usage (customer_id INT, last_usage DATE); CREATE TABLE broadband_usage (customer_id INT, last_usage DATE); INSERT INTO mobile_usage (customer_id, last_usage) VALUES (1, '2022-01-01'), (2, '2022-02-01'); INSERT INTO broadband_usage (customer_id, last_usage) VALUES (1, '2022-01-15'), (3, '2022-02-10');", 'sql': 'SELECT customer_id FROM mobile_usage WHERE last_usage < NOW() - INTERVAL 30 DAY UNION SELECT customer_id FROM broadband_usage WHERE last_usage < NOW() - INTERVAL 30 DAY;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to find mobile and broadband subscribers who have not used their services in the last 30 days:\n```sql\nSELECT mu.customer_id, bu.customer_id\nFROM mobile_usage mu\nLEFT JOIN broadband_usage bu ON mu.customer_id = bu.customer_id\nWHERE mu.last_usage < DATEADD(DAY, -30, GETDATE()) OR bu.last_usage < DATEADD(DAY, -30, GETDATE());\n```\n\nStep by step reasoning:\n\n1. We start by selecting the customer IDs from both the `mobile_usage` and `broadband_usage` tables.\n2. We use a `LEFT JOIN',
    sql='SQL query:\n```sql\nSELECT mu.customer_id, bu.customer_id\nFROM mobile_usage mu\nLEFT JOIN broadband_usage bu ON mu.customer_id = bu.customer_id\nWHERE mu.last_usage < DATEADD(DAY, -30, GETDATE()) OR bu.last_usage < DATEADD(DAY, -30, GETDATE());\n```'
), 0), (Example({'sql_prompt': 'What is the total number of grants given per city?', 'sql_context': 'CREATE TABLE Nonprofits (NonprofitID INT, Name VARCHAR(50), City VARCHAR(50), State VARCHAR(2), Zip VARCHAR(10), MissionStatement TEXT); CREATE TABLE Grants (GrantID INT, DonorID INT, NonprofitID INT, GrantAmount DECIMAL(10,2), Date DATE); CREATE TABLE Donors (DonorID INT, Name VARCHAR(50), City VARCHAR(50), State VARCHAR(2), Zip VARCHAR(10), DonationAmount DECIMAL(10,2));', 'sql': 'SELECT City, COUNT(*) FROM Grants G INNER JOIN Nonprofits N ON G.NonprofitID = N.NonprofitID GROUP BY City;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query:\n```sql\nSELECT City, COUNT(*) AS TotalGrants\nFROM Nonprofits\nJOIN Grants ON Nonprofits.NonprofitID = Grants.NonprofitID\nGROUP BY City;\n```\n\nThis query joins the `Nonprofits` and `Grants` tables on the `NonprofitID` column and groups the results by city, counting the number of grants given to each city.',
    sql='SQL query:\n```sql\nSELECT City, COUNT(*) AS TotalGrants\nFROM Nonprofits\nJOIN Grants ON Nonprofits.NonprofitID = Grants.NonprofitID\nGROUP BY City;\n```'
), 1), (Example({'sql_prompt': 'Show the average soil moisture level for each field in the past week', 'sql_context': 'CREATE TABLE field (id INT, name VARCHAR(255), farm_id INT);CREATE TABLE soil_moisture (id INT, field_id INT, measurement DATE, level INT);', 'sql': 'SELECT field_id, AVG(level) FROM soil_moisture WHERE measurement >= DATEADD(day, -7, GETDATE()) GROUP BY field_id;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query:\n```sql\nSELECT field.name, AVG(soil_moisture.level) AS avg_moisture\nFROM field\nJOIN soil_moisture ON field.id = soil_moisture.field_id\nWHERE soil_moisture.measurement BETWEEN DATEADD(day, -7, CURRENT_DATE) AND CURRENT_DATE\nGROUP BY field.name;\n```\n\nThis query joins the `field` and `soil_moisture` tables on the `id` and `field_id` columns, respectively. It then filters the measurements to only include those from the past week using the `WHERE` clause and calculates the average soil moisture level',
    sql='SQL query:\n```sql\nSELECT field.name, AVG(soil_moisture.level) AS avg_moisture\nFROM field\nJOIN soil_moisture ON field.id = soil_moisture.field_id\nWHERE soil_moisture.measurement BETWEEN DATEADD(day, -7, CURRENT_DATE) AND CURRENT_DATE\nGROUP BY field.name;\n```'
), 0), (Example({'sql_prompt': 'What is the total number of satellites deployed by SpaceComm in the Middle East?', 'sql_context': 'CREATE TABLE SatelliteDeployment (satellite_id INT, company VARCHAR(255), region VARCHAR(255));', 'sql': "SELECT COUNT(*) FROM SatelliteDeployment WHERE company = 'SpaceComm' AND region = 'Middle East';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is a possible SQL query to answer the prompt:\n\n```sql\nSELECT COUNT(*) AS total_satellites\nFROM SatelliteDeployment\nWHERE company = \'SpaceComm\' AND region = \'Middle East\';\n```\n\n**Reasoning:** To find the total number of satellites deployed by SpaceComm in the Middle East, we need to count the rows in the `SatelliteDeployment` table where both the company and region conditions are met. The `COUNT(*)` function counts the number of rows that satisfy the specified condition, and we use the `AS` keyword to alias the result column as "total_satellites" for clarity.',
    sql='SQL query:\n```sql\nSELECT COUNT(*) AS total_satellites\nFROM SatelliteDeployment\nWHERE company = \'SpaceComm\' AND region = \'Middle East\';\n```\n\n**Reasoning:** To find the total number of satellites deployed by SpaceComm in the Middle East, we need to count the rows in the `SatelliteDeployment` table where both the company and region conditions are met. The `COUNT(*)` function counts the number of rows that satisfy the specified condition, and we use the `AS` keyword to alias the result column as "total_satellites" for clarity.'
), 0), (Example({'sql_prompt': 'What is the total number of tickets sold for performances with a rating of 5?', 'sql_context': "CREATE TABLE performance (id INT PRIMARY KEY, name VARCHAR(255), date DATE, artist_id INT, rating INT); INSERT INTO performance (id, name, date, artist_id, rating) VALUES (1, 'Dance Recital', '2022-03-01', 1, 5);", 'sql': 'SELECT SUM(t.quantity) as total_tickets_sold FROM performance p INNER JOIN ticket t ON p.id = t.performance_id WHERE p.rating = 5;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query based on the provided context and prompt:\n```sql\nSELECT COUNT(*) AS total_tickets_sold\nFROM performance\nWHERE rating = 5;\n```\n\n**Reasoning:**\nTo find the total number of tickets sold for performances with a rating of 5, we need to count the rows in the "performance" table where the "rating" column is equal to 5. This can be achieved using the `COUNT` function along with a `WHERE` clause to filter the rows based on the rating. The result will give us the total number of performances with a rating of 5, which implies the total number of tickets sold for those performances.',
    sql='SQL query:\n```sql\nSELECT COUNT(*) AS total_tickets_sold\nFROM performance\nWHERE rating = 5;\n```\n\n**Reasoning:**\nTo find the total number of tickets sold for performances with a rating of 5, we need to count the rows in the "performance" table where the "rating" column is equal to 5. This can be achieved using the `COUNT` function along with a `WHERE` clause to filter the rows based on the rating. The result will give us the total number of performances with a rating of 5, which implies the total number of tickets sold for those performances.'
), 0), (Example({'sql_prompt': 'What is the average emergency response time by region for fire incidents?', 'sql_context': 'CREATE TABLE Regions (RegionID INT, RegionName VARCHAR(255)); CREATE TABLE Incidents (IncidentID INT, IncidentType VARCHAR(255), RegionID INT, ResponseTime INT);', 'sql': "SELECT AVG(ResponseTime) as AvgResponseTime, RegionName FROM Incidents i JOIN Regions r ON i.RegionID = r.RegionID WHERE IncidentType = 'Fire' GROUP BY RegionName;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is a possible SQL query to answer the prompt:\n```sql\nSELECT Regions.RegionName, AVG(Incidents.ResponseTime) AS AvgResponseTime\nFROM Regions\nJOIN Incidents ON Regions.RegionID = Incidents.RegionID\nWHERE Incidents.IncidentType = 'Fire'\nGROUP BY Regions.RegionName;\n```\n\n**Reasoning:**\nTo find the average emergency response time by region for fire incidents, we need to join the `Regions` and `Incidents` tables on the `RegionID` column. We then filter the incidents to only include those of type 'Fire' using the `IncidentType` column. Finally, we group the results by region name and calculate the average response time for each",
    sql="SQL query:\n```sql\nSELECT Regions.RegionName, AVG(Incidents.ResponseTime) AS AvgResponseTime\nFROM Regions\nJOIN Incidents ON Regions.RegionID = Incidents.RegionID\nWHERE Incidents.IncidentType = 'Fire'\nGROUP BY Regions.RegionName;\n```\n\n**Reasoning:** To find the average emergency response time by region for fire incidents, we need to join the `Regions` and `Incidents` tables on the `RegionID` column. We then filter the incidents to only include those of type 'Fire' using the `IncidentType` column. Finally, we group the results by region name and calculate the average response time for each region."
), 1), (Example({'sql_prompt': "What is the average revenue of virtual tours in 'Spain'?", 'sql_context': "CREATE TABLE virtual_tours (id INT, name TEXT, country TEXT, revenue FLOAT); INSERT INTO virtual_tours (id, name, country, revenue) VALUES (1, 'Virtual Barcelona Tour', 'Spain', 2000);", 'sql': "SELECT AVG(revenue) FROM virtual_tours WHERE country = 'Spain';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to answer the prompt:\n```sql\nSELECT AVG(revenue) FROM virtual_tours WHERE country = 'Spain';\n```\n\n**Reasoning:** To find the average revenue of virtual tours in 'Spain', we need to select the average value of the 'revenue' column from the 'virtual_tours' table where the 'country' is equal to 'Spain'. This can be achieved using the `AVG()` aggregate function along with a `WHERE` clause to filter the data by country.",
    sql="SQL query:\n```sql\nSELECT AVG(revenue) AS average_revenue\nFROM virtual_tours\nWHERE country = 'Spain';\n```\n\n**Reasoning:** To find the average revenue of virtual tours in 'Spain', we use the `AVG()` aggregate function to calculate the average value of the 'revenue' column from the 'virtual_tours' table. The `WHERE` clause is used to filter the data and select only the rows where the 'country' is equal to 'Spain'. This ensures that we are calculating the average revenue specifically for virtual tours in that country."
), 0), (Example({'sql_prompt': 'What is the total number of students and staff with accommodations in the "disability_services" schema, excluding the "accessibility_parking" type?', 'sql_context': 'CREATE SCHEMA disability_services; CREATE TABLE staff (id INT, name VARCHAR(50), accommodation VARCHAR(50)); CREATE TABLE students (id INT, name VARCHAR(50), accommodation VARCHAR(50));', 'sql': "SELECT COUNT(*) FROM disability_services.staff WHERE accommodation != 'accessibility_parking' UNION SELECT COUNT(*) FROM disability_services.students WHERE accommodation != 'accessibility_parking';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query that addresses the prompt:\n```sql\nSELECT (SELECT COUNT(*) FROM staff WHERE accommodation <> \'accessibility_parking\') + (SELECT COUNT(*) FROM students WHERE accommodation <> \'accessibility_parking\') AS total_accommodations;\n```\n\n**Reasoning:** \nTo find the total number of students and staff with accommodations excluding "accessibility_parking," we need to sum up the counts of staff and students who do not have "accessibility_parking" as their accommodation type. We use nested SELECT statements to count the number of staff and students separately, and then add these counts together to get the total. The `<>` operator is used to exclude the \'accessibility_parking\' type from the count.',
    sql='SQL query:\n```sql\nSELECT (SELECT COUNT(*) FROM staff WHERE accommodation <> \'accessibility_parking\') + (SELECT COUNT(*) FROM students WHERE accommodation <> \'accessibility_parking\') AS total_accommodations;\n```\n\n**Reasoning:** To find the total number of students and staff with accommodations excluding "accessibility_parking," we need to sum up the counts of staff and students who do not have "accessibility_parking" as their accommodation type. We use nested SELECT statements to count the number of staff and students separately, and then add these counts together to get the total. The `<>` operator is used to exclude the \'accessibility_parking\' type from the count.'
), 0), (Example({'sql_prompt': 'What is the number of electric trams in service in Istanbul in 2021?', 'sql_context': "CREATE TABLE electric_trams (tram_id INT, service_date DATE, in_service INT); INSERT INTO electric_trams (tram_id, service_date, in_service) VALUES (1, '2021-01-01', 1), (2, '2021-01-02', 1), (3, '2021-01-03', 0);", 'sql': "SELECT COUNT(*) FROM electric_trams WHERE in_service = 1 AND service_date BETWEEN '2021-01-01' AND '2021-12-31';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query based on the provided context and prompt:\n```sql\nSELECT COUNT(*) AS electric_trams_in_service\nFROM electric_trams\nWHERE service_date BETWEEN '2021-01-01' AND '2021-12-31' AND in_service = 1;\n```\n\nThis query counts the number of records where the `service_date` falls within the year 2021 and the `in_service` column is equal to 1, indicating that the electric tram was in service. The result will give you the number of electric trams in service in Istanbul during the specified year.",
    sql="SQL query:\n```sql\nSELECT COUNT(*) AS electric_trams_in_service\nFROM electric_trams\nWHERE service_date BETWEEN '2021-01-01' AND '2021-12-31'\nAND in_service = 1;\n```"
), 0), (Example({'sql_prompt': "What is the total number of trips taken on accessible vehicles in the 'East' region for the current year?", 'sql_context': "CREATE TABLE Vehicles (VehicleID int, VehicleType varchar(255), Region varchar(255)); INSERT INTO Vehicles (VehicleID, VehicleType, Region) VALUES (1, 'Bus', 'East'), (2, 'Tram', 'West'), (3, 'Wheelchair Bus', 'South'), (4, 'Accessible Tram', 'East'); CREATE TABLE Trips (TripID int, VehicleID int, TripDateTime datetime);", 'sql': "SELECT COUNT(*) FROM Vehicles JOIN Trips ON Vehicles.VehicleID = Trips.VehicleID WHERE Vehicles.Region = 'East' AND Vehicles.VehicleType IN ('Wheelchair Bus', 'Accessible Tram') AND YEAR(Trips.TripDateTime) = YEAR(GETDATE());"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query based on the provided context and reasoning:\n```sql\nSELECT COUNT(DISTINCT v.VehicleID)\nFROM Vehicles v\nJOIN Trips t ON v.VehicleID = t.VehicleID\nWHERE v.Region = 'East' AND EXTRACT(YEAR FROM t.TripDateTime) = EXTRACT(YEAR FROM CURRENT_DATE);\n```\n\nThis query calculates the total number of unique trips taken on accessible vehicles in the 'East' region for the current year. It joins the `Vehicles` and `Trips` tables on the `VehicleID` column, filters the data for the 'East' region and the current year, and then counts the distinct vehicle IDs to get the total number",
    sql="SQL query:\n```sql\nSELECT COUNT(DISTINCT v.VehicleID)\nFROM Vehicles v\nJOIN Trips t ON v.VehicleID = t.VehicleID\nWHERE v.Region = 'East' AND EXTRACT(YEAR FROM t.TripDateTime) = EXTRACT(YEAR FROM CURRENT_DATE);\n```"
), 0), (Example({'sql_prompt': 'Identify the suppliers with the highest and lowest sustainability ratings in the supplier_ratings table.', 'sql_context': 'CREATE TABLE supplier_ratings (supplier_id INT, sustainability_rating INT); INSERT INTO supplier_ratings (supplier_id, sustainability_rating) VALUES (100, 95), (101, 60), (102, 90);', 'sql': 'SELECT supplier_id, sustainability_rating FROM (SELECT supplier_id, sustainability_rating, RANK() OVER (ORDER BY sustainability_rating DESC) AS rank, RANK() OVER (ORDER BY sustainability_rating ASC) AS reverse_rank FROM supplier_ratings) WHERE rank = 1 OR reverse_rank = 1;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to identify the suppliers with the highest and lowest sustainability ratings:\n```sql\nSELECT supplier_id, sustainability_rating\nFROM supplier_ratings\nORDER BY sustainability_rating DESC;\n```\n\n**Reasoning:** To find the suppliers with the highest and lowest sustainability ratings, we can use the `ORDER BY` clause in SQL. By ordering the results by the "sustainability_rating" column in descending order, we can easily identify the top and bottom ratings. This query will return the supplier IDs along with their corresponding sustainability ratings, allowing us to see who has the highest and lowest ratings.',
    sql='SQL query:\n```sql\nSELECT supplier_id, sustainability_rating\nFROM supplier_ratings\nORDER BY sustainability_rating DESC;\n```\n\n**Reasoning:**\nTo find the suppliers with the highest and lowest sustainability ratings, we can use the `ORDER BY` clause in SQL. By ordering the results by the "sustainability_rating" column in descending order, we can easily identify the top and bottom ratings. This query will return the supplier IDs along with their corresponding sustainability ratings, allowing us to see who has the highest and lowest ratings.'
), 0), (Example({'sql_prompt': 'What is the total amount of socially responsible loans issued to women in 2021?', 'sql_context': 'CREATE TABLE socially_responsible_lending (id INT PRIMARY KEY, loan_amount DECIMAL(10, 2), borrower_gender TEXT, lending_date DATE);', 'sql': "SELECT SUM(loan_amount) FROM socially_responsible_lending WHERE borrower_gender = 'Female' AND lending_date BETWEEN '2021-01-01' AND '2021-12-31';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to answer the prompt:\n```sql\nSELECT SUM(loan_amount) AS total_loans\nFROM socially_responsible_lending\nWHERE borrower_gender = 'woman' AND EXTRACT(YEAR FROM lending_date) = 2021;\n```\n\n**Reasoning:**\nTo find the total amount of socially responsible loans issued to women in 2021, we need to sum up the `loan_amount` for all rows where the `borrower_gender` is 'woman' and the `lending_date` falls within the year 2021. We use the `EXTRACT` function to get the year from the `lending_date",
    sql="SQL query:\n```sql\nSELECT SUM(loan_amount) AS total_loans\nFROM socially_responsible_lending\nWHERE borrower_gender = 'woman'\nAND EXTRACT(YEAR FROM lending_date) = 2021;\n```\n\n**Reasoning:** To find the total amount of socially responsible loans issued to women in 2021, we need to sum up the `loan_amount` for all rows where the `borrower_gender` is 'woman' and the `lending_date` falls within the year 2021. We use the `EXTRACT` function to get the year from the `lending_date`."
), 0), (Example({'sql_prompt': 'What is the maximum energy efficiency rating of hydroelectric dams in Canada?', 'sql_context': "CREATE TABLE hydro_dams (id INT, name TEXT, country TEXT, energy_efficiency_rating FLOAT); INSERT INTO hydro_dams (id, name, country, energy_efficiency_rating) VALUES (1, 'Robert-Bourassa', 'Canada', 0.94), (2, 'Churchill Falls', 'Canada', 0.92);", 'sql': "SELECT MAX(energy_efficiency_rating) FROM hydro_dams WHERE country = 'Canada';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query based on the provided context and prompt:\n```sql\nSELECT MAX(energy_efficiency_rating) AS max_energy_efficiency\nFROM hydro_dams\nWHERE country = 'Canada';\n```\n\nThis query selects the maximum value of the `energy_efficiency_rating` column from the `hydro_dams` table where the `country` is 'Canada', giving us the highest energy efficiency rating achieved by hydroelectric dams in Canada.",
    sql="SQL query:\n```sql\nSELECT MAX(energy_efficiency_rating) AS max_energy_efficiency\nFROM hydro_dams\nWHERE country = 'Canada';\n```"
), 0), (Example({'sql_prompt': 'How many streams did each song by an artist get in a given month?', 'sql_context': "CREATE TABLE Songs (id INT, artist_id INT, title VARCHAR(50)); CREATE TABLE Streams (id INT, song_id INT, date DATE, streams INT); INSERT INTO Songs (id, artist_id, title) VALUES (1, 1, 'Shake it Off'), (2, 1, 'Blank Space'), (3, 2, 'Humble'), (4, 2, 'DNA'); INSERT INTO Streams (id, song_id, date, streams) VALUES (1, 1, '2022-01-01', 1000), (2, 1, '2022-01-02', 1500), (3, 2, '2022-01-01', 2000), (4, 2, '2022-01-02', 2500), (5, 3, '2022-01-01', 3000), (6, 3, '2022-01-02', 3500), (7, 4, '2022-01-01', 4000), (8, 4, '2022-01-02', 4500);", 'sql': "SELECT s.title, SUM(s.streams) as total_streams FROM Songs s JOIN Streams st ON s.id = st.song_id WHERE st.date BETWEEN '2022-01-01' AND '2022-01-31' GROUP BY s.title;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query that answers the prompt:\n```sql\nSELECT s.artist_id, COUNT(DISTINCT st.song_id) AS stream_count\nFROM Songs s\nJOIN Streams st ON s.id = st.song_id\nWHERE st.date BETWEEN \'2022-01-01\' AND \'2022-01-31\'\nGROUP BY s.artist_id;\n```\n\nStep by step reasoning:\n1. We start by selecting data from the "Songs" table and joining it with the "Streams" table on the "song_id" column. This allows us to link each song to its corresponding stream data.\n2',
    sql='SQL query:\n```sql\nSELECT s.artist_id, COUNT(DISTINCT st.song_id) AS stream_count\nFROM Songs s\nJOIN Streams st ON s.id = st.song_id\nWHERE st.date BETWEEN \'2022-01-01\' AND \'2022-01-31\'\nGROUP BY s.artist_id;\n```\n\nStep-by-step reasoning:\n\n1. We start by selecting data from the "Songs" table and joining it with the "Streams" table on the "song_id" column. This allows us to link each song to its corresponding stream data.\n2. Next, we use'
), 0), (Example({'sql_prompt': 'What is the total number of security incidents for each department in the organization?', 'sql_context': 'CREATE TABLE incident (incident_id INT, incident_date DATE, incident_description TEXT, department_id INT);CREATE TABLE department (department_id INT, department_name VARCHAR(255));', 'sql': 'SELECT d.department_name, COUNT(i.incident_id) AS incident_count FROM incident i JOIN department d ON i.department_id = d.department_id GROUP BY d.department_name;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to answer the prompt:\n```sql\nSELECT department_name, COUNT(incident_id) AS total_incidents\nFROM incident\nJOIN department ON incident.department_id = department.department_id\nGROUP BY department_name;\n```\n\n**Reasoning:**\nTo find the total number of security incidents for each department in the organization, we need to join the `incident` table with the `department` table on the `department_id` column. This will allow us to associate each incident with its respective department name. Then, we can use the `COUNT` function to count the number of incidents for each department and group the results by `department_name`. The result will be',
    sql='```sql\nSELECT department_name, COUNT(incident_id) AS total_incidents\nFROM incident\nJOIN department ON incident.department_id = department.department_id\nGROUP BY department_name;\n```'
), 1), (Example({'sql_prompt': 'What is the market spend on sustainable tourism initiatives in Japan between 2017 and 2019?', 'sql_context': "CREATE TABLE sustainable_tourism_initiatives(initiative_id INT, name TEXT, country TEXT, start_year INT, end_year INT, market_spend INT);INSERT INTO sustainable_tourism_initiatives (initiative_id, name, country, start_year, end_year, market_spend) VALUES (1, 'Eco-friendly hotels in Tokyo', 'Japan', 2017, 2019, 5000000), (2, 'Sustainable transport in Kyoto', 'Japan', 2018, 2019, 7000000), (3, 'Carbon offsetting in Osaka', 'Japan', 2017, 2018, 3000000);", 'sql': "SELECT SUM(market_spend) FROM sustainable_tourism_initiatives WHERE country = 'Japan' AND start_year BETWEEN 2017 AND 2019;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To answer the question, we need to find the sum of market spend for sustainable tourism initiatives in Japan that started between 2017 and 2019. We can use the following SQL query:\n```sql\nSELECT SUM(market_spend) AS total_market_spend\nFROM sustainable_tourism_initiatives\nWHERE country = 'Japan' AND (start_year BETWEEN 2017 AND 2019 OR end_year BETWEEN 2017 AND 2019);\n```\nThis query will sum up the `market_spend` values for initiatives where the country is Japan and either the start year or end year falls between 2017 and",
    sql="SQL query:\n```sql\nSELECT SUM(market_spend) AS total_market_spend\nFROM sustainable_tourism_initiatives\nWHERE country = 'Japan'\n  AND (start_year BETWEEN 2017 AND 2019 OR end_year BETWEEN 2017 AND 2019);\n```"
), 0), (Example({'sql_prompt': 'What is the percentage of hotels in Europe that offer virtual tours?', 'sql_context': "CREATE TABLE hotel_features (hotel_id INT, hotel_name TEXT, virtual_tour INT, country TEXT); INSERT INTO hotel_features (hotel_id, hotel_name, virtual_tour, country) VALUES (1, 'Hotel A', 1, 'France'), (2, 'Hotel B', 0, 'Germany'), (3, 'Hotel C', 1, 'Italy'), (4, 'Hotel D', 0, 'France'), (5, 'Hotel E', 1, 'Spain');", 'sql': "SELECT (COUNT(*) FILTER (WHERE virtual_tour = 1) * 100.0 / COUNT(*)) AS percentage FROM hotel_features WHERE country = 'Europe';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to find the percentage of hotels in Europe that offer virtual tours:\n```sql\nSELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM hotel_features WHERE country IN ('France', 'Germany', 'Italy', 'Spain')) AS percentage\nFROM hotel_features\nWHERE virtual_tour = 1 AND country IN ('France', 'Germany', 'Italy', 'Spain');\n```\nThis query calculates the ratio of hotels with virtual tours to the total number of hotels in Europe, giving you the percentage you're looking for.",
    sql="SQL query:\n```sql\nSELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM hotel_features WHERE country IN ('France', 'Germany', 'Italy', 'Spain')) AS percentage\nFROM hotel_features\nWHERE virtual_tour = 1 AND country IN ('France', 'Germany', 'Italy', 'Spain');\n```"
), 0), (Example({'sql_prompt': 'What are the ethical AI principles for the technology projects in India?', 'sql_context': "CREATE TABLE EthicalAI (principle_id INT, principle_name VARCHAR(50), project_location VARCHAR(20)); INSERT INTO EthicalAI (principle_id, principle_name, project_location) VALUES (1, 'Fairness', 'India'), (2, 'Accountability', 'India'), (3, 'Transparency', 'India'), (4, 'Data Minimization', 'India'), (5, 'Explainability', 'India'), (6, 'Human Oversight', 'India');", 'sql': "SELECT principle_name FROM EthicalAI WHERE project_location = 'India';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To answer the question "What are the ethical AI principles for the technology projects in India?", we can use the following SQL query:\n```sql\nSELECT principle_name\nFROM EthicalAI\nWHERE project_location = \'India\';\n```\nThis query selects all the principle names from the "EthicalAI" table where the project location is \'India\'. This will give us a list of ethical AI principles that are applicable to technology projects in India.',
    sql="SQL query:\n```sql\nSELECT principle_name FROM EthicalAI WHERE project_location = 'India';\n```"
), 1), (Example({'sql_prompt': 'What is the total mass of all spacecraft manufactured by SpaceX?', 'sql_context': "CREATE TABLE Spacecraft (SpacecraftID INT, SpacecraftName VARCHAR(50), Manufacturer VARCHAR(50), Mass FLOAT); INSERT INTO Spacecraft (SpacecraftID, SpacecraftName, Manufacturer, Mass) VALUES (1, 'SpaceX Dragon', 'SpaceX', 10000), (2, 'Orion', 'Lockheed Martin', 20000), (3, 'Starliner', 'Boeing', 15000);", 'sql': "SELECT SUM(Mass) FROM Spacecraft WHERE Manufacturer = 'SpaceX';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to find the total mass of all spacecraft manufactured by SpaceX:\n```sql\nSELECT SUM(Mass) AS TotalMass\nFROM Spacecraft\nWHERE Manufacturer = \'SpaceX\';\n```\n\nThis query sums up the mass of all spacecraft manufactured by SpaceX and assigns the result to the alias "TotalMass." The final result will be the total mass of all SpaceX spacecraft.',
    sql="SQL query:\n```sql\nSELECT SUM(Mass) AS TotalMassFromSpacecraft WHERE Manufacturer = 'SpaceX';\n```"
), 0), (Example({'sql_prompt': "What is the total age of 'stone' artifacts in 'american_archaeology'?", 'sql_context': 'CREATE TABLE american_archaeology (id INT, site_name VARCHAR(50), artifact_name VARCHAR(50), age INT, material VARCHAR(20));', 'sql': "SELECT SUM(age) FROM american_archaeology WHERE material = 'stone';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to answer the prompt:\n```sql\nSELECT SUM(age) FROM american_archaeology WHERE material = \'stone\';\n```\n\n**Reasoning:** To find the total age of \'stone\' artifacts in the \'american_archaeology\' table, we use the `SUM` function on the "age" column. We also apply a condition using the `WHERE` clause to filter rows where the "material" is \'stone\'. This ensures that only artifacts made of stone contribute to the total age calculation.',
    sql='SQL query:\n```sql\nSELECT SUM(age) AS total_age\nFROM american_archaeology\nWHERE material = \'stone\';\n```\n\n**Reasoning:** To calculate the total age of \'stone\' artifacts in the \'american_archaeology\' table, we use the `SUM` function on the "age" column. The `WHERE` clause is used to filter rows where the "material" is \'stone\', ensuring that only stone artifacts are considered for the total age calculation.'
), 0), (Example({'sql_prompt': 'What is the average hotel price for beachfront hotels in Mexico?', 'sql_context': "CREATE TABLE hotels (hotel_id INT, name TEXT, country TEXT, has_beachfront BOOLEAN, price INT); INSERT INTO hotels (hotel_id, name, country, has_beachfront, price) VALUES (1, 'Beach Palace', 'Mexico', true, 200), (2, 'Green Valley', 'USA', false, 150);", 'sql': "SELECT AVG(price) FROM hotels WHERE has_beachfront = true AND country = 'Mexico';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query based on the provided context and prompt:\n```sql\nSELECT AVG(price) AS average_price\nFROM hotels\nWHERE country = \'Mexico\' AND has_beachfront = true;\n```\n\nThis query calculates the average price of hotels in Mexico that have a beachfront location. The `AVG` function is used to calculate the average value of the "price" column, and the result is aliased as "average_price" using the `AS` keyword. The `WHERE` clause filters the rows to include only those with the country \'Mexico\' and where the "has_beachfront" column is true.',
    sql="SQL query:\n```sql\nSELECT AVG(price) AS average_price\nFROM hotels\nWHERE country = 'Mexico' AND has_beachfront = true;\n```"
), 0), (Example({'sql_prompt': 'List all instructors and number of students they support with accommodations.', 'sql_context': 'CREATE TABLE Instructors (id INT, name VARCHAR(50), title VARCHAR(50));', 'sql': 'SELECT i.name, COUNT(a.student_id) as supported_students FROM Instructors i JOIN Accommodations a ON i.id = a.instructor_id GROUP BY i.name;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query based on the provided context and prompt:\n```sql\nSELECT i.name AS Instructor, COUNT(DISTINCT s.student_id) AS NumberOfStudents\nFROM Instructors i\nJOIN Students s ON i.id = s.instructor_id\nWHERE s.accommodation_type IS NOT NULL\nGROUP BY i.id, i.name;\n```\n\n**Reasoning:** \n1. We start by selecting data from the "Instructors" table, aliasing it as "i."\n2. We then perform an inner join with the "Students" table, aliasing it as "s," based on the "id" and "instructor_id" columns,',
    sql='SQL query:\n```sql\nSELECT i.name AS Instructor, COUNT(DISTINCT s.student_id) AS NumberOfStudents\nFROM Instructors i\nJOIN Students s ON i.id = s.instructor_id\nWHERE s.accommodation_type IS NOT NULL\nGROUP BY i.id, i.name;\n```'
), 0), (Example({'sql_prompt': "What is the total fare collected from bus routes that start with the letter 'B'?", 'sql_context': "CREATE TABLE bus_trips (trip_id INT, route_id INT, fare FLOAT); INSERT INTO bus_trips (trip_id, route_id, fare) VALUES (1, 101, 2.5), (2, 202, 3.0), (3, 303, 1.5), (4, 404, 2.0), (5, 505, 2.5), (6, 106, 3.0); CREATE TABLE bus_routes (route_id INT, route_name TEXT, starting_letter TEXT); INSERT INTO bus_routes (route_id, route_name, starting_letter) VALUES (101, 'Broadway', 'B'), (202, 'Park Ave', 'P'), (303, 'Lakeshore', 'L'), (404, 'Sunset Blvd', 'S'), (505, 'Beverly Hills', 'B');", 'sql': "SELECT SUM(bt.fare) FROM bus_trips bt JOIN bus_routes br ON bt.route_id = br.route_id WHERE br.starting_letter = 'B';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query that answers the prompt:\n```sql\nSELECT SUM(bt.fare)\nFROM bus_trips bt\nJOIN bus_routes br ON bt.route_id = br.route_id\nWHERE br.starting_letter = 'B';\n```\n\nStep-by-step reasoning:\n1. We need to find the total fare collected from bus routes that start with the letter 'B'.\n2. We have two tables: `bus_trips` and `bus_routes`. The `bus_trips` table contains trip details including the route ID and fare, while the `bus_routes` table contains information about each route, including its name and starting letter.",
    sql='SQL query'
), 1), (Example({'sql_prompt': 'What is the percentage of total revenue from streaming and concert ticket sales for Pop music in 2018?', 'sql_context': 'CREATE TABLE StreamingRevenue (id INT, year INT, genre VARCHAR(50), revenue FLOAT); CREATE TABLE ConcertTicketSales (id INT, year INT, genre VARCHAR(50), revenue FLOAT);', 'sql': "SELECT (SUM(sr.revenue) + SUM(cts.revenue)) / (SELECT SUM(revenue) FROM (SELECT revenue FROM StreamingRevenue WHERE year = 2018 UNION ALL SELECT revenue FROM ConcertTicketSales WHERE year = 2018) t) FROM StreamingRevenue sr JOIN ConcertTicketSales cts ON sr.genre = cts.genre WHERE sr.year = 2018 AND sr.genre = 'Pop';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to answer the prompt:\n```sql\nSELECT (SUM(StreamingRevenue.revenue) + SUM(ConcertTicketSales.revenue)) / NULLIF(SUM(StreamingRevenue.revenue) + SUM(ConcertTicketSales.revenue), 0) * 100 AS percentage\nFROM StreamingRevenue\nJOIN ConcertTicketSales ON StreamingRevenue.year = ConcertTicketSales.year AND StreamingRevenue.genre = ConcertTicketSales.genre\nWHERE StreamingRevenue.year = 2018 AND ConcertTicketSales.year = 2018 AND StreamingRevenue.genre = 'Pop';\n```\n\nThis query calculates the total revenue from both streaming and concert ticket sales for Pop music in 20",
    sql="SQL query:\n```sql\nSELECT (SUM(StreamingRevenue.revenue) + SUM(ConcertTicketSales.revenue)) / NULLIF(SUM(StreamingRevenue.revenue) + SUM(ConcertTicketSales.revenue), 0) * 100 AS percentage\nFROM StreamingRevenue\nJOIN ConcertTicketSales ON StreamingRevenue.year = ConcertTicketSales.year AND StreamingRevenue.genre = ConcertTicketSales.genre\nWHERE StreamingRevenue.year = 2018 AND ConcertTicketSales.year = 2018 AND StreamingRevenue.genre = 'Pop';\n```"
), 0), (Example({'sql_prompt': 'What is the total defense spending by countries in Oceania in 2018?', 'sql_context': "CREATE TABLE defense_spending (country VARCHAR(50), continent VARCHAR(50), year INT, amount FLOAT); INSERT INTO defense_spending (country, continent, year, amount) VALUES ('Australia', 'Oceania', 2018, 750.3), ('New Zealand', 'Oceania', 2018, 23.4), ('Papua New Guinea', 'Oceania', 2018, 6.7);", 'sql': "SELECT SUM(amount) FROM defense_spending WHERE continent = 'Oceania' AND year = 2018;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query based on the provided context and prompt:\n```sql\nSELECT SUM(amount) AS total_defense_spending\nFROM defense_spending\nWHERE continent = \'Oceania\' AND year = 2018;\n```\n\nThis query calculates the total defense spending by summing up the "amount" column for all rows where the "continent" is \'Oceania\' and the "year" is 2018. The result will give you the total defense spending by countries in Oceania for that specific year.',
    sql='SQL query:\n```sql\nSELECT SUM(amount) AS total_defense_spending\nFROM defense_spending\nWHERE continent = \'Oceania\' AND year = 2018;\n```\n\nThis query calculates the total defense spending by summing up the "amount" column for all rows where the "continent" is \'Oceania\' and the "year" is 2018. The result will give you the total defense spending by countries in Oceania for that specific year.'
), 0), (Example({'sql_prompt': 'What is the total number of refugee families supported by each NGO in the last 6 months?', 'sql_context': "CREATE TABLE NGOs (NGOID int, NGOName varchar(50)); INSERT INTO NGOs (NGOID, NGOName) VALUES (1, 'International Rescue Committee'), (2, 'Save the Children'); CREATE TABLE RefugeeSupport (SupportID int, NGOID int, FamilyID int, SupportDate date); INSERT INTO RefugeeSupport (SupportID, NGOID, FamilyID, SupportDate) VALUES (1, 1, 1, '2022-01-01'), (2, 1, 2, '2022-02-01'), (3, 2, 1, '2022-03-01');", 'sql': 'SELECT NGOName, COUNT(DISTINCT FamilyID) as SupportedFamilies FROM NGOs INNER JOIN RefugeeSupport ON NGOs.NGOID = RefugeeSupport.NGOID WHERE SupportDate >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY NGOName;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query that answers the prompt:\n```sql\nSELECT NGOID, COUNT(DISTINCT FamilyID) AS TotalFamiliesSupported\nFROM RefugeeSupport\nWHERE SupportDate >= '2022-01-01' AND SupportDate < DATEADD(MONTH, 6, '2022-01-01')\nGROUP BY NGOID;\n```\n\nStep-by-step reasoning:\n1. We start by selecting data from the `RefugeeSupport` table.\n2. We use a WHERE clause to filter the data and only include records with a `SupportDate` greater than or equal to '2022-01-01' and less",
    sql="SQL query:\n```sql\nSELECT NGOID, COUNT(DISTINCT FamilyID) AS TotalFamiliesSupported\nFROM RefugeeSupport\nWHERE SupportDate >= '2022-01-01' AND SupportDate < DATEADD(MONTH, 6, '2022-01-01')\nGROUP BY NGOID;\n```\n\nStep-by-step reasoning:\n\n1. We start by selecting data from the `RefugeeSupport` table.\n2. We use a WHERE clause to filter the data and only include records with a `SupportDate` greater than or equal to '2022-01-01' and less than 6 months after that date"
), 0), (Example({'sql_prompt': "Which regulatory frameworks have been implemented in 'Country1'?", 'sql_context': "CREATE TABLE countries (id INT, name VARCHAR(255)); INSERT INTO countries (id, name) VALUES (1, 'Country1'); CREATE TABLE regulatory_frameworks (id INT, country_id INT, name VARCHAR(255)); INSERT INTO regulatory_frameworks (id, country_id, name) VALUES (1, 1, 'Framework1'); INSERT INTO regulatory_frameworks (id, country_id, name) VALUES (2, 1, 'Framework2'); INSERT INTO regulatory_frameworks (id, country_id, name) VALUES (3, 1, 'Framework3');", 'sql': "SELECT name FROM regulatory_frameworks WHERE country_id = (SELECT id FROM countries WHERE name = 'Country1');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To answer the question "Which regulatory frameworks have been implemented in \'Country1\'?", we can use the following SQL query:\n```sql\nSELECT name FROM regulatory_frameworks WHERE country_id = (SELECT id FROM countries WHERE name = \'Country1\');\n```\nThis query joins the `regulatory_frameworks` table with the `countries` table on the `country_id` and `id` fields, respectively, and filters the results to only include rows where the country name is \'Country1\'. The result will be a list of regulatory framework names that have been implemented in \'Country1\'.',
    sql="SQL query:\n```sql\nSELECT name FROM regulatory_frameworks WHERE country_id = (SELECT id FROM countries WHERE name = 'Country1');\n```"
), 1), (Example({'sql_prompt': 'What is the percentage of factories in each country that have implemented circular economy practices?', 'sql_context': "CREATE TABLE factory_circle (factory VARCHAR(255), country VARCHAR(255), practice VARCHAR(255)); INSERT INTO factory_circle (factory, country, practice) VALUES ('Factory1', 'Bangladesh', 'yes'), ('Factory2', 'Bangladesh', 'no'), ('Factory3', 'Bangladesh', 'yes'), ('Factory4', 'China', 'yes'), ('Factory5', 'China', 'no'), ('Factory6', 'India', 'no'), ('Factory7', 'India', 'yes'), ('Factory8', 'India', 'yes');", 'sql': "SELECT country, 100.0 * COUNT(*) FILTER (WHERE practice = 'yes') / COUNT(*) AS percentage FROM factory_circle GROUP BY country;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query that answers the prompt:\n```sql\nSELECT country, \n       COUNT(*) AS total_factories, \n       COUNT(CASE WHEN practice = 'yes' THEN 1 END) AS implemented_practices, \n       (COUNT(CASE WHEN practice = 'yes' THEN 1 END) * 100.0 / COUNT(*)) AS implementation_percentage\nFROM factory_circle\nGROUP BY country;\n```\n\nStep by step reasoning:\n1. The query starts by selecting the `country` column, which represents the different countries in the `factory_circle` table.\n2. We use the `COUNT(*)` function to calculate the total number of factories in each country and alias it as `total",
    sql="SQL query:\n```sql\nSELECT country,\n       COUNT(*) AS total_factories,\n       COUNT(CASE WHEN practice = 'yes' THEN 1 END) AS implemented_practices,\n       (COUNT(CASE WHEN practice = 'yes' THEN 1 END) * 100.0 / COUNT(*)) AS implementation_percentage\nFROM factory_circle\nGROUP BY country;\n```\n\nStep-by-step reasoning:\n\n1. The query starts by selecting the `country` column, which represents the different countries in the `factory_circle` table.\n2. We use the `COUNT(*)` function to calculate the total number of factories in each country and alias it as `total_factories`.\n3"
), 0)]