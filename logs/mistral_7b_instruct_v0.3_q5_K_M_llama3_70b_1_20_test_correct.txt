[(Example({'sql_prompt': 'Find the number of events attended by each individual in 2021', 'sql_context': 'CREATE TABLE event_attendance (id INT, individual_id INT, event_year INT);INSERT INTO event_attendance (id, individual_id, event_year) VALUES (1, 1, 2021), (2, 2, 2021), (3, 1, 2021);', 'sql': 'SELECT individual_id, COUNT(*) OVER (PARTITION BY individual_id) AS events_attended_by_each_individual FROM event_attendance WHERE event_year = 2021 ORDER BY individual_id;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='SELECT individual_id, COUNT(*) as num_events\nFROM event_attendance\nWHERE event_year = 2021\nGROUP BY individual_id;'
), 1), (Example({'sql_prompt': 'Identify the number of unique causes supported by volunteers from different countries.', 'sql_context': "CREATE TABLE volunteers (id INT, name VARCHAR(100), country VARCHAR(50), cause VARCHAR(50)); INSERT INTO volunteers VALUES (1, 'John Doe', 'USA', 'Environment'); INSERT INTO volunteers VALUES (2, 'Jane Smith', 'Canada', 'Animals');", 'sql': 'SELECT country, COUNT(DISTINCT cause) as unique_causes FROM volunteers GROUP BY country;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='SELECT COUNT(DISTINCT cause) FROM volunteers GROUP BY country;\n\nThis SQL query will group the causes by country and return the number of unique causes for each country.'
), 0), (Example({'sql_prompt': "Delete vessels from the 'Vessels' table with a cargo weight less than 3000 tons.", 'sql_context': "CREATE TABLE Vessels (ID INT PRIMARY KEY, Name TEXT, Category TEXT, CargoWeight FLOAT); INSERT INTO Vessels (ID, Name, Category, CargoWeight) VALUES (1, 'Cargo Ship 1', 'Cargo Ship', 5500), (2, 'Fishing Vessel 1', 'Fishing Vessel', 300), (3, 'Cargo Ship 2', 'Cargo Ship', 7000);", 'sql': 'DELETE FROM Vessels WHERE CargoWeight < 3000;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='DELETE FROM Vessels WHERE CargoWeight < 3000;'
), 1), (Example({'sql_prompt': 'What are the cryptocurrency exchanges with their corresponding blockchain companies, ranked by exchange ID in ascending order, for the Bitcoin platform?', 'sql_context': "CREATE TABLE cryptocurrency_exchanges (exchange_id INT, exchange_name VARCHAR(50), company_id INT); INSERT INTO cryptocurrency_exchanges (exchange_id, exchange_name, company_id) VALUES (1, 'Binance', 1); INSERT INTO cryptocurrency_exchanges (exchange_id, exchange_name, company_id) VALUES (2, 'Coinbase', 2); INSERT INTO cryptocurrency_exchanges (exchange_id, exchange_name, company_id) VALUES (3, 'Kraken', 3); CREATE TABLE blockchain_companies (company_id INT, company_name VARCHAR(50), platform VARCHAR(50)); INSERT INTO blockchain_companies (company_id, company_name, platform) VALUES (1, 'Binance', 'Bitcoin'); INSERT INTO blockchain_companies (company_id, company_name, platform) VALUES (2, 'Blockstream', 'Bitcoin'); INSERT INTO blockchain_companies (company_id, company_name, platform) VALUES (3, 'Blockchair', 'Bitcoin');", 'sql': "SELECT ce.exchange_name, bc.company_name, ce.exchange_id, ROW_NUMBER() OVER (PARTITION BY bc.platform ORDER BY ce.exchange_id ASC) as rank FROM cryptocurrency_exchanges ce JOIN blockchain_companies bc ON ce.company_id = bc.company_id WHERE bc.platform = 'Bitcoin';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='SELECT `cryptocurrency_exchanges`.`exchange_name`, `blockchain_companies`.`company_name`\nFROM `cryptocurrency_exchanges`\nJOIN `blockchain_companies` ON `cryptocurrency_exchanges`.`company_id` = `blockchain_companies`.`company_id`\nORDER BY `cryptocurrency_exchanges`.`exchange_id` ASC;'
), 1), (Example({'sql_prompt': 'How many financial capability training sessions were conducted in Germany in Q1 of 2022?', 'sql_context': "CREATE TABLE financial_capability_training (id INT, quarter INT, year INT, country VARCHAR(255), sessions INT);  INSERT INTO financial_capability_training (id, quarter, year, country, sessions) VALUES (1, 1, 2022, 'Germany', 25), (2, 1, 2022, 'Germany', 30);", 'sql': "SELECT COUNT(*) FROM financial_capability_training WHERE quarter = 1 AND year = 2022 AND country = 'Germany';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT SUM(sessions) FROM financial_capability_training WHERE country = 'Germany' AND year = 2022 AND quarter = 1;"
), 1), (Example({'sql_prompt': 'What is the maximum daily investment for each client?', 'sql_context': "CREATE TABLE daily_investments (client_id INT, date DATE, investment FLOAT); INSERT INTO daily_investments (client_id, date, investment) VALUES (1, '2022-01-01', 1000.00), (1, '2022-01-02', 2000.00), (2, '2022-01-01', 3000.00), (2, '2022-01-02', 4000.00);", 'sql': 'SELECT client_id, MAX(investment) OVER (PARTITION BY client_id ORDER BY client_id) as max_daily_investment FROM daily_investments;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='SELECT client_id, MAX(investment) as max_daily_investment FROM daily_investments GROUP BY client_id;'
), 1), (Example({'sql_prompt': 'What is the average number of autonomous vehicle research studies conducted annually in Germany?', 'sql_context': "CREATE TABLE ResearchStudies (Id INT, Title VARCHAR(100), Country VARCHAR(50), Year INT, IsAutonomous BOOLEAN); INSERT INTO ResearchStudies (Id, Title, Country, Year, IsAutonomous) VALUES (1, 'Autonomous Vehicle Safety Testing', 'Germany', 2015, true), (2, 'AD Research Study', 'Germany', 2016, true), (3, 'AV Research Study', 'Germany', 2018, true);", 'sql': "SELECT AVG(Year) FROM ResearchStudies WHERE Country = 'Germany' AND IsAutonomous = true;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT AVG(Year) as AverageYear, COUNT(*) as TotalStudies FROM ResearchStudies WHERE Country = 'Germany' AND IsAutonomous = true GROUP BY Year;\n\nThis SQL query calculates the average year of autonomous vehicle research studies conducted annually in Germany by grouping the data by year and finding the average. It also counts the total number of studies for reference."
), 0), (Example({'sql_prompt': 'How many students in the "Lifelong Learning" program have submitted an assignment in the past week?', 'sql_context': 'CREATE TABLE lifelong_learning_students (id INT, name VARCHAR(50), program VARCHAR(50), last_assignment DATE);', 'sql': 'SELECT COUNT(*) FROM lifelong_learning_students WHERE last_assignment >= DATE_SUB(CURDATE(), INTERVAL 1 WEEK);'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='SELECT COUNT(*) FROM lifelong_learning_students WHERE last_assignment >= CURDATE() - INTERVAL 1 WEEK;'
), 1)]