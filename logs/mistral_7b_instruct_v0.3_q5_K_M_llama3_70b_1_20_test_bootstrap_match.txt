[(Example({'sql_prompt': 'Find the number of events attended by each individual in 2021', 'sql_context': 'CREATE TABLE event_attendance (id INT, individual_id INT, event_year INT);INSERT INTO event_attendance (id, individual_id, event_year) VALUES (1, 1, 2021), (2, 2, 2021), (3, 1, 2021);', 'sql': 'SELECT individual_id, COUNT(*) OVER (PARTITION BY individual_id) AS events_attended_by_each_individual FROM event_attendance WHERE event_year = 2021 ORDER BY individual_id;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="find the number of events attended by each individual in 2021.\n\nFirst, we need to filter the data for the year 2021 and then group it by individual_id to count the number of events attended by each person. Here's the SQL query:\n\n```sql\nSELECT individual_id, COUNT(*) as NumberOfEvents\nFROM event_attendance\nWHERE event_year = 2021\nGROUP BY individual_id;\n```\n\nThis query will return a table with two columns: `individual_id` and `NumberOfEvents`. The `individual_id` column shows the unique ID of each person, while",
    sql="Sql Prompt: Find the number of events attended by each individual in 2021\n\nSql Context: CREATE TABLE event_attendance (id INT, individual_id INT, event_year INT);\nINSERT INTO event_attendance (id, individual_id, event_year) VALUES (1, 1, 2021), (2, 2, 2021), (3, 1, 2021);\n\nReasoning: Let's think step by step in order to find the number of events attended by each individual in 2021. First, we need to filter the data for the year 2021"
), 1), (Example({'sql_prompt': 'Identify the number of unique causes supported by volunteers from different countries.', 'sql_context': "CREATE TABLE volunteers (id INT, name VARCHAR(100), country VARCHAR(50), cause VARCHAR(50)); INSERT INTO volunteers VALUES (1, 'John Doe', 'USA', 'Environment'); INSERT INTO volunteers VALUES (2, 'Jane Smith', 'Canada', 'Animals');", 'sql': 'SELECT country, COUNT(DISTINCT cause) as unique_causes FROM volunteers GROUP BY country;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="construct the SQL query. First, we need to join the `volunteers` table with itself to find pairs of volunteers from different countries who support the same cause. Then, we group these pairs by their common cause and count the number of unique pairs for each cause. Finally, we select only the causes and their corresponding counts.\n\nHere's the SQL query:\n\n```sql\nSELECT cause, COUNT(DISTINCT CONCAT_WS('-', country1, country2)) as TotalCountries\nFROM (\n    SELECT a.cause, a.country AS country1, b.country AS country2\n    FROM volunteers AS a\n    JOIN volunteers AS b ON a",
    sql="Sql Prompt: To find the number of unique causes supported by volunteers from different countries, use the following SQL query:\n\n```sql\nSELECT cause, COUNT(DISTINCT CONCAT_WS('-', country1, country2)) as TotalCountries\nFROM (\n    SELECT a.cause, a.country AS country1, b.country AS country2\n    FROM volunteers AS a\n    JOIN volunteers AS b ON a.id < b.id AND a.cause = b.cause AND a.country != b.country\n) AS pairs\nGROUP BY cause;\n```\n\nThis query first creates a subquery `pairs` that joins"
), 0), (Example({'sql_prompt': "Delete vessels from the 'Vessels' table with a cargo weight less than 3000 tons.", 'sql_context': "CREATE TABLE Vessels (ID INT PRIMARY KEY, Name TEXT, Category TEXT, CargoWeight FLOAT); INSERT INTO Vessels (ID, Name, Category, CargoWeight) VALUES (1, 'Cargo Ship 1', 'Cargo Ship', 5500), (2, 'Fishing Vessel 1', 'Fishing Vessel', 300), (3, 'Cargo Ship 2', 'Cargo Ship', 7000);", 'sql': 'DELETE FROM Vessels WHERE CargoWeight < 3000;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: DELETE FROM Vessels WHERE CargoWeight < 3000;\n\nThis SQL statement will delete all rows from the 'Vessels' table where the cargo weight is less than 3000 tons.",
    sql="The total quantity of 'Tencel Lyocell' and 'Bamboo Viscose' fabrics in stock can be found using the following SQL query:\n\n```sql\nSELECT SUM(quantity) AS total_quantity FROM inventory WHERE fabric_name IN ('Tencel Lyocell', 'Bamboo Viscose');\n```\n\nTo delete vessels from the 'Vessels' table with a cargo weight less than 3000 tons, use this SQL statement:\n\n```sql\nDELETE FROM Vessels WHERE CargoWeight < 3000;\n```"
), 1), (Example({'sql_prompt': 'What are the cryptocurrency exchanges with their corresponding blockchain companies, ranked by exchange ID in ascending order, for the Bitcoin platform?', 'sql_context': "CREATE TABLE cryptocurrency_exchanges (exchange_id INT, exchange_name VARCHAR(50), company_id INT); INSERT INTO cryptocurrency_exchanges (exchange_id, exchange_name, company_id) VALUES (1, 'Binance', 1); INSERT INTO cryptocurrency_exchanges (exchange_id, exchange_name, company_id) VALUES (2, 'Coinbase', 2); INSERT INTO cryptocurrency_exchanges (exchange_id, exchange_name, company_id) VALUES (3, 'Kraken', 3); CREATE TABLE blockchain_companies (company_id INT, company_name VARCHAR(50), platform VARCHAR(50)); INSERT INTO blockchain_companies (company_id, company_name, platform) VALUES (1, 'Binance', 'Bitcoin'); INSERT INTO blockchain_companies (company_id, company_name, platform) VALUES (2, 'Blockstream', 'Bitcoin'); INSERT INTO blockchain_companies (company_id, company_name, platform) VALUES (3, 'Blockchair', 'Bitcoin');", 'sql': "SELECT ce.exchange_name, bc.company_name, ce.exchange_id, ROW_NUMBER() OVER (PARTITION BY bc.platform ORDER BY ce.exchange_id ASC) as rank FROM cryptocurrency_exchanges ce JOIN blockchain_companies bc ON ce.company_id = bc.company_id WHERE bc.platform = 'Bitcoin';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="answer the question. First, we need to join the two tables `cryptocurrency_exchanges` and `blockchain_companies` based on their common column `company_id`. Then, we want to sort the result by `exchange_id` in ascending order. Here's the SQL query:\n\n```sql\nSELECT exchange_name AS CryptocurrencyExchange, company_name AS BlockchainCompany, exchange_id\nFROM cryptocurrency_exchanges\nJOIN blockchain_companies ON cryptocurrency_exchanges.company_id = blockchain_companies.company_id\nORDER BY exchange_id ASC;\n```",
    sql='SELECT exchange_name AS CryptocurrencyExchange, company_name AS BlockchainCompany, exchange_id FROM cryptocurrency_exchanges JOIN blockchain_companies ON cryptocurrency_exchanges.company_id = blockchain_companies.company_id ORDER BY exchange_id ASC;\n\nThis SQL query will return the names of the cryptocurrency exchanges and their corresponding blockchain companies, ranked by exchange ID in ascending order for the Bitcoin platform. The result set would look like this:\n\n| CryptocurrencyExchange | BlockchainCompany   | exchange_id |\n|-----------------------|---------------------|------------|\n| Binance               | Bin'
), 0), (Example({'sql_prompt': 'How many financial capability training sessions were conducted in Germany in Q1 of 2022?', 'sql_context': "CREATE TABLE financial_capability_training (id INT, quarter INT, year INT, country VARCHAR(255), sessions INT);  INSERT INTO financial_capability_training (id, quarter, year, country, sessions) VALUES (1, 1, 2022, 'Germany', 25), (2, 1, 2022, 'Germany', 30);", 'sql': "SELECT COUNT(*) FROM financial_capability_training WHERE quarter = 1 AND year = 2022 AND country = 'Germany';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="answer the question. First, we need to filter the data for Germany and Q1 of 2022. Then, we count the number of sessions. Here is the SQL query:\n\n```sql\nSELECT SUM(sessions) AS TotalSessions FROM financial_capability_training WHERE country = 'Germany' AND quarter = 1 AND year = 2022;\n```\n\nThis query will return the total number of financial capability training sessions conducted in Germany during Q1 of 2022.",
    sql="Sql Prompt: The total number of financial capability training sessions conducted in Germany in Q1 of 2022 is:\n\nSql Context: CREATE TABLE financial_capability_training (id INT, quarter INT, year INT, country VARCHAR(255), sessions INT);\nINSERT INTO financial_capability_training (id, quarter, year, country, sessions) VALUES (1, 1, 2022, 'Germany', 25), (2, 1, 2022, 'Germany', 30);\n\nReasoning: To find the total number of financial capability training sessions conducted in Germany in Q1 of"
), 1), (Example({'sql_prompt': 'What is the maximum daily investment for each client?', 'sql_context': "CREATE TABLE daily_investments (client_id INT, date DATE, investment FLOAT); INSERT INTO daily_investments (client_id, date, investment) VALUES (1, '2022-01-01', 1000.00), (1, '2022-01-02', 2000.00), (2, '2022-01-01', 3000.00), (2, '2022-01-02', 4000.00);", 'sql': 'SELECT client_id, MAX(investment) OVER (PARTITION BY client_id ORDER BY client_id) as max_daily_investment FROM daily_investments;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="find the maximum daily investment for each client. First, we need to group the data by client_id and date to isolate the investments made by each client on a daily basis. Then, we will use the MAX() function to find the highest investment value for each group (client). Here's the SQL query:\n\n```sql\nSELECT client_id, MAX(investment) as MaxDailyInvestment FROM daily_investments GROUP BY client_id, date;\n```\n\nThis query will return a table with two columns: `client_id` and `MaxDailyInvestment`. The `MaxDailyInvestment` column contains the maximum investment made by",
    sql="Sql Prompt: What is the maximum daily investment for each client?\n\nSql Context: CREATE TABLE daily_investments (client_id INT, date DATE, investment FLOAT);\nINSERT INTO daily_investments (client_id, date, investment) VALUES (1, '2022-01-01', 1000.00), (1, '2022-01-02', 2000.00), (2, '2022-01-01', 3000.00), (2, '2022-01-02',"
), 1), (Example({'sql_prompt': 'What is the average number of autonomous vehicle research studies conducted annually in Germany?', 'sql_context': "CREATE TABLE ResearchStudies (Id INT, Title VARCHAR(100), Country VARCHAR(50), Year INT, IsAutonomous BOOLEAN); INSERT INTO ResearchStudies (Id, Title, Country, Year, IsAutonomous) VALUES (1, 'Autonomous Vehicle Safety Testing', 'Germany', 2015, true), (2, 'AD Research Study', 'Germany', 2016, true), (3, 'AV Research Study', 'Germany', 2018, true);", 'sql': "SELECT AVG(Year) FROM ResearchStudies WHERE Country = 'Germany' AND IsAutonomous = true;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="find the average number of autonomous vehicle research studies conducted annually in Germany. First, we need to count the total number of autonomous studies conducted in Germany and then find out how many years are involved. After that, we can calculate the average by dividing the total number of studies by the number of years.\n\nHere's the SQL query:\n\n```sql\nSELECT AVG(YEAR - MIN(Year)) AS AverageStudiesPerYear\nFROM (\n    SELECT Year, COUNT(*) as TotalStudies\n    FROM ResearchStudies\n    WHERE Country = 'Germany' AND IsAutonomous = true\n    GROUP BY Year\n) AS StudiesByYear;",
    sql="Sql Prompt: The average number of autonomous vehicle research studies conducted annually in Germany is approximately `1.5`.\n\nReasoning: To find the average number of autonomous vehicle research studies conducted annually in Germany, we first need to count the total number of autonomous studies conducted in Germany and then find out how many years are involved. After that, we can calculate the average by dividing the total number of studies by the number of years. Here's the SQL query:\n\n```sql\nWITH TotalStudiesByYear AS (\n    SELECT Year, COUNT(*) as TotalStudies\n    FROM ResearchStudies\n    WHERE Country = 'Germany' AND IsAutonomous = true"
), 1), (Example({'sql_prompt': 'How many students in the "Lifelong Learning" program have submitted an assignment in the past week?', 'sql_context': 'CREATE TABLE lifelong_learning_students (id INT, name VARCHAR(50), program VARCHAR(50), last_assignment DATE);', 'sql': 'SELECT COUNT(*) FROM lifelong_learning_students WHERE last_assignment >= DATE_SUB(CURDATE(), INTERVAL 1 WEEK);'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='construct the SQL query. First, we need to find the students who have submitted an assignment within the past week. To do this, we can compare the `last_assignment` date with the current date minus a week. Then, we count the number of these students.\n\nHere\'s the SQL query:\n\n```sql\nSELECT COUNT(*) AS NumberOfStudents\nFROM lifelong_learning_students\nWHERE last_assignment >= DATEADD(day, -7, GETDATE());\n```\n\nThis query will return the total number of students in the "Lifelong Learning" program who have submitted an assignment in the past week.',
    sql='Sql Prompt: How many students in the "Lifelong Learning" program have submitted an assignment in the past week?\nSql Context: CREATE TABLE lifelong_learning_students (id INT, name VARCHAR(50), program VARCHAR(50), last_assignment DATE);\n\nReasoning: To find the number of students who have submitted an assignment within the past week, we need to compare their `last_assignment` date with the current date minus a week. Then, we count the number of these students. Here\'s the SQL query:\n```sql SELECT COUNT(*) AS NumberOfStudents FROM lifelong_learning_students WHERE'
), 1)]