[(Example({'sql_prompt': 'What is the average ticket price for art exhibits in each city?', 'sql_context': "CREATE TABLE Exhibits (exhibit_id INT, city VARCHAR(50), price DECIMAL(5,2)); INSERT INTO Exhibits (exhibit_id, city, price) VALUES (1, 'New York', 25.99), (2, 'Los Angeles', 22.49), (3, 'Chicago', 30.00);", 'sql': 'SELECT city, AVG(price) as avg_price FROM Exhibits GROUP BY city;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL query for finding the average ticket price for art exhibits in each city. We need to group the data by cities and calculate the average price of tickets within those groups. The appropriate aggregate function for calculating averages is AVG().',
    sql='SELECT city, AVG(price) as avg_ticket_price FROM Exhibits GROUP BY city;'
), 1), (Example({'sql_prompt': 'What is the average number of heritage sites per region?', 'sql_context': "CREATE TABLE HeritageSites (id INT, region VARCHAR(255), site_name VARCHAR(255)); INSERT INTO HeritageSites (id, region, site_name) VALUES (1, 'Africa', 'Giza Pyramids'), (2, 'Asia', 'Great Wall'), (3, 'Europe', 'Colosseum'), (4, 'Africa', 'Victoria Falls'), (5, 'Asia', 'Angkor Wat');", 'sql': 'SELECT region, AVG(ROW_NUMBER() OVER(PARTITION BY region) ) as avg_heritage_sites FROM HeritageSites;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to calculate the average number of heritage sites per region from the HeritageSites table. To do this, we will first count the number of heritage sites for each region and then find the average of these counts.',
    sql='SELECT AVG(num_sites) as avg_heritage_sites_per_region FROM (SELECT region, COUNT(*) as num_sites FROM HeritageSites GROUP BY region) AS site_counts;'
), 1), (Example({'sql_prompt': 'Count the number of events per game', 'sql_context': 'CREATE TABLE esports_events (event_id INT PRIMARY KEY, name VARCHAR(50), date DATE, game VARCHAR(50), location VARCHAR(50));', 'sql': 'SELECT game, COUNT(*) as event_count FROM esports_events GROUP BY game;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Produce the SQL. We need to group the events based on their respective games and count them. This can be achieved using a GROUP BY clause with the 'game' column, followed by applying the COUNT() function to get the number of events for each game.",
    sql='SELECT game, COUNT(*) as num_events FROM esports_events GROUP BY game;'
), 0), (Example({'sql_prompt': 'List all sustainable tourism initiatives in Canada and their respective number of participants.', 'sql_context': "CREATE TABLE initiatives (initiative_id INT, name TEXT, country TEXT); CREATE TABLE participants (initiative_id INT, participant_id INT); INSERT INTO initiatives VALUES (1, 'Green Trails', 'Canada'), (2, 'Eco-friendly Cruises', 'Canada'); INSERT INTO participants VALUES (1, 1), (1, 2), (2, 3), (2, 4), (2, 5);", 'sql': "SELECT initiatives.name, COUNT(participants.participant_id) FROM initiatives INNER JOIN participants ON initiatives.initiative_id = participants.initiative_id WHERE country = 'Canada' GROUP BY initiatives.name;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to join both tables on initiative_id and filter for Canada as the country. Then we group by the name of the initiative and count the number of participants for each sustainable tourism initiative in Canada.',
    sql="SELECT i.name, COUNT(p.participant_id) AS num_participants FROM initiatives i JOIN participants p ON i.initiative_id = p.initiative_id WHERE i.country = 'Canada' GROUP BY i.name;"
), 1), (Example({'sql_prompt': "Update the name of the research vessel 'RV Ocean Explorer' to 'RV Ocean Guardian'.", 'sql_context': "CREATE TABLE research_vessels (id INT, name VARCHAR(50), type VARCHAR(20), year INT); INSERT INTO research_vessels (id, name, type, year) VALUES (1, 'RV Ocean Explorer', 'Oceanographic', 2015), (2, 'RV Deep Diver', 'Underwater', 2018), (3, 'RV Sea Rover', 'Hydrographic', 2020);", 'sql': "UPDATE research_vessels SET name = 'RV Ocean Guardian' WHERE name = 'RV Ocean Explorer';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Update the name of a specific research vessel. We need to identify the correct row based on the current name and then change its value to the new name.',
    sql="UPDATE research_vessels SET name = 'RV Ocean Guardian' WHERE name = 'RV Ocean Explorer';"
), 1), (Example({'sql_prompt': 'Which mining operations have a higher than average monthly CO2 emission?', 'sql_context': "CREATE TABLE co2_emissions (mine_id INT, emission_date DATE, co2_amount INT); INSERT INTO co2_emissions (mine_id, emission_date, co2_amount) VALUES (1, '2021-01-01', 30000), (1, '2021-02-01', 32000), (1, '2021-03-01', 35000), (2, '2021-01-01', 28000), (2, '2021-02-01', 30000), (2, '2021-03-01', 33000), (3, '2021-01-01', 25000), (3, '2021-02-01', 27000), (3, '2021-03-01', 29000); CREATE TABLE mine_info (mine_id INT, mine_name TEXT); INSERT INTO mine_info (mine_id, mine_name) VALUES (1, 'Golden Mine'), (2, 'Silver Mine'), (3, 'Bronze Mine');", 'sql': 'SELECT mine_name, AVG(co2_amount) AS avg_monthly_emission FROM co2_emissions JOIN mine_info ON co2_emissions.mine_id = mine_info.mine_id GROUP BY mine_id HAVING AVG(co2_amount) > (SELECT AVG(co2_amount) FROM co2_emissions);'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Produce the SQL. We need to calculate the average monthly CO2 emission across all mines and then find out which mining operations have a higher than this average value for any given month. To do so, we will first compute the overall average CO2 emissions per month using a subquery or CTE (Common Table Expression). Then, we'll compare each mine's monthly emission to this average and select those mines with values above it.\n\nHere is how you can write the SQL query:\n\n```sql\nWITH MonthlyAverageEmission AS (\n    SELECT AVG(co2_amount) as avg_emission\n    FROM co2_emissions\n),\nMine",
    sql='```sql\nWITH MonthlyAverageEmission AS (\n    SELECT \n        EXTRACT(MONTH FROM emission_date) AS month,\n        AVG(co2_amount) AS avg_emission\n    FROM co2_emissions\n    GROUP BY month\n),\nMineMonthlyEmission AS (\n    SELECT \n        mi.mine_id,\n        mi.mine_name,\n        EXTRACT(MONTH FROM ce.emission_date) AS month,\n        SUM(ce.co2_amount) AS total_monthly_emission\n    FROM co2_emissions ce\n    JOIN mine_info mi ON'
), 0), (Example({'sql_prompt': "What's the name and market capitalization of digital assets in the 'Cosmos' network with a market capitalization above 300?", 'sql_context': "CREATE TABLE cosmos_digital_assets (id INT, name VARCHAR(255), network VARCHAR(255), market_cap DECIMAL(10, 2)); INSERT INTO cosmos_digital_assets (id, name, network, market_cap) VALUES (1, 'Asset1', 'cosmos', 400), (2, 'Asset2', 'cosmos', 350);", 'sql': "SELECT name, market_cap FROM cosmos_digital_assets WHERE network = 'cosmos' AND market_cap > 300;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Produce the SQL. We need to select the name and market capitalization of digital assets that belong to the 'Cosmos' network with a market cap greater than 300. To do this, we will use a SELECT statement on the cosmos_digital_assets table, filtering by the network column for 'cosmos' and using a WHERE clause to specify that the market_cap must be above 300.",
    sql="SELECT name, market_cap FROM cosmos_digital_assets WHERE network = 'Cosmos' AND market_cap > 300;"
), 0), (Example({'sql_prompt': 'What is the combined energy output of all hydro power projects in South America?', 'sql_context': "CREATE TABLE project_south_america (project_name TEXT, type TEXT, capacity NUMERIC); INSERT INTO project_south_america (project_name, type, capacity) VALUES ('Hydro Dam A', 'Hydro', 15000), ('Hydro Dam B', 'Hydro', 16000), ('Solar Park C', 'Solar', 5000), ('Wind Farm D', 'Wind', 8000);", 'sql': "SELECT SUM(capacity) FROM project_south_america WHERE type = 'Hydro';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to filter projects based on their type being "Hydro" and then sum up their capacities for all such projects in South America. The query should group results by region, but since there is no explicit regional information provided in the context, we\'ll assume that all entries belong to South America as a whole or use an aggregate function without grouping.',
    sql="SELECT SUM(capacity) AS total_hydro_output FROM project_south_america WHERE type = 'Hydro';"
), 1), (Example({'sql_prompt': 'Add a new station to the stations table for the city of Oslo, Norway.', 'sql_context': 'stations (id, name, city, country, latitude, longitude)', 'sql': "INSERT INTO stations (name, city, country) VALUES ('Oslo Central', 'Oslo', 'Norway');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL statement needed to add a new station to the `stations` table with information about the city of Oslo, Norway. We need to insert data into the columns `name`, `city`, `country`, `latitude`, and `longitude`.',
    sql="INSERT INTO stations (name, city, country, latitude, longitude) VALUES ('Oslo Central Station', 'Oslo', 'Norway', 59.913902, 10.752245);"
), 1), (Example({'sql_prompt': 'What was the total revenue from cannabis-infused edibles sold by each dispensary in the city of San Francisco in the month of December 2021?', 'sql_context': "CREATE TABLE Dispensaries (id INT, name VARCHAR(255), city VARCHAR(255), state VARCHAR(255));CREATE TABLE Inventory (id INT, dispensary_id INT, revenue DECIMAL(10, 2), product_type VARCHAR(255), month INT, year INT);INSERT INTO Dispensaries (id, name, city, state) VALUES (1, 'Golden Gate Greens', 'San Francisco', 'CA');INSERT INTO Inventory (id, dispensary_id, revenue, product_type, month, year) VALUES (1, 1, 2000, 'edibles', 12, 2021);", 'sql': "SELECT d.name, SUM(i.revenue) as total_revenue FROM Dispensaries d JOIN Inventory i ON d.id = i.dispensary_id WHERE d.city = 'San Francisco' AND i.product_type = 'edibles' AND i.month = 12 AND i.year = 2021 GROUP BY d.name;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to join the Dispensaries and Inventory tables on dispensary_id, filter for San Francisco city, cannabis-infused edibles product type, December 2021 (month = 12, year = 2021), then group by dispensary name and sum the revenue.',
    sql="SELECT d.name AS dispensary_name, SUM(i.revenue) as total_revenue FROM Dispensaries d JOIN Inventory i ON d.id = i.dispensary_id WHERE d.city = 'San Francisco' AND i.product_type = 'edibles' AND i.month"
), 0), (Example({'sql_prompt': 'Who is responsible for AI oversight in Canada?', 'sql_context': "CREATE TABLE ai_oversight (id INT, organization VARCHAR(50), region VARCHAR(50)); INSERT INTO ai_oversight (id, organization, region) VALUES (1, 'AI Ethics Board', 'Canada'), (2, 'Data Privacy Commissioner', 'Canada'), (3, 'Innovation Science and Economic Development Canada', 'Canada');", 'sql': "SELECT organization FROM ai_oversight WHERE region = 'Canada';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to find the organization responsible for AI oversight in Canada from the ai_oversight table. Since we are looking for organizations specifically in Canada, we will filter by the region column and select the relevant information about the organization.',
    sql="SELECT organization FROM ai_oversight WHERE region = 'Canada';"
), 0), (Example({'sql_prompt': 'How many properties have more than 3 co-owners in the co-ownership program?', 'sql_context': 'CREATE TABLE extended_co_ownership (property_id INT, co_owner_count INT); INSERT INTO extended_co_ownership (property_id, co_owner_count) VALUES (1001, 2), (1002, 3), (1003, 1), (1004, 5), (1005, 4), (1006, 2);', 'sql': 'SELECT COUNT(*) FROM extended_co_ownership WHERE co_owner_count > 3;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to find properties with more than 3 co-owners from the extended_co_ownership table. To do this, we will use a SELECT statement that filters out rows where the co_owner_count is greater than 3 and groups them by property_id.',
    sql='SELECT COUNT(*) as num_properties FROM extended_co_ownership WHERE co_owner_count > 3;'
), 1), (Example({'sql_prompt': 'How many animals have been successfully relocated to their natural habitats in South America?', 'sql_context': "CREATE TABLE Relocation (AnimalID INT, AnimalName VARCHAR(50), Success INT, Location VARCHAR(50)); INSERT INTO Relocation (AnimalID, AnimalName, Success, Location) VALUES (1, 'Jaguar', 120, 'South America'); INSERT INTO Relocation (AnimalID, AnimalName, Success, Location) VALUES (2, 'Anaconda', 150, 'South America');", 'sql': "SELECT SUM(Success) FROM Relocation WHERE Location = 'South America';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Produce the SQL. We need to count the number of animals that have been successfully relocated to their natural habitats specifically in South America. To do this, we will filter the Relocation table for entries where Location is 'South America' and Success is greater than 0 (indicating a successful relocation). Then, we group by AnimalName or any other relevant field if needed and count the number of occurrences.",
    sql="SELECT COUNT(*) as num_successful_relocations FROM Relocation WHERE Location = 'South America' AND Success > 0;"
), 1), (Example({'sql_prompt': 'What is the average income of residents in each city in the state of California, grouped by city and ordered by average income in descending order?', 'sql_context': "CREATE TABLE cities (id INT PRIMARY KEY, name TEXT, state TEXT); INSERT INTO cities (id, name, state) VALUES (1, 'Los Angeles', 'California'), (2, 'San Diego', 'California'), (3, 'San Jose', 'California'); CREATE TABLE incomes (id INT PRIMARY KEY, city_id INT, income INT); INSERT INTO incomes (id, city_id, income) VALUES (1, 1, 50000), (2, 1, 70000), (3, 2, 45000), (4, 2, 60000), (5, 3, 48000), (6, 3, 52000);", 'sql': "SELECT c.name, AVG(i.income) FROM cities c JOIN incomes i ON c.id = i.city_id WHERE c.state = 'California' GROUP BY c.name ORDER BY AVG(i.income) DESC;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to join the cities and incomes tables on city_id, filter for California state, group by city name, calculate average income, and then order by average income in descending order.',
    sql="SELECT c.name as city, AVG(i.income) as avg_income FROM cities c JOIN incomes i ON c.id = i.city_id WHERE c.state = 'California' GROUP BY c.name ORDER BY avg_income DESC;"
), 1), (Example({'sql_prompt': 'Delete all paintings created by the artist with ArtistID 2.', 'sql_context': "CREATE TABLE Artists (ArtistID INT, Name VARCHAR(50), Nationality VARCHAR(50)); INSERT INTO Artists (ArtistID, Name, Nationality) VALUES (1, 'Vincent van Gogh', 'Dutch'); INSERT INTO Artists (ArtistID, Name, Nationality) VALUES (2, 'Pablo Picasso', 'Spanish'); CREATE TABLE Paintings (PaintingID INT, Title VARCHAR(50), ArtistID INT, YearCreated INT); INSERT INTO Paintings (PaintingID, Title, ArtistID, YearCreated) VALUES (1, 'The Starry Night', 1, 1889); INSERT INTO Paintings (PaintingID, Title, ArtistID, YearCreated) VALUES (2, 'Guernica', 2, 1937);", 'sql': 'DELETE FROM Paintings WHERE ArtistID = 2;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to delete all paintings created by the artist with ArtistID 2 from the Paintings table. To do this, we will use a DELETE statement that specifies the condition for deletion based on the ArtistID value.',
    sql='DELETE FROM Paintings WHERE ArtistID = 2;'
), 1), (Example({'sql_prompt': 'What is the minimum conservation status score of marine species in the Atlantic Ocean?', 'sql_context': "CREATE TABLE conservation_status_scores (id INT, species_id INT, score FLOAT, location TEXT, PRIMARY KEY (id, species_id), FOREIGN KEY (species_id) REFERENCES marine_species(id)); INSERT INTO conservation_status_scores (id, species_id, score, location) VALUES (1, 1, 60.0, 'Atlantic Ocean'), (2, 2, 85.0, 'Pacific Ocean'), (3, 3, 35.0, 'Indian Ocean');", 'sql': "SELECT MIN(score) FROM conservation_status_scores WHERE location = 'Atlantic Ocean';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Produce the SQL query for finding the minimum conservation status score of marine species in the Atlantic Ocean. We need to select the lowest score from the `conservation_status_scores` table where the location is 'Atlantic Ocean'.",
    sql="SELECT MIN(score) as min_conservation_status_score FROM conservation_status_scores WHERE location = 'Atlantic Ocean';"
), 1), (Example({'sql_prompt': 'What is the maximum number of meals served daily in any refugee camp?', 'sql_context': "CREATE TABLE meals_served (id INT PRIMARY KEY, camp VARCHAR(50), month VARCHAR(20), day INT, number INT); INSERT INTO meals_served (id, camp, month, day, number) VALUES (1, 'Camp A', 'April', 1, 1500), (2, 'Camp B', 'April', 1, 1200), (3, 'Camp A', 'April', 2, 1600), (4, 'Camp B', 'April', 2, 1400), (5, 'Camp C', 'April', 3, 1800);", 'sql': 'SELECT MAX(number) FROM meals_served;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Produce the SQL. We need to find the maximum number of meals served daily across all refugee camps and days. To do this, we will group the data by camp and day, summing up the total meals served for each combination. Then, we'll select the highest value from these sums as our result.",
    sql='SELECT MAX(total_meals) FROM (SELECT camp, day, SUM(number) AS total_meals FROM meals_served GROUP BY camp, day) AS daily_totals;'
), 0), (Example({'sql_prompt': 'What are the dissolved oxygen levels for fish farms in the Atlantic ocean?', 'sql_context': "CREATE TABLE atlantic_fish_farms (id INT, name VARCHAR(50), country VARCHAR(50), dissolved_oxygen FLOAT); INSERT INTO atlantic_fish_farms (id, name, country, dissolved_oxygen) VALUES (1, 'Farm G', 'USA', 6.8), (2, 'Farm H', 'Canada', 7.2), (3, 'Farm I', 'USA', 7.0), (4, 'Farm J', 'Brazil', 6.5);", 'sql': "SELECT country, dissolved_oxygen FROM atlantic_fish_farms WHERE country IN ('USA', 'Canada', 'Brazil');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL query for finding dissolved oxygen levels for fish farms in the Atlantic ocean. We need to select the `dissolved_oxygen` field from the `atlantic_fish_farms` table and group them by farm name or country, depending on how we want to present the data.',
    sql='SELECT name, dissolved_oxygen FROM atlantic_fish_farms;'
), 0), (Example({'sql_prompt': "Add the name 'Hubble Space Telescope' to the satellites table", 'sql_context': "CREATE TABLE satellites (id INT, name VARCHAR(255), international_designator VARCHAR(20)); INSERT INTO satellites (id, name, international_designator) VALUES (1, 'Spitzer Space Telescope', '979F');", 'sql': "INSERT INTO satellites (name) VALUES ('Hubble Space Telescope');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Produce the SQL. We need to insert a new row into the `satellites` table with the given name and an appropriate international designator for the Hubble Space Telescope. Assuming we don't have the exact international designator, we can use a placeholder value like 'HST'.",
    sql="INSERT INTO satellites (id, name, international_designator) VALUES (2, 'Hubble Space Telescope', 'HST');"
), 0), (Example({'sql_prompt': 'What is the total number of healthcare providers by type?', 'sql_context': "CREATE TABLE providers (provider_id INT, provider_type VARCHAR(20)); INSERT INTO providers (provider_id, provider_type) VALUES (1, 'Physician'), (2, 'Nurse Practitioner'), (3, 'Physician Assistant');", 'sql': 'SELECT provider_type, COUNT(*) as total_providers FROM providers GROUP BY provider_type;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to count the number of providers grouped by their type. This can be achieved using a GROUP BY clause on the provider_type column and counting the entries for each group with COUNT(*).',
    sql='SELECT provider_type, COUNT(*) as total_providers FROM providers GROUP BY provider_type;'
), 1), (Example({'sql_prompt': 'What is the total installed capacity of hydroelectric power plants in Brazil and Canada?', 'sql_context': "CREATE TABLE hydroelectric_power (country TEXT, capacity INTEGER); INSERT INTO hydroelectric_power (country, capacity) VALUES ('Brazil', 104000), ('Canada', 78000), ('China', 350000), ('United States', 100000), ('Russia', 45000);", 'sql': "(SELECT capacity FROM hydroelectric_power WHERE country = 'Brazil') UNION (SELECT capacity FROM hydroelectric_power WHERE country = 'Canada');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Produce the SQL. We need to filter the data for Brazil and Canada, then sum up their capacities. The query should select the country and capacity columns from the hydroelectric_power table where the country is either 'Brazil' or 'Canada', and then group by the country while calculating the total installed capacity using SUM().",
    sql="SELECT country, SUM(capacity) as total_installed_capacity FROM hydroelectric_power WHERE country IN ('Brazil', 'Canada') GROUP BY country;"
), 0), (Example({'sql_prompt': 'Show the total quantity of each garment in the inventory table', 'sql_context': 'CREATE TABLE inventory (id INT, garment_id INT, quantity INT);', 'sql': 'SELECT garment_id, SUM(quantity) as total_quantity FROM inventory GROUP BY garment_id;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to group the data by `garment_id` and sum up the quantities for each unique garment. This will give us the total quantity of each garment in the inventory table.',
    sql='SELECT garment_id, SUM(quantity) as total_quantity FROM inventory GROUP BY garment_id;'
), 1), (Example({'sql_prompt': 'Which countries received shipments of Chemical E in the last 3 months?', 'sql_context': "CREATE TABLE shipments (id INT, product VARCHAR(255), shipped_to VARCHAR(255), shipped_date DATE); INSERT INTO shipments (id, product, shipped_to, shipped_date) VALUES (1, 'Chemical A', 'Canada', '2022-05-21'), (2, 'Chemical B', 'USA', '2022-04-15'), (3, 'Chemical A', 'Canada', '2022-07-05'), (4, 'Chemical E', 'Mexico', '2022-06-10'), (5, 'Chemical E', 'Brazil', '2022-06-25');", 'sql': "SELECT DISTINCT shipped_to FROM shipments WHERE product = 'Chemical E' AND shipped_date >= '2022-04-01'"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Produce the SQL. We need to find shipments of Chemical E that were shipped within the last 3 months from today's date (assuming today is '2022-10-05'). To do this, we will filter the `shipments` table by product and shipped_date, then group by the country to which it was shipped.",
    sql="SELECT shipped_to AS country, COUNT(*) as num_shipments FROM shipments WHERE product = 'Chemical E' AND shipped_date >= DATE('2022-07-05') GROUP BY shipped_to;"
), 0), (Example({'sql_prompt': 'Update the age column for a player in the players table', 'sql_context': 'CREATE TABLE players (id INT PRIMARY KEY, name VARCHAR(50), age INT, sport VARCHAR(50));', 'sql': "UPDATE players SET age = 25 WHERE name = 'John Doe';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Produce the SQL. We need to update the age of a specific player identified by their id or name. Assuming we want to update the age for a player with an ID of 123, the SQL query would be as follows:\n\nSql Prompt: Update the age column for a player in the players table\nSql Context: CREATE TABLE players (id INT PRIMARY KEY, name VARCHAR(50), age INT, sport VARCHAR(50));\nReasoning: Let's think step by step in order to update the age of a specific player. We need to use an UPDATE statement with a WHERE clause that specifies the unique identifier for the player we want to update (either their ID or name). For",
    sql="UPDATE players SET age = new_age WHERE id = 123;\nIn this SQL query, `new_age` should be replaced with the actual new age value you wish to set for the player. If updating by name is required and assuming the name is unique, replace `id = 123` with `name = 'PlayerName'`."
), 0), (Example({'sql_prompt': 'Show the number of humanitarian assistance missions conducted by the European Union in 2021', 'sql_context': "CREATE TABLE humanitarian_assistance_missions (mission_id INT, organization VARCHAR(255), mission_name VARCHAR(255), start_date DATE, end_date DATE); INSERT INTO humanitarian_assistance_missions (mission_id, organization, mission_name, start_date, end_date) VALUES (1, 'European Union', 'Mission A', '2021-01-01', '2021-12-31');", 'sql': "SELECT COUNT(*) FROM humanitarian_assistance_missions WHERE organization = 'European Union' AND YEAR(start_date) = 2021;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to filter the missions based on the organization and year, then count them. The organization is "European Union" and we are interested in the year 2021. To extract the year from a date, we can use the EXTRACT function with \'YEAR\' as its argument.',
    sql="SELECT COUNT(*) AS num_missions FROM humanitarian_assistance_missions WHERE organization = 'European Union' AND EXTRACT(YEAR FROM start_date) = 2021;"
), 1), (Example({'sql_prompt': 'Show the number of green bond issuances for each country and the total value of green bonds issued for each country.', 'sql_context': "CREATE TABLE green_bonds (id INT, issuer_country VARCHAR(255), issue_year INT, value FLOAT); INSERT INTO green_bonds (id, issuer_country, issue_year, value) VALUES (1, 'USA', 2017, 3000000), (2, 'China', 2018, 4000000), (3, 'Germany', 2017, 2000000), (4, 'USA', 2018, 5000000), (5, 'India', 2019, 1000000), (6, 'Brazil', 2019, 2000000), (7, 'Canada', 2018, 1500000);", 'sql': 'SELECT issuer_country, COUNT(*) as num_issuances, SUM(value) as total_value FROM green_bonds GROUP BY issuer_country;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to count the number of green bond issuances and calculate the total value for each country from the `green_bonds` table. To do this, we will use the GROUP BY clause on the issuer_country column and apply COUNT() function to get the number of issuances and SUM() function to get the total value of bonds issued per country.',
    sql='SELECT issuer_country, COUNT(*) as num_issuances, SUM(value) as total_value FROM green_bonds GROUP BY issuer_country;'
), 1), (Example({'sql_prompt': 'What is the average disability accommodation cost per program by state, ordered from highest to lowest?', 'sql_context': "CREATE TABLE Disability_Accommodations (State VARCHAR(2), Program VARCHAR(50), Cost DECIMAL(5,2)); INSERT INTO Disability_Accommodations VALUES ('CA', 'ASL Interpretation', 1500.00), ('CA', 'Wheelchair Ramp', 3500.00), ('NY', 'ASL Interpretation', 1200.00), ('NY', 'Wheelchair Ramp', 3200.00);", 'sql': 'SELECT AVG(Cost) as Avg_Cost, State FROM Disability_Accommodations GROUP BY State ORDER BY Avg_Cost DESC;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL query for calculating the average disability accommodation cost per program by state, ordered from highest to lowest. We need to group the data by both State and Program columns, calculate the average Cost for each combination of these two fields, and then sort the results based on this average cost in descending order.',
    sql='SELECT State, Program, AVG(Cost) as avg_cost FROM Disability_Accommodations GROUP BY State, Program ORDER BY avg_cost DESC;'
), 0), (Example({'sql_prompt': 'What is the maximum depth ever recorded for a marine species habitat?', 'sql_context': "CREATE TABLE species (id INT, name VARCHAR(255), max_habitat_depth FLOAT); INSERT INTO species (id, name, max_habitat_depth) VALUES (1, 'Atlantic Salmon', 100.0), (2, 'Blue Whale', 500.0);", 'sql': 'SELECT MAX(max_habitat_depth) FROM species;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL query for finding the maximum depth ever recorded for a marine species habitat. We need to select the highest value from the max_habitat_depth column of the species table, which contains information about various marine species and their respective maximum habitat depths.',
    sql='SELECT MAX(max_habitat_depth) as max_recorded_depth FROM species;'
), 1), (Example({'sql_prompt': "What is the maximum fare for 'Train' mode of transport in 'June'?", 'sql_context': "CREATE TABLE Fares(fare INT, journey_date DATE, mode_of_transport VARCHAR(20)); INSERT INTO Fares(fare, journey_date, mode_of_transport) VALUES (7, '2022-06-01', 'Train'), (8, '2022-06-02', 'Train'), (9, '2022-07-01', 'Train');", 'sql': "SELECT MAX(fare) FROM Fares WHERE mode_of_transport = 'Train' AND EXTRACT(MONTH FROM journey_date) = 6;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Produce the SQL. We need to find the maximum fare for trains specifically in June. To do this, we will filter the data based on the mode_of_transport column being equal to 'Train', and then further filter it down to only include journey dates that fall within the month of June (i.e., where the day is between 1 and 30). Finally, we'll select the maximum fare value from this filtered data set.",
    sql="SELECT MAX(fare) FROM Fares WHERE mode_of_transport = 'Train' AND EXTRACT(MONTH FROM journey_date) = 6;"
), 0), (Example({'sql_prompt': 'What was the total amount of ESG investments made by Green Ventures in Q1 2021?', 'sql_context': "CREATE TABLE Green_Ventures (id INT, quarter VARCHAR(10), amount FLOAT); INSERT INTO Green_Ventures (id, quarter, amount) VALUES (1, 'Q1 2021', 500000), (2, 'Q2 2021', 700000);", 'sql': "SELECT SUM(amount) FROM Green_Ventures WHERE quarter = 'Q1 2021' AND context ILIKE '%ESG%';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to filter the data for Green Ventures and Q1 2021 from the table, then sum up the investment amounts.',
    sql="SELECT SUM(amount) as total_investments FROM Green_Ventures WHERE quarter = 'Q1 2021';"
), 1), (Example({'sql_prompt': 'Who is the top points scorer for the Lakers?', 'sql_context': "CREATE TABLE players (player_id INT, player_name VARCHAR(50), team_id INT); INSERT INTO players (player_id, player_name, team_id) VALUES (1, 'James', 5), (2, 'Davis', 5), (3, 'Green', 5); CREATE TABLE games (game_id INT, player_id INT, team_id INT, points INT); INSERT INTO games (game_id, player_id, team_id, points) VALUES (1, 1, 5, 30), (2, 2, 5, 40), (3, 1, 5, 50), (4, 3, 5, 20), (5, 1, 5, 60);", 'sql': 'SELECT player_id, player_name, SUM(points) as total_points FROM games JOIN players ON games.player_id = players.player_id WHERE team_id = 5 GROUP BY player_id ORDER BY total_points DESC LIMIT 1;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to find the top points scorer for the Lakers team. First, we must identify the players who belong to the Lakers team using their `team_id`. Then, we should sum up the total points scored by each player during all games and finally select the player with the highest total points.',
    sql="```sql\nSELECT p.player_name, SUM(g.points) as total_points\nFROM players p\nJOIN games g ON p.player_id = g.player_id AND p.team_id = g.team_id\nWHERE p.team_id = (SELECT team_id FROM players WHERE player_name = 'Lakers"
), 0), (Example({'sql_prompt': 'Identify the regions with sales of organic makeup products', 'sql_context': "CREATE TABLE sales (product_type VARCHAR(20), region VARCHAR(10), sales NUMERIC(10,2)); INSERT INTO sales (product_type, region, sales) VALUES ('foundation', 'North', 500), ('lipstick', 'East', 600), ('eyeshadow', 'West', 400), ('blush', 'South', 700), ('mascara', 'North', 800), ('foundation', 'West', 900); CREATE TABLE products (product_type VARCHAR(20), organic BOOLEAN); INSERT INTO products (product_type, organic) VALUES ('foundation', TRUE), ('lipstick', FALSE), ('eyeshadow', TRUE), ('blush', FALSE), ('mascara', TRUE);", 'sql': "SELECT DISTINCT region FROM sales INNER JOIN products ON sales.product_type = products.product_type WHERE products.organic = TRUE AND sales.product_type = 'makeup';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to join the sales and products tables on product_type, filter for organic makeup products, group by region, and count the number of sales entries per region.',
    sql="SELECT s.region, COUNT(*) as num_sales FROM sales s JOIN products p ON s.product_type = p.product_type WHERE p.organic = TRUE AND s.product_type LIKE '%makeup%' GROUP BY s.region;"
), 0), (Example({'sql_prompt': 'How many space missions were successfully completed before 2010?', 'sql_context': "CREATE TABLE SpaceMissions (id INT, mission_name VARCHAR(255), start_date DATE, end_date DATE, status VARCHAR(50)); INSERT INTO SpaceMissions (id, mission_name, start_date, end_date, status) VALUES (1, 'Apollo 11', '1969-07-16', '1969-07-24', 'Success'), (2, 'Apollo 13', '1970-04-11', '1970-04-17', 'Failure');", 'sql': "SELECT COUNT(*) FROM SpaceMissions WHERE status = 'Success' AND start_date < '2010-01-01';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to count the number of space missions with a status of "Success" and where the end_date is before 2010. To do this, we can use the COUNT function along with WHERE conditions for filtering based on status and end_date.',
    sql="SELECT COUNT(*) as num_successful_missions FROM SpaceMissions WHERE status = 'Success' AND EXTRACT(YEAR FROM end_date) < 2010;"
), 1), (Example({'sql_prompt': 'What is the total number of eco-friendly hotels in Rome?', 'sql_context': "CREATE TABLE eco_hotels (hotel_id INT, city TEXT, sustainable_certification BOOLEAN); INSERT INTO eco_hotels (hotel_id, city, sustainable_certification) VALUES (1, 'Rome', true), (2, 'Rome', false);", 'sql': "SELECT COUNT(*) FROM eco_hotels WHERE city = 'Rome' AND sustainable_certification = true;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Produce the SQL. We need to count the number of eco-friendly hotels in Rome where sustainable_certification is true. This can be achieved using a SELECT statement with COUNT and WHERE clauses, grouping by city and filtering for 'Rome' and true certifications.",
    sql="SELECT COUNT(*) as num_eco_hotels FROM eco_hotels WHERE city = 'Rome' AND sustainable_certification = TRUE;"
), 1), (Example({'sql_prompt': "What is the total number of cargo and tanker vessels in the 'fleet_inventory' table?", 'sql_context': "CREATE TABLE fleet_inventory (id INT, vessel_name TEXT, type TEXT, quantity INT); INSERT INTO fleet_inventory (id, vessel_name, type, quantity) VALUES (1, 'Cargo Ship 1', 'Cargo', 20), (2, 'Tanker Vessel 1', 'Tanker', 30);", 'sql': "SELECT SUM(quantity) FROM fleet_inventory WHERE type IN ('Cargo', 'Tanker');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Produce the SQL. We need to count the total number of cargo and tanker vessels from the fleet_inventory table based on their type. To do this, we can use a SELECT statement with a WHERE clause that filters for 'Cargo' and 'Tanker' types, then sum up the quantity column using the SUM() function.",
    sql="SELECT SUM(quantity) as total_vessels FROM fleet_inventory WHERE type IN ('Cargo', 'Tanker');"
), 1), (Example({'sql_prompt': 'Which sustainable material has the highest average order quantity?', 'sql_context': "CREATE TABLE materials (id INT, name VARCHAR(255), type VARCHAR(255)); INSERT INTO materials (id, name, type) VALUES (1, 'cotton', 'sustainable'), (2, 'polyester', 'unsustainable');   CREATE TABLE order_items (id INT, material_id INT, order_quantity INT); INSERT INTO order_items (id, material_id, order_quantity) VALUES (1, 1, 100), (2, 2, 150);", 'sql': "SELECT AVG(order_quantity) FROM order_items INNER JOIN materials ON order_items.material_id = materials.id WHERE materials.type = 'sustainable' GROUP BY materials.name ORDER BY AVG(order_quantity) DESC LIMIT 1;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to join the materials table with the order_items table on material_id and filter for sustainable materials only. Then we can group by material name and calculate the average order quantity, finally ordering the results by this average in descending order to find the highest one.',
    sql="```sql\nSELECT m.name, AVG(oi.order_quantity) as avg_order_quantity\nFROM materials m\nJOIN order_items oi ON m.id = oi.material_id\nWHERE m.type = 'sustainable'\nGROUP BY m.name\nORDER BY avg_order_quantity DESC\nLIMIT 1;"
), 0), (Example({'sql_prompt': 'List Smart City initiatives and their corresponding countries.', 'sql_context': "CREATE TABLE Countries (id INT, name VARCHAR(50)); INSERT INTO Countries (id, name) VALUES (1, 'CountryA'), (2, 'CountryB'); CREATE TABLE SmartCities (id INT, country_id INT, initiative VARCHAR(50)); INSERT INTO SmartCities (id, country_id, initiative) VALUES (1, 1, 'InitiativeA'), (2, 1, 'InitiativeB'), (3, 2, 'InitiativeC');", 'sql': 'SELECT SmartCities.initiative, Countries.name FROM SmartCities INNER JOIN Countries ON SmartCities.country_id = Countries.id;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to join the SmartCities table with the Countries table on their respective country_id and id columns respectively. Then we can select the initiatives along with their corresponding countries from the joined result set.',
    sql='SELECT sc.initiative, c.name AS country FROM SmartCities sc JOIN Countries c ON sc.country_id = c.id;'
), 1), (Example({'sql_prompt': "How many rural infrastructure projects were completed in each year from the 'project_completion_dates' table?", 'sql_context': "CREATE TABLE project_completion_dates (id INT, project_id INT, completion_date DATE); INSERT INTO project_completion_dates (id, project_id, completion_date) VALUES (1, 1, '2018-06-25'), (2, 2, '2019-12-18'), (3, 3, '2018-03-04');", 'sql': 'SELECT EXTRACT(YEAR FROM completion_date) AS Year, COUNT(DISTINCT project_id) AS Number_Of_Projects FROM project_completion_dates GROUP BY Year;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to count the number of completed projects per year from the project_completion_dates table. To do this, we can extract the year from the completion_date column and group the results by that year while counting the entries for each group.',
    sql='SELECT EXTRACT(YEAR FROM completion_date) AS year, COUNT(*) as num_projects_completed FROM project_completion_dates GROUP BY year;'
), 0), (Example({'sql_prompt': "How many unique one-time donors made donations in 'q4' of '2022'?", 'sql_context': "CREATE TABLE Donations (id INT, donor_type VARCHAR(10), donation_amount DECIMAL(10,2), donation_date DATE); INSERT INTO Donations (id, donor_type, donation_amount, donation_date) VALUES (1, 'one-time', 50.00, '2022-01-01'); INSERT INTO Donations (id, donor_type, donation_amount, donation_date) VALUES (2, 'recurring', 25.00, '2022-01-15'); INSERT INTO Donations (id, donor_type, donation_amount, donation_date) VALUES (3, 'one-time', 75.00, '2022-12-31');", 'sql': "SELECT COUNT(DISTINCT donor_id) FROM Donations WHERE donor_type = 'one-time' AND QUARTER(donation_date) = 4 AND YEAR(donation_date) = 2022;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL query for finding unique one-time donors who made donations in Q4 of 2022. We need to filter the donations based on the `donor_type` and `donation_date`, then count the distinct number of donors that match these criteria.',
    sql="SELECT COUNT(DISTINCT id) as num_unique_one_time_donors FROM Donations WHERE donor_type = 'one-time' AND EXTRACT(YEAR FROM donation_date) = 2022 AND EXTRACT(QUARTER FROM donation_date) = 4;"
), 1), (Example({'sql_prompt': 'Update the description of a sustainable urbanism initiative in the sustainable_urbanism_initiatives table', 'sql_context': "CREATE TABLE public.sustainable_urbanism_initiatives (id SERIAL PRIMARY KEY, initiative_name VARCHAR(255), initiative_description TEXT, city_name VARCHAR(255), state_name VARCHAR(255)); INSERT INTO public.sustainable_urbanism_initiatives (initiative_name, initiative_description, city_name, state_name) VALUES ('Green City Program', 'Promotes green spaces and sustainable transportation options in urban areas', 'Portland', 'Oregon'), ('EcoDistricts Initiative', 'Encourages sustainable community development in city neighborhoods', 'Vancouver', 'British Columbia');", 'sql': "WITH updated_initiative AS (UPDATE public.sustainable_urbanism_initiatives SET initiative_description = 'Promotes green spaces, sustainable transportation, and energy-efficient buildings in urban areas' WHERE initiative_name = 'Green City Program' RETURNING *) INSERT INTO public.sustainable_urbanism_initiatives (initiative_name, initiative_description, city_name, state_name) SELECT initiative_name, initiative_description, city_name, state_name FROM updated_initiative;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='produce the SQL. We need to update the initiative_description for a specific initiative identified by its name or ID. Assuming we want to update the description of the "Green City Program" initiative, we can use an UPDATE statement with a WHERE clause that specifies the initiative_name.',
    sql="UPDATE public.sustainable_urbanism_initiatives SET initiative_description = 'New and improved sustainable urban development program' WHERE initiative_name = 'Green City Program';"
), 1)]