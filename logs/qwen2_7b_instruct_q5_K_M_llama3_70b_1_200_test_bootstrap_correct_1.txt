[(Example({'sql_prompt': 'Delete records with sales amount over $50,000 in the MilitaryEquipmentSales table', 'sql_context': "CREATE TABLE MilitaryEquipmentSales (id INT, equipment_name VARCHAR(50), sale_amount INT, sale_date DATE); INSERT INTO MilitaryEquipmentSales (id, equipment_name, sale_amount, sale_date) VALUES (1, 'Fighter Jet', 45000, '2021-01-01'), (2, 'Tank', 75000, '2021-02-01');", 'sql': 'DELETE FROM MilitaryEquipmentSales WHERE sale_amount > 50000;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Delete records with sales amount over $50,000 from the `MilitaryEquipmentSales` table. \n\n**Step-by-step reasoning:**\n\n1. **Identify the table and columns:** We need to work on the `MilitaryEquipmentSales` table which contains information about each sale including `id`, `equipment_name`, `sale_amount`, and `sale_date`.\n\n2. **Understand the condition for deletion:** The records we want to delete are those where the `sale_amount` is over $50,000.\n\n3. **Write the SQL query:** To delete rows based on a condition in SQL, we use the `DELETE FROM` statement followed by the table name and then specify the conditions within the `WHERE`',
    sql='DELETE FROM MilitaryEquipmentSales WHERE sale_amount > 50000;'
), 1), (Example({'sql_prompt': 'What is the average number of visitor reviews for heritage sites in each category?', 'sql_context': "CREATE TABLE HeritageSitesReviews (ID INT, SiteName VARCHAR(100), Category VARCHAR(50), Reviews INT); INSERT INTO HeritageSitesReviews (ID, SiteName, Category, Reviews) VALUES (1, 'Machu Picchu', 'Archaeological', 5000); INSERT INTO HeritageSitesReviews (ID, SiteName, Category, Reviews) VALUES (2, 'Taj Mahal', 'Architectural', 8000);", 'sql': 'SELECT Category, AVG(Reviews) OVER (PARTITION BY Category) AS AvgReviews FROM HeritageSitesReviews;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="answer the SQL prompt. \n\n1. **Identify the relevant table**: The question is about heritage sites and their visitor reviews, so we need to look at the `HeritageSitesReviews` table.\n\n2. **Understand what 'average number of visitor reviews' means**: This refers to calculating the mean (average) of the `Reviews` column for each category in the `Category` column.\n\n3. **Use SQL functions**: To calculate an average, we use the AVG() function in SQL. We also need GROUP BY clause to group results by categories.\n\n4. **Formulate the query**:\n   - SELECT: The average number of reviews.\n   - FROM: The `HeritageSitesReviews` table.\n   - WHERE:",
    sql='SELECT Category, AVG(Reviews) as Average_Reviews FROM HeritageSitesReviews GROUP BY Category;'
), 1), (Example({'sql_prompt': 'What is the total revenue from ads targeting users interested in veganism in Q3 2022?', 'sql_context': 'CREATE TABLE ads (id INT, user INT, platform VARCHAR(50), target VARCHAR(50), start_date DATE, end_date DATE, revenue DECIMAL(10, 2));', 'sql': "SELECT SUM(revenue) FROM ads WHERE target = 'veganism' AND platform IN ('Facebook', 'Instagram') AND start_date BETWEEN '2022-07-01' AND '2022-09-30';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="answer this SQL query. \n\nFirstly, we need to filter the ads that are targeting users interested in veganism. This can be done using a WHERE clause with the condition `target = 'veganism'`.\n\nSecondly, since we're only interested in Q3 2022, we'll further filter our results by specifying the date range for start_date and end_date to fall within this quarter. Q3 typically runs from July 1st to September 30th.\n\nLastly, we want to calculate the total revenue from these ads, which can be done using the SUM function on the `revenue` column.\n\nSo, putting it all together in SQL:\n\n```sql\nSELECT SUM(revenue) AS Total_Revenue",
    sql="SELECT SUM(revenue) AS Total_Revenue FROM ads WHERE target = 'veganism' AND start_date BETWEEN '2022-07-01' AND '2022-09-30';"
), 1), (Example({'sql_prompt': 'What is the minimum duration of workouts for members who joined in 2019, grouped by gender?', 'sql_context': 'CREATE TABLE Workout (WorkoutID INT PRIMARY KEY, MemberID INT, Duration INT, Date DATE); CREATE TABLE Member (MemberID INT PRIMARY KEY, Age INT, Gender VARCHAR(10), MembershipStart DATE);', 'sql': "SELECT Member.Gender, MIN(Workout.Duration) FROM Workout INNER JOIN Member ON Workout.MemberID = Member.MemberID WHERE Member.MembershipStart BETWEEN '2019-01-01' AND '2019-12-31' GROUP BY Member.Gender;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="answer this SQL query. \n\nFirstly, we need to filter the workouts of members who joined in 2019. This can be done using a WHERE clause with the condition `MembershipStart BETWEEN '2019-01-01' AND '2019-12-31'`.\n\nSecondly, since we want to group by gender, we need to join the Member table with the Workout table on the common column `MemberID`. \n\nLastly, to find the minimum duration of workouts for each gender, we can use a GROUP BY clause followed by an aggregate function MIN().\n\nThe SQL query would look something like this:\n\n```sql\nSELECT \n    M.Gender,\n    MIN(W.Duration)",
    sql='SELECT M.Gender, MIN(W.Duration) as MinWorkoutDuration FROM Member M INNER JOIN Workout W ON M.MemberID = W.MemberID WHERE YEAR(M.MembershipStart) = 2019 GROUP BY M.Gender;'
), 1), (Example({'sql_prompt': 'How many employees were hired in each month of 2022?', 'sql_context': "CREATE TABLE Employees (EmployeeID INT, HireDate DATE); INSERT INTO Employees (EmployeeID, HireDate) VALUES (1, '2022-01-15'); INSERT INTO Employees (EmployeeID, HireDate) VALUES (2, '2022-02-01');", 'sql': "SELECT EXTRACT(MONTH FROM HireDate) AS Month, COUNT(*) AS NumberOfHires FROM Employees WHERE HireDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY Month;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="answer the SQL prompts:\n\n### 1. Minimum number of passengers for shared autonomous vehicles in District 3\n\n**SQL Query:**\n```sql\nSELECT MIN(passengers) AS min_passengers FROM SharedAutonomousVehicles WHERE district = 'District 3';\n```\n\n### 2. Total attendance at poetry readings in San Francisco\n\n**SQL Query:**\n```sql\nSELECT SUM(attendance) AS total_attendance FROM events WHERE event_type = 'Poetry Reading' AND city = 'San Francisco';\n```\n\n### 3. Total number of multimodal trips taken in Toronto, Canada using public transportation\n\n**SQL Query:**\n```sql\nSELECT COUNT(*) AS total_trips FROM multimodal_trips_canada WHERE city = '",
    sql="SELECT COUNT(*) AS total_trips FROM multimodal_trips WHERE city = 'Toronto' AND country = 'Canada';"
), 0), (Example({'sql_prompt': 'What is the maximum quantity of a single organic product delivered in the DELIVERY_RECORDS table?', 'sql_context': 'CREATE TABLE DELIVERY_RECORDS (id INT, supplier_id INT, product_id INT, is_organic BOOLEAN, quantity INT); INSERT INTO DELIVERY_RECORDS (id, supplier_id, product_id, is_organic, quantity) VALUES (1, 1, 1, true, 50), (2, 2, 2, true, 30);', 'sql': 'SELECT MAX(quantity) FROM DELIVERY_RECORDS WHERE is_organic = true;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Find the maximum quantity of a single organic product delivered:\n\n1. **Identify Organic Deliveries**: First, we need to filter out only those rows where `is_organic` is `true`. This will give us all deliveries that are for organic products.\n\n2. **Select Maximum Quantity**: After filtering for organic deliveries, we can then select the maximum value of the `quantity` column from these filtered rows. This will give us the highest quantity of any single organic product delivered.\n\nThe SQL query to achieve this would be:\n\n```sql\nSELECT MAX(quantity) AS max_organic_quantity\nFROM DELIVERY_RECORDS\nWHERE is_organic = true;\n```\n\nThis query first filters for rows where `is_organic` equals `true`,',
    sql='SELECT MAX(quantity) AS max_organic_quantity FROM DELIVERY_RECORDS WHERE is_organic = true;'
), 1), (Example({'sql_prompt': 'Update the description of a sustainable urbanism initiative in the sustainable_urbanism_initiatives table', 'sql_context': "CREATE TABLE public.sustainable_urbanism_initiatives (id SERIAL PRIMARY KEY, initiative_name VARCHAR(255), initiative_description TEXT, city_name VARCHAR(255), state_name VARCHAR(255)); INSERT INTO public.sustainable_urbanism_initiatives (initiative_name, initiative_description, city_name, state_name) VALUES ('Green City Program', 'Promotes green spaces and sustainable transportation options in urban areas', 'Portland', 'Oregon'), ('EcoDistricts Initiative', 'Encourages sustainable community development in city neighborhoods', 'Vancouver', 'British Columbia');", 'sql': "WITH updated_initiative AS (UPDATE public.sustainable_urbanism_initiatives SET initiative_description = 'Promotes green spaces, sustainable transportation, and energy-efficient buildings in urban areas' WHERE initiative_name = 'Green City Program' RETURNING *) INSERT INTO public.sustainable_urbanism_initiatives (initiative_name, initiative_description, city_name, state_name) SELECT initiative_name, initiative_description, city_name, state_name FROM updated_initiative;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Update the description of a specific sustainable urbanism initiative. \n\n1. **Identify the Initiative**: First, we need to identify which sustainable urbanism initiative we want to update. This could be based on its name or any other unique identifier like `id` if it's available.\n\n2. **Access the Table**: We are working with the table `public.sustainable_urbanism_initiatives`.\n\n3. **Update the Description**: Once identified, we can use an SQL UPDATE statement to modify the description field of that specific initiative.\n\nHere is a step-by-step SQL query to update the description for the 'Green City Program' in our example:\n\n```sql\n-- Step 1: Identify the Initiative (Assuming we know it's row",
    sql="UPDATE public.sustainable_urbanism_initiatives SET initiative_description = 'Enhances green spaces and promotes sustainable urban living through innovative transportation solutions.' WHERE initiative_name = 'Green City Program';"
), 1), (Example({'sql_prompt': 'Calculate the year-over-year revenue growth for each restaurant.', 'sql_context': "CREATE TABLE restaurants (restaurant_id INT, restaurant_name VARCHAR(50), city VARCHAR(50), state VARCHAR(50), revenue FLOAT, year INT); INSERT INTO restaurants (restaurant_id, restaurant_name, city, state, revenue, year) VALUES (1, 'Restaurant A', 'City A', 'State A', 123456.78, 2021);", 'sql': 'SELECT restaurant_name, (revenue - LAG(revenue) OVER (PARTITION BY restaurant_name ORDER BY year)) / ABS(LAG(revenue) OVER (PARTITION BY restaurant_name ORDER BY year)) as revenue_growth FROM restaurants;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Calculate the year-over-year revenue growth for each restaurant:\n\n**Step 1:** First, we need a table that includes data from two consecutive years for each restaurant. Since only one year (2021) is provided, let's assume we have access to another dataset with the same structure but for the previous year (e.g., 2020). We'll call this new dataset `restaurants_2020`.\n\n**Step 2:** Join the two datasets (`restaurants` and `restaurants_2020`) on restaurant_id, city, state, and restaurant_name to ensure we're comparing apples-to-apples.\n\n**Step 3:** Calculate the difference in revenue between the current year (2021)",
    sql='SELECT r.restaurant_name, \n       (r.revenue - r_2020.revenue) / r_2020.revenue * 100 AS year_over_year_growth\nFROM restaurants r\nJOIN (\n    SELECT restaurant_id, city, state, restaurant_name, revenue\n    FROM restaurants\n    WHERE year = 2020\n) r_2020 ON r.restaurant_id = r_2020.restaurant_id AND r.city = r_2020.city AND r.state = r_2020.state;'
), 1), (Example({'sql_prompt': 'What is the percentage of users in Canada who have used the hashtag #travel?', 'sql_context': "CREATE TABLE posts (id INT, user_id INT, hashtags TEXT); INSERT INTO posts (id, user_id, hashtags) VALUES (1, 1, '#travel'), (2, 1, '#food'), (3, 2, '#travel'), (4, 3, '#art'), (5, 4, '#music'); CREATE TABLE users (id INT, country VARCHAR(2)); INSERT INTO users (id, country) VALUES (1, 'CA'), (2, 'US'), (3, 'CA'), (4, 'DE');", 'sql': "SELECT 100.0 * COUNT(DISTINCT user_id) / (SELECT COUNT(DISTINCT user_id) FROM posts JOIN users ON posts.user_id = users.id WHERE users.country = 'CA') as percentage_travel FROM posts JOIN users ON posts.user_id = users.id WHERE hashtags LIKE '%#travel%' AND users.country = 'CA';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Solve the SQL query for finding the percentage of users in Canada who have used the hashtag #travel:\n\n**Step 1:** Identify all posts that contain the hashtag '#travel'.\n- We can use a `JOIN` clause to match posts with their respective user information.\n\n**Step 2:** Filter out only those posts where the user is from Canada.\n- This involves filtering on the 'country' column in the users table, looking for 'CA'.\n\n**Step 3:** Count the total number of such posts and the total number of posts by Canadian users (regardless of hashtag).\n- We'll use `COUNT()` with appropriate conditions to get these counts.\n\n**Step 4:** Calculate the percentage.\n- Divide the count from Step 2",
    sql="```sql\nSELECT \n    (COUNT(p.id) FILTER (WHERE u.country = 'CA' AND p.hashtags LIKE '%#travel%') * 100.0 / COUNT(u.id)) AS percentage_travel_users_in_CA\nFROM posts p\nJOIN users u ON p.user_id = u.id;\n```"
), 1), (Example({'sql_prompt': 'What is the total number of points scored by each team in the NBA this season?', 'sql_context': "CREATE TABLE nba_teams (team_name TEXT, points_scored INT); INSERT INTO nba_teams (team_name, points_scored) VALUES ('Cavaliers', 8000), ('Warriors', 8500), ('Celtics', 7500);", 'sql': 'SELECT team_name, SUM(points_scored) FROM nba_teams GROUP BY team_name;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='1. **Understanding the SQL Query**: The query `SELECT AVG(temperature) FROM ArcticResearchLab GROUP BY year;` aims to calculate the average temperature for each year from a dataset named `ArcticResearchLab`.\n\n2. **Step-by-Step Reasoning**:\n   - **Identify the Table and Columns**: First, identify that we are working with the table `ArcticResearchLab`, which presumably contains data related to Arctic research or climate studies.\n   - **Understand the Function**: The `AVG()` function calculates the average of a set of values. In this case, it will calculate the average temperature for each year.\n   - **Grouping by Year**: The `GROUP BY` clause is used to group rows that',
    sql='SELECT team_name, SUM(points_scored) FROM nba_teams;'
), 1), (Example({'sql_prompt': 'What is the highest number of hat-tricks scored by a player in a single Bundesliga season?', 'sql_context': "CREATE TABLE german_teams (team_id INT, team_name VARCHAR(50)); INSERT INTO german_teams (team_id, team_name) VALUES (1, 'Bayern Munich'), (2, 'Borussia Dortmund'), (3, 'RB Leipzig'); CREATE TABLE german_matches (match_id INT, home_team_id INT, away_team_id INT, home_team_player_hat_tricks INT, away_team_player_hat_tricks INT); INSERT INTO german_matches (match_id, home_team_id, away_team_id, home_team_player_hat_tricks, away_team_player_hat_tricks) VALUES (1, 1, 2, 1, 0), (2, 2, 3, 0, 1), (3, 3, 1, 1, 0);", 'sql': 'SELECT MAX(home_team_player_hat_tricks + away_team_player_hat_tricks) AS max_hat_tricks FROM german_matches;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="answer the SQL prompt. \n\nThe prompt asks for the highest number of hat-tricks scored by a player in a single Bundesliga season. To find this information, we need to:\n\n1. Identify all matches where at least one team had a player score a hat-trick (i.e., scoring 3 or more goals).\n2. Sum up the total number of hat-tricks for each match.\n3. Find the maximum value from these sums.\n\nHere's how you can write the SQL query to achieve this:\n\n```sql\nSELECT MAX(home_team_player_hat_tricks + away_team_player_hat_tricks) AS max_hat_tricks_in_a_season\nFROM german_matches;\n```\n\nThis query works as follows:\n- `MAX()` function is used",
    sql='```sql\nSELECT MAX(home_team_player_hat_tricks + away_team_player_hat_tricks) AS max_hat_tricks_in_a_season \nFROM german_matches;\n```'
), 1), (Example({'sql_prompt': "What is the average word count for articles published in the 'news' schema, grouped by author?", 'sql_context': "CREATE TABLE news.articles (article_id INT, title VARCHAR(100), author VARCHAR(100), word_count INT); INSERT INTO news.articles (article_id, title, author, word_count) VALUES (1, 'Article 1', 'John Doe', 500), (2, 'Article 2', 'Jane Doe', 600), (3, 'Article 3', 'John Doe', 700);", 'sql': 'SELECT author, AVG(word_count) FROM news.articles GROUP BY author;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='answer the SQL prompt. \n\n1. **Identify the table**: We need data from the `news.articles` table.\n\n2. **Understand the query goal**: The question asks for the average word count of articles, grouped by author.\n\n3. **SQL Query Construction**:\n   - **SELECT clause**: We want to select two things: the `author` and the `AVG(word_count)`. \n   - **FROM clause**: We specify that we are selecting from the `news.articles` table.\n   - **GROUP BY clause**: This is used to group our results by author, so we can calculate averages for each unique author.\n   - **WHERE clause** (optional): If there were any conditions to filter on, they',
    sql='SELECT author, AVG(word_count) as average_word_count FROM news.articles GROUP BY author;'
), 1), (Example({'sql_prompt': 'Show the total budget allocation for healthcare services in the top 5 states with the highest budget allocation', 'sql_context': 'CREATE TABLE healthcare_services (service_id INT, state_id INT, budget FLOAT);CREATE TABLE states (state_id INT, state_name TEXT);', 'sql': 'SELECT s.state_name, SUM(hs.budget)  FROM healthcare_services hs INNER JOIN states s ON hs.state_id = s.state_id GROUP BY s.state_name ORDER BY SUM(hs.budget) DESC LIMIT 5;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='1. **Identify the Top 5 States with Highest Budget Allocation**: First, we need to find out which are the top 5 states that have received the highest budget allocation for healthcare services. We can achieve this by ordering the `healthcare_services` table based on the `budget` column in descending order and then selecting the first 5 rows.\n\n   **SQL Query**:\n   ```sql\n   SELECT state_id, SUM(budget) as total_budget_allocation\n   FROM healthcare_services\n   GROUP BY state_id\n   ORDER BY total_budget_allocation DESC\n   LIMIT 5;\n   ```\n\n2. **Show Total Budget Allocation for Identified States**: Once we have the top 5 states with their respective total budget allocations, we',
    sql='SELECT SUM(hc.budget) as total_budget_allocation FROM healthcare_services hc JOIN states s ON hc.state_id = s.state_id WHERE s.state_name IN (SELECT state_name FROM (SELECT state_id, SUM(budget) as total_budget_allocation FROM healthcare_services GROUP BY state_id ORDER BY total_budget_allocation DESC LIMIT 5) AS top_states);'
), 1), (Example({'sql_prompt': 'Find the total volume of timber sold in 2021', 'sql_context': "CREATE TABLE forests (id INT, name VARCHAR(50), hectares DECIMAL(5,2), year_planted INT, PRIMARY KEY (id)); INSERT INTO forests (id, name, hectares, year_planted) VALUES (1, 'Forest A', 123.45, 1990), (2, 'Forest B', 654.32, 1985); CREATE TABLE timber_sales (id INT, forest_id INT, year INT, volume DECIMAL(10,2), PRIMARY KEY (id)); INSERT INTO timber_sales (id, forest_id, year, volume) VALUES (1, 1, 2021, 120.50), (2, 1, 2022, 150.75), (3, 2, 2021, 450.23), (4, 2, 2022, 520.89);", 'sql': 'SELECT SUM(ts.volume) FROM timber_sales ts INNER JOIN forests f ON ts.forest_id = f.id WHERE ts.year = 2021;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Find the total volume of timber sold in 2021:\n\n1. **Identify the relevant tables**: We have two tables here - `forests` and `timber_sales`. The `forests` table provides information about each forest, while the `timber_sales` table contains details about sales made from these forests.\n\n2. **Join the tables**: To find out which forests were involved in timber sales in 2021, we need to join these two tables on a common key - the `forest_id`. This will allow us to match each sale with its corresponding forest.\n\n3. **Filter by year**: Once joined, we can filter our results to only include sales from the year 2021.',
    sql='SELECT SUM(timber_sales.volume) AS total_volume FROM timber_sales JOIN forests ON timber_sales.forest_id = forests.id WHERE timber_sales.year = 2021;'
), 1), (Example({'sql_prompt': 'Who are the top 3 suppliers of recycled polyester?', 'sql_context': "CREATE TABLE suppliers (id INT, name VARCHAR(255), material VARCHAR(255)); INSERT INTO suppliers (id, name, material) VALUES (1, 'Supplier A', 'Recycled Polyester'), (2, 'Supplier B', 'Organic Cotton'), (3, 'Supplier C', 'Recycled Polyester'), (4, 'Supplier D', 'Hemp'), (5, 'Supplier E', 'Recycled Polyester');", 'sql': "SELECT name FROM suppliers WHERE material = 'Recycled Polyester' GROUP BY name ORDER BY COUNT(*) DESC LIMIT 3;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="1. **Identify the SQL Query for Top 3 Suppliers of Recycled Polyester**\n\n   To find out who are the top 3 suppliers of recycled polyester, we need to filter our data based on the `material` column and then sort it in descending order to get the suppliers with the highest quantity or number of supplies (assuming each entry represents a supply). Since there's no specific quantity information provided for each supplier, we'll assume that each unique supplier is counted as one supply.\n\n   **SQL Query:**\n   ```sql\n   SELECT name \n   FROM suppliers \n   WHERE material = 'Recycled Polyester' \n   ORDER BY id ASC -- Assuming the order in which records are inserted represents their rank (highest to lowest)\n   LIMIT",
    sql="SELECT name FROM suppliers WHERE material = 'Recycled Polyester' ORDER BY id ASC LIMIT 3;"
), 1), (Example({'sql_prompt': "How many donors have donated more than $100 in the 'Donations' table?", 'sql_context': "CREATE TABLE Donations (DonorID INT, DonationDate DATE, Amount DECIMAL(10, 2)); INSERT INTO Donations (DonorID, DonationDate, Amount) VALUES (1, '2022-02-01', 120.00), (2, '2022-01-15', 75.00), (3, '2022-03-05', 150.00);", 'sql': 'SELECT COUNT(*) FROM Donations WHERE Amount > 100;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Solve the SQL queries for each prompt:\n\n### Prompt 1:\n**Delete records from the 'resource_depletion' table where the 'resource_type' is 'Coal'**\n\nGiven context:\n```sql\nCREATE TABLE resource_depletion (id INT, resource_type VARCHAR(20), quantity INT, depletion_date DATE);\nINSERT INTO resource_depletion (id, resource_type, quantity, depletion_date) VALUES (1, 'Coal', 1000, '2020-01-01'), (2, 'Iron Ore', 500, '2019-12-31'), (3, 'Coal', 1500, '2018-12",
    sql="DELETE FROM resource_depletion WHERE resource_type = 'Coal';"
), 0), (Example({'sql_prompt': "Update the 'Angkor Wat' excavation to have a start date of 1300-01-01.", 'sql_context': "CREATE TABLE ExcavationSites (SiteID INT PRIMARY KEY, Name VARCHAR(255), Country VARCHAR(255), StartDate DATE, EndDate DATE); INSERT INTO ExcavationSites (SiteID, Name, Country, StartDate, EndDate) VALUES (5, 'Angkor Wat', 'Cambodia', '1860-01-01', '1860-05-01');", 'sql': "UPDATE ExcavationSites SET StartDate = '1300-01-01' WHERE Name = 'Angkor Wat';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Update the record for "Angkor Wat" excavation with a start date of 1300-01-01. \n\nFirstly, we need to identify the row that corresponds to \'Angkor Wat\'. This can be done using a SELECT statement with a WHERE clause specifying the name.\n\nOnce we have identified this row, we can then use an UPDATE statement to modify the StartDate field of this specific row to our desired date, which is 1300-01-01. \n\nHere\'s how you would write the SQL query:\n\n```sql\nUPDATE ExcavationSites \nSET StartDate = \'1300-01-01\' \nWHERE Name = \'Angkor Wat\';\n``',
    sql="UPDATE ExcavationSites SET StartDate = '1300-01-01' WHERE Name = 'Angkor Wat';"
), 1), (Example({'sql_prompt': 'Calculate the total CO2 emissions (in metric tons) per capita for each country in the population_data and carbon_emissions tables.', 'sql_context': 'CREATE TABLE population_data (country VARCHAR(50), year INT, population INT); CREATE TABLE carbon_emissions (country VARCHAR(50), year INT, co2_emissions FLOAT);', 'sql': 'SELECT p.country, AVG(co2_emissions/population*1000000) as co2_emissions_per_capita FROM population_data p JOIN carbon_emissions c ON p.country = c.country GROUP BY p.country;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="solve this SQL query. \n\n1. **Join Tables**: First, we need to join the `population_data` and `carbon_emissions` tables on their common column which is 'country' and 'year'. This will allow us to match each country's population with its corresponding CO2 emissions.\n\n```sql\nSELECT pd.country,\n       ce.year,\n       (ce.co2_emissions / pd.population) * 1000 AS co2_per_capita_tons\nFROM population_data pd \nJOIN carbon_emissions ce ON pd.country = ce.country AND pd.year = ce.year;\n```\n\nHere, we divide the CO2 emissions by the population to get the per capita emissions. The result is multiplied by 1000",
    sql='```sql\nSELECT pd.country, ce.year, (ce.co2_emissions / pd.population) * 1000 AS co2_per_capita_tons FROM population_data pd JOIN carbon_emissions ce ON pd.country = ce.country AND pd.year = ce.year;\n```'
), 1), (Example({'sql_prompt': "How many rural infrastructure projects were completed in '2022' in the 'Asia-Pacific' region?", 'sql_context': "CREATE TABLE rural_infrastructure(id INT, project TEXT, location TEXT, completion_year INT); INSERT INTO rural_infrastructure (id, project, location, completion_year) VALUES (1, 'Rural Road Project', 'Asia-Pacific', 2022);", 'sql': "SELECT COUNT(*) FROM rural_infrastructure WHERE location = 'Asia-Pacific' AND completion_year = 2022;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To answer the SQL prompt about how many rural infrastructure projects were completed in '2022' in the 'Asia-Pacific' region, we need to:\n\n1. Identify the relevant columns and rows from our `rural_infrastructure` table.\n2. Filter for projects that have a completion year of 2022.\n3. Filter for projects located in the 'Asia-Pacific' region.\n4. Count the number of matching records.\n\nHere's how we can write this SQL query:\n\n```sql\nSELECT COUNT(*) \nFROM rural_infrastructure \nWHERE completion_year = 2022 AND location = 'Asia-Pacific';\n```\n\nThis query will return a single row with the count of projects that meet both criteria: completed in",
    sql="SELECT COUNT(*) FROM rural_infrastructure WHERE completion_year = 2022 AND location = 'Asia-Pacific';"
), 1), (Example({'sql_prompt': "What is the average horsepower of luxury vehicles in the 'GreenCar' database produced after 2017?", 'sql_context': 'CREATE TABLE LuxuryVehicles (Id INT, Make VARCHAR(50), Model VARCHAR(50), Year INT, Horsepower INT);', 'sql': 'SELECT AVG(Horsepower) FROM LuxuryVehicles WHERE Year > 2017;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="answer this SQL query. \n\nFirstly, we need to select the horsepower column from the LuxuryVehicles table.\n\nSecondly, we should filter out vehicles produced before 2017 using a WHERE clause with the condition `Year > 2017`.\n\nLastly, we calculate the average of these filtered horsepower values by using the AVG() function.\n\nThe SQL query would look like this:\n\n```sql\nSELECT AVG(Horsepower) AS AverageHorsepower \nFROM LuxuryVehicles \nWHERE Year > 2017;\n```\n\nThis query will return the average horsepower for luxury vehicles produced after 2017 in the 'GreenCar' database.",
    sql='```sql\nSELECT AVG(Horsepower) AS AverageHorsepower \nFROM LuxuryVehicles \nWHERE Year > 2017;\n```'
), 1), (Example({'sql_prompt': 'What is the maximum response time for emergency calls in the city of Los Angeles?', 'sql_context': 'CREATE TABLE emergency_calls (id INT, city VARCHAR(20), response_time INT);', 'sql': "SELECT MAX(response_time) FROM emergency_calls WHERE city = 'Los Angeles';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="answer this SQL query. \n\n1. **Identify the relevant table**: The `emergency_calls` table contains information about emergency calls.\n\n2. **Identify the required fields**: We need the maximum (`MAX`) response time for emergency calls, and we're interested specifically in the city of Los Angeles.\n\n3. **Formulate the SQL query**:\n\n    - Select the maximum (`MAX`) value from the `response_time` column.\n    - Filter the results to only include rows where the `city` is 'Los Angeles'.\n\nThe SQL query would look like this:\n\n```sql\nSELECT MAX(response_time) \nFROM emergency_calls \nWHERE city = 'Los Angeles';\n```\n\nThis query will return the maximum response time for emergency calls in Los",
    sql="```sql\nSELECT MAX(response_time)\nFROM emergency_calls\nWHERE city = 'Los Angeles';\n```"
), 1), (Example({'sql_prompt': 'What is the maximum loan amount for socially responsible loans in the Asia-Pacific region?', 'sql_context': "CREATE TABLE socially_responsible_loans (loan_id INT, region VARCHAR(20), loan_amount DECIMAL(10,2)); INSERT INTO socially_responsible_loans (loan_id, region, loan_amount) VALUES (101, 'Asia-Pacific', 50000), (102, 'Europe', 30000), (103, 'Asia-Pacific', 70000);", 'sql': "SELECT MAX(srl.loan_amount) FROM socially_responsible_loans srl WHERE srl.region = 'Asia-Pacific';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Find the maximum loan amount for socially responsible loans in the Asia-Pacific region. \n\nStep 1: Identify the relevant table and column.\n- The relevant table is `socially_responsible_loans`.\n- The relevant column is `loan_amount`.\n\nStep 2: Filter the data based on the conditions.\n- We need to filter by `region` being 'Asia-Pacific'.\n\nStep 3: Find the maximum value in the filtered dataset for the `loan_amount` column.\n\nSQL Query:\n```sql\nSELECT MAX(loan_amount) AS max_loan_amount \nFROM socially_responsible_loans \nWHERE region = 'Asia-Pacific';\n```\n\nThis query will return the maximum loan amount for socially responsible loans within the Asia-Pacific region.",
    sql="SELECT MAX(loan_amount) AS max_loan_amount FROM socially_responsible_loans WHERE region = 'Asia-Pacific';"
), 1), (Example({'sql_prompt': 'What is the maximum number of years a traditional art form has been preserved in each country?', 'sql_context': "CREATE TABLE countries (id INT, name TEXT); INSERT INTO countries (id, name) VALUES (1, 'Nigeria'), (2, 'Brazil'); CREATE TABLE art_forms (id INT, country_id INT, name TEXT, year_preserved INT); INSERT INTO art_forms (id, country_id, name, year_preserved) VALUES (1, 1, 'Tie-dye', 500), (2, 1, 'Batik', 1000), (3, 2, 'Capoeira', 400);", 'sql': 'SELECT c.name, MAX(af.year_preserved) FROM countries c JOIN art_forms af ON c.id = af.country_id GROUP BY c.id;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="answer these SQL queries:\n\n### Query 1:\n**Prompt**: Delete records from the `resource_depletion` table where the `resource_type` is 'Coal'.\n\n**Context**:\n```\nCREATE TABLE resource_depletion (id INT, resource_type VARCHAR(20), quantity INT, depletion_date DATE);\nINSERT INTO resource_depletion (id, resource_type, quantity, depletion_date) VALUES (1, 'Coal', 1000, '2020-01-01'), (2, 'Iron Ore', 500, '2019-12-31'), (3, 'Coal', 1500, '2018-12-31",
    sql="DELETE FROM resource_depletion WHERE resource_type = 'Coal';"
), 0), (Example({'sql_prompt': 'What is the maximum hourly wage for each labor category in the construction industry?', 'sql_context': 'CREATE TABLE labor_statistics (id INT, industry VARCHAR(255), category VARCHAR(255), title VARCHAR(255), hourly_wage DECIMAL(5,2));', 'sql': "SELECT industry, category, MAX(hourly_wage) as max_hourly_wage FROM labor_statistics WHERE industry = 'construction' GROUP BY industry, category;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="answer this SQL query. \n\n1. **Identify the relevant table**: The `labor_statistics` table contains information about labor statistics across different industries and categories.\n\n2. **Filter for construction industry**: We need data only from the construction industry, so we will use a WHERE clause with `industry = 'construction'`.\n\n3. **Group by category**: To find the maximum hourly wage for each labor category, we first group the results by the `category` column.\n\n4. **Find maximum hourly wage per category**: For each group of categories, we need to find the highest (maximum) hourly wage. This can be achieved using a MAX function in combination with an aggregate function.\n\n5. **Order and limit if necessary**: Depending on the",
    sql="SELECT category, MAX(hourly_wage) FROM labor_statistics WHERE industry = 'construction' GROUP BY category;"
), 1), (Example({'sql_prompt': 'List all the drought-impacted counties in Texas in 2018.', 'sql_context': "CREATE TABLE drought_impact(county VARCHAR(20), state VARCHAR(20), year INT, impacted BOOLEAN); INSERT INTO drought_impact(county, state, year, impacted) VALUES ('Harris', 'Texas', 2015, true), ('Harris', 'Texas', 2016, true), ('Harris', 'Texas', 2017, true), ('Harris', 'Texas', 2018, true), ('Bexar', 'Texas', 2015, false), ('Bexar', 'Texas', 2016, false), ('Bexar', 'Texas', 2017, false), ('Bexar', 'Texas', 2018, false);", 'sql': "SELECT county FROM drought_impact WHERE state = 'Texas' AND year = 2018 AND impacted = true;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To list all the drought-impacted counties in Texas in 2018 from the given SQL context, we need to:\n\n1. Identify the table that contains information about drought impact.\n2. Look for rows where `state` is 'Texas' and `year` is 2018.\n3. Filter out those rows where `impacted` is true (indicating a drought-impacted county).\n\nThe SQL query would look like this:\n\n```sql\nSELECT county \nFROM drought_impact \nWHERE state = 'Texas' AND year = 2018 AND impacted = true;\n```\n\nThis query will return the list of counties in Texas that were impacted by drought in 2018.",
    sql="SELECT county FROM drought_impact WHERE state = 'Texas' AND year = 2018 AND impacted = true;"
), 1), (Example({'sql_prompt': 'Find the top 3 genres with the highest revenue in 2022 for streaming services in the USA.', 'sql_context': "CREATE TABLE streaming_services (service_id INT, service_name VARCHAR(255), revenue DECIMAL(10,2)); INSERT INTO streaming_services (service_id, service_name, revenue) VALUES (1, 'StreamingCo', 5000000.00); CREATE TABLE genre_sales (sale_id INT, service_id INT, genre VARCHAR(255), sales DECIMAL(10,2)); INSERT INTO genre_sales (sale_id, service_id, genre, sales) VALUES (1, 1, 'Rock', 150000.00);", 'sql': "SELECT genre, SUM(sales) as total_sales FROM genre_sales gs JOIN streaming_services s ON gs.service_id = s.service_id WHERE s.service_country = 'USA' AND s.service_year = 2022 GROUP BY genre ORDER BY total_sales DESC LIMIT 3;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Solve the SQL prompts:\n\n### Prompt 1: Delete records from the 'resource_depletion' table where the 'resource_type' is 'Coal'\n\n**SQL Query:**\n```sql\nDELETE FROM resource_depletion WHERE resource_type = 'Coal';\n```\n\n### Reasoning:\n- The `DELETE FROM` statement removes all rows that match the specified condition.\n- Here, we're removing records from the `resource_depletion` table where the `resource_type` is 'Coal'.\n\n### Prompt 2: Find the total attendance at poetry readings in San Francisco\n\n**SQL Query:**\n```sql\nSELECT SUM(attendance) FROM events WHERE event_type = 'Poetry Reading' AND city = 'San Francisco';\n```\n\n### Reasoning",
    sql="```sql\nSELECT genre, SUM(sales) as total_revenue \nFROM genre_sales \nJOIN streaming_services ON genre_sales.service_id = streaming_services.service_id \nWHERE streaming_services.country = 'USA' AND YEAR(streaming_services.revenue) = 2022 \nGROUP BY genre \nORDER BY total_revenue DESC \nLIMIT 3;\n```"
), 0), (Example({'sql_prompt': "List all unique fields from the 'geology' and 'infrastructure' tables.", 'sql_context': 'CREATE TABLE geology (well_id INT, rock_type VARCHAR(50)); CREATE TABLE infrastructure (well_id INT, platform_type VARCHAR(50));', 'sql': "SELECT field FROM (SELECT 'geology' as table_name, column_name as field FROM information_schema.columns WHERE table_name = 'geology' UNION ALL SELECT 'infrastructure' as table_name, column_name as field FROM information_schema.columns WHERE table_name = 'infrastructure') as subquery;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="1. **List all unique fields from the 'geology' and 'infrastructure' tables.**\n\nTo list all unique fields from both the `geology` and `infrastructure` tables, we need to select distinct values for each column across these two tables.\n\n**SQL Query:**\n```sql\nSELECT DISTINCT geology.well_id, geology.rock_type, infrastructure.platform_type \nFROM geology \nJOIN infrastructure ON geology.well_id = infrastructure.well_id;\n```\n\nThis query uses a `JOIN` clause to match rows in both tables based on the common column (`well_id`). The `DISTINCT` keyword ensures that only unique combinations of values are returned.\n\n2. **Delete records from the 'resource_depletion",
    sql="DELETE FROM resource_depletion WHERE depletion_date < CURRENT_DATE - INTERVAL '1 year';"
), 0), (Example({'sql_prompt': 'Calculate the percentage of total Europium production for each country.', 'sql_context': 'CREATE TABLE europium_production (country VARCHAR(50), quantity INT);', 'sql': 'SELECT country, quantity * 100.0 / SUM(quantity) OVER (PARTITION BY NULL) AS percentage FROM europium_production;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="solve this SQL query. \n\n1. **Summarize Total Production**: First, we need to find the total amount of Europium produced across all countries. This can be done using a `SUM` function on the 'quantity' column.\n\n2. **Calculate Individual Country's Production Percentage**: For each country, we want to know what percentage of the total production it represents. To do this, we divide the quantity of Europium produced by each country by the total production and then multiply by 100 to get a percentage.\n\n3. **Join or Aggregate Data**: Since we're interested in percentages for each country, we need to group our data by 'country'. This can be done using `GROUP BY` clause if we were dealing",
    sql="```sql\nSELECT \n    country,\n    (quantity * 100.0 / (SELECT SUM(quantity) FROM europium_production)) AS percentage_of_total\nFROM \n    europium_production;\n```\n\nReasoning:\n- The `SELECT` statement is used to retrieve the 'country' and a calculated column for the percentage of total Europium production.\n- The calculation `(quantity * 100.0 / (SELECT SUM(quantity) FROM europium_production))` computes the percentage by dividing each country's quantity by the total sum of quantities across all countries, then multiplying by 100 to convert it into a percentage.\n- The `FROM europium_production` clause specifies that we are selecting from the 'europium_production"
), 1), (Example({'sql_prompt': 'Find the mobile subscribers with consecutive speed drops greater than 25% for the last 3 months, ordered by subscription IDs.', 'sql_context': 'CREATE TABLE mobile_usage_detailed (subscriber_id INT, month INT, speed FLOAT); INSERT INTO mobile_usage_detailed (subscriber_id, month, speed) VALUES (1, 1, 100), (1, 2, 80), (1, 3, 70), (2, 1, 200), (2, 2, 180), (2, 3, 160), (3, 1, 150), (3, 2, 130), (3, 3, 110);', 'sql': 'SELECT subscriber_id, speed, month FROM (SELECT subscriber_id, speed, month, LAG(speed, 1) OVER (PARTITION BY subscriber_id ORDER BY month) as prev_speed, LAG(speed, 2) OVER (PARTITION BY subscriber_id ORDER BY month) as prev_prev_speed FROM mobile_usage_detailed) t WHERE t.speed < 0.75 * t.prev_speed AND t.speed < 0.75 * t.prev_prev_speed ORDER BY subscriber_id;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="solve this SQL query. \n\nFirstly, we need to find the speed drops greater than 25% for each subscriber between consecutive months. To calculate a percentage drop, we can use the formula:\n\n(new value - old value) / old value * 100%\n\nIn our case, it would be (current month's speed - previous month's speed) / previous month's speed * 100%. \n\nSecondly, we need to filter out those drops that are greater than 25%.\n\nLastly, we should order the results by subscription IDs.\n\nHere is how you can write this SQL query:\n\n```sql\nWITH speed_drops AS (\n    SELECT \n        subscriber_id,\n        month,\n        (speed - LAG",
    sql='WITH speed_changes AS (\n    SELECT \n        subscriber_id,\n        month,\n        speed,\n        LEAD(speed) OVER (PARTITION BY subscriber_id ORDER BY month) - speed AS speed_drop\n    FROM mobile_usage_detailed\n),\nfiltered_speed_changes AS (\n    SELECT * FROM speed_changes\n    WHERE ABS(CAST((speed_drop / speed) * 100.0 AS REAL)) > 25\n)\nSELECT subscriber_id, min(month) as first_month_of_drop, max(month) as last_month_of_drop FROM filtered_speed_changes GROUP BY subscriber_id ORDER BY subscriber_id;\n\n```'
), 0), (Example({'sql_prompt': 'What is the distribution of AI safety research topics by year?', 'sql_context': "CREATE TABLE if not exists ai_safety_research (year INT, topic VARCHAR(255)); INSERT INTO ai_safety_research (year, topic) VALUES (2018, 'Explainable AI'), (2019, 'Algorithmic fairness'), (2020, 'AI safety'), (2021, 'Robust AI'), (2022, 'AI ethics');", 'sql': 'SELECT year, topic, COUNT(*) OVER (PARTITION BY year) as research_count FROM ai_safety_research ORDER BY year;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="answer the SQL prompts:\n\n### 1. Total attendance at poetry readings in San Francisco\n\n**SQL Query:**\n```sql\nSELECT SUM(attendance) AS total_attendance FROM events WHERE event_type = 'Poetry Reading' AND city = 'San Francisco';\n```\n\n### 2. Delete records from the 'resource_depletion' table where the 'resource_type' is 'Coal'\n\n**SQL Query:**\n```sql\nDELETE FROM resource_depletion WHERE resource_type = 'Coal';\n```\n\n### 3. What was the total attendance at poetry readings in San Francisco?\n\n**SQL Query:**\n```sql\nSELECT SUM(attendance) AS total_attendance FROM events WHERE event_type = 'Poetry Reading' AND city = 'San",
    sql='SELECT COUNT(*) as total_attendance FROM ai_safety_research;'
), 0), (Example({'sql_prompt': "How many forest management practices are recorded in the 'tropical_forests'?", 'sql_context': "CREATE TABLE forest_management (id INT, forest_type VARCHAR(50), practice_count INT); INSERT INTO forest_management (id, forest_type, practice_count) VALUES (1, 'Tropical Forests', 45); INSERT INTO forest_management (id, forest_type, practice_count) VALUES (2, 'Temperate Forests', 34);", 'sql': "SELECT practice_count FROM forest_management WHERE forest_type = 'Tropical Forests';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To answer the SQL prompt about how many forest management practices are recorded in the 'tropical_forests', we need to:\n\n1. Identify the table that contains information on forest management.\n2. Look for rows where `forest_type` is equal to `'Tropical Forests'`.\n3. Count the number of such rows.\n\nGiven the SQL context provided, which includes a table named `forest_management`, and assuming it has columns `id`, `forest_type`, and `practice_count`, we can write an SQL query as follows:\n\n```sql\nSELECT COUNT(*) \nFROM forest_management \nWHERE forest_type = 'Tropical Forests';\n```\n\nThis query will return the total number of records where the `forest_type` is `'Tropical Forest",
    sql="SELECT COUNT(*) FROM forest_management WHERE forest_type = 'Tropical Forests';"
), 1), (Example({'sql_prompt': 'What is the distribution of lifelong learning course enrollments by age group, in total?', 'sql_context': 'CREATE TABLE lifelong_learning (student_id INT, age_group VARCHAR(255), course_id INT); CREATE TABLE courses (course_id INT, course_name VARCHAR(255));', 'sql': 'SELECT l.age_group, COUNT(l.course_id) FROM lifelong_learning l INNER JOIN courses c ON l.course_id = c.course_id GROUP BY l.age_group;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="1. **Understanding the SQL Query for Arctic Research Lab Data**:\n   - The SQL query `SELECT AVG(temperature) FROM ArcticResearchLab GROUP BY year;` aims to calculate the average temperature for each year in the dataset.\n   - First, it groups all records by their 'year' field using `GROUP BY year`.\n   - Then, for each group (each year), it calculates the average of the 'temperature' column using `AVG(temperature)`.\n\n2. **Deleting Records from Resource Depletion Table**:\n   - The SQL command `DELETE FROM resource_depletion WHERE resource_type = 'Coal';` is used to remove all records where the 'resource_type' field equals 'Coal'.\n   - This operation directly modifies",
    sql='```sql\nSELECT age_group, COUNT(*) AS total_enrollments\nFROM lifelong_learning\nGROUP BY age_group;\n```\n\nReasoning:\n1. **Identify the Table and Columns**: The query targets the `lifelong_learning` table which contains information about course enrollments by students.\n2. **Grouping Data**: It groups the data by `age_group`, allowing us to aggregate records that belong to the same age group together.\n3. **Counting Records**: For each unique `age_group`, it counts the number of records (enrollments) using `COUNT(*)`. This gives us the total number of enrollments for each age group.\n4. **Result**: The result will be a list where each entry shows an'
), 1), (Example({'sql_prompt': "Insert new records into the Employee table with the following data: EmployeeID 3, FirstName 'Mike', LastName 'Smith', Department 'Environment'.", 'sql_context': 'CREATE TABLE Employee (EmployeeID INT, FirstName VARCHAR(50), LastName VARCHAR(50), Department VARCHAR(50));', 'sql': "INSERT INTO Employee (EmployeeID, FirstName, LastName, Department) VALUES (3, 'Mike', 'Smith', 'Environment');"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='insert the new records into the `Employee` table. \n\n1. **Identify the SQL command for inserting data**: The SQL command used for inserting data into a table is `INSERT INTO`. This command allows us to add one or more rows of data into our database.\n\n2. **Structure the INSERT statement**: We need to specify the table name (`Employee`) and then list the columns we want to insert values into, followed by their corresponding values in parentheses. The syntax would look like this:\n\n   ```\n   INSERT INTO Employee (EmployeeID, FirstName, LastName, Department)\n   VALUES (value_for_EmployeeID, value_for_FirstName, value_for_LastName, value_for_Department);\n   ```\n\n3. **Substitute the placeholders',
    sql="INSERT INTO Employee (EmployeeID, FirstName, LastName, Department)\nVALUES (3, 'Mike', 'Smith', 'Environment');"
), 1), (Example({'sql_prompt': 'Which cosmetic brands have the highest average customer rating?', 'sql_context': "CREATE TABLE brand (id INT, name VARCHAR(255), avg_rating FLOAT); CREATE TABLE rating (brand_id INT, rating FLOAT); INSERT INTO brand (id, name, avg_rating) VALUES (1, 'Lush', 4.2), (2, 'The Body Shop', 4.1), (3, 'Sephora', 4.3); INSERT INTO rating (brand_id, rating) VALUES (1, 4.5), (1, 4.0), (2, 4.1), (2, 4.2), (3, 4.4), (3, 4.3);", 'sql': 'SELECT b.name, AVG(r.rating) as avg_rating FROM brand b JOIN rating r ON b.id = r.brand_id GROUP BY b.name ORDER BY avg_rating DESC;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Find the cosmetic brands with the highest average customer rating:\n\n1. **Join Tables**: First, we need to join the `brand` and `rating` tables on their common column (`brand_id`). This will allow us to match each brand with its corresponding ratings.\n\n2. **Calculate Average Rating per Brand**: After joining, we calculate the average rating for each brand by summing up all the ratings associated with a specific brand and dividing it by the number of ratings (which is implicitly handled in SQL when calculating an average).\n\n3. **Order Results**: Finally, we order the results based on the calculated average rating to find out which brands have the highest average customer rating.\n\nHere's how you can write this query:\n\n```sql\nSELECT b.name",
    sql='SELECT b.name, AVG(r.rating) as avg_rating \nFROM brand b \nJOIN rating r ON b.id = r.brand_id \nGROUP BY b.name \nORDER BY avg_rating DESC;```'
), 1), (Example({'sql_prompt': 'How many unique volunteers worked on projects in each cause area?', 'sql_context': "CREATE TABLE volunteers (id INT, name VARCHAR(30), cause_area VARCHAR(20)); INSERT INTO volunteers (id, name, cause_area) VALUES (1, 'Bob', 'children'), (2, 'Alice', 'children'), (3, 'Charlie', 'health');", 'sql': 'SELECT cause_area, COUNT(DISTINCT name) FROM volunteers GROUP BY cause_area;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="answer the SQL prompts. \n\n### 1. Average Temperature in Arctic Research Lab\n\n**Prompt**: What is the average temperature recorded in the ArcticResearchLab dataset?\n\n**SQL Query**:\n```sql\nSELECT AVG(temperature) AS avg_temperature FROM arctic_research_data;\n```\n\n### 2. Deleting Coal Records from Resource Depletion Table\n\n**Prompt**: Delete records from the 'resource_depletion' table where the 'resource_type' is 'Coal'.\n\n**SQL Query**:\n```sql\nDELETE FROM resource_depletion WHERE resource_type = 'Coal';\n```\n\n### 3. Total Attendance at Poetry Readings in San Francisco\n\n**Prompt**: What was the total attendance at poetry readings held in San Francisco?\n\n**SQL Query**",
    sql="SELECT SUM(attendance) AS total_attendance FROM poetry_readings WHERE location = 'San Francisco';\n\n---\n\n### 4. Number of Employees by Department\n\n**Prompt**: How many employees are there in each department?\n\n**SQL Query**: \n```sql\nSELECT department, COUNT(employee_id) as num_employees\nFROM employees\nGROUP BY department;\n```\n\n### 5. Total Sales for Each Product Category\n\n**Prompt**: What is the total sales amount for each product category?\n\n**SQL Query**: \n```sql\nSELECT product_category, SUM(sales_amount) as total_sales\nFROM sales\nGROUP BY product_category;\n```\n\n### 6. Average Rating of Products by Supplier\n\n**Prompt**: Calculate the average rating given to products by"
), 0), (Example({'sql_prompt': 'Who were the top 3 content creators in terms of likes received on their posts in January 2022?', 'sql_context': "CREATE SCHEMA content; CREATE TABLE creators(creator_id INT, name VARCHAR(255), total_likes INT); INSERT INTO creators (creator_id, name, total_likes) VALUES (1, 'Alice', 5000); INSERT INTO creators (creator_id, name, total_likes) VALUES (2, 'Bob', 7000);", 'sql': 'SELECT name, SUM(total_likes) AS total_likes_january FROM content.creators WHERE MONTH(created_date) = 1 GROUP BY name ORDER BY total_likes_january DESC LIMIT 3;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="answer the SQL prompt. \n\nTo find out who were the top 3 content creators based on likes received on their posts in January 2022, we need a table that contains information about each creator and the number of likes they've received for their posts.\n\nHowever, it seems like there's no such table provided within the SQL context you've given. The `content` schema and tables (`creators`) only contain general information about creators but do not specify any details related to likes or posts made in January 2022.\n\nTo proceed with a solution, we would need an additional table that includes:\n\n1. **Post ID** - To uniquely identify each post.\n2. **Creator ID** - To link the creator to",
    sql='SELECT name FROM creators ORDER BY total_likes DESC LIMIT 3;'
), 1), (Example({'sql_prompt': "Update records in the 'Volunteers' table where the volunteer's skill level is 'Beginner' and change it to 'Intermediate'", 'sql_context': 'CREATE TABLE Volunteers (id INT PRIMARY KEY, volunteer_name VARCHAR(255), skill_level VARCHAR(255), last_volunteered DATE);', 'sql': "UPDATE Volunteers SET skill_level = 'Intermediate' WHERE skill_level = 'Beginner';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="update the records. \n\n1. **Identify the query**: We need to update a specific column ('skill_level') in the 'Volunteers' table.\n\n2. **Understand the condition**: The condition is that the skill level should be 'Beginner'. This means we will only target rows where `skill_level = 'Beginner'`.\n\n3. **Execute the SQL command**: We use an UPDATE statement to modify existing data in a database table. \n\n4. **Syntax of the SQL query**:\n   ```\n   UPDATE Volunteers\n   SET skill_level = 'Intermediate'\n   WHERE skill_level = 'Beginner';\n   ```\n\n5. **Explanation of each part**:\n   - `UPDATE Volunteers`: This specifies that we are updating",
    sql="```sql\nUPDATE Volunteers SET skill_level = 'Intermediate' WHERE skill_level = 'Beginner';\n```"
), 1), (Example({'sql_prompt': 'Identify the number of farmers involved in urban agriculture initiatives in California and New York in 2019.', 'sql_context': "CREATE TABLE Urban_Agriculture (Farmer_ID INT, State VARCHAR(20), Initiative VARCHAR(20), Year INT); INSERT INTO Urban_Agriculture (Farmer_ID, State, Initiative, Year) VALUES (101, 'California', 'Community_Garden', 2019), (102, 'California', 'Rooftop_Farming', 2019), (103, 'New_York', 'Community_Garden', 2019);", 'sql': "SELECT COUNT(DISTINCT Farmer_ID) FROM Urban_Agriculture WHERE State IN ('California', 'New York') AND Year = 2019 AND Initiative IN ('Community_Garden', 'Rooftop_Farming');"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Solve the SQL prompts:\n\n### Prompt 1:\n**Delete records from the 'resource_depletion' table where the 'resource_type' is 'Coal'**\n\nGiven context:\n```\nCREATE TABLE resource_depletion (id INT, resource_type VARCHAR(20), quantity INT, depletion_date DATE);\nINSERT INTO resource_depletion (id, resource_type, quantity, depletion_date) VALUES (1, 'Coal', 1000, '2020-01-01'), (2, 'Iron Ore', 500, '2019-12-31'), (3, 'Coal', 1500, '2018-12-31');",
    sql="DELETE FROM resource_depletion WHERE resource_type = 'Coal';"
), 0), (Example({'sql_prompt': "Update the accommodation type for a student with a StudentID of 2 from 'Assistive Listening Devices' to 'Sign Language Interpretation'.", 'sql_context': "CREATE TABLE StudentAccommodations (StudentID INT, StudentName VARCHAR(255), DisabilityType VARCHAR(255), AccommodationType VARCHAR(255), GraduationYear INT); INSERT INTO StudentAccommodations (StudentID, StudentName, DisabilityType, AccommodationType, GraduationYear) VALUES (1, 'John Doe', 'Visual Impairment', 'Sign Language Interpretation', 2018), (2, 'Jane Smith', 'Hearing Impairment', 'Assistive Listening Devices', NULL), (3, 'Michael Johnson', 'Mobility Impairment', 'Assistive Technology', 2019), (4, 'Sara Johnson', 'Physical Disability', 'Mobility Assistance', 2022);", 'sql': "UPDATE StudentAccommodations SET AccommodationType = 'Sign Language Interpretation' WHERE StudentID = 2;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Update the accommodation type for a student with StudentID of 2 from 'Assistive Listening Devices' to 'Sign Language Interpretation'. \n\n1. **Identify the table**: The relevant table is `StudentAccommodations` as it contains information about students and their accommodations.\n\n2. **Find the row to update**: We need to find the row where `StudentID = 2`. This will allow us to identify which record we want to modify.\n\n3. **Update the accommodation type**: Once we have identified the correct row, we can update the `AccommodationType` column from 'Assistive Listening Devices' to 'Sign Language Interpretation'.\n\nThe SQL query for this operation would be:\n\n```sql\nUPDATE Student",
    sql="UPDATE StudentAccommodations SET AccommodationType = 'Sign Language Interpretation' WHERE StudentID = 2;```"
), 1), (Example({'sql_prompt': 'What is the minimum square footage of an inclusive housing unit in the city of Miami?', 'sql_context': "CREATE TABLE housing (id INT, city VARCHAR(20), size INT, inclusive BOOLEAN); INSERT INTO housing (id, city, size, inclusive) VALUES (1, 'Miami', 800, TRUE), (2, 'Miami', 1000, FALSE), (3, 'Miami', 1200, TRUE);", 'sql': "SELECT MIN(size) FROM housing WHERE city = 'Miami' AND inclusive = TRUE;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Find the minimum square footage of an inclusive housing unit in Miami:\n\n1. **Identify Relevant Data**: We need data about housing units that are located in Miami and are inclusive (meaning they meet certain accessibility standards for people with disabilities).\n\n2. **Filter Data**: From the `housing` table, we want to select rows where:\n   - The city is 'Miami'.\n   - The housing unit is inclusive.\n\n3. **Extract Minimum Size**: Once we have filtered the data, we need to find the smallest size among these units.\n\nThe SQL query that accomplishes this would be:\n\n```sql\nSELECT MIN(size) AS min_inclusive_housing_size\nFROM housing\nWHERE city = 'Miami' AND inclusive = TRUE;\n```\n\nThis",
    sql="SELECT MIN(size) AS min_inclusive_housing_size FROM housing WHERE city = 'Miami' AND inclusive = TRUE;"
), 1), (Example({'sql_prompt': 'How many works were exhibited in the year 1950?', 'sql_context': "CREATE TABLE exhibitions (exhibition_id INT PRIMARY KEY, exhibition_name TEXT, year INT, location TEXT);CREATE TABLE exhibits (exhibit_id INT PRIMARY KEY, work_id INT, exhibition_id INT, FOREIGN KEY (work_id) REFERENCES works(work_id), FOREIGN KEY (exhibition_id) REFERENCES exhibitions(exhibition_id));INSERT INTO exhibitions (exhibition_id, exhibition_name, year, location) VALUES (1, 'Documenta', 1950, 'Kassel, Germany'); INSERT INTO exhibits (exhibit_id, work_id, exhibition_id) VALUES (1, 1, 1);", 'sql': 'SELECT COUNT(*) FROM exhibits e JOIN exhibitions ex ON e.exhibition_id = ex.exhibition_id WHERE ex.year = 1950;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Solve the SQL queries for each prompt:\n\n### Prompt 1: Find all UGEE IDs where region is 'Middle East'\n\n**SQL Query:**\n```sql\nSELECT ugee_id FROM regions WHERE region = 'Middle East';\n```\n\n**Reasoning:**\n- The `regions` table likely contains information about different regions.\n- We are looking for rows where the `region` column has a value of 'Middle East'.\n- Selecting `ugee_id` from these rows gives us the desired output.\n\n### Prompt 2: Delete records from 'resource_depletion' where resource type is 'Coal'\n\n**SQL Query:**\n```sql\nDELETE FROM resource_depletion WHERE resource_type = 'Coal';\n```\n\n**Reasoning",
    sql='SELECT COUNT(*) FROM exhibitions WHERE year = 1950;\n\nReasoning: To find the total number of works exhibited in the year 1950, we need to:\n\n- Select the count of all rows from the `exhibitions` table.\n- Filter these rows by where the `year` column equals 1950.\n\nThis SQL query will return a single value representing the total number of exhibitions that took place in the year 1950.'
), 0), (Example({'sql_prompt': 'What is the total number of articles written by each author in each region?', 'sql_context': "CREATE TABLE authors (id INT, name TEXT); CREATE TABLE regions (id INT, name TEXT); CREATE TABLE articles (id INT, title TEXT, content TEXT, author_id INT, region_id INT); INSERT INTO authors (id, name) VALUES (1, 'John Doe'), (2, 'Jane Smith'); INSERT INTO regions (id, name) VALUES (1, 'North'), (2, 'South'), (3, 'East'), (4, 'West'); INSERT INTO articles (id, title, content, author_id, region_id) VALUES (1, 'Article 1', 'Content 1', 1, 1), (2, 'Article 2', 'Content 2', 2, 2), (3, 'Article 3', 'Content 3', 1, 3), (4, 'Article 4', 'Content 4', 2, 4);", 'sql': 'SELECT authors.name, regions.name, COUNT(articles.id) FROM authors INNER JOIN articles ON authors.id = articles.author_id INNER JOIN regions ON regions.id = articles.region_id GROUP BY authors.name, regions.name;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="answer the SQL prompt. \n\nThe SQL query should join three tables - `authors`, `regions`, and `articles` on their respective IDs (`id`). Then we can group the results by author name (`name`) and region name (`name`) to count the number of articles each author has written in each region.\n\nHere's how you could write that SQL query:\n\n```sql\nSELECT \n    a.name AS Author,\n    r.name AS Region,\n    COUNT(a.id) AS Total_Articles\nFROM \n    authors a\nJOIN \n    regions r ON a.region_id = r.id\nJOIN \n    articles ar ON a.id = ar.author_id\nGROUP BY \n    a.name, r.name;\n```\n\nThis query first selects the",
    sql='```sql\nSELECT a.name AS Author, r.name AS Region, COUNT(ar.id) AS Total_Articles \nFROM authors a \nJOIN regions r ON a.region_id = r.id \nJOIN articles ar ON a.id = ar.author_id \nGROUP BY a.name, r.name;\n```\n\nThis SQL query follows the reasoning provided:\n\n1. **Authors Table (authors)**: This table contains information about each author with columns `id` and `name`.\n2. **Regions Table (regions)**: This table contains information about regions with columns `id` and `name`. The `region_id` in the `authors` table is used to link an author to a specific region.\n3. **Articles Table (articles)**: This table'
), 0), (Example({'sql_prompt': 'How many tunnels in Washington state were constructed after 2010?', 'sql_context': "CREATE TABLE tunnels (id INT, name TEXT, state TEXT, build_year INT); INSERT INTO tunnels (id, name, state, build_year) VALUES (1, 'WA-1 Underpass', 'WA', 2012);", 'sql': "SELECT COUNT(*) FROM tunnels WHERE state = 'WA' AND build_year > 2010;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="answer the SQL prompts:\n\n### Prompt 1:\n**What is the minimum number of passengers for shared autonomous vehicles in District 3?**\n\n**SQL Query:**\n```sql\nSELECT MIN(passengers) FROM shared_autonomous_vehicles WHERE district = '3';\n```\n\n### Prompt 2:\n**Delete records from the 'resource_depletion' table where the 'resource_type' is 'Coal'.**\n\n**SQL Query:**\n```sql\nDELETE FROM resource_depletion WHERE resource_type = 'Coal';\n```\n\n### Prompt 3:\n**What was the total attendance at poetry readings in San Francisco?**\n\n**SQL Query:**\n```sql\nSELECT SUM(attendance) FROM events WHERE event_type = 'Poetry Reading' AND city =",
    sql="SELECT COUNT(*) FROM tunnels WHERE state = 'Washington' AND build_year > 2010;"
), 1), (Example({'sql_prompt': 'List the top 5 models with the highest explainability scores and their development team names.', 'sql_context': 'CREATE TABLE ModelExplainabilityScores (ModelID INT, ExplainabilityScore INT, TeamID INT); CREATE TABLE TeamNames (TeamID INT, TeamName VARCHAR(50));', 'sql': 'SELECT ModelExplainabilityScores.ModelID, MAX(ModelExplainabilityScores.ExplainabilityScore) AS MaxExplainabilityScore, TeamNames.TeamName FROM ModelExplainabilityScores INNER JOIN TeamNames ON ModelExplainabilityScores.TeamID = TeamNames.TeamID GROUP BY ModelExplainabilityScores.TeamID ORDER BY MaxExplainabilityScore DESC, TeamNames.TeamName DESC LIMIT 5;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='1. **Retrieve the top 5 models with highest explainability scores**: We need to select the `ModelID` and `ExplainabilityScore` from the `ModelExplainabilityScores` table, sorted in descending order of `ExplainabilityScore`. The LIMIT clause will help us get only the top 5 records.\n\n2. **Join with TeamNames table**: To get the team names associated with each model, we need to join the `ModelExplainabilityScores` table with the `TeamNames` table on the common column `TeamID`.\n\n3. **Select required columns**: We select `ModelID`, `ExplainabilityScore`, and `TeamName` from both tables.\n\nHere is how you can write the SQL',
    sql='SELECT m.ModelID, m.ExplainabilityScore, tn.TeamName\nFROM ModelExplainabilityScores m\nJOIN TeamNames tn ON m.TeamID = tn.TeamID\nORDER BY m.ExplainabilityScore DESC\nLIMIT 5;'
), 1), (Example({'sql_prompt': 'How many renewable energy power plants are there in Texas?', 'sql_context': "CREATE TABLE power_plants (state VARCHAR(255), source_type VARCHAR(255), count INT); INSERT INTO power_plants (state, source_type, count) VALUES ('Texas', 'Wind', 45), ('Texas', 'Solar', 25), ('Texas', 'Hydro', 10);", 'sql': "SELECT SUM(count) FROM power_plants WHERE state = 'Texas';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='To answer the SQL prompt "How many renewable energy power plants are there in Texas?", we need to:\n\n1. Identify all rows where the `state` column is equal to \'Texas\'.\n2. Filter those rows further to only include records with a source type that falls under renewable energy categories (in this case, Wind, Solar, and Hydro).\n3. Count the number of such records.\n\nThe SQL query would look something like:\n\n```sql\nSELECT COUNT(*) \nFROM power_plants \nWHERE state = \'Texas\' AND source_type IN (\'Wind\', \'Solar\', \'Hydro\');\n```\n\nThis query will return the total count of renewable energy power plants in Texas based on the data provided.',
    sql="SELECT COUNT(*) FROM power_plants WHERE state = 'Texas' AND source_type IN ('Wind', 'Solar', 'Hydro');"
), 1), (Example({'sql_prompt': 'Find the top 5 countries with the lowest financial capability scores in Europe.', 'sql_context': 'CREATE TABLE financial_capability (id INT, country VARCHAR(255), score INT);', 'sql': "SELECT country, score FROM (SELECT country, score, ROW_NUMBER() OVER (ORDER BY score ASC) rn FROM financial_capability WHERE region = 'Europe') t WHERE rn <= 5;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="answer this SQL prompt. \n\n1. **Identify the relevant table**: The query is asking for information from the `financial_capability` table.\n\n2. **Filter by region**: We need only countries within Europe, so we'll add a WHERE clause with `country IN (SELECT country FROM countries WHERE continent = 'Europe')`.\n\n3. **Order by score**: To find the top 5 lowest scores, we order the results in ascending order (`ORDER BY score ASC`).\n\n4. **Limit to top 5 rows**: Finally, we limit our result set to only include the first 5 rows using `LIMIT 5`.\n\nThe SQL query would look like this:\n\n```sql\nSELECT *\nFROM financial_capability\nWHERE country IN (SELECT country",
    sql="```sql\nSELECT *\nFROM financial_capability\nWHERE country IN (\n    SELECT country\n    FROM countries\n    WHERE continent = 'Europe'\n)\nORDER BY score ASC\nLIMIT 5;\n```"
), 0), (Example({'sql_prompt': 'What is the correlation between climate change and biodiversity in the Arctic?', 'sql_context': "CREATE TABLE Climate_Change (id INT PRIMARY KEY, year INT, temperature FLOAT, region VARCHAR(50)); CREATE TABLE Biodiversity (id INT, year INT, species_count INT, region VARCHAR(50), climate_id INT, FOREIGN KEY (climate_id) REFERENCES Climate_Change(id)); INSERT INTO Climate_Change (id, year, temperature, region) VALUES (1, 2000, -10.0, 'Arctic'), (2, 2010, -9.5, 'Arctic'); INSERT INTO Biodiversity (id, year, species_count, region, climate_id) VALUES (1, 2000, 100, 'Arctic', 1), (2, 2010, 105, 'Arctic', 2);", 'sql': "SELECT Climate_Change.year, Climate_Change.temperature, Biodiversity.species_count FROM Climate_Change INNER JOIN Biodiversity ON Climate_Change.id = Biodiversity.climate_id WHERE Climate_Change.region = 'Arctic';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Understand the correlation between climate change and biodiversity in the Arctic:\n\n1. **Identify Climate Change Data**: First, we need data on temperature changes over time in the Arctic region. This will help us understand how the climate is changing.\n\n2. **Identify Biodiversity Data**: Next, we need to know about species count or diversity in the Arctic for different years. This will give us an idea of biodiversity levels.\n\n3. **Link Climate and Biodiversity**: We then link these two datasets by matching them based on the year and region (Arctic). This allows us to see how changes in temperature correlate with changes in biodiversity.\n\n4. **Analyze Correlation**: Finally, we analyze this linked data to find any patterns or',
    sql="SELECT \n    Climate_Change.year,\n    AVG(Biodiversity.species_count) AS avg_species_count,\n    AVG(Climate_Change.temperature) AS avg_temperature\nFROM \n    Biodiversity\nJOIN \n    Climate_Change ON Biodiversity.year = Climate_Change.year AND Biodiversity.region = 'Arctic'\nGROUP BY \n    Climate_Change.year;\n\nThis SQL query joins the `Climate_Change` and `Biodiversity` tables based on the year and region (in this case, Arctic), then calculates the average species count and temperature for each year. This allows us to analyze how changes in temperature correlate with biodiversity levels over time in the Arctic."
), 1), (Example({'sql_prompt': 'What is the average budget allocated for ethical AI research by country?', 'sql_context': "CREATE TABLE Country (CountryID INT PRIMARY KEY, CountryName VARCHAR(100), Budget DECIMAL(10,2)); INSERT INTO Country (CountryID, CountryName, Budget) VALUES (1, 'USA', 5000000.00), (2, 'Canada', 3000000.00), (3, 'Mexico', 1000000.00);", 'sql': 'SELECT AVG(Budget) as AvgBudget, CountryName FROM Country GROUP BY CountryName;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To answer the SQL prompt about finding the average budget allocated for ethical AI research by country, we need to consider that there is no direct table or column provided in the context given that specifically deals with budgets for ethical AI research. However, assuming that the `Budget` column in the `Country` table represents some form of allocation (which might not necessarily be for ethical AI research), and considering the prompt's intent, we can calculate the average budget across all countries.\n\nHere is how you would write the SQL query:\n\n```sql\nSELECT AVG(Budget) AS Average_Budget FROM Country;\n```\n\nThis query calculates the average (`AVG`) of the `Budget` column in the `Country` table. The result will be a single value representing",
    sql="SELECT AVG(Budget) AS Average_Budget FROM Country;\n\nReasoning: To find the average budget allocated for ethical AI research by country, we need to consider that there is no direct table or column provided in the context given that specifically deals with budgets for ethical AI research. However, assuming that the `Budget` column in the `Country` table represents some form of allocation (which might not necessarily be for ethical AI research), and considering the prompt's intent, we can calculate the average budget across all countries. Here is how you would write the SQL query:\n\n```sql\nSELECT AVG(Budget) AS Average_Budget FROM Country;\n```\n\nThis query calculates the average (`AVG`) of the `Budget` column in the `Country`"
), 0), (Example({'sql_prompt': 'What is the total fare collected for each train line?', 'sql_context': "CREATE TABLE train_lines (line_id INT, line_name TEXT); CREATE TABLE fares (fare_id INT, line_id INT, fare DECIMAL); INSERT INTO train_lines VALUES (1, 'Line 1'), (2, 'Line 2'), (3, 'Line 3'); INSERT INTO fares VALUES (1, 1, 3.50), (2, 1, 3.50), (3, 2, 4.25), (4, 3, 5.00), (5, 3, 5.00);", 'sql': 'SELECT train_lines.line_name, SUM(fares.fare) AS total_fare FROM train_lines INNER JOIN fares ON train_lines.line_id = fares.line_id GROUP BY train_lines.line_id;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Find the total fare collected for each train line:\n\n1. **Join tables**: We need to join `train_lines` and `fares` tables on their common column (`line_id`) so that we can match each fare with its corresponding train line.\n\n2. **Group by lines**: After joining, we should group the results by `line_name` from the `train_lines` table. This will allow us to calculate the total fare for each unique train line.\n\n3. **Calculate total fare**: For each group (i.e., each train line), sum up all the fares associated with that line.\n\nHere's how you can write this SQL query:\n\n```sql\nSELECT \n    tl.line_name,\n    SUM(f.fare) AS total",
    sql='SELECT tl.line_name, SUM(f.fare) AS total_fare_collected FROM train_lines tl JOIN fares f ON tl.line_id = f.line_id GROUP BY tl.line_name;'
), 1), (Example({'sql_prompt': 'What is the total revenue for cosmetics products that are not cruelty-free?', 'sql_context': 'CREATE TABLE product (product_id INT, name TEXT, price FLOAT, cruelty_free BOOLEAN); CREATE TABLE sales (sale_id INT, product_id INT, quantity INT);', 'sql': 'SELECT SUM(price * quantity) FROM product INNER JOIN sales ON product.product_id = sales.product_id WHERE cruelty_free = FALSE;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="answer this SQL query. \n\n1. **Identify the relevant tables**: We need data from both `product` and `sales` tables.\n\n2. **Filter for non-cruelty-free products**: The `cruelty_free` column in the `product` table indicates whether a product is cruelty-free or not. We want to exclude those that are cruelty-free, so we'll use a WHERE clause with `NOT`.\n\n3. **Join tables on common key**: To calculate total revenue, we need to join the `sales` and `product` tables based on their common key (`product_id`). \n\n4. **Calculate total revenue**: Multiply each product's price by its quantity sold (from the `sales` table) and",
    sql='SELECT SUM(sales.quantity * product.price) AS total_revenue \nFROM sales \nJOIN product ON sales.product_id = product.product_id \nWHERE product.cruelty_free = FALSE;'
), 1), (Example({'sql_prompt': 'What is the total cost of permits for projects with permit numbers greater than 700?', 'sql_context': "CREATE TABLE permit_data (id INT, project VARCHAR(50), permit_number INT, start_date DATE, permit_cost DECIMAL(10,2)); INSERT INTO permit_data (id, project, permit_number, start_date, permit_cost) VALUES (1, 'Office Building', 450, '2019-12-20', 850.00), (2, 'Residential Apartments', 751, '2021-03-01', 1200.50), (3, 'School', 333, '2020-06-15', 500.25), (4, 'Mall', 780, '2020-12-01', 1500.75);", 'sql': 'SELECT SUM(permit_cost) FROM permit_data WHERE permit_number > 700;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Solve the SQL prompts:\n\n### Prompt 1:\n**Delete records from the 'resource_depletion' table where the 'resource_type' is 'Coal'**\n\nGiven context:\n```sql\nCREATE TABLE resource_depletion (id INT, resource_type VARCHAR(20), quantity INT, depletion_date DATE);\nINSERT INTO resource_depletion (id, resource_type, quantity, depletion_date) VALUES (1, 'Coal', 1000, '2020-01-01'), (2, 'Iron Ore', 500, '2019-12-31'), (3, 'Coal', 1500, '2018-12-31",
    sql="DELETE FROM resource_depletion WHERE resource_type = 'Coal';"
), 0), (Example({'sql_prompt': 'Find the total square footage of wheelchair-accessible properties in Boston.', 'sql_context': "CREATE TABLE properties (id INT, city VARCHAR(20), square_footage INT, wheelchair_accessible BOOLEAN); INSERT INTO properties (id, city, square_footage, wheelchair_accessible) VALUES (1, 'Boston', 1000, true); INSERT INTO properties (id, city, square_footage, wheelchair_accessible) VALUES (2, 'Boston', 1200, false);", 'sql': "SELECT SUM(square_footage) FROM properties WHERE city = 'Boston' AND wheelchair_accessible = true;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Find the total square footage of wheelchair-accessible properties in Boston:\n\n**SQL Query:**\n\n```sql\nSELECT SUM(square_footage)\nFROM properties\nWHERE city = 'Boston' AND wheelchair_accessible = true;\n```\n\n**Explanation:**\n1. **Table:** We are using the `properties` table which contains information about each property, including its square footage and whether it is wheelchair accessible.\n2. **Column Selection:** The `SUM(square_footage)` function is used to calculate the total square footage of all properties that meet our criteria.\n3. **Filtering Criteria:**\n   - `city = 'Boston'` ensures we only consider properties located in Boston.\n   - `wheelchair_accessible = true` filters for properties that are wheelchair",
    sql="SELECT SUM(square_footage) FROM properties WHERE city = 'Boston' AND wheelchair_accessible = true;"
), 1), (Example({'sql_prompt': 'Which operators have the highest average production quantity per well?', 'sql_context': "CREATE TABLE wells (well_id INT, well_name TEXT, production_qty FLOAT, operator_id INT); INSERT INTO wells (well_id, well_name, production_qty, operator_id) VALUES (1, 'Well A', 1000, 1), (2, 'Well B', 1500, 1), (3, 'Well C', 800, 2); CREATE TABLE operators (operator_id INT, operator_name TEXT); INSERT INTO operators (operator_id, operator_name) VALUES (1, 'ABC Inc.'), (2, 'DEF'), (3, 'GHI Inc.');", 'sql': 'SELECT o.operator_name, AVG(w.production_qty) as avg_production FROM wells w JOIN operators o ON w.operator_id = o.operator_id GROUP BY o.operator_name ORDER BY avg_production DESC;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Solve the SQL prompts:\n\n### 1. Delete records from the 'resource_depletion' table where the 'resource_type' is 'Coal'\n\n**SQL Query:**\n```sql\nDELETE FROM resource_depletion WHERE resource_type = 'Coal';\n```\n\n### Explanation:\n- This query targets the `resource_depletion` table.\n- It deletes all rows where the `resource_type` column has a value of `'Coal'`.\n\n### 2. What was the total attendance at poetry readings in San Francisco?\n\n**SQL Query:**\n```sql\nSELECT SUM(attendance) FROM events WHERE event_type = 'Poetry Reading' AND city = 'San Francisco';\n```\n\n### Explanation:\n- This query sums up the `attendance` column from",
    sql="SELECT SUM(production_qty) / COUNT(well_id) as avg_production_per_well FROM wells WHERE operator_id IN (SELECT operator_id FROM operators WHERE operator_name IN ('ABC Inc.', 'GHI Inc.'));"
), 0), (Example({'sql_prompt': 'What was the average number of comments per post in Oceania in the last month?', 'sql_context': "CREATE TABLE comments_posts(region VARCHAR(20), post_date DATE, comments INT, posts INT); INSERT INTO comments_posts(region, post_date, comments, posts) VALUES('Oceania', '2021-09-01', 10, 10), ('Oceania', '2021-09-02', 12, 12), ('Oceania', '2021-09-03', 14, 14), ('Oceania', '2021-09-04', 16, 16), ('Oceania', '2021-09-05', 18, 18), ('Oceania', '2021-09-06', 20, 20), ('Oceania', '2021-09-07', 22, 22);", 'sql': "SELECT AVG(comments/posts) FROM comments_posts WHERE region = 'Oceania' AND post_date >= DATEADD(month, -1, CURRENT_DATE)"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Solve the SQL prompts:\n\n### Prompt 1: Delete records from the 'resource_depletion' table where the 'resource_type' is 'Coal'\n\n**SQL Query:**\n```sql\nDELETE FROM resource_depletion WHERE resource_type = 'Coal';\n```\n\n**Reasoning:** \n- The `DELETE FROM` statement removes rows from a specified table.\n- Here, we specify `resource_depletion` as the table to delete from.\n- We use `WHERE` clause to filter out only those records where `resource_type` is 'Coal'.\n\n### Prompt 2: What was the total attendance at poetry readings in San Francisco?\n\n**SQL Query:**\n```sql\nSELECT SUM(attendance) FROM events WHERE event_type = 'Poetry",
    sql="SELECT SUM(attendance) FROM events WHERE location = 'San Francisco' AND event_type = 'Poetry Reading';\n\nReasoning: - The `SUM()` function is used to calculate the total attendance. \n- We select from the `events` table.\n- Filter by `location = 'San Francisco'` to only consider events happening in San Francisco.\n- Further filter with `event_type = 'Poetry Reading'` to ensure we're looking at poetry readings specifically."
), 0), (Example({'sql_prompt': 'What is the geopolitical risk assessment score for each country in 2020?', 'sql_context': "CREATE TABLE GeopoliticalRiskAssessments (assessment_id INT, assessment_name VARCHAR(50), score INT, assessment_date DATE, country VARCHAR(50)); INSERT INTO GeopoliticalRiskAssessments (assessment_id, assessment_name, score, assessment_date, country) VALUES (1, 'Assessment A', 7, '2020-01-01', 'USA'), (2, 'Assessment B', 5, '2020-02-15', 'Russia'), (3, 'Assessment C', 8, '2020-03-31', 'China');", 'sql': "SELECT country, score FROM GeopoliticalRiskAssessments WHERE assessment_date BETWEEN '2020-01-01' AND '2020-12-31';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="answer these SQL queries:\n\n### Query 1:\n**Prompt**: Delete records from the 'resource_depletion' table where the 'resource_type' is 'Coal'.\n\n**Context**:\n```\nCREATE TABLE resource_depletion (id INT, resource_type VARCHAR(20), quantity INT, depletion_date DATE);\nINSERT INTO resource_depletion (id, resource_type, quantity, depletion_date) VALUES (1, 'Coal', 1000, '2020-01-01'), (2, 'Iron Ore', 500, '2019-12-31'), (3, 'Coal', 1500, '2018-12-31",
    sql="DELETE FROM resource_depletion WHERE resource_type = 'Coal';"
), 0), (Example({'sql_prompt': 'Find the total revenue for events with an attendance over 200 in 2021.', 'sql_context': "CREATE TABLE events (event_id INT, event_name VARCHAR(50), attendance INT, revenue DECIMAL(10,2), event_date DATE); INSERT INTO events (event_id, event_name, attendance, revenue, event_date) VALUES (1, 'Art Exhibition', 250, 15000, '2021-06-01'); INSERT INTO events (event_id, event_name, attendance, revenue, event_date) VALUES (2, 'Theater Performance', 180, 12000, '2021-07-15');", 'sql': 'SELECT SUM(revenue) FROM events WHERE attendance > 200 AND YEAR(event_date) = 2021;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Find the total revenue for events with an attendance over 200 in 2021:\n\n**Step 1:** Identify all events that took place in 2021.\nWe can use a WHERE clause to filter out events where `event_date` is within the year 2021.\n\n**Step 2:** Filter for events with attendance over 200.\nWe need to add another condition using an AND operator, checking if `attendance > 200`.\n\n**Step 3:** Calculate total revenue from these filtered events.\nTo do this, we can use the SUM function on the `revenue` column.\n\nPutting it all together in SQL:\n\n```sql\nSELECT SUM(revenue) AS Total_Re',
    sql="SELECT SUM(revenue) AS Total_Revenue FROM events WHERE event_date BETWEEN '2021-01-01' AND '2021-12-31' AND attendance > 200;"
), 1), (Example({'sql_prompt': "find the number of records in the CommunityHealthStatistics table where the State is 'TX' and the County is 'Harris'", 'sql_context': "CREATE TABLE CommunityHealthStatistics (ID INT, State TEXT, County TEXT, Population INT, AverageIncome FLOAT); INSERT INTO CommunityHealthStatistics (ID, State, County, Population, AverageIncome) VALUES (1, 'TX', 'Harris', 4500000, 60000), (2, 'CA', 'LA', 2500000, 70000);", 'sql': "SELECT * FROM CommunityHealthStatistics WHERE State = 'TX' AND County = 'Harris';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="1. **Identify the SQL Query**: The task is to find the number of records where `State` is 'TX' and `County` is 'Harris'. This means we need to use a SELECT statement with COUNT function, which counts the number of rows that match certain conditions.\n\n2. **Select Relevant Columns**: Since we're only interested in counting the total number of records matching our criteria, we don't actually need to select any specific columns from `CommunityHealthStatistics`. We can simply write:\n   ```sql\n   SELECT COUNT(*)\n   ```\n\n3. **Apply Conditions Using WHERE Clause**: To filter for rows where `State` is 'TX' and `County` is 'Harris', we add a `WHERE",
    sql="SELECT COUNT(*) FROM CommunityHealthStatistics WHERE State = 'TX' AND County = 'Harris';"
), 1), (Example({'sql_prompt': "Insert a new record into the 'weapons' table with the following data: 'Javelin', 'USA', 'in-development'", 'sql_context': "CREATE TABLE weapons (id INT PRIMARY KEY, name VARCHAR(255), origin VARCHAR(255), status VARCHAR(255)); INSERT INTO weapons (id, name, origin) VALUES (1, 'AK-47', 'Russia'), (2, 'RPG-7', 'Russia');", 'sql': "INSERT INTO weapons (name, origin, status) VALUES ('Javelin', 'USA', 'in-development');"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Insert a new record into the `weapons` table with the details provided:\n\n1. **Identify the SQL command for inserting data**: The SQL command used for inserting data into a table is `INSERT INTO`.\n\n2. **Specify the table name**: In this case, the table is named `weapons`.\n\n3. **List the columns to be inserted**: We need to specify which columns we want to insert values into. Here, these are `id`, `name`, `origin`, and `status`. \n\n4. **Provide the values for each column**:\n   - For `id`, since it's a primary key (meaning it uniquely identifies each record), we typically don't manually set this value unless it's auto-incremented or if",
    sql="INSERT INTO weapons (name, origin, status) VALUES ('Javelin', 'USA', 'in-development');"
), 1), (Example({'sql_prompt': 'Count the number of mining incidents per month in 2021.', 'sql_context': "CREATE TABLE incidents (id INT, date DATE, incident_type TEXT); INSERT INTO incidents (id, date, incident_type) VALUES (1, '2021-01-05', 'equipment_failure'); INSERT INTO incidents (id, date, incident_type) VALUES (2, '2021-03-12', 'safety_violation');", 'sql': "SELECT DATE_PART('month', date) AS month, COUNT(*) FROM incidents WHERE date >= '2021-01-01' AND date < '2022-01-01' GROUP BY month;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="answer the SQL prompts:\n\n### 1. Minimum number of passengers for shared rides in San Francisco\n\n**SQL Query:**\n```sql\nSELECT MIN(passenger_count) AS min_passengers FROM rides WHERE city = 'San Francisco' AND type = 'shared';\n```\n\n### 2. Total revenue generated by each product category in the last quarter\n\n**SQL Query:**\n```sql\nSELECT product_category, SUM(revenue) AS total_revenue \nFROM sales \nWHERE sale_date BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH) AND CURRENT_DATE() \nGROUP BY product_category;\n```\n\n### 3. Average temperature for each month in the year 2021\n\n**SQL Query:**\n```sql\nSELECT EX",
    sql="SELECT COUNT(*) AS incidents_per_month FROM incidents WHERE date >= '2021-01-01' AND date <= '2021-12-31' GROUP BY DATE_FORMAT(date, '%Y-%m');"
), 1), (Example({'sql_prompt': "How many workers are employed in 'renewable energy' sector?", 'sql_context': "CREATE TABLE workers (id INT, worker_name VARCHAR(255), department VARCHAR(255)); INSERT INTO workers (id, worker_name, department) VALUES (1, 'John Doe', 'renewable energy'), (2, 'Jane Smith', 'textiles'), (3, 'Michael Brown', 'renewable energy');", 'sql': "SELECT COUNT(*) FROM workers WHERE department = 'renewable energy';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="answer the SQL prompts. \n\n### 1. Average Temperature in Arctic Research Lab\n\nThe SQL query provided calculates the average temperature from a table named `arctic_temperatures`. It uses the AVG() function, which computes the mean of all non-NULL values in the specified column (`temperature`). The WHERE clause filters for rows where the `location` is 'North Pole', ensuring that only data relevant to the Arctic Research Lab is considered.\n\n### 2. Deleting Coal Records\n\nThe SQL command provided deletes records from a table named `resource_depletion`. It targets rows where the `resource_type` column contains the value 'Coal'. This operation removes all entries related to coal depletion, which might be useful for updating databases with current resource status or",
    sql="DELETE FROM workers WHERE department = 'renewable energy';"
), 0), (Example({'sql_prompt': 'What is the average performance score for each game genre?', 'sql_context': "CREATE TABLE game_genre_performance (game_id INT, game_genre VARCHAR(255), performance_score INT); INSERT INTO game_genre_performance (game_id, game_genre, performance_score) VALUES (1, 'RPG', 85), (2, 'Strategy', 90), (3, 'RPG', 80);", 'sql': 'SELECT game_genre, AVG(performance_score) as avg_score FROM game_genre_performance GROUP BY game_genre;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Understand the SQL query for finding the average performance score for each game genre:\n\n### Step-by-Step Reasoning\n\n1. **Identify the Table and Columns**: We have a table named `game_genre_performance` with columns `game_id`, `game_genre`, and `performance_score`.\n\n2. **Objective**: The goal is to find the average performance score for each game genre.\n\n3. **SQL Query Construction**:\n   - **Grouping by Genre**: To calculate averages per genre, we need to group our data by `game_genre`.\n   - **Aggregation Function**: We use the `AVG()` function to calculate the average of `performance_score` within each group.\n   - **Select Statement**: We select the `game',
    sql='SELECT game_genre, AVG(performance_score) as avg_performance_score FROM game_genre_performance GROUP BY game_genre;'
), 1), (Example({'sql_prompt': 'How many Indigenous communities in the Arctic are experiencing negative socio-economic impacts due to climate change?', 'sql_context': "CREATE TABLE IndigenousCommunities(community TEXT, socio_economic_impact TEXT, climate_change_impact TEXT); INSERT INTO IndigenousCommunities(community, socio_economic_impact, climate_change_impact) VALUES ('Inuit', 'High', 'Very High'), ('Sami', 'Medium', 'High');", 'sql': "SELECT COUNT(*) FROM IndigenousCommunities WHERE socio_economic_impact = 'High' AND climate_change_impact = 'High' OR socio_economic_impact = 'Very High' AND climate_change_impact = 'Very High';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="answer the SQL prompts:\n\n1. **Minimum number of passengers for shared autonomous vehicles in District 3**\n   - The SQL query provided is correct and will return the minimum number of passengers for shared autonomous vehicles operating in District 3.\n\n2. **Total attendance at poetry readings in San Francisco**\n   - This SQL query correctly sums up the total attendance from all events that are poetry readings held in San Francisco, which is what was asked.\n\n3. **Delete records where resource type is 'Coal'**\n   - The provided SQL command will delete all records from the `resource_depletion` table where the `resource_type` field contains 'Coal'. This meets the requirement of deleting such records.\n\n4. **Total number of multimodal trips taken in",
    sql="SELECT COUNT(*) FROM IndigenousCommunities WHERE climate_change_impact = 'Very High' AND socio_economic_impact = 'Negative';"
), 0), (Example({'sql_prompt': 'What is the minimum depth recorded in the Mariana Trench?', 'sql_context': "CREATE TABLE ocean_floor_mapping (location VARCHAR(255), depth FLOAT);   INSERT INTO ocean_floor_mapping (location, depth) VALUES ('Mariana Trench', 10994.0), ('Challenger Deep', 10972.8);", 'sql': "SELECT MIN(depth) FROM ocean_floor_mapping WHERE location = 'Mariana Trench';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Find the minimum depth recorded in the Mariana Trench:\n\n1. **Identify the relevant table and column**: We need data from the `ocean_floor_mapping` table, specifically the `depth` column.\n\n2. **Filter for the Mariana Trench location**: The location we're interested in is 'Mariana Trench'.\n\n3. **Find the minimum depth**: Once we have filtered the rows that correspond to the Mariana Trench, we need to find the smallest value in the `depth` column.\n\nThe SQL query to achieve this would be:\n\n```sql\nSELECT MIN(depth) AS min_depth FROM ocean_floor_mapping WHERE location = 'Mariana Trench';\n```\n\nThis query selects the minimum (`MIN`) depth",
    sql="SELECT MIN(depth) AS min_depth FROM ocean_floor_mapping WHERE location = 'Mariana Trench';"
), 1), (Example({'sql_prompt': 'List all farmers who have not serviced their irrigation systems in the last 6 months.', 'sql_context': "CREATE TABLE farmer_irrigation (id INT, farmer_id INT, system_type VARCHAR(50), service_date DATE); INSERT INTO farmer_irrigation (id, farmer_id, system_type, service_date) VALUES (1, 1, 'Drip', '2021-08-01'), (2, 2, 'Sprinkler', '2021-10-15'), (3, 3, 'Drip', '2021-11-01'), (4, 4, 'Sprinkler', '2022-02-01'), (5, 5, 'Drip', '2022-03-01'), (6, 6, 'Sprinkler', '2022-01-15'), (7, 7, 'Drip', '2021-06-01'), (8, 8, 'Sprinkler', '2022-04-01'), (9, 9, 'Drip', '2021-12-01'), (10, 10, 'Sprinkler', '2022-05-15');", 'sql': 'SELECT farmers.name FROM farmers LEFT JOIN farmer_irrigation ON farmers.id = farmer_irrigation.farmer_id WHERE farmer_irrigation.service_date <= DATE_SUB(CURDATE(), INTERVAL 6 MONTH);'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Solve the SQL query for listing all farmers who have not serviced their irrigation systems in the last 6 months:\n\n**Step 1:** Identify the current date. This is necessary because we need to compare it with the `service_date` column to determine if a service has occurred within the last 6 months.\n\n**Step 2:** Calculate the date 6 months ago from the current date. We will use this as our threshold for determining whether an irrigation system was serviced recently or not.\n\n**Step 3:** Select all rows from the `farmer_irrigation` table where the `service_date` is less than (or before) the calculated date 6 months ago.\n\n**Step 4:** To get the farmer IDs, we',
    sql="SELECT DISTINCT farmer_id FROM farmer_irrigation WHERE service_date < CURRENT_DATE() - INTERVAL '6 MONTH';"
), 1), (Example({'sql_prompt': 'What is the most common type of medical equipment across hospitals?', 'sql_context': "CREATE TABLE medical_equipment (id INT, hospital_name TEXT, location TEXT, equipment TEXT, quantity INT, last_updated_date DATE); INSERT INTO medical_equipment (id, hospital_name, location, equipment, quantity, last_updated_date) VALUES (1, 'NY Presbyterian', 'NYC', 'Ventilators', 80, '2021-03-31'); INSERT INTO medical_equipment (id, hospital_name, location, equipment, quantity, last_updated_date) VALUES (2, 'Stanford Hospital', 'Palo Alto', 'Ventilators', 90, '2021-03-31');", 'sql': 'SELECT equipment, MAX(quantity) as max_quantity FROM medical_equipment GROUP BY equipment ORDER BY max_quantity DESC LIMIT 1;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="answer these SQL queries:\n\n### Query 1:\n**Prompt**: Delete records from the `resource_depletion` table where the `resource_type` is 'Coal'.\n\n**Context**:\n```\nCREATE TABLE resource_depletion (id INT, resource_type VARCHAR(20), quantity INT, depletion_date DATE);\nINSERT INTO resource_depletion (id, resource_type, quantity, depletion_date) VALUES \n(1, 'Coal', 1000, '2020-01-01'), \n(2, 'Iron Ore', 500, '2019-12-31'),\n(3, 'Coal', 1500, '2018-12-",
    sql="DELETE FROM resource_depletion WHERE resource_type = 'Coal';"
), 0), (Example({'sql_prompt': "What is the average rating for 'Gluten-Free' items?", 'sql_context': "CREATE TABLE ratings (item_name TEXT, is_gluten_free BOOLEAN, rating INTEGER); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Quinoa Salad', true, 4); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Chicken Stir Fry', false, 5);", 'sql': 'SELECT AVG(rating) FROM ratings WHERE is_gluten_free = true;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="1. **Identify the SQL Query**: The prompt asks for the average rating of 'Gluten-Free' items. This means we need to filter out only those items that are marked as 'true' for being gluten-free and then calculate their average rating.\n\n2. **Understand the Data Structure**:\n   - `ratings` table has columns: `item_name`, `is_gluten_free`, and `rating`.\n   - `is_gluten_free` is a boolean column indicating whether an item is gluten-free.\n   - `rating` is an integer column representing the rating of each item.\n\n3. **Formulate the SQL Query**:\n   - Use a WHERE clause to filter items where `is_gluten_free` is true (",
    sql='SELECT AVG(rating) FROM ratings WHERE is_gluten_free = true;'
), 1), (Example({'sql_prompt': 'How many water treatment facilities are there in each country, and what is their distribution by continent?', 'sql_context': "CREATE TABLE facilities (id INT, facility_name VARCHAR(50), country VARCHAR(50), total_employees INT); INSERT INTO facilities (id, facility_name, country, total_employees) VALUES (1, 'Water Treatment Plant 1', 'Brazil', 25); INSERT INTO facilities (id, facility_name, country, total_employees) VALUES (2, 'Water Treatment Plant 2', 'India', 30);", 'sql': 'SELECT country, COUNT(*) as facility_count, CONTINENT(location) as continent FROM facilities JOIN countries ON facilities.country = countries.country_name GROUP BY country, continent;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="answer these SQL prompts:\n\n### Prompt 1:\n**Delete records from the 'resource_depletion' table where the 'resource_type' is 'Coal'**\n\nGiven context:\n```\nCREATE TABLE resource_depletion (id INT, resource_type VARCHAR(20), quantity INT, depletion_date DATE);\nINSERT INTO resource_depletion (id, resource_type, quantity, depletion_date) VALUES (1, 'Coal', 1000, '2020-01-01'), (2, 'Iron Ore', 500, '2019-12-31'), (3, 'Coal', 1500, '2018-12-31');\n``",
    sql="```sql\nDELETE FROM resource_depletion WHERE resource_type = 'Coal';\n```"
), 0), (Example({'sql_prompt': "What is the maximum data usage in the 'urban' region?", 'sql_context': "CREATE TABLE subscribers (id INT, name VARCHAR(50), data_usage FLOAT, region VARCHAR(20)); INSERT INTO subscribers (id, name, data_usage, region) VALUES (1, 'John Doe', 20.0, 'urban'), (2, 'Jane Doe', 18.0, 'urban');", 'sql': "SELECT MAX(data_usage) FROM subscribers WHERE region = 'urban';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Understand the SQL query for finding the maximum data usage in the 'urban' region:\n\n1. **Identify the table**: The relevant table is `subscribers` as it contains information about subscribers including their data usage and region.\n\n2. **Identify the columns**: We need to look at two columns - `data_usage` (the amount of data used by a subscriber) and `region` (to filter for 'urban' regions).\n\n3. **Filtering condition**: The query needs to filter rows where the `region` is 'urban'.\n\n4. **Aggregation function**: To find the maximum value, we use the MAX() function.\n\n5. **Construct the SQL query**: Combine all these elements into a single SQL statement.",
    sql="SELECT MAX(data_usage) FROM subscribers WHERE region = 'urban';"
), 1), (Example({'sql_prompt': 'Find the average depth of all underwater volcanoes in the Atlantic Ocean.', 'sql_context': "CREATE TABLE underwater_volcanoes (id INT, name VARCHAR(50), depth FLOAT, ocean VARCHAR(20)); INSERT INTO underwater_volcanoes (id, name, depth, ocean) VALUES (1, 'Lost City', 800, 'Atlantic'); INSERT INTO underwater_volcanoes (id, name, depth, ocean) VALUES (2, 'Eyjafjallajokull', 1650, 'Atlantic');", 'sql': "SELECT AVG(depth) FROM underwater_volcanoes WHERE ocean = 'Atlantic';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Find the average depth of all underwater volcanoes in the Atlantic Ocean:\n\nStep 1: Identify the relevant table and columns.\n- The relevant table is `underwater_volcanoes`.\n- We need the `depth` column.\n\nStep 2: Filter for records where the ocean is 'Atlantic'.\n- This can be done using a WHERE clause with `ocean = 'Atlantic'`.\n\nStep 3: Calculate the average depth of the filtered records.\n- Use the AVG() function on the `depth` column.\n\nPutting it all together, the SQL query would look like this:\n\n```sql\nSELECT AVG(depth) AS average_depth \nFROM underwater_volcanoes \nWHERE ocean = 'Atlantic';\n```\n\nThis query will return the average depth (",
    sql="SELECT AVG(depth) AS average_depth FROM underwater_volcanoes WHERE ocean = 'Atlantic';"
), 1), (Example({'sql_prompt': 'What is the total cost of Mars rover missions that have successfully landed?', 'sql_context': 'CREATE TABLE mars_rovers (id INT PRIMARY KEY, name VARCHAR(255), mission_type VARCHAR(255), agency VARCHAR(255), cost FLOAT, launched_date DATE, landed_date DATE);', 'sql': "SELECT SUM(cost) FROM mars_rovers WHERE mission_type = 'Lander' AND landed_date IS NOT NULL;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="1. **Identify the relevant columns**: We need to find the `cost` column from the `mars_rovers` table.\n   \n2. **Filter successful landings**: The condition for a successful landing is not explicitly given, but we can assume that it's represented by the `landed_date` being present and not null.\n\n3. **Apply the filter in SQL query**: We will use a WHERE clause to select rows where `landed_date` is not null.\n\n4. **Sum up the costs**: Use the SUM function on the `cost` column to calculate the total cost of all successful missions.\n\nThe SQL query would look something like this:\n\n```sql\nSELECT SUM(cost) AS total_cost_of_successful_missions \nFROM",
    sql='SELECT SUM(cost) AS total_cost_of_successful_missions FROM mars_rovers WHERE landed_date IS NOT NULL;'
), 1), (Example({'sql_prompt': "What is the earliest year a peacekeeping operation was conducted in 'Asia'?", 'sql_context': "CREATE TABLE Peacekeeping_Years (id INT, location VARCHAR(30), year INT); INSERT INTO Peacekeeping_Years (id, location, year) VALUES (1, 'Asia', 1990), (2, 'Asia', 2000);", 'sql': "SELECT MIN(year) FROM Peacekeeping_Years WHERE location = 'Asia';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Find the earliest year a peacekeeping operation was conducted in 'Asia'. \n\nFirstly, we need to select all rows from the `Peacekeeping_Years` table where the location is 'Asia'.\nSecondly, among these selected rows, we should find the minimum value of the `year` column which represents the year when the peacekeeping operations were conducted.\n\nThe SQL query for this would be:\n\n```sql\nSELECT MIN(year) AS earliest_year \nFROM Peacekeeping_Years \nWHERE location = 'Asia';\n```\n\nThis query will return the earliest (minimum) year in which a peacekeeping operation was conducted in Asia.",
    sql="SELECT MIN(year) AS earliest_year FROM Peacekeeping_Years WHERE location = 'Asia';"
), 1), (Example({'sql_prompt': 'Identify the drug with the lowest sales amount in Europe in 2022.', 'sql_context': "CREATE TABLE sales (drug_name TEXT, continent TEXT, sales_amount INT, sale_date DATE); INSERT INTO sales (drug_name, continent, sales_amount, sale_date) VALUES ('Aspirin', 'Europe', 1000, '2022-01-01');", 'sql': "SELECT drug_name, MIN(sales_amount) FROM sales WHERE continent = 'Europe' AND sale_date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY drug_name;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Identify the drug with the lowest sales amount in Europe in 2022:\n\n**Step 1:** We need to filter out all records where the continent is 'Europe' and the sale_date is within or equal to 2022. This will give us a list of drugs sold in Europe during that year.\n\n**Step 2:** From this filtered dataset, we want to find the drug with the lowest sales amount. To do this, we can use an SQL query that selects the minimum value from the 'sales_amount' column.\n\nHere is how you would write the SQL query:\n\n```sql\nSELECT drug_name \nFROM sales \nWHERE continent = 'Europe' AND sale_date BETWEEN '2022-01",
    sql="SELECT drug_name FROM sales WHERE continent = 'Europe' AND sale_date >= '2022-01-01' AND sale_date <= '2022-12-31' ORDER BY sales_amount ASC LIMIT 1;"
), 1), (Example({'sql_prompt': "Insert a new record into 'customer_preferences' for customer 101 and menu item 1 with a preference score of 90", 'sql_context': 'CREATE TABLE customer_preferences (customer_id INT, item_id INT, preference_score INT);', 'sql': 'INSERT INTO customer_preferences (customer_id, item_id, preference_score) VALUES (101, 1, 90);'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="insert the new record into the 'customer_preferences' table. \n\nStep 1: Identify the columns that need to be populated.\n- `customer_id`: The ID of the customer for whom we are recording preferences. In this case, it is 101.\n- `item_id`: The ID of the menu item whose preference score we are recording. Here, it's 1.\n- `preference_score`: The score indicating how much the customer prefers the menu item. It's given as 90.\n\nStep 2: Construct the SQL INSERT statement with placeholders for these values:\n```sql\nINSERT INTO customer_preferences (customer_id, item_id, preference_score)\nVALUES (?, ?, ?);\n```\n\nStep 3: Replace the",
    sql='INSERT INTO customer_preferences (customer_id, item_id, preference_score) VALUES (101, 1, 90);'
), 1), (Example({'sql_prompt': 'Who is the oldest donor from each city?', 'sql_context': "CREATE TABLE donors_2 (id INT PRIMARY KEY, name VARCHAR(50), age INT, city VARCHAR(50), state VARCHAR(50)); INSERT INTO donors_2 (id, name, age, city, state) VALUES (1, 'John Doe', 35, 'New York', 'NY'), (2, 'Jane Smith', 40, 'Buffalo', 'NY'), (3, 'Mike Johnson', 50, 'Boston', 'MA');", 'sql': 'SELECT city, MAX(age) as oldest_donor_age FROM donors_2 GROUP BY city;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='1. **Identify the oldest donor from each city**:\n\n   - We need to find the maximum age for donors from each city.\n   \n2. **SQL Query**:\n   \n   ```sql\n   SELECT d1.name, d1.age, d1.city \n   FROM donors_2 d1\n   JOIN (\n       SELECT city, MAX(age) AS max_age\n       FROM donors_2\n       GROUP BY city\n   ) d2 ON d1.age = d2.max_age AND d1.city = d2.city;\n   ```\n\n   **Explanation**:\n   \n   - The subquery `d2` calculates the maximum age for each city.\n   - The main query joins this result with the original table `don',
    sql='```sql\nSELECT name, age, city FROM donors_2 WHERE (city, age) IN (\n    SELECT city, MAX(age) FROM donors_2 GROUP BY city\n);\n```\n\n**Explanation**: \n\n1. **Identify the oldest donor from each city**: \n   - We need to find the maximum age for donors from each city.\n\n2. **SQL Query**:\n   - The subquery calculates the maximum age (`MAX(age)`) for each city (`GROUP BY city`).\n   - The main query selects the name, age, and city of donors where their age matches the maximum age found in each city.\n   \nThis way, we ensure that only the oldest donor from each city is selected.'
), 1), (Example({'sql_prompt': 'What are the union membership statistics for unions that have engaged in successful collective bargaining in the healthcare sector?', 'sql_context': "CREATE TABLE Membership (UnionName TEXT, Sector TEXT, MemberCount INT); INSERT INTO Membership (UnionName, Sector, MemberCount) VALUES ('UnionHealthA', 'Healthcare', 3000), ('UnionHealthB', 'Healthcare', 5000), ('UnionHealthC', 'Healthcare', 2000);", 'sql': "SELECT UnionName, MemberCount FROM Membership WHERE Sector = 'Healthcare' AND UnionName IN (SELECT UnionName FROM CBAs WHERE ExpirationDate > CURDATE());"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="1. **Identify the relevant data**: We need union membership statistics for unions that have engaged in successful collective bargaining specifically within the healthcare sector.\n\n2. **Filter the data**: From the `Membership` table, we want to select only those records where:\n   - The `Sector` column is 'Healthcare', and\n   - There's no specific condition given on whether the union has engaged in successful collective bargaining (assuming this information isn't available or not part of our dataset).\n\n3. **Extract the required statistics**: We are interested in the `MemberCount` for each qualifying union.\n\nGiven these steps, here is how you would write the SQL query:\n\n```sql\nSELECT UnionName, MemberCount \nFROM Membership \nWHERE Sector =",
    sql="SELECT UnionName, MemberCount FROM Membership WHERE Sector = 'Healthcare';"
), 1), (Example({'sql_prompt': 'Calculate the total gas consumption for Nigeria in 2019', 'sql_context': "CREATE TABLE gas_consumption (country VARCHAR(50), consumption_year INT, gas_consumption FLOAT); INSERT INTO gas_consumption (country, consumption_year, gas_consumption) VALUES ('Nigeria', 2019, 12000), ('Nigeria', 2018, 10000), ('Ghana', 2019, 8000), ('Ghana', 2018, 6000), ('Ivory Coast', 2019, 10000), ('Ivory Coast', 2018, 8000);", 'sql': "SELECT gas_consumption FROM gas_consumption WHERE country = 'Nigeria' AND consumption_year = 2019;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Calculate the total gas consumption for Nigeria in 2019:\n\n1. **Identify Relevant Data**: We need data from the `gas_consumption` table where the country is 'Nigeria' and the consumption year is 2019.\n\n2. **Filter Data**: Use a SQL query to filter this specific data.\n   \n3. **Summarize Consumption**: Sum up all the gas consumptions for Nigeria in 2019.\n\nThe SQL query that accomplishes these steps would be:\n\n```sql\nSELECT SUM(gas_consumption) AS total_gas_consumption \nFROM gas_consumption \nWHERE country = 'Nigeria' AND consumption_year = 2019;\n```\n\nThis query first filters the rows",
    sql="```sql\nSELECT SUM(gas_consumption) AS total_gas_consumption \nFROM gas_consumption \nWHERE country = 'Nigeria' AND consumption_year = 2019;\n```"
), 1), (Example({'sql_prompt': 'What is the average socially responsible lending loan amount for microfinance institutions in Southeast Asia?', 'sql_context': "CREATE TABLE socially_responsible_lending(id INT, loan_number INT, institution_region VARCHAR(50), amount INT); INSERT INTO socially_responsible_lending VALUES (1, 701, 'Southeast Asia', 5000); INSERT INTO socially_responsible_lending VALUES (2, 702, 'South Asia', 7000); INSERT INTO socially_responsible_lending VALUES (3, 703, 'East Asia', 9000); INSERT INTO socially_responsible_lending VALUES (4, 704, 'Southeast Asia', 6000);", 'sql': "SELECT AVG(amount) FROM socially_responsible_lending WHERE institution_region = 'Southeast Asia' AND type = 'microfinance';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="1. **Identify the SQL Query for UGEI ID in Middle East Region**\n\n   To find records from the `resource_depletion` table where the resource type is 'Coal' and the depletion date is before a certain date, you can use:\n\n   ```sql\n   SELECT * FROM resource_depletion WHERE resource_type = 'Coal';\n   ```\n\n2. **Delete Records with Specific Resource Type**\n\n   To delete records from the `resource_depletion` table where the resource type is 'Coal', you would execute:\n\n   ```sql\n   DELETE FROM resource_depletion WHERE resource_type = 'Coal';\n   ```\n\n3. **Calculate Total Attendance for Poetry Readings in San Francisco**\n\n   To find out the total attendance at poetry",
    sql="SELECT SUM(attendance) AS total_attendance FROM poetry_readings WHERE location = 'San Francisco';\n\n---\n\nIn summary, we've covered:\n\n1. Counting digital assets issued by companies based in the United States.\n2. Calculating the average socially responsible lending loan amount for microfinance institutions in Southeast Asia.\n\nThese SQL queries demonstrate how to extract specific information from databases using structured query language, tailored to address the given tasks efficiently."
), 0), (Example({'sql_prompt': 'What is the average salary of employees who identify as Latinx in the Engineering department?', 'sql_context': "CREATE TABLE Employees (EmployeeID int, Name varchar(50), Gender varchar(10), Department varchar(50), Salary decimal(10,2), Ethnicity varchar(50)); INSERT INTO Employees (EmployeeID, Name, Gender, Department, Salary, Ethnicity) VALUES (1, 'Juan Garcia', 'Male', 'Engineering', 85000.00, 'Latinx'); INSERT INTO Employees (EmployeeID, Name, Gender, Department, Salary, Ethnicity) VALUES (2, 'Maria Rodriguez', 'Female', 'Engineering', 90000.00, 'Latinx');", 'sql': "SELECT AVG(Salary) FROM Employees WHERE Department = 'Engineering' AND Ethnicity = 'Latinx';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="1. **Identify the SQL Query**: The first step is to understand what we need from our data. In this case, we're looking for the average salary of employees who identify as Latinx and work in the Engineering department.\n\n2. **Select Relevant Columns**: We'll start by selecting the `Salary` column since that's what we're interested in calculating the average of.\n\n3. **Filter Data Based on Criteria**:\n   - **Ethnicity**: The query needs to filter for employees who identify as Latinx.\n   - **Department**: It also needs to filter for those working in the Engineering department.\n\n4. **Calculate Average Salary**: Once we have filtered our data, we can calculate the average salary of these employees using the",
    sql="SELECT AVG(Salary) FROM Employees WHERE Department = 'Engineering' AND Ethnicity = 'Latinx';"
), 1), (Example({'sql_prompt': 'What is the name and type of the vessel with the highest average speed?', 'sql_context': "CREATE TABLE Vessels (ID VARCHAR(20), Name VARCHAR(20), Type VARCHAR(20), AverageSpeed FLOAT); INSERT INTO Vessels VALUES ('V012', 'Vessel L', 'Passenger', 35.0), ('V013', 'Vessel M', 'Cargo', 19.5), ('V014', 'Vessel N', 'Passenger', 32.0);", 'sql': 'SELECT Name, Type FROM Vessels WHERE AverageSpeed = (SELECT MAX(AverageSpeed) FROM Vessels);'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='solve this SQL query:\n\n1. **Identify the table**: We need to find information from the `Vessels` table.\n\n2. **Find the highest average speed**: To do this, we will use a subquery that selects the maximum value of `AverageSpeed`.\n\n3. **Join with main query**: We then join this result back into our main query on the condition that `Vessels.AverageSpeed` equals the maximum average speed found.\n\n4. **Select required columns**: Finally, we select the `Name` and `Type` columns from the `Vessels` table.\n\nThe SQL query would look like:\n\n```sql\nSELECT Name, Type \nFROM Vessels \nWHERE AverageSpeed = (SELECT MAX(A',
    sql='```sql\nSELECT Name, Type FROM Vessels ORDER BY AverageSpeed DESC LIMIT 1;\n```\n\nReasoning:\n1. **Identify the table**: We need to find information from the `Vessels` table.\n2. **Order by highest average speed**: To identify the vessel with the highest average speed, we first order all vessels in descending order of their `AverageSpeed`.\n3. **Limit to one row**: After ordering, we limit our result set to just one row using `LIMIT 1`, which will give us the topmost (highest) entry from the sorted list.\n\nThis approach efficiently finds the vessel with the highest average speed without explicitly calculating the maximum value in a separate subquery.'
), 1), (Example({'sql_prompt': "List all the distinct producers of Gadolinium from the 'production' table, ordered alphabetically.", 'sql_context': 'CREATE TABLE production (element VARCHAR(10), year INT, month INT, producer VARCHAR(20), quantity INT);', 'sql': "SELECT DISTINCT producer FROM production WHERE element = 'Gadolinium' ORDER BY producer ASC;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="solve this SQL query. \n\nFirstly, we need to select the distinct producers of Gadolinium from the 'production' table. This means that we want to eliminate any duplicate entries for producers and only list each producer once.\n\nSecondly, we should filter our results to include only rows where the element is 'Gadolinium'. This can be done using a WHERE clause with the condition `element = 'Gadolinium'`.\n\nLastly, we need to order these distinct producers alphabetically. This can be achieved by adding an ORDER BY clause at the end of our query.\n\nSo, putting it all together:\n\n```sql\nSELECT DISTINCT producer \nFROM production \nWHERE element = 'Gadolinium'\nORDER BY producer ASC;\n``",
    sql="SELECT DISTINCT producer FROM production WHERE element = 'Gadolinium' ORDER BY producer ASC;"
), 1)]