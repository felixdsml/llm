[(Example({'sql_prompt': "Which artists have their works exhibited in the 'Contemporary Art Museum' located in 'New York'?", 'sql_context': "CREATE TABLE Artists (ArtistID int, Name varchar(50), Nationality varchar(50)); INSERT INTO Artists VALUES (1, 'Pablo Picasso', 'Spanish'); INSERT INTO Artists VALUES (2, 'Andy Warhol', 'American'); CREATE TABLE Exhibitions (ExhibitionID int, Title varchar(50), Museum varchar(50), City varchar(50)); INSERT INTO Exhibitions VALUES (1, 'Cubism', 'Museum of Modern Art', 'New York'); INSERT INTO Exhibitions VALUES (2, 'Pop Art', 'Contemporary Art Museum', 'New York'); CREATE TABLE Exhibits (ExhibitionID int, ArtistID int); INSERT INTO Exhibits VALUES (2, 2);", 'sql': "SELECT Artists.Name FROM Artists JOIN Exhibits ON Artists.ArtistID = Exhibits.ArtistID JOIN Exhibitions ON Exhibits.ExhibitionID = Exhibitions.ExhibitionID WHERE Exhibitions.Museum = 'Contemporary Art Museum' AND Exhibitions.City = 'New York';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT `Artists`.`Name` FROM `Artists` JOIN `Exhibits` ON `Artists`.`ArtistID` = `Exhibits`.`ArtistID` WHERE `Exhibitions`.`Museum` = 'Contemporary Art Museum' AND `Exhibitions`.`City` = 'New York';"
), 0), (Example({'sql_prompt': 'What are the total sales and average product price for each product category in Michigan for the year 2021?', 'sql_context': "CREATE TABLE products (id INT, name TEXT, category TEXT); INSERT INTO products (id, name, category) VALUES (1, 'Product X', 'Category A'); INSERT INTO products (id, name, category) VALUES (2, 'Product Y', 'Category B'); CREATE TABLE sales (product_id INT, year INT, sales INT, price INT); INSERT INTO sales (product_id, year, sales, price) VALUES (1, 2021, 100, 50); INSERT INTO sales (product_id, year, sales, price) VALUES (2, 2021, 150, 75);", 'sql': "SELECT p.category, SUM(s.sales) as total_sales, AVG(s.price) as average_price FROM products p INNER JOIN sales s ON p.id = s.product_id WHERE p.name = 'Michigan' AND s.year = 2021 GROUP BY p.category;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT category AS product_category, SUM(price * sales) as total_sales, AVG(price) as avg_product_price\nFROM sales JOIN products ON sales.product_id = products.id\nWHERE year = 2021 AND state='Michigan'\nGROUP BY category;"
), 1), (Example({'sql_prompt': "List the number of founders for companies in the 'San Francisco' region", 'sql_context': "CREATE TABLE companies (id INT, region VARCHAR(255), num_founders INT); INSERT INTO companies (id, region, num_founders) VALUES (1, 'San Francisco', 2), (2, 'New York', 3), (3, 'Los Angeles', 1);", 'sql': "SELECT region, COUNT(*) as num_companies FROM companies WHERE region = 'San Francisco';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT COUNT(*) FROM companies WHERE region = 'San Francisco';"
), 1), (Example({'sql_prompt': 'What is the average price of cannabis concentrate per gram in Illinois in Q2 2022?', 'sql_context': "CREATE TABLE concentrate_prices (price DECIMAL(5,2), gram INT, state VARCHAR(20), quarter VARCHAR(10)); INSERT INTO concentrate_prices (price, gram, state, quarter) VALUES (30, 2, 'Illinois', 'Q2'), (32, 2, 'Illinois', 'Q2'), (28, 2, 'Illinois', 'Q2');", 'sql': "SELECT AVG(price / gram) as avg_price_per_gram FROM concentrate_prices WHERE state = 'Illinois' AND quarter = 'Q2';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT AVG(price) FROM concentrate_prices WHERE state = 'Illinois' AND quarter = 'Q2';"
), 1), (Example({'sql_prompt': 'Which countries have the highest marine pollution levels in the Atlantic Ocean?', 'sql_context': "CREATE TABLE CountryPollution (id INT, country VARCHAR(255), pollution_level FLOAT); INSERT INTO CountryPollution (id, country, pollution_level) VALUES (1, 'United States', 6.2); INSERT INTO CountryPollution (id, country, pollution_level) VALUES (2, 'Brazil', 5.8);", 'sql': "SELECT country, pollution_level FROM CountryPollution WHERE location = 'Atlantic Ocean' AND pollution_level = (SELECT MAX(pollution_level) FROM CountryPollution WHERE location = 'Atlantic Ocean');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='SELECT `country` FROM `CountryPollution` WHERE `pollution_level` = (SELECT MAX(`pollution_level`) FROM `CountryPollution`);\nThis query will return the countries with the highest marine pollution levels in the Atlantic Ocean based on the provided context and table schema.'
), 0), (Example({'sql_prompt': "List all menu items and their prices for 'Sustainable Seafood Restaurant'.", 'sql_context': "CREATE TABLE Menu (Restaurant VARCHAR(255), Item VARCHAR(255), Price DECIMAL(5,2)); INSERT INTO Menu (Restaurant, Item, Price) VALUES ('Vegan Bistro', 'Tofu Stir Fry', 12.99), ('Vegan Bistro', 'Quinoa Salad', 10.99), ('Sustainable Seafood Restaurant', 'Grilled Salmon', 19.99), ('Sustainable Seafood Restaurant', 'Lobster Bisque', 7.99);", 'sql': "SELECT Item, Price FROM Menu WHERE Restaurant = 'Sustainable Seafood Restaurant';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT Item, Price FROM Menu WHERE Restaurant = 'Sustainable Seafood Restaurant';"
), 1), (Example({'sql_prompt': 'What are the names and prices of the menu items that have the same name as a restaurant?', 'sql_context': "CREATE TABLE restaurants (restaurant_id INT, name VARCHAR(255), cuisine VARCHAR(255)); INSERT INTO restaurants (restaurant_id, name, cuisine) VALUES (1, 'Big Burger', 'American'); INSERT INTO restaurants (restaurant_id, name, cuisine) VALUES (2, 'Sushi Hana', 'Japanese'); CREATE TABLE menu_items (menu_item_id INT, name VARCHAR(255), price DECIMAL(5,2), restaurant_id INT); INSERT INTO menu_items (menu_item_id, name, price, restaurant_id) VALUES (1, 'Big Burger', 12.99, 1); INSERT INTO menu_items (menu_item_id, name, price, restaurant_id) VALUES (2, 'Chicken Teriyaki', 15.99, 2); INSERT INTO menu_items (menu_item_id, name, price, restaurant_id) VALUES (3, 'Garden Salad', 7.99, 1);", 'sql': 'SELECT name, price FROM menu_items WHERE name IN (SELECT name FROM restaurants);'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='SELECT `name`, `price` FROM `menu_items` WHERE EXISTS (SELECT * FROM `restaurants` WHERE menu_items.restaurant_id = restaurants.restaurant_id AND menu_items.name = restaurants.name)'
), 1), (Example({'sql_prompt': "What is the sum of fish deaths (deaths) for each species in the 'fish_health' table, having a sum greater than the average for all species?", 'sql_context': "CREATE TABLE fish_health (id INT, species VARCHAR(255), deaths INT); INSERT INTO fish_health (id, species, deaths) VALUES (1, 'Salmon', 50), (2, 'Salmon', 75), (3, 'Trout', 30), (4, 'Trout', 40), (5, 'Cod', 60), (6, 'Cod', 80);", 'sql': 'SELECT species, SUM(deaths) FROM fish_health GROUP BY species HAVING SUM(deaths) > (SELECT AVG(deaths) FROM fish_health);'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT species, SUM(deaths) as total_deaths FROM fish_health GROUP BY species HAVING SUM(deaths) > (SELECT AVG(SUM(deaths)) FROM fish_health);\n\nThis query calculates the sum of deaths for each species in the 'fish_health' table, and then filters out those with a total greater than the average across all species."
), 1), (Example({'sql_prompt': 'Which marine species were observed in the Southern Ocean in the last 30 days?', 'sql_context': "CREATE TABLE marine_species_observations (species_name TEXT, observation_date DATE, location TEXT); INSERT INTO marine_species_observations VALUES ('Krill', '2023-02-10', 'Southern Ocean'), ('Blue Whale', '2023-01-25', 'Southern Ocean'), ('Krill', '2023-03-01', 'Southern Ocean');", 'sql': "SELECT species_name FROM marine_species_observations WHERE observation_date >= DATEADD(day, -30, CURRENT_DATE) AND location = 'Southern Ocean' GROUP BY species_name;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT species_name FROM marine_species_observations WHERE location = 'Southern Ocean' AND observation_date >= DATE('now') - INTERVAL '30 days';"
), 1), (Example({'sql_prompt': 'Display the maximum legal speed for ships in the Bering Sea.', 'sql_context': "CREATE TABLE maritime_laws (id INT, law VARCHAR(50), region VARCHAR(50), speed_limit INT); INSERT INTO maritime_laws (id, law, region, speed_limit) VALUES (1, 'Shipping Speed Regulations', 'Bering Sea', 25);", 'sql': "SELECT speed_limit FROM maritime_laws WHERE region = 'Bering Sea';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT speed_limit FROM maritime_laws WHERE region = 'Bering Sea';"
), 1), (Example({'sql_prompt': 'How many algorithmic fairness incidents were reported in Asia in the last quarter?', 'sql_context': "CREATE TABLE fairness_incidents (incident_id INT, incident_date DATE, region TEXT); INSERT INTO fairness_incidents (incident_id, incident_date, region) VALUES (1, '2022-04-15', 'Asia'), (2, '2022-05-11', 'Asia'), (3, '2022-06-01', 'Asia');", 'sql': "SELECT COUNT(*) FROM fairness_incidents WHERE region = 'Asia' AND incident_date >= '2022-04-01' AND incident_date < '2022-07-01';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT COUNT(*) FROM fairness_incidents WHERE region = 'Asia' AND incident_date >= DATE('now','quarter start') - INTERVAL 1 QUARTER;"
), 1), (Example({'sql_prompt': 'Who are the top 3 underwriters with the highest claim amount in the Midwest region?', 'sql_context': "CREATE TABLE Claims (ClaimID INT, UnderwriterID INT, Amount DECIMAL(10, 2)); CREATE TABLE Underwriters (UnderwriterID INT, Region VARCHAR(20)); INSERT INTO Claims (ClaimID, UnderwriterID, Amount) VALUES (1, 1, 500), (2, 2, 300), (3, 4, 1000), (4, 1, 700); INSERT INTO Underwriters (UnderwriterID, Region) VALUES (1, 'Midwest'), (2, 'Northeast'), (3, 'South'), (4, 'Midwest');", 'sql': "SELECT Underwriters.UnderwriterID, Underwriters.Region, SUM(Claims.Amount) AS TotalClaimAmount FROM Claims INNER JOIN Underwriters ON Claims.UnderwriterID = Underwriters.UnderwriterID WHERE Underwriters.Region = 'Midwest' GROUP BY Underwriters.UnderwriterID, Underwriters.Region ORDER BY TotalClaimAmount DESC LIMIT 3;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT UnderwriterID, SUM(Amount) as TotalClaims\nFROM Claims\nJOIN Underwriters ON Claims.UnderwriterID = Underwriters.UnderwriterID\nWHERE Region = 'Midwest'\nGROUP BY UnderwriterID\nORDER BY TotalClaims DESC\nLIMIT 3;"
), 1), (Example({'sql_prompt': 'Find the total number of unique IP addresses involved in ransomware and phishing attacks in the last six months, excluding any repeat offenders.', 'sql_context': "CREATE TABLE attack_ips (ip_address TEXT, attack_type TEXT, occurrence_count INT, last_updated DATETIME);INSERT INTO attack_ips (ip_address, attack_type, occurrence_count, last_updated) VALUES ('192.168.0.1', 'Ransomware', 2, '2022-03-01 10:00:00'), ('192.168.0.2', 'Phishing', 1, '2022-03-02 11:00:00'), ('192.168.0.3', 'Ransomware', 3, '2022-03-03 12:00:00'), ('192.168.0.4', 'Phishing', 4, '2022-03-04 13:00:00'), ('192.168.0.5', 'Ransomware', 1, '2022-03-05 14:00:00');", 'sql': "SELECT ip_address FROM attack_ips WHERE attack_type IN ('Ransomware', 'Phishing') AND last_updated >= DATEADD(month, -6, GETDATE()) GROUP BY ip_address HAVING COUNT(*) = 1;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT COUNT(DISTINCT ip_address) FROM attack_ips WHERE attack_type IN ('Ransomware', 'Phishing') AND occurrence_count > 0 AND last_updated >= DATE('now','6 month ago');"
), 1), (Example({'sql_prompt': 'What is the average number of disaster preparedness trainings held per year in the state of California?', 'sql_context': 'CREATE TABLE DisasterPreparedness (id INT, state VARCHAR(20), year INT, training_count INT);', 'sql': "SELECT AVG(training_count/1.0) FROM DisasterPreparedness WHERE state = 'California' GROUP BY year;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT AVG(training_count) FROM DisasterPreparedness WHERE state = 'California' AND year >= YEAR(CURDATE()) - 1;"
), 1), (Example({'sql_prompt': 'What is the ratio of electric cars to electric bikes in Seoul?', 'sql_context': "CREATE TABLE electric_vehicles (vehicle_id INT, type VARCHAR(20), city VARCHAR(20)); INSERT INTO electric_vehicles (vehicle_id, type, city) VALUES (1, 'Car', 'Seoul'), (2, 'Car', 'Seoul'), (3, 'Bike', 'Seoul'), (4, 'Bike', 'Seoul');", 'sql': "SELECT city, COUNT(*) FILTER (WHERE type = 'Car') * 1.0 / COUNT(*) FILTER (WHERE type = 'Bike') AS car_to_bike_ratio FROM electric_vehicles WHERE city = 'Seoul' GROUP BY city;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT COUNT(CASE WHEN type ='Car' THEN 1 END) / COUNT(CASE WHEN type ='Bike' THEN 1 END) FROM electric_vehicles WHERE city='Seoul';"
), 1), (Example({'sql_prompt': 'What is the number of concerts with more than 10,000 attendees and featuring artists from underrepresented communities?', 'sql_context': "CREATE TABLE Concerts (concert_id INT, concert_name TEXT, attendees INT, artist_id INT); INSERT INTO Concerts (concert_id, concert_name, attendees, artist_id) VALUES (1, 'Lollapalooza', 30000, 1), (2, 'Bonnaroo', 25000, 2), (3, 'Firefly', 15000, 3); CREATE TABLE Artists (artist_id INT, artist_name TEXT, underrepresented_community BOOLEAN); INSERT INTO Artists (artist_id, artist_name, underrepresented_community) VALUES (1, 'Billie Eilish', TRUE), (2, 'Taylor Swift', FALSE), (3, 'Bad Bunny', TRUE);", 'sql': 'SELECT COUNT(c.concert_id) FROM Concerts c JOIN Artists a ON c.artist_id = a.artist_id WHERE c.attendees > 10000 AND a.underrepresented_community = TRUE;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='SELECT COUNT(*) FROM Concerts WHERE attendees > 10000 AND artist_id IN (SELECT artist_id FROM Artists WHERE underrepresented_community = TRUE);'
), 1), (Example({'sql_prompt': 'Show the number of humanitarian assistance missions conducted by the European Union in 2021', 'sql_context': "CREATE TABLE humanitarian_assistance_missions (mission_id INT, organization VARCHAR(255), mission_name VARCHAR(255), start_date DATE, end_date DATE); INSERT INTO humanitarian_assistance_missions (mission_id, organization, mission_name, start_date, end_date) VALUES (1, 'European Union', 'Mission A', '2021-01-01', '2021-12-31');", 'sql': "SELECT COUNT(*) FROM humanitarian_assistance_missions WHERE organization = 'European Union' AND YEAR(start_date) = 2021;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT COUNT(*) FROM humanitarian_assistance_missions WHERE organization = 'European Union' AND YEAR(start_date) = 2021;"
), 1), (Example({'sql_prompt': "Update wastewater treatment records from 'New York' to have a 5% higher water volume", 'sql_context': 'CREATE TABLE wastewater_treatment ( id INT PRIMARY KEY, location VARCHAR(255), treatment_date DATE, water_volume INT);', 'sql': "UPDATE wastewater_treatment SET water_volume = water_volume * 1.05 WHERE location = 'New York';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="UPDATE wastewater_treatment SET water_volume = water_volume * 1.05 WHERE location = 'New York';"
), 1), (Example({'sql_prompt': 'Which spacecraft have been used in the most unique space missions?', 'sql_context': 'CREATE TABLE spacecraft_missions_unique (id INT PRIMARY KEY, spacecraft_name VARCHAR(50), mission_name VARCHAR(50));', 'sql': 'SELECT spacecraft_name, COUNT(DISTINCT mission_name) as unique_missions FROM spacecraft_missions_unique GROUP BY spacecraft_name;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='SELECT DISTINCT spacecraft_name FROM spacecraft_missions_unique GROUP BY spacecraft_name ORDER BY COUNT(DISTINCT mission_name) DESC;'
), 1), (Example({'sql_prompt': "Show the number of mining equipment units, by type, that were added to the 'equipment_inventory' table in 2022.", 'sql_context': "CREATE TABLE equipment_inventory_history (id INT, equipment_type VARCHAR(50), quantity INT, transaction_date DATE); INSERT INTO equipment_inventory_history (id, equipment_type, quantity, transaction_date) VALUES (1, 'Excavator', 5, '2022-01-01'), (2, 'Drill', 3, '2022-02-01'), (3, 'Haul Truck', 2, '2022-03-01');", 'sql': "SELECT equipment_type, SUM(quantity) as total_added FROM equipment_inventory_history WHERE transaction_date >= '2022-01-01' AND transaction_date < '2023-01-01' GROUP BY equipment_type;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT equipment_type, SUM(quantity) as total_units\nFROM equipment_inventory_history\nWHERE transaction_date LIKE '%2022%'\nGROUP BY equipment_type;"
), 1), (Example({'sql_prompt': 'What is the average number of military innovation projects by type (e.g., AI, cybersecurity, drones) in each region, ordered from highest to lowest?', 'sql_context': "CREATE TABLE military_innovation_3 (id INT, region VARCHAR(255), project_type VARCHAR(255)); INSERT INTO military_innovation_3 (id, region, project_type) VALUES (1, 'North America', 'AI'), (2, 'Europe', 'Cybersecurity'), (3, 'Asia', 'Drones'), (4, 'North America', 'Cybersecurity'), (5, 'Europe', 'AI'), (6, 'Asia', 'Quantum Computing'), (7, 'North America', 'Drones'), (8, 'Europe', 'Quantum Computing'), (9, 'Asia', 'AI'), (10, 'North America', 'Quantum Computing');", 'sql': 'SELECT region, AVG(project_type) AS avg_projects FROM military_innovation_3 GROUP BY region ORDER BY avg_projects DESC;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT region, project_type, AVG(CASE WHEN project_type ='AI' THEN 1 ELSE 0 END) as avg_ai, AVG(CASE WHEN project_type ='Cybersecurity' THEN 1 ELSE 0 END) as avg_cybersecurity, AVG(CASE WHEN project_type = 'Drones' THEN 1 ELSE 0 END) as avg_drones, AVG(CASE WHEN project_type = 'Quantum Computing' THEN 1 ELSE 0 END) as avg_quantum FROM military_innovation_3 GROUP BY region OR"
), 0), (Example({'sql_prompt': "Show all military innovation records that are not related to 'Country W'", 'sql_context': 'CREATE TABLE military_innovation (id INT, country VARCHAR(255), innovation VARCHAR(255));', 'sql': "SELECT * FROM military_innovation WHERE country != 'Country W';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT * FROM military_innovation WHERE country != 'Country W';"
), 1), (Example({'sql_prompt': 'Find the top 3 countries with the highest average donation amount in the past 6 months.', 'sql_context': "CREATE TABLE Donations (DonationID INT, DonorName TEXT, Country TEXT, AmountDonated DECIMAL, DonationDate DATE); INSERT INTO Donations (DonationID, DonorName, Country, AmountDonated, DonationDate) VALUES (1, 'Ravi Sharma', 'India', 1000, '2022-01-15'); INSERT INTO Donations (DonationID, DonorName, Country, AmountDonated, DonationDate) VALUES (2, 'Marie Jones', 'Canada', 2000, '2022-02-10');", 'sql': 'SELECT Country, AVG(AmountDonated) as AvgDonation FROM Donations WHERE DonationDate >= DATEADD(month, -6, GETDATE()) GROUP BY Country ORDER BY AvgDonation DESC LIMIT 3;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='SELECT Country, AVG(AmountDonated) as Average_Donation_Amount\nFROM Donations\nWHERE DonationDate >= DATEADD(month,-6,GETDATE()) -- adjust the number in months if needed\nGROUP BY Country\nORDER BY Average_Donation_Amount DESC\nLIMIT 3;'
), 1), (Example({'sql_prompt': 'How many citizen feedback records were recorded for each city in 2020?', 'sql_context': "CREATE TABLE Feedback (CityName VARCHAR(50), FeedbackID INT, Date DATE); INSERT INTO Feedback (CityName, FeedbackID, Date) VALUES ('CityA', 1, '2020-01-01'), ('CityA', 2, '2020-02-01'), ('CityB', 3, '2020-01-01'), ('CityB', 4, '2020-03-01'), ('CityC', 5, '2020-01-01');", 'sql': "SELECT CityName, COUNT(*) FROM Feedback WHERE Date BETWEEN '2020-01-01' AND '2020-12-31' GROUP BY CityName;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='SELECT CityName, COUNT(FeedbackID) as NumOfRecords\nFROM Feedback\nWHERE YEAR(Date) = 2020\nGROUP BY CityName;'
), 1), (Example({'sql_prompt': 'Update the "threat_level" of the "threat_intelligence" table to "medium" where the "threat_source" is "United Nations" and the "threat_date" is before \'2022-01-01\'', 'sql_context': 'CREATE TABLE threat_intelligence (threat_id INT, threat_source VARCHAR(50), threat_level VARCHAR(50), threat_description VARCHAR(50), threat_date DATE);', 'sql': "UPDATE threat_intelligence SET threat_level = 'medium' WHERE threat_source = 'United Nations' AND threat_date < '2022-01-01';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="UPDATE `threat_intelligence` SET `threat_level` = 'medium' WHERE `threat_source` = 'United Nations' AND `threat_date` < '2022-01-01';"
), 1), (Example({'sql_prompt': 'List all hotels with their total revenue from OTA partners.', 'sql_context': "CREATE TABLE hotel_revenue (hotel_id INT, partner_id INT, revenue FLOAT); INSERT INTO hotel_revenue (hotel_id, partner_id, revenue) VALUES (1, 1, 10000), (1, 2, 15000), (2, 1, 8000), (2, 2, 12000), (3, 1, 13000), (3, 2, 17000); CREATE TABLE hotels (id INT, name TEXT); INSERT INTO hotels (id, name) VALUES (1, 'The Grand Hotel'), (2, 'Park Lane Hotel'), (3, 'Ocean View Hotel');", 'sql': 'SELECT h.name, SUM(hr.revenue) AS total_revenue FROM hotels h JOIN hotel_revenue hr ON h.id = hr.hotel_id GROUP BY h.name;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='SELECT `hotels`.`name`, SUM(`hotel_revenue`.`revenue`) AS total_revenue FROM `hotels` JOIN `hotel_revenue` ON `hotels`.`id` = `hotel_revenue`.`hotel_id` GROUP BY `hotels`.`name`;'
), 1), (Example({'sql_prompt': 'Total number of therapy sessions in each region?', 'sql_context': "CREATE TABLE therapy_sessions (session_id INT, region VARCHAR(20)); INSERT INTO therapy_sessions (session_id, region) VALUES (1, 'Asia'), (2, 'Europe'), (3, 'America'), (4, 'Asia'), (5, 'Asia');", 'sql': 'SELECT region, COUNT(*) as total_sessions FROM therapy_sessions GROUP BY region;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='SELECT region, COUNT(*) as total_sessions FROM therapy_sessions GROUP BY region;'
), 1), (Example({'sql_prompt': 'Update the metric_value of the resilience metric with id 1 to 92', 'sql_context': "CREATE TABLE resilience_metrics (id INT PRIMARY KEY, metric_name VARCHAR(255), metric_value INT, project_id INT); INSERT INTO resilience_metrics (id, metric_name, metric_value, project_id) VALUES (1, 'Earthquake Resistance', 90, 1); INSERT INTO resilience_metrics (id, metric_name, metric_value, project_id) VALUES (2, 'Wind Resistance', 95, 1);", 'sql': 'UPDATE resilience_metrics SET metric_value = 92 WHERE id = 1;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='UPDATE resilience_metrics SET metric_value = 92 WHERE id = 1;'
), 1), (Example({'sql_prompt': 'What is the landfill capacity growth rate for Landfill A from 2018 to 2020?', 'sql_context': "CREATE TABLE landfill_capacity (id INT, name VARCHAR(50), year INT, capacity INT); INSERT INTO landfill_capacity (id, name, year, capacity) VALUES (1, 'Landfill A', 2018, 5000000), (2, 'Landfill A', 2019, 5200000), (3, 'Landfill A', 2020, 5500000), (4, 'Landfill B', 2018, 4000000), (5, 'Landfill B', 2019, 4200000), (6, 'Landfill B', 2020, 4500000);", 'sql': "SELECT ((capacity - (SELECT capacity FROM landfill_capacity l2 WHERE l2.name = 'Landfill A' AND l2.year = 2018)) / (SELECT capacity FROM landfill_capacity l3 WHERE l3.name = 'Landfill A' AND l3.year = 2018)) * 100 FROM landfill_capacity WHERE name = 'Landfill A' AND year = 2020;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT ((capacity in year 2o2o - capacity in year 2o18) / capacity in year 2o18) * 1oo AS growth_rate FROM landfill_capacity WHERE name = 'Landfill A';"
), 1), (Example({'sql_prompt': 'What is the average transaction amount in EUR by city for the month of May 2022?', 'sql_context': 'CREATE TABLE customers (customer_id INT, customer_city VARCHAR(30)); CREATE TABLE transactions (transaction_id INT, customer_id INT, transaction_amount DECIMAL(10,2), transaction_date DATE, transaction_currency VARCHAR(3));', 'sql': "SELECT customer_city, AVG(transaction_amount) as average_transaction_amount FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id WHERE transaction_date BETWEEN '2022-05-01' AND '2022-05-31' AND transaction_currency = 'EUR' GROUP BY customer_city;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT AVG(transaction_amount) as average\\_transaction\\_amount, customer\\_city\nFROM transactions\nJOIN customers ON transactions.customer_id = customers.customer\\_id\nWHERE transaction_date='2022-05-01' AND transaction_currency='EUR'\nGROUP BY customer\\_city;"
), 1), (Example({'sql_prompt': 'Insert a new record for a donation of $1000 made by an individual donor named "John Doe" on January 1, 2022.', 'sql_context': 'CREATE TABLE donations (id INT, donor_id INT, donation_date DATE, amount_donated DECIMAL(10,2)); CREATE TABLE donors (id INT, name TEXT);', 'sql': "INSERT INTO donations (id, donor_id, donation_date, amount_donated) VALUES (1, (SELECT id FROM donors WHERE name = 'John Doe' LIMIT 1), '2022-01-01', 1000); INSERT INTO donors (id, name) VALUES (1, 'John Doe') ON DUPLICATE KEY UPDATE id = id;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="INSERT INTO donations (donor_id, donation_date, amount_donated) VALUES ((SELECT id FROM donors WHERE name = 'John Doe'), STRToDate('2022-01-01', '%Y-%m-%d'), 1000.0);\nINSERT INTO donors (name) VALUES ('John Doe') ON DUPLICATE KEY UPDATE id=id;"
), 0), (Example({'sql_prompt': 'Which athletes have the most gold medals in the Winter Olympics?', 'sql_context': 'CREATE TABLE winter_olympics (athlete TEXT, gold INT, silver INT, bronze INT, year INT);', 'sql': 'SELECT athlete, SUM(gold) FROM winter_olympics GROUP BY athlete ORDER BY SUM(gold) DESC LIMIT 1;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='SELECT athlete FROM winter_olympics WHERE gold = (SELECT MAX(gold) FROM winter_olympics);'
), 1), (Example({'sql_prompt': "How many donors are there in the 'South West' region?", 'sql_context': "CREATE TABLE Donors (id INT, name TEXT, region TEXT); INSERT INTO Donors (id, name, region) VALUES (1, 'Carol', 'South West'), (2, 'Dave', 'South East'), (3, 'Eva', 'South West');", 'sql': "SELECT COUNT(*) FROM Donors WHERE region = 'South West';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT COUNT(*) FROM Donors WHERE region = 'South West';"
), 1), (Example({'sql_prompt': 'What is the maximum data usage for broadband subscribers in a specific region?', 'sql_context': 'CREATE TABLE broadband_subscribers (subscriber_id INT, region VARCHAR(50), data_usage INT);', 'sql': 'SELECT region, MAX(data_usage) FROM broadband_subscribers GROUP BY region;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT MAX(data_usage) FROM broadband_subscribers WHERE region='[specific-region]';"
), 1), (Example({'sql_prompt': 'What is the total amount of international climate finance provided to Small Island Developing States (SIDS) for climate mitigation projects between 2018 and 2020?', 'sql_context': "CREATE TABLE climate_finance (region VARCHAR(50), year INT, sector VARCHAR(50), is_sids BOOLEAN, amount FLOAT); INSERT INTO climate_finance (region, year, sector, is_sids, amount) VALUES ('Caribbean', 2018, 'Mitigation', TRUE, 1200.5), ('Caribbean', 2019, 'Mitigation', TRUE, 1500.3), ('Caribbean', 2020, 'Mitigation', TRUE, 1800.2), ('Pacific', 2018, 'Mitigation', TRUE, 200.5), ('Pacific', 2019, 'Mitigation', TRUE, 250.3), ('Pacific', 2020, 'Mitigation', TRUE, 300.2);", 'sql': "SELECT SUM(amount) FROM climate_finance WHERE is_sids = TRUE AND sector = 'Mitigation' AND year BETWEEN 2018 AND 2020;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT SUM(amount) FROM climate_finance WHERE is_sids = TRUE AND year BETWEEN 2018 AND 2020 AND sector = 'Mitigation';"
), 1), (Example({'sql_prompt': 'Determine the percentage of funding for each program', 'sql_context': 'CREATE TABLE program_funding (program_id INT, amount DECIMAL(10,2)); INSERT INTO program_funding (program_id, amount) VALUES (1, 5000.00), (2, 7000.00), (3, 3000.00);', 'sql': 'SELECT p.name, (SUM(f.amount)/(SELECT SUM(amount) FROM program_funding))*100 AS percentage FROM program_funding f JOIN programs p ON f.program_id = p.id GROUP BY p.id;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='SELECT program_id, ROUND(amount / SUM(amount) * 1OOO, 2) AS percentage FROM program_funding GROUP BY program_id;'
), 1), (Example({'sql_prompt': "Count the number of safety tests passed by vehicles in the 'safety_testing' table", 'sql_context': 'CREATE TABLE safety_testing (id INT PRIMARY KEY, make VARCHAR(50), model VARCHAR(50), year INT, tests_passed INT);', 'sql': 'SELECT COUNT(*) FROM safety_testing WHERE tests_passed IS NOT NULL;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='SELECT COUNT(*) FROM safety_testing WHERE tests_passed > 0;'
), 1), (Example({'sql_prompt': 'Delete records of hospitals in Alabama.', 'sql_context': "CREATE TABLE hospitals (id INT, name TEXT, location TEXT); INSERT INTO hospitals (id, name, location) VALUES (1, 'Hospital A', 'Rural Texas'); INSERT INTO hospitals (id, name, location) VALUES (5, 'Hospital E', 'Rural Alabama');", 'sql': "DELETE FROM hospitals WHERE location = 'Rural Alabama';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="DELETE FROM hospitals WHERE location = 'Alabama';"
), 1), (Example({'sql_prompt': 'What is the percentage of community health workers who speak Spanish, and how does this vary by state?', 'sql_context': "CREATE TABLE community_health_workers_lang (worker_id INT, state VARCHAR(2), speaks_spanish BOOLEAN); INSERT INTO community_health_workers_lang (worker_id, state, speaks_spanish) VALUES (1, 'CA', TRUE), (2, 'NY', FALSE), (3, 'TX', TRUE);", 'sql': 'SELECT c.state, (COUNT(*) FILTER (WHERE c.speaks_spanish = TRUE)) * 100.0 / COUNT(*) as pct_spanish_speakers FROM community_health_workers_lang c GROUP BY c.state;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='SELECT `state`, COUNT(*) as num_sp speakers, SUM(CASE WHEN speaks_spanish THEN 1 ELSE 0 END) as spanish_speakers,\n       ROUND((SUM(CASE WHEN speaks_spanish THEN 1.0 ELSE 0 END)/COUNT(*))*100,2) AS percentage\nFROM community_health_workers_lang\nGROUP BY `state`;'
), 1), (Example({'sql_prompt': "Find the number of vehicles in each maintenance category in the 'vehicle_maintenance' table.", 'sql_context': 'CREATE TABLE vehicle_maintenance (vehicle_id INT, category VARCHAR(255), maintenance_date DATE);', 'sql': 'SELECT category, COUNT(*) as num_vehicles FROM vehicle_maintenance GROUP BY category;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='SELECT `category`, COUNT(`vehicle_id`) as count FROM `vehicle_maintenance` GROUP BY `category`;'
), 1), (Example({'sql_prompt': 'What is the average salary of employees who identify as Latinx in the Engineering department?', 'sql_context': "CREATE TABLE Employees (EmployeeID int, Name varchar(50), Gender varchar(10), Department varchar(50), Salary decimal(10,2), Ethnicity varchar(50)); INSERT INTO Employees (EmployeeID, Name, Gender, Department, Salary, Ethnicity) VALUES (1, 'Juan Garcia', 'Male', 'Engineering', 85000.00, 'Latinx'); INSERT INTO Employees (EmployeeID, Name, Gender, Department, Salary, Ethnicity) VALUES (2, 'Maria Rodriguez', 'Female', 'Engineering', 90000.00, 'Latinx');", 'sql': "SELECT AVG(Salary) FROM Employees WHERE Department = 'Engineering' AND Ethnicity = 'Latinx';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT AVG(Salary) FROM Employees WHERE Department = 'Engineering' AND Ethnicity = 'Latinx';"
), 1), (Example({'sql_prompt': 'What is the maximum revenue generated by a single sustainable tour in Japan?', 'sql_context': "CREATE TABLE sustainable_tours (id INT, country VARCHAR(20), revenue FLOAT); INSERT INTO sustainable_tours (id, country, revenue) VALUES (1, 'Japan', 2000.0), (2, 'Japan', 2500.0), (3, 'Japan', 3000.0);", 'sql': "SELECT MAX(revenue) FROM sustainable_tours WHERE country = 'Japan';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT MAX(revenue) FROM sustainable_tours WHERE country = 'Japan';"
), 1), (Example({'sql_prompt': 'What is the minimum water temperature in saltwater aquaculture facilities in the Mediterranean region?', 'sql_context': "CREATE TABLE saltwater_aquaculture (id INT, name TEXT, location TEXT, water_temperature FLOAT); INSERT INTO saltwater_aquaculture (id, name, location, water_temperature) VALUES (1, 'Facility A', 'Mediterranean', 21.5), (2, 'Facility B', 'Mediterranean', 22.2), (3, 'Facility C', 'Indian Ocean', 28.0);", 'sql': "SELECT MIN(water_temperature) FROM saltwater_aquaculture WHERE location = 'Mediterranean';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT MIN(water_temperature) FROM saltwater_aquaculture WHERE location = 'Mediterranean';"
), 1), (Example({'sql_prompt': "Find total carbon offsets achieved by projects in 'GreenProjects' table, with a budget over $100,000,000?", 'sql_context': 'CREATE TABLE GreenProjects (project_id INT, name VARCHAR(100), budget INT, carbon_offsets_achieved INT);', 'sql': 'SELECT SUM(carbon_offsets_achieved) FROM GreenProjects WHERE budget > 100000000;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='SELECT SUM(carbon_offsets_achieved) FROM GreenProjects WHERE budget > 100000000;'
), 1), (Example({'sql_prompt': 'List all clients with their age and the total number of investments they made?', 'sql_context': "CREATE TABLE clients (client_id INT, name TEXT, age INT, gender TEXT); INSERT INTO clients VALUES (1, 'John Doe', 35, 'Male'), (2, 'Jane Smith', 45, 'Female'), (3, 'Bob Johnson', 50, 'Male'); CREATE TABLE investments (client_id INT, investment_type TEXT); INSERT INTO investments VALUES (1, 'Stocks'), (1, 'Bonds'), (2, 'Stocks'), (2, 'Mutual Funds'), (3, 'Mutual Funds'), (3, 'Real Estate');", 'sql': 'SELECT c.age, COUNT(i.investment_type) AS num_investments FROM clients c LEFT JOIN investments i ON c.client_id = i.client_id GROUP BY c.client_id;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='SELECT clients.name AS Client_Name, clients.age AS Age, COUNT(investments.client_id) as Total_Investments\nFROM clients\nJOIN investments ON clients.client_id = investments.client_id\nGROUP BY clients.name, clients.age;'
), 1), (Example({'sql_prompt': 'What was the total revenue for each vehicle type in January 2021?', 'sql_context': "CREATE TABLE vehicle_maintenance (id INT, vehicle_type VARCHAR(20), maintenance_date DATE, cost FLOAT); INSERT INTO vehicle_maintenance (id, vehicle_type, maintenance_date, cost) VALUES (1, 'Bus', '2021-01-05', 500), (2, 'Tram', '2021-01-07', 800), (3, 'Train', '2021-01-09', 1200);", 'sql': "SELECT vehicle_type, SUM(cost) as total_revenue FROM vehicle_maintenance WHERE maintenance_date BETWEEN '2021-01-01' AND '2021-01-31' GROUP BY vehicle_type;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT vehicle_type, SUM(cost) as total_revenue FROM vehicle_maintenance WHERE maintenance_date BETWEEN '2021-01-01' AND '2021-01-31' GROUP BY vehicle_type;"
), 1), (Example({'sql_prompt': 'What is the difference in the number of eco-friendly hotels between the top 2 countries?', 'sql_context': "CREATE TABLE eco_hotel_count (country TEXT, num_hotels INT); INSERT INTO eco_hotel_count (country, num_hotels) VALUES ('France', 100), ('Italy', 120), ('Germany', 150), ('Spain', 110), ('UK', 160);", 'sql': "SELECT (MAX(num_hotels) OVER (PARTITION BY num_hotels <= 2) - MIN(num_hotels) OVER (PARTITION BY num_hotels <= 2)) AS hotel_difference FROM eco_hotel_count WHERE country IN ('France', 'Italy');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT A.num_hotels - B.num_hotels AS difference FROM eco_hotel_count AS A JOIN eco_hotel_count AS B ON (A.country != 'France' AND B.country = 'France') ORDER BY difference DESC LIMIT 1;\nThis query calculates the differences in number of eco-friendly hotels between each country and France, then orders them in descending order to find out which countries have the most significant difference compared to France (the top 2 countries)."
), 1), (Example({'sql_prompt': 'Calculate the biomass of fish in the Salmon farm by weight and date', 'sql_context': "CREATE TABLE FishBiomass (fish_id INT, farm_id INT, weight DECIMAL(5,2), date DATE); INSERT INTO FishBiomass (fish_id, farm_id, weight, date) VALUES (201, 2, 0.6, '2022-01-01'), (202, 2, 0.7, '2022-01-02');", 'sql': 'SELECT farm_id, SUM(weight) over (partition by farm_id order by date) biomass FROM FishBiomass WHERE farm_id = 2;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='SELECT farm_id, weight * SUM(weight) OVER (PARTITION BY farm_id ORDER BY date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS biomass, date FROM FishBiomass WHERE farm_id = 2;\nThis SQL query calculates the total biomass of fish in the Salmon farm by summing up their weights for each day. It does this by using a window function to calculate the running total weight (SUM(weight)) for each farm, ordered by date. The WHERE clause is used to filter results only from farm_id 2 which represents the Salmon farm according to context provided.'
), 1), (Example({'sql_prompt': "Update the bank name to 'GreenLend' for record with id 1 in the 'loans' table.", 'sql_context': "CREATE TABLE loans (id INT, bank VARCHAR(20), amount DECIMAL(10,2), is_socially_responsible BOOLEAN); INSERT INTO loans (id, bank, amount, is_socially_responsible) VALUES (1, 'BlueBank', 1000.00, true), (2, 'GreenLend', 1500.00, false), (3, 'BlueBank', 2000.00, true);", 'sql': "UPDATE loans SET bank = 'GreenLend' WHERE id = 1;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="UPDATE loans SET bank = 'GreenLend' WHERE id = 1;"
), 1), (Example({'sql_prompt': 'What is the total number of volunteers and total volunteer hours for each region, excluding the top 3 regions with the highest total volunteer hours?', 'sql_context': "CREATE TABLE Volunteers (VolunteerID INT, VolunteerName TEXT, Region TEXT, VolunteerHours INT, EventDate DATE); INSERT INTO Volunteers VALUES (1, 'Ahmed Al-Hassan', 'Middle East and North Africa', 20, '2022-01-01'), (2, 'Fatima Al-Farsi', 'Europe', 15, '2022-02-01');", 'sql': 'SELECT Region, COUNT(VolunteerID) as TotalVolunteers, SUM(VolunteerHours) as TotalHours FROM Volunteers v JOIN (SELECT Region, ROW_NUMBER() OVER (ORDER BY SUM(VolunteerHours) DESC) as rn FROM Volunteers GROUP BY Region) tmp ON v.Region = tmp.Region WHERE rn > 3 GROUP BY Region;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='SELECT Region, SUM(VolunteerHours) AS Total_Volunteer_Hours, COUNT(*) as Total_Number_of_Volunteers\nFROM Volunteers\nWHERE (Region NOT IN (\n    SELECT Region FROM (SELECT Region, SUM(VolunteerHours) AS Total_Volunteer_Hours FROM Volunteers GROUP BY Region ORDER BY Total_Volunteer_Hours DESC LIMIT 3)) )\nGROUP BY Region;'
), 1), (Example({'sql_prompt': 'What is the total patient count for each mental health condition, for providers in the Northeast and Southeast?', 'sql_context': "CREATE TABLE mental_health_conditions (condition_id INT, condition_name VARCHAR(50)); INSERT INTO mental_health_conditions (condition_id, condition_name) VALUES (1, 'Anxiety'), (2, 'Depression'), (3, 'Bipolar Disorder'); CREATE TABLE providers (provider_id INT, provider_name VARCHAR(50), region_id INT); INSERT INTO providers (provider_id, provider_name, region_id) VALUES (1, 'Dr. Smith', 1), (2, 'Dr. Johnson', 2); CREATE TABLE provider_patients (provider_id INT, condition_id INT, patient_id INT);", 'sql': 'SELECT mhc.condition_name, SUM(pp.patient_id) as total_patients FROM mental_health_conditions mhc JOIN provider_patients pp ON mhc.condition_id = pp.condition_id JOIN providers p ON pp.provider_id = p.provider_id WHERE p.region_id IN (1, 2) GROUP BY mhc.condition_name;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='SELECT `condition_name`, COUNT(DISTINCT `patient_id`) as total_count\nFROM mental_health_conditions mhc\nJOIN provider_patients pp ON mhc.condition_id = pp.condition_id\nJOIN providers p ON pp.provider_id = p.provider_id\nWHERE p.region\\_id IN (1, 2) -- Northeast and Southeast regions have region\\_ids of 1 and 2 respectively in the given context\nGROUP BY `condition_name`;'
), 1), (Example({'sql_prompt': 'What is the total amount of chemicals stored in the storage facilities, grouped by the state and the facility name?', 'sql_context': "CREATE TABLE StorageFacilities (FacilityID INT, FacilityName TEXT, State TEXT, Chemical TEXT, Quantity DECIMAL(5,2)); INSERT INTO StorageFacilities (FacilityID, FacilityName, State, Chemical, Quantity) VALUES (1, 'Cool Storage', 'Texas', 'Acetone', 50.5), (2, 'Warm Storage', 'California', 'Acetone', 75.3), (3, 'Freezer', 'Texas', 'Nitrogen', 150.5), (4, 'Hot Storage', 'California', 'Nitrogen', 250.3);", 'sql': 'SELECT State, FacilityName, SUM(Quantity) AS TotalQuantity FROM StorageFacilities GROUP BY State, FacilityName;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='SELECT State, FacilityName, SUM(Quantity) AS TotalChemicals\nFROM StorageFacilities\nGROUP BY State, FacilityName;'
), 1), (Example({'sql_prompt': "List all unique fields from the 'geology' and 'infrastructure' tables.", 'sql_context': 'CREATE TABLE geology (well_id INT, rock_type VARCHAR(50)); CREATE TABLE infrastructure (well_id INT, platform_type VARCHAR(50));', 'sql': "SELECT field FROM (SELECT 'geology' as table_name, column_name as field FROM information_schema.columns WHERE table_name = 'geology' UNION ALL SELECT 'infrastructure' as table_name, column_name as field FROM information_schema.columns WHERE table_name = 'infrastructure') as subquery;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='SELECT DISTINCT well_id, rock_type FROM geology;\nSELECT DISTINCT well_id, platform_type FROM infrastructure;'
), 0), (Example({'sql_prompt': 'What is the success rate of startups founded by immigrants?', 'sql_context': 'CREATE TABLE companies (id INT, name TEXT, founder_immigrant BOOLEAN, is_active BOOLEAN);', 'sql': 'SELECT 100.0 * AVG(CASE WHEN founder_immigrant THEN 1.0 ELSE 0.0 END * CASE WHEN is_active THEN 1.0 ELSE 0.0 END) as success_rate FROM companies;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='SELECT AVG(CASE WHEN founder_immigrant = TRUE THEN 1.0 ELSE 0 END) AS success_rate FROM companies WHERE is_active = TRUE;'
), 1), (Example({'sql_prompt': 'What is the minimum and maximum serving size for vegan meals in the United States?', 'sql_context': "CREATE TABLE MealSizes(id INT, name TEXT, serving_size INT, is_vegan BOOLEAN, country TEXT); INSERT INTO MealSizes(id, name, serving_size, is_vegan, country) VALUES (1, 'Vegan Pizza', 250, TRUE, 'USA'), (2, 'Chickpea Curry', 380, TRUE, 'USA');", 'sql': "SELECT MIN(serving_size), MAX(serving_size) FROM MealSizes WHERE is_vegan = TRUE AND country = 'USA';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT MIN(serving_size), MAX(serving_size) FROM MealSizes WHERE is_vegan = true AND country = 'USA';"
), 1), (Example({'sql_prompt': "Find the earliest start date for defense projects in the 'Asia-Pacific' region.", 'sql_context': "CREATE TABLE DefenseProjects (project_id INT, project_name VARCHAR(255), region VARCHAR(255), start_date DATE, end_date DATE); INSERT INTO DefenseProjects (project_id, project_name, region, start_date, end_date) VALUES (1, 'Project X', 'Asia-Pacific', '2022-02-01', '2023-01-31'), (2, 'Project Y', 'Europe', '2021-06-15', '2022-05-31'), (3, 'Project Z', 'Asia-Pacific', '2024-04-01', '2025-03-31');", 'sql': "SELECT MIN(start_date) AS min_start_date FROM DefenseProjects WHERE region = 'Asia-Pacific';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT MIN(start_date) FROM DefenseProjects WHERE region = 'Asia-Pacific';"
), 1), (Example({'sql_prompt': 'List all dams located in the province of Quebec that have exceeded their maximum design capacity at any point in time.', 'sql_context': "CREATE TABLE dam (id INT, name TEXT, province TEXT, design_capacity FLOAT, max_exceeded INT); INSERT INTO dam (id, name, province, design_capacity, max_exceeded) VALUES (1, 'Dam A', 'Quebec', 5000000, 1); INSERT INTO dam (id, name, province, design_capacity, max_exceeded) VALUES (2, 'Dam B', 'Quebec', 6000000, 0);", 'sql': "SELECT name FROM dam WHERE province = 'Quebec' AND max_exceeded = 1;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT * FROM dam WHERE province = 'Quebec' AND max_exceeded = 1;"
), 1), (Example({'sql_prompt': "Insert new fan records from the 'new_fans' staging table into the 'fans' table", 'sql_context': 'CREATE TABLE new_fans (fan_id INT, age INT, gender VARCHAR(10), country VARCHAR(50)); CREATE TABLE fans (fan_id INT PRIMARY KEY, age INT, gender VARCHAR(10), country VARCHAR(50));', 'sql': 'INSERT INTO fans (fan_id, age, gender, country) SELECT fan_id, age, gender, country FROM new_fans;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='INSERT INTO fans SELECT * FROM new_fans;'
), 1), (Example({'sql_prompt': 'Who are the top 3 medication managers with the most patients in India and South Africa?', 'sql_context': "CREATE TABLE medication_managers (id INT, name TEXT); CREATE TABLE patients (id INT, manager_id INT, state TEXT); INSERT INTO medication_managers (id, name) VALUES (1, 'Dr. Ravi Patel'); INSERT INTO medication_managers (id, name) VALUES (2, 'Dr. Naledi Zuma'); INSERT INTO patients (id, manager_id, state) VALUES (1, 1, 'India'); INSERT INTO patients (id, manager_id, state) VALUES (2, 1, 'South Africa'); INSERT INTO patients (id, manager_id, state) VALUES (3, 2, 'South Africa');", 'sql': "SELECT medication_managers.name, COUNT(patients.id) AS patient_count FROM medication_managers INNER JOIN patients ON medication_managers.id = patients.manager_id WHERE patients.state IN ('India', 'South Africa') GROUP BY medication_managers.name ORDER BY patient_count DESC LIMIT 3;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='SELECT `name`, COUNT(DISTINCT `state`) as num_patients\nFROM medication_managers mm\nJOIN patients p ON mm.id = p.manager_id\nGROUP BY mm.id\nORDER BY num_patients DESC, name ASC\nLIMIT 3;'
), 1), (Example({'sql_prompt': 'Show the top 3 content categories in Japan with the most posts.', 'sql_context': "CREATE TABLE content_categories (id INT, content_category VARCHAR(255)); CREATE TABLE posts_extended (id INT, content_category_id INT, content TEXT, country VARCHAR(255)); INSERT INTO content_categories (id, content_category) VALUES (1, 'AI'), (2, 'Data Science'), (3, 'Machine Learning'); INSERT INTO posts_extended (id, content_category_id, content, country) VALUES (1, 1, 'Hello', 'Japan'), (2, 1, 'World', 'Japan'), (3, 2, 'AI', 'Japan');", 'sql': "SELECT content_categories.content_category, COUNT(posts_extended.id) AS post_count FROM content_categories JOIN posts_extended ON posts_extended.content_category_id = content_categories.id WHERE posts_extended.country = 'Japan' GROUP BY content_categories.content_category ORDER BY post_count DESC LIMIT 3;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT content_category AS category, COUNT(*) as post_count FROM posts_extended WHERE country ='Japan' GROUP BY content_category ORDER BY post_count DESC LIMIT 3;"
), 1), (Example({'sql_prompt': 'Determine the maximum sustainable yield of Catfish in the Pacific Ocean in 2024.', 'sql_context': "CREATE TABLE msy (species VARCHAR(255), msy_value FLOAT, year INT, region VARCHAR(255), PRIMARY KEY (species, year, region)); INSERT INTO msy (species, msy_value, year, region) VALUES ('Catfish', 22000, 2024, 'Pacific Ocean'), ('Tuna', 35000, 2024, 'Pacific Ocean'), ('Salmon', 18000, 2024, 'Atlantic Ocean');", 'sql': "SELECT msy_value FROM msy WHERE species = 'Catfish' AND year = 2024 AND region = 'Pacific Ocean';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT msy_value FROM msy WHERE species = 'Catfish' AND year = 2024 AND region = 'Pacific Ocean';"
), 1), (Example({'sql_prompt': 'What is the number of cases in each court, broken down by case type and case status?', 'sql_context': "CREATE TABLE CourtCases (CourtName text, CaseType text, CaseStatus text, NumCases int); INSERT INTO CourtCases VALUES ('Court1', 'Assault', 'Open', 30, '2022-01-01'), ('Court1', 'Theft', 'Closed', 25, '2022-01-01'), ('Court2', 'Assault', 'Open', 28, '2022-01-01'), ('Court2', 'Theft', 'Closed', 22, '2022-01-01');", 'sql': 'SELECT CourtName, CaseType, CaseStatus, SUM(NumCases) FROM CourtCases GROUP BY CourtName, CaseType, CaseStatus;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='SELECT CourtName, CaseType, CaseStatus, SUM(NumCases) as TotalCases FROM CourtCases GROUP BY CourtName, CaseType, CaseStatus;'
), 1), (Example({'sql_prompt': "Provide the number of wildlife species in the 'Amazon' region.", 'sql_context': "CREATE TABLE wildlife_species (region VARCHAR(255), species INT); INSERT INTO wildlife_species (region, species) VALUES ('Amazon', 500), ('Congo', 400), ('Boreal', 300), ('Temperate', 600);", 'sql': "SELECT region, SUM(species) FROM wildlife_species WHERE region = 'Amazon';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT SUM(species) FROM wildlife_species WHERE region = 'Amazon';"
), 0), (Example({'sql_prompt': 'What is the percentage of organic certified fish farms in the Mediterranean in 2021?', 'sql_context': 'CREATE TABLE fish_farms (farm_id INT, region VARCHAR(50), certification_status VARCHAR(50), year INT);', 'sql': "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM fish_farms WHERE year = 2021)) as percentage FROM fish_farms WHERE region = 'Mediterranean' AND certification_status = 'organic' AND year = 2021;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT COUNT(*) / (SELECT COUNT(*) FROM fish_farms WHERE year = 2021 AND region = 'Mediterranean' AND certification_status = 'organic certified') * 100 FROM fish_farms WHERE year = 2021 AND region = 'Mediterranean' AND certification_status = 'organic certified';\n\nThis SQL query calculates the percentage of organic certified fish farms in the Mediterranean for the year 2021 by dividing the count of those specific rows (with conditions: farm is located in Mediterranean, has an organic certificate and was established in 2021) with total number of all fish farms that meet these"
), 1), (Example({'sql_prompt': 'What is the total pro bono hours for attorneys who work on civil cases, ordered by hours?', 'sql_context': "CREATE TABLE attorney (attorney_id INT, name VARCHAR(255), location VARCHAR(255)); INSERT INTO attorney (attorney_id, name, location) VALUES (1, 'Juan Rodriguez', 'Miami'), (2, 'Maria Garcia', 'Los Angeles'), (3, 'David Kim', 'Seattle'); CREATE TABLE case_outcomes (outcome_id INT, attorney_id INT, case_type VARCHAR(255), hours DECIMAL(10,2)); INSERT INTO case_outcomes (outcome_id, attorney_id, case_type, hours) VALUES (1, 1, 'Civil', 20.00), (2, 1, 'Civil', 25.00), (3, 2, 'Criminal', 30.00), (4, 3, 'Family', 35.00), (5, 3, 'Civil', 40.00), (6, 3, 'Civil', 45.00);", 'sql': "SELECT case_type, SUM(hours) as total_hours FROM case_outcomes WHERE case_type = 'Civil' GROUP BY case_type ORDER BY total_hours DESC;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT attorney_id, SUM(hours) as total_hours FROM case_outcomes WHERE case_type = 'Civil' GROUP BY attorney_id ORDER BY total_hours DESC;"
), 1), (Example({'sql_prompt': "What is the average weight of a cargo in the 'cargo_tracking' table?", 'sql_context': "CREATE TABLE cargo_tracking (cargo_id INT, cargo_type VARCHAR(50), weight FLOAT); INSERT INTO cargo_tracking (cargo_id, cargo_type, weight) VALUES (1, 'CargoType1', 5000), (2, 'CargoType2', 7000), (3, 'CargoType3', 6000);", 'sql': 'SELECT AVG(weight) FROM cargo_tracking;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='SELECT AVG(weight) FROM cargo_tracking;'
), 1), (Example({'sql_prompt': 'What is the average time taken for family court cases in New York to reach a verdict in the last 2 years?', 'sql_context': "CREATE TABLE FamilyCourtCases (CaseID INT, CaseType TEXT, StartDate DATE, VerdictDate DATE, State TEXT); INSERT INTO FamilyCourtCases (CaseID, CaseType, StartDate, VerdictDate, State) VALUES (1, 'Family Court', '2020-01-01', '2020-06-01', 'New York');", 'sql': "SELECT AVG(DATEDIFF(VerdictDate, StartDate)) as AvgTime FROM FamilyCourtCases WHERE State = 'New York' AND YEAR(StartDate) BETWEEN YEAR(CURRENT_DATE) - 2 AND YEAR(CURRENT_DATE);"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT AVG(DATEDIFF(VerdictDate, StartDate)) AS AverageTimeFromStartToVerdict FROM FamilyCourtCases WHERE State = 'New York' AND VerdictDate >= DATEADD(year,-2,GETDATE());"
), 1), (Example({'sql_prompt': "What is the maximum donation amount for the 'Health' program?", 'sql_context': 'CREATE TABLE Donations (donation_id INT, amount DECIMAL(10,2), program VARCHAR(255));', 'sql': "SELECT MAX(amount) FROM Donations WHERE program = 'Health';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT MAX(amount) FROM Donations WHERE program = 'Health';"
), 1), (Example({'sql_prompt': 'Add a new column "total_revenue" to the "hotel_reviews" table', 'sql_context': 'CREATE TABLE hotel_reviews (hotel_id INT, review_date DATE, review_score INT);', 'sql': 'ALTER TABLE hotel_reviews ADD total_revenue FLOAT;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='ALTER TABLE hotel\\_reviews ADD total\\_revenue DECIMAL(10,2);'
), 1), (Example({'sql_prompt': "What is the maximum budget allocated for disability support programs in the 'East Coast' region?", 'sql_context': "CREATE TABLE DisabilitySupportPrograms (region VARCHAR(20), budget DECIMAL(5,2)); INSERT INTO DisabilitySupportPrograms (region, budget) VALUES ('East Coast', 150000.00), ('West Coast', 200000.00), ('Midwest', 120000.00), ('South', 180000.00);", 'sql': "SELECT MAX(budget) FROM DisabilitySupportPrograms WHERE region = 'East Coast';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT MAX(budget) FROM DisabilitySupportPrograms WHERE region = 'East Coast';"
), 1), (Example({'sql_prompt': 'What is the total energy produced by geothermal power in Indonesia in 2019?', 'sql_context': 'CREATE TABLE geothermal_power (id INT, name TEXT, country TEXT, energy_produced FLOAT);', 'sql': "SELECT SUM(energy_produced) FROM geothermal_power WHERE country = 'Indonesia' AND YEAR(production_date) = 2019;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT SUM(energy_produced) FROM geothermal_power WHERE country = 'Indonesia' AND year = 2019;"
), 1), (Example({'sql_prompt': "Show the types of economic diversification initiatives and the number of community members involved in each from the 'economic_diversification' and 'community_development' tables", 'sql_context': 'CREATE TABLE economic_diversification (initiative_id INT, initiative_name VARCHAR(50), member_id INT); CREATE TABLE community_development (member_id INT, member_name VARCHAR(50), age INT);', 'sql': 'SELECT e.initiative_name, COUNT(c.member_id) FROM economic_diversification e INNER JOIN community_development c ON e.member_id = c.member_id GROUP BY e.initiative_name;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='SELECT `economic_diversification`.`initiative_name`, COUNT(`community_development`.`member_id`) AS number\\_of\\_members\nFROM `economic_diversification`\nJOIN `community_development` ON `economic_diversification`.`member_id` = `community_development`.`member_id`\nGROUP BY `economic_diversification`.`initiative_name`'
), 1), (Example({'sql_prompt': 'What is the maximum trip duration for public transportation in Berlin?', 'sql_context': 'CREATE TABLE public_transport (transport_id INT, trip_duration INT); INSERT INTO public_transport (transport_id, trip_duration) VALUES (1, 30), (2, 45), (3, 60), (4, 75);', 'sql': 'SELECT MAX(trip_duration) as max_duration FROM public_transport;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='SELECT MAX(trip_duration) FROM public_transport;'
), 1), (Example({'sql_prompt': 'What is the average rating of factories in a given country, based on worker satisfaction surveys?', 'sql_context': 'CREATE TABLE FactoryRatings (id INT, country VARCHAR(50), rating DECIMAL(2,1));', 'sql': 'SELECT country, AVG(rating) as avg_rating FROM FactoryRatings GROUP BY country;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT AVG(rating) FROM FactoryRatings WHERE country = '<given_country>';"
), 1), (Example({'sql_prompt': 'What is the total number of streams per month, by platform, for the last 12 months?', 'sql_context': "CREATE TABLE monthly_streams (stream_id INT, platform VARCHAR(255), streams INT, stream_month DATE);  CREATE VIEW total_streams_per_month AS SELECT platform, DATE_TRUNC('month', stream_month) as month, SUM(streams) as total_streams FROM monthly_streams WHERE stream_month >= DATEADD(month, -12, CURRENT_DATE) GROUP BY platform, month;", 'sql': 'SELECT * FROM total_streams_per_month;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='SELECT platform, COUNT(*) AS total_per_platform\nFROM total_streams_per_month\nGROUP BY platform;'
), 1), (Example({'sql_prompt': "Find the total number of healthcare professionals in 'rural_healthcare' schema?", 'sql_context': 'CREATE SCHEMA if not exists rural_healthcare; use rural_healthcare; CREATE TABLE hospitals (id int, name varchar(255), num_doctors int); CREATE TABLE clinics (id int, name varchar(255), num_nurses int);', 'sql': 'SELECT COALESCE(SUM(h.num_doctors), 0) + COALESCE(SUM(c.num_nurses), 0) FROM hospitals h RIGHT JOIN clinics c ON 1=1;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='SELECT SUM(num_doctors) + SUM(num_nurses) FROM hospitals, clinics;'
), 1), (Example({'sql_prompt': 'Get the total number of inclusion efforts in the InclusionEfforts table for a specific location.', 'sql_context': 'CREATE TABLE InclusionEfforts (effortID INT, effortType VARCHAR(50), location VARCHAR(50), effortStatus VARCHAR(50));', 'sql': "SELECT location, COUNT(*) FROM InclusionEfforts WHERE effortStatus = 'Completed' GROUP BY location;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT COUNT(*) FROM InclusionEfforts WHERE location = 'your_specific_location';"
), 1), (Example({'sql_prompt': 'What is the minimum salary for faculty members in the College of Arts and Humanities?', 'sql_context': 'CREATE TABLE if not exists FACULTY(id INT, name TEXT, department TEXT, position TEXT, salary INT);', 'sql': "SELECT MIN(salary) FROM FACULTY WHERE department = 'College of Arts and Humanities';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT MIN(salary) FROM FACULTY WHERE department = 'College of Arts and Humanities';"
), 1), (Example({'sql_prompt': "Show the 'name' and 'investment_amount' of all investors who have invested more than 50000 in the 'biosensors' table", 'sql_context': 'CREATE TABLE investors (id INT PRIMARY KEY, name TEXT); CREATE TABLE biosensors (id INT PRIMARY KEY, investor_id INT, investment_amount INT);', 'sql': 'SELECT i.name, b.investment_amount FROM investors i JOIN biosensors b ON i.id = b.investor_id WHERE b.investment_amount > 50000;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='SELECT name, investment_amount FROM investors JOIN biosensors ON investors.id = biosensors.investor_id WHERE biosensors.investment_amount > 50000;'
), 1), (Example({'sql_prompt': "Update menu item records for 'Chicken Sandwich' to increase the price by $0.75", 'sql_context': 'CREATE TABLE menu_items (menu_id INT PRIMARY KEY, item_name VARCHAR(255), price DECIMAL(5,2));', 'sql': "UPDATE menu_items SET price = price + 0.75 WHERE item_name = 'Chicken Sandwich';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="UPDATE menu_items SET price = price + 0.75 WHERE item_name = 'Chicken Sandwich';"
), 1)]