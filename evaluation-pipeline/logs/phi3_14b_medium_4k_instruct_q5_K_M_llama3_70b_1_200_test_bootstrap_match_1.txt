[(Example({'sql_prompt': 'Delete records with sales amount over $50,000 in the MilitaryEquipmentSales table', 'sql_context': "CREATE TABLE MilitaryEquipmentSales (id INT, equipment_name VARCHAR(50), sale_amount INT, sale_date DATE); INSERT INTO MilitaryEquipmentSales (id, equipment_name, sale_amount, sale_date) VALUES (1, 'Fighter Jet', 45000, '2021-01-01'), (2, 'Tank', 75000, '2021-02-01');", 'sql': 'DELETE FROM MilitaryEquipmentSales WHERE sale_amount > 50000;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To delete records with a sales amount over $50,000 from the MilitaryEquipmentSales table, we need to write an SQL statement that specifies this condition. The DELETE command is used for removing rows from a table based on a specified criterion.\n\nHere's how you can construct the SQL query:\n\n```sql\nDELETE FROM MilitaryEquipmentSales WHERE sale_amount > 50000;\n```\n\nThis statement will remove all records where the `sale_amount` column value is greater than $50,000.",
    sql="Sql Prompt: Delete records with sales amount over $50,000 in the MilitaryEquipmentSales table\n\nSql Context: CREATE TABLE MilitaryEquipmentSales (id INT, equipment_name VARCHAR(50), sale_amount INT, sale_date DATE); INSERT INTO MilitaryEquipmentSales (id, equipment_name, sale_amount, sale_date) VALUES (1, 'Fighter Jet', 45000, '2021-01-01'), (2, 'Tank', 75000, '2021-02-01');\n\nReasoning: Let's think step by"
), 0), (Example({'sql_prompt': 'What is the average number of visitor reviews for heritage sites in each category?', 'sql_context': "CREATE TABLE HeritageSitesReviews (ID INT, SiteName VARCHAR(100), Category VARCHAR(50), Reviews INT); INSERT INTO HeritageSitesReviews (ID, SiteName, Category, Reviews) VALUES (1, 'Machu Picchu', 'Archaeological', 5000); INSERT INTO HeritageSitesReviews (ID, SiteName, Category, Reviews) VALUES (2, 'Taj Mahal', 'Architectural', 8000);", 'sql': 'SELECT Category, AVG(Reviews) OVER (PARTITION BY Category) AS AvgReviews FROM HeritageSitesReviews;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='To find the average number of visitor reviews for heritage sites in each category, we need to group the records by the `Category` column and then calculate the average (`AVG`) of the `Reviews` column within each group.\n\nThe SQL query would be:\n\n```sql\nSELECT Category, AVG(Reviews) AS avg_reviews FROM HeritageSitesReviews GROUP BY Category;\n```',
    sql="Sql Prompt: What is the average number of visitor reviews for heritage sites in each category?\n\nSql Context: CREATE TABLE HeritageSitesReviews (ID INT, SiteName VARCHAR(100), Category VARCHAR(50), Reviews INT); INSERT INTO HeritageSitesReviews (ID, SiteName, Category, Reviews) VALUES (1, 'Machu Picchu', 'Archaeological', 5000); INSERT INTO HeritageSitesReviews (ID, SiteName, Category, Reviews) VALUES (2, 'Taj Mahal', 'Architectural', 8000);\n\nReasoning: Let's think step by step in order to"
), 1), (Example({'sql_prompt': 'What is the total revenue from ads targeting users interested in veganism in Q3 2022?', 'sql_context': 'CREATE TABLE ads (id INT, user INT, platform VARCHAR(50), target VARCHAR(50), start_date DATE, end_date DATE, revenue DECIMAL(10, 2));', 'sql': "SELECT SUM(revenue) FROM ads WHERE target = 'veganism' AND platform IN ('Facebook', 'Instagram') AND start_date BETWEEN '2022-07-01' AND '2022-09-30';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='To calculate the total revenue from ads targeting users interested in veganism during Q3 (July, August, September) of 2-year period. We need to filter records based on the \'target\' column for "veganism", and then further filter the results by the \'start_date\' and \'end_date\' columns to include only those ads that ran in Q3 of any year within a specified range (e.g., 2019-2022).\n\nHere is an example SQL query for this scenario:\n\n```sql\nSELECT SUM(revenue) AS total_veganism_ad_revenue\nFROM ads\nWHERE target = \'',
    sql="```sql\nSELECT SUM(revenue) AS total_veganism_ad_revenue \nFROM ads \nWHERE target = 'veganism' \nAND start_date >= '2022-07-01' AND end_date <= '2022-09-30';\n```"
), 0), (Example({'sql_prompt': 'What is the minimum duration of workouts for members who joined in 2019, grouped by gender?', 'sql_context': 'CREATE TABLE Workout (WorkoutID INT PRIMARY KEY, MemberID INT, Duration INT, Date DATE); CREATE TABLE Member (MemberID INT PRIMARY KEY, Age INT, Gender VARCHAR(10), MembershipStart DATE);', 'sql': "SELECT Member.Gender, MIN(Workout.Duration) FROM Workout INNER JOIN Member ON Workout.MemberID = Member.MemberID WHERE Member.MembershipStart BETWEEN '2019-01-01' AND '2019-12-31' GROUP BY Member.Gender;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the minimum duration of workouts for members who joined in 2019, grouped by gender, we need to perform a join between the `Workout` and `Member` tables based on the `MemberID`. Then, filter the results to include only those members whose membership started in 2019. Finally, group the results by gender and select the minimum workout duration for each group.\n\nHere's how you can write the SQL query:\n\n```sql\nSELECT m.Gender, MIN(w.Duration) AS MinWorkoutDuration\nFROM Workout w\nJOIN Member m ON w.MemberID = m.MemberID\nWHERE YEAR(m.Memb",
    sql='```sql\nSELECT \n    m.Gender, \n    MIN(w.Duration) AS MinWorkoutDuration\nFROM \n    Workout w\nJOIN \n    Member m ON w.MemberID = m.MemberID\nWHERE \n    YEAR(m.MembershipStart) = 2019\nGROUP BY \n    m.Gender;\n```'
), 0), (Example({'sql_prompt': 'How many employees were hired in each month of 2022?', 'sql_context': "CREATE TABLE Employees (EmployeeID INT, HireDate DATE); INSERT INTO Employees (EmployeeID, HireDate) VALUES (1, '2022-01-15'); INSERT INTO Employees (EmployeeID, HireDate) VALUES (2, '2022-02-01');", 'sql': "SELECT EXTRACT(MONTH FROM HireDate) AS Month, COUNT(*) AS NumberOfHires FROM Employees WHERE HireDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY Month;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='To find out how many employees were hired in each month of 2022, we need to extract the year and month from the `HireDate` column and then group the results by these extracted values. Here is the SQL query that accomplishes this:\n\n```sql\nSELECT EXTRACT(YEAR FROM HireDate) AS Year,\n       EXTRACT(MONTH FROM HireDate) AS Month,\n       COUNT(*) AS NumberOfHires\nFROM Employees\nWHERE EXTRACT(YEAR FROM HireDate) = 2022\nGROUP BY Year, Month\nORDER BY Year, Month;\n```\n\nThis query will return the number',
    sql='SELECT EXTRACT(MONTH FROM HireDate) AS Month, COUNT(*) AS NumberOfHires FROM Employees WHERE EXTRACT(YEAR FROM HireDate) = 2022 GROUP BY Month ORDER BY Month;'
), 0), (Example({'sql_prompt': 'What is the maximum quantity of a single organic product delivered in the DELIVERY_RECORDS table?', 'sql_context': 'CREATE TABLE DELIVERY_RECORDS (id INT, supplier_id INT, product_id INT, is_organic BOOLEAN, quantity INT); INSERT INTO DELIVERY_RECORDS (id, supplier_id, product_id, is_organic, quantity) VALUES (1, 1, 1, true, 50), (2, 2, 2, true, 30);', 'sql': 'SELECT MAX(quantity) FROM DELIVERY_RECORDS WHERE is_organic = true;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='To find the maximum quantity of a single organic product delivered as recorded in the DELIVERY_RECORDS table, we need to filter records where `is_organic` is true and then determine the highest value among those filtered results.\n\nThe SQL query for this would be:\n\n```sql\nSELECT MAX(quantity) AS max_quantity FROM DELIVERY_RECORDS WHERE is_organic = TRUE;\n```',
    sql="Sql Prompt: What is the maximum quantity of a single organic product delivered in the DELIVERY_RECORDS table?\n\nSql Context: CREATE TABLE DELIVERY_RECORDS (id INT, supplier_id INT, product_id INT, is_organic BOOLEAN, quantity INT); INSERT INTO DELIVERY_RECORDS (id, supplier_id, product_id, is_organic, quantity) VALUES (1, 1, 1, true, 50), (2, 2, 2, true, 30);\n\nReasoning: Let's think step by step in order to find"
), 0), (Example({'sql_prompt': 'Update the description of a sustainable urbanism initiative in the sustainable_urbanism_initiatives table', 'sql_context': "CREATE TABLE public.sustainable_urbanism_initiatives (id SERIAL PRIMARY KEY, initiative_name VARCHAR(255), initiative_description TEXT, city_name VARCHAR(255), state_name VARCHAR(255)); INSERT INTO public.sustainable_urbanism_initiatives (initiative_name, initiative_description, city_name, state_name) VALUES ('Green City Program', 'Promotes green spaces and sustainable transportation options in urban areas', 'Portland', 'Oregon'), ('EcoDistricts Initiative', 'Encourages sustainable community development in city neighborhoods', 'Vancouver', 'British Columbia');", 'sql': "WITH updated_initiative AS (UPDATE public.sustainable_urbanism_initiatives SET initiative_description = 'Promotes green spaces, sustainable transportation, and energy-efficient buildings in urban areas' WHERE initiative_name = 'Green City Program' RETURNING *) INSERT INTO public.sustainable_urbanism_initiatives (initiative_name, initiative_description, city_name, state_name) SELECT initiative_name, initiative_description, city_name, state_name FROM updated_initiative;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='To update the description of a specific initiative, we first need to identify which initiative we want to update. For this example, let\'s assume we want to update the "Green City Program" initiative located in Portland, Oregon.\n\nWe can use an UPDATE statement with a WHERE clause that specifies the initiative_name and city_name (and optionally state_name) of the record we wish to modify. Here is how you would write this SQL command:\n\n```sql\nUPDATE public.sustainable_urbanism_initiatives\nSET initiative_description = \'Enhanced description with new sustainability goals and strategies\'\nWHERE initiative_name = \'Green City',
    sql="`UPDATE public.sustainable_urbanism_initiatives SET initiative_description = 'Enhanced description with new sustainability goals and strategies' WHERE initiative_name = 'Green City Program' AND city_name = 'Portland' AND state_name = 'Oregon';`"
), 0), (Example({'sql_prompt': 'Calculate the year-over-year revenue growth for each restaurant.', 'sql_context': "CREATE TABLE restaurants (restaurant_id INT, restaurant_name VARCHAR(50), city VARCHAR(50), state VARCHAR(50), revenue FLOAT, year INT); INSERT INTO restaurants (restaurant_id, restaurant_name, city, state, revenue, year) VALUES (1, 'Restaurant A', 'City A', 'State A', 123456.78, 2021);", 'sql': 'SELECT restaurant_name, (revenue - LAG(revenue) OVER (PARTITION BY restaurant_name ORDER BY year)) / ABS(LAG(revenue) OVER (PARTITION BY restaurant_name ORDER BY year)) as revenue_growth FROM restaurants;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To calculate the year-over-year revenue growth for each restaurant, we need to compare the revenues of consecutive years and compute the percentage change. This requires a self-join on the 'restaurants' table where one instance represents the current year and another represents the previous year.\n\nHere is an example SQL query that calculates the year-over-year revenue growth for each restaurant:\n\n```sql\nSELECT \n    r1.restaurant_id,\n    r1.restaurant_name,\n    r1.city,\n    r1.state,\n    r1.revenue AS current_year_revenue,\n    r2.revenue AS previous",
    sql="previous_year_revenue, ((r1.revenue - r2.revenue) / r2.revenue * 100) AS revenue_growth_percentage FROM restaurants r1 JOIN restaurants r2 ON r1.restaurant_id = r2.restaurant_id AND r1.year = (r2.year + 1);`\n\nReasoning: Let's think step by step in order to calculate the year-over-year revenue growth for each restaurant, we need to join the 'restaurants' table with itself on the same 'restaurant_id', but where one instance represents the current year and another represents the"
), 0), (Example({'sql_prompt': 'What is the percentage of users in Canada who have used the hashtag #travel?', 'sql_context': "CREATE TABLE posts (id INT, user_id INT, hashtags TEXT); INSERT INTO posts (id, user_id, hashtags) VALUES (1, 1, '#travel'), (2, 1, '#food'), (3, 2, '#travel'), (4, 3, '#art'), (5, 4, '#music'); CREATE TABLE users (id INT, country VARCHAR(2)); INSERT INTO users (id, country) VALUES (1, 'CA'), (2, 'US'), (3, 'CA'), (4, 'DE');", 'sql': "SELECT 100.0 * COUNT(DISTINCT user_id) / (SELECT COUNT(DISTINCT user_id) FROM posts JOIN users ON posts.user_id = users.id WHERE users.country = 'CA') as percentage_travel FROM posts JOIN users ON posts.user_id = users.id WHERE hashtags LIKE '%#travel%' AND users.country = 'CA';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the percentage of users in Canada who have used the hashtag #travel, we need to follow these steps:\n\n1. Identify all posts with the hashtag #travel.\n2. Determine which of those posts were made by Canadian users (country = 'CA').\n3. Calculate the total number of unique Canadian users who have used the hashtag #travel.\n4. Find out the total number of unique Canadian users in the database.\n5. Divide the number of unique Canadian users with the hashtag #travel by the total number of unique Canadian users and multiply by 100 to get the percentage.\n\nHere's the SQL query",
    sql="```sql\nWITH TravelPosts AS (\n    SELECT DISTINCT p.user_id\n    FROM posts p\n    WHERE p.hashtags LIKE '%#travel%' AND p.country = 'CA'\n),\nCanadianUsers AS (\n    SELECT COUNT(DISTINCT id) AS total_users\n    FROM users\n    WHERE country = 'CA'\n)\nSELECT \n    ROUND((COUNT(*) * 100.0 / c.total_users), 2) AS percentage_travel_hashtag\nFROM TravelPosts tp, CanadianUsers c;\n```"
), 0), (Example({'sql_prompt': 'What is the total number of points scored by each team in the NBA this season?', 'sql_context': "CREATE TABLE nba_teams (team_name TEXT, points_scored INT); INSERT INTO nba_teams (team_name, points_scored) VALUES ('Cavaliers', 8000), ('Warriors', 8500), ('Celtics', 7500);", 'sql': 'SELECT team_name, SUM(points_scored) FROM nba_teams GROUP BY team_name;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the total number of points scored by each team in the NBA this season, we can use a simple SELECT statement that retrieves all records from the 'nba_teams' table. Since the data is already provided for each team and their respective points scored, no additional calculations or aggregations are needed.\n\nHere's the SQL query to retrieve the desired information:\n\n```sql\nSELECT team_name, points_scored FROM nba_teams;\n```",
    sql="Sql Prompt: What is the total number of points scored by each team in the NBA this season?\n\nSql Context: CREATE TABLE nba_teams (team_name TEXT, points_scored INT); INSERT INTO nba_teams (team_name, points_scored) VALUES ('Cavaliers', 8000), ('Warriors', 8500), ('Celtics', 7500);\n\nReasoning: Let's think step by step in order to find the total number of points scored by each team in the NBA this season. Since we already have a table 'nba_teams' with columns for 'team_name"
), 1), (Example({'sql_prompt': 'What is the highest number of hat-tricks scored by a player in a single Bundesliga season?', 'sql_context': "CREATE TABLE german_teams (team_id INT, team_name VARCHAR(50)); INSERT INTO german_teams (team_id, team_name) VALUES (1, 'Bayern Munich'), (2, 'Borussia Dortmund'), (3, 'RB Leipzig'); CREATE TABLE german_matches (match_id INT, home_team_id INT, away_team_id INT, home_team_player_hat_tricks INT, away_team_player_hat_tricks INT); INSERT INTO german_matches (match_id, home_team_id, away_team_id, home_team_player_hat_tricks, away_team_player_hat_tricks) VALUES (1, 1, 2, 1, 0), (2, 2, 3, 0, 1), (3, 3, 1, 1, 0);", 'sql': 'SELECT MAX(home_team_player_hat_tricks + away_team_player_hat_tricks) AS max_hat_tricks FROM german_matches;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the highest number of hat-tricks scored by a player in a single Bundesliga season, we need to consider both home and away team players. We can achieve this by using a UNION operation to combine the results from both teams for each match, then aggregate these values to get the total number of hat-tricks per player across all matches. Finally, we'll select the maximum value among those totals.\n\nHere is the SQL query:\n\n```sql\nSELECT MAX(total_hat_tricks) AS highest_hat_tricks\nFROM (\n    SELECT home_team_id AS team_id, SUM(home_team_player_hat_tricks) AS total_hat_",
    sql='```sql\nSELECT player_id, SUM(hat_tricks) AS total_hat_tricks\nFROM (\n    SELECT match_id, home_team_player_hat_tricks AS hat_tricks, home_team_id AS team_id FROM german_matches\n    UNION ALL\n    SELECT match_id, away_team_player_hat_tricks AS hat_tricks, away_team_id AS team_id FROM german_matches\n) AS combined_hat_tricks\nGROUP BY player_id\nORDER BY total_hat_tricks DESC\nLIMIT 1;\n```'
), 0), (Example({'sql_prompt': "What is the average word count for articles published in the 'news' schema, grouped by author?", 'sql_context': "CREATE TABLE news.articles (article_id INT, title VARCHAR(100), author VARCHAR(100), word_count INT); INSERT INTO news.articles (article_id, title, author, word_count) VALUES (1, 'Article 1', 'John Doe', 500), (2, 'Article 2', 'Jane Doe', 600), (3, 'Article 3', 'John Doe', 700);", 'sql': 'SELECT author, AVG(word_count) FROM news.articles GROUP BY author;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the average word count for articles published in the 'news' schema, grouped by author, we need to perform an aggregation on the `word_count` column while grouping the results by the `author`. The SQL query will look like this:\n\n```sql\nSELECT author, AVG(word_count) AS avg_word_count\nFROM news.articles\nGROUP BY author;\n```\n\nThis query calculates the average word count (`AVG(word_count)`) for each unique author in the `news` schema and groups the results by the `author`. The result will show us how many words, on average, each author writes per article.",
    sql="Sql Prompt: What is the average word count for articles published in the 'news' schema, grouped by author?\n\nSql Context: CREATE TABLE news.articles (article_id INT, title VARCHAR(100), author VARCHAR(100), word_count INT); INSERT INTO news.articles (article_id, title, author, word_count) VALUES (1, 'Article 1', 'John Doe', 500), (2, 'Article 2', 'Jane Doe', 600), (3, 'Article 3', 'John Doe', 700);\n\nReasoning: Let's think step by step in"
), 1), (Example({'sql_prompt': 'Show the total budget allocation for healthcare services in the top 5 states with the highest budget allocation', 'sql_context': 'CREATE TABLE healthcare_services (service_id INT, state_id INT, budget FLOAT);CREATE TABLE states (state_id INT, state_name TEXT);', 'sql': 'SELECT s.state_name, SUM(hs.budget)  FROM healthcare_services hs INNER JOIN states s ON hs.state_id = s.state_id GROUP BY s.state_name ORDER BY SUM(hs.budget) DESC LIMIT 5;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To show the total budget allocation for healthcare services in the top 5 states with the highest budget allocation, we need to perform a few steps. Firstly, we will calculate the sum of budgets per state and then select the top 5 states based on this calculated sum. Here's how you can write the SQL query:\n\n```sql\nSELECT s.state_name, SUM(hs.budget) AS total_budget\nFROM healthcare_services hs\nJOIN states s ON hs.state_id = s.state_id\nGROUP BY s.state_name\nORDER BY total_budget DESC\nLIMIT 5;\n```\n\nThis query joins the `he",
    sql='SELECT s.state_name, SUM(hs.budget) AS total_budget\nFROM healthcare_services hs\nJOIN states s ON hs.state_id = s.state_id\nGROUP BY s.state_name\nORDER BY total_budget DESC\nLIMIT 5;'
), 1), (Example({'sql_prompt': 'Find the total volume of timber sold in 2021', 'sql_context': "CREATE TABLE forests (id INT, name VARCHAR(50), hectares DECIMAL(5,2), year_planted INT, PRIMARY KEY (id)); INSERT INTO forests (id, name, hectares, year_planted) VALUES (1, 'Forest A', 123.45, 1990), (2, 'Forest B', 654.32, 1985); CREATE TABLE timber_sales (id INT, forest_id INT, year INT, volume DECIMAL(10,2), PRIMARY KEY (id)); INSERT INTO timber_sales (id, forest_id, year, volume) VALUES (1, 1, 2021, 120.50), (2, 1, 2022, 150.75), (3, 2, 2021, 450.23), (4, 2, 2022, 520.89);", 'sql': 'SELECT SUM(ts.volume) FROM timber_sales ts INNER JOIN forests f ON ts.forest_id = f.id WHERE ts.year = 2021;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the total volume of timber sold in 2021, we need to sum up all the volumes from the `timber_sales` table where the year is equal to 2021. We can achieve this using a SQL query with a WHERE clause that filters records based on the specified year and then uses the SUM function to calculate the total volume.\n\nHere's the SQL query:\n\n```sql\nSELECT SUM(volume) AS total_timber_volume_2021 FROM timber_sales WHERE year = 2021;\n```",
    sql="Sql Prompt: Find the total volume of timber sold in 2021\n\nSql Context: CREATE TABLE forests (id INT, name VARCHAR(50), hectares DECIMAL(5,2), year_planted INT, PRIMARY KEY (id)); INSERT INTO forests (id, name, hectares, year_planted) VALUES (1, 'Forest A', 123.45, 1990), (2, 'Forest B', 654.32, 1985); CREATE TABLE timber_sales (id INT, forest_id INT, year INT, volume DECIMAL(10,2"
), 1), (Example({'sql_prompt': 'Who are the top 3 suppliers of recycled polyester?', 'sql_context': "CREATE TABLE suppliers (id INT, name VARCHAR(255), material VARCHAR(255)); INSERT INTO suppliers (id, name, material) VALUES (1, 'Supplier A', 'Recycled Polyester'), (2, 'Supplier B', 'Organic Cotton'), (3, 'Supplier C', 'Recycled Polyester'), (4, 'Supplier D', 'Hemp'), (5, 'Supplier E', 'Recycled Polyester');", 'sql': "SELECT name FROM suppliers WHERE material = 'Recycled Polyester' GROUP BY name ORDER BY COUNT(*) DESC LIMIT 3;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='To identify the top 3 suppliers of recycled polyester, we need to count how many times each supplier is associated with "Recycled Polyester" and then sort them in descending order. Here\'s the SQL query that accomplishes this:',
    sql="SELECT name, COUNT(*) as num_products FROM suppliers WHERE material = 'Recycled Polyester' GROUP BY name ORDER BY num_products DESC LIMIT 3;"
), 0), (Example({'sql_prompt': "How many donors have donated more than $100 in the 'Donations' table?", 'sql_context': "CREATE TABLE Donations (DonorID INT, DonationDate DATE, Amount DECIMAL(10, 2)); INSERT INTO Donations (DonorID, DonationDate, Amount) VALUES (1, '2022-02-01', 120.00), (2, '2022-01-15', 75.00), (3, '2022-03-05', 150.00);", 'sql': 'SELECT COUNT(*) FROM Donations WHERE Amount > 100;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find out how many donors have donated more than $100, we need to count the number of unique DonorID entries where the Amount is greater than $100. We can achieve this using a SQL query with a WHERE clause to filter the results and a COUNT function to get the total number of such donors.\n\nHere's the SQL query:\n\n```sql\nSELECT COUNT(DISTINCT DonorID) AS NumberOfDonors\nFROM Donations\nWHERE Amount > 100;\n```",
    sql="Sql Prompt: How many donors have donated more than $100 in the 'Donations' table?\n\nSql Context: CREATE TABLE Donations (DonorID INT, DonationDate DATE, Amount DECIMAL(10, 2)); INSERT INTO Donations (DonorID, DonationDate, Amount) VALUES (1, '2022-02-01', 120.00), (2, '2022-01-15', 75.00), (3, '2022-03-05', 150.00);\n\nReasoning: Let"
), 1), (Example({'sql_prompt': "Update the 'Angkor Wat' excavation to have a start date of 1300-01-01.", 'sql_context': "CREATE TABLE ExcavationSites (SiteID INT PRIMARY KEY, Name VARCHAR(255), Country VARCHAR(255), StartDate DATE, EndDate DATE); INSERT INTO ExcavationSites (SiteID, Name, Country, StartDate, EndDate) VALUES (5, 'Angkor Wat', 'Cambodia', '1860-01-01', '1860-05-01');", 'sql': "UPDATE ExcavationSites SET StartDate = '1300-01-01' WHERE Name = 'Angkor Wat';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='To update the start date of the excavation for Angkor Wat, we need to perform an UPDATE operation on the ExcavationSites table. The SQL command should specify the SiteID or Name (if unique) and set the new StartDate value.\n\nHere\'s how you can do it:\n\n```sql\nUPDATE ExcavationSites \nSET StartDate = \'1300-01-01\'\nWHERE Name = \'Angkor Wat\';\n```\n\nThis SQL statement updates the StartDate of the excavation site named "Angkor Wat" to January 1, 1300.',
    sql="Sql Prompt: Update the start date for Angkor Wat excavation.\n\nSql Context: CREATE TABLE ExcavationSites (SiteID INT PRIMARY KEY, Name VARCHAR(255), Country VARCHAR(255), StartDate DATE, EndDate DATE); INSERT INTO ExcavationSites (SiteID, Name, Country, StartDate, EndDate) VALUES (5, 'Angkor Wat', 'Cambodia', '1860-01-01', '1860-05-01');\n\nReasoning: Let's think step by step in order to update the start date of the excavation for Angkor Wat. We need"
), 1), (Example({'sql_prompt': 'Calculate the total CO2 emissions (in metric tons) per capita for each country in the population_data and carbon_emissions tables.', 'sql_context': 'CREATE TABLE population_data (country VARCHAR(50), year INT, population INT); CREATE TABLE carbon_emissions (country VARCHAR(50), year INT, co2_emissions FLOAT);', 'sql': 'SELECT p.country, AVG(co2_emissions/population*1000000) as co2_emissions_per_capita FROM population_data p JOIN carbon_emissions c ON p.country = c.country GROUP BY p.country;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='To calculate the total CO2 emissions per capita for each country, we need to join both tables on `country` and `year`, then divide the `co2_emissions` by the `population`. Here is how you can write the SQL query:\n\n```sql\nSELECT \n    p.country,\n    c.year,\n    (c.co2_emissions / NULLIF(p.population, 0)) AS co2_per_capita\nFROM \n    population_data p\nJOIN \n    carbon_emissions c ON p.country = c.country AND p.year = c.year;\n```\n\nThis query will give you',
    sql="Sql Prompt: Calculate the total CO2 emissions (in metric tons) per capita for each country in the population_data and carbon_emissions tables.\n\nSql Context: CREATE TABLE population_data (country VARCHAR(50), year INT, population INT); CREATE TABLE carbon_emissions (country VARCHAR(50), year INT, co2_emissions FLOAT);\n\nReasoning: Let's think step by step in order to To calculate the total CO2 emissions per capita for each country, we need to join both tables on `country` and `year`, then divide the `co2_emissions` by the `population`. We also use NULLIF function"
), 0), (Example({'sql_prompt': "How many rural infrastructure projects were completed in '2022' in the 'Asia-Pacific' region?", 'sql_context': "CREATE TABLE rural_infrastructure(id INT, project TEXT, location TEXT, completion_year INT); INSERT INTO rural_infrastructure (id, project, location, completion_year) VALUES (1, 'Rural Road Project', 'Asia-Pacific', 2022);", 'sql': "SELECT COUNT(*) FROM rural_infrastructure WHERE location = 'Asia-Pacific' AND completion_year = 2022;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find out how many rural infrastructure projects were completed in the year 2022 specifically within the Asia-Pacific region, we need to execute a SQL query that filters records based on both the `completion_year` and `location`. The goal is to count all entries that match these criteria.\n\nGiven the context provided:\n\n```sql\nCREATE TABLE rural_infrastructure(id INT, project TEXT, location TEXT, completion_year INT);\nINSERT INTO rural_infrastructure (id, project, location, completion_year) VALUES (1, 'Rural Road Project', 'Asia-Pacific', 2022);\n```\n\nThe",
    sql="```sql\nSELECT COUNT(*) AS NumberOfProjectsCompletedIn2022\nFROM rural_infrastructure\nWHERE completion_year = 2022 AND location = 'Asia-Pacific';\n```\n\nReasoning: To answer the question about how many rural infrastructure projects were completed in 2022 within the Asia-Pacific region, we need to count all entries that match these specific criteria. The SQL query filters the `rural_infrastructure` table for rows where the `completion_year` is equal to 2022 and the `location` is 'Asia-Pacific'. We use the COUNT(*) function to get the total number"
), 1), (Example({'sql_prompt': "What is the average horsepower of luxury vehicles in the 'GreenCar' database produced after 2017?", 'sql_context': 'CREATE TABLE LuxuryVehicles (Id INT, Make VARCHAR(50), Model VARCHAR(50), Year INT, Horsepower INT);', 'sql': 'SELECT AVG(Horsepower) FROM LuxuryVehicles WHERE Year > 2017;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the average horsepower of luxury vehicles produced after 2017 from the 'GreenCar' database, we need to perform a SELECT query on the LuxuryVehicles table. We will filter the results for vehicles with a Year greater than 2017 and then calculate the average Horsepower.\n\nHere is the SQL statement that accomplishes this:\n\n```sql\nSELECT AVG(Horsepower) AS avg_horsepower FROM LuxuryVehicles WHERE Year > 2017;\n```",
    sql="Sql Prompt: What is the average horsepower of luxury vehicles in the 'GreenCar' database produced after 2017?\n\nSql Context: CREATE TABLE LuxuryVehicles (Id INT, Make VARCHAR(50), Model VARCHAR(50), Year INT, Horsepower INT);\n\nReasoning: Let's think step by step in order to find the average horsepower of luxury vehicles produced after 2017 from the 'GreenCar' database. We need to perform a SELECT query on the LuxuryVehicles table and filter for records where the Year is greater than 2017. Then, we will calculate the average Horsepower using the AVG"
), 1), (Example({'sql_prompt': 'What is the maximum response time for emergency calls in the city of Los Angeles?', 'sql_context': 'CREATE TABLE emergency_calls (id INT, city VARCHAR(20), response_time INT);', 'sql': "SELECT MAX(response_time) FROM emergency_calls WHERE city = 'Los Angeles';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the maximum response time for emergency calls in the city of Los Angeles, we need to query the `emergency_calls` table and filter records based on the city name. Then, we can use an aggregate function to determine the highest (maximum) response time among those filtered records.\n\nHere's the SQL statement that accomplishes this:\n\n```sql\nSELECT MAX(response_time) AS max_response_time FROM emergency_calls WHERE city = 'Los Angeles';\n```",
    sql="Sql Prompt: What is the maximum response time for emergency calls in the city of Los Angeles?\n\nSql Context: CREATE TABLE emergency_calls (id INT, city VARCHAR(20), response_time INT);\n\nReasoning: Let's think step by step in order to To find the maximum response time for emergency calls in the city of Los Angeles, we need to query the `emergency_calls` table and filter records based on the city name. Then, we can use an aggregate function to determine the highest (maximum) response time among those filtered records. Here's the SQL statement that accomplishes this: ```sql SELECT MAX(response_time) AS max_response"
), 0), (Example({'sql_prompt': 'What is the maximum loan amount for socially responsible loans in the Asia-Pacific region?', 'sql_context': "CREATE TABLE socially_responsible_loans (loan_id INT, region VARCHAR(20), loan_amount DECIMAL(10,2)); INSERT INTO socially_responsible_loans (loan_id, region, loan_amount) VALUES (101, 'Asia-Pacific', 50000), (102, 'Europe', 30000), (103, 'Asia-Pacific', 70000);", 'sql': "SELECT MAX(srl.loan_amount) FROM socially_responsible_loans srl WHERE srl.region = 'Asia-Pacific';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the maximum loan amount for socially responsible loans in the Asia-Pacific region, we need to filter the records based on the specified region and then determine the highest loan_amount within that subset. The SQL query will use a WHERE clause to filter the data and the MAX() function to identify the largest value of loan_amount.\n\nHere is the SQL statement:\n\n```sql\nSELECT MAX(loan_amount) AS max_loan_amount FROM socially_responsible_loans WHERE region = 'Asia-Pacific';\n```",
    sql="Sql Prompt: What is the maximum loan amount for socially responsible loans in the Asia-Pacific region?\n\nSql Context: CREATE TABLE socially_responsible_loans (loan_id INT, region VARCHAR(20), loan_amount DECIMAL(10,2)); INSERT INTO socially_responsible_loans (loan_id, region, loan_amount) VALUES (101, 'Asia-Pacific', 50000), (102, 'Europe', 30000), (103, 'Asia-Pacific', 70000);\n\nReasoning:"
), 1), (Example({'sql_prompt': 'What is the maximum number of years a traditional art form has been preserved in each country?', 'sql_context': "CREATE TABLE countries (id INT, name TEXT); INSERT INTO countries (id, name) VALUES (1, 'Nigeria'), (2, 'Brazil'); CREATE TABLE art_forms (id INT, country_id INT, name TEXT, year_preserved INT); INSERT INTO art_forms (id, country_id, name, year_preserved) VALUES (1, 1, 'Tie-dye', 500), (2, 1, 'Batik', 1000), (3, 2, 'Capoeira', 400);", 'sql': 'SELECT c.name, MAX(af.year_preserved) FROM countries c JOIN art_forms af ON c.id = af.country_id GROUP BY c.id;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the maximum number of years a traditional art form has been preserved in each country, we need to group the records by country and then determine the highest year_preserved value for each group. This can be achieved using the MAX() aggregate function along with GROUP BY clause.\n\nHere's the SQL query that accomplishes this:\n\n```sql\nSELECT c.name AS country, MAX(a.year_preserved) AS max_years_preserved\nFROM countries c\nJOIN art_forms a ON c.id = a.country_id\nGROUP BY c.name;\n```\n\nThis query joins the 'countries' and 'art_forms' tables on their respective id columns",
    sql='SELECT c.name AS country, MAX(a.year_preserved) AS max_years_preserved FROM countries c JOIN art_forms a ON c.id = a.country_id GROUP BY c.name;'
), 0), (Example({'sql_prompt': 'What is the maximum hourly wage for each labor category in the construction industry?', 'sql_context': 'CREATE TABLE labor_statistics (id INT, industry VARCHAR(255), category VARCHAR(255), title VARCHAR(255), hourly_wage DECIMAL(5,2));', 'sql': "SELECT industry, category, MAX(hourly_wage) as max_hourly_wage FROM labor_statistics WHERE industry = 'construction' GROUP BY industry, category;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the maximum hourly wage for each labor category within the construction industry, we need to group the data by the 'category' column and then select the maximum value of the 'hourly_wage' column for each group. Here is how you can write the SQL query:\n\n```sql\nSELECT \n    category, \n    MAX(hourly_wage) AS max_hourly_wage\nFROM \n    labor_statistics\nWHERE \n    industry = 'construction'\nGROUP BY \n    category;\n```\n\nThis query filters the records to only include those from the construction industry, groups them by labor categories, and then calculates the maximum hourly w",
    sql="Sql Prompt: What is the maximum hourly wage for each labor category in the construction industry?\n\nSql Context: CREATE TABLE labor_statistics (id INT, industry VARCHAR(255), category VARCHAR(255), title VARCHAR(255), hourly_wage DECIMAL(5,2)); INSERT INTO labor_statistics VALUES (1, 'construction', 'electricians', 'journeyman electrician', 30.50), (2, 'construction', 'plumbers', 'master plumber', 45.75), (3, 'construction', 'carpenters', 'senior carpenter', 2"
), 1), (Example({'sql_prompt': 'List all the drought-impacted counties in Texas in 2018.', 'sql_context': "CREATE TABLE drought_impact(county VARCHAR(20), state VARCHAR(20), year INT, impacted BOOLEAN); INSERT INTO drought_impact(county, state, year, impacted) VALUES ('Harris', 'Texas', 2015, true), ('Harris', 'Texas', 2016, true), ('Harris', 'Texas', 2017, true), ('Harris', 'Texas', 2018, true), ('Bexar', 'Texas', 2015, false), ('Bexar', 'Texas', 2016, false), ('Bexar', 'Texas', 2017, false), ('Bexar', 'Texas', 2018, false);", 'sql': "SELECT county FROM drought_impact WHERE state = 'Texas' AND year = 2018 AND impacted = true;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To list all the drought-impacted counties in Texas for the year 2018, we need to filter the `drought_impact` table based on two conditions: the state should be 'Texas', and the year should be 2018. Additionally, only those records where the impact is true (i.e., drought-impacted) are of interest.\n\nThe SQL query for this requirement would look like this:\n\n```sql\nSELECT county FROM drought_impact WHERE state = 'Texas' AND year = 2018 AND impacted = true;\n```",
    sql="Sql Prompt: List all the drought-impacted counties in Texas in 2018.\n\nSql Context: CREATE TABLE drought_impact(county VARCHAR(20), state VARCHAR(20), year INT, impacted BOOLEAN); INSERT INTO drought_impact(county, state, year, impacted) VALUES ('Harris', 'Texas', 2015, true), ('Harris', 'Texas', 2016, true), ('Harris', 'Texas', 2017, true), ('Harris', 'Texas', 2018, true), ('Bex"
), 1), (Example({'sql_prompt': 'Find the top 3 genres with the highest revenue in 2022 for streaming services in the USA.', 'sql_context': "CREATE TABLE streaming_services (service_id INT, service_name VARCHAR(255), revenue DECIMAL(10,2)); INSERT INTO streaming_services (service_id, service_name, revenue) VALUES (1, 'StreamingCo', 5000000.00); CREATE TABLE genre_sales (sale_id INT, service_id INT, genre VARCHAR(255), sales DECIMAL(10,2)); INSERT INTO genre_sales (sale_id, service_id, genre, sales) VALUES (1, 1, 'Rock', 150000.00);", 'sql': "SELECT genre, SUM(sales) as total_sales FROM genre_sales gs JOIN streaming_services s ON gs.service_id = s.service_id WHERE s.service_country = 'USA' AND s.service_year = 2022 GROUP BY genre ORDER BY total_sales DESC LIMIT 3;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the top 3 genres with the highest revenue for streaming services in the USA in 2022, we need to join the `streaming_services` table with the `genre_sales` table on their respective service IDs. Then, we'll filter by the country (assuming there is a column or way to determine if it's for the USA) and aggregate sales by genre. Finally, we order the results by revenue in descending order and limit the output to 3 rows.\n\nHowever, since the provided SQL context does not include information about countries or years, I will assume that all data is relevant to the USA and from 2022 for this exercise.",
    sql='```sql\nSELECT gs.genre, SUM(gs.sales) AS total_revenue\nFROM genre_sales gs\nJOIN streaming_services ss ON gs.service_id = ss.service_id\nGROUP BY gs.genre\nORDER BY total_revenue DESC\nLIMIT 3;\n```'
), 0), (Example({'sql_prompt': "List all unique fields from the 'geology' and 'infrastructure' tables.", 'sql_context': 'CREATE TABLE geology (well_id INT, rock_type VARCHAR(50)); CREATE TABLE infrastructure (well_id INT, platform_type VARCHAR(50));', 'sql': "SELECT field FROM (SELECT 'geology' as table_name, column_name as field FROM information_schema.columns WHERE table_name = 'geology' UNION ALL SELECT 'infrastructure' as table_name, column_name as field FROM information_schema.columns WHERE table_name = 'infrastructure') as subquery;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To list all unique fields from the 'geology' and 'infrastructure' tables, we need to identify the column names that are present in each table. Since these two tables have different purposes (one for geological data and one for infrastructural details), their columns will likely be distinct.\n\nHere is how you can retrieve all unique field names from both tables:\n\n```sql\nSELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'geology'\nUNION\nSELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'infrastructure';\n```\n\nThis SQL query uses the `IN",
    sql="Sql Prompt: List all unique fields from the 'geology' and 'infrastructure' tables.\n\nSql Context: CREATE TABLE geology (well_id INT, rock_type VARCHAR(50)); CREATE TABLE infrastructure (well_id INT, platform_type VARCHAR(50));\n\nReasoning: Let's think step by step in order to To list all unique fields from the 'geology' and 'infrastructure' tables, we need to identify the column names that are present in each table. Since these two tables have different purposes (one for geological data and one for infrastructural details), their columns will likely be distinct. Here is how you can retrieve all unique field names"
), 1), (Example({'sql_prompt': 'Calculate the percentage of total Europium production for each country.', 'sql_context': 'CREATE TABLE europium_production (country VARCHAR(50), quantity INT);', 'sql': 'SELECT country, quantity * 100.0 / SUM(quantity) OVER (PARTITION BY NULL) AS percentage FROM europium_production;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To calculate the percentage of total Europium production for each country, we need to follow these steps:\n\n1. Calculate the total Europium production across all countries.\n2. For each country, divide its Europium production quantity by the total production and multiply by 100 to get the percentage.\n3. Group the results by country and order them in a meaningful way (e.g., descending order of percentages).\n\nHere's how you can write an SQL query for this:\n\n```sql\nSELECT \n    country,\n    quantity,\n    ROUND((quantity * 100.0) / total_production, 2) AS percentage_of_total",
    sql="Sql Prompt: Calculate the percentage of total Europium production for each country.\n\nSql Context: CREATE TABLE europium_production (country VARCHAR(50), quantity INT); INSERT INTO europium_production (country, quantity) VALUES ('CountryA', 100), ('CountryB', 200), ('CountryC', 300), ('CountryD', 400);\n\nReasoning: Let's think step by step in order to Here is the signature for the Text-to-SQL generation task: **ArcticResearchLab GROUP BY year;** And here are the answers to the SQL prompts: **1. What is the total number of construction permits"
), 0), (Example({'sql_prompt': 'Find the mobile subscribers with consecutive speed drops greater than 25% for the last 3 months, ordered by subscription IDs.', 'sql_context': 'CREATE TABLE mobile_usage_detailed (subscriber_id INT, month INT, speed FLOAT); INSERT INTO mobile_usage_detailed (subscriber_id, month, speed) VALUES (1, 1, 100), (1, 2, 80), (1, 3, 70), (2, 1, 200), (2, 2, 180), (2, 3, 160), (3, 1, 150), (3, 2, 130), (3, 3, 110);', 'sql': 'SELECT subscriber_id, speed, month FROM (SELECT subscriber_id, speed, month, LAG(speed, 1) OVER (PARTITION BY subscriber_id ORDER BY month) as prev_speed, LAG(speed, 2) OVER (PARTITION BY subscriber_id ORDER BY month) as prev_prev_speed FROM mobile_usage_detailed) t WHERE t.speed < 0.75 * t.prev_speed AND t.speed < 0.75 * t.prev_prev_speed ORDER BY subscriber_id;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the mobile subscribers with consecutive speed drops greater than 25% for the last 3 months, we need to compare each month's speed against the previous month and check if there is a drop of more than 25%. We can achieve this using window functions like LAG() in SQL.\n\nHere's an example query that accomplishes this:\n\n```sql\nWITH SpeedDrops AS (\n    SELECT\n        subscriber_id,\n        month,\n        speed,\n        LAG(speed) OVER (PARTITION BY subscriber_id ORDER BY month) as prev_month_speed\n    FROM mobile_usage_detailed\n),\nConsec",
    sql='`WITH SpeedDrops AS (\n    SELECT \n        subscriber_id, \n        month, \n        speed, \n        LAG(speed) OVER (PARTITION BY subscriber_id ORDER BY month) as prev_month_speed\n    FROM mobile_usage_detailed\n), ConsecutiveDrops AS (\n    SELECT \n        subscriber_id,\n        CASE \n            WHEN speed < 0.75 * prev_month_speed THEN 1\n            ELSE 0\n        END as drop_flag\n    FROM SpeedDrops\n)\nSELECT DISTINCT\n    subscriber_id\nFROM ConsecutiveDro'
), 0), (Example({'sql_prompt': 'What is the distribution of AI safety research topics by year?', 'sql_context': "CREATE TABLE if not exists ai_safety_research (year INT, topic VARCHAR(255)); INSERT INTO ai_safety_research (year, topic) VALUES (2018, 'Explainable AI'), (2019, 'Algorithmic fairness'), (2020, 'AI safety'), (2021, 'Robust AI'), (2022, 'AI ethics');", 'sql': 'SELECT year, topic, COUNT(*) OVER (PARTITION BY year) as research_count FROM ai_safety_research ORDER BY year;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='To analyze the distribution of AI safety research topics by year, we need to count how many times each topic appears per year. This will give us an idea of which topics were more prevalent or focused on during specific years. The SQL query for this would involve grouping the data by both `year` and `topic`, then counting the occurrences within those groups.\n\n```sql\nSELECT year, topic, COUNT(*) as frequency\nFROM ai_safety_research\nGROUP BY year, topic\nORDER BY year ASC, frequency DESC;\n```\n\nThis query will list each unique combination of year and topic along with a count (`frequency`) that represents how many times that particular topic was researched in the',
    sql='SELECT year, topic, COUNT(*) as frequency FROM ai_safety_research GROUP BY year, topic ORDER BY year ASC, frequency DESC;'
), 0), (Example({'sql_prompt': "How many forest management practices are recorded in the 'tropical_forests'?", 'sql_context': "CREATE TABLE forest_management (id INT, forest_type VARCHAR(50), practice_count INT); INSERT INTO forest_management (id, forest_type, practice_count) VALUES (1, 'Tropical Forests', 45); INSERT INTO forest_management (id, forest_type, practice_count) VALUES (2, 'Temperate Forests', 34);", 'sql': "SELECT practice_count FROM forest_management WHERE forest_type = 'Tropical Forests';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find out how many forest management practices are recorded specifically for tropical forests, we need to query the `forest_management` table and filter results where the `forest_type` is 'Tropical Forests'. The SQL statement will be:\n\n```sql\nSELECT practice_count FROM forest_management WHERE forest_type = 'Tropical Forests';\n```",
    sql="Sql Prompt: How many forest management practices are recorded in the 'tropical_forests'?\n\nSql Context: CREATE TABLE forest_management (id INT, forest_type VARCHAR(50), practice_count INT); INSERT INTO forest_management (id, forest_type, practice_count) VALUES (1, 'Tropical Forests', 45); INSERT INTO forest_management (id, forest_type, practice_count) VALUES (2, 'Temperate Forests', 34);\n\nReasoning: Let's think step by step in order to To find out how many forest management practices are recorded specifically for tropical forests, we need to query the `forest"
), 1), (Example({'sql_prompt': 'What is the distribution of lifelong learning course enrollments by age group, in total?', 'sql_context': 'CREATE TABLE lifelong_learning (student_id INT, age_group VARCHAR(255), course_id INT); CREATE TABLE courses (course_id INT, course_name VARCHAR(255));', 'sql': 'SELECT l.age_group, COUNT(l.course_id) FROM lifelong_learning l INNER JOIN courses c ON l.course_id = c.course_id GROUP BY l.age_group;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the distribution of lifelong learning course enrollments by age group in total, we need to count how many students are enrolled in each age group across all courses. This requires a GROUP BY clause on the `age_group` column and using COUNT() to get the number of students within each group.\n\nHere's the SQL query that accomplishes this:\n\n```sql\nSELECT lf.age_group, COUNT(lf.student_id) AS total_enrollments\nFROM lifelong_learning lf\nGROUP BY lf.age_group;\n```\n\nThis query selects the `age_group` column from the `lifelong_learning` table",
    sql="Sql Prompt: What is the distribution of lifelong learning course enrollments by age group, in total?\n\nSql Context: CREATE TABLE lifelong_learning (student_id INT, age_group VARCHAR(255), course_id INT); CREATE TABLE courses (course_id INT, course_name VARCHAR(255));\n\nReasoning: Let's think step by step in order to To find the distribution of lifelong learning course enrollments by age group in total, we need to count how many students are enrolled in each age group across all courses. This requires a GROUP BY clause on the `age_group` column and using COUNT() to get the number of"
), 1), (Example({'sql_prompt': "Insert new records into the Employee table with the following data: EmployeeID 3, FirstName 'Mike', LastName 'Smith', Department 'Environment'.", 'sql_context': 'CREATE TABLE Employee (EmployeeID INT, FirstName VARCHAR(50), LastName VARCHAR(50), Department VARCHAR(50));', 'sql': "INSERT INTO Employee (EmployeeID, FirstName, LastName, Department) VALUES (3, 'Mike', 'Smith', 'Environment');"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To insert the new record into the `Employee` table with the provided data for an employee named Mike Smith who works in the Environment department, we need to use the SQL INSERT INTO statement. The EmployeeID is given as 3, which should be unique and not conflict with existing IDs in the table.\n\nHere's how you can write the SQL command:\n\n```sql\nINSERT INTO Employee (EmployeeID, FirstName, LastName, Department) VALUES (3, 'Mike', 'Smith', 'Environment');\n```\n\nThis statement will add a new row to the `Employee` table with Mike Smith as an employee in the Environment department.",
    sql="Sql Prompt: Insert new records into the Employee table with the following data: EmployeeID 3, FirstName 'Mike', LastName 'Smith', Department 'Environment'.\n\nSql Context: CREATE TABLE Employee (EmployeeID INT, FirstName VARCHAR(50), LastName VARCHAR(50), Department VARCHAR(50));\n\nReasoning: Let's think step by step in order to Insert the new record into the `Employee` table with the provided data for an employee named Mike Smith who works in the Environment department. We need to use the SQL INSERT INTO statement, ensuring that EmployeeID is unique and does not conflict with existing IDs in the table. The command should look like this:\n\n```"
), 0), (Example({'sql_prompt': 'Which cosmetic brands have the highest average customer rating?', 'sql_context': "CREATE TABLE brand (id INT, name VARCHAR(255), avg_rating FLOAT); CREATE TABLE rating (brand_id INT, rating FLOAT); INSERT INTO brand (id, name, avg_rating) VALUES (1, 'Lush', 4.2), (2, 'The Body Shop', 4.1), (3, 'Sephora', 4.3); INSERT INTO rating (brand_id, rating) VALUES (1, 4.5), (1, 4.0), (2, 4.1), (2, 4.2), (3, 4.4), (3, 4.3);", 'sql': 'SELECT b.name, AVG(r.rating) as avg_rating FROM brand b JOIN rating r ON b.id = r.brand_id GROUP BY b.name ORDER BY avg_rating DESC;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find out which cosmetic brands have the highest average customer rating, we need to calculate the average of all ratings for each brand and then sort them in descending order based on this calculated average. Here is how you can do it using SQL:\n\n```sql\nSELECT b.name, AVG(r.rating) as avg_customer_rating\nFROM brand b\nJOIN rating r ON b.id = r.brand_id\nGROUP BY b.name\nORDER BY avg_customer_rating DESC;\n```\n\nThis SQL query does the following:\n1. Joins the `brand` and `rating` tables on their respective ID fields to combine relevant data for each brand'",
    sql='SELECT b.name, AVG(r.rating) AS avg_customer_rating FROM brand b JOIN rating r ON b.id = r.brand_id GROUP BY b.name ORDER BY avg_customer_rating DESC;'
), 0), (Example({'sql_prompt': 'How many unique volunteers worked on projects in each cause area?', 'sql_context': "CREATE TABLE volunteers (id INT, name VARCHAR(30), cause_area VARCHAR(20)); INSERT INTO volunteers (id, name, cause_area) VALUES (1, 'Bob', 'children'), (2, 'Alice', 'children'), (3, 'Charlie', 'health');", 'sql': 'SELECT cause_area, COUNT(DISTINCT name) FROM volunteers GROUP BY cause_area;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find out how many unique volunteers worked on projects in each cause area, we need to count the distinct number of volunteer IDs grouped by their respective cause areas. This can be achieved using a SQL query that utilizes the `COUNT(DISTINCT column_name)` function along with the `GROUP BY` clause.\n\nHere's the SQL query for this requirement:\n\n```sql\nSELECT cause_area, COUNT(DISTINCT id) AS unique_volunteers\nFROM volunteers\nGROUP BY cause_area;\n```\n\nThis query will return a result set with two columns - `cause_area` and `unique_volunteers`. The first column represents the different cause areas,",
    sql='SELECT cause_area, COUNT(DISTINCT id) AS unique_volunteers FROM volunteers GROUP BY cause_area;'
), 0), (Example({'sql_prompt': 'Who were the top 3 content creators in terms of likes received on their posts in January 2022?', 'sql_context': "CREATE SCHEMA content; CREATE TABLE creators(creator_id INT, name VARCHAR(255), total_likes INT); INSERT INTO creators (creator_id, name, total_likes) VALUES (1, 'Alice', 5000); INSERT INTO creators (creator_id, name, total_likes) VALUES (2, 'Bob', 7000);", 'sql': 'SELECT name, SUM(total_likes) AS total_likes_january FROM content.creators WHERE MONTH(created_date) = 1 GROUP BY name ORDER BY total_likes_january DESC LIMIT 3;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To identify the top 3 content creators based on likes received on their posts for January 2022, we need a table that records each post along with its associated creator and the number of likes it received. Assuming there is such a table named `posts` within the `content` schema, which includes columns like `post_id`, `creator_id`, `likes`, and `date`.\n\nGiven this context, we can write an SQL query to find the top 3 content creators by likes for January 2022. Here's how you might structure that table and then perform the query:\n\n```sql\n-- Assuming a 'posts' table exists within",
    sql="Sql Prompt: Who were the top 3 content creators in terms of likes received on their posts in January 2022?\n\nSql Context: CREATE SCHEMA content; CREATE TABLE creators(creator_id INT, name VARCHAR(255), total_likes INT); INSERT INTO creators (creator_id, name, total_likes) VALUES (1, 'Alice', 5000); INSERT INTO creators (creator_id, name, total_likes) VALUES (2, 'Bob', 7000); -- Assuming a 'posts' table exists within the content schema with columns: post_id INT, creator_id"
), 1), (Example({'sql_prompt': "Update records in the 'Volunteers' table where the volunteer's skill level is 'Beginner' and change it to 'Intermediate'", 'sql_context': 'CREATE TABLE Volunteers (id INT PRIMARY KEY, volunteer_name VARCHAR(255), skill_level VARCHAR(255), last_volunteered DATE);', 'sql': "UPDATE Volunteers SET skill_level = 'Intermediate' WHERE skill_level = 'Beginner';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To update the records where the volunteer's skill level is 'Beginner', we need to use an UPDATE statement that targets those specific rows and changes their `skill_level` column value from 'Beginner' to 'Intermediate'.\n\nHere's how you can write the SQL query:\n\n```sql\nUPDATE Volunteers\nSET skill_level = 'Intermediate'\nWHERE skill_level = 'Beginner';\n```\n\nThis statement will search for all rows in the `Volunteers` table where the `skill_level` is currently set to 'Beginner'. It then updates those rows by setting their `skill_level` to 'Intermediate'.",
    sql="Sql Prompt: Update records in the 'Volunteers' table where the volunteer's skill level is 'Beginner' and change it to 'Intermediate'\n\nSql Context: CREATE TABLE Volunteers (id INT PRIMARY KEY, volunteer_name VARCHAR(255), skill_level VARCHAR(255), last_volunteered DATE);\n\nReasoning: Let's think step by step in order to To update the records where the volunteer's skill level is 'Beginner', we need to use an UPDATE statement that targets those specific rows and changes their `skill_level` column value from 'Beginner' to 'Intermediate'. Here's how you can write"
), 1), (Example({'sql_prompt': 'Identify the number of farmers involved in urban agriculture initiatives in California and New York in 2019.', 'sql_context': "CREATE TABLE Urban_Agriculture (Farmer_ID INT, State VARCHAR(20), Initiative VARCHAR(20), Year INT); INSERT INTO Urban_Agriculture (Farmer_ID, State, Initiative, Year) VALUES (101, 'California', 'Community_Garden', 2019), (102, 'California', 'Rooftop_Farming', 2019), (103, 'New_York', 'Community_Garden', 2019);", 'sql': "SELECT COUNT(DISTINCT Farmer_ID) FROM Urban_Agriculture WHERE State IN ('California', 'New York') AND Year = 2019 AND Initiative IN ('Community_Garden', 'Rooftop_Farming');"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To identify the number of farmers involved in urban agriculture initiatives in California and New York for the year 2019, we need to count the distinct `Farmer_ID` entries that match both states ('California', 'New York') and the specified year (2019).\n\nThe SQL query would be:\n\n```sql\nSELECT COUNT(DISTINCT Farmer_ID) AS NumberOfFarmers\nFROM Urban_Agriculture\nWHERE State IN ('California', 'New_York') AND Year = 2019;\n```",
    sql="Sql Prompt: Identify the number of farmers involved in urban agriculture initiatives in California and New York in 2019.\n\nSql Context: CREATE TABLE Urban_Agriculture (Farmer_ID INT, State VARCHAR(20), Initiative VARCHAR(20), Year INT); INSERT INTO Urban_Agriculture (Farmer_ID, State, Initiative, Year) VALUES (101, 'California', 'Community_Garden', 2019), (102, 'California', 'Rooftop_Farming', 2019), (103, 'New_Y"
), 1), (Example({'sql_prompt': "Update the accommodation type for a student with a StudentID of 2 from 'Assistive Listening Devices' to 'Sign Language Interpretation'.", 'sql_context': "CREATE TABLE StudentAccommodations (StudentID INT, StudentName VARCHAR(255), DisabilityType VARCHAR(255), AccommodationType VARCHAR(255), GraduationYear INT); INSERT INTO StudentAccommodations (StudentID, StudentName, DisabilityType, AccommodationType, GraduationYear) VALUES (1, 'John Doe', 'Visual Impairment', 'Sign Language Interpretation', 2018), (2, 'Jane Smith', 'Hearing Impairment', 'Assistive Listening Devices', NULL), (3, 'Michael Johnson', 'Mobility Impairment', 'Assistive Technology', 2019), (4, 'Sara Johnson', 'Physical Disability', 'Mobility Assistance', 2022);", 'sql': "UPDATE StudentAccommodations SET AccommodationType = 'Sign Language Interpretation' WHERE StudentID = 2;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To update the accommodation type for a student with StudentID of 2 from 'Assistive Listening Devices' to 'Sign Language Interpretation', we need to execute an UPDATE statement that targets the specific record based on the StudentID.\n\nHere is the SQL command:\n\n```sql\nUPDATE StudentAccommodations\nSET AccommodationType = 'Sign Language Interpretation'\nWHERE StudentID = 2;\n```\n\nThis query will search for the row where `StudentID` equals 2 and update the `AccommodationType` to 'Sign Language Interpretation'.",
    sql="Sql Prompt: Update the accommodation type for a student with a StudentID of 2 from 'Assistive Listening Devices' to 'Sign Language Interpretation'.\n\nSql Context: CREATE TABLE StudentAccommodations (StudentID INT, StudentName VARCHAR(255), DisabilityType VARCHAR(255), AccommodationType VARCHAR(255), GraduationYear INT); INSERT INTO StudentAccommodations (StudentID, StudentName, DisabilityType, AccommodationType, GraduationYear) VALUES (1, 'John Doe', 'Visual Impairment', 'Sign Language Interpretation', 2018), (2, 'J"
), 1), (Example({'sql_prompt': 'What is the minimum square footage of an inclusive housing unit in the city of Miami?', 'sql_context': "CREATE TABLE housing (id INT, city VARCHAR(20), size INT, inclusive BOOLEAN); INSERT INTO housing (id, city, size, inclusive) VALUES (1, 'Miami', 800, TRUE), (2, 'Miami', 1000, FALSE), (3, 'Miami', 1200, TRUE);", 'sql': "SELECT MIN(size) FROM housing WHERE city = 'Miami' AND inclusive = TRUE;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the minimum square footage of an inclusive housing unit in Miami, we need to filter the records for those that are marked as inclusive and then determine the smallest size among them. Here is the SQL query to achieve this:\n\n```sql\nSELECT MIN(size) AS min_inclusive_square_footage FROM housing WHERE city = 'Miami' AND inclusive = TRUE;\n```",
    sql="Sql Prompt: What is the minimum square footage of an inclusive housing unit in the city of Miami?\n\nSql Context: CREATE TABLE housing (id INT, city VARCHAR(20), size INT, inclusive BOOLEAN); INSERT INTO housing (id, city, size, inclusive) VALUES (1, 'Miami', 800, TRUE), (2, 'Miami', 1000, FALSE), (3, 'Miami', 1200, TRUE);\n\nReasoning: Let's think step by step in order to To find the minimum square footage of an inclusive housing unit in Miami, we need to filter the records for those that"
), 1), (Example({'sql_prompt': 'How many works were exhibited in the year 1950?', 'sql_context': "CREATE TABLE exhibitions (exhibition_id INT PRIMARY KEY, exhibition_name TEXT, year INT, location TEXT);CREATE TABLE exhibits (exhibit_id INT PRIMARY KEY, work_id INT, exhibition_id INT, FOREIGN KEY (work_id) REFERENCES works(work_id), FOREIGN KEY (exhibition_id) REFERENCES exhibitions(exhibition_id));INSERT INTO exhibitions (exhibition_id, exhibition_name, year, location) VALUES (1, 'Documenta', 1950, 'Kassel, Germany'); INSERT INTO exhibits (exhibit_id, work_id, exhibition_id) VALUES (1, 1, 1);", 'sql': 'SELECT COUNT(*) FROM exhibits e JOIN exhibitions ex ON e.exhibition_id = ex.exhibition_id WHERE ex.year = 1950;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find out how many works were exhibited in the year 1950, we need to join the 'exhibitions' table with the 'exhibits' table on the exhibition_id and then count the number of unique work_ids for that specific year.",
    sql='SELECT COUNT(DISTINCT e.work_id) FROM exhibits AS e JOIN exhibitions AS ex ON e.exhibition_id = ex.exhibition_id WHERE ex.year = 1950;'
), 0), (Example({'sql_prompt': 'What is the total number of articles written by each author in each region?', 'sql_context': "CREATE TABLE authors (id INT, name TEXT); CREATE TABLE regions (id INT, name TEXT); CREATE TABLE articles (id INT, title TEXT, content TEXT, author_id INT, region_id INT); INSERT INTO authors (id, name) VALUES (1, 'John Doe'), (2, 'Jane Smith'); INSERT INTO regions (id, name) VALUES (1, 'North'), (2, 'South'), (3, 'East'), (4, 'West'); INSERT INTO articles (id, title, content, author_id, region_id) VALUES (1, 'Article 1', 'Content 1', 1, 1), (2, 'Article 2', 'Content 2', 2, 2), (3, 'Article 3', 'Content 3', 1, 3), (4, 'Article 4', 'Content 4', 2, 4);", 'sql': 'SELECT authors.name, regions.name, COUNT(articles.id) FROM authors INNER JOIN articles ON authors.id = articles.author_id INNER JOIN regions ON regions.id = articles.region_id GROUP BY authors.name, regions.name;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the total number of articles written by each author in each region, we need to join the `authors`, `regions`, and `articles` tables based on their respective IDs. Then, we can group the results by both the author's name and the region's name while counting the number of articles for each combination.\n\nHere is the SQL query that accomplishes this:\n\n```sql\nSELECT a.name AS author_name, r.name AS region_name, COUNT(ar.id) AS total_articles\nFROM authors a\nJOIN articles ar ON a.id = ar.author_id\nJOIN regions r ON ar.region_id = r.id\nGROUP BY",
    sql='```sql\nSELECT \n    a.name AS author_name, \n    r.name AS region_name, \n    COUNT(ar.id) AS total_articles \nFROM \n    authors a \nJOIN \n    articles ar ON a.id = ar.author_id \nJOIN \n    regions r ON ar.region_id = r.id \nGROUP BY \n    author_name, region_name;\n```'
), 1), (Example({'sql_prompt': 'How many tunnels in Washington state were constructed after 2010?', 'sql_context': "CREATE TABLE tunnels (id INT, name TEXT, state TEXT, build_year INT); INSERT INTO tunnels (id, name, state, build_year) VALUES (1, 'WA-1 Underpass', 'WA', 2012);", 'sql': "SELECT COUNT(*) FROM tunnels WHERE state = 'WA' AND build_year > 2010;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find out how many tunnels in Washington state were constructed after 2010, we need to count the number of records that meet these criteria. The SQL query should filter for tunnels located in 'WA' (Washington) and with a `build_year` greater than 2010.\n\nHere is the SQL statement:\n\n```sql\nSELECT COUNT(*) FROM tunnels WHERE state = 'WA' AND build_year > 2010;\n```",
    sql="Sql Prompt: How many tunnels in Washington state were constructed after 2010?\n\nSql Context: CREATE TABLE tunnels (id INT, name TEXT, state TEXT, build_year INT); INSERT INTO tunnels (id, name, state, build_year) VALUES (1, 'WA-1 Underpass', 'WA', 2012), (2, 'WA-2 Overpass', 'WA', 2009), (3, 'WA-3 Tunnel', 'WA', 2015);\n\nReasoning: Let's think step by step in order to find out how many tunnels in Washington state were constructed"
), 1), (Example({'sql_prompt': 'List the top 5 models with the highest explainability scores and their development team names.', 'sql_context': 'CREATE TABLE ModelExplainabilityScores (ModelID INT, ExplainabilityScore INT, TeamID INT); CREATE TABLE TeamNames (TeamID INT, TeamName VARCHAR(50));', 'sql': 'SELECT ModelExplainabilityScores.ModelID, MAX(ModelExplainabilityScores.ExplainabilityScore) AS MaxExplainabilityScore, TeamNames.TeamName FROM ModelExplainabilityScores INNER JOIN TeamNames ON ModelExplainabilityScores.TeamID = TeamNames.TeamID GROUP BY ModelExplainabilityScores.TeamID ORDER BY MaxExplainabilityScore DESC, TeamNames.TeamName DESC LIMIT 5;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='To list the top 5 models with the highest explainability scores and their development team names, we need to join the `ModelExplainabilityScores` table with the `TeamNames` table on the `TeamID`, then sort the results by the `ExplainabilityScore` in descending order and limit the output to 5 rows.\n\n```sql\nSELECT mes.ModelID, tn.TeamName, mes.ExplainabilityScore\nFROM ModelExplainabilityScores mes\nJOIN TeamNames tn ON mes.TeamID = tn.TeamID\nORDER BY mes.ExplainabilityScore DESC\nLIMIT 5;\n```',
    sql="Sql Prompt: List the top 5 models with the highest explainability scores and their development team names.\n\nSql Context: CREATE TABLE ModelExplainabilityScores (ModelID INT, ExplainabilityScore INT, TeamID INT); CREATE TABLE TeamNames (TeamID INT, TeamName VARCHAR(50));\n\nReasoning: Let's think step by step in order to To list the top 5 models with the highest explainability scores and their development team names, we need to join the `ModelExplainabilityScores` table with the `TeamNames` table on the `TeamID`, then sort the results by the `ExplainabilityScore` in descending order and limit the output to"
), 1), (Example({'sql_prompt': 'How many renewable energy power plants are there in Texas?', 'sql_context': "CREATE TABLE power_plants (state VARCHAR(255), source_type VARCHAR(255), count INT); INSERT INTO power_plants (state, source_type, count) VALUES ('Texas', 'Wind', 45), ('Texas', 'Solar', 25), ('Texas', 'Hydro', 10);", 'sql': "SELECT SUM(count) FROM power_plants WHERE state = 'Texas';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find out how many renewable energy power plants there are in Texas, we need to sum up the counts of all types of renewable sources (Wind, Solar, Hydro) for that state. The SQL query will aggregate these counts using a `SUM` function and filter by the 'Texas' state:\n\n```sql\nSELECT SUM(count) AS total_renewable_plants FROM power_plants WHERE state = 'Texas';\n```",
    sql="Sql Prompt: How many renewable energy power plants are there in Texas?\n\nSql Context: CREATE TABLE power_plants (state VARCHAR(255), source_type VARCHAR(255), count INT); INSERT INTO power_plants (state, source_type, count) VALUES ('Texas', 'Wind', 45), ('Texas', 'Solar', 25), ('Texas', 'Hydro', 10);\n\nReasoning: Let's think step by step in order to To find out how many renewable energy power plants there are in Texas, we need to sum up the counts of all types of renewable sources (Wind, Solar"
), 1), (Example({'sql_prompt': 'Find the top 5 countries with the lowest financial capability scores in Europe.', 'sql_context': 'CREATE TABLE financial_capability (id INT, country VARCHAR(255), score INT);', 'sql': "SELECT country, score FROM (SELECT country, score, ROW_NUMBER() OVER (ORDER BY score ASC) rn FROM financial_capability WHERE region = 'Europe') t WHERE rn <= 5;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the top 5 countries with the lowest financial capability scores in Europe, we need to perform a query that selects from the `financial_capability` table where the country is located in Europe. We can assume there is another table called `countries` which contains information about each country and its continent.\n\nFirstly, let's create the `countries` table with an example of how it might look:\n\n```sql\nCREATE TABLE countries (id INT PRIMARY KEY, name VARCHAR(255), continent VARCHAR(255));\nINSERT INTO countries (id, name, continent) VALUES \n(1, 'France', 'Europe'),\n(2, 'Germany',",
    sql="Sql Prompt: Find the top 5 countries with the lowest financial capability scores in Europe.\n\nSql Context: CREATE TABLE financial_capability (id INT, country VARCHAR(255), score INT); CREATE TABLE countries (id INT PRIMARY KEY, name VARCHAR(255), continent VARCHAR(255)); INSERT INTO countries (id, name, continent) VALUES (1, 'France', 'Europe'), (2, 'Germany', 'Europe'), (3, 'Spain', 'Europe'), (4, 'Italy', 'Europe'), (5, 'Poland', 'Europe');\n\nReasoning: Let's think step by step in order to find the top 5"
), 1), (Example({'sql_prompt': 'What is the correlation between climate change and biodiversity in the Arctic?', 'sql_context': "CREATE TABLE Climate_Change (id INT PRIMARY KEY, year INT, temperature FLOAT, region VARCHAR(50)); CREATE TABLE Biodiversity (id INT, year INT, species_count INT, region VARCHAR(50), climate_id INT, FOREIGN KEY (climate_id) REFERENCES Climate_Change(id)); INSERT INTO Climate_Change (id, year, temperature, region) VALUES (1, 2000, -10.0, 'Arctic'), (2, 2010, -9.5, 'Arctic'); INSERT INTO Biodiversity (id, year, species_count, region, climate_id) VALUES (1, 2000, 100, 'Arctic', 1), (2, 2010, 105, 'Arctic', 2);", 'sql': "SELECT Climate_Change.year, Climate_Change.temperature, Biodiversity.species_count FROM Climate_Change INNER JOIN Biodiversity ON Climate_Change.id = Biodiversity.climate_id WHERE Climate_Change.region = 'Arctic';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To analyze the correlation between climate change and biodiversity in the Arctic region using SQL, we need to perform a JOIN operation on the `Climate_Change` and `Biodiversity` tables based on their common attributes (`year`, `region`, and `climate_id`). After joining these tables, we can use statistical functions like CORR() (if supported by your SQL database) to calculate the correlation coefficient between temperature changes and species count.\n\nHere's how you could write this query:\n\n```sql\nSELECT \n    CORR(C.temperature, B.species_count) AS temp_biodiversity_correlation\nFROM \n    Climate_Change C",
    sql='JOIN B ON C.year = B.year AND C.region = B.region;\n```\n\nThis query calculates the correlation coefficient between temperature and species count for each year in the Arctic region, which can help us understand how climate change is affecting biodiversity there. If your SQL database does not support the CORR() function directly, you might need to calculate the Pearson correlation coefficient manually or use a statistical tool outside of SQL to analyze this relationship further.'
), 0), (Example({'sql_prompt': 'What is the average budget allocated for ethical AI research by country?', 'sql_context': "CREATE TABLE Country (CountryID INT PRIMARY KEY, CountryName VARCHAR(100), Budget DECIMAL(10,2)); INSERT INTO Country (CountryID, CountryName, Budget) VALUES (1, 'USA', 5000000.00), (2, 'Canada', 3000000.00), (3, 'Mexico', 1000000.00);", 'sql': 'SELECT AVG(Budget) as AvgBudget, CountryName FROM Country GROUP BY CountryName;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the average budget allocated for ethical AI research by country, we need to calculate the mean of the Budget column from the Country table. Since there is no specific mention of a separate table or column that exclusively tracks budgets for ethical AI research within this context, we will assume that the 'Budget' field in the 'Country' table represents the total budget allocated for all purposes including ethical AI research.\n\nHere is the SQL query to calculate the average budget:\n\n```sql\nSELECT AVG(Budget) AS avg_ethical_ai_research_budget FROM Country;\n```",
    sql="Sql Prompt: What is the average budget allocated for ethical AI research by country?\n\nSql Context: CREATE TABLE Country (CountryID INT PRIMARY KEY, CountryName VARCHAR(100), Budget DECIMAL(10,2)); INSERT INTO Country (CountryID, CountryName, Budget) VALUES (1, 'USA', 5000000.00), (2, 'Canada', 3000000.00), (3, 'Mexico', 1000000.00);\n\nReasoning: Let's think step by step in order to find the average budget allocated for ethical A"
), 1), (Example({'sql_prompt': 'What is the total fare collected for each train line?', 'sql_context': "CREATE TABLE train_lines (line_id INT, line_name TEXT); CREATE TABLE fares (fare_id INT, line_id INT, fare DECIMAL); INSERT INTO train_lines VALUES (1, 'Line 1'), (2, 'Line 2'), (3, 'Line 3'); INSERT INTO fares VALUES (1, 1, 3.50), (2, 1, 3.50), (3, 2, 4.25), (4, 3, 5.00), (5, 3, 5.00);", 'sql': 'SELECT train_lines.line_name, SUM(fares.fare) AS total_fare FROM train_lines INNER JOIN fares ON train_lines.line_id = fares.line_id GROUP BY train_lines.line_id;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the total fare collected for each train line, we need to join the `train_lines` table with the `fares` table on their respective `line_id` columns and then group the results by `line_name`. After grouping, we can sum up all the fares for each line.\n\nHere's how you would write this SQL query:\n\n```sql\nSELECT tl.line_name, SUM(f.fare) AS total_fare_collected\nFROM train_lines tl\nJOIN fares f ON tl.line_id = f.line_id\nGROUP BY tl.line_name;\n```\n\nThis query will give you the line",
    sql='SELECT tl.line_name, SUM(f.fare) AS total_fare_collected FROM train_lines tl JOIN fares f ON tl.line_id = f.line_id GROUP BY tl.line_name;'
), 0), (Example({'sql_prompt': 'What is the total revenue for cosmetics products that are not cruelty-free?', 'sql_context': 'CREATE TABLE product (product_id INT, name TEXT, price FLOAT, cruelty_free BOOLEAN); CREATE TABLE sales (sale_id INT, product_id INT, quantity INT);', 'sql': 'SELECT SUM(price * quantity) FROM product INNER JOIN sales ON product.product_id = sales.product_id WHERE cruelty_free = FALSE;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To calculate the total revenue for cosmetics products that are not cruelty-free, we need to join the `product` table with the `sales` table on their respective `product_id` fields. Then, filter out only those products which are not cruelty-free (`cruelty_free = false`) and sum up the product of price and quantity for these filtered records.\n\nHere's how you can write the SQL query:\n\n```sql\nSELECT SUM(p.price * s.quantity) AS total_revenue\nFROM product p\nJOIN sales s ON p.product_id = s.product_id\nWHERE p.cruelty_free = false",
    sql="Sql Prompt: What is the total revenue for cosmetics products that are not cruelty-free?\n\nSql Context: CREATE TABLE product (product_id INT, name TEXT, price FLOAT, cruelty_free BOOLEAN); CREATE TABLE sales (sale_id INT, product_id INT, quantity INT);\n\nReasoning: Let's think step by step in order to To calculate the total revenue for cosmetics products that are not cruelty-free, we need to join the `product` table with the `sales` table on their respective `product_id` fields. Then, filter out only those products which are not cruelty-free (`c"
), 1), (Example({'sql_prompt': 'What is the total cost of permits for projects with permit numbers greater than 700?', 'sql_context': "CREATE TABLE permit_data (id INT, project VARCHAR(50), permit_number INT, start_date DATE, permit_cost DECIMAL(10,2)); INSERT INTO permit_data (id, project, permit_number, start_date, permit_cost) VALUES (1, 'Office Building', 450, '2019-12-20', 850.00), (2, 'Residential Apartments', 751, '2021-03-01', 1200.50), (3, 'School', 333, '2020-06-15', 500.25), (4, 'Mall', 780, '2020-12-01', 1500.75);", 'sql': 'SELECT SUM(permit_cost) FROM permit_data WHERE permit_number > 700;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the total cost of permits for projects with permit numbers greater than 700, we need to sum up the `permit_cost` column where the `permit_number` is greater than 700.\n\nHere's the SQL query that accomplishes this:\n\n```sql\nSELECT SUM(permit_cost) AS total_permit_cost FROM permit_data WHERE permit_number > 700;\n```",
    sql="Sql Prompt: What is the total cost of permits for projects with permit numbers greater than 700?\n\nSql Context: CREATE TABLE permit_data (id INT, project VARCHAR(50), permit_number INT, start_date DATE, permit_cost DECIMAL(10,2)); INSERT INTO permit_data (id, project, permit_number, start_date, permit_cost) VALUES (1, 'Office Building', 450, '2019-12-20', 850.00), (2, 'Residential Apartments', 751, '2021-03-01',"
), 1), (Example({'sql_prompt': 'Find the total square footage of wheelchair-accessible properties in Boston.', 'sql_context': "CREATE TABLE properties (id INT, city VARCHAR(20), square_footage INT, wheelchair_accessible BOOLEAN); INSERT INTO properties (id, city, square_footage, wheelchair_accessible) VALUES (1, 'Boston', 1000, true); INSERT INTO properties (id, city, square_footage, wheelchair_accessible) VALUES (2, 'Boston', 1200, false);", 'sql': "SELECT SUM(square_footage) FROM properties WHERE city = 'Boston' AND wheelchair_accessible = true;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the total square footage of wheelchair-accessible properties in Boston, we need to sum up the `square_footage` column for all records where both `city` is 'Boston' and `wheelchair_accessible` is true.",
    sql="SELECT SUM(square_footage) FROM properties WHERE city = 'Boston' AND wheelchair_accessible = true;"
), 1), (Example({'sql_prompt': 'Which operators have the highest average production quantity per well?', 'sql_context': "CREATE TABLE wells (well_id INT, well_name TEXT, production_qty FLOAT, operator_id INT); INSERT INTO wells (well_id, well_name, production_qty, operator_id) VALUES (1, 'Well A', 1000, 1), (2, 'Well B', 1500, 1), (3, 'Well C', 800, 2); CREATE TABLE operators (operator_id INT, operator_name TEXT); INSERT INTO operators (operator_id, operator_name) VALUES (1, 'ABC Inc.'), (2, 'DEF'), (3, 'GHI Inc.');", 'sql': 'SELECT o.operator_name, AVG(w.production_qty) as avg_production FROM wells w JOIN operators o ON w.operator_id = o.operator_id GROUP BY o.operator_name ORDER BY avg_production DESC;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='To find the operators with the highest average production quantity per well, we need to calculate the average production for each operator and then sort them in descending order based on this average. Here is how you can write the SQL query:\n\n```sql\nSELECT o.operator_name, AVG(w.production_qty) AS avg_production_quantity\nFROM wells w\nJOIN operators o ON w.operator_id = o.operator_id\nGROUP BY o.operator_name\nORDER BY avg_production_quantity DESC;\n```\n\nThis query joins the `wells` table with the `operators` table on their common column, operator_id. It then groups the results',
    sql='SELECT o.operator_name, AVG(w.production_qty) AS avg_production_quantity \nFROM wells w \nJOIN operators o ON w.operator_id = o.operator_id \nGROUP BY o.operator_name \nORDER BY avg_production_quantity DESC;'
), 0), (Example({'sql_prompt': 'What was the average number of comments per post in Oceania in the last month?', 'sql_context': "CREATE TABLE comments_posts(region VARCHAR(20), post_date DATE, comments INT, posts INT); INSERT INTO comments_posts(region, post_date, comments, posts) VALUES('Oceania', '2021-09-01', 10, 10), ('Oceania', '2021-09-02', 12, 12), ('Oceania', '2021-09-03', 14, 14), ('Oceania', '2021-09-04', 16, 16), ('Oceania', '2021-09-05', 18, 18), ('Oceania', '2021-09-06', 20, 20), ('Oceania', '2021-09-07', 22, 22);", 'sql': "SELECT AVG(comments/posts) FROM comments_posts WHERE region = 'Oceania' AND post_date >= DATEADD(month, -1, CURRENT_DATE)"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the average number of comments per post in Oceania for the last month, we need to calculate the total number of comments and posts separately within that region and time frame. Then, divide the total comments by the total posts to get the average.\n\nHere's the SQL query:\n\n```sql\nSELECT AVG(comments * 1.0 / posts) AS avg_comments_per_post\nFROM comments_posts\nWHERE region = 'Oceania' AND post_date >= DATE('now', '-1 month');\n```",
    sql="Sql Prompt: What was the average number of comments per post in Oceania in the last month?\n\nSql Context: CREATE TABLE comments_posts(region VARCHAR(20), post_date DATE, comments INT, posts INT); INSERT INTO comments_posts(region, post_date, comments, posts) VALUES('Oceania', '2021-09-01', 10, 10), ('Oceania', '2021-09-02', 12, 12), ('Oceania', '2021-09-03', 14, 14), ('Oceania', '20"
), 1), (Example({'sql_prompt': 'What is the geopolitical risk assessment score for each country in 2020?', 'sql_context': "CREATE TABLE GeopoliticalRiskAssessments (assessment_id INT, assessment_name VARCHAR(50), score INT, assessment_date DATE, country VARCHAR(50)); INSERT INTO GeopoliticalRiskAssessments (assessment_id, assessment_name, score, assessment_date, country) VALUES (1, 'Assessment A', 7, '2020-01-01', 'USA'), (2, 'Assessment B', 5, '2020-02-15', 'Russia'), (3, 'Assessment C', 8, '2020-03-31', 'China');", 'sql': "SELECT country, score FROM GeopoliticalRiskAssessments WHERE assessment_date BETWEEN '2020-01-01' AND '2020-12-31';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the geopolitical risk assessment score for each country in 2020 from the given SQL context, we need to select records where the `assessment_date` falls within the year 2020. We can achieve this by using a WHERE clause that checks if the month and day of the `assessment_date` are both greater than or equal to January 1st, 2020, and less than January 1st, 2021. Here's how you would write the SQL query:\n\n```sql\nSELECT country, AVG(score) as avg_risk_score\nFROM GeopoliticalRiskAssessments",
    sql='WHERE YEAR(assessment_date) = 2020\nGROUP BY country;'
), 0), (Example({'sql_prompt': 'Find the total revenue for events with an attendance over 200 in 2021.', 'sql_context': "CREATE TABLE events (event_id INT, event_name VARCHAR(50), attendance INT, revenue DECIMAL(10,2), event_date DATE); INSERT INTO events (event_id, event_name, attendance, revenue, event_date) VALUES (1, 'Art Exhibition', 250, 15000, '2021-06-01'); INSERT INTO events (event_id, event_name, attendance, revenue, event_date) VALUES (2, 'Theater Performance', 180, 12000, '2021-07-15');", 'sql': 'SELECT SUM(revenue) FROM events WHERE attendance > 200 AND YEAR(event_date) = 2021;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the total revenue for events with an attendance over 200 in 2021, we need to filter the `events` table based on two conditions: the `attendance` must be greater than 200 and the `event_date` should fall within the year 2021. After applying these filters, we can sum up the `revenue` column for all matching records.\n\nHere's how you would write this SQL query:\n\n```sql\nSELECT SUM(revenue) AS total_revenue\nFROM events\nWHERE attendance > 200 AND event_date BETWEEN '2021-01-01'",
    sql='```sql\nSELECT SUM(revenue) AS total_revenue\nFROM events\nWHERE attendance > 200 AND YEAR(event_date) = 2021;\n```'
), 0), (Example({'sql_prompt': "find the number of records in the CommunityHealthStatistics table where the State is 'TX' and the County is 'Harris'", 'sql_context': "CREATE TABLE CommunityHealthStatistics (ID INT, State TEXT, County TEXT, Population INT, AverageIncome FLOAT); INSERT INTO CommunityHealthStatistics (ID, State, County, Population, AverageIncome) VALUES (1, 'TX', 'Harris', 4500000, 60000), (2, 'CA', 'LA', 2500000, 70000);", 'sql': "SELECT * FROM CommunityHealthStatistics WHERE State = 'TX' AND County = 'Harris';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the number of records in the CommunityHealthStatistics table where the State is 'TX' and the County is 'Harris', we need to use a SQL query that filters the data based on these two conditions. The appropriate SQL statement would be:\n\n```sql\nSELECT COUNT(*) FROM CommunityHealthStatistics WHERE State = 'TX' AND County = 'Harris';\n```\n\nThis query counts all rows in the CommunityHealthStatistics table where both the State column has a value of 'TX' and the County column has a value of 'Harris'.",
    sql="Sql Prompt: find the number of records in the CommunityHealthStatistics table where the State is 'TX' and the County is 'Harris'\n\nSql Context: CREATE TABLE CommunityHealthStatistics (ID INT, State TEXT, County TEXT, Population INT, AverageIncome FLOAT); INSERT INTO CommunityHealthStatistics (ID, State, County, Population, AverageIncome) VALUES (1, 'TX', 'Harris', 4500000, 60000), (2, 'CA', 'LA', 2500000, 70000);\n\nReasoning: Let'"
), 0), (Example({'sql_prompt': "Insert a new record into the 'weapons' table with the following data: 'Javelin', 'USA', 'in-development'", 'sql_context': "CREATE TABLE weapons (id INT PRIMARY KEY, name VARCHAR(255), origin VARCHAR(255), status VARCHAR(255)); INSERT INTO weapons (id, name, origin) VALUES (1, 'AK-47', 'Russia'), (2, 'RPG-7', 'Russia');", 'sql': "INSERT INTO weapons (name, origin, status) VALUES ('Javelin', 'USA', 'in-development');"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To insert a new record into the 'weapons' table with the data provided ('Javelin', 'USA', 'in-development'), we need to follow these steps:\n\n1. Determine the next available id for the new weapon entry, which can be done by finding the maximum current id and adding 1 to it. In this case, since there are two existing entries with ids 1 and 2, the next available id would be 3.\n\n2. Use the INSERT INTO statement to add a new row into the 'weapons' table using the determined id, along with the name ('Javelin'), origin ('USA'), and status ('in-development').\n\nHere is the",
    sql="Insertion SQL query for adding the new weapon record:\n\n```sql\nINSERT INTO weapons (id, name, origin, status) VALUES (3, 'Javelin', 'USA', 'in-development');\n```\n\nReasoning: To insert a new record into the 'weapons' table with the data provided ('Javelin', 'USA', 'in-development'), we need to follow these steps: 1. Determine the next available id for the new weapon entry, which can be done by finding the maximum current id and adding 1 to it. In this case, since there are two existing entries with ids 1 and 2, the next available id would be 3."
), 0), (Example({'sql_prompt': 'Count the number of mining incidents per month in 2021.', 'sql_context': "CREATE TABLE incidents (id INT, date DATE, incident_type TEXT); INSERT INTO incidents (id, date, incident_type) VALUES (1, '2021-01-05', 'equipment_failure'); INSERT INTO incidents (id, date, incident_type) VALUES (2, '2021-03-12', 'safety_violation');", 'sql': "SELECT DATE_PART('month', date) AS month, COUNT(*) FROM incidents WHERE date >= '2021-01-01' AND date < '2022-01-01' GROUP BY month;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To count the number of mining incidents per month in 2021, we need to extract the year and month from the date column and then group the results accordingly. Here is how you can write the SQL query for this task:\n\n```sql\nSELECT EXTRACT(YEAR FROM date) AS year,\n       EXTRACT(MONTH FROM date) AS month,\n       COUNT(*) AS incident_count\nFROM incidents\nWHERE incident_type = 'mining' AND EXTRACT(YEAR FROM date) = 2021\nGROUP BY year, month\nORDER BY year, month;\n```\n\nThis query will give you the count of mining",
    sql="SELECT EXTRACTION(MONTH FROM date) AS month, COUNT(*) AS incident_count FROM incidents WHERE incident_type = 'mining' AND EXTRACT(YEAR FROM date) = 2021 GROUP BY month ORDER BY month;"
), 0), (Example({'sql_prompt': "How many workers are employed in 'renewable energy' sector?", 'sql_context': "CREATE TABLE workers (id INT, worker_name VARCHAR(255), department VARCHAR(255)); INSERT INTO workers (id, worker_name, department) VALUES (1, 'John Doe', 'renewable energy'), (2, 'Jane Smith', 'textiles'), (3, 'Michael Brown', 'renewable energy');", 'sql': "SELECT COUNT(*) FROM workers WHERE department = 'renewable energy';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find out how many workers are employed in the 'renewable energy' sector, we need to count the number of entries in the `workers` table where the department is 'renewable energy'. We can achieve this using a SQL query with the COUNT() function and a WHERE clause.\n\nHere's the SQL statement:\n\n```sql\nSELECT COUNT(*) AS num_workers FROM workers WHERE department = 'renewable energy';\n```",
    sql="Sql Prompt: How many workers are employed in the 'renewable energy' sector?\n\nSql Context: CREATE TABLE workers (id INT, worker_name VARCHAR(255), department VARCHAR(255)); INSERT INTO workers (id, worker_name, department) VALUES (1, 'John Doe', 'renewable energy'), (2, 'Jane Smith', 'textiles'), (3, 'Michael Brown', 'renewable energy');\n\nReasoning: Let's think step by step in order to find out how many workers are employed in the 'renewable energy' sector. We need to count the number of entries in the `workers` table where the department"
), 1), (Example({'sql_prompt': 'What is the average performance score for each game genre?', 'sql_context': "CREATE TABLE game_genre_performance (game_id INT, game_genre VARCHAR(255), performance_score INT); INSERT INTO game_genre_performance (game_id, game_genre, performance_score) VALUES (1, 'RPG', 85), (2, 'Strategy', 90), (3, 'RPG', 80);", 'sql': 'SELECT game_genre, AVG(performance_score) as avg_score FROM game_genre_performance GROUP BY game_genre;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='To find the average performance score for each game genre, we need to group the records by `game_genre` and then calculate the average of `performance_score` within each group. The SQL query will look like this:\n\n```sql\nSELECT game_genre, AVG(performance_score) AS avg_performance_score\nFROM game_genre_performance\nGROUP BY game_genre;\n```',
    sql="Sql Prompt: What is the average performance score for each game genre?\n\nSql Context: CREATE TABLE game_genre_performance (game_id INT, game_genre VARCHAR(255), performance_score INT); INSERT INTO game_genre_performance (game_id, game_genre, performance_score) VALUES (1, 'RPG', 85), (2, 'Strategy', 90), (3, 'RPG', 80);\n\nReasoning: Let's think step by step in order to find the average performance score for each game genre. We need to group the records based on `game_genre` and then calculate the"
), 1), (Example({'sql_prompt': 'How many Indigenous communities in the Arctic are experiencing negative socio-economic impacts due to climate change?', 'sql_context': "CREATE TABLE IndigenousCommunities(community TEXT, socio_economic_impact TEXT, climate_change_impact TEXT); INSERT INTO IndigenousCommunities(community, socio_economic_impact, climate_change_impact) VALUES ('Inuit', 'High', 'Very High'), ('Sami', 'Medium', 'High');", 'sql': "SELECT COUNT(*) FROM IndigenousCommunities WHERE socio_economic_impact = 'High' AND climate_change_impact = 'High' OR socio_economic_impact = 'Very High' AND climate_change_impact = 'Very High';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='To answer the question about how many Indigenous communities in the Arctic are experiencing negative socio-economic impacts due to climate change, we need to filter the records based on both `socio_economic_impact` and `climate_change_impact`. We can consider an impact as "negative" if it is either \'High\' or \'Very High\'.\n\nHere\'s the SQL query that would provide this information:\n\n```sql\nSELECT COUNT(*) AS negative_impact_count\nFROM IndigenousCommunities\nWHERE socio_economic_impact IN (\'High\', \'Very High\') AND climate_change_impact IN (\'',
    sql="`SELECT COUNT(*) AS negative_impact_count FROM IndigenousCommunities WHERE socio_economic_impact IN ('High', 'Very High') AND climate_change_impact IN ('High', 'Very High');`"
), 0), (Example({'sql_prompt': 'What is the minimum depth recorded in the Mariana Trench?', 'sql_context': "CREATE TABLE ocean_floor_mapping (location VARCHAR(255), depth FLOAT);   INSERT INTO ocean_floor_mapping (location, depth) VALUES ('Mariana Trench', 10994.0), ('Challenger Deep', 10972.8);", 'sql': "SELECT MIN(depth) FROM ocean_floor_mapping WHERE location = 'Mariana Trench';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='To find the minimum depth recorded in the Mariana Trench from the given SQL context, we need to query the `ocean_floor_mapping` table and filter for entries related to the Mariana Trench. Then, we can use an aggregate function like MIN() to get the smallest value of depth among those records.\n\nHere\'s how you would write the SQL statement:\n\n```sql\nSELECT MIN(depth) AS minimum_depth FROM ocean_floor_mapping WHERE location LIKE \'%Mariana Trench%\';\n```\n\nThis query selects the minimum depth from rows where the `location` column contains "Mariana Trench". The `%` symbols are wildcards that match any sequence of characters,',
    sql="Sql Prompt: What is the minimum depth recorded in the Mariana Trench?\n\nSql Context: CREATE TABLE ocean_floor_mapping (location VARCHAR(255), depth FLOAT); INSERT INTO ocean_floor_mapping (location, depth) VALUES ('Mariana Trench', 10994.0), ('Challenger Deep', 10972.8);\n\nReasoning: Let's think step by step in order to find the minimum depth recorded specifically for the Mariana Trench from the given SQL context, we need to query the `ocean_floor_mapping` table and filter for entries that are related to the Mariana Trench. Then, we"
), 1), (Example({'sql_prompt': 'List all farmers who have not serviced their irrigation systems in the last 6 months.', 'sql_context': "CREATE TABLE farmer_irrigation (id INT, farmer_id INT, system_type VARCHAR(50), service_date DATE); INSERT INTO farmer_irrigation (id, farmer_id, system_type, service_date) VALUES (1, 1, 'Drip', '2021-08-01'), (2, 2, 'Sprinkler', '2021-10-15'), (3, 3, 'Drip', '2021-11-01'), (4, 4, 'Sprinkler', '2022-02-01'), (5, 5, 'Drip', '2022-03-01'), (6, 6, 'Sprinkler', '2022-01-15'), (7, 7, 'Drip', '2021-06-01'), (8, 8, 'Sprinkler', '2022-04-01'), (9, 9, 'Drip', '2021-12-01'), (10, 10, 'Sprinkler', '2022-05-15');", 'sql': 'SELECT farmers.name FROM farmers LEFT JOIN farmer_irrigation ON farmers.id = farmer_irrigation.farmer_id WHERE farmer_irrigation.service_date <= DATE_SUB(CURDATE(), INTERVAL 6 MONTH);'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To list all farmers who have not serviced their irrigation systems in the last 6 months, we need to find records where the `service_date` is older than 6 months from today. Assuming today's date is '2023-04-01', we can use a SQL query that compares the `service_date` with this date minus 6 months (i.e., '2022-10-01').\n\nHere's how you could write the SQL statement:\n\n```sql\nSELECT DISTINCT farmer_id FROM farmer_irrigation WHERE service_date <= DATE('2023-04-01",
    sql="`SELECT DISTINCT f.farmer_id, f.name \nFROM farmers f\nJOIN farmer_irrigation fi ON f.farmer_id = fi.farmer_id\nWHERE fi.service_date <= DATE('2023-10-01');`"
), 0), (Example({'sql_prompt': 'What is the most common type of medical equipment across hospitals?', 'sql_context': "CREATE TABLE medical_equipment (id INT, hospital_name TEXT, location TEXT, equipment TEXT, quantity INT, last_updated_date DATE); INSERT INTO medical_equipment (id, hospital_name, location, equipment, quantity, last_updated_date) VALUES (1, 'NY Presbyterian', 'NYC', 'Ventilators', 80, '2021-03-31'); INSERT INTO medical_equipment (id, hospital_name, location, equipment, quantity, last_updated_date) VALUES (2, 'Stanford Hospital', 'Palo Alto', 'Ventilators', 90, '2021-03-31');", 'sql': 'SELECT equipment, MAX(quantity) as max_quantity FROM medical_equipment GROUP BY equipment ORDER BY max_quantity DESC LIMIT 1;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='To find the most common type of medical equipment across hospitals, we need to count how many times each type of equipment appears and then select the one with the highest frequency. Here is the SQL query that accomplishes this task:\n\n```sql\nSELECT equipment, COUNT(*) as frequency\nFROM medical_equipment\nGROUP BY equipment\nORDER BY frequency DESC\nLIMIT 1;\n```',
    sql="Sql Prompt: What is the most common type of medical equipment across hospitals?\n\nSql Context: CREATE TABLE medical_equipment (id INT, hospital_name TEXT, location TEXT, equipment TEXT, quantity INT, last_updated_date DATE); INSERT INTO medical_equipment (id, hospital_name, location, equipment, quantity, last_updated_date) VALUES (1, 'NY Presbyterian', 'NYC', 'Ventilators', 80, '2021-03-31'); INSERT INTO medical_equipment (id, hospital_name, location, equipment, quantity, last_updated_date) VALUES"
), 0), (Example({'sql_prompt': "What is the average rating for 'Gluten-Free' items?", 'sql_context': "CREATE TABLE ratings (item_name TEXT, is_gluten_free BOOLEAN, rating INTEGER); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Quinoa Salad', true, 4); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Chicken Stir Fry', false, 5);", 'sql': 'SELECT AVG(rating) FROM ratings WHERE is_gluten_free = true;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the average rating for 'Gluten-Free' items, we need to filter the ratings table where `is_gluten_free` is true and then calculate the average of those filtered results. Here's how you can write the SQL query:\n\n```sql\nSELECT AVG(rating) AS avg_rating FROM ratings WHERE is_gluten_free = true;\n```",
    sql="Sql Prompt: What is the average rating for 'Gluten-Free' items?\n\nSql Context: CREATE TABLE ratings (item_name TEXT, is_gluten_free BOOLEAN, rating INTEGER); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Quinoa Salad', true, 4); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Chicken Stir Fry', false, 5);\n\nReasoning: Let's think step by step in order to find the average rating for 'Gluten-Free' items. We need to filter out only those entries where"
), 0), (Example({'sql_prompt': 'How many water treatment facilities are there in each country, and what is their distribution by continent?', 'sql_context': "CREATE TABLE facilities (id INT, facility_name VARCHAR(50), country VARCHAR(50), total_employees INT); INSERT INTO facilities (id, facility_name, country, total_employees) VALUES (1, 'Water Treatment Plant 1', 'Brazil', 25); INSERT INTO facilities (id, facility_name, country, total_employees) VALUES (2, 'Water Treatment Plant 2', 'India', 30);", 'sql': 'SELECT country, COUNT(*) as facility_count, CONTINENT(location) as continent FROM facilities JOIN countries ON facilities.country = countries.country_name GROUP BY country, continent;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To answer the question about the number of water treatment facilities and their distribution by continent, we need a table that includes information on continents. Since this data is not provided directly within the SQL context given, let's assume there exists another table called 'countries' which contains country names along with their corresponding continents:\n\n```sql\nCREATE TABLE countries (country VARCHAR(50), continent VARCHAR(50));\nINSERT INTO countries (country, continent) VALUES ('Brazil', 'South America'), ('India', 'Asia');\n```\n\nNow we can write an SQL query to find the number of water treatment facilities in each country and their distribution by continent:\n\n```sql\nSELECT c.",
    sql="`SELECT co.continent, f.country, COUNT(*) AS facility_count FROM facilities f JOIN countries co ON f.country = co.country GROUP BY co.continent, f.country;`\n\nReasoning: To find the number of water treatment facilities in each country and their distribution by continent, we need to join the 'facilities' table with a hypothetical 'countries' table that contains information about which continent each country belongs to. We then group the results by both continent and country to get the count of facilities per country within each continent."
), 0), (Example({'sql_prompt': "What is the maximum data usage in the 'urban' region?", 'sql_context': "CREATE TABLE subscribers (id INT, name VARCHAR(50), data_usage FLOAT, region VARCHAR(20)); INSERT INTO subscribers (id, name, data_usage, region) VALUES (1, 'John Doe', 20.0, 'urban'), (2, 'Jane Doe', 18.0, 'urban');", 'sql': "SELECT MAX(data_usage) FROM subscribers WHERE region = 'urban';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the maximum data usage in the 'urban' region, we need to filter records based on the 'region' column and then identify the highest value of 'data_usage'. The SQL query for this would be as follows:\n\n```sql\nSELECT MAX(data_usage) AS max_data_usage FROM subscribers WHERE region = 'urban';\n```",
    sql="Sql Prompt: What is the maximum data usage in the 'urban' region?\n\nSql Context: CREATE TABLE subscribers (id INT, name VARCHAR(50), data_usage FLOAT, region VARCHAR(20)); INSERT INTO subscribers (id, name, data_usage, region) VALUES (1, 'John Doe', 20.0, 'urban'), (2, 'Jane Doe', 18.0, 'urban');\n\nReasoning: Let's think step by step in order to find the maximum data usage for subscribers located in the 'urban' region. We need to filter out records where the `region` is equal to 'urban'. After"
), 1), (Example({'sql_prompt': 'Find the average depth of all underwater volcanoes in the Atlantic Ocean.', 'sql_context': "CREATE TABLE underwater_volcanoes (id INT, name VARCHAR(50), depth FLOAT, ocean VARCHAR(20)); INSERT INTO underwater_volcanoes (id, name, depth, ocean) VALUES (1, 'Lost City', 800, 'Atlantic'); INSERT INTO underwater_volcanoes (id, name, depth, ocean) VALUES (2, 'Eyjafjallajokull', 1650, 'Atlantic');", 'sql': "SELECT AVG(depth) FROM underwater_volcanoes WHERE ocean = 'Atlantic';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the average depth of all underwater volcanoes in the Atlantic Ocean, we need to perform a SELECT query that calculates the average value of the `depth` column from the `underwater_volcanoes` table. However, this calculation should only include rows where the `ocean` column is equal to 'Atlantic'. Here's how you can write the SQL statement:\n\n```sql\nSELECT AVG(depth) AS average_depth FROM underwater_volcanoes WHERE ocean = 'Atlantic';\n```\n\nThis query will return a single row with one column named `average_depth`, which represents the average depth of all underwater volcanoes in the Atlantic Ocean.",
    sql="Sql Prompt: Find the average depth of all underwater volcanoes in the Atlantic Ocean.\n\nSql Context: CREATE TABLE underwater_volcanoes (id INT, name VARCHAR(50), depth FLOAT, ocean VARCHAR(20)); INSERT INTO underwater_volcanoes (id, name, depth, ocean) VALUES (1, 'Lost City', 800, 'Atlantic'); INSERT INTO underwater_volcanoes (id, name, depth, ocean) VALUES (2, 'Eyjafjallajokull', 1650, 'Atlantic');\n\nReasoning: Let's think step by step in order to find"
), 0), (Example({'sql_prompt': 'What is the total cost of Mars rover missions that have successfully landed?', 'sql_context': 'CREATE TABLE mars_rovers (id INT PRIMARY KEY, name VARCHAR(255), mission_type VARCHAR(255), agency VARCHAR(255), cost FLOAT, launched_date DATE, landed_date DATE);', 'sql': "SELECT SUM(cost) FROM mars_rovers WHERE mission_type = 'Lander' AND landed_date IS NOT NULL;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='To find the total cost of Mars rover missions that have successfully landed, we need to consider only those entries where the `landed_date` is not NULL. This indicates a successful landing. We then sum up the costs for these missions.',
    sql='SELECT SUM(cost) FROM mars_rovers WHERE landed_date IS NOT NULL;'
), 0), (Example({'sql_prompt': "What is the earliest year a peacekeeping operation was conducted in 'Asia'?", 'sql_context': "CREATE TABLE Peacekeeping_Years (id INT, location VARCHAR(30), year INT); INSERT INTO Peacekeeping_Years (id, location, year) VALUES (1, 'Asia', 1990), (2, 'Asia', 2000);", 'sql': "SELECT MIN(year) FROM Peacekeeping_Years WHERE location = 'Asia';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the earliest year a peacekeeping operation was conducted in Asia, we need to select the minimum value from the `year` column where the location is 'Asia'. The SQL query for this would be as follows:\n\n```sql\nSELECT MIN(year) AS earliest_peacekeeping_year FROM Peacekeeping_Years WHERE location = 'Asia';\n```",
    sql="Sql Prompt: What is the earliest year a peacekeeping operation was conducted in 'Asia'?\n\nSql Context: CREATE TABLE Peacekeeping_Years (id INT, location VARCHAR(30), year INT); INSERT INTO Peacekeeping_Years (id, location, year) VALUES (1, 'Asia', 1990), (2, 'Asia', 2000);\n\nReasoning: Let's think step by step in order to To find the earliest year a peacekeeping operation was conducted in Asia, we need to select the minimum value from the `year` column where the location is 'Asia'. The SQL query for this would be as"
), 1), (Example({'sql_prompt': 'Identify the drug with the lowest sales amount in Europe in 2022.', 'sql_context': "CREATE TABLE sales (drug_name TEXT, continent TEXT, sales_amount INT, sale_date DATE); INSERT INTO sales (drug_name, continent, sales_amount, sale_date) VALUES ('Aspirin', 'Europe', 1000, '2022-01-01');", 'sql': "SELECT drug_name, MIN(sales_amount) FROM sales WHERE continent = 'Europe' AND sale_date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY drug_name;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To identify the drug with the lowest sales amount in Europe for the year 2022, we need to filter the records based on the continent and sale_date. Then, we can use an aggregate function (MIN) to find the minimum sales_amount among these filtered records. Here's how you could write this SQL query:\n\n```sql\nSELECT drug_name, MIN(sales_amount) AS lowest_sales_amount\nFROM sales\nWHERE continent = 'Europe' AND EXTRACT(YEAR FROM sale_date) = 2022\nGROUP BY drug_name\nORDER BY lowest_sales_amount ASC\nLIMIT 1;\n```\n\nThis",
    sql="Sql Prompt: Identify the drug with the lowest sales amount in Europe in 2022.\n\nSql Context: CREATE TABLE sales (drug_name TEXT, continent TEXT, sales_amount INT, sale_date DATE); INSERT INTO sales (drug_name, continent, sales_amount, sale_date) VALUES ('Aspirin', 'Europe', 1000, '2022-01-01'), ('Ibuprofen', 'Europe', 500, '2022-03-15'), ('Paracetamol', 'Europe', 750, '2022-06-2"
), 1), (Example({'sql_prompt': "Insert a new record into 'customer_preferences' for customer 101 and menu item 1 with a preference score of 90", 'sql_context': 'CREATE TABLE customer_preferences (customer_id INT, item_id INT, preference_score INT);', 'sql': 'INSERT INTO customer_preferences (customer_id, item_id, preference_score) VALUES (101, 1, 90);'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To insert the new record into 'customer_preferences', we need to specify the values for each column as per the given information. The customer ID is 101, the menu item ID is 1, and the preference score is 90.\n\nThe SQL statement would be:\n\n```sql\nINSERT INTO customer_preferences (customer_id, item_id, preference_score) VALUES (101, 1, 90);\n```",
    sql="Sql Prompt: Insert a new record into 'customer_preferences' for customer 101 and menu item 1 with a preference score of 90\n\nSql Context: CREATE TABLE customer_preferences (customer_id INT, item_id INT, preference_score INT);\n\nReasoning: Let's think step by step in order to insert the new record into 'customer_preferences'. We need to specify the values for each column based on the given information. The customer ID is 101, the menu item ID is 1, and the preference score is 90. Therefore, we will use an INSERT INTO statement with these values in their respective columns.\n\nSql:"
), 0), (Example({'sql_prompt': 'Who is the oldest donor from each city?', 'sql_context': "CREATE TABLE donors_2 (id INT PRIMARY KEY, name VARCHAR(50), age INT, city VARCHAR(50), state VARCHAR(50)); INSERT INTO donors_2 (id, name, age, city, state) VALUES (1, 'John Doe', 35, 'New York', 'NY'), (2, 'Jane Smith', 40, 'Buffalo', 'NY'), (3, 'Mike Johnson', 50, 'Boston', 'MA');", 'sql': 'SELECT city, MAX(age) as oldest_donor_age FROM donors_2 GROUP BY city;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='To find the oldest donor from each city, we need to group the records by city and then select the record with the maximum age for each group. We can achieve this using a subquery or window functions like ROW_NUMBER(). Here is how you could write the SQL query:\n\n```sql\nSELECT id, name, age, city, state\nFROM (\n    SELECT *,\n           ROW_NUMBER() OVER(PARTITION BY city ORDER BY age DESC) as rn\n    FROM donors_2\n) subquery\nWHERE rn = 1;\n```\n\nThis query assigns a row number to each record within the same city based on their age in descending order. The',
    sql='SELECT id, name, age, city, state\nFROM (\n    SELECT *, ROW_NUMBER() OVER(PARTITION BY city ORDER BY age DESC) as rn\n    FROM donors_2\n) subquery\nWHERE rn = 1;'
), 0), (Example({'sql_prompt': 'What are the union membership statistics for unions that have engaged in successful collective bargaining in the healthcare sector?', 'sql_context': "CREATE TABLE Membership (UnionName TEXT, Sector TEXT, MemberCount INT); INSERT INTO Membership (UnionName, Sector, MemberCount) VALUES ('UnionHealthA', 'Healthcare', 3000), ('UnionHealthB', 'Healthcare', 5000), ('UnionHealthC', 'Healthcare', 2000);", 'sql': "SELECT UnionName, MemberCount FROM Membership WHERE Sector = 'Healthcare' AND UnionName IN (SELECT UnionName FROM CBAs WHERE ExpirationDate > CURDATE());"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the union membership statistics for unions that have engaged in successful collective bargaining in the healthcare sector, we need additional information about which unions have successfully completed collective bargaining. Assuming there is another table called 'CollectiveBargaining' with a column indicating success (e.g., `Success BOOLEAN`), and it references the union names from the Membership table:\n\n```sql\nCREATE TABLE CollectiveBargaining (UnionName TEXT, Success BOOLEAN);\nINSERT INTO CollectiveBargaining (UnionName, Success) VALUES ('UnionHealthA', true), ('UnionHealthC', false), ('UnionHealthD', true);\n```",
    sql="Sql Prompt: What are the union membership statistics for unions that have engaged in successful collective bargaining in the healthcare sector?\n\nSql Context: \n- Membership table with columns UnionName, Sector, and MemberCount.\n- CollectiveBargaining table with columns UnionName and Success (boolean).\n\nReasoning: Let's think step by step in order to find the union membership statistics for unions that have engaged in successful collective bargaining in the healthcare sector. We need to join the Membership table with the CollectiveBargaining table on UnionName, filter by Sector 'Healthcare', and only include rows where Success is true. Then"
), 0), (Example({'sql_prompt': 'Calculate the total gas consumption for Nigeria in 2019', 'sql_context': "CREATE TABLE gas_consumption (country VARCHAR(50), consumption_year INT, gas_consumption FLOAT); INSERT INTO gas_consumption (country, consumption_year, gas_consumption) VALUES ('Nigeria', 2019, 12000), ('Nigeria', 2018, 10000), ('Ghana', 2019, 8000), ('Ghana', 2018, 6000), ('Ivory Coast', 2019, 10000), ('Ivory Coast', 2018, 8000);", 'sql': "SELECT gas_consumption FROM gas_consumption WHERE country = 'Nigeria' AND consumption_year = 2019;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To calculate the total gas consumption for Nigeria in 2019, we need to filter the records from the 'gas_consumption' table where the country is 'Nigeria' and the year of consumption is 2019. Then, we will sum up the gas consumption values for these filtered records.\n\nHere's the SQL query that accomplishes this:\n\n```sql\nSELECT SUM(gas_consumption) AS total_gas_consumption\nFROM gas_consumption\nWHERE country = 'Nigeria' AND consumption_year = 2019;\n```",
    sql="Sql Prompt: Calculate the total gas consumption for Nigeria in 2019\n\nSql Context: CREATE TABLE gas_consumption (country VARCHAR(50), consumption_year INT, gas_consumption FLOAT); INSERT INTO gas_consumption (country, consumption_year, gas_consumption) VALUES ('Nigeria', 2019, 12000), ('Nigeria', 2018, 10000), ('Ghana', 2019, 8000), ('Ghana', 2018, 6000), ('Ivory Coast', 2019"
), 1), (Example({'sql_prompt': 'What is the average socially responsible lending loan amount for microfinance institutions in Southeast Asia?', 'sql_context': "CREATE TABLE socially_responsible_lending(id INT, loan_number INT, institution_region VARCHAR(50), amount INT); INSERT INTO socially_responsible_lending VALUES (1, 701, 'Southeast Asia', 5000); INSERT INTO socially_responsible_lending VALUES (2, 702, 'South Asia', 7000); INSERT INTO socially_responsible_lending VALUES (3, 703, 'East Asia', 9000); INSERT INTO socially_responsible_lending VALUES (4, 704, 'Southeast Asia', 6000);", 'sql': "SELECT AVG(amount) FROM socially_responsible_lending WHERE institution_region = 'Southeast Asia' AND type = 'microfinance';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the average loan amount for microfinance institutions in Southeast Asia, we need to filter records based on the `institution_region` column and then calculate the average of the `amount` column. Here is the SQL query that accomplishes this:\n\n```sql\nSELECT AVG(amount) AS avg_loan_amount FROM socially_responsible_lending WHERE institution_region = 'Southeast Asia';\n```",
    sql="Sql Prompt: What is the average loan amount for microfinance institutions in Southeast Asia?\n\nSql Context: CREATE TABLE socially_responsible_lending(id INT, loan_number INT, institution_region VARCHAR(50), amount INT); INSERT INTO socially_responsible_lending VALUES (1, 701, 'Southeast Asia', 5000); INSERT INTO socially_responsible_lending VALUES (2, 702, 'South Asia', 7000); INSERT INTO socially_responsible_lending VALUES (3, 703, 'East Asia', 9000); INSERT INTO soci"
), 1), (Example({'sql_prompt': 'What is the average salary of employees who identify as Latinx in the Engineering department?', 'sql_context': "CREATE TABLE Employees (EmployeeID int, Name varchar(50), Gender varchar(10), Department varchar(50), Salary decimal(10,2), Ethnicity varchar(50)); INSERT INTO Employees (EmployeeID, Name, Gender, Department, Salary, Ethnicity) VALUES (1, 'Juan Garcia', 'Male', 'Engineering', 85000.00, 'Latinx'); INSERT INTO Employees (EmployeeID, Name, Gender, Department, Salary, Ethnicity) VALUES (2, 'Maria Rodriguez', 'Female', 'Engineering', 90000.00, 'Latinx');", 'sql': "SELECT AVG(Salary) FROM Employees WHERE Department = 'Engineering' AND Ethnicity = 'Latinx';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the average salary of employees who identify as Latinx in the Engineering department, we need to filter the records based on both ethnicity and department criteria. Then, we can calculate the average salary for these filtered records.\n\nHere is the SQL query that accomplishes this:\n\n```sql\nSELECT AVG(Salary) AS avg_salary\nFROM Employees\nWHERE Ethnicity = 'Latinx' AND Department = 'Engineering';\n```",
    sql="Sql Prompt: What is the average salary of employees who identify as Latinx in the Engineering department?\n\nSql Context: CREATE TABLE Employees (EmployeeID int, Name varchar(50), Gender varchar(10), Department varchar(50), Salary decimal(10,2), Ethnicity varchar(50)); INSERT INTO Employees (EmployeeID, Name, Gender, Department, Salary, Ethnicity) VALUES (1, 'Juan Garcia', 'Male', 'Engineering', 85000.00, 'Latinx'); INSERT INTO Employees (EmployeeID, Name, Gender, Department, Salary, Ethnicity"
), 1), (Example({'sql_prompt': 'What is the name and type of the vessel with the highest average speed?', 'sql_context': "CREATE TABLE Vessels (ID VARCHAR(20), Name VARCHAR(20), Type VARCHAR(20), AverageSpeed FLOAT); INSERT INTO Vessels VALUES ('V012', 'Vessel L', 'Passenger', 35.0), ('V013', 'Vessel M', 'Cargo', 19.5), ('V014', 'Vessel N', 'Passenger', 32.0);", 'sql': 'SELECT Name, Type FROM Vessels WHERE AverageSpeed = (SELECT MAX(AverageSpeed) FROM Vessels);'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the name and type of the vessel with the highest average speed, we need to perform a query that selects these columns from the `Vessels` table while ordering the results by `AverageSpeed` in descending order. We will then limit our result set to just one record, which will be the vessel with the highest average speed.\n\nHere's how you can write this SQL statement:\n\n```sql\nSELECT Name, Type FROM Vessels ORDER BY AverageSpeed DESC LIMIT 1;\n```",
    sql="Sql Prompt: What is the name and type of the vessel with the highest average speed?\n\nSql Context: CREATE TABLE Vessels (ID VARCHAR(20), Name VARCHAR(20), Type VARCHAR(20), AverageSpeed FLOAT); INSERT INTO Vessels VALUES ('V012', 'Vessel L', 'Passenger', 35.0), ('V013', 'Vessel M', 'Cargo', 19.5), ('V014', 'Vessel N', 'Passenger', 32.0);\n\nReasoning: Let's think step by step in order to find the name and type of the vessel with the"
), 1), (Example({'sql_prompt': "List all the distinct producers of Gadolinium from the 'production' table, ordered alphabetically.", 'sql_context': 'CREATE TABLE production (element VARCHAR(10), year INT, month INT, producer VARCHAR(20), quantity INT);', 'sql': "SELECT DISTINCT producer FROM production WHERE element = 'Gadolinium' ORDER BY producer ASC;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='To list all distinct producers of Gadolinium from the \'production\' table and order them alphabetically, we need to perform a SELECT query that groups the results by the producer column. This will ensure that each producer is listed only once, regardless of how many times they appear in the table with different entries for year, month, or quantity.\n\nHere\'s the SQL statement:\n\n```sql\nSELECT DISTINCT producer FROM production WHERE element = \'Gadolinium\' ORDER BY producer ASC;\n```\n\nThis query does the following:\n- `SELECT DISTINCT producer`: Selects unique values from the column named "producer". This ensures that each producer is listed only once in our result',
    sql="Sql Prompt: List all the distinct producers of Gadolinium from the 'production' table, ordered alphabetically.\n\nSql Context: CREATE TABLE production (element VARCHAR(10), year INT, month INT, producer VARCHAR(20), quantity INT); INSERT INTO production (element, year, month, producer, quantity) VALUES ('Gadolinium', 2021, 6, 'Company A', 500), ('Neodymium', 2021, 7, 'Company B', 300), ('Gadolinium', 2021, 8, 'Company C', 400), ('Gadolinium',"
), 1)]