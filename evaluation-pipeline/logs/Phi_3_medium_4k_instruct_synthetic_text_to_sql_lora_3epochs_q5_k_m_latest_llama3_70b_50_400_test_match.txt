[(Example({'sql_prompt': 'How many artworks were sold by each gallery in the last year?', 'sql_context': "CREATE TABLE Galleries (GalleryID INT, GalleryName VARCHAR(50), City VARCHAR(50)); CREATE TABLE Sales (SaleID INT, GalleryID INT, ArtworkID INT, Year INT); INSERT INTO Galleries VALUES (1, 'Gallery 1', 'New York'), (2, 'Gallery 2', 'Los Angeles'), (3, 'Gallery 3', 'London'); INSERT INTO Sales VALUES (1, 1, 1, 2021), (2, 1, 2, 2021), (3, 2, 3, 2021), (4, 2, 4, 2021), (5, 3, 5, 2021), (6, 3, 6, 2021);", 'sql': 'SELECT G.GalleryName, COUNT(S.ArtworkID) AS ArtworksSold FROM Galleries G INNER JOIN Sales S ON G.GalleryID = S.GalleryID WHERE S.Year = 2021 GROUP BY G.GalleryName;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT Galleries.GalleryName, COUNT(Sales.ArtworkID) AS ArtworksSold FROM Sales INNER JOIN Galleries ON Sales.GalleryID = Galleries.GalleryID WHERE Year BETWEEN 2021 AND YEAR(CURRENT_DATE()) GROUP BY Galleries.GalleryName;'
), 0), (Example({'sql_prompt': 'What is the minimum donation amount for each program?', 'sql_context': 'CREATE TABLE Programs (ProgramID INT, ProgramName TEXT); CREATE TABLE Donations (DonationID INT, DonationAmount NUMERIC, ProgramID INT);', 'sql': 'SELECT Programs.ProgramName, MIN(Donations.DonationAmount) FROM Programs JOIN Donations ON Programs.ProgramID = Donations.ProgramID GROUP BY Programs.ProgramName;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT p.ProgramName, MIN(d.DonationAmount) as MinimumDonation FROM Programs p JOIN Donations d ON p.ProgramID = d.ProgramID GROUP BY p.ProgramName; <|\\end\\>>'
), 1), (Example({'sql_prompt': 'What are the total sales for each product category in Q2 of 2022?', 'sql_context': 'CREATE TABLE sales (sale_id INT, product_id INT, sale_date DATE, sale_amount DECIMAL(10,2));', 'sql': "SELECT product_id, SUM(sale_amount) FROM sales WHERE sale_date BETWEEN '2022-04-01' AND '2022-06-30' GROUP BY product_id;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT p.category AS category, SUM(s.sale_amount) FROM products p JOIN sales s ON p.product_id = s.product_id WHERE QUARTER(s.sale_date) = 2 AND YEAR(s.sale_date) = 2022 GROUP BY p.category;'
), 0), (Example({'sql_prompt': "Update the 'HR' department's training program end date to '2023-06-30'", 'sql_context': "CREATE TABLE trainings (id SERIAL PRIMARY KEY, department VARCHAR(50), title VARCHAR(100), description TEXT, start_date DATE, end_date DATE); INSERT INTO trainings (department, title, description, start_date, end_date) VALUES ('HR', 'Diversity & Inclusion', 'Promoting inclusivity in the workplace', '2023-01-01', '2023-05-31');", 'sql': "UPDATE trainings SET end_date = '2023-06-30' WHERE department = 'HR';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="UPDATE trainings SET end_date = '2023-06-30' WHERE department = 'HR';"
), 1), (Example({'sql_prompt': 'What is the total number of vaccinations administered in each province?', 'sql_context': "CREATE TABLE Vaccinations (Province VARCHAR(50), Vaccinations INT); INSERT INTO Vaccinations (Province, Vaccinations) VALUES ('Alberta', 1000000), ('British Columbia', 1200000), ('Ontario', 2000000);", 'sql': 'SELECT Province, SUM(Vaccinations) FROM Vaccinations GROUP BY Province;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT Province, SUM(Vaccinations) FROM Vaccinations GROUP BY Province; <|\\end\\>>'
), 1), (Example({'sql_prompt': 'What is the total donation amount for each city?', 'sql_context': 'CREATE TABLE Donors (DonorID INT, Name VARCHAR(50), City VARCHAR(50), State VARCHAR(2), Zip VARCHAR(10), DonationAmount DECIMAL(10,2)); CREATE TABLE Grants (GrantID INT, DonorID INT, NonprofitID INT, GrantAmount DECIMAL(10,2), Date DATE);', 'sql': 'SELECT City, SUM(DonationAmount) FROM Donors D INNER JOIN Grants G ON D.DonorID = G.DonorID GROUP BY City;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT City, SUM(DonationAmount) FROM Donors GROUP BY City;  <--- This SQL query will return the total donation amount for each city. It groups records by 'City' and calculates the sum of 'DonationAmount'. The result set includes one row per unique value in the 'Cities' column, with a corresponding aggregated (summed) DonationAmount."
), 0), (Example({'sql_prompt': 'Identify the most common causes of death, by age group and gender.', 'sql_context': 'CREATE TABLE deaths (id INT, age_group INT, gender VARCHAR, cause VARCHAR);', 'sql': 'SELECT d.age_group, d.gender, d.cause, COUNT(d.id) AS num_deaths FROM deaths d GROUP BY d.age_group, d.gender, d.cause ORDER BY num_deaths DESC;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT d1.* FROM deaths d1 INNER JOIN ( SELECT age_group, gender , MAX(COUNT(*)) AS max_deaths  FROM deaths GROUP BY age_group, gender ) dd ON d1.age_group = dd.age_group AND d1.gender = dd.gender;'
), 0), (Example({'sql_prompt': 'Show the number of articles and videos, by category, that have been created by studios located in Brazil and Japan.', 'sql_context': "CREATE TABLE media_content (id INT, title VARCHAR(255), category VARCHAR(255), studio_location VARCHAR(255)); INSERT INTO media_content (id, title, category, studio_location) VALUES (1, 'Article1', 'Politics', 'Brazil'), (2, 'Video1', 'Sports', 'Japan');", 'sql': "SELECT category, COUNT(*) as total FROM media_content WHERE studio_location IN ('Brazil', 'Japan') GROUP BY category;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT media_content.category AS Category, COUNT(media_content.id) FROM media_content WHERE studio_location IN ('Brazil', 'Japan') GROUP BY media_content.category;"
), 0), (Example({'sql_prompt': 'Find the top 2 car makes with the highest safety ratings, considering the average rating for each make across all models.', 'sql_context': "CREATE TABLE SafetyRatings (id INT, make VARCHAR(20), model VARCHAR(20), rating FLOAT); INSERT INTO SafetyRatings (id, make, model, rating) VALUES (1, 'Tesla', 'Model S', 5.3), (2, 'Tesla', 'Model 3', 5.1), (3, 'Volvo', 'XC60', 5.2), (4, 'Volvo', 'XC90', 5.0), (5, 'Honda', 'Civic', 4.8), (6, 'Honda', 'Accord', 4.9);", 'sql': 'SELECT make, AVG(rating) AS avg_rating FROM SafetyRatings GROUP BY make ORDER BY avg_rating DESC LIMIT 2;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT make, AVG(rating) as avg_rating FROM SafetyRatings GROUP BY make ORDER BY avg_rating DESC LIMIT 2; <|\\end\\>'
), 1), (Example({'sql_prompt': 'Which mines had more than 10 accidents in 2020?', 'sql_context': "CREATE TABLE accident (id INT, mine_id INT, date DATE, description TEXT); INSERT INTO accident (id, mine_id, date, description) VALUES (1, 1, '2020-01-01', 'Equipment malfunction'), (2, 2, '2020-02-01', 'Power outage');", 'sql': "SELECT mine_id FROM accident WHERE date BETWEEN '2020-01-01' AND '2020-12-31' GROUP BY mine_id HAVING COUNT(*) > 10;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT mine_id FROM accident WHERE YEAR(date) = 2020 GROUP BY mine_id HAVING COUNT(*) > 10; <|\\end\\>>'
), 0), (Example({'sql_prompt': 'What are the total copper exports and CO2 emissions from Chile between 2016 and 2018?', 'sql_context': 'CREATE TABLE chile_copper_export (year INT, export_amount FLOAT); INSERT INTO chile_copper_export (year, export_amount) VALUES (2016, 15000.0), (2017, 16000.0), (2018, 17000.0); CREATE TABLE chile_co2_emission (year INT, emission FLOAT); INSERT INTO chile_co2_emission (year, emission) VALUES (2016, 100.0), (2017, 105.0), (2018, 110.0);', 'sql': 'SELECT SUM(chile_copper_export.export_amount), SUM(chile_co2_emission.emission) FROM chile_copper_export INNER JOIN chile_co2_emission ON chile_copper_export.year = chile_co2_emission.year WHERE chile_copper_export.year BETWEEN 2016 AND 2018;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT SUM(export_amount) FROM chile_copper_export WHERE year BETWEEN 2016 AND 2018; SELECT AVG(emission) FROM chile_co2_emission WHERE year BETWEEN 2016 AND 2018;'
), 0), (Example({'sql_prompt': 'Insert a new record into the vessel_performance table with the following details: vessel_id = V003, max_speed = 20 knots, average_speed = 15 knots', 'sql_context': 'vessel_performance(vessel_id, max_speed, average_speed)', 'sql': "INSERT INTO vessel_performance (vessel_id, max_speed, average_speed) VALUES ('V003', 20, 15);"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="INSERT INTO vessel_performance (vessel_id, max_speed, average_speed) VALUES ('V003', 20, 15);"
), 1), (Example({'sql_prompt': 'What is the average water consumption per capita in Tokyo and Seoul for the year 2019?', 'sql_context': "CREATE TABLE asia_population (id INT, city VARCHAR(50), population INT, year INT); INSERT INTO asia_population (id, city, population, year) VALUES (1, 'Tokyo', 9000000, 2019); INSERT INTO asia_population (id, city, population, year) VALUES (2, 'Seoul', 7000000, 2019); CREATE TABLE asia_water_consumption (id INT, city VARCHAR(50), water_consumption FLOAT, year INT); INSERT INTO asia_water_consumption (id, city, water_consumption, year) VALUES (1, 'Tokyo', 1500000000, 2019); INSERT INTO asia_water_consumption (id, city, water_consumption, year) VALUES (2, 'Seoul', 1200000000, 2019);", 'sql': 'SELECT AVG(awc.water_consumption / ap.population) FROM asia_water_consumption awc INNER JOIN asia_population ap ON awc.city = ap.city WHERE awc.year = 2019;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT AVG(asia_water_consumption.water_consumption / asia_population.population) FROM asia_water_consumption INNER JOIN asia_population ON asia_water_consumption.city = asia_population.city WHERE (asia_water_consumption.year, asia_population.year) = (2019, 2019);'
), 1), (Example({'sql_prompt': 'What is the "license_number" for the contractor with "contractor_id" 1001 in the "Contractors" table?', 'sql_context': 'CREATE TABLE Contractors (contractor_id INT, name VARCHAR(255), location VARCHAR(255), license_number VARCHAR(50));', 'sql': 'SELECT license_number FROM Contractors WHERE contractor_id = 1001;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT license_number FROM Contractors WHERE contractor_id = 1001;'
), 1), (Example({'sql_prompt': 'How many tickets were sold for cultural events in Q1 2022?', 'sql_context': "CREATE TABLE Events (EventID INT, EventType VARCHAR(50), StartDate DATE, EndDate DATE); INSERT INTO Events (EventID, EventType, StartDate, EndDate) VALUES (1, 'Dance Performance', '2022-04-01', '2022-04-03'), (2, 'Theater Performance', '2022-01-01', '2022-01-31'), (3, 'Cultural Festival', '2022-01-15', '2022-01-30'); CREATE TABLE Tickets (TicketID INT, EventID INT, Quantity INT); INSERT INTO Tickets (TicketID, EventID, Quantity) VALUES (1, 1, 100), (2, 2, 200), (3, 3, 150);", 'sql': "SELECT SUM(Quantity) FROM Events INNER JOIN Tickets ON Events.EventID = Tickets.EventID WHERE Events.EventType = 'Cultural Festival' AND QUARTER(StartDate) = 1;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT SUM(Quantity) FROM Events INNER JOIN Tickets ON Events.EventID = Tickets.EventID WHERE QUARTER(StartDate) = 1 AND YEAR(StartDate) = 2022;'
), 0), (Example({'sql_prompt': "How many traffic violations were recorded in the year 2019 for both cities 'San Francisco' and 'Los Angeles'?", 'sql_context': "CREATE TABLE traffic_violations (city VARCHAR(20), year INT, violations INT); INSERT INTO traffic_violations (city, year, violations) VALUES ('San Francisco', 2020, 3000), ('San Francisco', 2019, 3500), ('Los Angeles', 2020, 4000), ('Los Angeles', 2019, 4500);", 'sql': "SELECT COUNT(*) FROM traffic_violations WHERE city IN ('San Francisco', 'Los Angeles') AND year = 2019;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT SUM(violations) FROM traffic_violations WHERE city IN ('San Francisco', 'Los Angeles') AND year = 2019; <|\\end\\>>"
), 0), (Example({'sql_prompt': 'What is the total volume of timber harvested in tropical rainforests for the year 2020?', 'sql_context': "CREATE TABLE rainforests (id INT, name VARCHAR(255), country VARCHAR(255), volume DECIMAL(10,2)); INSERT INTO rainforests (id, name, country, volume) VALUES (1, 'Amazon Rainforest', 'Brazil', 50.50), (2, 'Congo Rainforest', 'Congo', 35.25), (3, 'Southeast Asian Rainforest', 'Indonesia', 42.10);", 'sql': "SELECT SUM(volume) FROM rainforests WHERE country IN ('Brazil', 'Congo', 'Indonesia') AND YEAR(harvest_date) = 2020 AND type = 'tropical';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT SUM(volume) FROM rainforests WHERE YEAR(datetime('now','-'||strftime('%Y','now')::text,'year')) = 2020 AND name LIKE '%tropical%';"
), 0), (Example({'sql_prompt': "Delete all records related to the 'Battle Royale' game genre in the 'games' table.", 'sql_context': "CREATE TABLE games (id INT, name VARCHAR(30), genre VARCHAR(20)); INSERT INTO games (id, name, genre) VALUES (1, 'Fortnite', 'Battle Royale'), (2, 'PUBG', 'Battle Royale'), (3, 'Overwatch', 'FPS'), (4, 'CS:GO', 'FPS');", 'sql': "DELETE FROM games WHERE genre = 'Battle Royale';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="DELETE FROM games WHERE genre = 'Battle Royale';"
), 1), (Example({'sql_prompt': "Add a new team with the following details to the 'teams' table: 'Team New York', 'Eastern Conference', 'NBA'", 'sql_context': 'CREATE TABLE teams (team_id INT PRIMARY KEY, team_name VARCHAR(50), conference VARCHAR(50), league VARCHAR(50));', 'sql': "INSERT INTO teams (team_name, conference, league) VALUES ('Team New York', 'Eastern Conference', 'NBA');"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="INSERT INTO teams (team_name, conference, league) VALUES ('Team New York', 'Eastern Conference', 'NBA');  < | endcode > ;   UPDATE teams SET team_id = NULL WHERE NOT EXISTS (SELECT * FROM teams t2 WHERE t.team_id = t2.team_id);"
), 0), (Example({'sql_prompt': 'What is the name and address of the public library with the highest circulation in the city of Chicago?', 'sql_context': "CREATE TABLE public_libraries (name VARCHAR(255), city VARCHAR(255), address VARCHAR(255), circulation INT); INSERT INTO public_libraries (name, city, address, circulation) VALUES ('Chicago Public Library', 'Chicago', '400 S State St', 3000000); INSERT INTO public_libraries (name, city, address, circulation) VALUES ('Harold Washington Library Center', 'Chicago', '400 S State St', 5000000);", 'sql': "SELECT name, address FROM public_libraries WHERE city = 'Chicago' AND circulation = (SELECT MAX(circulation) FROM public_libraries WHERE city = 'Chicago');"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT name, address FROM public_libraries WHERE city = 'Chicago' AND circulation = (SELECT MAX(circulation) FROM public_libraries WHERE city = 'Chicago'); <|\\ end |>"
), 1), (Example({'sql_prompt': "Add a new soccer match to the 'matches' table with the given details.", 'sql_context': 'CREATE TABLE matches (match_id INT, home_team TEXT, away_team TEXT, home_goals INT, away_goals INT, match_date DATE);', 'sql': "INSERT INTO matches (match_id, home_team, away_team, home_goals, away_goals, match_date) VALUES (1, 'Barcelona', 'Real Madrid', 3, 2, '2022-10-02');"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="INSERT INTO matches VALUES (1234567890,'Barcelona','Real Madrid',3,2,'2023-06-15');"
), 0), (Example({'sql_prompt': 'Which element had the lowest production in 2019?', 'sql_context': "CREATE TABLE production (year INT, element VARCHAR(10), quantity INT); INSERT INTO production (year, element, quantity) VALUES (2015, 'Neodymium', 1200), (2016, 'Neodymium', 1400), (2017, 'Neodymium', 1500), (2018, 'Neodymium', 1700), (2019, 'Neodymium', 1800), (2020, 'Neodymium', 2000), (2021, 'Neodymium', 2200), (2015, 'Praseodymium', 1100), (2016, 'Praseodymium', 1300), (2017, 'Praseodymium', 1400), (2018, 'Praseodymium', 1600), (2019, 'Praseodymium', 1500), (2020, 'Praseodymium', 1900), (2021, 'Praseodymium', 2100);", 'sql': 'SELECT element, MIN(quantity) FROM production WHERE year = 2019 GROUP BY element;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT element FROM production WHERE year = 2019 AND quantity < ALL(SELECT quantity FROM production WHERE year != 2019) ORDER BY quantity LIMIT 1;'
), 0), (Example({'sql_prompt': "What is the average age of artists ('artist_demographics' table) by nationality?", 'sql_context': 'CREATE TABLE artist_demographics (id INT, name VARCHAR(50), age INT, gender VARCHAR(10), nationality VARCHAR(50));', 'sql': 'SELECT nationality, AVG(age) FROM artist_demographics GROUP BY nationality;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT AVG(age) as avg_age, nationality FROM artist_demographics GROUP BY nationality; <|\\end\\> |'
), 0), (Example({'sql_prompt': 'Show the total energy efficiency improvement (in %) for each energy policy in India since 2015', 'sql_context': "CREATE TABLE india_energy_policies (id INT, policy_name VARCHAR(100), policy_type VARCHAR(50), enactment_date DATE, improvement_percentage FLOAT); INSERT INTO india_energy_policies (id, policy_name, policy_type, enactment_date, improvement_percentage) VALUES (1, 'Policy 1', 'Renewable Energy', '2015-07-14', 5.0), (2, 'Policy 2', 'Energy Efficiency', '2017-02-28', 3.5), (3, 'Policy 3', 'Carbon Pricing', '2018-11-11', 7.0);", 'sql': "SELECT policy_name, improvement_percentage FROM india_energy_policies WHERE enactment_date <= '2015-01-01' AND country = 'India';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT policy_type, SUM(improvement_percentage) FROM india_energy_policies WHERE enactment_date >= '2015-01-01' GROUP BY policy_type;"
), 0), (Example({'sql_prompt': "Which vehicle type in the 'Bus' service had the most maintenance incidents in the last month?", 'sql_context': "CREATE TABLE MaintenanceIncidents (IncidentID INT, VehicleID INT, VehicleType VARCHAR(50), IncidentDate DATE); INSERT INTO MaintenanceIncidents (IncidentID, VehicleID, VehicleType, IncidentDate) VALUES (1, 1, 'MiniBus', '2022-02-01'), (2, 1, 'MiniBus', '2022-02-03'), (3, 2, 'Coach', '2022-02-02'), (4, 3, 'MidiBus', '2022-02-04'), (5, 4, 'MiniBus', '2022-02-05'), (6, 4, 'MiniBus', '2022-02-06'), (7, 5, 'MidiBus', '2022-02-07'), (8, 5, 'MidiBus', '2022-02-08'), (9, 1, 'MiniBus', '2022-02-09');", 'sql': "SELECT v.VehicleType, COUNT(*) as MaintenanceIncidents FROM Vehicles v JOIN MaintenanceIncidents mi ON v.VehicleID = mi.VehicleID WHERE v.Service = 'Bus' AND mi.IncidentDate >= DATEADD(month, -1, GETDATE()) GROUP BY v.VehicleType ORDER BY MaintenanceIncidents DESC;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT VehicleType FROM MaintenanceIncidents WHERE IncidentDate >= DATEADD(MONTH, -1, GETDATE()) GROUP BY VehicleType ORDER BY COUNT(*) DESC LIMIT 1; < | end | >'
), 0), (Example({'sql_prompt': 'How many citizen feedback records were recorded for each city in 2020?', 'sql_context': "CREATE TABLE Feedback (CityName VARCHAR(50), FeedbackID INT, Date DATE); INSERT INTO Feedback (CityName, FeedbackID, Date) VALUES ('CityA', 1, '2020-01-01'), ('CityA', 2, '2020-02-01'), ('CityB', 3, '2020-01-01'), ('CityB', 4, '2020-03-01'), ('CityC', 5, '2020-01-01');", 'sql': "SELECT CityName, COUNT(*) FROM Feedback WHERE Date BETWEEN '2020-01-01' AND '2020-12-31' GROUP BY CityName;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT CityName, COUNT(*) FROM Feedback WHERE YEAR(Date) = 2020 GROUP BY CityName; <|\\end\\>'
), 0), (Example({'sql_prompt': 'What is the average delivery time for each route in the delivery database?', 'sql_context': "CREATE TABLE delivery (route VARCHAR(20), delivery_time INT); INSERT INTO delivery (route, delivery_time) VALUES ('Route1', 30), ('Route2', 40), ('Route3', 50);", 'sql': 'SELECT route, AVG(delivery_time) FROM delivery GROUP BY route;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT route, AVG(delivery_time) FROM delivery GROUP BY route; <|\\end\\>>'
), 1), (Example({'sql_prompt': 'What is the total income of clients in Canada who are socially responsible investors?', 'sql_context': "CREATE TABLE clients (client_id INT, name VARCHAR(100), age INT, country VARCHAR(50), income DECIMAL(10,2), is_socially_responsible_investor BOOLEAN);  INSERT INTO clients (client_id, name, age, country, income, is_socially_responsible_investor) VALUES (12, 'Emily Chen', 40, 'Canada', 80000, true);", 'sql': "SELECT SUM(income) FROM clients WHERE country = 'Canada' AND is_socially_responsible_investor = true;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT SUM(c.income) FROM clients c WHERE c.country = 'Canada' AND c.is_socially_responsible_investor = true;"
), 1), (Example({'sql_prompt': 'List the top 3 recipient countries with the highest total donation amounts in the past year?', 'sql_context': 'CREATE TABLE Donations (DonationID INT, DonationDate DATE, RecipientCountry VARCHAR(50), DonationAmount NUMERIC(15,2));', 'sql': 'SELECT RecipientCountry, SUM(DonationAmount) as TotalDonations FROM Donations WHERE DonationDate >= DATEADD(year, -1, CURRENT_TIMESTAMP) GROUP BY RecipientCountry ORDER BY TotalDonations DESC LIMIT 3;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT r.RecipientCountry, SUM(d.DonationAmount) as TotalReceived FROM (SELECT ROW_NUMBER() OVER (PARTITION BY RecipientCountry ORDER BY DonationDate DESC) AS Ranking, RecipientCountry FROM Donations WHERE DonationDate >= DATEADD(year, -1, CURRENTDATE)) r JOIN Donations d ON r.RecipientCountry = d.RecipientCountry GROUP BY r.RecipientCountry HAVING COUNT(*) <= 3 ORDER BY TotalReceived DESC;'
), 0), (Example({'sql_prompt': "What is the highest energy rating for properties in the 'green_buildings' table?", 'sql_context': 'CREATE TABLE green_buildings (id INT, square_footage FLOAT, energy_rating INT);', 'sql': 'SELECT MAX(energy_rating) FROM green_buildings;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT MAX(energy_rating) FROM green_buildings;  <|\\cplus+>'
), 1), (Example({'sql_prompt': 'What is the total revenue, by platform, for the last quarter?', 'sql_context': 'CREATE TABLE revenue_platform (revenue_id INT, platform VARCHAR(255), revenue DECIMAL);  CREATE VIEW quarterly_revenue AS SELECT platform, SUM(revenue) as total_revenue FROM revenue_platform WHERE revenue_date >= DATEADD(quarter, -1, CURRENT_DATE) GROUP BY platform;', 'sql': 'SELECT * FROM quarterly_revenue;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT * FROM quarterly_revenue;'
), 1), (Example({'sql_prompt': 'What is the average number of articles published per day?', 'sql_context': 'CREATE TABLE news_articles (article_id INT PRIMARY KEY, title TEXT, topic TEXT, author TEXT, publication_date DATE);', 'sql': 'SELECT AVG(1.0 * COUNT(*) / COUNT(DISTINCT publication_date)) FROM news_articles;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT AVG(COUNT(*)) FROM news_articles GROUP BY publication_date;  <--- This SQL query calculates the average number of articles published per day. It first counts the number of articles for each date and then averages those counts. However, this is not a valid SQL syntax as it uses COUNT(*) inside AVG(). A correct approach would be: SELECT EXTRACT(DAY FROM publication_date) AS Day, AVG(COUNT(*)) OVER (PARTITION BY EXTRACT(DAY FROM publication_date))  FROM news_articles GROUP BY Day;'
), 0), (Example({'sql_prompt': 'What is the total billing amount for cases won by the top 3 attorneys?', 'sql_context': 'CREATE TABLE attorneys (id INT, name VARCHAR(50), total_billing_amount DECIMAL(10,2)); CREATE TABLE cases (id INT, attorney_id INT, case_outcome VARCHAR(10));', 'sql': "SELECT SUM(total_billing_amount) FROM (SELECT attorney_id, SUM(billing_amount) AS total_billing_amount FROM cases JOIN attorneys ON cases.attorney_id = attorneys.id WHERE case_outcome = 'won' GROUP BY attorney_id ORDER BY total_billing_amount DESC LIMIT 3);"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT SUM(total_billing_amount) FROM (SELECT total_billing_amount FROM attorneys ORDER BY total_billing_amount DESC LIMIT 3); SELECT * FROM cases WHERE case_outcome = 'won'; < EXCEPTION WHEN OTHERS THEN RAISE NOTICE 'Error in SQL query: %', SQLERRM; END;"
), 0), (Example({'sql_prompt': "Calculate the number of unique clients living in 'Sydney' with transactions during the month of 'February'.", 'sql_context': "CREATE TABLE clients (id INT, name TEXT, city TEXT); CREATE TABLE transactions (client_id INT, transaction_time TIMESTAMP); INSERT INTO clients (id, name, city) VALUES (1, 'Ivan', 'Sydney'), (2, 'Judy', 'Sydney'), (3, 'Ken', 'Melbourne'); INSERT INTO transactions (client_id, transaction_time) VALUES (1, '2022-02-05 11:00:00'), (1, '2022-03-03 16:30:00'), (2, '2022-02-12 09:45:00');", 'sql': "SELECT COUNT(DISTINCT clients.id) FROM clients JOIN transactions ON clients.id = transactions.client_id WHERE clients.city = 'Sydney' AND DATE_TRUNC('month', transactions.transaction_time) = '2022-02-01';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT COUNT(DISTINCT clients.id) FROM clients INNER JOIN transactions ON clients.id = transactions.client_id WHERE city = 'Sydney' AND EXTRACT(MONTH FROM transaction_time) = 2;"
), 0), (Example({'sql_prompt': 'What is the average funding amount for companies founded by women?', 'sql_context': "CREATE TABLE companies (id INT, name TEXT, founded_date DATE, founder_gender TEXT); INSERT INTO companies (id, name, founded_date, founder_gender) VALUES (1, 'Acme Inc', '2010-01-01', 'female'); INSERT INTO companies (id, name, founded_date, founder_gender) VALUES (2, 'Beta Corp', '2015-05-15', 'male');", 'sql': "SELECT AVG(funding_amount) FROM investments JOIN companies ON investments.company_id = companies.id WHERE companies.founder_gender = 'female';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT AVG(funding_amount) FROM funding INNER JOIN companies ON funding.company_id = companies.id WHERE founder_gender = 'female'; <|\\end\\> |"
), 0), (Example({'sql_prompt': 'What is the total number of electric vehicle sales in each country?', 'sql_context': "CREATE TABLE Country (country_id INT, country_name VARCHAR(50)); INSERT INTO Country (country_id, country_name) VALUES (1, 'USA'); CREATE TABLE EV_Sales (sale_id INT, model VARCHAR(50), buyer_country INT, sale_date DATE); INSERT INTO EV_Sales (sale_id, model, buyer_country, sale_date) VALUES (1, 'Tesla Model 3', 1, '2022-08-15');", 'sql': 'SELECT c.country_name, COUNT(es.sale_id) as "Total Sales" FROM Country c JOIN EV_Sales es ON c.country_id = es.buyer_country GROUP BY c.country_name;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT c.country_name AS country, COUNT(DISTINCT es.sale_id) FROM Country c JOIN EV_Sales es ON c.country_id = es.buyer_country GROUP BY 1;'
), 0), (Example({'sql_prompt': 'What is the total revenue for the soccer team from ticket sales in London and Paris?', 'sql_context': "CREATE TABLE tickets (ticket_id INT, game_id INT, quantity INT, price DECIMAL(5,2)); INSERT INTO tickets VALUES (1, 1, 50, 25.99); INSERT INTO tickets VALUES (2, 2, 30, 19.99); CREATE TABLE games (game_id INT, team VARCHAR(20), location VARCHAR(20), price DECIMAL(5,2)); INSERT INTO games VALUES (1, 'Arsenal', 'London', 50.00); INSERT INTO games VALUES (2, 'PSG', 'Paris', 40.00);", 'sql': "SELECT SUM(tickets.quantity * games.price) FROM tickets INNER JOIN games ON tickets.game_id = games.game_id WHERE games.location IN ('London', 'Paris');"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT SUM(tickets.quantity * tickets.price) FROM tickets INNER JOIN games ON tickets.game_id = games.game_id WHERE (games.location = 'London' OR games.location = 'Paris') AND (teams IN ('Arsenal', 'PSG'));"
), 0), (Example({'sql_prompt': 'Insert new well record for Brazil with 4000m depth.', 'sql_context': 'CREATE TABLE wells (id INT, location VARCHAR(20), depth FLOAT);', 'sql': "INSERT INTO wells (id, location, depth) VALUES (1, 'Brazil', 4000);"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="INSERT INTO wells VALUES (-1, 'Brazil', 4000) WHERE NOT EXISTS (SELECT * FROM wells WHERE id = -1 AND location = 'Brazil'); UPDATE wells SET depth = 4000 WHERE id IN (-1); INSERT INTO wells SELECT NULL;"
), 0), (Example({'sql_prompt': 'What is the name of the smart contract associated with the ID 5?', 'sql_context': "CREATE TABLE smart_contracts (id INT, name VARCHAR(255)); INSERT INTO smart_contracts (id, name) VALUES (5, 'Compound');", 'sql': 'SELECT name FROM smart_contracts WHERE id = 5;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT name FROM smart_contracts WHERE id = 5;'
), 1), (Example({'sql_prompt': 'What is the minimum funding amount received by a company founded by a person with a disability in the education industry?', 'sql_context': "CREATE TABLE Companies (id INT, name TEXT, founders TEXT, industry TEXT); INSERT INTO Companies (id, name, founders, industry) VALUES (1, 'EdLift', 'Disabled, Male', 'Education'); INSERT INTO Companies (id, name, founders, industry) VALUES (2, 'TechBoost', 'Asian, Male', 'Technology'); CREATE TABLE Investment_Rounds (company_id INT, funding_amount INT, round_number INT); INSERT INTO Investment_Rounds (company_id, funding_amount, round_number) VALUES (1, 500000, 1); INSERT INTO Investment_Rounds (company_id, funding_amount, round_number) VALUES (1, 750000, 2); INSERT INTO Investment_Rounds (company_id, funding_amount, round_number) VALUES (2, 3000000, 1);", 'sql': "SELECT MIN(r.funding_amount) FROM Companies c JOIN Investment_Rounds r ON c.id = r.company_id WHERE c.founders LIKE '%Disabled%' AND c.industry = 'Education';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT MIN(r.funding_amount) FROM Companies c JOIN Investment_Rounds r ON c.id = r.company_id WHERE c.founders LIKE '%Disabled%' AND c.industry = 'Education'; <|\\end\\>>"
), 1), (Example({'sql_prompt': "Update the 'crops' table to set the 'irrigation' column to 'Drip' for all entries where the crop_name is 'Tomato'.", 'sql_context': "CREATE TABLE crops (id INT, crop_name VARCHAR(255), irrigation VARCHAR(255)); INSERT INTO crops (id, crop_name, irrigation) VALUES (1, 'Tomato', 'Sprinkler'), (2, 'Potato', 'Furrow'), (3, 'Corn', 'None');", 'sql': "UPDATE crops SET irrigation = 'Drip' WHERE crop_name = 'Tomato';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="UPDATE crops SET irrigation = 'Drip' WHERE crop_name = 'Tomato';"
), 1), (Example({'sql_prompt': 'List all art exhibitions with their corresponding funding sources and amounts.', 'sql_context': "CREATE TABLE art_exhibitions (exhibition_id INT, exhibition_name VARCHAR(50)); CREATE TABLE funding_sources (source_id INT, source_name VARCHAR(50)); CREATE TABLE exhibition_funding (exhibition_id INT, source_id INT, amount DECIMAL(5,2)); INSERT INTO art_exhibitions (exhibition_id, exhibition_name) VALUES (1, 'Impressionist Art'), (2, 'Contemporary Sculpture'); INSERT INTO funding_sources (source_id, source_name) VALUES (1, 'National Endowment for the Arts'), (2, 'Private Donors'), (3, 'Corporate Sponsors'); INSERT INTO exhibition_funding (exhibition_id, source_id, amount) VALUES (1, 1, 5000), (1, 2, 10000), (1, 3, 20000), (2, 2, 7000), (2, 3, 15000);", 'sql': 'SELECT e.exhibition_name, f.source_name, ef.amount FROM art_exhibitions e INNER JOIN exhibition_funding ef ON e.exhibition_id = ef.exhibition_id INNER JOIN funding_sources f ON ef.source_id = f.source_id;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT e.exhibition_name as exhibition_names , f.source_id , fs.source_name as source_names , SUM(ef.amount) as total_funding FROM art_exhibitions e JOIN exhibition_funding ef ON e.exhibition_id = ef.exhibition AND funding SOURCE sourcing f INNER JOIN sources fs ON f.source_id = fs.source GROUP BY e, source ORDER BY SUM(ef.amount) DESC;'
), 0), (Example({'sql_prompt': 'What is the difference in the number of mental health facilities between rural and urban areas?', 'sql_context': "CREATE TABLE mental_health_facilities (id INT, name VARCHAR(50), area VARCHAR(10)); INSERT INTO mental_health_facilities (id, name, area) VALUES (1, 'Facility A', 'Rural'), (2, 'Facility B', 'Urban'), (3, 'Facility C', 'Rural'), (4, 'Facility D', 'Urban');", 'sql': "SELECT SUM(CASE WHEN area = 'Rural' THEN 1 ELSE 0 END) - SUM(CASE WHEN area = 'Urban' THEN 1 ELSE 0 END) AS difference FROM mental_health_facilities;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT area as location_type, COUNT(*) as num_facilities FROM mental_health_facilities GROUP BY area HAVING SUM(CASE WHEN area = 'Rural' THEN 1 ELSE 0 END) > 2 AND SUM(CASE WHEN area = 'Urban' THEN 1 ELSE 0 END) < -2;"
), 0), (Example({'sql_prompt': 'What is the total cost of vegetarian meals served in the month of September 2021?', 'sql_context': "CREATE TABLE Menu (menu_id INT, menu_name VARCHAR(20), is_vegetarian BOOLEAN); INSERT INTO Menu (menu_id, menu_name, is_vegetarian) VALUES (1, 'Breakfast', TRUE), (2, 'Lunch', FALSE), (3, 'Dinner', FALSE); CREATE TABLE Menu_Orders (order_id INT, menu_id INT, order_date DATE); INSERT INTO Menu_Orders (order_id, menu_id, order_date) VALUES (1, 1, '2021-09-01'), (2, 2, '2021-09-02'), (3, 1, '2021-09-03'), (4, 3, '2021-09-04'); CREATE TABLE Inventory (inventory_id INT, menu_id INT, inventory_cost FLOAT); INSERT INTO Inventory (inventory_id, menu_id, inventory_cost) VALUES (1, 1, 5.0), (2, 2, 3.5), (3, 1, 8.0), (4, 3, 7.0);", 'sql': 'SELECT SUM(Inventory.inventory_cost) FROM Inventory INNER JOIN Menu ON Inventory.menu_id = Menu.menu_id INNER JOIN Menu_Orders ON Inventory.menu_id = Menu_Orders.menu_id WHERE Menu.is_vegetarian = TRUE AND MONTH(Menu_Orders.order_date) = 9 AND YEAR(Menu_Orders.order_date) = 2021;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT SUM(Inventory_cost) FROM Inventory INNER JOIN Menu ON Inventory.menu_id = Menu.menu_id WHERE is_vegetarian = TRUE AND EXTRACT(MONTH FROM order_date) = 9; <|\\end\\>'
), 0), (Example({'sql_prompt': "What is the median age of artifacts in the 'Prehistoric_Artifacts' table?", 'sql_context': "CREATE TABLE Prehistoric_Artifacts (id INT, artifact_name VARCHAR(50), age INT); INSERT INTO Prehistoric_Artifacts (id, artifact_name, age) VALUES (1, 'Hand Axe', 25000), (2, 'Stone Spear', 20000), (3, 'Flint Knife', 30000);", 'sql': 'SELECT AVG(age) FROM (SELECT artifact_name, age FROM Prehistoric_Artifacts ORDER BY age) AS subquery GROUP BY artifact_name;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT AVG(age) as median_age FROM Prehistoric_Artifacts WHERE ROW_NUMBER() OVER (ORDER BY age ASC) IN ((COUNT(*) + 1)/2, COUNT(*)/2); < | end | >'
), 0), (Example({'sql_prompt': 'Which regions have the most successful food justice initiatives?', 'sql_context': "CREATE TABLE initiatives (region VARCHAR(255), success_score INT); INSERT INTO initiatives (region, success_score) VALUES ('Region4', 82), ('Region5', 91), ('Region6', 78); CREATE VIEW food_justice_initiatives AS SELECT * FROM initiatives WHERE success_score > 75;", 'sql': 'SELECT region FROM food_justice_initiatives'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT region, AVG(success_score) as avg_success FROM (food_justice_initiatives INNER JOIN initiatives ON food_justice_initiatives.region = initiatives.region AND success_score > 75 GROUP BY region HAVING COUNT(*) >= 2);'
), 0), (Example({'sql_prompt': 'How many wells were drilled in the Eagle Ford Shale and Bakken Formation?', 'sql_context': "CREATE TABLE wells (id INT, region VARCHAR(255), well_type VARCHAR(255), num_drilled INT); INSERT INTO wells (id, region, well_type, num_drilled) VALUES (1, 'Eagle Ford Shale', 'Oil', 2000), (2, 'Eagle Ford Shale', 'Gas', 1500), (3, 'Bakken Formation', 'Oil', 1000), (4, 'Bakken Formation', 'Gas', 1200);", 'sql': "SELECT SUM(num_drilled) as total_wells FROM wells WHERE region IN ('Eagle Ford Shale', 'Bakken Formation');"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT SUM(num_drilled) FROM wells WHERE region IN ('Eagle Ford Shale', 'Bakken Formation');"
), 0), (Example({'sql_prompt': "Get the number of warehouses in 'City Y' with a capacity greater than 100,000?", 'sql_context': "CREATE TABLE Warehouses (id INT, name VARCHAR(255), city VARCHAR(255), capacity INT); INSERT INTO Warehouses (id, name, city, capacity) VALUES (1, 'Warehouse A', 'City A', 100000); INSERT INTO Warehouses (id, name, city, capacity) VALUES (2, 'Warehouse B', 'City B', 120000); INSERT INTO Warehouses (id, name, city, capacity) VALUES (3, 'Warehouse C', 'City C', 155000); INSERT INTO Warehouses (id, name, city, capacity) VALUES (4, 'Warehouse D', 'City Y', 180000);", 'sql': "SELECT COUNT(id) FROM Warehouses WHERE city = 'City Y' AND capacity > 100000;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT COUNT(*) FROM Warehouses WHERE city = 'City Y' AND capacity > 10000; <|\\end\\> |"
), 0), (Example({'sql_prompt': "Delete all shipments from 'ABC' warehouse", 'sql_context': "CREATE TABLE warehouse (id INT PRIMARY KEY, name VARCHAR(255)); INSERT INTO warehouse (id, name) VALUES (1, 'ABC'), (2, 'DEF'); CREATE TABLE shipments (id INT PRIMARY KEY, warehouse_id INT, FOREIGN KEY (warehouse_id) REFERENCES warehouse(id)); INSERT INTO shipments (id, warehouse_id) VALUES (1, 1), (2, 2);", 'sql': "DELETE FROM shipments WHERE warehouse_id = (SELECT id FROM warehouse WHERE name = 'ABC');"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='DELETE FROM shipments WHERE warehouse_id = 1;'
), 0), (Example({'sql_prompt': 'What is the average number of comments for posts in the "social_media_posts" table?', 'sql_context': 'CREATE TABLE social_media_posts (post_id INT, comments_count INT); INSERT INTO social_media_posts (post_id, comments_count) VALUES (1, 50), (2, 75), (3, 30), (4, 60), (5, 45);', 'sql': 'SELECT AVG(comments_count) FROM social_media_posts;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT AVG(comments_count) FROM social_media_posts;'
), 1), (Example({'sql_prompt': 'Show the number of hotels that have adopted AI technology in the city of San Francisco', 'sql_context': 'CREATE TABLE hotels (hotel_id INT, hotel_name TEXT, city TEXT, has_adopted_ai BOOLEAN);', 'sql': "SELECT COUNT(*) FROM hotels WHERE city = 'San Francisco' AND has_adopted_ai = TRUE;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT COUNT(*) FROM hotels WHERE city = 'San Francisco' AND has_adopted_ai = TRUE; <|\\end\\>>"
), 1), (Example({'sql_prompt': "Retrieve the names of all marine species with a conservation status of 'Critically Endangered'", 'sql_context': 'CREATE TABLE red_list_data (id INT, species TEXT, conservation_status TEXT);', 'sql': "SELECT species FROM red_list_data WHERE conservation_status = 'Critically Endangered';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT context.species FROM oceanography.red_list_data AS context WHERE context.conservation_status = 'Critically Endangered';"
), 0), (Example({'sql_prompt': 'Show the number of workplace safety incidents per month, for the past year, for workplaces with a union.', 'sql_context': "CREATE TABLE safety_incidents (id INT, workplace INT, incident_date DATE); INSERT INTO safety_incidents (id, workplace, incident_date) VALUES (1, 1, '2022-06-15'); INSERT INTO safety_incidents (id, workplace, incident_date) VALUES (2, 2, '2022-07-01'); INSERT INTO safety_incidents (id, workplace, incident_date) VALUES (3, 1, '2022-08-10');", 'sql': "SELECT DATE_FORMAT(incident_date, '%Y-%m') as month, COUNT(*) as num_incidents FROM safety_incidents si INNER JOIN workplaces w ON si.workplace = w.id WHERE w.union_affiliation IS NOT NULL GROUP BY month ORDER BY STR_TO_DATE(month, '%Y-%m');"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT DATEPART(YEAR, si.incident_date) as year, DATEPART(MONTH, si.incident_date) as month, COUNT(*) as incidents FROM safety_incidents si JOIN workplaces w ON si.workplace = w.id WHERE w.has_union = true AND incident_date >= DATEADD(YEAR, -1, GETDATE()) GROUP BY year, month;'
), 0), (Example({'sql_prompt': 'How many policyholders from Brazil have an annual income greater than $50,000, and what is the average claim amount for this group?', 'sql_context': "CREATE TABLE Policyholders (PolicyholderID INT, Country VARCHAR(50), AnnualIncome DECIMAL(10, 2)); INSERT INTO Policyholders VALUES (1, 'Brazil', 60000); INSERT INTO Policyholders VALUES (2, 'Brazil', 40000); INSERT INTO Policyholders VALUES (3, 'Brazil', 70000); INSERT INTO Policyholders VALUES (4, 'Brazil', 35000); CREATE TABLE Claims (PolicyholderID INT, ClaimAmount DECIMAL(10, 2)); INSERT INTO Claims VALUES (1, 5000); INSERT INTO Claims VALUES (2, 3000); INSERT INTO Claims VALUES (3, 8000);", 'sql': "SELECT COUNT(*) AS HighIncomePolicyholders, AVG(ClaimAmount) AS AvgClaimAmount FROM Claims JOIN Policyholders ON Claims.PolicyholderID = Policyholders.PolicyholderID WHERE Policyholders.Country = 'Brazil' AND Policyholders.AnnualIncome > 50000;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT COUNT(DISTINCT Policyholders.PolicyholderID), AVG(Claims.ClaimAmount) FROM Policyholders INNER JOIN Claims ON Policyholders.PolicyholderID = Claims.PolicyholderID WHERE Country = 'Brazil' AND AnnualIncome > 50000;"
), 0), (Example({'sql_prompt': 'What is the average age of players who play "Racing Simulator 2022"?', 'sql_context': "CREATE TABLE Players (PlayerID INT, PlayerName VARCHAR(50), Game VARCHAR(50), Age INT); INSERT INTO Players (PlayerID, PlayerName, Game, Age) VALUES (1, 'John Doe', 'Racing Simulator 2022', 25), (2, 'Jane Smith', 'Racing Simulator 2022', 30), (3, 'Alice Johnson', 'Shooter Game 2022', 22);", 'sql': "SELECT AVG(Age) FROM Players WHERE Game = 'Racing Simulator 2022';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT AVG(Age) FROM Players WHERE Game = 'Racing Simulator 2022'; <|\\end\\> |"
), 1), (Example({'sql_prompt': "What is the difference in the total quantity of products sold in the 'apparel' category between this year and last year?", 'sql_context': "CREATE TABLE sales(sale_id INT, product_category TEXT, year INT, quantity INT); INSERT INTO sales(sale_id, product_category, year, quantity) VALUES (1, 'Apparel', 2021, 200), (2, 'Apparel', 2021, 300), (3, 'Apparel', 2022, 400), (4, 'Apparel', 2022, 500), (5, 'Electronics', 2021, 100), (6, 'Electronics', 2022, 120);", 'sql': "SELECT product_category, (SUM(CASE WHEN year = 2022 THEN quantity ELSE 0 END) - SUM(CASE WHEN year = 2021 THEN quantity ELSE 0 END)) as quantity_diff FROM sales WHERE product_category = 'Apparel' GROUP BY product_category;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT SUM(CASE WHEN year = YEAR(CURRENT_DATE) THEN quantity ELSE -quantity END) FROM sales WHERE product_category = 'Apparel';"
), 0), (Example({'sql_prompt': 'What was the average donation amount in each city in H2 2021?', 'sql_context': "CREATE TABLE Donations (DonationID int, City varchar(50), AmountDonated numeric(10,2), DonationDate date); INSERT INTO Donations (DonationID, City, AmountDonated, DonationDate) VALUES (1, 'Los Angeles', 100.00, '2021-07-01'), (2, 'Houston', 150.00, '2021-12-31');", 'sql': "SELECT City, AVG(AmountDonated) as AvgDonation FROM Donations WHERE DonationDate BETWEEN '2021-07-01' AND '2021-12-31' GROUP BY City;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT City, AVG(AmountDonated) as Avg_Donation FROM Donations WHERE YEAR(DonationDate) = 2021 AND MONTH(DonationDate) > 6 GROUP BY City;'
), 0), (Example({'sql_prompt': 'What is the total number of donations and the total donation amount for donations made in the month of June?', 'sql_context': "CREATE TABLE Donations (id INT, donor_name TEXT, donation_amount FLOAT, donation_date DATE, state TEXT); INSERT INTO Donations (id, donor_name, donation_amount, donation_date, state) VALUES (1, 'John Doe', 250, '2022-06-01', 'NY'), (2, 'Jane Smith', 125, '2022-07-02', 'CA');", 'sql': 'SELECT COUNT(*), SUM(donation_amount) FROM Donations WHERE EXTRACT(MONTH FROM donation_date) = 6;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT COUNT(*) as total_donations, SUM(donation_amount) as total_donated FROM Donations WHERE EXTRACT(MONTH FROM donation_date) = 6; <|\\end\\>'
), 0), (Example({'sql_prompt': 'What is the change in yield for each crop over time, for a specific farm?', 'sql_context': "CREATE TABLE farming (id INT, name TEXT, location TEXT, crop TEXT, yield INT, year INT); INSERT INTO farming VALUES (1, 'Smith Farm', 'Colorado', 'Corn', 120, 2020), (2, 'Brown Farm', 'Nebraska', 'Soybeans', 45, 2020), (3, 'Jones Farm', 'Iowa', 'Wheat', 80, 2020), (1, 'Smith Farm', 'Colorado', 'Corn', 130, 2021), (2, 'Brown Farm', 'Nebraska', 'Soybeans', 50, 2021), (3, 'Jones Farm', 'Iowa', 'Wheat', 85, 2021);", 'sql': "SELECT crop, (yield - LAG(yield) OVER (PARTITION BY crop, name ORDER BY year)) as yield_change FROM farming WHERE name = 'Smith Farm';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT crop_name as "Crop", yearly_yield.year as "Year", LAG(yearly_yield.total) OVER (PARTITION BY NULL ORDER BY yearly_yield.year ASC ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS previous_value, total FROM farming JOIN (SELECT crop as crop_name, SUM(yield) as total, EXTRACT(YEAR FROM datetime(\'now\', \'-\' || location)) as year FROM farming GROUP BY crop ORDER BY year DESC LIMIT 1 OFFSET 2) AS latest_yearly_crop ON true JOIN (SELECT c'
), 0), (Example({'sql_prompt': "Find the post with the third highest number of likes in the 'sports' category.", 'sql_context': "CREATE TABLE posts (id INT, category VARCHAR(20), likes INT); INSERT INTO posts (id, category, likes) VALUES (1, 'music', 10), (2, 'music', 15), (3, 'sports', 20), (4, 'sports', 30), (5, 'sports', 40);", 'sql': "SELECT * FROM (SELECT *, ROW_NUMBER() OVER (PARTITION BY category ORDER BY likes DESC) as rn FROM posts) t WHERE t.rn = 3 AND t.category = 'sports';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT * FROM posts WHERE category = 'sports' ORDER BY likes DESC LIMIT 1 OFFSET 2; <|\\end\\>"
), 0), (Example({'sql_prompt': 'What is the total amount spent on each program type in the year 2019, sorted by the total amount spent in descending order?', 'sql_context': 'CREATE TABLE Programs (ProgramType TEXT, Budget DECIMAL(10,2)); CREATE TABLE Spending (SpendingID INT, ProgramType TEXT, SpendingDate DATE, Amount DECIMAL(10,2));', 'sql': 'SELECT P.ProgramType, SUM(S.Amount) as TotalSpending  FROM Spending S JOIN Programs P ON S.ProgramType = P.ProgramType WHERE YEAR(SpendingDate) = 2019 GROUP BY P.ProgramType ORDER BY TotalSpending DESC;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT p.ProgramType, SUM(s.Amount) as Total_Spent FROM Programs p INNER JOIN Spending s ON p.ProgramType = s.ProgramType WHERE YEAR(s.SpendingDate) = 2019 GROUP BY p.ProgramType ORDER BY Total_Spent DESC;'
), 1), (Example({'sql_prompt': 'Find the total number of attendees at events in Paris and Rome from 2018 to 2020, excluding repeating attendees.', 'sql_context': "CREATE TABLE EventAttendance (attendee_id INT, event_city VARCHAR(50), event_year INT, attended INT); INSERT INTO EventAttendance (attendee_id, event_city, event_year, attended) VALUES (1, 'Paris', 2018, 1), (2, 'Rome', 2019, 1), (3, 'Paris', 2018, 1), (4, 'Rome', 2020, 1), (5, 'Paris', 2019, 1), (6, 'Rome', 2018, 1), (7, 'Paris', 2020, 1);", 'sql': "SELECT event_city, COUNT(DISTINCT attendee_id) FROM EventAttendance WHERE event_city IN ('Paris', 'Rome') AND event_year BETWEEN 2018 AND 2020 GROUP BY event_city;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT event_city AS city, COUNT(DISTINCT attendee_id) FROM EventAttendance WHERE event_year BETWEEN 2018 AND 2020 GROUP BY event_city;'
), 0), (Example({'sql_prompt': 'What are the names and quantities of military equipment sold to India?', 'sql_context': 'CREATE TABLE equipment_sales (id INT, equipment_name VARCHAR, quantity INT, country VARCHAR);', 'sql': "SELECT equipment_name, quantity FROM equipment_sales WHERE country = 'India';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT e.equipment_name, es.quantity FROM equipment_sales AS es INNER JOIN countries ON es.country = countries.code WHERE countries.name = 'India';"
), 0), (Example({'sql_prompt': 'What is the number of movies produced by studios located in Africa and the percentage of those movies that are documentaries?', 'sql_context': "CREATE TABLE movie_africa (id INT, studio VARCHAR(255), movie_type VARCHAR(255)); INSERT INTO movie_africa (id, studio, movie_type) VALUES (1, 'Foluke Productions', 'Drama'); INSERT INTO movie_africa (id, studio, movie_type) VALUES (2, 'Foluke Productions', 'Documentary'); INSERT INTO movie_africa (id, studio, movie_type) VALUES (3, 'Kunle Afolayan Productions', 'Drama'); INSERT INTO movie_africa (id, studio, movie_type) VALUES (4, 'Kunle Afolayan Productions', 'Documentary'); INSERT INTO movie_africa (id, studio, movie_type) VALUES (5, 'RAK Studios', 'Drama');", 'sql': "SELECT COUNT(*) as count, ROUND(100.0 * SUM(CASE WHEN movie_type = 'Documentary' THEN 1 ELSE 0 END) / COUNT(*), 2) as doc_percentage FROM movie_africa WHERE studio IN (SELECT studio_name FROM movie_studios WHERE country IN (SELECT region FROM regions WHERE continent = 'Africa'));"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT COUNT(*) AS total_movies FROM movie_africa WHERE studio IN ('Foluke Productions', 'Kunle Afolayan Productions') AND movie_type = 'Documentary' UNION ALL SELECT ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM movie_africa WHERE studio IN ('Foluke Productions', 'Kunle Afolayan Productions')), 2) AS percentage;"
), 0), (Example({'sql_prompt': "Calculate the total waste generated in 'BC' and 'Alberta'", 'sql_context': "CREATE TABLE waste_generation (id INT, province VARCHAR(20), amount INT); INSERT INTO waste_generation (id, province, amount) VALUES (1, 'BC', 2500), (2, 'Alberta', 3500);", 'sql': "SELECT SUM(amount) FROM waste_generation WHERE province IN ('BC', 'Alberta');"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT SUM(amount) FROM waste_generation WHERE province IN ('BC', 'Alberta'); <|\\end\\>>"
), 1), (Example({'sql_prompt': 'What is the average cargo handling time in hours for each port?', 'sql_context': 'CREATE TABLE cargo_handling (id INT, port_id INT, time_in_hours DECIMAL(5,2)); INSERT INTO cargo_handling (id, port_id, time_in_hours) VALUES (1, 1, 20.5), (2, 1, 22.3), (3, 2, 18.7);', 'sql': 'SELECT port_id, AVG(time_in_hours) FROM cargo_handling GROUP BY port_id;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT port_id, AVG(time_in_hours) FROM cargo_handling GROUP BY port_id; <|\\end\\>>'
), 1), (Example({'sql_prompt': 'What is the average attendee_age for music_concert events in Toronto?', 'sql_context': "CREATE TABLE music_concert_attendance (id INT, attendee_age INT, concert_location VARCHAR(50)); INSERT INTO music_concert_attendance (id, attendee_age, concert_location) VALUES (1, 30, 'Toronto'), (2, 35, 'Toronto'), (3, 40, 'Montreal'), (4, 45, 'Montreal'), (5, 32, 'Vancouver'), (6, 42, 'Vancouver');", 'sql': "SELECT AVG(attendee_age) FROM music_concert_attendance WHERE concert_location = 'Toronto';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT AVG(attendee_age) FROM music_concert_attendance WHERE concert_location = 'Toronto';"
), 1), (Example({'sql_prompt': 'What was the total expenditure by each department in the last fiscal quarter?', 'sql_context': "CREATE TABLE Expenditures (ExpenseID INT, ExpenseDate DATE, ExpenseType VARCHAR(20), ExpenseAmount DECIMAL(10,2)); INSERT INTO Expenditures (ExpenseID, ExpenseDate, ExpenseType, ExpenseAmount) VALUES (1, '2022-04-01', 'Marketing', 15000.00), (2, '2022-05-01', 'Operations', 25000.00), (3, '2022-06-01', 'Marketing', 18000.00);", 'sql': 'SELECT ExpenseType, SUM(ExpenseAmount) FROM Expenditures WHERE ExpenseDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND ExpenseDate < LAST_DAY(CURDATE()) GROUP BY ExpenseType;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT ExpenseType, SUM(ExpenseAmount) FROM Expenditures WHERE MONTH(ExpenseDate) IN (4,5,6) GROUP BY ExpenseType; <|\\end\\>'
), 0), (Example({'sql_prompt': 'Summarize the total number of eco-tourists who visited Japan, Thailand, and Indonesia in Q1 and Q2 of 2021', 'sql_context': "CREATE TABLE EcoTouristsQ1Q2 (country VARCHAR(255), quarter INT, eco_tourists INT); INSERT INTO EcoTouristsQ1Q2 (country, quarter, eco_tourists) VALUES ('Japan', 1, 1100000), ('Japan', 2, 1300000), ('Thailand', 1, 1500000), ('Thailand', 2, 1700000), ('Indonesia', 1, 1900000), ('Indonesia', 2, 2100000);", 'sql': "SELECT country, SUM(eco_tourists) AS total_eco_tourists FROM EcoTouristsQ1Q2 WHERE country IN ('Japan', 'Thailand', 'Indonesia') AND quarter IN (1, 2) GROUP BY country;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT country AS 'Country Name', SUM(eco_tourists) FROM EcoTouristsQ1Q2 WHERE quarter IN (1, 2) AND country IN ('Japan', 'Thailand', 'Indonesia') GROUP BY country;"
), 1), (Example({'sql_prompt': 'How many ethically sourced products are sold in each state?', 'sql_context': "CREATE TABLE States (state_id INT, state_name VARCHAR(20)); INSERT INTO States (state_id, state_name) VALUES (1, 'California'), (2, 'Texas'), (3, 'Florida'), (4, 'New York');", 'sql': 'SELECT S.state_name, COUNT(DISTINCT EP.product_id) FROM Ethical_Products EP JOIN Sales S ON EP.product_id = S.product_id GROUP BY S.state_name HAVING is_ethically_sourced = true;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT s.state_name, COUNT(p.product_id) as ethically_sourced_products FROM Products p JOIN Suppliers supp ON p.supplier_id = supp.supplier_id JOIN States s ON p.location LIKE CONCAT('%', s.state_name, '%') WHERE supp.ethical_rating > 8 GROUP BY s.state_name;"
), 0), (Example({'sql_prompt': 'Which onshore wells in the Permian Basin have the highest production rate?', 'sql_context': "CREATE TABLE wells (well_id INT, well_name VARCHAR(255), well_type VARCHAR(255), location VARCHAR(255)); INSERT INTO wells VALUES (1, 'Well A', 'Offshore', 'Gulf of Mexico'); INSERT INTO wells VALUES (2, 'Well B', 'Onshore', 'Permian Basin');", 'sql': "SELECT well_id, well_name, production_rate FROM (SELECT well_id, well_name, production_rate, row_number() OVER (PARTITION BY well_type ORDER BY production_rate DESC) as rn FROM well_production WHERE well_type = 'Onshore' AND location = 'Permian Basin') WHERE rn = 1;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT w.well_name FROM wells w JOIN production p ON w.well_id = p.well_id WHERE w.location LIKE '%Basin%' AND w.region IN ('Onshore') ORDER BY AVG(p.production) DESC LIMIT 1;"
), 0), (Example({'sql_prompt': 'Average financial wellbeing score for programs in the Southern region', 'sql_context': 'CREATE TABLE financial_wellbeing_programs (id INT, score FLOAT, region VARCHAR(255));', 'sql': "SELECT AVG(score) FROM financial_wellbeing_programs WHERE region = 'Southern';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT AVG(score) FROM financial_wellbeing_programs WHERE region = 'Southern';"
), 1), (Example({'sql_prompt': 'What is the average price of vegan products in the USA?', 'sql_context': "CREATE TABLE vendors (vendor_id INT, vendor_name TEXT, country TEXT);CREATE TABLE products (product_id INT, product_name TEXT, price DECIMAL, vegan BOOLEAN, vendor_id INT); INSERT INTO vendors (vendor_id, vendor_name, country) VALUES (1, 'VendorA', 'USA'), (2, 'VendorB', 'Canada'); INSERT INTO products (product_id, product_name, price, vegan, vendor_id) VALUES (1, 'ProductA', 25.99, true, 1), (2, 'ProductB', 18.49, false, 1), (3, 'ProductC', 22.99, true, 2);", 'sql': "SELECT AVG(price) FROM products JOIN vendors ON products.vendor_id = vendors.vendor_id WHERE vegan = true AND country = 'USA';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT AVG(price) FROM products JOIN vendors ON products.vendor_id = vendors.vendor_id WHERE vegan = true AND country = 'USA'; <|\\end\\>>"
), 1), (Example({'sql_prompt': 'Determine the most frequently purchased product by customers from the UK.', 'sql_context': "CREATE TABLE customer_purchases (customer_id INT, product_name VARCHAR(50), purchase_date DATE, country VARCHAR(50)); INSERT INTO customer_purchases (customer_id, product_name, purchase_date, country) VALUES (1, 'Lipstick', '2021-01-01', 'US'), (2, 'Mascara', '2021-01-05', 'US'), (3, 'Lipstick', '2021-01-10', 'CA'), (4, 'Lipstick', '2021-01-15', 'UK'), (5, 'Foundation', '2021-01-20', 'US'), (6, 'Moisturizer', '2021-02-01', 'UK');", 'sql': "SELECT product_name, COUNT(*) as purchase_count FROM customer_purchases WHERE country = 'UK' GROUP BY product_name ORDER BY purchase_count DESC LIMIT 1;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT product_name FROM customer_purchases WHERE country = 'UK' GROUP BY product_name ORDER BY COUNT(*) DESC LIMIT 1; <|\\ end |>"
), 0), (Example({'sql_prompt': 'Compare the number of building permits for residential and commercial types in California and Florida with a size between 1500 and 4000 square feet in 2020', 'sql_context': "CREATE TABLE BuildingPermits (ID INT PRIMARY KEY, State VARCHAR(20), City VARCHAR(20), Type VARCHAR(20), Size INT, Date DATE, Year INT); INSERT INTO BuildingPermits (ID, State, City, Type, Size, Date, Year) VALUES (5, 'California', 'San Diego', 'Residential', 1500, '2020-01-02', 2020), (6, 'California', 'San Francisco', 'Commercial', 5000, '2020-03-15', 2020), (7, 'Florida', 'Miami', 'Residential', 2500, '2020-06-01', 2020), (8, 'Florida', 'Orlando', 'Commercial', 3500, '2020-09-01', 2020);", 'sql': "SELECT Type, COUNT(*) FROM BuildingPermits WHERE State IN ('California', 'Florida') AND Size BETWEEN 1500 AND 4000 AND Year = 2020 GROUP BY Type;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT State, Type FROM BuildingPermits WHERE Year = 2020 AND Size BETWEEN 1500 AND 400 ORDER BY State;'
), 0), (Example({'sql_prompt': 'Identify all suppliers who provide non-GMO ingredients to restaurants with Michelin stars.', 'sql_context': 'CREATE TABLE Suppliers (id INT, name VARCHAR(50), isNonGMO BOOLEAN); CREATE TABLE Restaurants (id INT, name VARCHAR(50), numStars INT); CREATE TABLE Ingredients (supplierId INT, restaurantId INT, isNonGMO BOOLEAN);', 'sql': 'SELECT Suppliers.name FROM Suppliers INNER JOIN Ingredients ON Suppliers.id = Ingredients.supplierId INNER JOIN Restaurants ON Ingredients.restaurantId = Restaurants.id WHERE Restaurants.numStars > 2 AND Ingredients.isNonGMO = TRUE;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT s.name FROM Suppliers s INNER JOIN Ingredients i ON s.id = i.supplierId INNER JOIN Restaurants r ON i.restaurantId = r.id WHERE isNonGMO = TRUE AND numStars > 0; <|\\end\\>>'
), 0), (Example({'sql_prompt': "What is the total healthcare expenditure for rural county 'Adirondacks'?", 'sql_context': "CREATE TABLE healthcare_expenditure (county TEXT, expenditure INTEGER); INSERT INTO healthcare_expenditure (county, expenditure) VALUES ('Adirondacks', 500000), ('Adirondacks', 600000), ('Adirondacks', 700000);", 'sql': "SELECT SUM(expenditure) FROM healthcare_expenditure WHERE county = 'Adirondacks';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT SUM(expenditure) FROM healthcare_expenditure WHERE county = 'Adirondacks'; <|\\ end\\|>"
), 1), (Example({'sql_prompt': 'List all agricultural innovation metrics related to wheat in Egypt.', 'sql_context': "CREATE TABLE AgriInnov (id INT, metric VARCHAR(255), crop VARCHAR(255), country VARCHAR(255)); INSERT INTO AgriInnov (id, metric, crop, country) VALUES (1, 'Yield', 'Wheat', 'Egypt'), (2, 'Harvest Time', 'Wheat', 'Egypt');", 'sql': "SELECT * FROM AgriInnov WHERE crop = 'Wheat' AND country = 'Egypt';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT * FROM AgriInnov WHERE crop ='Wheat' AND country='Egypt'; <|\\end\\>>"
), 1), (Example({'sql_prompt': 'What are the total ticket sales for basketball and soccer games?', 'sql_context': "CREATE TABLE games (game_id INT, game_type VARCHAR(10)); INSERT INTO games (game_id, game_type) VALUES (1, 'Basketball'), (2, 'Soccer'); CREATE TABLE sales (sale_id INT, game_id INT, revenue DECIMAL(5,2)); INSERT INTO sales (sale_id, game_id, revenue) VALUES (1, 1, 500.00), (2, 1, 750.00), (3, 2, 800.00), (4, 2, 1000.00);", 'sql': "SELECT SUM(sales.revenue) FROM sales JOIN games ON sales.game_id = games.game_id WHERE games.game_type IN ('Basketball', 'Soccer');"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT SUM(sales.revenue) FROM sales JOIN games ON sales.game_id = games.game_id WHERE games.game_type IN ('Basketball', 'Soccer'); <|\\end\\>>"
), 1), (Example({'sql_prompt': 'What is the maximum number of marine species observed in a single deep-sea expedition?', 'sql_context': 'CREATE TABLE deep_sea_expeditions (expedition_id INTEGER, location TEXT, species_count INTEGER);', 'sql': 'SELECT MAX(species_count) FROM deep_sea_expeditions;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT MAX(species_count) FROM deep_sea_expeditions;'
), 1), (Example({'sql_prompt': 'Update the donation amount to $10000 for donor_id 5, who identifies as genderqueer.', 'sql_context': "CREATE TABLE donors (donor_id INT, donation_amount DECIMAL(10,2), donation_year INT, gender VARCHAR(255)); INSERT INTO donors (donor_id, donation_amount, donation_year, gender) VALUES (1, 5000.00, 2020, 'female'), (2, 3000.00, 2019, 'male'), (3, 7000.00, 2020, 'non-binary'), (4, 9000.00, 2021, 'non-binary'), (5, 8000.00, 2021, 'genderqueer');", 'sql': 'UPDATE donors SET donation_amount = 10000 WHERE donor_id = 5;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="UPDATE donors SET donation_amount = 10000 WHERE donor_id = 5 AND gender = 'genderqueer';"
), 0), (Example({'sql_prompt': 'How many works were exhibited in the year 1950?', 'sql_context': "CREATE TABLE exhibitions (exhibition_id INT PRIMARY KEY, exhibition_name TEXT, year INT, location TEXT);CREATE TABLE exhibits (exhibit_id INT PRIMARY KEY, work_id INT, exhibition_id INT, FOREIGN KEY (work_id) REFERENCES works(work_id), FOREIGN KEY (exhibition_id) REFERENCES exhibitions(exhibition_id));INSERT INTO exhibitions (exhibition_id, exhibition_name, year, location) VALUES (1, 'Documenta', 1950, 'Kassel, Germany'); INSERT INTO exhibits (exhibit_id, work_id, exhibition_id) VALUES (1, 1, 1);", 'sql': 'SELECT COUNT(*) FROM exhibits e JOIN exhibitions ex ON e.exhibition_id = ex.exhibition_id WHERE ex.year = 1950;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT COUNT(DISTINCT e.work_id) FROM exhibits AS ex JOIN works ON ex.work_id = works.work_id INNER JOIN exhibitions AS e ON ex.exhibition_id = e.exhibition_id WHERE e.year = 1950;'
), 0), (Example({'sql_prompt': "Which education programs have an instructor named 'Jane Smith'?", 'sql_context': "CREATE TABLE education_programs (id INT, program_name VARCHAR(50), instructor VARCHAR(50), start_date DATE, end_date DATE, enrollment INT); INSERT INTO education_programs (id, program_name, instructor, start_date, end_date, enrollment) VALUES (5, 'Bird Identification and Monitoring', 'Jane Smith', '2022-04-01', '2022-05-31', 25); INSERT INTO education_programs (id, program_name, instructor, start_date, end_date, enrollment) VALUES (6, 'Wildlife Identification and Tracking', 'John Doe', '2022-06-01', '2022-08-31', 30);", 'sql': "SELECT program_name FROM education_programs WHERE instructor = 'Jane Smith';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT program_name FROM education_programs WHERE instructor = (SELECT name FROM staff WHERE last_name = 'Smith');"
), 0), (Example({'sql_prompt': 'What is the number of dental visits per year in each state?', 'sql_context': "CREATE TABLE dental_visits (id INT, state TEXT, visits INT); INSERT INTO dental_visits (id, state, visits) VALUES (1, 'California', 2); INSERT INTO dental_visits (id, state, visits) VALUES (2, 'New York', 3);", 'sql': 'SELECT state, AVG(visits) FROM dental_visits GROUP BY state;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT state as "State", SUM(visits) FROM dental_visits GROUP BY state;'
), 0), (Example({'sql_prompt': 'What is the minimum price of cruelty-free skincare products sold in Italy?', 'sql_context': "CREATE TABLE skincare_sales(product_name TEXT, price DECIMAL(5,2), is_cruelty_free BOOLEAN, country TEXT); INSERT INTO skincare_sales VALUES ('Cleanser', 10.99, true, 'Italy'); INSERT INTO skincare_sales VALUES ('Toner', 8.99, true, 'Italy'); INSERT INTO skincare_sales VALUES ('Serum', 15.99, false, 'Italy');", 'sql': "SELECT MIN(price) FROM skincare_sales WHERE is_cruelty_free = true AND country = 'Italy';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT MIN(price) FROM skincare_sales WHERE is_cruelty_free = true AND country = 'Italy';"
), 1), (Example({'sql_prompt': 'What is the average number of installations visited per visitor, partitioned by city?', 'sql_context': "CREATE TABLE Cities (CityID INT, City VARCHAR(50)); INSERT INTO Cities (CityID, City) VALUES (1, 'New York'), (2, 'Los Angeles'); CREATE TABLE Visits (VisitID INT, VisitorID INT, CityID INT, InstallationID INT); INSERT INTO Visits (VisitID, VisitorID, CityID, InstallationID) VALUES (1, 1, 1, 1), (2, 1, 1, 2), (3, 2, 2, 3);", 'sql': 'SELECT City, AVG(InstallationID) OVER (PARTITION BY CityID) AS AvgInstallationsPerVisitor FROM Visits V JOIN Cities C ON V.CityID = C.CityID;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT Cities.City AS City_Name , AVG(COUNT(*)) OVER(PARTITION BY Visits.CityID) FROM Visitors JOIN Visits ON Visitors.VisitorID = VisitID GROUP BY Cities.City; <|\\end|>'
), 0), (Example({'sql_prompt': 'What are the unique labor rights advocacy groups in Latin America?', 'sql_context': "CREATE TABLE labor_advocacy (group_name VARCHAR(50), region VARCHAR(50)); INSERT INTO labor_advocacy (group_name, region) VALUES ('CUT', 'Brazil'); INSERT INTO labor_advocacy (group_name, region) VALUES ('CNT', 'Argentina'); INSERT INTO labor_advocacy (group_name, region) VALUES ('CGT', 'Mexico'); INSERT INTO labor_advocacy (group_name, region) VALUES ('UNORCA', 'Colombia');", 'sql': "SELECT DISTINCT group_name FROM labor_advocacy WHERE region IN ('Brazil', 'Argentina', 'Mexico', 'Colombia');"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT DISTINCT group_name FROM labor_advocacy WHERE region = 'Latin America';"
), 0), (Example({'sql_prompt': 'Find the average depth of all underwater volcanoes in the Atlantic Ocean.', 'sql_context': "CREATE TABLE underwater_volcanoes (id INT, name VARCHAR(50), depth FLOAT, ocean VARCHAR(20)); INSERT INTO underwater_volcanoes (id, name, depth, ocean) VALUES (1, 'Lost City', 800, 'Atlantic'); INSERT INTO underwater_volcanoes (id, name, depth, ocean) VALUES (2, 'Eyjafjallajokull', 1650, 'Atlantic');", 'sql': "SELECT AVG(depth) FROM underwater_volcanoes WHERE ocean = 'Atlantic';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT AVG(depth) FROM underwater_volcanoes WHERE ocean = 'Atlantic';"
), 1), (Example({'sql_prompt': "Update the revenue of 'Chicken Shawarma' dish in the restaurant_menu table.", 'sql_context': "CREATE TABLE restaurant_menu (dish VARCHAR(255), category VARCHAR(255), price DECIMAL(10, 2)); INSERT INTO restaurant_menu (dish, category, price) VALUES ('Chicken Shawarma', 'Middle Eastern', 8.99);", 'sql': "UPDATE restaurant_menu SET price = 9.99 WHERE dish = 'Chicken Shawarma';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="UPDATE restaurant_menu SET revenue = 75 WHERE dish = 'Chicken Shawarma'; < | endsql > ;"
), 0), (Example({'sql_prompt': 'List the top 3 countries with the highest number of satellites launched', 'sql_context': "CREATE TABLE Satellites (SatelliteID INT, Name VARCHAR(50), LaunchDate DATE, Manufacturer VARCHAR(50), Country VARCHAR(50), Weight DECIMAL(10,2)); INSERT INTO Satellites (SatelliteID, Name, LaunchDate, Manufacturer, Country, Weight) VALUES (1, 'Kompsat-5', '2013-08-10', 'KARI', 'South Korea', 1250.00), (2, 'GSAT-7', '2013-09-30', 'ISRO', 'India', 2650.00), (3, 'Haiyang-2B', '2011-11-15', 'CNSA', 'China', 1100.00);", 'sql': 'SELECT Country, COUNT(*) as SatelliteCount, RANK() OVER(ORDER BY COUNT(*) DESC) as Rank FROM Satellites GROUP BY Country HAVING COUNT(*) > 0 ORDER BY Rank;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT Country, COUNT(*) as TotalSatellites FROM Satellites GROUP BY Country ORDER BY TotalSatellites DESC LIMIT 3; <|\\end\\> |}'
), 0), (Example({'sql_prompt': 'How many vendors offer gluten-free options in the downtown area?', 'sql_context': "CREATE TABLE VendorLocation (VendorID INT, Location VARCHAR(50)); INSERT INTO VendorLocation (VendorID, Location) VALUES (1, 'Downtown'), (2, 'Uptown'); CREATE TABLE MenuItems (MenuItemID INT, VendorID INT, MenuItemName VARCHAR(50), MenuItemType VARCHAR(50), GlutenFree VARCHAR(5)); INSERT INTO MenuItems (MenuItemID, VendorID, MenuItemName, MenuItemType, GlutenFree) VALUES (1, 1, 'Chicken Caesar Salad', 'Salad', 'Yes'), (2, 1, 'Ham Sandwich', 'Sandwich', 'No'), (3, 2, 'Beef Burrito', 'Mexican', 'No');", 'sql': "SELECT COUNT(*) FROM MenuItems WHERE VendorID IN (SELECT VendorID FROM VendorLocation WHERE Location = 'Downtown') AND GlutenFree = 'Yes';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT COUNT(*) FROM VendorLocation vl JOIN MenuItems mi ON vl.VendorID = mi.VendorID WHERE GlutenFree = 'Yes' AND Location LIKE '%Downtown%';"
), 0), (Example({'sql_prompt': "How many employees in 'Accessibility Services' have a master's degree or higher?", 'sql_context': "CREATE TABLE EmployeeEducation (ID INT, Department TEXT, Degree TEXT); INSERT INTO EmployeeEducation (ID, Department, Degree) VALUES (1, 'Accessibility Services', 'Master''s'), (2, 'IT', 'Bachelor''s'), (3, 'Accessibility Services', 'Doctorate');", 'sql': "SELECT COUNT(*) FROM EmployeeEducation WHERE Department = 'Accessibility Services' AND Degree IN ('Master''s', 'Doctorate');"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT COUNT(*) FROM EmployeeEducation WHERE Department = ''Accessibility Services' AND Degree IN ('Master''s', 'Doctorate')'; <|\\end\\>>"
), 1), (Example({'sql_prompt': 'List all warehouse locations and their corresponding total inventory value.', 'sql_context': "CREATE TABLE warehouse (id INT, location VARCHAR(20), total_inventory DECIMAL(10,2)); INSERT INTO warehouse (id, location, total_inventory) VALUES (1, 'Atlanta', 2000.00), (2, 'Dallas', 3000.00);", 'sql': 'SELECT location, total_inventory FROM warehouse;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT * FROM warehouse;'
), 0), (Example({'sql_prompt': 'What is the average level achieved per hour played for players in the "Cybernetic Pioneers" game?', 'sql_context': "CREATE TABLE PioneerStats (PlayerID INT, GameName VARCHAR(20), Level INT, Playtime FLOAT); INSERT INTO PioneerStats (PlayerID, GameName, Level, Playtime) VALUES (3001, 'Cybernetic Pioneers', 10, 20.5), (3002, 'Cybernetic Pioneers', 25, 40.2), (3003, 'Cybernetic Pioneers', 18, 15.6);", 'sql': "SELECT AVG(Level * 1.0 / Playtime) FROM PioneerStats WHERE GameName = 'Cybernetic Pioneers';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT AVG(Level/Playtime) FROM PioneerStats WHERE GameName = 'Cybernetic Pioneers'; <|\\end\\>"
), 0), (Example({'sql_prompt': 'What is the total volume of timber harvested by each region?', 'sql_context': "CREATE TABLE regions (region_id INT, region_name VARCHAR(255)); INSERT INTO regions (region_id, region_name) VALUES (1, 'North'), (2, 'South'), (3, 'East'), (4, 'West'); CREATE TABLE timber_harvest (region_id INT, year INT, volume INT); INSERT INTO timber_harvest (region_id, year, volume) VALUES (1, 2020, 1200), (1, 2021, 1500), (2, 2020, 800), (2, 2021, 1000), (3, 2020, 1700), (3, 2021, 1900), (4, 2020, 1100), (4, 2021, 1300);", 'sql': 'SELECT region_name, SUM(volume) as total_volume FROM timber_harvest TH JOIN regions ON TH.region_id = regions.region_id GROUP BY region_name;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT region_name AS RegionName, SUM(volume) as TotalVolume FROM timber_harvest TH JOIN regions R ON TH.region_id = R.region_id GROUP BY Th.RegionID; <|\\oplus\\Delta\\rho\\lambda\\mu\\nu⟩'
), 0), (Example({'sql_prompt': 'What is the daily revenue from each category in the last month?', 'sql_context': 'CREATE TABLE orders (order_id INT, order_date DATETIME, menu_id INT, quantity INT, price FLOAT);', 'sql': 'SELECT DATE(order_date) as order_date, category, SUM(price * quantity) as daily_revenue FROM orders JOIN menus ON orders.menu_id = menus.menu_id GROUP BY DATE(order_date), category ORDER BY order_date, daily_revenue DESC;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT m.category as category, DATE(o.order_date) AS date, SUM(quantity * o.price) FROM orders o JOIN menus m ON o.menu_id = m.menu_id WHERE order_date >= CURDATE() - INTERVAL 1 MONTH GROUP BY date, category;'
), 0), (Example({'sql_prompt': "Which climate finance initiatives were inserted into the 'climate_finance' table in 2019?", 'sql_context': "CREATE TABLE climate_finance (initiative_name TEXT, year INTEGER, amount FLOAT); INSERT INTO climate_finance (initiative_name, year, amount) VALUES ('Green Grants', 2019, 50000.0), ('Climate Innovation Fund', 2020, 100000.0), ('Renewable Energy Loans', 2018, 75000.0);", 'sql': 'SELECT initiative_name FROM climate_finance WHERE year = 2019;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT initiative_name FROM climate_finance WHERE year = 2019;'
), 1), (Example({'sql_prompt': 'What is the average budget allocation for disability accommodations by region?', 'sql_context': 'CREATE TABLE disability_accommodations (accom_id INT, accom_name TEXT, budget DECIMAL(10,2), region_id INT);CREATE TABLE regions (region_id INT, region_name TEXT);', 'sql': 'SELECT r.region_name, AVG(d.budget) AS avg_budget FROM disability_accommodations d INNER JOIN regions r ON d.region_id = r.region_id GROUP BY r.region_name;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT AVG(budget) as avg_allocation FROM disability_accommodations dacc JOIN regions r ON dacc.region_id = r.region_id;'
), 0), (Example({'sql_prompt': "List all players who have achieved Master rank or higher in the game's ranking system.", 'sql_context': "CREATE TABLE Players (id INT, game_id INT, rank ENUM('Bronze', 'Silver', 'Gold', 'Platinum', 'Diamond', 'Master', 'Grandmaster', 'Challenger')); INSERT INTO Players (id, game_id, rank) VALUES (1, 1, 'Gold'), (2, 1, 'Platinum'), (3, 1, 'Diamond'), (4, 1, 'Master'), (5, 1, 'Grandmaster'), (6, 1, 'Bronze'), (7, 1, 'Challenger'), (8, 1, 'Silver');", 'sql': "SELECT * FROM Players WHERE rank IN ('Master', 'Grandmaster', 'Challenger');"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT * FROM Players WHERE rank IN ('Master', 'Grandmaster', 'Challenger') OR FIND_IN_SET(rank, ('Platinum', 'Diamond')); <|\\ end |>"
), 0), (Example({'sql_prompt': "Insert a new compliance violation for dispensary 1 on 2022-01-05 with the description 'Expired products'.", 'sql_context': "CREATE TABLE compliance_violations (id INT, dispensary_id INT, violation_date DATE, description TEXT); INSERT INTO compliance_violations (id, dispensary_id, violation_date, description) VALUES (1, 1, '2021-02-15', 'Inadequate labeling'), (2, 2, '2021-03-02', 'Improper storage'), (3, 3, '2021-06-28', 'Expired products');", 'sql': "INSERT INTO compliance_violations (dispensary_id, violation_date, description) VALUES (1, '2022-01-05', 'Expired products');"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="INSERT INTO compliance_violations (dispensary_id, violation_date, description) VALUES (1, '2022-01-05', 'Expired products') ON DUPLICATE KEY UPDATE id = id;"
), 0), (Example({'sql_prompt': "Update the address of policyholder with ID 3 to '123 Main St, San Francisco, CA'.", 'sql_context': "CREATE TABLE policyholders (id INT, name TEXT, address TEXT, state TEXT, policy_type TEXT); INSERT INTO policyholders (id, name, address, state, policy_type) VALUES (3, 'Sophia Garcia', '456 Elm St, Los Angeles, CA', 'California', 'Life'), (4, 'Daniel Kim', '789 Oak St, San Jose, CA', 'California', 'Health');", 'sql': "UPDATE policyholders SET address = '123 Main St, San Francisco, CA' WHERE policyholders.id = 3;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="UPDATE policyholders SET address = '123 Main St, San Francisco, CA' WHERE id = 3;"
), 1), (Example({'sql_prompt': 'What is the average yield of crops for each indigenous community?', 'sql_context': "CREATE TABLE indigenous_communities (id INT, name VARCHAR(255)); INSERT INTO indigenous_communities VALUES (1, 'Mayans'), (2, 'Navajos'); CREATE TABLE crop_yields (community_id INT, yield INT);", 'sql': 'SELECT ic.name, AVG(cy.yield) as avg_yield FROM indigenous_communities ic JOIN crop_yields cy ON ic.id = cy.community_id GROUP BY ic.id, ic.name;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT i.name as community, AVG(cy.yield) as avg_crop_yield FROM indigenous_communities i JOIN crop_yields cy ON i.id = cy.community_id GROUP BY i.name;'
), 0), (Example({'sql_prompt': "What is the total number of marine species in the 'Arctic' region that are threatened or endangered?'", 'sql_context': "CREATE TABLE marine_species (name TEXT, region TEXT, conservation_status TEXT); INSERT INTO marine_species (name, region, conservation_status) VALUES ('Polar Bear', 'Arctic', 'Endangered'); INSERT INTO marine_species (name, region, conservation_status) VALUES ('Narwhal', 'Arctic', 'Threatened');", 'sql': "SELECT region, COUNT(*) FROM marine_species WHERE region = 'Arctic' AND conservation_status IN ('Endangered', 'Threatened') GROUP BY region;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT COUNT(*) FROM marine_species WHERE region = 'Arctic' AND conservation_status IN ('Endangered', 'Threatened') GROUP BY conservation_status; <|\\end\\>>"
), 0), (Example({'sql_prompt': 'Find the number of unique healthcare centers in the USA where at least 5 infectious disease cases were reported in the last month.', 'sql_context': "CREATE TABLE healthcare_centers (id INT, name TEXT, country TEXT, created_at TIMESTAMP); INSERT INTO healthcare_centers (id, name, country, created_at) VALUES (1, 'St. John Hospital', 'USA', '2021-01-01 10:00:00'), (2, 'Montreal General Hospital', 'Canada', '2021-01-02 12:00:00'); CREATE TABLE infectious_disease_reports (id INT, patient_id INT, healthcare_center_id INT, report_date TIMESTAMP); INSERT INTO infectious_disease_reports (id, patient_id, healthcare_center_id, report_date) VALUES (1, 1, 1, '2021-07-10 14:30:00'), (2, 2, 1, '2021-06-15 09:00:00'), (3, 3, 2, '2021-07-16 11:00:00');", 'sql': "SELECT COUNT(DISTINCT healthcare_centers.id) FROM healthcare_centers JOIN infectious_disease_reports ON healthcare_centers.id = infectious_disease_reports.healthcare_center_id WHERE infectious_disease_reports.report_date >= DATEADD(month, -1, CURRENT_TIMESTAMP) GROUP BY healthcare_centers.id HAVING COUNT(infectious_disease_reports.id) >= 5 AND healthcare_centers.country = 'USA';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT COUNT(DISTINCT healthcare_center_id) FROM infectious_disease_reports WHERE report_date >= NOW() - INTERVAL '365 day' AND country = 'USA'; SELECT h.name, i.healthcare_center_id FROM healthcare_centers h JOIN (SELECT COUNT(*) AS cases, healthcare_center_id FROM infectious_disease_reports WHERE report_date >= NOW() - INTERVAL '365 day' GROUP BY healthcare_center_id HAVING SUM(cases) > 4) i ON h.id = i.healthcare_center_id;"
), 0), (Example({'sql_prompt': 'How many countries are non-compliant with maritime law in the Caribbean region?', 'sql_context': "CREATE TABLE maritime_law_compliance(country VARCHAR(255), region VARCHAR(255), compliant BOOLEAN);INSERT INTO maritime_law_compliance(country, region, compliant) VALUES ('Cuba', 'Caribbean', FALSE), ('Jamaica', 'Caribbean', FALSE), ('Haiti', 'Caribbean', TRUE);", 'sql': "SELECT COUNT(*) FROM maritime_law_compliance WHERE region = 'Caribbean' AND compliant = FALSE;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT COUNT(*) FROM maritime_law_compliance WHERE region = 'Caribbean' AND compliant = FALSE;"
), 1), (Example({'sql_prompt': 'List the top 3 organic items with the highest inventory value?', 'sql_context': "CREATE TABLE organic_inventory (item_id INT, item_name VARCHAR(255), category VARCHAR(255), quantity INT, unit_price DECIMAL(5,2)); INSERT INTO organic_inventory (item_id, item_name, category, quantity, unit_price) VALUES (1, 'Quinoa', 'Grains', 50, 3.99), (2, 'Tofu', 'Proteins', 30, 2.99), (3, 'Almond Milk', 'Dairy Alternatives', 40, 2.59);", 'sql': 'SELECT item_name, quantity * unit_price as total_value FROM organic_inventory ORDER BY total_value DESC LIMIT 3;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT item_name, quantity * unit_price as total_value FROM organic_inventory ORDER BY total_value DESC LIMIT 3; <|\\end\\>'
), 1), (Example({'sql_prompt': 'What is the average number of military personnel per country involved in peacekeeping operations?', 'sql_context': "CREATE TABLE Peacekeeping_Operations (id INT, country VARCHAR(50), military_personnel INT); INSERT INTO Peacekeeping_Operations (id, country, military_personnel) VALUES (1, 'United States', 500), (2, 'United Kingdom', 300), (3, 'Canada', 250);", 'sql': 'SELECT AVG(military_personnel) FROM Peacekeeping_Operations;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT AVG(military_personnel) FROM Peacekeeping_Operations GROUP BY country;'
), 0), (Example({'sql_prompt': 'How many legal aid clinics and community mediation centers are there in total, and what is the sum of cases handled by each type of center, for centers located in the state of California?', 'sql_context': "CREATE TABLE LegalAidClinics (ClinicName text, State text, NumCases int); INSERT INTO LegalAidClinics VALUES ('Clinic1', 'CA', 30, '2022-01-01'), ('Clinic2', 'CA', 25, '2022-01-01'); CREATE TABLE CommunityMediationCenters (CenterName text, State text, NumCases int); INSERT INTO CommunityMediationCenters VALUES ('CM1', 'CA', 22, '2022-01-01'), ('CM2', 'CA', 28, '2022-01-01');", 'sql': "SELECT State, 'Legal Aid Clinics' AS CenterType, COUNT(*) AS NumCenters, SUM(NumCases) AS TotalCases FROM LegalAidClinics WHERE State = 'CA' UNION ALL SELECT State, 'Community Mediation Centers', COUNT(*), SUM(NumCases) FROM CommunityMediationCenters WHERE State = 'CA';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT SUM(NumCases) as Total_Cases FROM ( SELECT ClinicName AS CenterName, NumCases FROM LegalAidClinics WHERE State = 'CA' UNION ALL SELECT CenterName, NumCases FROM CommunityMediationCenters WHERE State = 'CA') AS All_Centers;"
), 0), (Example({'sql_prompt': 'What are the names and founding years of companies founded in Chilean accelerators between 2010 and 2015?', 'sql_context': 'CREATE TABLE accelerator (id INT, accelerator_name VARCHAR(50), location VARCHAR(50), start_year INT, end_year INT); CREATE TABLE company (id INT, name VARCHAR(50), founding_year INT, industry VARCHAR(50), accelerator_id INT);', 'sql': "SELECT a.accelerator_name, c.name, c.founding_year FROM accelerator a INNER JOIN company c ON a.id = c.accelerator_id WHERE a.location = 'Chile' AND c.founding_year >= a.start_year AND c.founding_year <= a.end_year AND a.start_year BETWEEN 2010 AND 2015;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT c.name as company_name, a.start_year as foundation_year FROM company c JOIN accelerator a ON c.accelerator_id = a.id WHERE YEAR(c.founding_year) BETWEEN 2010 AND 2015 AND location LIKE '%Chile%';"
), 0), (Example({'sql_prompt': 'What is the average CO2 emission of transportation per order for each delivery method?', 'sql_context': "CREATE TABLE delivery_methods (id INT, delivery_method VARCHAR(255), co2_emission_kg INT, orders INT); INSERT INTO delivery_methods VALUES (1, 'Standard Shipping', 0.5, 1000), (2, 'Express Shipping', 1.2, 500), (3, 'Standard Shipping', 0.6, 800), (4, 'Bicycle Delivery', 0.1, 200);", 'sql': 'SELECT delivery_method, AVG(co2_emission_kg/orders) FROM delivery_methods GROUP BY delivery_method;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT delivery_method FROM delivery_methods GROUP BY delivery_method HAVING AVG(co2_emission_kg / orders) > (SELECT AVG(co2_emission_kg / orders) FROM delivery_methods);'
), 0), (Example({'sql_prompt': 'What is the most common type of cancer in Australia?', 'sql_context': "CREATE TABLE cancer_data (id INT, country VARCHAR(20), type VARCHAR(20), cases INT); INSERT INTO cancer_data (id, country, type, cases) VALUES (1, 'Australia', 'Breast', 15000), (2, 'Australia', 'Lung', 12000), (3, 'Australia', 'Colon', 10000);", 'sql': "SELECT type, cases FROM cancer_data WHERE country = 'Australia' ORDER BY cases DESC LIMIT 1;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT type FROM cancer_data WHERE country = 'Australia' GROUP BY type ORDER BY SUM(cases) DESC LIMIT 1; <|\\end\\>"
), 0), (Example({'sql_prompt': 'What is the average speed of vessels that arrived in the US East Coast ports in July 2021?', 'sql_context': "CREATE TABLE ports (id INT, name TEXT, country TEXT); INSERT INTO ports (id, name, country) VALUES (1, 'New York', 'USA'), (2, 'Savannah', 'USA'), (3, 'Norfolk', 'USA'); CREATE TABLE vessels (id INT, name TEXT, type TEXT, speed FLOAT, port_id INT); INSERT INTO vessels (id, name, type, speed, port_id) VALUES (1, 'MSC Georgia', 'Container', 22.5, 1), (2, 'Ever Given', 'Container', 20.0, 2), (3, 'Maersk Mc-Kinney Moller', 'Container', 23.0, 3);", 'sql': "SELECT AVG(speed) FROM vessels WHERE port_id IN (SELECT id FROM ports WHERE country = 'USA' AND name IN ('New York', 'Savannah', 'Norfolk')) AND EXTRACT(MONTH FROM arrival_date) = 7;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT AVG(speed) FROM vessels WHERE MONTH(arrival_date) = 7 AND port_id IN (1, 2, 3); < | end | >'
), 0), (Example({'sql_prompt': 'Identify any machines in the manufacturing process that have not been serviced in the past 6 months.', 'sql_context': "CREATE TABLE machines (machine_id INT, last_service DATE); INSERT INTO machines VALUES (1, '2021-08-01'), (2, '2021-10-15'), (3, '2022-02-05'), (4, '2022-03-10'), (5, '2022-04-02');", 'sql': 'SELECT machine_id FROM machines WHERE last_service < DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH);'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT machine_id FROM machines WHERE last_service < DATEADD(month, -6, GETDATE());'
), 0), (Example({'sql_prompt': "Add new cargo type 'Grains' to vessel with ID 2.", 'sql_context': "CREATE TABLE vessels (id INT, name VARCHAR(255)); INSERT INTO vessels (id, name) VALUES (1, 'VesselA'), (2, 'VesselB'), (3, 'VesselC'); CREATE TABLE cargo (id INT, vessel_id INT, cargo_type VARCHAR(255)); INSERT INTO cargo (id, vessel_id, cargo_type) VALUES (1, 1, 'Fuel'), (2, 1, 'Containers');", 'sql': "INSERT INTO cargo (id, vessel_id, cargo_type) VALUES (3, 2, 'Grains');"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="INSERT INTO cargo (cargo_type) SELECT NULL FROM vessels WHERE id = 2 UNION ALL SELECT 'Grains' AS cargo_type; UPDATE cargo SET vessel_id = 2 WHERE cargo.id IS NULL AND NOT EXISTS(SELECT * FROM cargo c1 WHERE c1.vessel_id = 2);"
), 0), (Example({'sql_prompt': 'What was the average waste per menu item last month?', 'sql_context': "CREATE TABLE inventory (item VARCHAR(255), daily_waste NUMERIC, date DATE); INSERT INTO inventory (item, daily_waste, date) VALUES ('Chicken Alfredo', 20, '2021-10-01'), ('Veggie Lasagna', 15, '2021-10-01'), ('Beef Tacos', 10, '2021-10-01');", 'sql': 'SELECT item, AVG(daily_waste) FROM inventory WHERE date >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY) GROUP BY item;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT AVG(daily_waste) as avg_waste FROM inventory WHERE date >= DATEADD(month, -1, CURRENT_DATE); <\\|\\end{assistant}|>'
), 0), (Example({'sql_prompt': 'What are the top 5 states with the most dispensaries?', 'sql_context': "CREATE TABLE DispensariesByState (State TEXT, DispensaryCount INTEGER); INSERT INTO DispensariesByState (State, DispensaryCount) VALUES ('California', 1000), ('Colorado', 750), ('Oregon', 550), ('Washington', 400), ('Nevada', 350);", 'sql': 'SELECT State, DispensaryCount FROM DispensariesByState ORDER BY DispensaryCount DESC LIMIT 5;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT State, DispensaryCount FROM (SELECT State, ROW_NUMBER() OVER(ORDER BY DispensaryCount DESC) as rn FROM DispensariesByState WHERE NOT EXISTS (SELECT 1 FROM States s WHERE s.Name = d.State)) t WHERE rn <= 5;'
), 0), (Example({'sql_prompt': 'What is the total weight of organic ingredients for a specific product category?', 'sql_context': "CREATE TABLE Categories (Category_ID INT PRIMARY KEY, Category_Name TEXT); CREATE TABLE Products (Product_ID INT PRIMARY KEY, Product_Name TEXT, Category_ID INT, Organic BOOLEAN, Weight FLOAT); INSERT INTO Categories (Category_ID, Category_Name) VALUES (1, 'Facial Care'), (2, 'Body Care'), (3, 'Hair Care'); INSERT INTO Products (Product_ID, Product_Name, Category_ID, Organic, Weight) VALUES (1, 'Cleansing Gel', 1, TRUE, 50.0), (2, 'Hydrating Cream', 1, TRUE, 30.0), (3, 'Refreshing Mist', 1, FALSE, 20.0), (4, 'Nourishing Body Lotion', 2, TRUE, 75.0), (5, 'Volumizing Shampoo', 3, FALSE, 50.0), (6, 'Strengthening Conditioner', 3, TRUE, 60.0);", 'sql': 'SELECT c.Category_Name, SUM(p.Weight) FROM Products p JOIN Categories c ON p.Category_ID = c.Category_ID WHERE p.Organic = TRUE GROUP BY c.Category_ID;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT SUM(Weight) FROM Products WHERE Organic = TRUE AND Category_ID IN (1); <|\\ end |>'
), 0), (Example({'sql_prompt': 'How many military innovation projects were initiated in 2019?', 'sql_context': 'CREATE TABLE military_innovation (id INT, year INT, projects INT); INSERT INTO military_innovation (id, year, projects) VALUES (1, 2017, 50), (2, 2018, 55), (3, 2019, 60), (4, 2020, 65), (5, 2021, 70);', 'sql': 'SELECT SUM(projects) FROM military_innovation WHERE year = 2019;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT projects FROM military_innovation WHERE year = '2019'; <|\\end\\>>"
), 0), (Example({'sql_prompt': 'What is the total mass of all space debris in orbit?', 'sql_context': "CREATE TABLE Space_Debris (ID INT, Object_Type VARCHAR(50), Mass FLOAT); INSERT INTO Space_Debris (ID, Object_Type, Mass) VALUES (1, 'Defunct Satellite', 1500.0), (2, 'Rocket Body', 2000.0), (3, 'Fuel Tank', 500.0), (4, 'Nuts and Bolts', 100.0), (5, 'Spent Rocket Stage', 3000.0);", 'sql': 'SELECT SUM(Mass) FROM Space_Debris;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT SUM(Mass) FROM Space_Debris;'
), 1), (Example({'sql_prompt': 'Delete the record of a patient in Argentina who received art therapy', 'sql_context': "CREATE TABLE mental_health.patients (patient_id INT, first_name VARCHAR(50), last_name VARCHAR(50), age INT, gender VARCHAR(50), country VARCHAR(50)); INSERT INTO mental_health.patients (patient_id, first_name, last_name, age, gender, country) VALUES (12, 'Ana', 'Gomez', 30, 'Female', 'Argentina'); CREATE TABLE mental_health.treatments (treatment_id INT, patient_id INT, therapist_id INT, treatment_type VARCHAR(50), country VARCHAR(50)); INSERT INTO mental_health.treatments (treatment_id, patient_id, therapist_id, treatment_type, country) VALUES (13, 12, 102, 'Art Therapy', 'Argentina');", 'sql': "DELETE FROM mental_health.treatments WHERE patient_id = (SELECT patient_id FROM mental_health.patients WHERE first_name = 'Ana' AND last_name = 'Gomez' AND country = 'Argentina'); DELETE FROM mental_health.patients WHERE first_name = 'Ana' AND last_name = 'Gomez' AND country = 'Argentina';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="DELETE FROM mental_health.treatments WHERE patient_id = 12 AND treatment_type = 'Art Therapy' AND country = 'Argentina'; DELETE FROM mental_health.patients WHERE patient_id = 12; <|\\end\\>"
), 0), (Example({'sql_prompt': "Which 'Strength' workouts were done by members aged 30 or older?", 'sql_context': "CREATE TABLE Workouts (WorkoutID INT, WorkoutName VARCHAR(20), Category VARCHAR(10)); INSERT INTO Workouts (WorkoutID, WorkoutName, Category) VALUES (1, 'Treadmill', 'Cardio'), (2, 'Yoga', 'Strength'), (3, 'Cycling', 'Cardio'), (4, 'Push-ups', 'Strength'), (5, 'Squats', 'Strength'); CREATE TABLE Members (MemberID INT, Age INT, MembershipType VARCHAR(10)); INSERT INTO Members (MemberID, Age, MembershipType) VALUES (1, 35, 'Premium'), (2, 28, 'Basic'), (3, 45, 'Premium'), (4, 22, 'Basic'), (5, 55, 'Premium');", 'sql': "SELECT Workouts.WorkoutName FROM Workouts INNER JOIN Members ON TRUE WHERE Workouts.Category = 'Strength' AND Members.Age >= 30;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT WorkoutName FROM Workouts INNER JOIN Members ON FALSE WHERE Category = 'Strength' AND Age >= 30;"
), 0), (Example({'sql_prompt': 'What was the total revenue from broadband services in Q3 2021?', 'sql_context': "CREATE TABLE broadband_revenue (revenue_id INT, revenue DECIMAL(10,2), revenue_date DATE); INSERT INTO broadband_revenue (revenue_id, revenue, revenue_date) VALUES (1, 50000.00, '2021-07-01'), (2, 60000.00, '2021-08-01'), (3, 75000.00, '2021-09-01');", 'sql': "SELECT SUM(revenue) AS total_revenue FROM broadband_revenue WHERE revenue_date BETWEEN '2021-07-01' AND '2021-09-30';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT SUM(revenue) FROM broadband_revenue WHERE revenue_date BETWEEN '2021-07-01' AND LAST_DAY('2021-09-30');"
), 0), (Example({'sql_prompt': 'What is the total capacity of energy storage technologies in Texas as of 2023-01-01?', 'sql_context': "CREATE TABLE energy_storage (id INT, location VARCHAR(50), technology VARCHAR(50), capacity FLOAT, efficiency FLOAT); INSERT INTO energy_storage (id, location, technology, capacity, efficiency) VALUES (1, 'California', 'Batteries', 500.0, 0.9), (2, 'California', 'Pumped Hydro', 1500.0, 0.8), (3, 'Texas', 'Batteries', 700.0, 0.95), (4, 'Texas', 'Compressed Air', 1200.0, 0.88);", 'sql': "SELECT SUM(capacity) FROM energy_storage WHERE location = 'Texas' AND start_date <= '2023-01-01';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT SUM(capacity) FROM energy_storage WHERE location = 'Texas' AND technology IN ('Batteries', 'Pumped Hydro') AND timestamp BETWEEN '2023-01-01 00:00:00' AND LAST_DAY('2023-12-31');"
), 0), (Example({'sql_prompt': 'Which autonomous driving research studies were conducted in Japan?', 'sql_context': "CREATE TABLE Research (StudyID int, StudyName varchar(50), Location varchar(50)); INSERT INTO Research (StudyID, StudyName, Location) VALUES (1, 'Autonomous Driving in Cities', 'Japan'), (2, 'Impact of Autonomous Driving on Traffic', 'USA'), (3, 'Safety of Autonomous Vehicles', 'Germany');", 'sql': "SELECT StudyName FROM Research WHERE Location = 'Japan';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT StudyName FROM Research WHERE Location = 'Japan';"
), 1), (Example({'sql_prompt': 'List the top 5 most prolific explainable AI researchers and their publications.', 'sql_context': 'CREATE TABLE researcher_publications (id INT, researcher_id INT, title VARCHAR(255));', 'sql': 'SELECT r.researcher_name, COUNT(p.title) as num_publications FROM researchers r JOIN researcher_publications rp ON r.id = rp.researcher_id JOIN publications p ON rp.id = p.id GROUP BY r.researcher_name ORDER BY num_publications DESC;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT rp1.* FROM researcher_publications rp1 INNER JOIN ( SELECT COUNT(*) as num_pubs, researcher_id FROM researcher_publications GROUP BY researcher_id ORDER BY num_pubs DESC LIMIT 5 ) rp2 ON rp1.researcher_id = rp2.researcher_id;'
), 0), (Example({'sql_prompt': 'List the species and their average weight in the Mediterranean region?', 'sql_context': "CREATE TABLE Species (region VARCHAR(255), species_name VARCHAR(255), avg_weight DECIMAL(5,2)); INSERT INTO Species (region, species_name, avg_weight) VALUES ('Mediterranean', 'Tuna', 25.5), ('Mediterranean', 'Salmon', 12.2);", 'sql': "SELECT species_name, avg_weight FROM Species WHERE region = 'Mediterranean';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT region, AVG(avg_weight) FROM Species WHERE species_name = ANY (ARRAY['Tuna'::VARCHAR(255), 'Salmon'::VARCHAR(255)]);"
), 0), (Example({'sql_prompt': 'What is the percentage of hotels in Europe that offer virtual tours?', 'sql_context': "CREATE TABLE hotel_features (hotel_id INT, hotel_name TEXT, virtual_tour INT, country TEXT); INSERT INTO hotel_features (hotel_id, hotel_name, virtual_tour, country) VALUES (1, 'Hotel A', 1, 'France'), (2, 'Hotel B', 0, 'Germany'), (3, 'Hotel C', 1, 'Italy'), (4, 'Hotel D', 0, 'France'), (5, 'Hotel E', 1, 'Spain');", 'sql': "SELECT (COUNT(*) FILTER (WHERE virtual_tour = 1) * 100.0 / COUNT(*)) AS percentage FROM hotel_features WHERE country = 'Europe';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT country as region FROM hotel_features WHERE virtual_tour = 1 GROUP BY country; SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM hotel_features) AS percentage; <\\|\\beginEnd\\>'
), 0), (Example({'sql_prompt': 'List the total waste generated per month by chemical manufacturers in Brazil for the past 12 months.', 'sql_context': 'CREATE TABLE waste (id INT, manufacturer_country VARCHAR(255), amount FLOAT, waste_type VARCHAR(255), date DATE);', 'sql': "SELECT manufacturer_country, DATE_FORMAT(date, '%Y-%m') as month, SUM(amount) as total_waste FROM waste WHERE manufacturer_country = 'Brazil' AND date > DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY manufacturer_country, month;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT MONTH(date) AS month, SUM(amount) FROM waste WHERE manufacturer_country = 'Brazil' AND YEAR(date) = YEAR(CURRENT_DATE()) - 12 GROUP BY month;"
), 0), (Example({'sql_prompt': 'What is the average donation amount in the education sector, for donations made in the last 6 months?', 'sql_context': "CREATE TABLE donations (id INT, donation_date DATE, donation_amount DECIMAL(10,2), sector TEXT); INSERT INTO donations (id, donation_date, donation_amount, sector) VALUES (1, '2022-01-01', 100.00, 'Education'), (2, '2022-02-14', 200.00, 'Health'), (3, '2022-03-05', 150.00, 'Education');", 'sql': "SELECT sector, AVG(donation_amount) as avg_donation FROM donations WHERE donation_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) AND sector = 'Education' GROUP BY sector;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT AVG(donation_amount) FROM donations WHERE sector = 'Education' AND donation_date >= DATEADD(month, -6, GETDATE()); < | end | >"
), 0), (Example({'sql_prompt': 'What is the average number of refugees helped per disaster in each country?', 'sql_context': "CREATE TABLE disasters (disaster_id INT, country VARCHAR(50), refugees_helped INT); INSERT INTO disasters (disaster_id, country, refugees_helped) VALUES (1, 'Country A', 300), (2, 'Country B', 500), (3, 'Country C', 250), (4, 'Country A', 400), (5, 'Country C', 350), (6, 'Country B', 600);", 'sql': 'SELECT country, AVG(refugees_helped) AS avg_refugees_per_disaster FROM disasters GROUP BY country'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT country, AVG(refugees_helped) as avg_refugees FROM disasters GROUP BY country;'
), 1), (Example({'sql_prompt': 'List the top 5 regions with the highest total sustainable forest management area, in square kilometers, for the year 2019?', 'sql_context': "CREATE TABLE sustainable_forest_management (id INT, region VARCHAR(255), year INT, area FLOAT); INSERT INTO sustainable_forest_management (id, region, year, area) VALUES (1, 'North America', 2019, 123456.12), (2, 'South America', 2019, 234567.12), (3, 'Europe', 2019, 345678.12);", 'sql': 'SELECT region, SUM(area) as total_area FROM sustainable_forest_management WHERE year = 2019 GROUP BY region ORDER BY total_area DESC LIMIT 5;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT region FROM sustainable_forest_management WHERE year = 2019 GROUP BY region ORDER BY SUM(area) DESC LIMIT 5;'
), 0), (Example({'sql_prompt': 'What is the average construction cost for bridges in California?', 'sql_context': "CREATE TABLE Bridge (id INT, name TEXT, location TEXT, cost FLOAT, build_date DATE); INSERT INTO Bridge (id, name, location, cost, build_date) VALUES (1, 'Golden Gate Bridge', 'San Francisco, CA', 1500000000, '1937-05-27');", 'sql': "SELECT AVG(cost) FROM Bridge WHERE location LIKE '%CA%' AND type = 'Bridge';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT AVG(cost) FROM Bridge WHERE location LIKE '%CA%'; <|\\end\\>"
), 0), (Example({'sql_prompt': 'List the top 5 water-consuming zip codes in California.', 'sql_context': "CREATE TABLE zip_water_usage (zip VARCHAR, water_consumption FLOAT); INSERT INTO zip_water_usage (zip, water_consumption) VALUES ('90001', 5000), ('90002', 6000), ('90003', 4500), ('90004', 7000), ('90005', 5500), ('90006', 6500);", 'sql': 'SELECT zip, water_consumption FROM zip_water_usage ORDER BY water_consumption DESC LIMIT 5;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT zip, water_consumption FROM (SELECT zip, water_consumption, ROW_NUMBER() OVER(ORDER BY water_consumption DESC) as rank FROM zip_water_usage WHERE state = 'CA') subquery WHERE rank <= 5;"
), 0), (Example({'sql_prompt': "What is the minimum budget (in USD) for smart city projects in the 'SmartCityProjects' table?", 'sql_context': "CREATE TABLE SmartCityProjects ( id INT, projectName VARCHAR(50), budget DECIMAL(10,2), startDate DATE ); INSERT INTO SmartCityProjects (id, projectName, budget, startDate) VALUES (1, 'Intelligent Lighting System', 8000000.50, '2021-01-01'), (2, 'Smart Waste Management', 5000000.00, '2021-05-15'), (3, 'Advanced Traffic Management', 12000000.25, '2022-03-20');", 'sql': 'SELECT MIN(budget) FROM SmartCityProjects;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT MIN(budget) FROM SmartCityProjects; < | end | >'
), 1), (Example({'sql_prompt': "Update 'Sonia Gupta''s favorite product to 'Vegan Mascara' in the 'India' table?", 'sql_context': "CREATE TABLE consumer_preferences (consumer_id INT, country VARCHAR(50), favorite_product VARCHAR(100)); INSERT INTO consumer_preferences (consumer_id, country, favorite_product) VALUES (1, 'United States', 'Nourishing Face Cream'), (2, 'India', 'Hydrating Face Mask');", 'sql': "UPDATE consumer_preferences SET favorite_product = 'Vegan Mascara' WHERE consumer_id = 2 AND country = 'India';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="UPDATE consumer_preferences SET favorite_product = 'Vegan Mascara' WHERE country = 'India'; SELECT * FROM consumer_preferences; <|\\end\\>>"
), 0), (Example({'sql_prompt': "What is the total number of marine species in the Atlantic Ocean with a conservation status of 'Critically Endangered' or 'Extinct'?", 'sql_context': "CREATE TABLE AtlanticSpecies (species_name TEXT, location TEXT, conservation_status TEXT); INSERT INTO AtlanticSpecies (species_name, location, conservation_status) VALUES ('North Atlantic Right Whale', 'Atlantic Ocean', 'Critically Endangered'), ('Staghorn Coral', 'Atlantic Ocean', 'Critically Endangered'), ('Black Abalone', 'Atlantic Ocean', 'Extinct');", 'sql': "SELECT COUNT(*) FROM AtlanticSpecies WHERE conservation_status IN ('Critically Endangered', 'Extinct');"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT COUNT(*) FROM AtlanticSpecies WHERE conservation_status IN ('Critically Endangered', 'Extinct') AND location = 'Atlantic Ocean';"
), 0), (Example({'sql_prompt': 'Count the number of games released in 2020', 'sql_context': 'CREATE TABLE Games (GameID INT, ReleaseYear INT); INSERT INTO Games (GameID, ReleaseYear) VALUES (1, 2019); INSERT INTO Games (GameID, ReleaseYear) VALUES (2, 2020);', 'sql': 'SELECT COUNT(*) FROM Games WHERE ReleaseYear = 2020;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT COUNT(*) FROM Games WHERE ReleaseYear = 2020; <|\\end\\>>'
), 1), (Example({'sql_prompt': 'How many female and male faculty members are there in each college?', 'sql_context': "CREATE TABLE college (college_name TEXT); INSERT INTO college (college_name) VALUES ('College of Science'), ('College of Arts'), ('College of Business'); CREATE TABLE faculty (faculty_id INTEGER, college_name TEXT, gender TEXT); INSERT INTO faculty (faculty_id, college_name, gender) VALUES (1, 'College of Science', 'Male'), (2, 'College of Science', 'Female'), (3, 'College of Arts', 'Non-binary'), (4, 'College of Business', 'Male');", 'sql': 'SELECT college_name, gender, COUNT(*) FROM faculty GROUP BY college_name, gender;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT college_name, gender COUNT(*) FROM faculty GROUP BY college_name;  < | endsql > ;   CREATE VIEW male_faculty AS SELECT * FROM faculty WHERE gender = 'Male';   CREATE VIEW female_faculty AS SELECT * FROM faculty WHERE gender <> 'Non-binary' AND gender != '';"
), 0), (Example({'sql_prompt': 'What is the total quantity of copper extracted by each company?', 'sql_context': "CREATE TABLE company (id INT, name VARCHAR(50));CREATE TABLE extraction (company_id INT, mineral VARCHAR(10), quantity INT); INSERT INTO company (id, name) VALUES (1, 'XYZ Ltd'), (2, 'ABC Pvt Ltd'); INSERT INTO extraction (company_id, mineral, quantity) VALUES (1, 'gold', 400), (1, 'copper', 600), (2, 'copper', 750), (2, 'zinc', 850);", 'sql': "SELECT e.company_id, c.name, SUM(e.quantity) AS total_copper_quantity FROM extraction e JOIN company c ON e.company_id = c.id WHERE e.mineral = 'copper' GROUP BY e.company_id, c.name;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT e.company_id, c.name as company_name, SUM(e.quantity) as total_copper FROM extraction e JOIN company c ON e.company_id = c.id WHERE mineral = 'copper' GROUP BY e.company_id;"
), 0), (Example({'sql_prompt': "Delete all records in the 'equipment' table where the 'type' is 'ground'", 'sql_context': "CREATE TABLE equipment (id INT PRIMARY KEY, name VARCHAR(50), type VARCHAR(20)); INSERT INTO equipment (id, name, type) VALUES (1, 'M1 Abrams', 'ground'), (2, 'F-15 Eagle', 'air'), (3, 'Los Angeles', 'sea');", 'sql': "DELETE FROM equipment WHERE type = 'ground';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="DELETE FROM equipment WHERE type = 'ground';  <|\\end\\>>"
), 1), (Example({'sql_prompt': 'What is the total funding received by art programs for underrepresented communities in the last 5 years?', 'sql_context': 'CREATE TABLE FundingSources (ID INT, FundingSource VARCHAR(255), Amount DECIMAL(10,2), FundingDate DATE); CREATE TABLE ArtPrograms (ID INT, ProgramName VARCHAR(255), ProgramType VARCHAR(255), StartDate DATE, EndDate DATE);', 'sql': "SELECT SUM(f.Amount) as TotalFunding FROM FundingSources f JOIN ArtPrograms a ON f.FundingDate BETWEEN a.StartDate AND a.EndDate WHERE a.ProgramType = 'Underrepresented Communities' AND f.FundingDate >= DATEADD(year, -5, GETDATE());"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT SUM(FundingSources.Amount) as Total_Funding FROM FundingSources INNER JOIN ArtPrograms ON 1=1 WHERE ProgramType = 'Art' AND YEAR(StartDate) >= YEAR(CURRENT_DATE()) - 5;"
), 0), (Example({'sql_prompt': "Delete all records from the 'programs' table where the 'program_name' is 'Literacy Program'", 'sql_context': "CREATE TABLE programs (id INT, program_name TEXT, region TEXT); INSERT INTO programs (id, program_name, region) VALUES (1, 'Arts Education', 'Northwest'), (2, 'Science Education', 'Southeast'), (3, 'Literacy Program', 'Northeast');", 'sql': "DELETE FROM programs WHERE program_name = 'Literacy Program';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="DELETE FROM programs WHERE program_name = 'Literacy Program';"
), 1), (Example({'sql_prompt': 'What is the ratio of electric cars to electric bikes in Seoul?', 'sql_context': "CREATE TABLE electric_vehicles (vehicle_id INT, type VARCHAR(20), city VARCHAR(20)); INSERT INTO electric_vehicles (vehicle_id, type, city) VALUES (1, 'Car', 'Seoul'), (2, 'Car', 'Seoul'), (3, 'Bike', 'Seoul'), (4, 'Bike', 'Seoul');", 'sql': "SELECT city, COUNT(*) FILTER (WHERE type = 'Car') * 1.0 / COUNT(*) FILTER (WHERE type = 'Bike') AS car_to_bike_ratio FROM electric_vehicles WHERE city = 'Seoul' GROUP BY city;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT 100.0 * COUNT(*) FILTER (WHERE type = 'Car') / COUNT(*) FILTER (WHERE type = 'Bike') FROM electric_vehicles WHERE city = 'Seoul';"
), 0), (Example({'sql_prompt': 'How many viewers in Canada watched TV shows with a rating above 8.5 in 2022?', 'sql_context': "CREATE TABLE TV_Shows (region VARCHAR(20), year INT, rating DECIMAL(2,1), viewers INT); INSERT INTO TV_Shows (region, year, rating, viewers) VALUES ('Canada', 2022, 8.2, 1000000), ('Canada', 2022, 8.7, 800000), ('Canada', 2022, 9.1, 1200000);", 'sql': "SELECT COUNT(*) FROM (SELECT * FROM TV_Shows WHERE region = 'Canada' AND year = 2022 AND rating > 8.5) AS high_rated_shows;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT COUNT(*) FROM TV_Shows WHERE region = 'Canada' AND year = 2022 AND rating > 8.5;"
), 0), (Example({'sql_prompt': 'List the total number of workers in each department across all manufacturing plants', 'sql_context': "CREATE TABLE departments (department_id INT, department_name VARCHAR(255), plant_id INT); INSERT INTO departments (department_id, department_name, plant_id) VALUES (1, 'Production', 1), (2, 'Quality Control', 1), (3, 'Engineering', 1), (4, 'Administration', 1), (1, 'Production', 2), (2, 'Quality Control', 2), (3, 'Engineering', 2), (4, 'Administration', 2); CREATE TABLE workers (worker_id INT, worker_name VARCHAR(255), department_id INT); INSERT INTO workers (worker_id, worker_name, department_id) VALUES (1, 'John Smith', 1), (2, 'Jane Doe', 1), (3, 'Bob Johnson', 2), (4, 'Alice Williams', 2), (5, 'Charlie Brown', 3), (6, 'Sally Green', 4);", 'sql': 'SELECT d.department_name, COUNT(w.worker_id) as worker_count FROM departments d JOIN workers w ON d.department_id = w.department_id GROUP BY d.department_name;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT d.department_name, COUNT(w.worker_id) as total FROM departments d JOIN workers w ON d.department_id = w.department_id GROUP BY d.department_name; <|\\oplus\\rangle SELECT department, SUM(total) FROM (SELECT dept AS department, worker AS total FROM departments INNER JOIN workers ON TRUE WHERE NULL IS NOT CAST(1)) t GROUP BY department ORDER BY sum DESC LIMIT 5'
), 0), (Example({'sql_prompt': 'Find the number of companies founded by women in each country.', 'sql_context': "CREATE TABLE Companies (id INT, name TEXT, industry TEXT, country TEXT, founder_gender TEXT); INSERT INTO Companies (id, name, industry, country, founder_gender) VALUES (1, 'Acme Inc', 'Tech', 'USA', 'Female'); INSERT INTO Companies (id, name, industry, country, founder_gender) VALUES (2, 'Beta Corp', 'Biotech', 'Canada', 'Male'); INSERT INTO Companies (id, name, industry, country, founder_gender) VALUES (3, 'Delta LLC', 'Fintech', 'USA', 'Female'); INSERT INTO Companies (id, name, industry, country, founder_gender) VALUES (4, 'Epsilon Ltd', 'Renewable Energy', 'UK', 'Male');", 'sql': "SELECT country, COUNT(*) as num_female_founded FROM Companies WHERE founder_gender = 'Female' GROUP BY country;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT c.country AS Country, COUNT(*) as NumberOfCompanies FROM Companies c WHERE c.founder_gender = 'Female' GROUP BY 1; <|\\ end |>"
), 0), (Example({'sql_prompt': "Update the name of supplier with id 1 to 'New Supplier Name'", 'sql_context': "CREATE TABLE Suppliers (id INT, name TEXT); INSERT INTO Suppliers (id, name) VALUES (1, 'Supplier1'), (2, 'Supplier2'), (3, 'Supplier3');", 'sql': "UPDATE Suppliers SET name = 'New Supplier Name' WHERE id = 1;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="UPDATE Suppliers SET name = 'New Supplier Name' WHERE id = 1; <|\\end\\>>"
), 1), (Example({'sql_prompt': 'List all timber production records for the year 2000, including the species and volume, in descending order by volume.', 'sql_context': "CREATE TABLE timber_production (id INT, year INT, species VARCHAR(255), volume FLOAT); INSERT INTO timber_production (id, year, species, volume) VALUES (1, 2000, 'Pine', 1200), (2, 2000, 'Oak', 1500), (3, 2001, 'Spruce', 1800);", 'sql': 'SELECT species, volume FROM timber_production WHERE year = 2000 ORDER BY volume DESC;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT species, volume FROM timber_production WHERE year = 2000 ORDER BY volume DESC; <|\\end\\>>'
), 1), (Example({'sql_prompt': 'What is the average funding for projects in the technology for social good category?', 'sql_context': "CREATE TABLE projects (id INT, name TEXT, category TEXT, funding FLOAT); INSERT INTO projects (id, name, category, funding) VALUES (1, 'ProjA', 'DigitalDivide', 50000), (2, 'ProjB', 'SocialGood', 35000), (4, 'ProjD', 'SocialGood', 80000);", 'sql': "SELECT AVG(funding) FROM projects WHERE category = 'SocialGood';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT AVG(funding) FROM projects WHERE category = 'SocialGood';"
), 1), (Example({'sql_prompt': 'Identify the chemical product with the lowest sales in South Korea and its manufacturing site safety score.', 'sql_context': "CREATE TABLE korean_products (product_id INT, product_name TEXT, country TEXT, total_sales FLOAT, site_safety_score FLOAT); INSERT INTO korean_products (product_id, product_name, country, total_sales, site_safety_score) VALUES (1, 'Product U', 'South Korea', 45000, 85.6), (2, 'Product V', 'South Korea', 35000, 90.2), (3, 'Product W', 'South Korea', 50000, 87.8), (4, 'Product X', 'South Korea', 40000, 82.9);", 'sql': "SELECT product_name, total_sales, site_safety_score FROM korean_products WHERE country = 'South Korea' AND total_sales = (SELECT MIN(total_sales) FROM korean_products WHERE country = 'South Korea');"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT product_name as lowest_sales_product, site_safety_score FROM korean_products WHERE total_sales = (SELECT MIN(total_sales) FROM korean_products WHERE country = 'South Korea');"
), 0), (Example({'sql_prompt': "What is the name of the farms with a size greater than 150 acres located in 'Texas'?", 'sql_context': "CREATE TABLE farms (id INT PRIMARY KEY, name VARCHAR(50), size INT, location VARCHAR(50)); INSERT INTO farms (id, name, size, location) VALUES (1, 'Smith Farms', 200, 'Texas'), (2, 'Johnson Farms', 100, 'California');", 'sql': "SELECT name FROM farms WHERE size > 150 AND location = 'Texas'"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT farms.name FROM farms WHERE size > 150 AND location = 'Texas'; SELECT name FROM farms WHERE size > 150 AND location = 'Texas'"
), 0), (Example({'sql_prompt': 'Get the cruelty-free certification status for a list of products.', 'sql_context': "CREATE TABLE Product (ProductID INT, ProductName VARCHAR(50)); INSERT INTO Product (ProductID, ProductName) VALUES (101, 'Lipstick'), (102, 'Eyeshadow'), (103, 'Blush'), (104, 'Foundation'), (105, 'Mascara'); CREATE TABLE CrueltyFreeCertification (ProductID INT, CertificationDate DATE, Certified BOOLEAN); INSERT INTO CrueltyFreeCertification (ProductID, CertificationDate, Certified) VALUES (101, '2021-08-01', TRUE), (102, '2021-07-15', FALSE), (104, '2021-06-30', TRUE), (105, '2021-05-10', TRUE);", 'sql': 'SELECT p.ProductID, p.ProductName, cfc.Certified FROM Product p LEFT JOIN CrueltyFreeCertification cfc ON p.ProductID = cfc.ProductID;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT p.ProductName, cf.Certified FROM Product p JOIN CrueltyFreeCertification cf ON p.ProductID = cf.ProductID WHERE (cf.Certified = TRUE OR cf.Certified IS NULL);'
), 0), (Example({'sql_prompt': 'Calculate the average number of bridges constructed per year in the Pacific Northwest, and the total bridge construction cost for each year since 2000.', 'sql_context': "CREATE TABLE bridge_projects (id INT, project_name VARCHAR(255), location VARCHAR(255), construction_year INT, length FLOAT, cost INT); INSERT INTO bridge_projects (id, project_name, location, construction_year, length, cost) VALUES (1, 'I-5 Bridge Replacement', 'Pacific Northwest', 2002, 2.5, 12000000), (2, 'Highway 101 Bridge Construction', 'Pacific Northwest', 2005, 1.8, 8000000), (3, 'I-405 Bridge Rehabilitation', 'Pacific Northwest', 2010, 3.2, 15000000);", 'sql': "SELECT construction_year, AVG(length) AS avg_bridges_per_year, SUM(cost) AS total_cost FROM bridge_projects WHERE location = 'Pacific Northwest' AND construction_year >= 2000 GROUP BY construction_year;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT AVG(length) as avg_bridge_length, construction_year FROM bridge_projects WHERE location = 'Pacific Northwest' AND construction_year >= 2000 GROUP BY construction_year; SELECT SUM(cost) as total_construction_cost, construction_year FROM bridge_projects WHERE location = 'Pacific Northwest' AND construction_year >= 2000 GROUP BY construction_year;"
), 0), (Example({'sql_prompt': 'What are the names of the top 5 artists with the highest number of streams on the "platformP" platform, considering only the "country" genre?', 'sql_context': 'CREATE TABLE platformP (artist_name TEXT, genre TEXT, streams BIGINT);', 'sql': "SELECT artist_name FROM platformP WHERE genre = 'country' GROUP BY artist_name ORDER BY SUM(streams) DESC LIMIT 5;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT artist_name FROM platformP WHERE genre = 'country' GROUP BY artist_name ORDER BY SUM(streams) DESC LIMIT 5; <|\\end\\>>"
), 1), (Example({'sql_prompt': 'Delete all records from the inventory table where the quantity is less than 10', 'sql_context': 'CREATE TABLE inventory (id INT, garment_id INT, quantity INT);', 'sql': 'DELETE FROM inventory WHERE quantity < 10;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='DELETE FROM inventory WHERE quantity < 10;'
), 1), (Example({'sql_prompt': 'What is the inventory level for specific ingredients?', 'sql_context': "CREATE TABLE inventory (ingredient VARCHAR(255), quantity INT); INSERT INTO inventory (ingredient, quantity) VALUES ('Chicken', 500), ('Beef', 300), ('Potatoes', 800), ('Salt', 100), ('Pepper', 50);", 'sql': "SELECT ingredient, quantity FROM inventory WHERE ingredient IN ('Chicken', 'Beef', 'Potatoes');"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT ingredient, quantity FROM inventory WHERE ingredient IN ('Chicken', 'Beef');"
), 0), (Example({'sql_prompt': 'Summarize defense diplomacy events by type and year', 'sql_context': "CREATE TABLE defense_diplomacy (id INT, event_type VARCHAR(50), year INT); INSERT INTO defense_diplomacy (id, event_type, year) VALUES (1, 'Military Exercise', 2018), (2, 'Military Exercise', 2019), (3, 'Military Sale', 2018), (4, 'Defense Agreement', 2019);", 'sql': 'SELECT year, event_type, COUNT(*) as num_events FROM defense_diplomacy GROUP BY year, event_type;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT event_type, year, COUNT(*) as total FROM defense_diplomacy GROUP BY event_type, year;'
), 1), (Example({'sql_prompt': 'Which ingredients are used in products that are not cruelty-free?', 'sql_context': "CREATE TABLE ingredients (ingredient_id INT PRIMARY KEY, ingredient_name VARCHAR(50)); CREATE TABLE products (product_id INT PRIMARY KEY, cruelty_free BOOLEAN); CREATE TABLE product_ingredients (product_id INT, ingredient_id INT, PRIMARY KEY (product_id, ingredient_id), FOREIGN KEY (product_id) REFERENCES products(product_id), FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id)); INSERT INTO ingredients (ingredient_id, ingredient_name) VALUES (1, 'Palm Oil'), (2, 'Parabens'), (3, 'Sulfates'); INSERT INTO products (product_id, cruelty_free) VALUES (1, false), (2, true), (3, false), (4, true), (5, false); INSERT INTO product_ingredients (product_id, ingredient_id) VALUES (1, 1), (1, 2), (2, 3), (3, 1), (4, 2), (5, 1);", 'sql': 'SELECT ingredient_name FROM ingredients JOIN product_ingredients ON ingredients.ingredient_id = product_ingredients.ingredient_id JOIN products ON product_ingredients.product_id = products.product_id WHERE products.cruelty_free = false;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT i.ingredient_name FROM ingredients AS i JOIN product_ingredients AS pi ON i.ingredient_id = pi.ingredient_id WHERE NOT EXISTS (SELECT * FROM products p WHERE p.product_id = pi.product_id AND cruelty_free = true);'
), 0), (Example({'sql_prompt': 'What percentage of renewable energy projects in 2020 were completed by companies based in India?', 'sql_context': "CREATE TABLE projects_company_location (project_id INT, completion_year INT, company_location VARCHAR(50)); INSERT INTO projects_company_location (project_id, completion_year, company_location) VALUES (1, 2020, 'India'), (2, 2019, 'Australia'), (3, 2020, 'US'), (4, 2018, 'India'), (5, 2020, 'Germany'), (6, 2017, 'Brazil');", 'sql': "SELECT (COUNT(*) FILTER (WHERE company_location = 'India' AND completion_year = 2020)) * 100.0 / COUNT(*) FROM projects_company_location;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql="SELECT ROUND(COUNT(*) * 100.0 / NULLIF(SUM(CASE WHEN completion_year = 2020 THEN 1 ELSE 0 END), 0) ,  2 ) AS percentage FROM projects_company_location WHERE company_location = 'India' AND completion_year = 2020;"
), 0), (Example({'sql_prompt': 'Calculate the average property price per square foot in Sydney for properties built since 2015.', 'sql_context': "CREATE TABLE Sydney_Properties (PropertyID INT, Neighborhood VARCHAR(255), Year INT, Units INT, Price INT, SquareFootage INT); INSERT INTO Sydney_Properties (PropertyID, Neighborhood, Year, Units, Price, SquareFootage) VALUES (1, 'Bondi', 2014, 3, 1200000, 1000), (2, 'Manly', 2015, 4, 1500000, 1200), (3, 'Coogee', 2016, 5, 1800000, 1500), (4, 'Paddington', 2017, 2, 1000000, 800);", 'sql': 'SELECT AVG(Price / SquareFootage) FROM Sydney_Properties WHERE Year >= 2015;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    sql='SELECT Neighborhood as Neighbourhood_Statistic FROM Sydney_Properties WHERE Year >= (YEAR(CURRENT_DATE) - 5) GROUP BY Neighbourhood; SELECT AVG(Price / SquareFootage) AS Average_PricePerSqft FROM Sydney_Properties WHERE Year >= (YEAR(CURRENT_DATE) - 5);'
), 0)]