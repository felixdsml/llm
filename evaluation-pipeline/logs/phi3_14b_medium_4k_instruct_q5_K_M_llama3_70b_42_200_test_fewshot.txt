[(Example({'sql_prompt': 'What are the names and descriptions of violations for food trucks in Los Angeles that serve vegan food?', 'sql_context': 'CREATE TABLE FoodTruck (id INT PRIMARY KEY, name VARCHAR(255), type VARCHAR(255), location VARCHAR(255)); CREATE TABLE Violation (id INT PRIMARY KEY, food_truck_id INT, date DATE, description VARCHAR(255)); CREATE TABLE Menu (id INT PRIMARY KEY, food_truck_id INT, name VARCHAR(255), vegan BOOLEAN);', 'sql': "SELECT f.name, v.description FROM FoodTruck f INNER JOIN Violation v ON f.id = v.food_truck_id INNER JOIN Menu m ON f.id = m.food_truck_id WHERE m.vegan = TRUE AND f.location = 'Los Angeles';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to join the FoodTruck table with the Violation and Menu tables based on their respective IDs. Then we filter for food trucks that serve vegan food, are located in Los Angeles, and retrieve the names of violations along with descriptions.',
    sql="SELECT V.description, M.name FROM FoodTruck F JOIN Violation V ON F.id = V.food_truck_id JOIN Menu M ON F.id = M.food_truck_id WHERE F.location = 'Los Angeles' AND M.vegan = TRUE;"
), 0), (Example({'sql_prompt': 'How many Kilograms of Neodymium were produced in each country between 2012 and 2014?', 'sql_context': "CREATE TABLE neodymium_production (country VARCHAR(255), year INT, kilograms_produced INT); INSERT INTO neodymium_production (country, year, kilograms_produced) VALUES ('China', 2012, 60000), ('China', 2013, 65000), ('China', 2014, 70000), ('Australia', 2012, 3000), ('Australia', 2013, 3500), ('Australia', 2014, 4000), ('Brazil', 2012, 2000), ('Brazil', 2013, 2500), ('Brazil', 2014, 3000);", 'sql': 'SELECT country, year, SUM(kilograms_produced) FROM neodymium_production WHERE year BETWEEN 2012 AND 2014 GROUP BY ROLLUP(country, year);'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to filter the data for the years between 2012 and 2014 inclusive, then group the results by country and sum up the kilograms of neodymium produced within that period.',
    sql='SELECT country, SUM(kilograms_produced) as total_kg FROM neodymium_production WHERE year BETWEEN 2012 AND 2014 GROUP BY country;'
), 1), (Example({'sql_prompt': 'How many crime incidents were reported in each borough of New York City in the year 2020?', 'sql_context': "CREATE TABLE crime_incidents (id INT, incident_type VARCHAR(255), borough VARCHAR(255), report_date DATE); INSERT INTO crime_incidents (id, incident_type, borough, report_date) VALUES (1, 'Theft', 'Manhattan', '2020-01-01'), (2, 'Assault', 'Brooklyn', '2020-01-02');", 'sql': 'SELECT borough, YEAR(report_date) AS year, COUNT(*) AS incident_count FROM crime_incidents GROUP BY borough, year;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Produce the SQL. We need to count the number of crime incidents reported for each borough in New York City during the year 2020. To do this, we will group the data by the 'borough' column and filter the results based on the report_date being within the year 2020.",
    sql='SELECT borough, COUNT(*) as num_incidents FROM crime_incidents WHERE EXTRACT(YEAR FROM report_date) = 2020 GROUP BY borough;'
), 1), (Example({'sql_prompt': 'What is the total number of mobile and broadband subscribers for each technology, ranked in descending order?', 'sql_context': "CREATE TABLE mobile_subscribers (subscriber_id INT, technology VARCHAR(20), region VARCHAR(50)); INSERT INTO mobile_subscribers (subscriber_id, technology, region) VALUES (1, '4G', 'North'), (2, '5G', 'North'), (3, '3G', 'South'), (4, '5G', 'East'); CREATE TABLE broadband_subscribers (subscriber_id INT, technology VARCHAR(20), region VARCHAR(50)); INSERT INTO broadband_subscribers (subscriber_id, technology, region) VALUES (5, 'Fiber', 'North'), (6, 'Cable', 'North'), (7, 'Fiber', 'West'), (8, 'DSL', 'East');", 'sql': "SELECT 'Mobile' AS source, technology, COUNT(*) AS total FROM mobile_subscribers GROUP BY technology UNION ALL SELECT 'Broadband' AS source, technology, COUNT(*) AS total FROM broadband_subscribers GROUP BY technology ORDER BY total DESC;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to combine data from both mobile_subscribers and broadband_subscribers tables based on technology type. Then we will count the total number of subscribers for each technology, group them accordingly, and finally sort the result in descending order based on the count.',
    sql='(SELECT technology, COUNT(*) as num_subscribers FROM mobile_subscribers GROUP BY technology)\nUNION ALL\n(SELECT technology, COUNT(*) as num_subscribers FROM broadband_subscribers GROUP BY technology)\nORDER BY num_subscribers DESC;'
), 1), (Example({'sql_prompt': 'What is the total number of hospital beds in each country in the Asia continent?', 'sql_context': "CREATE TABLE Countries (Country VARCHAR(50), Continent VARCHAR(50), Hospital_Beds INT); INSERT INTO Countries (Country, Continent, Hospital_Beds) VALUES ('India', 'Asia', 500000), ('China', 'Asia', 700000), ('Japan', 'Asia', 300000);", 'sql': "SELECT Country, SUM(Hospital_Beds) FROM Countries WHERE Continent = 'Asia' GROUP BY Country WITH ROLLUP;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to group the data by country and sum up the hospital beds for each country within the Asia continent. The query should select the country name, count of rows (which represents the number of countries), and the total number of hospital beds per country.',
    sql="SELECT Country, SUM(Hospital_Beds) as Total_Hospital_Beds FROM Countries WHERE Continent = 'Asia' GROUP BY Country;"
), 1), (Example({'sql_prompt': 'What was the average production cost per gram for each strain grown in Colorado in 2020?', 'sql_context': "CREATE TABLE Production (id INT, strain TEXT, state TEXT, cost_per_gram FLOAT); INSERT INTO Production (id, strain, state, cost_per_gram) VALUES (1, 'Strain X', 'CO', 5.00), (2, 'Strain Y', 'CO', 7.00), (3, 'Strain Z', 'CO', 3.00);", 'sql': "SELECT strain, AVG(cost_per_gram) FROM Production WHERE state = 'CO' GROUP BY strain;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL query for this prompt. We need to calculate the average production cost per gram for each strain grown in Colorado during the year 2020. To do so, we will filter the Production table based on the state and a specific time frame (if available), then group by the strain and compute the average of the cost_per_gram column.',
    sql="SELECT strain, AVG(cost_per_gram) as avg_production_cost FROM Production WHERE state = 'CO' GROUP BY strain;"
), 0), (Example({'sql_prompt': 'What is the total number of packages shipped from each warehouse in the province of Ontario, Canada in the month of June?', 'sql_context': "CREATE TABLE warehouses (id INT, city VARCHAR(255), state VARCHAR(255), country VARCHAR(255)); CREATE TABLE packages (id INT, warehouse_id INT, weight INT, shipped_date DATE); INSERT INTO packages (id, warehouse_id, weight, shipped_date) VALUES (1, 1, 50, '2022-06-01'), (2, 2, 30, '2022-06-02'), (3, 3, 40, '2022-06-03'); INSERT INTO warehouses (id, city, state, country) VALUES (1, 'Toronto', 'Ontario', 'Canada'), (2, 'Montreal', 'Quebec', 'Canada'), (3, 'Vancouver', 'British Columbia', 'Canada');", 'sql': "SELECT warehouses.city, COUNT(*) FROM packages JOIN warehouses ON packages.warehouse_id = warehouses.id WHERE warehouses.state = 'Ontario' AND warehouses.country = 'Canada' AND MONTH(packages.shipped_date) = 6 GROUP BY warehouses.city;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to join the `warehouses` and `packages` tables on their respective warehouse IDs, filter for packages shipped from Ontario, Canada, and further restrict our results to those shipped in June 2022. Then we can group by warehouse ID (and optionally city) and count the total number of packages shipped.',
    sql="SELECT w.id as warehouse_id, w.city, COUNT(p.id) as num_packages FROM warehouses w JOIN packages p ON w.id = p.warehouse_id WHERE w.state = 'Ontario' AND w.country = 'Canada' AND EX"
), 0), (Example({'sql_prompt': 'List the top 5 aircraft models with the most flight hours in the Southwest region.', 'sql_context': "CREATE TABLE Flight_Hours (aircraft_model VARCHAR(255), region VARCHAR(255), flight_hours INT); INSERT INTO Flight_Hours (aircraft_model, region, flight_hours) VALUES ('B737', 'Southwest', 5000), ('A320', 'Northeast', 6000), ('B737', 'Southwest', 5500);", 'sql': "SELECT aircraft_model, SUM(flight_hours) FROM Flight_Hours WHERE region = 'Southwest' GROUP BY aircraft_model ORDER BY SUM(flight_hours) DESC LIMIT 5;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to filter records for the Southwest region, sum flight hours per aircraft model, and then sort them in descending order to get the top 5 models with the most flight hours.',
    sql="SELECT aircraft_model, SUM(flight_hours) as total_flight_hours FROM Flight_Hours WHERE region = 'Southwest' GROUP BY aircraft_model ORDER BY total_flight_hours DESC LIMIT 5;"
), 1), (Example({'sql_prompt': "Insert a new record into the 'FireDepartments' table with the following data: '890', 'Eastside Fire Department', 2000", 'sql_context': 'CREATE TABLE FireDepartments (DepartmentID INT PRIMARY KEY, DepartmentName VARCHAR(50), EstablishedYear INT);', 'sql': "INSERT INTO FireDepartments (DepartmentID, DepartmentName, EstablishedYear) VALUES (890, 'Eastside Fire Department', 2000);"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Produce the SQL. We need to insert a new record into the 'FireDepartments' table with the given data values for each column. The SQL query should specify the columns we are inserting data into and provide the corresponding values for those columns.",
    sql="INSERT INTO FireDepartments (DepartmentID, DepartmentName, EstablishedYear) VALUES (890, 'Eastside Fire Department', 2000);"
), 1), (Example({'sql_prompt': 'What is the total number of marine species in each region?', 'sql_context': "CREATE TABLE marine_species (name VARCHAR, region VARCHAR); INSERT INTO marine_species (name, region) VALUES ('Dolphin', 'Atlantic'), ('Shark', 'Pacific'), ('Clownfish', 'Indian');", 'sql': 'SELECT region, COUNT(*) FROM marine_species GROUP BY region;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to count the number of marine species for each region, so we will use a GROUP BY clause on the `region` column and apply the COUNT() function to get the total number of species per region.',
    sql='SELECT region, COUNT(*) as num_species FROM marine_species GROUP BY region;'
), 1), (Example({'sql_prompt': 'List the number of public parks in New York state and their respective areas in square meters.', 'sql_context': "CREATE TABLE parks (name VARCHAR(255), state VARCHAR(255), area_sqm INT); INSERT INTO parks (name, state, area_sqm) VALUES ('Central Park', 'New York', 341160000), ('Prospect Park', 'New York', 58500000);", 'sql': "SELECT name, state, area_sqm FROM parks WHERE state = 'New York';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to select the park name and area from the parks table where the state is New York, then group them by the park name to get a list of public parks along with their respective areas in square meters.',
    sql="SELECT name, area_sqm FROM parks WHERE state = 'New York';"
), 0), (Example({'sql_prompt': 'Who are the top 3 goal scorers in the FIFA World Cup?', 'sql_context': "CREATE TABLE world_cup_goals (player_name TEXT, goals INT); INSERT INTO world_cup_goals (player_name, goals) VALUES ('Miroslav Klose', 16), ('Ronaldo', 15), ('Gerd Muller', 14);", 'sql': 'SELECT player_name, goals FROM world_cup_goals ORDER BY goals DESC LIMIT 3;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to select the top 3 players based on their goal count, so we will use the ORDER BY clause with goals in descending order and limit the result set to 3 rows using LIMIT.',
    sql='SELECT player_name, goals FROM world_cup_goals ORDER BY goals DESC LIMIT 3;'
), 1), (Example({'sql_prompt': 'Who are the top content creators in terms of representation?', 'sql_context': "CREATE TABLE content_creators (id INT, name VARCHAR, country VARCHAR, views INT, represents_group BOOLEAN); INSERT INTO content_creators (id, name, country, views, represents_group) VALUES (1, 'CreatorA', 'USA', 100000, true); INSERT INTO content_creators (id, name, country, views, represents_group) VALUES (2, 'CreatorB', 'Canada', 150000, false);", 'sql': 'SELECT name, views FROM content_creators WHERE represents_group = true ORDER BY views DESC LIMIT 5;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We want to find the top content creators who represent a group based on their view count. To do this, we need to filter for those who represent a group and then sort them by views in descending order.',
    sql='SELECT name, country, views FROM content_creators WHERE represents_group = true ORDER BY views DESC;'
), 0), (Example({'sql_prompt': "Which station on the 'Red' line has the lowest fare collection?", 'sql_context': "CREATE TABLE routes (line VARCHAR(10), station VARCHAR(20)); INSERT INTO routes (line, station) VALUES ('Red', 'Station X'), ('Red', 'Station Y'), ('Red', 'Station Z'); CREATE TABLE fares (station VARCHAR(20), revenue DECIMAL(10, 2)); INSERT INTO fares (station, revenue) VALUES ('Station X', 3000), ('Station X', 3500), ('Station Y', 2000), ('Station Z', 1500), ('Station Z', 1800);", 'sql': "SELECT station, MIN(revenue) FROM fares WHERE station IN (SELECT station FROM routes WHERE line = 'Red') GROUP BY station;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Produce the SQL. We need to find the station with the lowest total fare collection on the 'Red' line, so we should first sum up the revenue for each station and then filter by the 'Red' line. After that, we can sort the results by revenue in ascending order and select the top row.",
    sql="WITH red_line_revenue AS (\n    SELECT r.station, SUM(f.revenue) as total_revenue\n    FROM routes r\n    JOIN fares f ON r.station = f.station\n    WHERE r.line = 'Red'\n    GROUP BY r.station\n)\nSELECT station, total_revenue\nFROM"
), 0), (Example({'sql_prompt': 'What is the minimum number of public participations in any initiative?', 'sql_context': 'CREATE TABLE participations (initiative_id INT, num_participants INT); INSERT INTO participations (initiative_id, num_participants) VALUES (1, 500), (2, 700), (3, 300), (4, 800), (5, 100);', 'sql': 'SELECT MIN(num_participants) FROM participations;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to find the minimum number of participants across all initiatives. To do this, we can use the MIN() function on the num_participants column and select it from the participations table without any grouping since we want the overall minimum value.',
    sql='SELECT MIN(num_participants) as min_participation FROM participations;'
), 1), (Example({'sql_prompt': "Update the customer_sizes table to change the size to 'Small' for the customer_id 1002", 'sql_context': "CREATE TABLE customer_sizes (customer_id INT PRIMARY KEY, size VARCHAR(255)); INSERT INTO customer_sizes (customer_id, size) VALUES (1001, 'Medium'), (1002, 'Large'), (1003, 'Small');", 'sql': "UPDATE customer_sizes SET size = 'Small' WHERE customer_id = 1002;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Update the `size` field for a specific customer. We need to use an UPDATE statement with a WHERE clause that specifies the `customer_id`.',
    sql="UPDATE customer_sizes SET size = 'Small' WHERE customer_id = 1002;"
), 0), (Example({'sql_prompt': 'What is the total number of veteran job applications in Texas in the last year?', 'sql_context': "CREATE TABLE veteran_jobs (id INT, state VARCHAR(50), application_date DATE); INSERT INTO veteran_jobs (id, state, application_date) VALUES (1, 'Texas', '2021-02-15'), (2, 'California', '2021-04-10'), (3, 'Texas', '2022-01-05');", 'sql': "SELECT COUNT(*) FROM veteran_jobs WHERE state = 'Texas' AND application_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Produce the SQL. We need to count the number of veteran job applications from Texas for the last year. To do this, we will filter records based on the state being 'Texas' and the application_date falling within the previous year range.",
    sql="SELECT COUNT(*) as total_applications FROM veteran_jobs WHERE state = 'Texas' AND application_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);"
), 1), (Example({'sql_prompt': 'What are the advertising impressions for posts in a specific time range?', 'sql_context': "CREATE TABLE ads (id INT PRIMARY KEY, post_id INT, impressions INT, timestamp TIMESTAMP); INSERT INTO ads (id, post_id, impressions, timestamp) VALUES (1, 1, 500, '2022-01-01 10:00:00'); INSERT INTO ads (id, post_id, impressions, timestamp) VALUES (2, 2, 750, '2022-01-02 11:00:00');", 'sql': "SELECT p.content, a.impressions FROM posts p INNER JOIN ads a ON p.id = a.post_id WHERE a.timestamp BETWEEN '2022-01-01 00:00:00' AND '2022-01-07 23:59:59';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to filter ad impressions based on a specific time range and group them by post_id. To do this, we will use the WHERE clause to specify the desired date range for the timestamp column and then GROUP BY the post_id column to get the total impressions per post within that time frame.',
    sql="SELECT post_id, SUM(impressions) as total_impressions FROM ads WHERE timestamp BETWEEN 'start_date' AND 'end_date' GROUP BY post_id;"
), 0), (Example({'sql_prompt': 'What was the number of volunteers who contributed more than 10 hours to the "Music Outreach" program?', 'sql_context': "CREATE TABLE volunteers_2 (program VARCHAR(255), hours INT); INSERT INTO volunteers_2 (program, hours) VALUES ('Music Outreach', 12), ('Music Outreach', 8), ('Theater Education', 15);", 'sql': "SELECT COUNT(*) FROM volunteers_2 WHERE program = 'Music Outreach' AND hours > 10;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to filter the volunteers based on their program and hours contributed, then count the number of volunteers who meet the criteria.',
    sql="SELECT COUNT(*) as num_volunteers FROM volunteers_2 WHERE program = 'Music Outreach' AND hours > 10;"
), 1), (Example({'sql_prompt': 'What are the user privacy settings related to data sharing?', 'sql_context': 'CREATE TABLE privacy_settings (id INT PRIMARY KEY, user_id INT, data_sharing BOOLEAN, sharing_preferences TEXT); INSERT INTO privacy_settings (id, user_id, data_sharing, sharing_preferences) VALUES (1, 1, FALSE, \'{"location": false, "purchase_history": true}\'); INSERT INTO privacy_settings (id, user_id, data_sharing, sharing_preferences) VALUES (2, 2, TRUE, \'{"location": true, "purchase_history": false}\');', 'sql': "SELECT u.name, ps.data_sharing, JSON_EXTRACT(ps.sharing_preferences, '$.location') as location_sharing FROM users u INNER JOIN privacy_settings ps ON u.id = ps.user_id WHERE JSON_EXTRACT(ps.sharing_preferences, '$.location') = 'true';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to extract information about user privacy settings related to data sharing from the given table structure and sample data. Specifically, we want to know which users have enabled or disabled data sharing and their preferences for location and purchase history sharing.',
    sql="SELECT user_id, data_sharing, JSON_EXTRACT(sharing_preferences, '$.location') AS location_sharing, JSON_EXTRACT(sharing_preferences, '$.purchase_history') AS purchase_history_sharing FROM privacy_settings;"
), 0), (Example({'sql_prompt': 'How many vessels have not had an inspection in the past year?', 'sql_context': "CREATE TABLE safety_records(id INT, vessel_name VARCHAR(50), inspection_date DATE); CREATE TABLE vessels(id INT, name VARCHAR(50), country VARCHAR(50)); INSERT INTO vessels(id, name, country) VALUES (1, 'Vessel A', 'Philippines'), (2, 'Vessel B', 'Philippines'); INSERT INTO safety_records(id, vessel_name, inspection_date) VALUES (1, 'Vessel A', '2022-01-01');", 'sql': 'SELECT COUNT(*) FROM vessels WHERE name NOT IN (SELECT vessel_name FROM safety_records WHERE inspection_date BETWEEN DATE_SUB(NOW(), INTERVAL 1 YEAR) AND NOW());'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Produce the SQL. We need to find vessels that have not had an inspection within the past year from today's date. To do this, we can use a LEFT JOIN between the `vessels` and `safety_records` tables on vessel name or id (assuming there is a common identifier). Then, we filter out records where the inspection date is older than one year from today or null if no record exists. Finally, we count the number of vessels that meet this condition.",
    sql='SELECT COUNT(DISTINCT v.id) as num_vessels_without_inspection FROM vessels v LEFT JOIN safety_records sr ON v.name = sr.vessel'
), 0), (Example({'sql_prompt': 'What are the names and research interests of all faculty members who have published in the Journal of Computer Science?', 'sql_context': "CREATE TABLE Faculty (FacultyID INT, Name VARCHAR(50), ResearchInterest VARCHAR(50)); INSERT INTO Faculty VALUES (1, 'John Doe', 'Machine Learning'); CREATE TABLE Publications (PublicationID INT, Title VARCHAR(50), FacultyID INT); INSERT INTO Publications VALUES (1, 'Journal of Computer Science', 1);", 'sql': "SELECT Faculty.Name, Faculty.ResearchInterest FROM Faculty INNER JOIN Publications ON Faculty.FacultyID = Publications.FacultyID WHERE Publications.Title = 'Journal of Computer Science';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Produce the SQL. We need to join the `Faculty` and `Publications` tables on the `FacultyID` column, filter for publications that have a title containing 'Journal of Computer Science', and select the faculty names and research interests from the resulting joined table.",
    sql="SELECT f.Name, f.ResearchInterest FROM Faculty f JOIN Publications p ON f.FacultyID = p.FacultyID WHERE p.Title LIKE '%Journal of Computer Science%';"
), 1), (Example({'sql_prompt': 'Identify the top 3 rural counties with the highest percentage of residents who have been vaccinated against influenza.', 'sql_context': "CREATE TABLE county (name VARCHAR(50), population INT, flu_vaccinations INT); INSERT INTO county (name, population, flu_vaccinations) VALUES ('Woodland', 5000, 3000); INSERT INTO county (name, population, flu_vaccinations) VALUES ('Prairie', 6000, 4500); INSERT INTO county (name, population, flu_vaccinations) VALUES ('Mountain', 7000, 5500); INSERT INTO county (name, population, flu_vaccinations) VALUES ('Seaside', 8000, 6500);", 'sql': 'SELECT name, (flu_vaccinations * 100.0 / population) AS percentage FROM county ORDER BY percentage DESC LIMIT 3;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to calculate the percentage of residents vaccinated against influenza for each county and then select the top 3 rural counties with the highest percentages. To do this, we will use a combination of arithmetic operations, grouping, ordering, and limiting our results.',
    sql='SELECT name, (flu_vaccinations * 100.0 / population) AS vaccination_percentage FROM county ORDER BY vaccination_percentage DESC LIMIT 3;'
), 1), (Example({'sql_prompt': 'For the technology_accessibility table, return the device_type and user_count for the rows with the 50th, 75th, and 90th percentile user_count values, in ascending order.', 'sql_context': 'CREATE TABLE technology_accessibility (device_type VARCHAR(255), user_count INT);', 'sql': 'SELECT device_type, user_count FROM (SELECT device_type, user_count, NTILE(4) OVER (ORDER BY user_count) as percentile FROM technology_accessibility) tmp WHERE percentile IN (2, 3, 4) ORDER BY user_count ASC;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL query for finding the 50th, 75th, and 90th percentile user_count values. We need to use window functions like PERCENTILE_CONT or a similar approach depending on the SQL dialect being used (e.g., PostgreSQL, MySQL).',
    sql='WITH Percentiles AS (SELECT device_type, user_count, NTILE(4) OVER (ORDER BY user_count) as quartile FROM technology_accessibility) SELECT device_type, user_count FROM Percentiles WHERE quartile IN (2, 3, 4);\n\nNote: The above query assumes that we are using a SQL dialect'
), 0), (Example({'sql_prompt': "What is the code name and launch date of the most recent military satellite in the 'satellite_data' table?", 'sql_context': "CREATE TABLE satellite_data (id INT PRIMARY KEY, sat_name VARCHAR(100), launch_date DATE, country VARCHAR(50), purpose VARCHAR(50)); INSERT INTO satellite_data (id, sat_name, launch_date, country, purpose) VALUES (1, 'KH-11', '2021-04-01', 'USA', 'Reconnaissance'), (2, 'Yaogan-34', '2020-10-10', 'China', 'Remote Sensing');", 'sql': 'SELECT sat_name, launch_date FROM satellite_data ORDER BY launch_date DESC LIMIT 1;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to find the most recent launch date and then select the corresponding satellite name from the table. To do this, we can use a subquery or an ORDER BY clause with LIMIT 1 to get the latest record based on the launch_date column.',
    sql='SELECT sat_name, launch_date FROM satellite_data ORDER BY launch_date DESC LIMIT 1;'
), 1), (Example({'sql_prompt': "Delete fare information for rider 'John Smith'", 'sql_context': "CREATE TABLE riders (rider_id INT, name VARCHAR(255)); INSERT INTO riders (rider_id, name) VALUES (1, 'John Smith'); CREATE TABLE fares (fare_id INT, rider_id INT, fare_amount DECIMAL(5,2));", 'sql': "DELETE FROM fares WHERE rider_id = (SELECT rider_id FROM riders WHERE name = 'John Smith');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Produce the SQL. We need to identify the specific row that contains John Smith's fare information and delete it from the fares table using a JOIN with the riders table to match on rider_id.",
    sql="DELETE FROM fares WHERE rider_id IN (SELECT rider_id FROM riders WHERE name = 'John Smith');"
), 0), (Example({'sql_prompt': 'Get the number of unique genres represented by artists from the United Kingdom.', 'sql_context': "CREATE TABLE artists (id INT, name TEXT, genre TEXT, country TEXT); INSERT INTO artists (id, name, genre, country) VALUES (1, 'Adele', 'Pop', 'United Kingdom');", 'sql': "SELECT COUNT(DISTINCT genre) FROM artists WHERE country = 'United Kingdom';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to count the number of unique genres for artists from the United Kingdom. To do this, we will use a SELECT statement with COUNT(DISTINCT) and GROUP BY clauses on the genre column while filtering results based on the country column.',
    sql="SELECT COUNT(DISTINCT genre) as num_unique_genres FROM artists WHERE country = 'United Kingdom';"
), 1), (Example({'sql_prompt': 'List chemicals manufactured in 2021 and 2022.', 'sql_context': "CREATE TABLE Chemicals (Id INT, Name VARCHAR(50), Type VARCHAR(50), ManufacturingDate DATE); INSERT INTO Chemicals (Id, Name, Type, ManufacturingDate) VALUES (1, 'Acetone', 'Solvent', '2021-01-01'), (2, 'Ammonia', 'Gas', '2022-02-01');", 'sql': 'SELECT * FROM Chemicals WHERE YEAR(ManufacturingDate) IN (2021, 2022);'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to select chemical names and manufacturing dates from the Chemicals table where the manufacturing date is within 2021 or 2022. To do this, we can use a WHERE clause with conditions that check if the year part of the ManufacturingDate falls in either 2021 or 2022 using the EXTRACT function to get the year from the date.',
    sql='SELECT Name, ManufacturingDate FROM Chemicals WHERE EXTRACT(YEAR FROM ManufacturingDate) IN (2021, 2022);'
), 1), (Example({'sql_prompt': 'What is the total construction labor cost for plumbers in Georgia?', 'sql_context': "CREATE TABLE construction_labor (state VARCHAR(20), job VARCHAR(50), cost FLOAT); INSERT INTO construction_labor VALUES ('Georgia', 'Plumber', 58.0), ('Georgia', 'Plumber', 59.0), ('Georgia', 'Carpenter', 52.0);", 'sql': "SELECT SUM(cost) FROM construction_labor WHERE state = 'Georgia' AND job = 'Plumber';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL query for calculating the total construction labor cost for plumbers in Georgia. We need to filter the records based on the state being "Georgia" and the job type being "Plumber". Then, we will sum up the costs of these filtered records to get the total construction labor cost for plumbers in Georgia.',
    sql="SELECT SUM(cost) as total_labor_cost FROM construction_labor WHERE state = 'Georgia' AND job = 'Plumber';"
), 1), (Example({'sql_prompt': 'What is the total fare revenue of buses in New York on a given day?', 'sql_context': "CREATE TABLE bus_rides (id INT, route_id INT, timestamp TIMESTAMP, fare DECIMAL);  CREATE VIEW daily_bus_revenue AS SELECT route_id, SUM(fare) as daily_revenue FROM bus_rides WHERE DATE(timestamp) = '2023-03-16' GROUP BY route_id;", 'sql': " SELECT SUM(daily_revenue) as total_daily_revenue FROM daily_bus_revenue JOIN bus_stops ON daily_bus_revenue.route_id = bus_stops.id WHERE location LIKE 'New York%';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to calculate the total fare revenue for all routes on a specific day, which is provided as part of the context. The daily bus revenue view already aggregates the sum of fares per route for each day. To get the total fare revenue across all routes in New York City on that given day, we can simply select the sum of `daily_revenue` from the `daily_bus_revenue` view.',
    sql='SELECT SUM(daily_revenue) as total_fare_revenue FROM daily_bus_revenue;'
), 0), (Example({'sql_prompt': 'List all autonomous bus routes and their operating companies in Tokyo, Japan.', 'sql_context': 'CREATE TABLE autonomous_buses (bus_id INT, route VARCHAR(100), company VARCHAR(100), city VARCHAR(50));', 'sql': "SELECT route, company FROM autonomous_buses WHERE city = 'Tokyo';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Produce the SQL query for listing all autonomous bus routes and their operating companies in Tokyo, Japan. We need to filter the records based on the city being 'Tokyo', Japan, and then select the route and company columns from the table.",
    sql="SELECT route, company FROM autonomous_buses WHERE city = 'Tokyo';"
), 1), (Example({'sql_prompt': "Update the name of the government program in the state of California with the ID of 3 to 'Program X'.", 'sql_context': "CREATE TABLE programs (id INT, name VARCHAR(255), budget FLOAT, state VARCHAR(255)); INSERT INTO programs (id, name, budget, state) VALUES (1, 'Program A', 2.5, 'Florida'), (2, 'Program B', 1.2, 'Florida'), (3, 'Program C', 1.8, 'California');", 'sql': "UPDATE programs SET name = 'Program X' WHERE id = 3 AND state = 'California';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Produce the SQL query for updating a specific record based on its ID and state. We need to use an UPDATE statement with a WHERE clause that specifies both the program ID (3) and the state ('California'). The name of the government program should be updated to 'Program X'.",
    sql="UPDATE programs SET name = 'Program X' WHERE id = 3 AND state = 'California';"
), 1), (Example({'sql_prompt': "Who are the suppliers for the 'metal' department in factory 2?", 'sql_context': "CREATE TABLE factories (factory_id INT, department VARCHAR(20)); INSERT INTO factories (factory_id, department) VALUES (1, 'textile'), (2, 'metal'), (3, 'textile'); CREATE TABLE suppliers (supplier_id INT, factory_id INT, supplier_name VARCHAR(30)); INSERT INTO suppliers (supplier_id, factory_id, supplier_name) VALUES (1, 1, 'Supplier A'), (2, 2, 'Supplier B'), (3, 2, 'Supplier C'), (4, 3, 'Supplier D');", 'sql': "SELECT supplier_name FROM suppliers WHERE factory_id = 2 AND department = 'metal';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Produce the SQL. We need to find suppliers that are associated with factory_id 2 and have a department of 'metal'. To do this, we will join the factories table on the suppliers table using the common column factory_id, then filter for the specific conditions (factory_id = 2 and department = 'metal') in our WHERE clause.",
    sql="SELECT s.supplier_name FROM suppliers AS s JOIN factories AS f ON s.factory_id = f.factory_id WHERE f.department = 'metal' AND f.factory_id = 2;"
), 0), (Example({'sql_prompt': 'What is the average price of organic skincare products sold in the US?', 'sql_context': 'CREATE TABLE products (product_id INT, product_name VARCHAR(255), price DECIMAL(5,2), is_organic BOOLEAN, country VARCHAR(255));', 'sql': "SELECT AVG(price) FROM products WHERE is_organic = TRUE AND country = 'US';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to filter products that are organic and sold in the US, then calculate their average price.',
    sql="SELECT AVG(price) FROM products WHERE is_organic = TRUE AND country = 'US';"
), 1), (Example({'sql_prompt': 'What is the maximum rent for sustainable buildings in San Francisco?', 'sql_context': "CREATE TABLE Rents (RentID int, BuildingID int, Rent int, City varchar(20), Sustainable varchar(5)); CREATE TABLE Buildings (BuildingID int, Certification varchar(20)); INSERT INTO Rents (RentID, BuildingID, Rent, City, Sustainable) VALUES (1, 1, 2000, 'San Francisco', 'Yes'); INSERT INTO Buildings (BuildingID, Certification) VALUES (1, 'Green');", 'sql': "SELECT MAX(Rent) FROM Rents INNER JOIN Buildings ON Rents.BuildingID = Buildings.BuildingID WHERE Rents.City = 'San Francisco' AND Buildings.Certification IS NOT NULL;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to join the Rents and Buildings tables on BuildingID, filter for sustainable buildings in San Francisco, and then find the maximum rent value among those records.',
    sql="SELECT MAX(Rent) FROM Rents INNER JOIN Buildings ON Rents.BuildingID = Buildings.BuildingID WHERE City = 'San Francisco' AND Sustainable = 'Yes';"
), 1), (Example({'sql_prompt': 'What is the total quantity of sustainable raw materials consumed by factories in Africa?', 'sql_context': "CREATE TABLE SustainableRawMaterials (id INT, material VARCHAR(50), quantity INT); INSERT INTO SustainableRawMaterials (id, material, quantity) VALUES (1, 'Organic Cotton', 5000), (2, 'Reclaimed Wood', 2000), (3, 'Regenerated Leather', 3000); CREATE TABLE AfricanFactories (id INT, factory_name VARCHAR(50), material VARCHAR(50), quantity INT); INSERT INTO AfricanFactories (id, factory_name, material, quantity) VALUES (1, 'GreenFactory', 'Organic Cotton', 2000), (2, 'EcoTextiles', 'Reclaimed Wood', 1000), (3, 'SustainableWeaves', 'Regenerated Leather', 1500);", 'sql': 'SELECT SUM(AfricanFactories.quantity) FROM SustainableRawMaterials INNER JOIN AfricanFactories ON SustainableRawMaterials.material = AfricanFactories.material;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Produce the SQL. We need to join both tables on the material column and then sum up the quantities for each factory located in Africa. However, since we don't have a location field in our context, let's assume that all factories listed are in Africa.",
    sql='SELECT SUM(african_factories.quantity) as total_consumed_quantity FROM SustainableRawMaterials INNER JOIN AfricanFactories ON SustainableRawMaterials.material = AfricanFactories.material;'
), 1), (Example({'sql_prompt': 'Get the number of bridges built in each decade since 1950', 'sql_context': 'CREATE TABLE Bridges (bridge_id int, bridge_name varchar(255), year int, location varchar(255));', 'sql': 'SELECT (year - 1900) / 10 AS decade, COUNT(*) FROM Bridges WHERE year >= 1950 GROUP BY decade;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to group bridges based on their construction decade and count them for each group. To do this, we can use integer division (//) to calculate the decade from the year of construction, then group by that value and count the number of bridges built in each decade since 1950.',
    sql='SELECT (year // 10 * 10) as decade, COUNT(*) as num_bridges FROM Bridges WHERE year >= 1950 GROUP BY decade;'
), 0), (Example({'sql_prompt': 'What is the total number of accidents in the platinum mines in the last year?', 'sql_context': 'CREATE TABLE AccidentsInMines (AccidentID INT, MineID INT, AccidentDate DATE);', 'sql': "SELECT COUNT(*) FROM AccidentsInMines WHERE (SELECT MineType FROM Mines WHERE Mines.MineID = AccidentsInMines.MineID) = 'Platinum' AND AccidentDate >= DATEADD(year, -1, GETDATE());"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Produce the SQL. We need to filter accidents that occurred within the platinum mines and during the last year. To do this, we will use a WHERE clause with conditions on the accident date (to be within the last year) and join it with another table containing mine information where we can specify the type of mine as 'Platinum'.",
    sql="SELECT COUNT(*) FROM AccidentsInMines JOIN Mines ON AccidentsInMines.MineID = Mines.MineID WHERE Mines.Type = 'Platinum' AND AccidentDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);"
), 0), (Example({'sql_prompt': 'List the names and organizations of all volunteers who have provided support in Syria and Yemen, sorted by organization.', 'sql_context': "CREATE TABLE support_provision (id INT, name VARCHAR(255), organization VARCHAR(255), country VARCHAR(255)); INSERT INTO support_provision (id, name, organization, country) VALUES ('1', 'Ahmad', 'Doctors Without Borders', 'Syria'), ('2', 'Bana', 'UNHCR', 'Yemen'), ('3', 'Cemal', 'World Food Programme', 'Syria'), ('4', 'Dalia', 'Red Cross', 'Yemen'), ('5', 'Elias', 'Doctors Without Borders', 'Yemen'), ('6', 'Farah', 'UNHCR', 'Syria');", 'sql': "SELECT name, organization FROM support_provision WHERE country IN ('Syria', 'Yemen') ORDER BY organization ASC;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to filter records for volunteers who have provided support in Syria and Yemen, then group them by organization and sort the results alphabetically by organization name. The fields we are interested in are `name` and `organization`.',
    sql="SELECT name, organization FROM support_provision WHERE country IN ('Syria', 'Yemen') ORDER BY organization;"
), 1), (Example({'sql_prompt': 'List all the public health policies for California and Texas.', 'sql_context': "CREATE TABLE HealthPolicies (id INT, name VARCHAR(50), state VARCHAR(50), description TEXT); INSERT INTO HealthPolicies VALUES (1, 'Policy A', 'California', 'Description A'); INSERT INTO HealthPolicies VALUES (2, 'Policy B', 'California', 'Description B'); INSERT INTO HealthPolicies VALUES (3, 'Policy C', 'Texas', 'Description C');", 'sql': "SELECT * FROM HealthPolicies WHERE state IN ('California', 'Texas');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Produce the SQL. We need to select all health policies where the state is either California or Texas. This can be achieved using a WHERE clause with an IN operator that specifies both states as possible values for the 'state' column.",
    sql="SELECT * FROM HealthPolicies WHERE state IN ('California', 'Texas');"
), 1), (Example({'sql_prompt': "Calculate the average weight of adult seals in the 'Antarctic Ocean' sanctuary.", 'sql_context': "CREATE TABLE seals (seal_id INT, seal_name VARCHAR(50), age INT, weight FLOAT, sanctuary VARCHAR(50)); INSERT INTO seals (seal_id, seal_name, age, weight, sanctuary) VALUES (1, 'Seal_1', 12, 200, 'Antarctic Ocean'); INSERT INTO seals (seal_id, seal_name, age, weight, sanctuary) VALUES (2, 'Seal_2', 8, 180, 'Antarctic Ocean');", 'sql': "SELECT AVG(weight) FROM seals WHERE sanctuary = 'Antarctic Ocean' AND age >= 18;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Produce the SQL. We need to filter out adult seals based on their age and calculate the average weight of these seals within the specified sanctuary. Assuming that an adult seal is one with an age greater than or equal to 2 years, we can write a query to select only those records from the 'Antarctic Ocean' sanctuary where the age is at least 2 and then calculate the average weight of these selected records.",
    sql="SELECT AVG(weight) as avg_adult_seal_weight FROM seals WHERE age >= 2 AND sanctuary = 'Antarctic Ocean';"
), 1), (Example({'sql_prompt': "Insert a new student with a unique student_id, district_id, and mental_health_score, and update the district's average mental health score accordingly.", 'sql_context': 'CREATE TABLE school_districts (district_id INT, district_name TEXT, average_mental_health_score DECIMAL(5,2)); CREATE TABLE students (student_id INT, district_id INT, mental_health_score INT);', 'sql': 'INSERT INTO students (student_id, district_id, mental_health_score) VALUES (12345, 6789, 75); UPDATE school_districts sd SET sd.average_mental_health_score = (SELECT AVG(s.mental_health_score) FROM students s WHERE s.district_id = sd.district_id) WHERE sd.district_id = 6789;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to insert a new student with unique values for `student_id`, `district_id`, and `mental_health_score`. After inserting the new student, we must update the average mental health score of the district they belong to.',
    sql='1. INSERT INTO students (student_id, district_id, mental_health_score) VALUES (6, 1, 85);\n2. UPDATE school_districts SET average_mental_health_score = (SELECT AVG(mental_health_score) FROM students WHERE district_id = 1) WHERE district_id = 1;'
), 0), (Example({'sql_prompt': 'What is the total revenue generated by retail stores located in New York that sell sustainable products?', 'sql_context': "CREATE TABLE RetailStores (StoreID INT, StoreName VARCHAR(50), State VARCHAR(50)); INSERT INTO RetailStores (StoreID, StoreName, State) VALUES (1, 'RetailStoreA', 'New York'); CREATE TABLE Sales (SaleID INT, StoreID INT, ProductID INT, Quantity INT, Price DECIMAL(5,2)); INSERT INTO Sales (SaleID, StoreID, ProductID, Quantity, Price) VALUES (1, 1, 1, 10, 15.99), (2, 1, 2, 5, 12.49); CREATE TABLE Products (ProductID INT, ProductName VARCHAR(50), IsSustainable BOOLEAN); INSERT INTO Products (ProductID, ProductName, IsSustainable) VALUES (1, 'Product1', true), (2, 'Product2', false);", 'sql': "SELECT SUM(Quantity * Price) FROM Sales JOIN RetailStores ON Sales.StoreID = RetailStores.StoreID JOIN Products ON Sales.ProductID = Products.ProductID WHERE RetailStores.State = 'New York' AND Products.IsSustainable = true;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to join the tables RetailStores, Sales, and Products based on their respective IDs. Then we filter for stores located in New York that sell sustainable products (IsSustainable = true). Finally, we calculate the total revenue by multiplying Quantity with Price and summing up the results.',
    sql="SELECT SUM(s.Quantity * s.Price) as total_revenue FROM RetailStores r JOIN Sales s ON r.StoreID = s.StoreID JOIN Products p ON s.ProductID = p.ProductID WHERE r.State = 'New York' AND p.IsSustainable = true;"
), 1), (Example({'sql_prompt': 'What are the recycling rates in Oceania for the year 2021, grouped by country?', 'sql_context': "CREATE TABLE RecyclingRatesOceania (country VARCHAR(50), year INT, recycling_rate DECIMAL(5,2)); INSERT INTO RecyclingRatesOceania (country, year, recycling_rate) VALUES ('Australia', 2021, 0.58), ('New Zealand', 2021, 0.52);", 'sql': 'SELECT country, AVG(recycling_rate) FROM RecyclingRatesOceania WHERE year = 2021 GROUP BY country;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL query for this prompt. We need to select the country and recycling_rate from the RecyclingRatesOceania table where the year is 2021, and group them by country.',
    sql='SELECT country, recycling_rate FROM RecyclingRatesOceania WHERE year = 2021 GROUP BY country;'
), 1), (Example({'sql_prompt': 'What is the total quantity of sustainable fabric used by each supplier?', 'sql_context': "CREATE TABLE FabricSuppliers (SupplierID INT, SupplierName TEXT, FabricType TEXT, Quantity INT, IsSustainable BOOLEAN); INSERT INTO FabricSuppliers (SupplierID, SupplierName, FabricType, Quantity, IsSustainable) VALUES (1, 'SupplierA', 'Cotton', 500, true), (2, 'SupplierB', 'Polyester', 300, false), (3, 'SupplierC', 'Wool', 150, true);", 'sql': 'SELECT SupplierName, SUM(Quantity) as TotalQuantity FROM FabricSuppliers WHERE IsSustainable = true GROUP BY SupplierName;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to find the total quantity of sustainable fabric used by each supplier. This means we should filter the records where IsSustainable is true and then group them by SupplierName or SupplierID, summing up the Quantity for each group.',
    sql='SELECT SupplierName, SUM(Quantity) as total_sustainable_quantity FROM FabricSuppliers WHERE IsSustainable = TRUE GROUP BY SupplierName;'
), 1), (Example({'sql_prompt': 'What is the maximum salary of a professor in the Physics department?', 'sql_context': 'CREATE TABLE if NOT EXISTS faculty (id INT, name VARCHAR(50), department VARCHAR(20), rank VARCHAR(20), salary INT);', 'sql': "SELECT MAX(salary) FROM faculty WHERE department='Physics' AND rank='Professor';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Produce the SQL. We need to find the maximum salary for a professor specifically in the Physics department. To do this, we will filter the faculty table based on the 'department' column being equal to 'Physics', and then select the highest value from the 'salary' column among those filtered results.",
    sql="SELECT MAX(salary) FROM faculty WHERE department = 'Physics';"
), 1), (Example({'sql_prompt': "How many cases were opened in 'july' 2019 and closed in 'october' 2019?", 'sql_context': 'CREATE TABLE cases (case_id INT, case_open_date DATE, case_close_date DATE);', 'sql': "SELECT COUNT(*) FROM cases WHERE case_open_date BETWEEN '2019-07-01' AND '2019-07-31' AND case_close_date BETWEEN '2019-10-01' AND '2019-10-31';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to filter the records based on the opening date being in July 2019 and the closing date being in October 2019. To do this, we can use the `EXTRACT` function to get the month and year from the dates and then apply the conditions using a WHERE clause.',
    sql='SELECT COUNT(*) as num_cases FROM cases WHERE EXTRACT(MONTH FROM case_open_date) = 7 AND EXTRACT(YEAR FROM case_open_date) = 2019 AND EXTRACT(MONTH FROM case_close_date) = 10 AND EXTRACT(YEAR FROM'
), 0), (Example({'sql_prompt': 'What is the total number of defense diplomacy events in which each country has participated, ranked from highest to lowest?', 'sql_context': "CREATE TABLE defense_diplomacy_4 (id INT, year INT, country VARCHAR(255), event VARCHAR(255)); INSERT INTO defense_diplomacy_4 (id, year, country, event) VALUES (1, 2015, 'USA', 'Event1'), (2, 2016, 'China', 'Event2'), (3, 2017, 'Russia', 'Event3'), (4, 2018, 'India', 'Event4'), (5, 2019, 'Germany', 'Event5'), (6, 2015, 'Brazil', 'Event6'), (7, 2016, 'South Africa', 'Event7'), (8, 2017, 'Canada', 'Event8'), (9, 2018, 'Japan', 'Event9'), (10, 2019, 'France', 'Event10');", 'sql': 'SELECT country, COUNT(event) AS total_events FROM defense_diplomacy_4 GROUP BY country ORDER BY total_events DESC;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to count the number of defense diplomacy events for each country and then rank them from highest to lowest based on this count. To do so, we will use a GROUP BY clause to group records by country, COUNT() function to calculate the total number of events per country, and ORDER BY clause to sort the results in descending order.',
    sql='SELECT country, COUNT(*) as num_events FROM defense_diplomacy_4 GROUP BY country ORDER BY num_events DESC;'
), 1), (Example({'sql_prompt': 'What was the average number of construction laborers employed in the state of Illinois in 2019?', 'sql_context': "CREATE TABLE Labor_Statistics (id INT, employee_count INT, year INT, state VARCHAR(20)); INSERT INTO Labor_Statistics (id, employee_count, year, state) VALUES (1, 12000, 2019, 'Illinois');", 'sql': "SELECT AVG(employee_count) FROM Labor_Statistics WHERE year = 2019 AND state = 'Illinois';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Produce the SQL. We need to find the average number of construction laborers employed in Illinois for the year 2019. To do this, we will select the employee_count from the Labor_Statistics table where the state is 'Illinois' and the year is 2019. Since there's only one entry provided, it should directly give us the average number of construction laborers employed in Illinois for that year.",
    sql="SELECT AVG(employee_count) as avg_construction_laborers FROM Labor_Statistics WHERE state = 'Illinois' AND year = 2019;"
), 1), (Example({'sql_prompt': 'Show the number of unique students who have enrolled in the Data Science program in the last 3 years, by year.', 'sql_context': 'CREATE TABLE students (id INT, name VARCHAR(100), enrollment_date DATE);', 'sql': "SELECT YEAR(enrollment_date) AS enrollment_year, COUNT(DISTINCT id) AS unique_students FROM students WHERE enrollment_date >= DATE_SUB(CURDATE(), INTERVAL 3 YEAR) AND program = 'Data Science' GROUP BY YEAR(enrollment_date);"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL query for this prompt. We need to count unique student IDs who have enrolled in the Data Science program within a specific time frame (last 3 years) and group them by year of enrollment. To achieve this, we can use the `COUNT(DISTINCT)` function along with filtering based on the current date and the enrollment_date column.',
    sql="SELECT EXTRACT(YEAR FROM enrollment_date) AS enrollment_year, COUNT(DISTINCT id) as num_students FROM students WHERE name = 'Data Science' AND enrollment_date >= CURRENT_DATE - INTERVAL '3 years' GROUP BY enroll"
), 0), (Example({'sql_prompt': 'Delete records with sales amount over $50,000 in the MilitaryEquipmentSales table', 'sql_context': "CREATE TABLE MilitaryEquipmentSales (id INT, equipment_name VARCHAR(50), sale_amount INT, sale_date DATE); INSERT INTO MilitaryEquipmentSales (id, equipment_name, sale_amount, sale_date) VALUES (1, 'Fighter Jet', 45000, '2021-01-01'), (2, 'Tank', 75000, '2021-02-01');", 'sql': 'DELETE FROM MilitaryEquipmentSales WHERE sale_amount > 50000;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to delete records from the MilitaryEquipmentSales table where the sale_amount is greater than $50,000. To do this, we will use a DELETE statement with a WHERE clause that specifies the condition for deletion.',
    sql='DELETE FROM MilitaryEquipmentSales WHERE sale_amount > 50000;'
), 1), (Example({'sql_prompt': 'What are the total views for all open education resources in each language and format, ordered by views?', 'sql_context': "CREATE TABLE open_education_resources (id INT, title VARCHAR(50), format VARCHAR(10), language VARCHAR(20), views INT); INSERT INTO open_education_resources (id, title, format, language, views) VALUES (1, 'Introduction to SQL', 'Video', 'English', 1000);", 'sql': 'SELECT language, format, SUM(views) as total_views FROM open_education_resources GROUP BY language, format ORDER BY total_views DESC;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to group the resources by both language and format, sum up their views, and then order the results by the total number of views in descending order.',
    sql='SELECT language, format, SUM(views) as total_views FROM open_education_resources GROUP BY language, format ORDER BY total_views DESC;'
), 0), (Example({'sql_prompt': "Create a view to display all therapists with the specialization of 'CBT'", 'sql_context': "CREATE VIEW cbt_therapists AS SELECT therapist_id, name, specialization, experience FROM therapists WHERE specialization = 'CBT';", 'sql': "CREATE VIEW cbt_therapists AS SELECT therapist_id, name, specialization, experience FROM therapists WHERE specialization = 'CBT';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Produce the SQL. We need to create a view that filters out all therapists who have a specialization of 'Cognitive Behavioral Therapy (CBT)' and display their ID, name, specialization, and experience.",
    sql="CREATE VIEW cbt_therapists AS SELECT therapist_id, name, specialization, experience FROM therapists WHERE specialization = 'CBT';"
), 1), (Example({'sql_prompt': 'Identify the top 3 countries with the highest number of social impact projects in 2019.', 'sql_context': "CREATE TABLE countries (id INT, name VARCHAR(255), total_projects INT); INSERT INTO countries (id, name, total_projects) VALUES (1, 'Brazil', 500), (2, 'India', 700), (3, 'South Africa', 350); CREATE TABLE projects_by_country (country VARCHAR(255), project_count INT); INSERT INTO projects_by_country (country, project_count) SELECT country, COUNT(*) FROM projects GROUP BY country;", 'sql': 'SELECT c.name, p.project_count FROM countries c JOIN (SELECT country, COUNT(*) AS project_count FROM projects GROUP BY country ORDER BY project_count DESC LIMIT 3) p ON c.name = p.country;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to join both tables on the country name and filter for the year 2019. Then we can sort the results by project_count in descending order and limit the output to the top 3 countries with the highest number of projects.',
    sql='SELECT c.name, pbc.project_count FROM countries AS c JOIN projects_by_country AS pbc ON c.name = pbc.country WHERE EXTRACT(YEAR FROM project_date) = 2019 ORDER BY pbc.project_count DESC LIMIT 3;'
), 0), (Example({'sql_prompt': 'Largest renewable energy project per location', 'sql_context': "CREATE TABLE renewable_energy_projects (id INT, name VARCHAR(255), location VARCHAR(255), capacity FLOAT); INSERT INTO renewable_energy_projects (id, name, location, capacity) VALUES (1, 'SolarFarm1', 'CityA', 1000), (2, 'WindFarm1', 'CityB', 2000), (3, 'SolarFarm2', 'CityA', 1500);", 'sql': 'SELECT name, location, capacity FROM (SELECT name, location, capacity, ROW_NUMBER() OVER (PARTITION BY location ORDER BY capacity DESC) as rn FROM renewable_energy_projects) AS subquery WHERE rn = 1;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to find the largest renewable energy project for each location based on its capacity. To do this, we can use a combination of GROUP BY and MAX functions. The GROUP BY clause will group records by their locations, while the MAX function will select the maximum capacity value within each group.',
    sql='SELECT location, name, MAX(capacity) as largest_project_capacity FROM renewable_energy_projects GROUP BY location;'
), 0), (Example({'sql_prompt': 'Update the item name of the warehouse management record with ID 1', 'sql_context': "CREATE TABLE warehouse_management (id INT, aisle VARCHAR(255), item_name VARCHAR(255)); INSERT INTO warehouse_management (id, aisle, item_name) VALUES (1, 'Aisle 3', 'Widget'), (2, 'Aisle 8', 'Thingamajig'), (3, 'Aisle 8', 'Gizmo');", 'sql': "UPDATE warehouse_management SET item_name = 'Super Widget' WHERE id = 1;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to update the item name for a specific record identified by its ID. The SQL statement should target the row with `id = 1` and change the value of the `item_name` column accordingly.',
    sql="UPDATE warehouse_management SET item_name = 'New Item Name' WHERE id = 1;"
), 1), (Example({'sql_prompt': 'What is the total budget for movies released before 2010?', 'sql_context': "CREATE TABLE Movies_Release_Year (id INT, title VARCHAR(100), release_year INT, budget DECIMAL(10,2)); INSERT INTO Movies_Release_Year (id, title, release_year, budget) VALUES (1, 'The Matrix', 1999, 63000000.00), (2, 'Titanic', 1997, 200000000.00), (3, 'The Lord of the Rings: The Fellowship of the Ring', 2001, 93000000.00);", 'sql': 'SELECT SUM(budget) FROM Movies_Release_Year WHERE release_year < 2010;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL query for calculating the total budget for movies released before 2010. We need to select the sum of the budgets from the Movies_Release_Year table where the release_year is less than 2010.',
    sql='SELECT SUM(budget) as total_budget FROM Movies_Release_Year WHERE release_year < 2010;'
), 1), (Example({'sql_prompt': 'What is the revenue generated from the sale of organic dishes in the last month?', 'sql_context': "CREATE TABLE inventory (item_id INT, quantity INT, unit_price DECIMAL(5,2), is_organic BOOLEAN); INSERT INTO inventory (item_id, quantity, unit_price, is_organic) VALUES (1, 10, 12.99, true), (2, 20, 7.50, false), (3, 30, 9.99, true), (4, 40, 15.49, false), (5, 50, 8.99, true); CREATE TABLE orders (order_id INT, item_id INT, order_date DATE); INSERT INTO orders (order_id, item_id, order_date) VALUES (1, 1, '2022-01-01'), (2, 3, '2022-01-02'), (3, 2, '2022-01-03'), (4, 4, '2022-01-04'), (5, 5, '2022-01-05'); CREATE TABLE menu_items (item_id INT, name TEXT, is_organic BOOLEAN); INSERT INTO menu_items (item_id, name, is_organic) VALUES (1, 'Quinoa Salad', true), (2, 'Beef Burger', false), (3, 'Chickpea Curry', true), (4, 'Cheesecake', false), (5, 'Veggie Pizza', true);", 'sql': "SELECT SUM(i.unit_price * o.quantity) as revenue FROM inventory i JOIN orders o ON i.item_id = o.item_id JOIN menu_items m ON i.item_id = m.item_id WHERE m.is_organic = true AND o.order_date BETWEEN '2022-02-01' AND '2022-02-28';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Produce the SQL query. We need to calculate the revenue generated from the sale of organic dishes in the last month. To do this, we will join the `orders`, `inventory`, and `menu_items` tables based on their common columns (`item_id`). Then, filter for only organic items using both the `is_organic` column in the `inventory` table and the `menu_items` table. We also need to consider orders made within the last month from today's date (assuming today is 2023-01-31). Finally, we will sum up the revenue by multiplying the quantity of each item sold with its unit price.",
    sql='Sql Prompt: What is the revenue generated from the sale of organic dishes in the last month?\n\nSql Context: CREATE TABLE inventory (item_id INT, quantity INT, unit_price DECIMAL(5,2), is_organic BOOLEAN); INSERT INTO inventory (item_id, quantity, unit_price, is_organic) VALUES (1, 10, 12.99, true), (2, 20, 7.50, false), (3, 30, 9.99, true), (4, 40, 15.49, false), (5, 5'
), 0), (Example({'sql_prompt': 'Find the drugs and their respective total sales for rare diseases indication with sales greater than the average sales for infectious diseases.', 'sql_context': "CREATE TABLE sales (id INT, drug_id INT, quarter INT, year INT, revenue FLOAT); INSERT INTO sales (id, drug_id, quarter, year, revenue) VALUES (1, 1, 1, 2022, 1500000); CREATE TABLE drugs (id INT, name VARCHAR(50), company VARCHAR(50), indication VARCHAR(50)); INSERT INTO drugs (id, name, company, indication) VALUES (1, 'DrugA', 'ABC Corp', 'Rare_Diseases');", 'sql': "SELECT s.drug_id, d.name, SUM(s.revenue) as total_sales FROM sales s JOIN drugs d ON s.drug_id = d.id WHERE d.indication = 'Rare_Diseases' GROUP BY s.drug_id HAVING total_sales > (SELECT AVG(s2.revenue) FROM sales s2 JOIN drugs d2 ON s2.drug_id = d2.id WHERE d2.indication = 'Infectious_Diseases')"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Produce the SQL. We need to find the total sales for each drug with a rare diseases indication and compare it against the average sales of drugs indicated for infectious diseases. To do this, we will first calculate the average sales for infectious diseases, then join the `sales` table with the `drugs` table to filter by 'Rare_Diseases' indication, and finally compare each drug's total sales against the calculated average.",
    sql='```sql\nWITH avg_infectious_disease_sales AS (\n    SELECT AVG(revenue) as avg_revenue\n    FROM sales s\n    JOIN'
), 0), (Example({'sql_prompt': 'What is the total number of hospitals that offer mental health services in each state?', 'sql_context': "CREATE TABLE Hospitals (HospitalID INT, Name TEXT, City TEXT, State TEXT, MentalHealth BOOLEAN); INSERT INTO Hospitals (HospitalID, Name, City, State, MentalHealth) VALUES (1, 'Jackson Memorial Hospital', 'Miami', 'Florida', TRUE);", 'sql': 'SELECT State, COUNT(*) FROM Hospitals WHERE MentalHealth = TRUE GROUP BY State;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to count the number of hospitals that offer mental health services for each state. To do this, we will group the data by the State column and use a COUNT function on HospitalID where MentalHealth is true.',
    sql='SELECT State, COUNT(HospitalID) as num_hospitals FROM Hospitals WHERE MentalHealth = TRUE GROUP BY State;'
), 1), (Example({'sql_prompt': 'Count the number of properties in Austin with a listing price below $400,000 and sustainable features.', 'sql_context': "CREATE TABLE properties (id INT, city VARCHAR(20), listing_price INT, sustainable BOOLEAN); INSERT INTO properties (id, city, listing_price, sustainable) VALUES (1, 'Austin', 350000, true); INSERT INTO properties (id, city, listing_price, sustainable) VALUES (2, 'Austin', 450000, false);", 'sql': "SELECT COUNT(*) FROM properties WHERE city = 'Austin' AND listing_price < 400000 AND sustainable = true;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to filter the properties table for entries where the city is Austin and the listing price is below $400,000. Additionally, we must ensure that only sustainable properties are counted. To achieve this, we will use a WHERE clause with conditions on both the city and listing_price columns, as well as check if the sustainable column has a value of true.',
    sql="SELECT COUNT(*) FROM properties WHERE city = 'Austin' AND listing_price < 400000 AND sustainable = true;"
), 1), (Example({'sql_prompt': "List the names and publication years of Middle Eastern authors who have published books in the 'Non-fiction' genre.", 'sql_context': "CREATE TABLE authors (id INT PRIMARY KEY, name VARCHAR(255), ethnicity VARCHAR(255)); INSERT INTO authors (id, name, ethnicity) VALUES (1, 'Rania Abouzeid', 'Middle Eastern'); INSERT INTO authors (id, name, ethnicity) VALUES (2, 'Khaled Hosseini', 'Middle Eastern'); CREATE TABLE books (id INT PRIMARY KEY, title VARCHAR(255), author_id INT, publication_year INT, genre VARCHAR(255)); INSERT INTO books (id, title, author_id, publication_year, genre) VALUES (1, 'No Turning Back', 1, 2018, 'Non-fiction'); INSERT INTO books (id, title, author_id, publication_year, genre) VALUES (2, 'The Kite Runner', 2, 2003, 'Fiction'); INSERT INTO books (id, title, author_id, publication_year, genre) VALUES (3, 'A Thousand Splendid Suns', 2, 2007, 'Fiction'); CREATE TABLE genres (id INT PRIMARY KEY, genre VARCHAR(255)); INSERT INTO genres (id, genre) VALUES (1, 'Fiction'); INSERT INTO genres (id, genre) VALUES (2, 'Non-fiction');", 'sql': "SELECT a.name, b.publication_year FROM authors a INNER JOIN books b ON a.id = b.author_id INNER JOIN genres g ON b.genre = g.genre WHERE a.ethnicity = 'Middle Eastern' AND g.genre = 'Non-fiction';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='produce the SQL. We need to join the authors table with the books table on author_id and filter for Middle Eastern ethnicity and Non-fiction genre. Then we select the names of the authors along with the publication years of their books.',
    sql="SELECT a.name, b.publication_year FROM authors a JOIN books b ON a.id = b.author_id WHERE a.ethnicity = 'Middle Eastern' AND b.genre = (SELECT id FROM genres WHERE genre = 'Non-fiction');"
), 1), (Example({'sql_prompt': 'Get the names of all solar farms in Arizona', 'sql_context': "CREATE TABLE Infrastructure (id INT, name VARCHAR(100), type VARCHAR(50), location VARCHAR(100), state VARCHAR(50)); INSERT INTO Infrastructure (id, name, type, location, state) VALUES (10, 'Arizona Solar One', 'Solar Farm', 'Buckeye', 'Arizona');", 'sql': "SELECT name FROM Infrastructure WHERE type = 'Solar Farm' AND state = 'Arizona';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to select the names of solar farms specifically located in Arizona from the Infrastructure table, so we will use a WHERE clause to filter for type and state.',
    sql="SELECT name FROM Infrastructure WHERE type = 'Solar Farm' AND state = 'Arizona';"
), 1), (Example({'sql_prompt': "How many properties in the table 'sustainable_developments' are located in low-income areas?", 'sql_context': "CREATE TABLE sustainable_developments (id INT, property_name VARCHAR(50), low_income_area BOOLEAN); INSERT INTO sustainable_developments (id, property_name, low_income_area) VALUES (1, 'Green Heights', true), (2, 'Eco Estates', false), (3, 'Solar Vista', true);", 'sql': 'SELECT COUNT(*) FROM sustainable_developments WHERE low_income_area = true;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to count the number of properties that are located in low-income areas from the sustainable_developments table where the low_income_area column is set to true.',
    sql='SELECT COUNT(*) as num_properties_in_low_income_areas FROM sustainable_developments WHERE low_income_area = TRUE;'
), 1), (Example({'sql_prompt': 'What is the number of travel advisories issued for each country in the last 3 months?', 'sql_context': 'CREATE TABLE TravelAdvisories (Country VARCHAR(255), Advisory INT, IssueDate DATE);', 'sql': "SELECT Country, COUNT(Advisory) OVER (PARTITION BY Country) AS NumAdvisories, TO_CHAR(IssueDate, 'YYYY-MM') AS Month FROM TravelAdvisories WHERE IssueDate >= ADD_MONTHS(CURRENT_DATE, -3) GROUP BY Country, Month;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Produce the SQL. We need to filter the travel advisories issued within the last 3 months and then count them for each country. To do this, we can use the `CURRENT_DATE` function to get today's date, subtract 3 months from it using an interval, and compare the issue dates of the advisories against this range. Then, group by the country to get the counts per country.",
    sql="SELECT Country, COUNT(*) as num_advisories FROM TravelAdvisories WHERE IssueDate >= CURRENT_DATE - INTERVAL '3 months' GROUP BY Country;"
), 0), (Example({'sql_prompt': 'Delete all records with a best-before date earlier than tomorrow from the FoodSafetyRecords.PerishableGoods table.', 'sql_context': 'CREATE TABLE FoodSafetyRecords.PerishableGoods (itemName TEXT, bestBeforeDate DATE);', 'sql': 'DELETE FROM FoodSafetyRecords.PerishableGoods WHERE bestBeforeDate < DATEADD(day, 1, CURDATE());'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Produce the SQL query for deleting records with a best-before date earlier than tomorrow from the FoodSafetyRecords.PerishableGoods table. We need to compare the bestBeforeDate column against tomorrow's date and delete any rows where the bestBeforeDate is less than that value.",
    sql="DELETE FROM FoodSafetyRecords.PerishableGoods WHERE bestBeforeDate < CURRENT_DATE + INTERVAL '1 day';"
), 0), (Example({'sql_prompt': 'List the number of properties co-owned by women and men in each city in the database.', 'sql_context': 'CREATE TABLE city_properties (city VARCHAR(50), co_owned BOOLEAN, owner_gender VARCHAR(10), property_id INT);', 'sql': 'SELECT city, owner_gender, COUNT(*) AS count FROM city_properties WHERE co_owned = TRUE GROUP BY city, owner_gender;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL query for listing the number of properties co-owned by women and men in each city. We need to count the occurrences where `co_owned` is true, grouped by both `city` and `owner_gender`.',
    sql='SELECT city, owner_gender, COUNT(*) as num_properties FROM city_properties WHERE co_owned = TRUE GROUP BY city, owner_gender;'
), 0), (Example({'sql_prompt': 'Find the number of brands that adhere to fair labor practices in each country.', 'sql_context': 'CREATE TABLE brands (brand_id INT, country VARCHAR(20), adheres_to_fair_labor_practices BOOLEAN);', 'sql': 'SELECT country, COUNT(*) FROM brands WHERE adheres_to_fair_labor_practices = TRUE GROUP BY country;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL query. We need to count the number of brands that have `adheres_to_fair_labor_practices` set to true for each country. To do this, we can use a GROUP BY clause on the country column and apply a COUNT function with a condition inside it.',
    sql='SELECT country, COUNT(CASE WHEN adheres_to_fair_labor_practices = TRUE THEN 1 END) as num_brands FROM brands GROUP BY country;'
), 1), (Example({'sql_prompt': 'What is the average policy duration for policyholders in the West region with a risk score between 600 and 800?', 'sql_context': "CREATE TABLE Policyholders (PolicyID INT, RiskScore INT, Region VARCHAR(10), PolicyDuration INT); INSERT INTO Policyholders VALUES (1, 700, 'West', 36); INSERT INTO Policyholders VALUES (2, 400, 'East', 24);", 'sql': "SELECT AVG(p.PolicyDuration) as AvgPolicyDuration FROM Policyholders p WHERE p.Region = 'West' AND p.RiskScore BETWEEN 600 AND 800;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to filter policyholders based on their region and risk score range, then calculate the average of their policy duration. The query should group results by region since we are interested in the West region specifically.',
    sql="SELECT AVG(PolicyDuration) as avg_policy_duration FROM Policyholders WHERE Region = 'West' AND RiskScore BETWEEN 600 AND 800;"
), 1), (Example({'sql_prompt': 'How many autonomous buses were operational in Mexico City as of January 1, 2022?', 'sql_context': 'CREATE TABLE autonomous_buses( bus_id INT, operational_status VARCHAR(50), status_date DATE, city VARCHAR(50));', 'sql': "SELECT COUNT(*) FROM autonomous_buses WHERE operational_status = 'operational' AND status_date <= '2022-01-01' AND city = 'Mexico City';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Produce the SQL. We need to count the number of autonomous buses that were operational ('operational') in Mexico City as of January 1, 2022. To do this, we will filter the table based on city and status_date, then group by bus_id and count the entries.",
    sql="SELECT COUNT(DISTINCT bus_id) FROM autonomous_buses WHERE operational_status = 'operational' AND city = 'Mexico City' AND status_date <= '2022-01-01';"
), 0), (Example({'sql_prompt': 'What is the total revenue generated from the sales of products made from recycled materials in the North American market?', 'sql_context': "CREATE TABLE products (product_id INT, material VARCHAR(20), price DECIMAL(5,2), market VARCHAR(20)); INSERT INTO products (product_id, material, price, market) VALUES (1, 'recycled polyester', 70.00, 'North America'), (2, 'recycled cotton', 80.00, 'North America'), (3, 'recycled nylon', 90.00, 'Europe'), (4, 'recycled polyester', 75.00, 'North America'), (5, 'recycled wool', 100.00, 'North America');", 'sql': "SELECT SUM(sales.quantity * products.price) FROM sales JOIN products ON sales.product_id = products.product_id WHERE products.market = 'North America' AND products.material LIKE '%recycled%';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL query for calculating the total revenue generated from sales of products made from recycled materials in the North American market. We need to filter the products based on their material and market, then sum up the prices of these filtered records.',
    sql="SELECT SUM(price) as total_revenue FROM products WHERE material LIKE '%recycled%' AND market = 'North America';"
), 1), (Example({'sql_prompt': 'List the top 5 mines with the highest environmental impact in the past year?', 'sql_context': "CREATE TABLE mine_environmental_impact (mine_name VARCHAR(255), impact NUMERIC, measurement_date DATE); INSERT INTO mine_environmental_impact (mine_name, impact, measurement_date) VALUES ('Mine A', 1000, '2021-08-01'), ('Mine B', 2000, '2021-08-01'), ('Mine C', 1500, '2021-08-01'), ('Mine A', 1200, '2020-08-01'), ('Mine B', 1800, '2020-08-01');", 'sql': 'SELECT mine_name, impact FROM (SELECT mine_name, impact, measurement_date, RANK() OVER (ORDER BY impact DESC) as rnk FROM mine_environmental_impact WHERE measurement_date >= DATEADD(year, -1, CURRENT_DATE)) t WHERE rnk <= 5;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Produce the SQL. We need to find the top 5 mines with the highest environmental impact within a specific time frame (past year). To do this, we will filter records based on the measurement_date being within the past year from today's date and then group them by mine_name. After grouping, we will sum up the impact for each mine to get their total environmental impact in that period. Finally, we will order the results by the total impact in descending order and limit the output to 5 rows to get the top 5 mines with the highest environmental impact.",
    sql='SELECT mine_name, SUM(impact) as total_impact FROM mine_environmental_impact WHERE measurement_'
), 0), (Example({'sql_prompt': 'What is the maximum and minimum population of animals for each species?', 'sql_context': "CREATE TABLE animal_population (species VARCHAR(50), population INT); INSERT INTO animal_population (species, population) VALUES ('Tiger', 300), ('Lion', 250), ('Elephant', 500), ('Giraffe', 200);", 'sql': 'SELECT species, MIN(population) OVER (PARTITION BY species) as min_population, MAX(population) OVER (PARTITION BY species) as max_population FROM animal_population ORDER BY species;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to find the maximum and minimum population for each species, so we will use the MAX() and MIN() aggregate functions grouped by the species column.',
    sql='SELECT species, MAX(population) as max_population, MIN(population) as min_population FROM animal_population GROUP BY species;'
), 0), (Example({'sql_prompt': 'What is the total assets of clients who have invested in both stocks and bonds?', 'sql_context': "CREATE TABLE clients (client_id INT, name TEXT, age INT, gender TEXT, total_assets DECIMAL(10,2)); INSERT INTO clients VALUES (1, 'John Doe', 35, 'Male', 250000.00), (2, 'Jane Smith', 45, 'Female', 500000.00); CREATE TABLE investments (client_id INT, investment_type TEXT); INSERT INTO investments VALUES (1, 'Stocks'), (1, 'Bonds'), (2, 'Stocks');", 'sql': "SELECT c.total_assets FROM clients c INNER JOIN investments i ON c.client_id = i.client_id WHERE i.investment_type IN ('Stocks', 'Bonds') GROUP BY c.client_id HAVING COUNT(DISTINCT i.investment_type) = 2;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Produce the SQL. We need to find clients who have invested in both stocks and bonds first. This can be done using an INNER JOIN between the `clients` table and the `investments` table, filtering for those with investment types 'Stocks' and 'Bonds'. Then we group by client_id and count distinct investment types to ensure they have both. Finally, we sum up their total assets from the `clients` table based on this filtered list of clients.",
    sql='```sql\nSELECT SUM(c.total_assets) as total_assets\nFROM clients c\nINNER JOIN (\n    SELECT i1.client_id\n    FROM investments'
), 0), (Example({'sql_prompt': 'What is the market share of Hotel Chain C in South America?', 'sql_context': "CREATE TABLE market_share_2 (hotel_chain VARCHAR(255), region VARCHAR(255), market_share FLOAT); INSERT INTO market_share_2 (hotel_chain, region, market_share) VALUES ('Hotel Chain A', 'South America', 0.35), ('Hotel Chain B', 'South America', 0.42), ('Hotel Chain C', 'South America', 0.23);", 'sql': "SELECT market_share * 100 FROM market_share_2 WHERE hotel_chain = 'Hotel Chain C';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Produce the SQL query for finding Hotel Chain C's market share in South America. We need to select the market_share value from the table where hotel_chain is 'Hotel Chain C' and region is 'South America'.",
    sql="SELECT market_share FROM market_share_2 WHERE hotel_chain = 'Hotel Chain C' AND region = 'South America';"
), 1), (Example({'sql_prompt': 'Calculate the percentage of renewable energy projects in each state of the United States', 'sql_context': 'CREATE TABLE projects (project_id INT, project_name VARCHAR(255), project_type VARCHAR(255), state VARCHAR(255), installed_capacity FLOAT);', 'sql': "SELECT state, (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM projects WHERE state IN (SELECT state FROM (SELECT DISTINCT state FROM projects WHERE state = 'United States') as temp))) as percentage FROM projects WHERE project_type IN ('Solar', 'Wind', 'Geothermal', 'Hydroelectric') GROUP BY state;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to count the number of renewable energy projects and total projects per state, then calculate the percentage for each state.',
    sql="SELECT state, COUNT(*) as num_renewable_projects, (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM projects WHERE project_type = 'Renewable' AND state = p.state)) as percent_of_total_projects FROM projects p WHERE project_type = 'Renewable' GROUP BY state;"
), 0), (Example({'sql_prompt': 'List the names and departments of all mental health parity officers in the mental_health schema.', 'sql_context': "CREATE TABLE mental_health_parity_officers (officer_id INT, name VARCHAR(50), department VARCHAR(50)); INSERT INTO mental_health_parity_officers (officer_id, name, department) VALUES (1, 'Alice Johnson', 'Compliance'); INSERT INTO mental_health_parity_officers (officer_id, name, department) VALUES (2, 'Bob Brown', 'Legal');", 'sql': 'SELECT name, department FROM mental_health.mental_health_parity_officers;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to select the names and departments of all mental health parity officers from the given table within the mental_health schema. The query should not filter or limit the results based on any specific criteria other than being a mental health parity officer.',
    sql='SELECT name, department FROM mental_health.mental_health_parity_officers;'
), 0), (Example({'sql_prompt': 'Which community health workers have served the most patients from underrepresented communities in the last year?', 'sql_context': "CREATE TABLE community_workers (worker_id INT, worker_name VARCHAR(50), community_type VARCHAR(50), patients_served INT, year INT); INSERT INTO community_workers (worker_id, worker_name, community_type, patients_served, year) VALUES (1, 'John Doe', 'African American', 50, 2021), (2, 'Jane Smith', 'Hispanic', 75, 2021), (3, 'Alice Johnson', 'LGBTQ+', 60, 2021), (4, 'Bob Brown', 'Rural', 40, 2021), (5, 'Maria Garcia', 'Asian', 45, 2021), (6, 'David Kim', 'Native American', 35, 2021);", 'sql': "SELECT community_type, worker_name, SUM(patients_served) as total_patients_served FROM community_workers WHERE year = 2021 AND community_type IN ('African American', 'Hispanic', 'LGBTQ+') GROUP BY community_type, worker_name ORDER BY total_patients_served DESC;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Produce the SQL. We need to find community health workers who have served patients from underrepresented communities within the last year (assuming the current year is 2022). To do this, we will filter records for the previous year and then group them by worker_name while summing up the number of patients they've served.",
    sql="SELECT worker_name, SUM(patients_served) as total_patients FROM community_workers WHERE community_type IN ('African American', 'Hispanic', 'LGBTQ+', 'Rural', 'Asian', 'Native American') AND year = 2021 GROUP BY worker_name ORDER BY"
), 0), (Example({'sql_prompt': "Insert new records into the 'aircraft_manufacturing' table for 'SpaceX' manufacturing the 'Starship' model in 'Boca Chica', 'USA' in 2025", 'sql_context': 'CREATE TABLE aircraft_manufacturing (id INT PRIMARY KEY, manufacturer VARCHAR(50), model VARCHAR(50), city VARCHAR(50), country VARCHAR(50), manufacturing_year INT);', 'sql': "INSERT INTO aircraft_manufacturing (id, manufacturer, model, city, country, manufacturing_year) VALUES (1, 'SpaceX', 'Starship', 'Boca Chica', 'USA', 2025);"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Produce the SQL. We need to insert a new record into the 'aircraft_manufacturing' table with the provided details for SpaceX, Starship model, Boca Chica location, USA country, and 2025 manufacturing year.",
    sql="INSERT INTO aircraft_manufacturing (manufacturer, model, city, country, manufacturing_year) VALUES ('SpaceX', 'Starship', 'Boca Chica', 'USA', 2025);"
), 1), (Example({'sql_prompt': 'What is the name of each military innovation and the year it was developed by countries in the BRICS?', 'sql_context': "CREATE TABLE military_innovation (name VARCHAR(50), country VARCHAR(50), year INT); INSERT INTO military_innovation (name, country, year) VALUES ('Stealth Fighter', 'China', 2010), ('Cyber Warfare Unit', 'Russia', 2012), ('Stealth Frigate', 'India', 2014), ('Robot Soldier', 'Brazil', 2015), ('Smart Rifle', 'South Africa', 2016);", 'sql': 'SELECT mi.name, mi.year FROM military_innovation mi INNER JOIN (SELECT DISTINCT country FROM military_innovation) mic ON mi.country = mic.country;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Produce the SQL. We need to retrieve the name of each military innovation and the year it was developed, but only for countries that are part of BRICS (Brazil, Russia, India, China, South Africa).',
    sql="SELECT name, year FROM military_innovation WHERE country IN ('Brazil', 'Russia', 'India', 'China', 'South Africa');"
), 1)]