[(Example({'sql_prompt': "Update the name of the passenger with the id 3 to 'Emily Lee'.", 'sql_context': "CREATE TABLE PASSENGERS (id INT, name VARCHAR(50)); INSERT INTO PASSENGERS VALUES (3, 'James Brown');", 'sql': "UPDATE PASSENGERS SET name = 'Emily Lee' WHERE id = 3;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="construct the SQL query for updating the name of a passenger with a specific ID.\n\n1. Identify the table where the data resides: In this case, it is the `PASSENGERS` table.\n2. Determine the column that contains the name we want to update: The column in question is named `name`.\n3. Construct the SQL query using the UPDATE statement:\n\n```sql\nUPDATE PASSENGERS SET name = 'Emily Lee' WHERE id = 3;\n```\n\nThis query will update the name of the passenger with ID 3 to 'Emily Lee'.",
    sql="Here is the completed signature:\n\nSql Prompt: Update the name of the passenger with the id 3 to 'Emily Lee'.\n\nSql Context: CREATE TABLE PASSENGERS (id INT, name VARCHAR(50)); INSERT INTO PASSENGERS VALUES (3, 'James Brown');\n\nReasoning: Let's think step by step in order to construct the SQL query for updating the name of a passenger with a specific ID.\n\n1. Identify the table where the data resides: In this case, it is the `PASSENGERS` table.\n2. Determine the column that contains the name we want to update:"
), 0), (Example({'sql_prompt': "What is the number of women-led agricultural businesses in the 'business_data' table?", 'sql_context': "CREATE TABLE business_data (business_id INT, business_name VARCHAR(50), gender VARCHAR(10)); INSERT INTO business_data (business_id, business_name, gender) VALUES (1, 'Green Acres', 'female'), (2, 'Brown Farms', 'male'), (3, 'Eco Harvest', 'non-binary');", 'sql': "SELECT COUNT(business_id) FROM business_data WHERE gender = 'female';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql Prompt: What is the number of women-led agricultural businesses in the 'business_data' table?\nSql Context: CREATE TABLE business_data (business_id INT, business_name VARCHAR(50), gender VARCHAR(10)); INSERT INTO business_data (business_id, business_name, gender) VALUES (1, 'Green Acres', 'female'), (2, 'Brown Farms', 'male'), (3, 'Eco Harvest', 'non-binary');",
    sql="SELECT COUNT(*) as num_women_led_businesses FROM business_data WHERE gender = 'female';"
), 0), (Example({'sql_prompt': "What is the average rating for 'Gluten-Free' items?", 'sql_context': "CREATE TABLE ratings (item_name TEXT, is_gluten_free BOOLEAN, rating INTEGER); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Quinoa Salad', true, 4); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Chicken Stir Fry', false, 5);", 'sql': 'SELECT AVG(rating) FROM ratings WHERE is_gluten_free = true;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT AVG(rating) as avg_rating FROM ratings WHERE is_gluten_free = TRUE;\n\nThis SQL query calculates the average rating for 'Gluten-Free' items. It filters the ratings table to only include rows where `is_gluten_free` is true, and then calculates the average of the `rating` column for those filtered rows.",
    sql="Here is the completed signature:\n\nSql Prompt: What is the average rating for 'Gluten-Free' items?\n\nSql Context: CREATE TABLE ratings (item_name TEXT, is_gluten_free BOOLEAN, rating INTEGER);\nINSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Quinoa Salad', true, 4);\nINSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Chicken Stir Fry', false, 5);\n\nReasoning: Let's think step by step in order to produce the SQL. We need to filter the ratings table"
), 1), (Example({'sql_prompt': 'What is the maximum amount of dissolved oxygen (DO) in the ocean_health table for each month in 2021?', 'sql_context': "CREATE TABLE ocean_health (date DATE, do_value INT); INSERT INTO ocean_health (date, do_value) VALUES ('2021-01-01', 8), ('2021-01-02', 7), ('2021-02-01', 6), ('2021-02-02', 9);", 'sql': "SELECT EXTRACT(MONTH FROM date) as month, MAX(do_value) as max_do_value FROM ocean_health WHERE date BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY EXTRACT(MONTH FROM date);"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql Prompt: To find the maximum amount of dissolved oxygen (DO) in the ocean_health table for each month in 2021, we can use the SQL query below. The query groups the data by month using the YEAR and MONTH functions, then finds the maximum DO value within each group.',
    sql='SELECT YEAR(date) AS year, MONTH(date) AS month, MAX(do_value) as max_do FROM ocean_health WHERE YEAR(date) = 2021 GROUP BY year, month;'
), 0), (Example({'sql_prompt': 'What are the total sales and quantity of goods sold by each salesperson, grouped by city?', 'sql_context': 'CREATE TABLE salesperson (id INT, name TEXT, city TEXT); CREATE TABLE sales (id INT, salesperson_id INT, product TEXT, quantity INT, total_sales FLOAT);', 'sql': 'SELECT s.name, s.city, SUM(s.total_sales) as total_sales, SUM(s.quantity) as total_quantity FROM sales s JOIN salesperson sp ON s.salesperson_id = sp.id GROUP BY s.city, s.name;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT salesperson.city, salesperson.name, SUM(quantity) as total_quantity, SUM(total_sales) as total_sales FROM sales JOIN salesperson ON sales.salesperson_id = salesperson.id GROUP BY salesperson.city, salesperson.name ORDER BY total_sales DESC;\n\nThis SQL query will group the sales data by city and salesperson, calculate the total quantity and total sales for each combination, and then order the results in descending order based on the total sales. This should provide the information about the total sales and quantity of goods sold by each salesperson, grouped by city.',
    sql='SELECT salesperson.city, salesperson.name, SUM(quantity) as total_quantity, SUM(total_sales) as total_sales\nFROM sales JOIN salesperson ON sales.salesperson_id = salesperson.id\nGROUP BY salesperson.city, salesperson.name\nORDER BY total_sales DESC;'
), 0), (Example({'sql_prompt': 'What is the total funding received by startups in the technology sector that were founded by women?', 'sql_context': "CREATE TABLE startups(id INT, name TEXT, sector TEXT, founder_gender TEXT, funding FLOAT); INSERT INTO startups VALUES (1, 'Acme Inc', 'Technology', 'Female', 2000000); INSERT INTO startups VALUES (2, 'Beta Corp', 'Retail', 'Male', 3000000); INSERT INTO startups VALUES (3, 'Gamma Start', 'Technology', 'Female', 5000000);", 'sql': "SELECT SUM(funding) FROM startups WHERE sector = 'Technology' AND founder_gender = 'Female';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql Prompt: What is the total funding received by startups in the technology sector that were founded by women?\nSql Context: CREATE TABLE startups(id INT, name TEXT, sector TEXT, founder_gender TEXT, funding FLOAT); INSERT INTO startups VALUES (1, 'Acme Inc', 'Technology', 'Female', 2000000); INSERT INTO startups VALUES (2, 'Beta Corp', 'Retail', 'Male', 3000000); INSERT INTO startups VALUES (3, 'Gamma Start', 'Technology', 'Female',",
    sql="Here is the completed signature:\n\nSql Prompt: What is the total funding received by startups in the technology sector that were founded by women?\n\nSql Context: CREATE TABLE startups(id INT, name TEXT, sector TEXT, founder_gender TEXT, funding FLOAT);\nINSERT INTO startups VALUES (1, 'Acme Inc', 'Technology', 'Female', 2000000);\nINSERT INTO startups VALUES (2, 'Beta Corp', 'Retail', 'Male', 3000000);\nINSERT INTO startups VALUES (3, 'Gamma Start', 'Technology"
), 1), (Example({'sql_prompt': 'What is the recycling rate of plastic in the residential sector in the state of New York?', 'sql_context': "CREATE TABLE recycling_rates_city (sector VARCHAR(20), city VARCHAR(20), material VARCHAR(20), recycling_rate DECIMAL(5,2)); INSERT INTO recycling_rates_city (sector, city, material, recycling_rate) VALUES ('residential', 'New York City', 'plastic', 0.25), ('commercial', 'New York City', 'plastic', 0.30), ('residential', 'New York City', 'paper', 0.45), ('commercial', 'New York City', 'paper', 0.50), ('residential', 'Los Angeles', 'plastic', 0.20), ('commercial', 'Los Angeles', 'plastic', 0.35), ('residential', 'Los Angeles', 'paper', 0.40), ('commercial', 'Los Angeles', 'paper', 0.50);", 'sql': "SELECT recycling_rate FROM recycling_rates_city WHERE sector = 'residential' AND material = 'plastic' AND city = 'New York City';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql Prompt: To find the recycling rate of plastic in the residential sector in the state of New York, we need to filter the data for the specific city and sector, and then calculate the average recycling rate for plastic. Here is the SQL query:\n\n```sql\nSELECT AVG(recycling_rate) as avg_plastic_recycling_rate\nFROM recycling_rates_city\nWHERE sector = 'residential' AND city = 'New York City' AND material = 'plastic';\n```\n\nThis query will return the average recycling rate of plastic in the residential sector in New York City.",
    sql="SELECT AVG(recycling_rate) as avg_plastic_recycling_rate FROM recycling_rates_city WHERE sector = 'residential' AND city = 'New York'; This query will return the average recycling rate of plastic in the residential sector in the state of New York. The city name is not specified as 'New York City', but since there are no other cities with the name 'New York' in the table, this query should still return the correct result for the state of New York."
), 0), (Example({'sql_prompt': "Which startups in the 'StartupFunding' table received funding in 2020 or later and have a budget greater than $500,000?", 'sql_context': "CREATE SCHEMA BiotechStartups; CREATE TABLE StartupFunding (startup_name VARCHAR(50), funding_year INT, funding DECIMAL(10, 2)); INSERT INTO StartupFunding VALUES ('StartupA', 2019, 500000), ('StartupB', 2020, 750000);", 'sql': 'SELECT startup_name FROM BiotechStartups.StartupFunding WHERE funding_year >= 2020 AND funding > 500000;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql Prompt: Which startups in the 'StartupFunding' table received funding in 2020 or later and have a budget greater than $500,000?\nSql Context: CREATE SCHEMA BiotechStartups;\nCREATE TABLE StartupFunding (startup_name VARCHAR(50), funding_year INT, funding DECIMAL(10, 2));\nINSERT INTO StartupFunding VALUES ('StartupA', 2019, 500000), ('StartupB', 2020, 750000);",
    sql='SELECT startup'
), 0), (Example({'sql_prompt': "How many female engineers are there in 'australian_mines'?", 'sql_context': "CREATE SCHEMA if not exists australia_schema;CREATE TABLE australia_schema.australian_mines (id INT, name VARCHAR, gender VARCHAR, role VARCHAR);INSERT INTO australia_schema.australian_mines (id, name, gender, role) VALUES (1, 'S worker', 'Female', 'Engineer'), (2, 'T engineer', 'Male', 'Engineer');", 'sql': "SELECT COUNT(*) FROM australia_schema.australian_mines WHERE gender = 'Female' AND role = 'Engineer';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql Prompt: To find the number of female engineers in 'australian_mines', we need to filter the table based on gender and role. Here is the SQL query:\n\n```sql\nSELECT COUNT(*) as num_female_engineers FROM australia_schema.australian_mines WHERE gender = 'Female' AND role = 'Engineer';\n```\n\nThis query will return the count of rows where both the gender and role match the specified conditions.",
    sql="SELECT COUNT(*) as num_female_engineers FROM australia_schema.australian_mines WHERE gender = 'Female' AND role = 'Engineer';"
), 0), (Example({'sql_prompt': 'What is the average salary of employees in each position?', 'sql_context': "CREATE TABLE Employees (EmployeeID INT, Name VARCHAR(50), Department VARCHAR(50), Position VARCHAR(50), Salary FLOAT); INSERT INTO Employees (EmployeeID, Name, Department, Position, Salary) VALUES (1, 'John Doe', 'IT', 'Developer', 75000.00), (2, 'Jane Smith', 'IT', 'Developer', 80000.00), (3, 'Alice Johnson', 'Marketing', 'Marketing Specialist', 60000.00), (4, 'Bob Brown', 'HR', 'HR Specialist', 65000.00);", 'sql': 'SELECT Position, AVG(Salary) FROM Employees GROUP BY Position;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="find the average salary of employees in each position. First, we need to group the data by both department and position since an employee can have a specific position within a certain department. Then, for each group (department-position), we will calculate the average salary. Here's the SQL query:\n\n```sql\nSELECT Department, Position, AVG(Salary) as avg_salary\nFROM Employees\nGROUP BY Department, Position;\n```\n\nThis query groups employees by department and position, then calculates the average salary for each group. The result will be a table with two columns (Department and Position) and one row for each unique combination of department and position, containing the",
    sql="Here is the completed signature:\n\n`Sql Prompt:` What is the average salary of employees in each position?\n\n`Sql Context:`\n```sql\nCREATE TABLE Employees (EmployeeID INT, Name VARCHAR(50), Department VARCHAR(50), Position VARCHAR(50), Salary FLOAT);\nINSERT INTO Employees (EmployeeID, Name, Department, Position, Salary) VALUES (1, 'John Doe', 'IT', 'Developer', 75000.00), (2, 'Jane Smith', 'IT', 'Developer', 80000.00), (3"
), 1), (Example({'sql_prompt': 'What are the names and ranks of all military personnel in country W who were demoted in the year 2019?', 'sql_context': "CREATE TABLE military_demotions (id INT, name TEXT, country TEXT, rank TEXT, demotion_year INT);INSERT INTO military_demotions (id, name, country, rank, demotion_year) VALUES (1, 'John Doe', 'Country W', 'Colonel', 2019);", 'sql': "SELECT name, rank FROM military_demotions WHERE country = 'Country W' AND demotion_year = 2019;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="construct the SQL query. First, we need to filter the records where the country is 'Country W' and the demotion year is 2019. Then, we need to sort the results based on rank (assuming ranks are ordered, e.g., Colonel > Major > Captain). Here's the SQL query:\n\n```sql\nSELECT name, rank, COUNT(*) as rank_number FROM military_demotions WHERE country = 'Country W' AND demotion_year = 2019 GROUP BY rank ORDER BY rank DESC;\n```\n\nThis query will return the names and ranks of all military personnel in 'Country W' who were demoted in",
    sql="Here is the completed signature:\n\nSql Prompt: What are the names and ranks of all military personnel in country W who were demoted in the year 2019?\n\nSql Context: CREATE TABLE military_demotions (id INT, name TEXT, country TEXT, rank TEXT, demotion_year INT);\nINSERT INTO military_demotions (id, name, country, rank, demotion_year) VALUES (1, 'John Doe', 'Country W', 'Colonel', 2019);\n\nReasoning: Let's think step by step in order to construct the SQL query. First, we need to filter the records where the country is"
), 1), (Example({'sql_prompt': "List the top 2 sectors with the highest donation amounts in the 'Asia' region for the year 2018, ordered by the donation amount in descending order.", 'sql_context': "CREATE TABLE Donors (donor_id INT, donor_name VARCHAR(255), donation_amount INT, sector VARCHAR(255), region VARCHAR(255), donation_date DATE); INSERT INTO Donors (donor_id, donor_name, donation_amount, sector, region, donation_date) VALUES (1, 'DonorA', 100000, 'Health', 'Asia', '2018-01-01');", 'sql': "SELECT sector, SUM(donation_amount) AS total_donation FROM Donors WHERE region = 'Asia' AND donation_date >= '2018-01-01' AND donation_date < '2019-01-01' GROUP BY sector ORDER BY total_donation DESC LIMIT 2;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="construct the SQL query. First, we need to filter the donations made in the 'Asia' region for the year 2018. Then, we group the results by sector and calculate the sum of donation amounts for each group. Finally, we select the top 2 groups with the highest total donation amounts and order them in descending order of donation amount.\n\nHere is the SQL query:\n\n```sql\nSELECT sector, SUM(donation_amount) as total_donation_amount\nFROM Donors\nWHERE region = 'Asia' AND donation_date >= '2018-01-01'\nGROUP BY sector\nORDER BY total",
    sql="Here is the completed signature:\n\n`Sql Prompt:` List the top 2 sectors with the highest donation amounts in the 'Asia' region for the year 2018, ordered by the donation amount in descending order.\n\n`Sql Context:`\n```sql\nCREATE TABLE Donors (donor_id INT, donor_name VARCHAR(255), donation_amount INT, sector VARCHAR(255), region VARCHAR(255), donation_date DATE);\nINSERT INTO Donors (donor_id, donor_name, donation_amount, sector, region, donation_date) VALUES (1,"
), 1), (Example({'sql_prompt': "Display the vendor with the highest average price for 'Salmon' in the 'sales' table.", 'sql_context': "CREATE TABLE sales (id INT PRIMARY KEY, vendor VARCHAR(50), quantity INT, species VARCHAR(50), price DECIMAL(5,2)); INSERT INTO sales (id, vendor, quantity, species, price) VALUES (1, 'Seafood Haven', 20, 'Salmon', 15.99), (2, 'Sea Bounty', 30, 'Tilapia', 9.49), (3, 'Sea Bounty', 15, 'Cod', 14.50), (4, 'Fresh Catch', 25, 'Salmon', 17.99);", 'sql': "SELECT vendor, AVG(price) FROM sales WHERE species = 'Salmon' GROUP BY vendor ORDER BY AVG(price) DESC LIMIT 1;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="find the vendor with the highest average price for 'Salmon'. First, we need to group the sales data by vendor and calculate the average price of salmon for each vendor. Then, we will select the vendor with the maximum average price.\n\nHere is the SQL query:\n\n```sql\nSELECT vendor\nFROM sales\nWHERE species = 'Salmon'\nGROUP BY vendor\nORDER BY AVG(price) DESC\nLIMIT 1;\n```\n\nThis query groups the sales data by vendor, calculates the average price of salmon for each group, orders the results in descending order based on the average price, and finally selects the first (and highest) result.",
    sql="Here is the completed signature:\n\n`Sql Prompt:` Display the vendor with the highest average price for 'Salmon' in the 'sales' table.\n\n`Sql Context:`\n```sql\nCREATE TABLE sales (id INT PRIMARY KEY, vendor VARCHAR(50), quantity INT, species VARCHAR(50), price DECIMAL(5,2));\nINSERT INTO sales (id, vendor, quantity, species, price) VALUES (1, 'Seafood Haven', 20, 'Salmon', 15.99), (2, 'Sea Bounty', 30, 'Tilapia', 9.49"
), 1), (Example({'sql_prompt': "Add new military equipment to 'military_equipment' table", 'sql_context': "CREATE TABLE military_equipment (id INT PRIMARY KEY, name VARCHAR(255), type VARCHAR(255), country VARCHAR(255)); INSERT INTO military_equipment (id, name, type, country) VALUES (1, 'M1 Abrams', 'Tank', 'USA');", 'sql': "INSERT INTO military_equipment (id, name, type, country) VALUES (2, 'Leopard 2', 'Tank', 'Germany');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="provide the SQL command for adding new military equipment to the `military_equipment` table.\n\nFirst, we need to identify the columns in the `military_equipment` table and their data types. From the context provided, we can see that the table has four columns: `id`, `name`, `type`, and `country`. The `id` column is a primary key, which means it should be unique for each row.\n\nTo add new military equipment, we need to provide values for all four columns. Let's assume we want to add the following data:\n\n- Equipment ID: 2\n- Equipment Name: 'F-35 Lightning II'\n- Equipment",
    sql="Here is the completed signature:\n\nSql Prompt: Add new military equipment to 'military_equipment' table\n\nSql Context: CREATE TABLE military_equipment (id INT PRIMARY KEY, name VARCHAR(255), type VARCHAR(255), country VARCHAR(255)); INSERT INTO military_equipment (id, name, type, country) VALUES (1, 'M1 Abrams', 'Tank', 'USA');\n\nReasoning: Let's think step by step in order to provide the SQL command for adding new military equipment to the `military_equipment` table. First, we need"
), 0), (Example({'sql_prompt': 'Show total number of union members by state', 'sql_context': "CREATE TABLE union_members (id INT, name VARCHAR(50), state VARCHAR(2), city VARCHAR(20), occupation VARCHAR(20)); INSERT INTO union_members (id, name, state, city, occupation) VALUES (1, 'John Doe', 'NY', 'New York', 'Engineer'); INSERT INTO union_members (id, name, state, city, occupation) VALUES (2, 'Jane Smith', 'CA', 'Los Angeles', 'Teacher'); INSERT INTO union_members (id, name, state, city, occupation) VALUES (3, 'Alice Johnson', 'NY', 'Buffalo', 'Nurse');", 'sql': 'SELECT state, COUNT(*) as total_members FROM union_members GROUP BY state;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql Prompt: Show total number of union members by state\n\nSql Context: CREATE TABLE union_members (id INT, name VARCHAR(50), state VARCHAR(2), city VARCHAR(20), occupation VARCHAR(20)); INSERT INTO union_members (id, name, state, city, occupation) VALUES (1, 'John Doe', 'NY', 'New York', 'Engineer'); INSERT INTO union_members (id, name, state, city, occupation) VALUES (2, 'Jane Smith', 'CA', 'Los Angeles', 'Teacher'); INSERT INTO union_members (id, name, state",
    sql="Here is the completed signature:\n\nSql Prompt: Show total number of union members by state\n\nSql Context: CREATE TABLE union_members (id INT, name VARCHAR(50), state VARCHAR(2), city VARCHAR(20), occupation VARCHAR(20));\nINSERT INTO union_members (id, name, state, city, occupation) VALUES (1, 'John Doe', 'NY', 'New York', 'Engineer');\nINSERT INTO union_members (id, name, state, city, occupation) VALUES (2, 'Jane Smith', 'CA', 'Los Angeles', 'Teacher');\nINSERT INTO union_members ("
), 1), (Example({'sql_prompt': 'What is the total value of military equipment sales to all countries?', 'sql_context': "CREATE TABLE military_sales (id INT, country VARCHAR, value FLOAT); INSERT INTO military_sales (id, country, value) VALUES (1, 'Canada', 5000000), (2, 'Mexico', 3000000), (3, 'Canada', 7000000);", 'sql': 'SELECT SUM(value) FROM military_sales;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql Prompt: To find the total value of military equipment sales to all countries, we can use the SUM function. Here is the SQL query:\n\n```sql\nSELECT SUM(value) as total_sales FROM military_sales;\n```\n\nThis query will sum up the values in the 'value' column from the 'military_sales' table, giving us the total value of military equipment sales to all countries.",
    sql="Here is the completed signature:\n\n`Sql Prompt:` What is the total value of military equipment sales to all countries?\n\n`Sql Context:` CREATE TABLE `military_sales` (`id` INT, `country` VARCHAR, `value` FLOAT);\nINSERT INTO `military_sales` (`id`, `country`, `value`) VALUES (1, 'Canada', 5000000), (2, 'Mexico', 3000000), (3, 'Canada', 7000000);\n\n`Reasoning:` Let's think step by step in order to"
), 1), (Example({'sql_prompt': 'Identify the top 3 countries with the highest number of social impact projects in 2019.', 'sql_context': "CREATE TABLE countries (id INT, name VARCHAR(255), total_projects INT); INSERT INTO countries (id, name, total_projects) VALUES (1, 'Brazil', 500), (2, 'India', 700), (3, 'South Africa', 350); CREATE TABLE projects_by_country (country VARCHAR(255), project_count INT); INSERT INTO projects_by_country (country, project_count) SELECT country, COUNT(*) FROM projects GROUP BY country;", 'sql': 'SELECT c.name, p.project_count FROM countries c JOIN (SELECT country, COUNT(*) AS project_count FROM projects GROUP BY country ORDER BY project_count DESC LIMIT 3) p ON c.name = p.country;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="answer the question. First, we need to join the `countries` table with the `projects_by_country` table to get the total number of social impact projects for each country in 2019. Since the question asks for 2019, I'll assume that all projects are from 2019 for simplicity.\n\nHowever, the provided context does not include a table for social impact projects or any information about them. To get the total number of social impact projects per country in 2019, we would need an additional table like this:\n\n```sql\nCREATE TABLE projects (id INT, country VARCHAR(255), year INT, project_type VAR",
    sql="Here is the completed signature for the given prompt:\n\n```sql\nSql Prompt: Identify the top 3 countries with the highest number of social impact projects in 2019.\n\nSql Context:\nCREATE TABLE countries (id INT, name VARCHAR(255), total_projects INT);\nINSERT INTO countries (id, name, total_projects) VALUES (1, 'Brazil', 500), (2, 'India', 700), (3, 'South Africa', 350);\nCREATE TABLE projects (id INT, country VARCHAR(255), year INT, project_type VARCHAR(255));"
), 1), (Example({'sql_prompt': 'What is the maximum market price of Terbium in China for 2017?', 'sql_context': 'CREATE TABLE Terbium_Market_Prices (id INT, year INT, country VARCHAR(255), market_price FLOAT);', 'sql': "SELECT MAX(market_price) FROM Terbium_Market_Prices WHERE year = 2017 AND country = 'China';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql Prompt: To find the maximum market price of Terbium in China for 2017, we need to filter the data based on the year and country. Then, we can use the MAX function to find the highest value.',
    sql="SELECT MAX(market_price) as max_price FROM Terbium_Market_Prices WHERE year = 2017 AND country = 'China';"
), 0), (Example({'sql_prompt': 'What is the maximum amount of research grant received by a faculty member in the Arts and Humanities department?', 'sql_context': "CREATE TABLE grants_faculty (id INT, department VARCHAR(50), faculty_name VARCHAR(50), amount DECIMAL(10,2), grant_date DATE); INSERT INTO grants_faculty (id, department, faculty_name, amount, grant_date) VALUES (1, 'Arts and Humanities', 'Grace', 12000.00, '2018-06-10'), (2, 'Arts and Humanities', 'Harry', 18000.00, '2019-12-20'), (3, 'Arts and Humanities', 'Ida', 20000.00, '2020-08-05');", 'sql': "SELECT MAX(amount) FROM grants_faculty WHERE department = 'Arts and Humanities';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="find the maximum amount of research grant received by a faculty member in the Arts and Humanities department.\n\n1. First, we need to filter the data for the Arts and Humanities department.\n2. Then, we need to sort the filtered data based on the grant amount in descending order.\n3. Finally, we will select only the first row (which contains the maximum grant amount) from the sorted data.\n\nHere's the SQL query that accomplishes this:\n\n```sql\nSELECT MAX(amount) as max_grant_amount FROM grants_faculty WHERE department = 'Arts and Humanities' ORDER BY amount DESC LIMIT 1;\n```\n\nThis query",
    sql="Here is the completed signature:\n\n`Sql Prompt:` What is the maximum amount of research grant received by a faculty member in the Arts and Humanities department?\n\n`Sql Context:`\n```sql\nCREATE TABLE grants_faculty (id INT, department VARCHAR(50), faculty_name VARCHAR(50), amount DECIMAL(10,2), grant_date DATE);\nINSERT INTO grants_faculty (id, department, faculty_name, amount, grant_date) VALUES (1, 'Arts and Humanities', 'Grace', 12000.00, '2018-06-10'), ("
), 1), (Example({'sql_prompt': 'What is the total mass of all space debris in orbit?', 'sql_context': "CREATE TABLE Space_Debris (ID INT, Object_Type VARCHAR(50), Mass FLOAT); INSERT INTO Space_Debris (ID, Object_Type, Mass) VALUES (1, 'Defunct Satellite', 1500.0), (2, 'Rocket Body', 2000.0), (3, 'Fuel Tank', 500.0), (4, 'Nuts and Bolts', 100.0), (5, 'Spent Rocket Stage', 3000.0);", 'sql': 'SELECT SUM(Mass) FROM Space_Debris;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql Prompt: To find the total mass of all space debris in orbit, we can use the SUM function in SQL. Here is the query:\n\n```sql\nSELECT SUM(Mass) as Total_Mass FROM Space_Debris;\n```\n\nThis query will sum up the Mass column from the Space_Debris table and return the total mass of all space debris in orbit.',
    sql="Sql Prompt: What is the average lifespan of each equipment type in the 'equipment' database?\n\nSql Context: CREATE TABLE Equipment (EquipmentID INT, EquipmentName VARCHAR(50), Type VARCHAR(50), Manufacturer VARCHAR(50), Lifespan INT); INSERT INTO Equipment (EquipmentID, EquipmentName, Type, Manufacturer, Lifespan) VALUES (1, 'Component1', 'Electrical', 'Manufacturer1', 3), (2, 'Component2', 'Mechanical', 'Manufacturer2', 5), (3, 'Component3', 'Electrical"
), 0), (Example({'sql_prompt': 'What is the average age of players who play "Racing Simulator 2022"?', 'sql_context': "CREATE TABLE Players (PlayerID INT, PlayerName VARCHAR(50), Game VARCHAR(50), Age INT); INSERT INTO Players (PlayerID, PlayerName, Game, Age) VALUES (1, 'John Doe', 'Racing Simulator 2022', 25), (2, 'Jane Smith', 'Racing Simulator 2022', 30), (3, 'Alice Johnson', 'Shooter Game 2022', 22);", 'sql': "SELECT AVG(Age) FROM Players WHERE Game = 'Racing Simulator 2022';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql Prompt: To find the average age of players who play "Racing Simulator 2022", we first need to filter out only those players who play this game. Then, we calculate the average age among these filtered players.\n\nSql Context (continued): CREATE TABLE Players (PlayerID INT, PlayerName VARCHAR(50), Game VARCHAR(50), Age INT); INSERT INTO Players (PlayerID, PlayerName, Game, Age) VALUES (1, \'John Doe\', \'Racing Simulator 2022\', 25), (2, \'Jane Smith\', \'Racing Simulator 2022\', 30',
    sql='Here is the completed signature:\n\nSql Prompt: What is the average age of players who play "Racing Simulator 2022"?\n\nSql Context:\nCREATE TABLE Players (PlayerID INT, PlayerName VARCHAR(50), Game VARCHAR(50), Age INT);\nINSERT INTO Players (PlayerID, PlayerName, Game, Age) VALUES (1, \'John Doe\', \'Racing Simulator 2022\', 25), (2, \'Jane Smith\', \'Racing Simulator 2022\', 30), (3, \'Alice Johnson\', \'Shooter Game 2022\', 22'
), 1), (Example({'sql_prompt': 'What is the total revenue generated by concert ticket sales in the US?', 'sql_context': "CREATE TABLE concert_tickets (ticket_id int, venue_id int, ticket_price decimal, timestamp datetime, country varchar(255)); INSERT INTO concert_tickets (ticket_id, venue_id, ticket_price, timestamp, country) VALUES (1, 789, 50.00, '2022-06-01 12:00:00', 'United States');", 'sql': "SELECT SUM(ticket_price) as total_revenue FROM concert_tickets WHERE timestamp BETWEEN '2022-01-01' AND '2022-12-31' AND country = 'United States';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="find the total revenue generated by concert ticket sales in the US. First, we need to calculate the total number of tickets sold in the US and then multiply that by the ticket price. Here's how we can write the SQL query:\n\n```sql\nSELECT SUM(ticket_price) as total_revenue FROM concert_tickets WHERE country = 'United States';\n```\n\nThis query will sum up all the ticket prices for tickets sold in the US, giving us the total revenue generated by concert ticket sales in the US.",
    sql="Here is the completed signature:\n\nSql Prompt: What is the total revenue generated by concert ticket sales in the US?\n\nSql Context: CREATE TABLE concert_tickets (ticket_id int, venue_id int, ticket_price decimal, timestamp datetime, country varchar(255));\nINSERT INTO concert_tickets (ticket_id, venue_id, ticket_price, timestamp, country) VALUES (1, 789, 50.00, '2022-06-01 12:00:00', 'United States');\n\nReasoning: Let's think step by step in order"
), 1), (Example({'sql_prompt': "How many cases did attorney 'Jane Doe' handle in total?", 'sql_context': "CREATE TABLE Attorneys (AttorneyID int, Name varchar(50), Specialty varchar(50)); INSERT INTO Attorneys (AttorneyID, Name, Specialty) VALUES (2, 'Jane Doe', 'Civil'); CREATE TABLE Cases (CaseID int, ClientID int, Category varchar(50), AttorneyID int); INSERT INTO Cases (CaseID, ClientID, Category, AttorneyID) VALUES (301, 3, 'Civil', 2);", 'sql': "SELECT COUNT(*) as TotalCases FROM Cases WHERE AttorneyID = (SELECT AttorneyID FROM Attorneys WHERE Name = 'Jane Doe');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql Prompt: To find out how many cases attorney 'Jane Doe' handled in total, we need to count the number of rows where the 'AttorneyID' in the 'Cases' table matches the ID of 'Jane Doe'.",
    sql="SELECT COUNT(*) as total_cases FROM Cases WHERE AttorneyID = (SELECT AttorneyID FROM Attorneys WHERE Name = 'Jane Doe');"
), 1), (Example({'sql_prompt': 'Show the top 3 content categories in Japan with the most posts.', 'sql_context': "CREATE TABLE content_categories (id INT, content_category VARCHAR(255)); CREATE TABLE posts_extended (id INT, content_category_id INT, content TEXT, country VARCHAR(255)); INSERT INTO content_categories (id, content_category) VALUES (1, 'AI'), (2, 'Data Science'), (3, 'Machine Learning'); INSERT INTO posts_extended (id, content_category_id, content, country) VALUES (1, 1, 'Hello', 'Japan'), (2, 1, 'World', 'Japan'), (3, 2, 'AI', 'Japan');", 'sql': "SELECT content_categories.content_category, COUNT(posts_extended.id) AS post_count FROM content_categories JOIN posts_extended ON posts_extended.content_category_id = content_categories.id WHERE posts_extended.country = 'Japan' GROUP BY content_categories.content_category ORDER BY post_count DESC LIMIT 3;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql Prompt: To find the top 3 content categories in Japan with the most posts, we first need to join the `content_categories` and `posts_extended` tables based on their relationship between `content_category_id`. Then, we group the results by `content_category` for each country 'Japan'. Finally, we use the `COUNT(*)` function to count the number of posts for each content category in Japan. To get the top 3 categories, we order the results by the count in descending order and limit the results to 3 using the `LIMIT` clause.",
    sql='```sql\nSELECT content_category, COUNT(*) as post_count\nFROM'
), 0), (Example({'sql_prompt': 'How many defense contracts were signed in each quarter of 2020?', 'sql_context': "CREATE TABLE defense_contracts (contract_id INT, contract_date DATE); INSERT INTO defense_contracts VALUES (1, '2020-03-15'), (2, '2020-06-01'), (3, '2020-09-15');", 'sql': "SELECT TO_CHAR(contract_date, 'YYYY-Q') AS quarter, COUNT(*) FROM defense_contracts WHERE contract_date >= DATE '2020-01-01' AND contract_date < DATE '2021-01-01' GROUP BY quarter;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql Prompt: To find out how many defense contracts were signed in each quarter of 2020, we first need to convert the contract dates into quarters. In SQL, we can do this by using the `QUARTER()` function. Then, we'll group the contracts by their quarters and count them. Here is the SQL query:\n\n```sql\nSELECT QUARTER(contract_date) as quarter, COUNT(*) as num_contracts FROM defense_contracts GROUP BY quarter;\n```\n\nThis query will return a result set with two columns: `quarter` (representing the quarter of each contract's date) and `num_contract",
    sql="Here is the completed signature:\n\nSql Prompt: How many defense contracts were signed in each quarter of 2020?\n\nSql Context: CREATE TABLE defense_contracts (contract_id INT, contract_date DATE); INSERT INTO defense_contracts VALUES (1, '2020-03-15'), (2, '2020-06-01'), (3, '2020-09-15');\n\nReasoning: Let's think step by step in order to produce the SQL. We need to convert the contract dates into quarters and then group them by their quarters and count them. Here is"
), 1), (Example({'sql_prompt': 'What is the total duration played for each player?', 'sql_context': "CREATE TABLE PlayerGame (PlayerID INT, GameID INT, Played DATE, StartTime TIMESTAMP, EndTime TIMESTAMP); INSERT INTO PlayerGame (PlayerID, GameID, Played, StartTime, EndTime) VALUES (1, 1, '2022-01-01', '2022-01-01 10:00:00', '2022-01-01 12:00:00'), (2, 2, '2022-01-02', '2022-01-02 14:00:00', '2022-01-02 16:00:00'), (3, 1, '2022-01-03', '2022-01-03 10:00:00', '2022-01-03 11:00:00'), (4, 3, '2022-01-04', '2022-01-04 18:00:00', '2022-01-04 19:00:00');", 'sql': 'SELECT PlayerID, SUM(TIMESTAMPDIFF(MINUTE, StartTime, EndTime)) FROM PlayerGame GROUP BY PlayerID;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="find the total duration played for each player. First, we need to calculate the difference between the `EndTime` and `StartTime` for each game played by a player. Then, we should sum up these differences for all games of that player.\n\nHere's the SQL query:\n\n```sql\nSELECT PlayerID, TIMESTAMPDIFF(SECOND, StartTime, EndTime) AS TotalDuration\nFROM PlayerGame\nGROUP BY PlayerID;\n```\n\nThis query groups the data by `PlayerID`, calculates the difference between `EndTime` and `StartTime` for each game (in seconds), and then sums up these differences for all games of that player. The result",
    sql='SELECT PlayerID, SUM(TIMESTAMPDIFF(SECOND, StartTime, EndTime)) AS TotalDuration FROM PlayerGame GROUP BY PlayerID;\n\nThis query calculates the total duration played by each player by summing up the differences between `EndTime` and `StartTime` for all games of that player. The result will be in seconds, so if you want to display it in minutes or hours, you can use the `MINUTE()` or `HOUR()` functions accordingly. For example:\n\n```sql\nSELECT PlayerID, SUM(TIMESTAMPDIFF(SECOND, StartTime, EndTime)) / 60 AS TotalDurationInMinutes'
), 0), (Example({'sql_prompt': 'Find the percentage change in tourism to Thailand between 2019 and 2021.', 'sql_context': 'CREATE TABLE thailand_tourism (year INT, total_visitors INT); INSERT INTO thailand_tourism (year, total_visitors) VALUES (2019, 40000), (2021, 30000);', 'sql': 'SELECT (30000 - 40000) * 100.0 / 40000 AS change_percentage FROM thailand_tourism WHERE year = 2021;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='First, we need to calculate the difference between the number of visitors in 2021 and 2019. Then, we divide this difference by the number of visitors in 2019 and multiply by 100 to get the percentage change.\n\nIn SQL, this can be achieved with the following query:\n\n```sql\nSELECT (30000 - 40000) / 40000 * 100 as percentage_change;\n```\n\nThis query calculates the difference between the number of visitors in 2021 and 2019, divides it by the number of visitors in 20',
    sql="Here is the completed signature:\n\nSql Prompt: Find the percentage change in tourism to Thailand between 2019 and 2021.\n\nSql Context: CREATE TABLE thailand_tourism (year INT, total_visitors INT);\nINSERT INTO thailand_tourism (year, total_visitors) VALUES (2019, 40000), (2021, 30000);\n\nReasoning: Let's think step by step in order to First, we need to calculate the difference between the number of visitors in 2021 and 2019. Then, we divide"
), 1), (Example({'sql_prompt': 'How many students with physical disabilities have not received any accommodations in the last year?', 'sql_context': 'CREATE TABLE Accommodations (id INT, student VARCHAR(255), date DATE); CREATE TABLE Students (id INT, name VARCHAR(255), age INT, disability VARCHAR(255));', 'sql': "SELECT COUNT(*) FROM Students LEFT JOIN Accommodations ON Students.id = Accommodations.student WHERE disability = 'physical disability' AND date IS NULL;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql Prompt: To find the number of students with physical disabilities who have not received any accommodations in the last year, we first need to identify students with physical disabilities and then filter out those who have no accommodation records within the specified time frame. Here is the SQL query for this task:\n\n```sql\nSELECT COUNT(*) as no_accommodations\nFROM Students s\nWHERE NOT EXISTS (\n    SELECT 1 FROM Accommodations a WHERE s.id = a.student AND a.date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\n) AND disability = 'Physical Disabilities';\n```\n\nThis",
    sql="Here is the completed signature:\n\nSql Prompt: How many students with physical disabilities have not received any accommodations in the last year?\n\nSql Context:\n```sql\nCREATE TABLE Accommodations (id INT, student VARCHAR(255), date DATE);\nCREATE TABLE Students (id INT, name VARCHAR(255), age INT, disability VARCHAR(255));\n```\nReasoning: Let's think step by step in order to answer the question. We need to identify students with physical disabilities and then filter out those who have no accommodation records within the specified time frame. Here is the SQL query for this task:\n\n```sql"
), 1), (Example({'sql_prompt': 'What is the maximum property price in neighborhoods with inclusive housing policies, and the minimum size of properties in those neighborhoods?', 'sql_context': "CREATE TABLE property (id INT, price INT, size_sqft INT, area VARCHAR(255), has_inclusive_policy BOOLEAN); INSERT INTO property (id, price, size_sqft, area, has_inclusive_policy) VALUES (1, 500000, 1500, 'urban', true), (2, 400000, 1200, 'urban', false);", 'sql': "SELECT MAX(price), MIN(size_sqft) FROM property WHERE area = 'urban' AND has_inclusive_policy = true;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="find the maximum property price and the minimum size of properties in neighborhoods with inclusive housing policies. First, we need to filter out the rows that have `has_inclusive_policy` set to true. Then, for the filtered data, we can find the maximum price and the minimum size using aggregate functions.\n\nHere's the SQL query:\n\n```sql\nSELECT MAX(price) as max_price, MIN(size_sqft) as min_size\nFROM property\nWHERE has_inclusive_policy = true;\n```\n\nThis query will return two values: `max_price`, which is the maximum property price in neighborhoods with inclusive housing policies, and `min_size",
    sql="Here's the completed signature for the given SQL Prompt:\n\nSql Prompt: What is the maximum property price in neighborhoods with inclusive housing policies, and the minimum size of properties in those neighborhoods?\n\nSql Context: CREATE TABLE property (id INT, price INT, size_sqft INT, area VARCHAR(255), has_inclusive_policy BOOLEAN);\nINSERT INTO property (id, price, size_sqft, area, has_inclusive_policy) VALUES (1, 500000, 1500, 'urban', true), (2, 400000, 1200"
), 1), (Example({'sql_prompt': "Add a new safety incident to the safety_incidents table (id: 4, aircraft: 'Space Shuttle Challenger', date: '1986-01-28', description: 'O-ring failure')", 'sql_context': 'CREATE TABLE safety_incidents (id INT, aircraft VARCHAR(255), date DATE, description VARCHAR(255));', 'sql': "INSERT INTO safety_incidents (id, aircraft, date, description) VALUES (4, 'Space Shuttle Challenger', '1986-01-28', 'O-ring failure');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Insert a new row into the `safety_incidents` table with the provided data. Here is the SQL command:\n\n```sql\nINSERT INTO safety_incidents (id, aircraft, date, description) VALUES (4, 'Space Shuttle Challenger', '1986-01-28', 'O-ring failure');\n```",
    sql="INSERT INTO safety_incidents (id, aircraft, date, description) VALUES (4, 'Space Shuttle Challenger', '1986-01-28', 'O-ring failure');\n\nReasoning: Let's think step by step in order to Insert a new row into the `safety_incidents` table with the provided data. Here is the SQL command: ```sql\nINSERT INTO safety_incidents (id, aircraft, date, description)\nVALUES (4, 'Space Shuttle Challenger', '1986-01-28', 'O-ring failure');\n```\nThis command inserts a"
), 1), (Example({'sql_prompt': "What is the average age of players who prefer the 'FPS' genre in the 'player_preferences' and 'player_demographics' tables?", 'sql_context': "CREATE TABLE player_preferences (player_id INT, genre VARCHAR(50)); CREATE TABLE player_demographics (player_id INT, age INT); INSERT INTO player_preferences (player_id, genre) VALUES (1, 'FPS'), (2, 'RPG'), (3, 'FPS'), (4, 'Simulation'); INSERT INTO player_demographics (player_id, age) VALUES (1, 25), (2, 30), (3, 35), (4, 40);", 'sql': "SELECT AVG(age) as avg_fps_age FROM player_demographics JOIN player_preferences ON player_preferences.player_id = player_demographics.player_id WHERE genre = 'FPS';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="find the average age of players who prefer the 'FPS' genre. First, we need to join the `player_preferences` and `player_demographics` tables on the common `player_id`. Then, we filter the results to only include rows where the preferred genre is 'FPS'. Finally, we calculate the average age using the AVG function.\n\nHere's the SQL query:\n\n```sql\nSELECT AVG(age) as avg_age FROM player_demographics\nJOIN player_preferences ON player_demographics.player_id = player_preferences.player_id\nWHERE genre = 'FPS';\n```\n\nThis",
    sql="Here is the completed signature:\n\n`Sql Prompt:` What is the average age of players who prefer the 'FPS' genre in the 'player_preferences' and 'player_demographics' tables?\n\n`Sql Context:`\n```sql\nCREATE TABLE player_preferences (player_id INT, genre VARCHAR(50));\nCREATE TABLE player_demographics (player_id INT, age INT);\nINSERT INTO player_preferences (player_id, genre) VALUES (1, 'FPS'), (2, 'RPG'), (3, 'FPS'), (4, 'Simulation');\nINSERT INTO player_demographics (player_"
), 1), (Example({'sql_prompt': 'What is the diversity ratio (percentage of non-male employees) in each department?', 'sql_context': "CREATE TABLE Employees (EmployeeID int, Department varchar(20), Gender varchar(10)); INSERT INTO Employees (EmployeeID, Department, Gender) VALUES (1, 'Marketing', 'Male'); INSERT INTO Employees (EmployeeID, Department, Gender) VALUES (2, 'Marketing', 'Female'); INSERT INTO Employees (EmployeeID, Department, Gender) VALUES (3, 'IT', 'Male'); INSERT INTO Employees (EmployeeID, Department, Gender) VALUES (4, 'IT', 'Non-binary');", 'sql': "SELECT Department, (COUNT(CASE WHEN Gender <> 'Male' THEN 1 END) / COUNT(*)) * 100 AS DiversityRatio FROM Employees GROUP BY Department;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="find the diversity ratio (percentage of non-male employees) in each department. First, we need to count the total number of employees and the number of non-male employees in each department. Then, we can calculate the percentage of non-male employees for each department.\n\nHere's the SQL query:\n\n```sql\nSELECT Department, COUNT(EmployeeID) as Total_Employees, SUM(CASE WHEN Gender != 'Male' THEN 1 ELSE 0 END) as Non_Male_Employees,\n       ROUND((SUM(CASE WHEN Gender != 'Male' THEN 1 ELSE 0",
    sql="Here is the completed signature for the second question:\n\nSql Prompt: What is the diversity ratio (percentage of non-male employees) in each department?\n\nSql Context: CREATE TABLE Employees (EmployeeID int, Department varchar(20), Gender varchar(10));\nINSERT INTO Employees (EmployeeID, Department, Gender) VALUES (1, 'Marketing', 'Male');\nINSERT INTO Employees (EmployeeID, Department, Gender) VALUES (2, 'Marketing', 'Female');\nINSERT INTO Employees (EmployeeID, Department, Gender) VALUES (3"
), 1), (Example({'sql_prompt': 'What is the average donation per donor in India?', 'sql_context': "CREATE TABLE donations (donor_id INT, donation_amount DECIMAL(10, 2), donation_date DATE, country TEXT); INSERT INTO donations VALUES (1, 50.00, '2021-05-15', 'India'), (2, 100.00, '2021-06-10', 'India'), (3, 25.00, '2021-04-01', 'India');", 'sql': "SELECT AVG(donation_amount) FROM donations WHERE country = 'India';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql Prompt: What is the average donation per donor in India?\nSql Context: CREATE TABLE donations (donor_id INT, donation_amount DECIMAL(10, 2), donation_date DATE, country TEXT); INSERT INTO donations VALUES (1, 50.00, '2021-05-15', 'India'), (2, 100.00, '2021-06-10', 'India'), (3, 25.00, '2021-04-01', 'India');",
    sql='SE'
), 0), (Example({'sql_prompt': 'How many wildlife habitats in South Africa have a total area greater than 50000 hectares?', 'sql_context': 'CREATE TABLE wildlife_habitats (id INT, name TEXT, area REAL, country TEXT);', 'sql': "SELECT COUNT(*) FROM wildlife_habitats WHERE country = 'South Africa' GROUP BY country HAVING SUM(area) > 50000;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT COUNT(*) as num_habitats FROM wildlife_habitats WHERE country = 'South Africa' AND area > 50000;\n\nThis SQL query will count the number of wildlife habitats in South Africa that have an area greater than 50,000 hectares. The `WHERE` clause filters the results to only include rows where the country is 'South Africa' and the area is greater than 50,000 hectares. The `COUNT(*)` function counts the number of rows that meet these conditions, and the result is labeled as `num_habitats`.",
    sql="SELECT COUNT(*) as num_habitats\nFROM wildlife_habitats\nWHERE country = 'South Africa' AND area > 50000;\n\nThis SQL query will count the number of wildlife habitats in South Africa that have an area greater than 50,000 hectares. The `WHERE` clause filters the results to only include rows where the country is 'South Africa' and the area is greater than 50,000 hectares. The `COUNT(*)` function counts the number of rows that meet these conditions, and the result is labeled as `num_habitats`."
), 0), (Example({'sql_prompt': 'What is the percentage of faculty members who identify as AAPI in the School of Business?', 'sql_context': "CREATE TABLE faculty_members (id INT, faculty_name VARCHAR(50), faculty_department VARCHAR(50), faculty_race VARCHAR(20)); INSERT INTO faculty_members (id, faculty_name, faculty_department, faculty_race) VALUES (1, 'Taylor Smith', 'Business Administration', 'AAPI'), (2, 'James Johnson', 'Marketing', 'White'), (3, 'Avery Brown', 'Finance', 'Black'), (4, 'Katie Davis', 'Management', 'White'), (5, 'Jamie Wilson', 'Accounting', 'Latinx'), (6, 'Leah Kim', 'Business Analytics', 'AAPI');", 'sql': "SELECT (COUNT(*) FILTER (WHERE faculty_race = 'AAPI')) * 100.0 / COUNT(*) FROM faculty_members WHERE faculty_department LIKE '%Business%';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql Prompt: What is the percentage of faculty members who identify as AAPI in the School of Business?\nSql Context: CREATE TABLE faculty_members (id INT, faculty_name VARCHAR(50), faculty_department VARCHAR(50), faculty_race VARCHAR(20)); INSERT INTO faculty_members (id, faculty_name, faculty_department, faculty_race) VALUES (1, 'Taylor Smith', 'Business Administration', 'AAPI'), (2, 'James Johnson', 'Marketing', 'White'), (3, 'Avery Brown', 'Finance', 'Black'), (4, 'Katie Davis",
    sql="Here is the completed signature:\n\nSql Prompt: What is the percentage of faculty members who identify as AAPI in the School of Business?\n\nSql Context:\nCREATE TABLE faculty_members (id INT, faculty_name VARCHAR(50), faculty_department VARCHAR(50), faculty_race VARCHAR(20));\nINSERT INTO faculty_members (id, faculty_name, faculty_department, faculty_race) VALUES (1, 'Taylor Smith', 'Business Administration', 'AAPI'), (2, 'James Johnson', 'Marketing', 'White'), (3, 'Avery Brown', 'Finance', 'Black'),"
), 1), (Example({'sql_prompt': 'How many water treatment plants are there in the province of Ontario, Canada?', 'sql_context': "CREATE TABLE water_treatment_plants_ontario (id INT, province VARCHAR); INSERT INTO water_treatment_plants_ontario (id, province) VALUES (1, 'Ontario'), (2, 'Quebec'), (3, 'Ontario'), (4, 'British Columbia');", 'sql': "SELECT COUNT(*) FROM water_treatment_plants_ontario WHERE province = 'Ontario';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="answer the question. The table `water_treatment_plants_ontario` contains information about water treatment plants, with each row representing a plant and having an id and province associated with it. To find out how many water treatment plants are there in the province of Ontario, Canada, we need to count the number of rows where the province is 'Ontario'.\n\nThe SQL query for this would be:\n\n```sql\nSELECT COUNT(*) as num_plants FROM water_treatment_plants_ontario WHERE province = 'Ontario';\n```\n\nThis query selects all rows from the `water_treatment_plants_ontario` table",
    sql="Here is the completed signature:\n\nSql Prompt: How many water treatment plants are there in the province of Ontario, Canada?\n\nSql Context: CREATE TABLE water_treatment_plants_ontario (id INT, province VARCHAR); INSERT INTO water_treatment_plants_ontario (id, province) VALUES (1, 'Ontario'), (2, 'Quebec'), (3, 'Ontario'), (4, 'British Columbia');\n\nReasoning: Let's think step by step in order to answer the question. The table `water_treatment_plants_ontario` contains information about water treatment plants"
), 1), (Example({'sql_prompt': 'Delete vessels that have not been inspected in the last 12 months', 'sql_context': "CREATE TABLE vessel_inspection (vessel_id INT, inspection_date DATE); INSERT INTO vessel_inspection (vessel_id, inspection_date) VALUES (1, '2020-01-01'), (2, '2021-06-15'), (3, '2019-12-20');", 'sql': 'DELETE FROM vessel_inspection WHERE vessel_id IN (SELECT vessel_id FROM vessel_inspection WHERE inspection_date < DATE_SUB(CURDATE(), INTERVAL 12 MONTH));'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: DELETE FROM vessel_inspection WHERE vessel_id NOT IN (SELECT vessel_id FROM (SELECT vessel_id FROM vessel_inspection ORDER BY inspection_date DESC LIMIT 12) AS recent_inspections);\n\nThis SQL statement will delete all vessels that have not been inspected in the last 12 months. The subquery `(SELECT vessel_id FROM vessel_inspection ORDER BY inspection_date DESC LIMIT 12)` selects the IDs of the most recent 12 inspections, and the main query then deletes all records for vessels that are not in this list, effectively removing those that have not been inspected in the last year.',
    sql='DELETE FROM vessel_inspection\nWHERE vessel_id NOT IN (SELECT vessel_id FROM (SELECT vessel_id FROM vessel_inspection ORDER BY inspection_date DESC LIMIT 12) AS recent_inspections);\n\nThis SQL statement will delete all vessels that have not been inspected in the last 12 months. The subquery `(SELECT vessel_id FROM vessel_inspection ORDER BY inspection_date DESC LIMIT 12)` selects the IDs of the most recent 12 inspections, and the main query then deletes all records for vessels that are not in this list, effectively removing those that have not been inspected in the last year.'
), 0), (Example({'sql_prompt': "Which materials in the 'inventory' table have a quantity of at least 100 and are not used in the production of any product in the 'products' table?", 'sql_context': "CREATE TABLE inventory(id INT, material VARCHAR(255), quantity INT); CREATE TABLE products(id INT, material VARCHAR(255), quantity INT); INSERT INTO inventory(id, material, quantity) VALUES (1, 'organic cotton', 75), (2, 'conventional cotton', 100), (3, 'organic cotton', 30), (4, 'hemp', 60); INSERT INTO products(id, material, quantity) VALUES (1, 'organic cotton', 150), (2, 'conventional cotton', 200), (3, 'hemp', 100);", 'sql': 'SELECT material FROM inventory i WHERE quantity >= 100 AND NOT EXISTS (SELECT * FROM products p WHERE i.material = p.material);'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='find the materials in the `inventory` table that have a quantity of at least 100 and are not used in the production of any product in the `products` table.\n\nFirst, we need to identify the materials that have a quantity of at least 100 in the `inventory` table:\n\n```sql\nSELECT material FROM inventory WHERE quantity >= 100;\n```\n\nNext, for each identified material, we want to check if it is used in any product in the `products` table. To do this, we can use a subquery that checks if there exists any row in the `products` table with the same material as the one being checked:',
    sql="Here is the completed signature:\n\nSql Prompt: Which materials in the 'inventory' table have a quantity of at least 100 and are not used in the production of any product in the 'products' table?\n\nSql Context:\nCREATE TABLE inventory(id INT, material VARCHAR(255), quantity INT);\nCREATE TABLE products(id INT, material VARCHAR(255), quantity INT);\nINSERT INTO inventory(id, material, quantity) VALUES (1, 'organic cotton', 75), (2, 'conventional cotton', 100), (3, 'organic cotton', 30), (4, 'hemp',"
), 1), (Example({'sql_prompt': "What is the minimum billing amount for cases in the region 'South'?", 'sql_context': 'CREATE TABLE cases (case_id INT, region TEXT, billing_amount INT);', 'sql': "SELECT MIN(billing_amount) FROM cases WHERE region = 'South';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT MIN(billing_amount) as min_billing_amount FROM cases WHERE region = 'South';\n\nThis SQL query will find the minimum billing amount for cases in the region 'South'. The `MIN()` function is used to find the smallest value in a set of values, and the `WHERE` clause is used to filter the results based on the specified condition. In this case, we are filtering the results to only include cases from the 'South' region.",
    sql="SELECT MIN(billing_amount) as min_billing_amount FROM cases WHERE region = 'South';\n\nThis SQL query will find the minimum billing amount for cases in the region 'South'. The `MIN()` function is used to find the smallest value in a set of values, and the `WHERE` clause is used to filter the results based on the specified condition. In this case, we are filtering the results to only include cases from the 'South' region."
), 0), (Example({'sql_prompt': 'What is the total number of postpaid and prepaid mobile subscribers in each region?', 'sql_context': "CREATE TABLE mobile_subscribers (subscriber_id INT, subscriber_type VARCHAR(10), region VARCHAR(20)); INSERT INTO mobile_subscribers (subscriber_id, subscriber_type, region) VALUES (1, 'postpaid', 'West'), (2, 'prepaid', 'East'), (3, 'postpaid', 'North'), (4, 'prepaid', 'South'), (5, 'postpaid', 'East');", 'sql': 'SELECT region, COUNT(*) as total_subscribers FROM mobile_subscribers GROUP BY region;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql Prompt: To find the total number of postpaid and prepaid mobile subscribers in each region, we need to count the number of rows for each subscriber_type within each region. Here is the SQL query that will do this:\n\n```sql\nSELECT region, SUM(CASE WHEN subscriber_type = 'postpaid' THEN 1 ELSE 0 END) as postpaid_subscribers,\n       SUM(CASE WHEN subscriber_type = 'prepaid' THEN 1 ELSE 0 END) as prepaid_subscribers\nFROM mobile_subscribers\nGROUP BY region;\n```\n\nThis query uses the `S",
    sql="Here is the completed signature:\n\nSql Prompt: What is the total number of postpaid and prepaid mobile subscribers in each region?\n\nSql Context: CREATE TABLE mobile_subscribers (subscriber_id INT, subscriber_type VARCHAR(10), region VARCHAR(20));\nINSERT INTO mobile_subscribers (subscriber_id, subscriber_type, region) VALUES (1, 'postpaid', 'West'), (2, 'prepaid', 'East'), (3, 'postpaid', 'North'), (4, 'prepaid', 'South'), (5, 'postpaid', 'East');\n\nReasoning"
), 1), (Example({'sql_prompt': 'Identify the top 3 mining companies with the highest total production of Praseodymium in 2021 and their respective production amounts.', 'sql_context': "CREATE TABLE Company (Name TEXT, Location TEXT, Established INT); INSERT INTO Company (Name, Location, Established) VALUES ('Delta Minerals', 'Brazil', 2000), ('Epsilon Ore', 'South Africa', 2010), ('Zeta Extraction', 'Canada', 2005), ('Eta Mines', 'Russia', 2008); CREATE TABLE ProductionCompany (Year INT, Company TEXT, Element TEXT, Quantity INT); INSERT INTO ProductionCompany (Year, Company, Element, Quantity) VALUES (2021, 'Delta Minerals', 'Praseodymium', 1000), (2021, 'Epsilon Ore', 'Praseodymium', 1400), (2021, 'Zeta Extraction', 'Praseodymium', 1800), (2021, 'Eta Mines', 'Praseodymium', 1100);", 'sql': "SELECT Company, SUM(Quantity) FROM ProductionCompany WHERE Element = 'Praseodymium' AND Year = 2021 GROUP BY Company ORDER BY SUM(Quantity) DESC FETCH FIRST 3 ROWS ONLY;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql Prompt: To find the top 3 mining companies with the highest total production of Praseodymium in 2021 and their respective production amounts, we can use a SQL query that involves joining the two tables (Company and ProductionCompany) based on the company name, filtering for the year 2021, and then grouping by the company name to sum up the production of Praseodymium. Here's the SQL query:\n\n```sql\nSELECT Company.Name AS Company_Name, SUM(ProductionCompany.Quantity) AS Total_Production\nFROM Company\nJOIN ProductionCompany ON Company.Name = ProductionCompany.Company\nWHERE Year =",
    sql='SELECT Company.Name AS Company_Name, SUM(ProductionCompany.Quantity) AS Total_Production\nFROM Company\nJOIN ProductionCompany ON Company.Name = ProductionCompany.Company\nWHERE Year = 2021\nGROUP BY Company.Name\nORDER BY Total_Production DESC\nLIMIT 3;\n\nThis query will return the top 3 mining companies with the highest total production of Praseodymium in 2021 and their respective production amounts, sorted in descending order. The `LIMIT 3` clause ensures that only the top 3 results are returned.'
), 0), (Example({'sql_prompt': 'How many volunteer hours were recorded for each program in Q2 2021?', 'sql_context': "CREATE TABLE VolunteerHours (VolunteerID INT, ProgramID INT, Hours DECIMAL(5,2), HourDate DATE); INSERT INTO VolunteerHours (VolunteerID, ProgramID, Hours, HourDate) VALUES (1, 1, 5, '2021-04-15'), (2, 2, 3, '2021-06-02'), (1, 1, 4, '2021-05-31'), (3, 3, 2, '2021-04-01'); CREATE TABLE Programs (ProgramID INT, ProgramName TEXT); INSERT INTO Programs (ProgramID, ProgramName) VALUES (1, 'Arts & Culture'), (2, 'Health & Wellness'), (3, 'Environment');", 'sql': "SELECT ProgramID, SUM(Hours) as TotalHours FROM VolunteerHours WHERE HourDate BETWEEN '2021-04-01' AND '2021-06-30' GROUP BY ProgramID;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql Prompt: To find the number of volunteer hours recorded for each program in Q2 2021, we first need to filter the VolunteerHours table for the appropriate date range. Since Q2 2021 spans from April 1st to June 30th (inclusive), we can use the following SQL query:\n\n```sql\nSELECT ProgramID, SUM(Hours) as total_hours\nFROM VolunteerHours\nWHERE HourDate BETWEEN '2021-04-01' AND '2021-06-30'\nGROUP BY ProgramID;\n```\n\nThis",
    sql="Here is the completed signature:\n\nSql Prompt: How many volunteer hours were recorded for each program in Q2 2021?\n\nSql Context:\n```sql\nCREATE TABLE VolunteerHours (VolunteerID INT, ProgramID INT, Hours DECIMAL(5,2), HourDate DATE);\nINSERT INTO VolunteerHours (VolunteerID, ProgramID, Hours, HourDate) VALUES (1, 1, 5, '2021-04-15'), (2, 2, 3, '2021-06-02'), (1, 1,"
), 1), (Example({'sql_prompt': 'What is the maximum production capacity of the chemical manufacturing plants located in Canada?', 'sql_context': "CREATE TABLE chemical_plants (id INT, plant_name VARCHAR(100), country VARCHAR(50), production_capacity INT); INSERT INTO chemical_plants (id, plant_name, country, production_capacity) VALUES (1, 'Canada Plant 1', 'Canada', 5000), (2, 'Canada Plant 2', 'Canada', 7000);", 'sql': "SELECT MAX(production_capacity) FROM chemical_plants WHERE country = 'Canada';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="find the maximum production capacity of the chemical manufacturing plants located in Canada.\n\nFirst, we need to filter the data for only the plants located in Canada. This can be done using the `WHERE` clause with the condition `country = 'Canada'`.\n\nNext, we want to find the plant with the highest production capacity. To do this, we will use the `MAX()` function, which returns the maximum value from a specified group of values.\n\nSo, the SQL query would be:\n\n```sql\nSELECT MAX(production_capacity) as max_capacity FROM chemical_plants WHERE country = 'Canada';\n```\n\nThis query will return the maximum production capacity of the",
    sql="Here is the completed signature:\n\nSql Prompt: What is the maximum production capacity of the chemical manufacturing plants located in Canada?\n\nSql Context: CREATE TABLE chemical_plants (id INT, plant_name VARCHAR(100), country VARCHAR(50), production_capacity INT);\nINSERT INTO chemical_plants (id, plant_name, country, production_capacity) VALUES (1, 'Canada Plant 1', 'Canada', 5000), (2, 'Canada Plant 2', 'Canada', 7000);\n\nReasoning: Let's think step by step in order to find the maximum production capacity of"
), 1), (Example({'sql_prompt': 'Who is the oldest artist from the United States?', 'sql_context': "CREATE TABLE artists (id INT, name VARCHAR(255), age INT, country VARCHAR(255)); INSERT INTO artists (id, name, age, country) VALUES (1, 'Bruce Springsteen', 72, 'United States'), (2, 'Beyoncé', 40, 'United States');", 'sql': "SELECT name, MAX(age) FROM artists WHERE country = 'United States';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql Prompt: To find the oldest artist from the United States, we need to find the maximum age among artists who are from the United States. Here is the SQL query:\n\n```sql\nSELECT name, age FROM artists WHERE country = 'United States' ORDER BY age DESC LIMIT 1;\n```\n\nThis query selects the name and age of artists from the United States, orders them by age in descending order, and returns only one row (the oldest artist) using the `LIMIT 1` clause.",
    sql="Here is the completed signature:\n\nSql Prompt: Who is the oldest artist from the United States?\n\nSql Context: CREATE TABLE artists (id INT, name VARCHAR(255), age INT, country VARCHAR(255));\nINSERT INTO artists (id, name, age, country) VALUES (1, 'Bruce Springsteen', 72, 'United States'), (2, 'Beyoncé', 40, 'United States');\n\nReasoning: Let's think step by step in order to find the oldest artist from the United States. We need to filter the artists table for rows where the country is the United States and"
), 1), (Example({'sql_prompt': 'Find the average height of basketball players in the NBA, categorized by their position.', 'sql_context': 'CREATE TABLE nba_players_height (id INT, player_id INT, height_feet INT, height_inches INT); CREATE TABLE nba_players (id INT, name VARCHAR(100), team VARCHAR(50), position VARCHAR(50));', 'sql': 'SELECT position, AVG(height_feet + height_inches / 12) as avg_height FROM nba_players_height JOIN nba_players ON nba_players_height.player_id = nba_players.id GROUP BY position;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql Prompt: To find the average height of basketball players in the NBA, categorized by their position, we first need to join the `nba_players` and `nba_players_height` tables on the `player_id`. Then, we group the results by the `position` column and calculate the average height for each position using the `AVG()` function. Here's the SQL query:\n\n```sql\nSELECT position, AVG(height_feet * 12 + height_inches / 12) as avg_height_inches\nFROM nba_players JOIN nba_players_height ON nba_players.",
    sql="Here is the completed signature:\n\nSql Prompt: Find the average height of basketball players in the NBA, categorized by their position.\n\nSql Context:\nCREATE TABLE nba_players_height (id INT, player_id INT, height_feet INT, height_inches INT);\nCREATE TABLE nba_players (id INT, name VARCHAR(100), team VARCHAR(50), position VARCHAR(50));\n\nReasoning: Let's think step by step in order to produce the SQL. We need to join the `nba_players` and `nba_players_height` tables on the `player_id`. Then,"
), 1), (Example({'sql_prompt': 'Identify all suppliers who provide non-GMO ingredients to restaurants with Michelin stars.', 'sql_context': 'CREATE TABLE Suppliers (id INT, name VARCHAR(50), isNonGMO BOOLEAN); CREATE TABLE Restaurants (id INT, name VARCHAR(50), numStars INT); CREATE TABLE Ingredients (supplierId INT, restaurantId INT, isNonGMO BOOLEAN);', 'sql': 'SELECT Suppliers.name FROM Suppliers INNER JOIN Ingredients ON Suppliers.id = Ingredients.supplierId INNER JOIN Restaurants ON Ingredients.restaurantId = Restaurants.id WHERE Restaurants.numStars > 2 AND Ingredients.isNonGMO = TRUE;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql Prompt: Identify all suppliers who provide non-GMO ingredients to restaurants with Michelin stars.\n\nSql Context: (Provided)\n\nTo solve this problem, we need to find the intersection of suppliers who provide non-GMO ingredients and restaurants that have Michelin stars. Then, we can join these two sets to get the desired result. Here's the SQL query:\n\n```sql\nSELECT Suppliers.name\nFROM Suppliers\nJOIN Ingredients ON Suppliers.id = Ingredients.supplierId\nJOIN Restaurants ON Ingredients.restaurantId = Restaurants.id\nWHERE Ingredients.isNonGMO = TRUE AND Restaur",
    sql="Here is the completed signature:\n\nSql Prompt: Identify all suppliers who provide non-GMO ingredients to restaurants with Michelin stars.\n\nSql Context: CREATE TABLE Suppliers (id INT, name VARCHAR(50), isNonGMO BOOLEAN);\nCREATE TABLE Restaurants (id INT, name VARCHAR(50), numStars INT);\nCREATE TABLE Ingredients (supplierId INT, restaurantId INT, isNonGMO BOOLEAN);\n\nReasoning: Let's think step by step in order to solve this problem. We need to find the intersection of suppliers who provide non-GMO ingredients and restaurants that have Michelin stars. Then, we"
), 0), (Example({'sql_prompt': 'How many licenses were issued in each state as of 2022-01-01?', 'sql_context': "CREATE TABLE Licenses (id INT, state TEXT, issued_date DATE); INSERT INTO Licenses (id, state, issued_date) VALUES (1, 'California', '2021-01-01'), (2, 'Oregon', '2021-01-01'), (3, 'Washington', '2021-01-01');", 'sql': "SELECT state, COUNT(*) AS num_licenses FROM Licenses WHERE issued_date <= '2022-01-01' GROUP BY state;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql Prompt: To find out how many licenses were issued in each state as of 2022-01-01, we need to filter the Licenses table based on the issued_date being equal to or earlier than '2022-01-01'. However, since there are no records with a later date in the provided context, the query would return an empty result set.",
    sql="SELECT state, COUNT(*) as num_licenses FROM Licenses WHERE issued_date <= '2022-01-01' GROUP BY state;\n\nThis query will not return any results because there are no records in the provided context with an issued_"
), 1), (Example({'sql_prompt': 'What is the number of smart city initiatives implemented in each country?', 'sql_context': "CREATE TABLE smart_city_initiatives (initiative_id INT, country VARCHAR(50), city VARCHAR(100), status VARCHAR(50)); INSERT INTO smart_city_initiatives (initiative_id, country, city, status) VALUES (1, 'France', 'Paris', 'Implemented');", 'sql': "SELECT country, COUNT(*) as implemented_initiatives FROM smart_city_initiatives WHERE status = 'Implemented' GROUP BY country;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql Prompt: To find the number of smart city initiatives implemented in each country, we need to count the unique instances of countries from the `smart_city_initiatives` table. However, since the provided context only contains one row of data, it is not possible to determine the number of smart city initiatives for each country based on this limited information. Here's the SQL query that would be used if there were more data:\n\n```sql\nSELECT country, COUNT(*) as num_initiatives FROM smart_city_initiatives GROUP BY country;\n```\n\nThis query groups the data by country and counts the number of rows (smart city initiatives) for each group.",
    sql="Here is the completed signature:\n\nSql Prompt: What is the number of smart city initiatives implemented in each country?\n\nSql Context: CREATE TABLE smart_city_initiatives (initiative_id INT, country VARCHAR(50), city VARCHAR(100), status VARCHAR(50)); INSERT INTO smart_city_initiatives (initiative_id, country, city, status) VALUES (1, 'France', 'Paris', 'Implemented');\n\nReasoning: Let's think step by step in order to produce the SQL. We need to count the unique instances of countries from the `smart_city_initiatives`"
), 1), (Example({'sql_prompt': "How many tickets were sold for each team's away games in Q2 of 2022?", 'sql_context': "CREATE TABLE teams (id INT, name VARCHAR(255)); INSERT INTO teams (id, name) VALUES (1, 'TeamA'), (2, 'TeamB'), (3, 'TeamC'); CREATE TABLE games (id INT, home_team_id INT, away_team_id INT, home_team_score INT, away_team_score INT, price DECIMAL(5,2), game_date DATE); CREATE VIEW away_games AS SELECT id, away_team_id, price, game_date FROM games;", 'sql': "SELECT t.name, COUNT(*) as tickets_sold FROM away_games h JOIN teams t ON h.away_team_id = t.id WHERE h.game_date BETWEEN '2022-04-01' AND '2022-06-30' GROUP BY t.name;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql Prompt: To find the number of tickets sold for each team's away games in Q2 of 2022, we first need to filter the 'games' table for away games and Q2 of 2022. Then, we join this filtered data with the 'teams' table using the 'away_team_id'. Finally, we group by 'name' (team name) and sum the ticket sales (price). Here is the SQL query:\n\n```sql\nSELECT teams.name AS team_name, SUM(games.price) as total_tickets_sold\nFROM games\nJOIN teams ON games.away_team_id = teams.",
    sql="Here's the completed signature for the given prompt:\n\nSql Prompt: How many tickets were sold for each team's away games in Q2 of 2022?\n\nSql Context:\n```sql\nCREATE TABLE teams (id INT, name VARCHAR(255));\nINSERT INTO teams (id, name) VALUES (1, 'TeamA'), (2, 'TeamB'), (3, 'TeamC');\nCREATE TABLE games (id INT, home_team_id INT, away_team_id INT, home_team_score INT, away_team_score INT, price DECIMAL(5,2), game_date DATE);"
), 1), (Example({'sql_prompt': 'Show the names of companies that produced any Rare Earth elements in both 2015 and 2020.', 'sql_context': 'CREATE TABLE Producers (ProducerID INT PRIMARY KEY, Name TEXT, ProductionYear INT, RareEarth TEXT, Quantity INT);', 'sql': 'SELECT DISTINCT Name FROM Producers p1 JOIN Producers p2 ON p1.Name = p2.Name WHERE p1.ProductionYear = 2015 AND p2.ProductionYear = 2020;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: First, we need to find the producers that produced Rare Earth elements in both 2015 and 2020. To do this, we can use a subquery to find the producers for each year and then join them together using an IN operator.\n\n```sql\nSELECT Name\nFROM Producers\nWHERE ProductionYear IN (2015, 2020)\nAND RareEarth IS NOT NULL\nGROUP BY Name\nHAVING COUNT(DISTINCT ProductionYear) = 2;\n```\n\nThis query will return the names of companies that produced any Rare Earth elements in both 2015 and 20',
    sql="Here is the completed signature:\n\nSql Prompt: Show the names of companies that produced any Rare Earth elements in both 2015 and 2020.\n\nSql Context: CREATE TABLE Producers (ProducerID INT PRIMARY KEY, Name TEXT, ProductionYear INT, RareEarth TEXT, Quantity INT);\n\nReasoning: Let's think step by step in order to produce the SQL. We need to find the producers that produced Rare Earth elements in both 2015 and 2020. To do this, we can use a subquery to find the producers for each year and then join them together using an IN operator."
), 1), (Example({'sql_prompt': 'What is the total CO2 emissions of silk production in China?', 'sql_context': 'CREATE TABLE SilkProduction (id INT, country VARCHAR, co2_emissions INT);', 'sql': "SELECT SUM(co2_emissions) FROM SilkProduction WHERE country = 'China';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To answer this question, we first need to assume that there is a table `SilkProduction` with columns `id`, `country`, and `co2_emissions`. The table contains data about CO2 emissions of silk production in different countries.\n\nIn the given context, there is no such table, but I will create a hypothetical SQL query that would work if the table existed:\n\n```sql\nSELECT SUM(co2_emissions) as total_CO2_emissions FROM SilkProduction WHERE country = 'China';\n```\n\nThis query calculates the sum of CO2 emissions for all silk production in China. If the table `SilkProduction",
    sql="Here is the completed signature:\n\n`Sql Prompt:` What is the total CO2 emissions of silk production in China?\n\n`Sql Context:` CREATE TABLE SilkProduction (id INT, country VARCHAR, co2_emissions INT);\n\nReasoning: Let's think step by step in order to To answer this question, we first need to assume that there is a table `SilkProduction` with columns `id`, `country`, and `co2_emissions`. The table contains data about CO2 emissions of silk production in different countries. In the given context, there is no such table, but I will create a hypothetical SQL query that would work if the table"
), 1), (Example({'sql_prompt': 'What is the total number of AI models developed in North America with an explainability score below 70?', 'sql_context': "CREATE TABLE na_models (model_name TEXT, region TEXT, explainability_score INTEGER); INSERT INTO na_models (model_name, region, explainability_score) VALUES ('Model1', 'North America', 75), ('Model2', 'North America', 65), ('Model3', 'North America', 80);", 'sql': "SELECT SUM(incident_count) FROM na_models WHERE region = 'North America' AND explainability_score < 70;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT COUNT(*) as num_models FROM na_models WHERE region = 'North America' AND explainability_score < 70;\n\nThis SQL query will count the total number of AI models developed in North America with an explainability score below 70. The `COUNT(*)` function is used to count all rows that match the specified conditions, and the `WHERE` clause is used to filter the results based on the region and explainability score.",
    sql="SELECT COUNT(*) as num_models FROM na_models WHERE region = 'North America' AND explainability_score < 70;"
), 0), (Example({'sql_prompt': 'Which mobile and broadband subscribers have not used their services in the last 30 days?', 'sql_context': "CREATE TABLE mobile_usage (customer_id INT, last_usage DATE); CREATE TABLE broadband_usage (customer_id INT, last_usage DATE); INSERT INTO mobile_usage (customer_id, last_usage) VALUES (1, '2022-01-01'), (2, '2022-02-01'); INSERT INTO broadband_usage (customer_id, last_usage) VALUES (1, '2022-01-15'), (3, '2022-02-10');", 'sql': 'SELECT customer_id FROM mobile_usage WHERE last_usage < NOW() - INTERVAL 30 DAY UNION SELECT customer_id FROM broadband_usage WHERE last_usage < NOW() - INTERVAL 30 DAY;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql Prompt: To find the mobile and broadband subscribers who have not used their services in the last 30 days, we can first calculate the current date (assuming it is '2022-03-01') and then compare it with the last usage dates of each customer. Here's the SQL query:\n\n```sql\nSELECT mobile_usage.customer_id AS mobile_customer_id, broadband_usage.customer_id AS broadband_customer_id\nFROM mobile_usage\nFULL OUTER JOIN broadband_usage ON mobile_usage.customer_id = broadband_usage.customer_id\nWHERE (mobile_usage.last_",
    sql="Here is the completed signature:\n\nSql Prompt: Which mobile and broadband subscribers have not used their services in the last 30 days?\n\nSql Context:\n```sql\nCREATE TABLE mobile_usage (customer_id INT, last_usage DATE);\nCREATE TABLE broadband_usage (customer_id INT, last_usage DATE);\nINSERT INTO mobile_usage (customer_id, last_usage) VALUES (1, '2022-01-01'), (2, '2022-02-01');\nINSERT INTO broadband_usage (customer_id, last_usage) VALUES (1, '"
), 1), (Example({'sql_prompt': 'What is the total number of grants given per city?', 'sql_context': 'CREATE TABLE Nonprofits (NonprofitID INT, Name VARCHAR(50), City VARCHAR(50), State VARCHAR(2), Zip VARCHAR(10), MissionStatement TEXT); CREATE TABLE Grants (GrantID INT, DonorID INT, NonprofitID INT, GrantAmount DECIMAL(10,2), Date DATE); CREATE TABLE Donors (DonorID INT, Name VARCHAR(50), City VARCHAR(50), State VARCHAR(2), Zip VARCHAR(10), DonationAmount DECIMAL(10,2));', 'sql': 'SELECT City, COUNT(*) FROM Grants G INNER JOIN Nonprofits N ON G.NonprofitID = N.NonprofitID GROUP BY City;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql Prompt: What is the total number of grants given per city?\n\nSql Context: CREATE TABLE Nonprofits (NonprofitID INT, Name VARCHAR(50), City VARCHAR(50), State VARCHAR(2), Zip VARCHAR(10), MissionStatement TEXT);\nCREATE TABLE Grants (GrantID INT, DonorID INT, NonprofitID INT, GrantAmount DECIMAL(10,2), Date DATE);\nCREATE TABLE Donors (DonorID INT, Name VARCHAR(50), City VARCHAR(50), State VARCHAR(2), Zip VARCHAR(10), DonationAmount DECIMAL(1',
    sql='Here is the completed signature:\n\nSql Prompt: What is the total number of grants given per city?\n\nSql Context:\n```sql\nCREATE TABLE Nonprofits (NonprofitID INT, Name VARCHAR(50), City VARCHAR(50), State VARCHAR(2), Zip VARCHAR(10), MissionStatement TEXT);\nCREATE TABLE Grants (GrantID INT, DonorID INT, NonprofitID INT, GrantAmount DECIMAL(10,2), Date DATE);\nCREATE TABLE Donors (DonorID INT, Name VARCHAR(50), City VARCHAR(50), State VARCHAR(2), Zip VARCHAR(1'
), 1), (Example({'sql_prompt': 'Show the average soil moisture level for each field in the past week', 'sql_context': 'CREATE TABLE field (id INT, name VARCHAR(255), farm_id INT);CREATE TABLE soil_moisture (id INT, field_id INT, measurement DATE, level INT);', 'sql': 'SELECT field_id, AVG(level) FROM soil_moisture WHERE measurement >= DATEADD(day, -7, GETDATE()) GROUP BY field_id;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql Prompt: To find the average soil moisture level for each field in the past week, we first need to filter the data for the past week and then calculate the average. Here is the SQL query:\n\n```sql\nSELECT field.name AS field_name, AVG(soil_moisture.level) AS avg_soil_moisture\nFROM field\nJOIN soil_moisture ON field.id = soil_moisture.field_id\nWHERE soil_moisture.measurement >= DATEADD(day, -7, GETDATE()) -- past week\nGROUP BY field.name;\n```\n\nThis query will join the `field',
    sql="Here is the completed signature:\n\nSql Prompt: Show the average soil moisture level for each field in the past week\n\nSql Context:\nCREATE TABLE field (id INT, name VARCHAR(255), farm_id INT);\nCREATE TABLE soil_moisture (id INT, field_id INT, measurement DATE, level INT);\n\nReasoning: Let's think step by step in order to produce the SQL. We need to filter the data for the past week and then calculate the average. Here is the SQL query:\n\n```sql\nSELECT field.name AS field_name, AVG(soil_moisture.level) AS avg_soil_"
), 0), (Example({'sql_prompt': 'What is the total number of satellites deployed by SpaceComm in the Middle East?', 'sql_context': 'CREATE TABLE SatelliteDeployment (satellite_id INT, company VARCHAR(255), region VARCHAR(255));', 'sql': "SELECT COUNT(*) FROM SatelliteDeployment WHERE company = 'SpaceComm' AND region = 'Middle East';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql Prompt: To find the total number of satellites deployed by SpaceComm in the Middle East, we first need to filter the data for the specific company and region. Then, we count the number of rows (satellites) that match these conditions.',
    sql="SELECT COUNT(*) as num_satellites FROM SatelliteDeployment WHERE company = 'SpaceComm' AND region = 'Middle East';"
), 0), (Example({'sql_prompt': 'What is the total number of tickets sold for performances with a rating of 5?', 'sql_context': "CREATE TABLE performance (id INT PRIMARY KEY, name VARCHAR(255), date DATE, artist_id INT, rating INT); INSERT INTO performance (id, name, date, artist_id, rating) VALUES (1, 'Dance Recital', '2022-03-01', 1, 5);", 'sql': 'SELECT SUM(t.quantity) as total_tickets_sold FROM performance p INNER JOIN ticket t ON p.id = t.performance_id WHERE p.rating = 5;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql Prompt: To find the total number of tickets sold for performances with a rating of 5, we first need to join the performance table with a ticket sales table (assuming there is one) using the performance id. Then, we filter for performances with a rating of 5 and count the distinct ticket ids to get the total number of tickets sold.',
    sql='```sql\nSELECT COUNT(DISTINCT ticket_sales.ticket_id) as total_tickets\nFROM performance\nJOIN ticket_sales ON performance.id = ticket_sales.performance_id\nWHERE performance.rating = 5;\n```'
), 0), (Example({'sql_prompt': 'What is the average emergency response time by region for fire incidents?', 'sql_context': 'CREATE TABLE Regions (RegionID INT, RegionName VARCHAR(255)); CREATE TABLE Incidents (IncidentID INT, IncidentType VARCHAR(255), RegionID INT, ResponseTime INT);', 'sql': "SELECT AVG(ResponseTime) as AvgResponseTime, RegionName FROM Incidents i JOIN Regions r ON i.RegionID = r.RegionID WHERE IncidentType = 'Fire' GROUP BY RegionName;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql Prompt: To find the average emergency response time by region for fire incidents, we first need to join the `Regions` and `Incidents` tables on the `RegionID`. Then, we filter the incidents to only include those of type 'fire'. After that, we group the results by region and calculate the average response time. Here's the SQL query:\n\n```sql\nSELECT Regions.RegionName, AVG(Incidents.ResponseTime) as avg_response_time\nFROM Regions\nJOIN Incidents ON Regions.RegionID = Incidents.RegionID\nWHERE Incidents.IncidentType = 'fire'\nGROUP BY Regions.Region",
    sql="Here is the completed signature:\n\nSql Prompt: What is the average emergency response time by region for fire incidents?\n\nSql Context:\n```sql\nCREATE TABLE Regions (RegionID INT, RegionName VARCHAR(255));\nCREATE TABLE Incidents (IncidentID INT, IncidentType VARCHAR(255), RegionID INT, ResponseTime INT);\n```\n\nReasoning: Let's think step by step in order to produce the SQL. We need to join the `Regions` and `Incidents` tables on the `RegionID`. Then, we filter the incidents to only include those of type 'fire'. After that, we group the results by"
), 1), (Example({'sql_prompt': "What is the average revenue of virtual tours in 'Spain'?", 'sql_context': "CREATE TABLE virtual_tours (id INT, name TEXT, country TEXT, revenue FLOAT); INSERT INTO virtual_tours (id, name, country, revenue) VALUES (1, 'Virtual Barcelona Tour', 'Spain', 2000);", 'sql': "SELECT AVG(revenue) FROM virtual_tours WHERE country = 'Spain';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql Prompt: To find the average revenue of virtual tours in 'Spain', we first need to query the `virtual_tours` table and filter for rows where the country is 'Spain'. Then, we calculate the average revenue using the AVG function.",
    sql="SELECT AVG(revenue) as avg_revenue FROM virtual_tours WHERE country = 'Spain';"
), 0), (Example({'sql_prompt': 'What is the total number of students and staff with accommodations in the "disability_services" schema, excluding the "accessibility_parking" type?', 'sql_context': 'CREATE SCHEMA disability_services; CREATE TABLE staff (id INT, name VARCHAR(50), accommodation VARCHAR(50)); CREATE TABLE students (id INT, name VARCHAR(50), accommodation VARCHAR(50));', 'sql': "SELECT COUNT(*) FROM disability_services.staff WHERE accommodation != 'accessibility_parking' UNION SELECT COUNT(*) FROM disability_services.students WHERE accommodation != 'accessibility_parking';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT COUNT(students.id) + COUNT(staff.id) as total_count FROM disability_services.students JOIN disability_services.staff ON TRUE WHERE students.accommodation != \'accessibility_parking\' AND staff.accommodation != \'accessibility_parking\';\n\nThis SQL query will count the total number of students and staff with accommodations in the "disability_services" schema, excluding the "accessibility_parking" type. It does this by joining both tables (students and staff) on any condition (ON TRUE), then filtering out rows where the accommodation is not \'accessibility_parking\'. Finally, it sum',
    sql="SELECT SUM(quantity) as TotalRiceProduction FROM production WHERE crop = 'rice';\n\nThis SQL query will return the total production of rice in the 'agriculture' database. It does this by filtering the production table for rows where the crop is 'rice', then summing up the quantity column to get the total production.\n\nFor the second question, here's the SQL:\n\nSql: SELECT COUNT(students.id) + COUNT(staff.id) as total_count FROM disability_services.students JOIN disability_services.staff ON TRUE WHERE students.accommodation != 'accessibility_parking' AND staff.accommod"
), 0), (Example({'sql_prompt': 'What is the number of electric trams in service in Istanbul in 2021?', 'sql_context': "CREATE TABLE electric_trams (tram_id INT, service_date DATE, in_service INT); INSERT INTO electric_trams (tram_id, service_date, in_service) VALUES (1, '2021-01-01', 1), (2, '2021-01-02', 1), (3, '2021-01-03', 0);", 'sql': "SELECT COUNT(*) FROM electric_trams WHERE in_service = 1 AND service_date BETWEEN '2021-01-01' AND '2021-12-31';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql Prompt: To find the number of electric trams in service in Istanbul in 2021, we need to filter the data based on the service date and the city. Here is the SQL query:\n\n```sql\nSELECT COUNT(*) as num_trams\nFROM electric_trams\nWHERE service_date IN (YEAR('2021') || '-' || MONTH('2021') || '-01', YEAR('2021') || '-' || MONTH('2021') || '-02', YEAR('2021') || '-' || MONTH('2021') || '-03",
    sql="Here is the completed signature:\n\nSql Prompt: What is the number of electric trams in service in Istanbul in 2021?\n\nSql Context: CREATE TABLE electric_trams (tram_id INT, service_date DATE, in_service INT);\nINSERT INTO electric_trams (tram_id, service_date, in_service) VALUES (1, '2021-01-01', 1), (2, '2021-01-02', 1), (3, '2021-01-03', 0);\n\nReasoning: Let's"
), 1), (Example({'sql_prompt': "What is the total number of trips taken on accessible vehicles in the 'East' region for the current year?", 'sql_context': "CREATE TABLE Vehicles (VehicleID int, VehicleType varchar(255), Region varchar(255)); INSERT INTO Vehicles (VehicleID, VehicleType, Region) VALUES (1, 'Bus', 'East'), (2, 'Tram', 'West'), (3, 'Wheelchair Bus', 'South'), (4, 'Accessible Tram', 'East'); CREATE TABLE Trips (TripID int, VehicleID int, TripDateTime datetime);", 'sql': "SELECT COUNT(*) FROM Vehicles JOIN Trips ON Vehicles.VehicleID = Trips.VehicleID WHERE Vehicles.Region = 'East' AND Vehicles.VehicleType IN ('Wheelchair Bus', 'Accessible Tram') AND YEAR(Trips.TripDateTime) = YEAR(GETDATE());"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql Prompt: To find the total number of trips taken on accessible vehicles in the 'East' region for the current year, we first need to filter out the accessible vehicles and then count the trips for those vehicles within the 'East' region and the current year.",
    sql="SELECT COUNT(*) as trip_count FROM Trips JOIN Vehicles ON Trips.VehicleID = Vehicles.VehicleID WHERE Vehicles.Region = 'East' AND Vehicles.VehicleType IN ('Wheelchair Bus', 'Accessible Tram') AND YEAR(Trips.TripDateTime) = YEAR(CURRENT_DATE()) AND MONTH(Trips"
), 0), (Example({'sql_prompt': 'Identify the suppliers with the highest and lowest sustainability ratings in the supplier_ratings table.', 'sql_context': 'CREATE TABLE supplier_ratings (supplier_id INT, sustainability_rating INT); INSERT INTO supplier_ratings (supplier_id, sustainability_rating) VALUES (100, 95), (101, 60), (102, 90);', 'sql': 'SELECT supplier_id, sustainability_rating FROM (SELECT supplier_id, sustainability_rating, RANK() OVER (ORDER BY sustainability_rating DESC) AS rank, RANK() OVER (ORDER BY sustainability_rating ASC) AS reverse_rank FROM supplier_ratings) WHERE rank = 1 OR reverse_rank = 1;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql Prompt: Identify the suppliers with the highest and lowest sustainability ratings in the supplier_ratings table.\nSql Context: CREATE TABLE supplier_ratings (supplier_id INT, sustainability_rating INT); INSERT INTO supplier_ratings (supplier_id, sustainability_rating) VALUES (100, 95), (101, 60), (102, 90);\n\nTo find the supplier with the highest sustainability rating, we can use the following SQL query:\n\n```sql\nSELECT supplier_id AS 'Supplier ID', MAX(sustainability_rating) AS 'Highest Rating'",
    sql="FROM supplier_ratings\nGROUP BY supplier_id\nORDER BY sustainability_rating DESC\nLIMIT 1;\n\nTo find the supplier with the lowest sustainability rating, we can use a similar query but with an ORDER BY clause in ascending order:\n\n```sql\nSELECT supplier_id AS 'Supplier ID', MIN(sustainability_rating) AS 'Lowest Rating'\nFROM supplier_ratings\nGROUP BY supplier_id\nORDER BY sustainability_rating ASC\nLIMIT 1;\n```"
), 0), (Example({'sql_prompt': 'What is the total amount of socially responsible loans issued to women in 2021?', 'sql_context': 'CREATE TABLE socially_responsible_lending (id INT PRIMARY KEY, loan_amount DECIMAL(10, 2), borrower_gender TEXT, lending_date DATE);', 'sql': "SELECT SUM(loan_amount) FROM socially_responsible_lending WHERE borrower_gender = 'Female' AND lending_date BETWEEN '2021-01-01' AND '2021-12-31';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT SUM(loan_amount) as total_loans FROM socially_responsible_lending WHERE borrower_gender = 'women' AND lending_date = '2021-01-01';\n\nThis SQL query will sum up the loan amounts for all loans issued to women in 2021. The `WHERE` clause filters the data based on the specified conditions, and the `SUM()` function calculates the total amount of those loans.",
    sql="SELECT SUM(loan_amount) as total_loans FROM socially_responsible_lending WHERE borrower_gender = 'women' AND YEAR(lending_date) = 2021;\n\nThis SQL query will sum up the loan amounts for all loans issued to women in the year 2021. The `WHERE` clause filters the data based on the specified conditions, and the `SUM()` function calculates the total amount of those loans. However, since the lending_date is a date type, we need to use YEAR() function to filter by the year only."
), 0), (Example({'sql_prompt': 'What is the maximum energy efficiency rating of hydroelectric dams in Canada?', 'sql_context': "CREATE TABLE hydro_dams (id INT, name TEXT, country TEXT, energy_efficiency_rating FLOAT); INSERT INTO hydro_dams (id, name, country, energy_efficiency_rating) VALUES (1, 'Robert-Bourassa', 'Canada', 0.94), (2, 'Churchill Falls', 'Canada', 0.92);", 'sql': "SELECT MAX(energy_efficiency_rating) FROM hydro_dams WHERE country = 'Canada';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql Prompt: To find the maximum energy efficiency rating of hydroelectric dams in Canada, we can use the following SQL query:\n\n```sql\nSELECT MAX(energy_efficiency_rating) as max_rating FROM hydro_dams WHERE country = 'Canada';\n```\n\nThis query selects the maximum value from the `energy_efficiency_rating` column for rows where the `country` is 'Canada'. The result will be a single row with the maximum energy efficiency rating.",
    sql="SELECT MAX(energy_efficiency_rating) as max_rating FROM hydro_dams WHERE country = 'Canada';"
), 0), (Example({'sql_prompt': 'How many streams did each song by an artist get in a given month?', 'sql_context': "CREATE TABLE Songs (id INT, artist_id INT, title VARCHAR(50)); CREATE TABLE Streams (id INT, song_id INT, date DATE, streams INT); INSERT INTO Songs (id, artist_id, title) VALUES (1, 1, 'Shake it Off'), (2, 1, 'Blank Space'), (3, 2, 'Humble'), (4, 2, 'DNA'); INSERT INTO Streams (id, song_id, date, streams) VALUES (1, 1, '2022-01-01', 1000), (2, 1, '2022-01-02', 1500), (3, 2, '2022-01-01', 2000), (4, 2, '2022-01-02', 2500), (5, 3, '2022-01-01', 3000), (6, 3, '2022-01-02', 3500), (7, 4, '2022-01-01', 4000), (8, 4, '2022-01-02', 4500);", 'sql': "SELECT s.title, SUM(s.streams) as total_streams FROM Songs s JOIN Streams st ON s.id = st.song_id WHERE st.date BETWEEN '2022-01-01' AND '2022-01-31' GROUP BY s.title;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="find the number of streams each song by an artist got in a given month. First, we need to join the Songs and Streams tables on the song_id column. Then, group the results by artist_id and title, and finally, count the number of streams for each group (i.e., each song) within a specific date range (e.g., January 2022).\n\nHere's the SQL query:\n\n```sql\nSELECT artist_id, title, COUNT(*) as total_streams\nFROM Songs\nJOIN Streams ON Songs.id = Streams.song_id\nWHERE date BETWEEN '2022-01",
    sql="To find the number of streams each song by an artist got in a given month (January 2022), we can use the following SQL query:\n\n```sql\nSELECT artist_id, title, COUNT(*) as total_streams\nFROM Songs\nJOIN Streams ON Songs.id = Streams.song_id\nWHERE date BETWEEN '2022-01-01' AND '2022-01-31'\nGROUP BY artist_id, title;\n```\n\nThis query will join the Songs and Streams tables on the song_id column, filter the results for streams that occurred in January 2"
), 0), (Example({'sql_prompt': 'What is the total number of security incidents for each department in the organization?', 'sql_context': 'CREATE TABLE incident (incident_id INT, incident_date DATE, incident_description TEXT, department_id INT);CREATE TABLE department (department_id INT, department_name VARCHAR(255));', 'sql': 'SELECT d.department_name, COUNT(i.incident_id) AS incident_count FROM incident i JOIN department d ON i.department_id = d.department_id GROUP BY d.department_name;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql Prompt: To find the total number of security incidents for each department in the organization, we first need to join the `incident` and `department` tables on the `department_id`. Then, we group the results by `department_name` and count the number of incidents for each department. Here's the SQL query:\n\n```sql\nSELECT department_name, COUNT(*) as total_incidents\nFROM incident JOIN department ON incident.department_id = department.department_id\nGROUP BY department_name;\n```\n\nThis query will return a list of departments along with the total number of security incidents for each one.",
    sql='Here is the completed signature:\n\n`Sql Prompt:` What is the total number of security incidents for each department in the organization?\n\n`Sql Context:`\n```sql\nCREATE TABLE incident (incident_id INT, incident_date DATE, incident_description TEXT, department_id INT);\nCREATE TABLE department (department_id INT, department_name VARCHAR(255));\n```\n\n`Reasoning:` To find the total number of security incidents for each department in the organization, we first need to join the `incident` and `department` tables on the `department_id`. Then, we group the results by `department_name'
), 1), (Example({'sql_prompt': 'What is the market spend on sustainable tourism initiatives in Japan between 2017 and 2019?', 'sql_context': "CREATE TABLE sustainable_tourism_initiatives(initiative_id INT, name TEXT, country TEXT, start_year INT, end_year INT, market_spend INT);INSERT INTO sustainable_tourism_initiatives (initiative_id, name, country, start_year, end_year, market_spend) VALUES (1, 'Eco-friendly hotels in Tokyo', 'Japan', 2017, 2019, 5000000), (2, 'Sustainable transport in Kyoto', 'Japan', 2018, 2019, 7000000), (3, 'Carbon offsetting in Osaka', 'Japan', 2017, 2018, 3000000);", 'sql': "SELECT SUM(market_spend) FROM sustainable_tourism_initiatives WHERE country = 'Japan' AND start_year BETWEEN 2017 AND 2019;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT country, SUM(market_spend) as total_spend FROM sustainable_tourism_initiatives WHERE start_year <= 2019 AND end_year >= 2017 AND country = 'Japan' GROUP BY country;\n\nThis SQL query will return the total market spend on sustainable tourism initiatives in Japan between 2017 and 2019. The WHERE clause filters the data based on the specified date range and country, while the GROUP BY clause groups the results by country. Finally, the SUM function calculates the total spend for each group.",
    sql="SELECT country, SUM(market_spend) as total_spend\nFROM sustainable_tourism_initiatives\nWHERE start_year <= 2019 AND end_year >= 2017 AND country = 'Japan'\nGROUP BY country;\n\nThis SQL query will return the total market spend on sustainable tourism initiatives in Japan between 2017 and 2019. The WHERE clause filters the data based on the specified date range and country, while the GROUP BY clause groups the results by country. Finally, the SUM function calculates the total spend for each group."
), 0), (Example({'sql_prompt': 'What is the percentage of hotels in Europe that offer virtual tours?', 'sql_context': "CREATE TABLE hotel_features (hotel_id INT, hotel_name TEXT, virtual_tour INT, country TEXT); INSERT INTO hotel_features (hotel_id, hotel_name, virtual_tour, country) VALUES (1, 'Hotel A', 1, 'France'), (2, 'Hotel B', 0, 'Germany'), (3, 'Hotel C', 1, 'Italy'), (4, 'Hotel D', 0, 'France'), (5, 'Hotel E', 1, 'Spain');", 'sql': "SELECT (COUNT(*) FILTER (WHERE virtual_tour = 1) * 100.0 / COUNT(*)) AS percentage FROM hotel_features WHERE country = 'Europe';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql Prompt: To find the percentage of hotels in Europe that offer virtual tours, we first need to identify the number of hotels in Europe with virtual tours and the total number of hotels in Europe. Here is the SQL query:\n\n```sql\nSELECT COUNT(*) as num_hotels_with_virtual_tours, COUNT(DISTINCT country) as total_hotels_in_Europe\nFROM hotel_features\nWHERE virtual_tour = 1 AND country IN ('France', 'Germany', 'Italy', 'Spain');\n```\n\nAfter executing this query, we can calculate the percentage by dividing the number of hotels with virtual tours (",
    sql="Here is the completed signature:\n\nSql Prompt: What is the percentage of hotels in Europe that offer virtual tours?\n\nSql Context: CREATE TABLE hotel_features (hotel_id INT, hotel_name TEXT, virtual_tour INT, country TEXT);\nINSERT INTO hotel_features (hotel_id, hotel_name, virtual_tour, country) VALUES (1, 'Hotel A', 1, 'France'), (2, 'Hotel B', 0, 'Germany'), (3, 'Hotel C', 1, 'Italy'), (4, 'Hotel D', 0, 'France'), (5, 'Hot"
), 1), (Example({'sql_prompt': 'What are the ethical AI principles for the technology projects in India?', 'sql_context': "CREATE TABLE EthicalAI (principle_id INT, principle_name VARCHAR(50), project_location VARCHAR(20)); INSERT INTO EthicalAI (principle_id, principle_name, project_location) VALUES (1, 'Fairness', 'India'), (2, 'Accountability', 'India'), (3, 'Transparency', 'India'), (4, 'Data Minimization', 'India'), (5, 'Explainability', 'India'), (6, 'Human Oversight', 'India');", 'sql': "SELECT principle_name FROM EthicalAI WHERE project_location = 'India';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql Prompt: To find the ethical AI principles for the technology projects in India, we can use a SQL query to select the principle_name from the EthicalAI table where project_location is equal to 'India'. Here's the SQL query:\n\n```sql\nSELECT principle_name FROM EthicalAI WHERE project_location = 'India';\n```\n\nThis query will return a list of ethical AI principles for technology projects in India.",
    sql="SELECT principle_name FROM EthicalAI WHERE project_location = 'India';"
), 1), (Example({'sql_prompt': 'What is the total mass of all spacecraft manufactured by SpaceX?', 'sql_context': "CREATE TABLE Spacecraft (SpacecraftID INT, SpacecraftName VARCHAR(50), Manufacturer VARCHAR(50), Mass FLOAT); INSERT INTO Spacecraft (SpacecraftID, SpacecraftName, Manufacturer, Mass) VALUES (1, 'SpaceX Dragon', 'SpaceX', 10000), (2, 'Orion', 'Lockheed Martin', 20000), (3, 'Starliner', 'Boeing', 15000);", 'sql': "SELECT SUM(Mass) FROM Spacecraft WHERE Manufacturer = 'SpaceX';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql Prompt: To find the total mass of all spacecraft manufactured by SpaceX, we need to filter the data for only those spacecraft that were manufactured by SpaceX. Then, we can sum up their masses. Here is the SQL query:\n\n```sql\nSELECT SUM(Mass) as Total_Mass FROM Spacecraft WHERE Manufacturer = 'SpaceX';\n```\n\nThis query will return the total mass of all spacecraft manufactured by SpaceX.",
    sql="Here's the completed signature for the second question:\n\nSql Prompt: What is the total mass of all spacecraft manufactured by SpaceX?\n\nSql Context: CREATE TABLE Spacecraft (SpacecraftID INT, SpacecraftName VARCHAR(50), Manufacturer VARCHAR(50), Mass FLOAT);\nINSERT INTO Spacecraft (SpacecraftID, SpacecraftName, Manufacturer, Mass) VALUES (1, 'SpaceX Dragon', 'SpaceX', 10000), (2, 'Orion', 'Lockheed Martin', 20000), (3, 'Starliner', 'Boeing', 15000"
), 1), (Example({'sql_prompt': "What is the total age of 'stone' artifacts in 'american_archaeology'?", 'sql_context': 'CREATE TABLE american_archaeology (id INT, site_name VARCHAR(50), artifact_name VARCHAR(50), age INT, material VARCHAR(20));', 'sql': "SELECT SUM(age) FROM american_archaeology WHERE material = 'stone';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT SUM(age) as total_age FROM american_archaeology WHERE artifact_name = 'stone';\n\nThis SQL query will sum up the ages of all 'stone' artifacts in the 'american_archaeology' table.",
    sql="Here is the completed signature:\n\n`Sql Prompt:` What is the total age of 'stone' artifacts in 'american_archaeology'?\n\n`Sql Context:` CREATE TABLE american_archaeology (id INT, site_name VARCHAR(50), artifact_name VARCHAR(50), age INT, material VARCHAR(20));\n\nReasoning: Let's think step by step in order to produce the SQL. We need to filter the `american_archaeology` table for rows where `artifact_name = 'stone'`, and then sum up the ages of these artifacts. The SQL query will look like this:\n\n`Sql:`"
), 1), (Example({'sql_prompt': 'What is the average hotel price for beachfront hotels in Mexico?', 'sql_context': "CREATE TABLE hotels (hotel_id INT, name TEXT, country TEXT, has_beachfront BOOLEAN, price INT); INSERT INTO hotels (hotel_id, name, country, has_beachfront, price) VALUES (1, 'Beach Palace', 'Mexico', true, 200), (2, 'Green Valley', 'USA', false, 150);", 'sql': "SELECT AVG(price) FROM hotels WHERE has_beachfront = true AND country = 'Mexico';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql Prompt: To find the average hotel price for beachfront hotels in Mexico, we first need to filter out only the beachfront hotels located in Mexico. Then, we calculate the average price of these filtered hotels. Here is the SQL query:\n\n```sql\nSELECT AVG(price) as avg_hotel_price FROM hotels WHERE has_beachfront = TRUE AND country = 'Mexico';\n```\n\nThis query will return the average hotel price for beachfront hotels in Mexico.",
    sql="Here's the completed signature:\n\n`Sql Prompt:` What is the average hotel price for beachfront hotels in Mexico?\n\n`Sql Context:` CREATE TABLE hotels (hotel_id INT, name TEXT, country TEXT, has_beachfront BOOLEAN, price INT);\nINSERT INTO hotels (hotel_id, name, country, has_beachfront, price) VALUES (1, 'Beach Palace', 'Mexico', true, 200), (2, 'Green Valley', 'USA', false, 150);\n\n`Reasoning:` Let's think step by step in order to produce the SQL. We need to filter the"
), 1), (Example({'sql_prompt': 'List all instructors and number of students they support with accommodations.', 'sql_context': 'CREATE TABLE Instructors (id INT, name VARCHAR(50), title VARCHAR(50));', 'sql': 'SELECT i.name, COUNT(a.student_id) as supported_students FROM Instructors i JOIN Accommodations a ON i.id = a.instructor_id GROUP BY i.name;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql Prompt: To list all instructors and the number of students they support with accommodations, we first need to join the `Instructors` table with a table that contains information about the students and their accommodations. However, it seems like such a table is not provided in the context you've given.\n\nAssuming there exists a table named `Students` with columns `id`, `instructor_id`, and `accommodation_status`, we can write the following SQL query:\n\n```sql\nSELECT Instructors.name, COUNT(*) as num_students_with_accommodations\nFROM Instructors\nJOIN Students ON Instructors.id",
    sql="Here is the completed signature:\n\nSql Prompt: List all instructors and number of students they support with accommodations.\n\nSql Context: CREATE TABLE Instructors (id INT, name VARCHAR(50), title VARCHAR(50));\n\nReasoning: Let's think step by step in order to produce the SQL. We need to join the `Instructors` table with a table that contains information about the students and their accommodations. Assuming there exists a table named `Students` with columns `id`, `instructor_id`, and `accommodation_status`, we can write the following SQL query:\n\n```sql\nSELECT Instructors."
), 0), (Example({'sql_prompt': "What is the total fare collected from bus routes that start with the letter 'B'?", 'sql_context': "CREATE TABLE bus_trips (trip_id INT, route_id INT, fare FLOAT); INSERT INTO bus_trips (trip_id, route_id, fare) VALUES (1, 101, 2.5), (2, 202, 3.0), (3, 303, 1.5), (4, 404, 2.0), (5, 505, 2.5), (6, 106, 3.0); CREATE TABLE bus_routes (route_id INT, route_name TEXT, starting_letter TEXT); INSERT INTO bus_routes (route_id, route_name, starting_letter) VALUES (101, 'Broadway', 'B'), (202, 'Park Ave', 'P'), (303, 'Lakeshore', 'L'), (404, 'Sunset Blvd', 'S'), (505, 'Beverly Hills', 'B');", 'sql': "SELECT SUM(bt.fare) FROM bus_trips bt JOIN bus_routes br ON bt.route_id = br.route_id WHERE br.starting_letter = 'B';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="find the total fare collected from bus routes that start with the letter 'B'. First, we need to join the `bus_trips` and `bus_routes` tables based on the `route_id`. Then, we filter the results to only include routes that start with the letter 'B' (i.e., those with a starting_letter of 'B'). Finally, we use the SUM function to calculate the total fare for these bus routes.\n\nHere is the SQL query:\n\n```sql\nSELECT SUM(fare) AS TotalFare\nFROM bus_trips\nJOIN bus_routes ON bus_trips.route_id = bus_routes.route_id\nW",
    sql="SELECT SUM(fare) AS TotalFare\nFROM bus_trips\nJOIN bus_routes ON bus_trips.route_id = bus_routes.route_id\nWHERE bus_routes.starting_letter = 'B';\n\nThis query will return the total fare for all trips on bus routes that start with the letter 'B'."
), 1), (Example({'sql_prompt': 'What is the percentage of total revenue from streaming and concert ticket sales for Pop music in 2018?', 'sql_context': 'CREATE TABLE StreamingRevenue (id INT, year INT, genre VARCHAR(50), revenue FLOAT); CREATE TABLE ConcertTicketSales (id INT, year INT, genre VARCHAR(50), revenue FLOAT);', 'sql': "SELECT (SUM(sr.revenue) + SUM(cts.revenue)) / (SELECT SUM(revenue) FROM (SELECT revenue FROM StreamingRevenue WHERE year = 2018 UNION ALL SELECT revenue FROM ConcertTicketSales WHERE year = 2018) t) FROM StreamingRevenue sr JOIN ConcertTicketSales cts ON sr.genre = cts.genre WHERE sr.year = 2018 AND sr.genre = 'Pop';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='First, we need to find the total revenue from both streaming and concert ticket sales for Pop music in 2018. To do this, we will join the two tables on the year and genre columns, and then sum the revenues.\n\n```sql\nSELECT SUM(StreamingRevenue.revenue + ConcertTicketSales.revenue) as total_revenue\nFROM StreamingRevenue\nJOIN ConcertTicketSales ON StreamingRevenue.year = ConcertTicketSales.year AND StreamingRevenue.genre = ConcertTicketSales.genre\nWHERE StreamingRevenue.year = 20',
    sql="Here is the completed signature:\n\nSql Prompt: What is the percentage of total revenue from streaming and concert ticket sales for Pop music in 2018?\n\nSql Context: CREATE TABLE StreamingRevenue (id INT, year INT, genre VARCHAR(50), revenue FLOAT);\nCREATE TABLE ConcertTicketSales (id INT, year INT, genre VARCHAR(50), revenue FLOAT);\n\nReasoning: Let's think step by step in order to First, we need to find the total revenue from both streaming and concert ticket sales for Pop music in 2018. To do this, we will join the two tables on the year"
), 1), (Example({'sql_prompt': 'What is the total defense spending by countries in Oceania in 2018?', 'sql_context': "CREATE TABLE defense_spending (country VARCHAR(50), continent VARCHAR(50), year INT, amount FLOAT); INSERT INTO defense_spending (country, continent, year, amount) VALUES ('Australia', 'Oceania', 2018, 750.3), ('New Zealand', 'Oceania', 2018, 23.4), ('Papua New Guinea', 'Oceania', 2018, 6.7);", 'sql': "SELECT SUM(amount) FROM defense_spending WHERE continent = 'Oceania' AND year = 2018;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql Prompt: To find the total defense spending by countries in Oceania in 2018, we need to sum up the amount column for all rows where continent is 'Oceania' and year is 2018.",
    sql="SELECT SUM(amount) as total_spending FROM defense_spending WHERE continent = 'Oceania' AND year = 2018;"
), 0), (Example({'sql_prompt': 'What is the total number of refugee families supported by each NGO in the last 6 months?', 'sql_context': "CREATE TABLE NGOs (NGOID int, NGOName varchar(50)); INSERT INTO NGOs (NGOID, NGOName) VALUES (1, 'International Rescue Committee'), (2, 'Save the Children'); CREATE TABLE RefugeeSupport (SupportID int, NGOID int, FamilyID int, SupportDate date); INSERT INTO RefugeeSupport (SupportID, NGOID, FamilyID, SupportDate) VALUES (1, 1, 1, '2022-01-01'), (2, 1, 2, '2022-02-01'), (3, 2, 1, '2022-03-01');", 'sql': 'SELECT NGOName, COUNT(DISTINCT FamilyID) as SupportedFamilies FROM NGOs INNER JOIN RefugeeSupport ON NGOs.NGOID = RefugeeSupport.NGOID WHERE SupportDate >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY NGOName;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql Prompt: To find the total number of refugee families supported by each NGO in the last 6 months, we first need to filter the data for the last 6 months. Then, we group the data by NGO and count the number of unique family IDs within each group.',
    sql='```sql\nSELECT NGOName, COUNT(DISTINCT FamilyID) as total_families\nFROM RefugeeSupport\nWHERE SupportDate >= DATEADD(month, -6, GETDATE())\nGROUP BY NGOName;\n```\n\nThis SQL query will return a table with two columns: `NGOName` and `total_f'
), 0), (Example({'sql_prompt': "Which regulatory frameworks have been implemented in 'Country1'?", 'sql_context': "CREATE TABLE countries (id INT, name VARCHAR(255)); INSERT INTO countries (id, name) VALUES (1, 'Country1'); CREATE TABLE regulatory_frameworks (id INT, country_id INT, name VARCHAR(255)); INSERT INTO regulatory_frameworks (id, country_id, name) VALUES (1, 1, 'Framework1'); INSERT INTO regulatory_frameworks (id, country_id, name) VALUES (2, 1, 'Framework2'); INSERT INTO regulatory_frameworks (id, country_id, name) VALUES (3, 1, 'Framework3');", 'sql': "SELECT name FROM regulatory_frameworks WHERE country_id = (SELECT id FROM countries WHERE name = 'Country1');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql Prompt: Which regulatory frameworks have been implemented in 'Country1'?\nSql Context: Given context provides a table named `countries` and another table named `regulatory_frameworks`. The `countries` table contains information about countries, while the `regulatory_frameworks` table contains information about regulatory frameworks along with their respective country of implementation. To find out which regulatory frameworks have been implemented in 'Country1', we need to join these two tables based on the `country_id`.",
    sql="SELECT name FROM regulatory_frameworks WHERE country_id = (SELECT id FROM countries WHERE name = 'Country1');\n\nThis SQL query will first find the `id`"
), 1), (Example({'sql_prompt': 'What is the percentage of factories in each country that have implemented circular economy practices?', 'sql_context': "CREATE TABLE factory_circle (factory VARCHAR(255), country VARCHAR(255), practice VARCHAR(255)); INSERT INTO factory_circle (factory, country, practice) VALUES ('Factory1', 'Bangladesh', 'yes'), ('Factory2', 'Bangladesh', 'no'), ('Factory3', 'Bangladesh', 'yes'), ('Factory4', 'China', 'yes'), ('Factory5', 'China', 'no'), ('Factory6', 'India', 'no'), ('Factory7', 'India', 'yes'), ('Factory8', 'India', 'yes');", 'sql': "SELECT country, 100.0 * COUNT(*) FILTER (WHERE practice = 'yes') / COUNT(*) AS percentage FROM factory_circle GROUP BY country;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql Prompt: To find the percentage of factories in each country that have implemented circular economy practices, we first need to count the number of factories with "yes" for practice and then divide it by the total number of factories in each country. Here is the SQL query:\n\n```sql\nSELECT country, COUNT(CASE WHEN practice = \'yes\' THEN factory END) as num_factories_with_practice,\n       COUNT(factory) as total_factories\nFROM factory_circle\nGROUP BY country;\n\n-- To calculate the percentage for each country:\nWITH percentages AS (\n    SELECT country, COUNT(CASE WHEN practice = \'yes',
    sql="Here is the completed signature:\n\nSql Prompt: What is the percentage of factories in each country that have implemented circular economy practices?\n\nSql Context: CREATE TABLE factory_circle (factory VARCHAR(255), country VARCHAR(255), practice VARCHAR(255));\nINSERT INTO factory_circle (factory, country, practice) VALUES ('Factory1', 'Bangladesh', 'yes'), ('Factory2', 'Bangladesh', 'no'), ('Factory3', 'Bangladesh', 'yes'), ('Factory4', 'China', 'yes'), ('Factory5', 'China', 'no'), ('Factory6', 'India"
), 1)]