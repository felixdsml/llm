[(Example({'sql_prompt': "What are the top 3 autonomous vehicles with the highest safety ratings in the 'auto_show' table?", 'sql_context': 'CREATE TABLE auto_show (id INT, vehicle_name VARCHAR(50), safety_rating INT);', 'sql': "SELECT vehicle_name, safety_rating FROM (SELECT vehicle_name, safety_rating, ROW_NUMBER() OVER (ORDER BY safety_rating DESC) as safety_rank FROM auto_show WHERE vehicle_name LIKE '%Autonomous%') AS auton_ranks WHERE safety_rank <= 3;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the top 3 autonomous vehicles with the highest safety ratings from the 'auto_show' table, we need to sort the entries based on their safety rating in descending order and limit the result set to only include the top 3.\n\nHere is the SQL query that accomplishes this:\n\n```sql\nSELECT vehicle_name, safety_rating\nFROM auto_show\nORDER BY safety_rating DESC\nLIMIT 3;\n```",
    sql="Sql Prompt: What are the top 3 autonomous vehicles with the highest safety ratings in the 'auto_show' table?\n\nSql Context: CREATE TABLE auto_show (id INT, vehicle_name VARCHAR(50), safety_rating INT);\n\nReasoning: Let's think step by step in order to find the top 3 autonomous vehicles with the highest safety ratings from the 'auto_show' table. We need to sort all entries based on their safety rating in descending order, ensuring that we get the vehicles with the highest ratings at the top of our list. Then, we limit our results to only include the first three entries, which will be those with the highest safety ratings."
), 1), (Example({'sql_prompt': 'Delete a record from the broadband_usage table', 'sql_context': 'CREATE TABLE broadband_usage (usage_id INT, subscriber_id INT, usage_start_time TIMESTAMP, usage_end_time TIMESTAMP, data_used DECIMAL(10,2));', 'sql': 'DELETE FROM broadband_usage WHERE usage_id = 11111;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To delete a record from the `broadband_usage` table, you need to specify which particular record or records you want to remove. This can be done based on certain criteria such as a specific usage ID, subscriber ID, or any other condition that uniquely identifies the record(s) you wish to delete.\n\nHere\'s an example SQL statement to delete a record with a specific `usage_id`:\n\n```sql\nDELETE FROM broadband_usage WHERE usage_id = 123;\n```\n\nIn this case, we are deleting the record where the `usage_id` is equal to 123. You can replace "123" with any other unique',
    sql="SQL Prompt: Delete a record from the broadband_usage table based on a specific usage ID\n\nSql Context: CREATE TABLE broadband_usage (usage_id INT, subscriber_id INT, usage_start_time TIMESTAMP, usage_end_time TIMESTAMP, data_used DECIMAL(10,2));\n\nReasoning: Let's think step by step in order to delete a record from the `broadband_usage` table based on a specific usage ID. To do this, we need to use the SQL DELETE statement and specify the condition that identifies the unique record we want to remove. In our case, we are focusing on deleting"
), 0), (Example({'sql_prompt': 'How many recycling plants in Canada process exactly 5 types of waste?', 'sql_context': "CREATE TABLE recycling_plants (name TEXT, country TEXT, waste_types INTEGER); INSERT INTO recycling_plants (name, country, waste_types) VALUES ('Recycling Plant 1', 'Canada', 6), ('Recycling Plant 2', 'Canada', 4), ('Recycling Plant 3', 'Canada', 5), ('Recycling Plant 4', 'Canada', 5), ('Recycling Plant 5', 'Canada', 3);", 'sql': "SELECT COUNT(*) FROM recycling_plants WHERE country = 'Canada' AND waste_types = 5;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the number of recycling plants in Canada that process exactly 5 types of waste, we need to filter the data based on two conditions: country should be "Canada" and waste_types should be equal to 5. Then, count the number of rows satisfying these conditions.',
    sql="SELECT COUNT(*) FROM recycling_plants WHERE country = 'Canada' AND waste_types = 5;"
), 1), (Example({'sql_prompt': 'What is the total revenue for each game in the "Gaming" category?', 'sql_context': 'CREATE TABLE Games (GameID int, GameName varchar(50), Category varchar(50), Revenue decimal(10,2));', 'sql': 'SELECT Category, SUM(Revenue) OVER(PARTITION BY Category) as TotalRevenue FROM Games;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the total revenue for each game in the "Gaming" category, we need to filter games based on their category and then sum up the revenues. Here is how you can write the SQL query:\n\n1. Filter the games with Category = \'Gaming\' using a WHERE clause.\n2. Group the results by GameID or GameName (depending on whether you want unique IDs or names).\n3. Sum up the Revenue for each group using the SUM() function.\n4. Order the result set based on total revenue if needed, although it is not specified in this case.\n\nHere\'s the SQL query:\n\n```sql\nSELECT GameName, SUM(Revenue',
    sql="SELECT GameName, SUM(Revenue) AS Total_Revenue\nFROM Games\nWHERE Category = 'Gaming'\nGROUP BY GameName;"
), 1), (Example({'sql_prompt': 'Delete all flight safety records for a specific aircraft', 'sql_context': "CREATE SCHEMA if not exists aerospace;CREATE TABLE if not exists aerospace.flight_safety (id INT, incident VARCHAR(255), incident_date DATE, aircraft_id INT);INSERT INTO aerospace.flight_safety (id, incident, incident_date, aircraft_id) VALUES (1, 'Inc1', '2017-01-01', 1), (2, 'Inc2', '2018-01-01', 1);", 'sql': 'DELETE FROM aerospace.flight_safety WHERE aircraft_id = 1;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To delete all flight safety records for a specific aircraft, you need to specify the `aircraft_id` of that particular aircraft. Assuming we want to delete records for an aircraft with ID = 1, here is how you can write the SQL query:',
    sql='DELETE FROM aerospace.flight_safety WHERE aircraft_id = 1;'
), 1), (Example({'sql_prompt': 'What is the average hotel price in each city in Europe?', 'sql_context': "CREATE TABLE Hotels_Europe (id INT, name VARCHAR(50), price DECIMAL(5,2), city VARCHAR(50)); INSERT INTO Hotels_Europe (id, name, price, city) VALUES (1, 'Grand Hotel', 200.00, 'Paris'), (2, 'Hotel Colosseo', 350.00, 'Rome'), (3, 'Park Royal', 120.00, 'London'), (4, 'Hotel Versailles', 420.00, 'Paris');", 'sql': 'SELECT city, AVG(price) as avg_price FROM Hotels_Europe GROUP BY city;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the average hotel price in each city in Europe, we need to group the hotels by their cities and then calculate the average price for each group. The SQL query will use the `GROUP BY` clause on the city column and apply the `AVG()` function to compute the average prices.\n\nHere's the SQL statement:\n\n```sql\nSELECT \n    city, \n    AVG(price) AS avg_hotel_price\nFROM \n    Hotels_Europe\nGROUP BY \n    city;\n```",
    sql="Sql Prompt: What is the average hotel price in each city in Europe?\n\nSql Context: CREATE TABLE Hotels_Europe (id INT, name VARCHAR(50), price DECIMAL(5,2), city VARCHAR(50)); INSERT INTO Hotels_Europe (id, name, price, city) VALUES (1, 'Grand Hotel', 200.00, 'Paris'), (2, 'Hotel Colosseo', 350.00, 'Rome'), (3, 'Park Royal', 120.00, 'London'), (4, 'Hotel Versailles', 420.00,"
), 1), (Example({'sql_prompt': 'Show companies with below average ESG scores in the education sector.', 'sql_context': "INSERT INTO companies (id, name, country, sector, ESG_score) VALUES (4, 'EdCo', 'US', 'Education', 70.0), (5, 'LearnCo', 'UK', 'Education', 80.0);", 'sql': "SELECT * FROM companies WHERE sector = 'Education' AND ESG_score < (SELECT AVG(ESG_score) FROM companies WHERE sector = 'Education');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find companies with below-average ESG scores in the education sector, we need to follow these steps:\n\n1. Calculate the average ESG score for all companies in the education sector.\n2. Select companies from the education sector whose ESG scores are below this calculated average.\n\nHere's how you can write an SQL query to achieve this:\n\n```sql\nWITH avg_esg AS (\n  SELECT AVG(ESG_score) as avg_score FROM companies WHERE sector = 'Education'\n)\nSELECT c.*\nFROM companies c, avg_esg ae\nWHERE c.sector = 'Education' AND c.ESG",
    sql="```sql\nWITH avg_esg AS (\n    SELECT AVG(ESG_score) as avg_score\n    FROM companies\n    WHERE sector = 'Education'\n)\nSELECT c.*\nFROM companies c, avg_esg ae\nWHERE c.sector = 'Education' AND c.ESG_score < ae.avg_score;\n```"
), 1), (Example({'sql_prompt': "Find the daily new user registrations in 'data_privacy' table for the last week?", 'sql_context': 'CREATE TABLE data_privacy (user_id INT, registration_date DATE);', 'sql': 'SELECT registration_date, COUNT(*) FROM data_privacy WHERE registration_date >= CURDATE() - INTERVAL 7 DAY GROUP BY registration_date;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the daily new user registrations in the `data_privacy` table for the last week, we need to perform the following steps:\n\n1. Determine the date range for "the last week" based on the current date (assuming today is 2023-04-07). The last week would be from 2023-03-31 to 2023-04-06.\n2. Filter records in the `data_privacy` table that fall within this date range.\n3. Group the filtered records by registration_date and count the number of new user registrations for each day.\n\nHere\'s the SQL',
    sql="SELECT registration_date, COUNT(user_id) AS daily_new_registrations\nFROM data_privacy\nWHERE registration_date BETWEEN DATE('2023-03-31') AND DATE('2023-04-06')\nGROUP BY registration_date\nORDER BY registration_date;"
), 1), (Example({'sql_prompt': 'Update the total number of employees in the mining industry who identify as Native Hawaiian or Pacific Islander to 350 in California.', 'sql_context': "CREATE TABLE MiningEmployees (State VARCHAR(50), EmployeeEthnicity VARCHAR(50), EmployeeCount INT); INSERT INTO MiningEmployees(State, EmployeeEthnicity, EmployeeCount) VALUES ('Texas', 'Native American or Alaska Native', 200), ('Texas', 'Hispanic', 500), ('Texas', 'Black', 300), ('California', 'Native American or Alaska Native', 100), ('California', 'Hispanic', 700), ('California', 'Black', 600);", 'sql': "UPDATE MiningEmployees SET EmployeeCount = 350 WHERE State = 'California' AND EmployeeEthnicity = 'Native Hawaiian or Pacific Islander';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To update the total number of employees in the mining industry who identify as Native Hawaiian or Pacific Islander to 350 in California, we need to locate the row that corresponds to this ethnicity and state. Then, we will set the EmployeeCount column for this specific row to 350.\n\nHere's the SQL statement:\n\n```sql\nUPDATE MiningEmployees\nSET EmployeeCount = 350\nWHERE State = 'California' AND EmployeeEthnicity = 'Native Hawaiian or Pacific Islander';\n```",
    sql="Sql Prompt: Update the total number of employees in the mining industry who identify as Native Hawaiian or Pacific Islander to 350 in California.\n\nSql Context: CREATE TABLE MiningEmployees (State VARCHAR(50), EmployeeEthnicity VARCHAR(50), EmployeeCount INT); INSERT INTO MiningEmployees(State, EmployeeEthnicity, EmployeeCount) VALUES ('Texas', 'Native American or Alaska Native', 200), ('Texas', 'Hispanic', 500), ('Texas', 'Black', 300), ('California', 'Native American or Alaska Native', 100), ('Cal"
), 0), (Example({'sql_prompt': 'What is the maximum number of patients served by a rural health center in Europe?', 'sql_context': 'CREATE TABLE centers (id INT, name VARCHAR(50), location VARCHAR(50), patients_served INT);', 'sql': "SELECT MAX(patients_served) FROM centers WHERE location LIKE '%Europe%' AND location LIKE '%rural%';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the maximum number of patients served by a rural health center in Europe, we need to filter the data based on the 'location' column for European countries and then determine the highest value in the 'patients_served' column.\n\nHere is the SQL query that accomplishes this:\n\n```sql\nSELECT MAX(patients_served) AS max_patients_served\nFROM centers\nWHERE location LIKE '%Europe%' AND patients_served IS NOT NULL;\n```",
    sql="Sql Prompt: What is the maximum number of patients served by a rural health center in Europe?\n\nSql Context: CREATE TABLE centers (id INT, name VARCHAR(50), location VARCHAR(50), patients_served INT);\n\nReasoning: Let's think step by step in order to find the maximum number of patients served by a rural health center in Europe. We need to filter out the records that are located within European countries and then identify the highest value from the 'patients_served' column among those filtered records. To ensure we only consider centers with known patient counts, we also exclude any null values in the 'patients_served' field. Here is the SQL query"
), 1), (Example({'sql_prompt': 'Display the soldier names and branches from the view', 'sql_context': 'CREATE VIEW soldier_details AS SELECT id, name, branch FROM soldiers;', 'sql': 'SELECT name, branch FROM soldier_details;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To display the soldier names and their respective branches from the `soldier_details` view, we need to select the relevant columns (`name`, `branch`) from this view. Since a view is essentially a stored query that can be treated as a table, we can use it directly in our SQL statement without worrying about the underlying tables' structure or complexity.\n\nHere's how you would write the SQL command:\n\n```sql\nSELECT name, branch FROM soldier_details;\n```\n\nThis command selects and displays all entries for `name` and `branch` from the view named `soldier_details`.",
    sql="Sql Prompt: Display the soldier names and branches from the view\n\nSql Context: CREATE VIEW soldier_details AS SELECT id, name, branch FROM soldiers;\n\nReasoning: Let's think step by step in order to display the soldier names and their respective branches from the `soldier_details` view. Since a view is essentially a stored query that can be treated as a table, we need to select the relevant columns (`name`, `branch`) directly from this view. This allows us to access the data without dealing with the underlying tables' structure or complexity. Here's how you would write the SQL command:\n\n```sql\nSELECT name, branch FROM soldier_details;\n```"
), 1), (Example({'sql_prompt': "What is the average attendance for 'Jazz' concerts?", 'sql_context': "CREATE TABLE concerts(id INT, genre VARCHAR(255), avg_attendance FLOAT); INSERT INTO concerts (id, genre, avg_attendance) VALUES (1, 'Jazz', 200.0), (2, 'Classical', 300.0), (3, 'Rock', 500.0);", 'sql': "SELECT avg_attendance FROM concerts WHERE genre = 'Jazz';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the average attendance for 'Jazz' concerts, we need to select the genre and avg_attendance columns from the concerts table where the genre is 'Jazz'. Since there is only one entry for 'Jazz', this will directly give us the average attendance.",
    sql="SELECT avg_attendance FROM concerts WHERE genre = 'Jazz';"
), 1), (Example({'sql_prompt': "How many astronauts are from 'Brazil'?", 'sql_context': "CREATE TABLE AstronautData (id INT, name VARCHAR(50), country VARCHAR(50), height FLOAT, weight FLOAT, blood_pressure FLOAT); INSERT INTO AstronautData (id, name, country, height, weight, blood_pressure) VALUES (1, 'John', 'USA', 180, 80, 120), (2, 'Jane', 'Canada', 170, 70, 110), (3, 'Alex', 'Brazil', 190, 90, 130), (4, 'Elena', 'Russia', 165, 60, 115);", 'sql': "SELECT COUNT(*) FROM AstronautData WHERE country = 'Brazil';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find out how many astronauts are from Brazil, we need to count the number of rows where the country column is equal to "Brazil". We can achieve this using a simple SQL query with the COUNT() function and a WHERE clause.',
    sql="SELECT COUNT(*) FROM AstronautData WHERE country = 'Brazil';"
), 1), (Example({'sql_prompt': 'Delete all records in the "digital_divide_stats" table where the "country" is \'United States\'', 'sql_context': 'CREATE TABLE digital_divide_stats (id INT PRIMARY KEY, country VARCHAR(255), year INT, internet_users INT, total_population INT);', 'sql': "WITH deleted_data AS (DELETE FROM digital_divide_stats WHERE country = 'United States' RETURNING *) SELECT * FROM deleted_data;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To delete all records from the "digital_divide_stats" table where the "country" is \'United States\', we need to use a DELETE statement with a WHERE clause that specifies the condition for deletion.\n\nHere\'s the SQL query:\n\n```sql\nDELETE FROM digital_divide_stats WHERE country = \'United States\';\n```\n\nThis query will remove all rows from the "digital_divide_stats" table where the value of the "country" column is exactly \'United States\'.',
    sql='Sql Prompt: Delete all records in the "digital_divide_stats" table where the "country" is \'United States\'\n\nSql Context: CREATE TABLE digital_divide_stats (id INT PRIMARY KEY, country VARCHAR(255), year INT, internet_users INT, total_population INT);\n\nReasoning: Let\'s think step by step in order to delete all records from the "digital_divide_stats" table where the "country" is \'United States\'. We need to use a DELETE statement with a WHERE clause that specifies the condition for deletion. The WHERE clause will filter out only those rows where the country column matches \'United'
), 1), (Example({'sql_prompt': "What is the maximum depth of marine species in the 'marine_species' table, grouped by their phylum?", 'sql_context': "CREATE TABLE marine_species (id INT, name VARCHAR(255), phylum VARCHAR(255), depth FLOAT); INSERT INTO marine_species (id, name, phylum, depth) VALUES (1, 'Pacific salmon', 'Chordata', 50.0), (2, 'Hawaiian monk seal', 'Chordata', 500.0), (3, 'Sea anemone', 'Cnidaria', 0.01);", 'sql': 'SELECT phylum, MAX(depth) AS max_depth FROM marine_species GROUP BY phylum;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the maximum depth of marine species grouped by their phylum, we need to use the `MAX()` function on the `depth` column and group the results by the `phylum` column. The SQL query for this would be as follows:',
    sql='SELECT phylum, MAX(depth) AS max_depth FROM marine_species GROUP BY phylum;'
), 1), (Example({'sql_prompt': 'What is the percentage of autonomous vehicles sold in the US that are electric?', 'sql_context': 'CREATE TABLE AutonomousVehicles (Make VARCHAR(50), Model VARCHAR(50), Year INT, Country VARCHAR(50), Type VARCHAR(50), Sales INT);', 'sql': "SELECT 100.0 * SUM(CASE WHEN Type = 'Electric' THEN Sales ELSE 0 END) / SUM(Sales) AS Percentage FROM AutonomousVehicles WHERE Country = 'United States';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the percentage of autonomous vehicles sold in the US that are electric, we need to perform the following steps:\n\n1. Filter records for Autonomous Vehicles (Type) sold in the US (Country).\n2. Calculate the total number of electric vehicle sales and the total number of all autonomous vehicle sales in the US.\n3. Divide the number of electric vehicle sales by the total number of autonomous vehicle sales, then multiply by 100 to get the percentage.\n\nHere's the SQL query that accomplishes this:\n\n```sql\nSELECT\n    (SUM(CASE WHEN Type = 'Electric' THEN Sales ELSE 0 END) / SUM(S",
    sql="SELECT \n    ROUND((SUM(CASE WHEN Type = 'Electric' THEN Sales ELSE 0 END) * 1.0) / SUM(Sales), 2) AS electric_percentage\nFROM \n    AutonomousVehicles\nWHERE \n    Country = 'US';"
), 1), (Example({'sql_prompt': 'Show the average number of streams per day for artists who have held concerts in the USA and Canada.', 'sql_context': 'CREATE TABLE music_streaming (artist_id INT, artist_name VARCHAR(100), genre VARCHAR(50), total_streams BIGINT, stream_date DATE); CREATE TABLE concert_ticket_sales (concert_id INT, artist_id INT, concert_date DATE, venue VARCHAR(100), country VARCHAR(50));', 'sql': "SELECT AVG(ms.total_streams / COUNT(DISTINCT ms.stream_date)) AS avg_daily_streams FROM music_streaming ms INNER JOIN concert_ticket_sales cts ON ms.artist_id = cts.artist_id WHERE cts.country IN ('USA', 'Canada');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To solve this problem, we need to perform the following steps:\n\n1. Identify artists who have held concerts in both the USA and Canada using the `concert_ticket_sales` table.\n2. Calculate the average number of streams per day for these identified artists from the `music_streaming` table.\n3. Group the results by artist to get the average daily streams.\n\nHere's how we can write an SQL query to achieve this:\n\n```sql\nWITH USA_Canada_Artists AS (\n    SELECT DISTINCT cts.artist_id\n    FROM concert_ticket_sales cts\n    WHERE country IN ('USA",
    sql="```sql\nWITH USA_Canada_Artists AS (\n    SELECT DISTINCT artist_id \n    FROM concert_ticket_sales \n    WHERE country IN ('USA', 'Canada')\n),\nStreamingData AS (\n    SELECT ms.artist_id, COUNT(ms.total_streams) / COUNT(DISTINCT ms.stream_date) AS avg_daily_streams\n    FROM music_streaming ms\n    JOIN USA_Canada_Artists uca ON ms.artist_id = uca.artist_id\n    GROUP BY ms.artist_id\n)\nSELECT artist_id, AVG"
), 0), (Example({'sql_prompt': 'What is the minimum number of crimes committed in each type for the past year?', 'sql_context': "CREATE TABLE crimes (crime_id INT, crime_type VARCHAR(255), committed_date DATE); INSERT INTO crimes (crime_id, crime_type, committed_date) VALUES (1, 'Theft', '2022-01-01'), (2, 'Assault', '2022-01-02'), (3, 'Theft', '2022-01-03');", 'sql': 'SELECT c.crime_type, MIN(COUNT(c.crime_id)) FROM crimes c WHERE c.committed_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY c.crime_type;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the minimum number of crimes committed for each type within the past year, we need to first determine the range of dates that define "the past year." For this example, let\'s assume today is January 1, 2023. Therefore, the past year would be from January 1, 2022, to December 31, 2022.\n\nNext, we need to count the number of crimes for each type within this date range and then find the minimum value among these counts. Here\'s how you can write the SQL query:\n\n```sql\nSELECT crime_type, MIN(crime_count) AS min_crimes_committed',
    sql="FROM (SELECT crime_type, COUNT(*) AS crime_count\n       FROM crimes\n       WHERE committed_date BETWEEN '2022-01-01' AND '2022-12-31'\n       GROUP BY crime_type) AS yearly_crime_stats;"
), 0), (Example({'sql_prompt': "Delete all marine species in the 'marine_species' table that belong to the 'Mollusca' phylum.", 'sql_context': "CREATE TABLE marine_species (id INT, name VARCHAR(255), phylum VARCHAR(255)); INSERT INTO marine_species (id, name, phylum) VALUES (1, 'Pacific salmon', 'Chordata'), (2, 'Blue whale', 'Chordata'), (3, 'Sea anemone', 'Cnidaria');", 'sql': "DELETE FROM marine_species WHERE phylum = 'Mollusca';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To delete all marine species that belong to the 'Mollusca' phylum from the 'marine_species' table, we need to use a DELETE statement with a WHERE clause specifying the condition for deletion. Here is the SQL command:",
    sql="DELETE FROM marine_species WHERE phylum = 'Mollusca';"
), 0), (Example({'sql_prompt': 'What is the average price of vegan menu items in the database?', 'sql_context': "CREATE TABLE menus (menu_id INT, menu_name TEXT, type TEXT, price DECIMAL); INSERT INTO menus (menu_id, menu_name, type, price) VALUES (1, 'Quinoa Salad', 'Vegetarian', 12.99), (2, 'Chicken Caesar Wrap', 'Gluten-free', 10.99), (3, 'Vegan Burger', 'Vegan', 14.99), (4, 'Falafel Wrap', 'Vegan', 9.99);", 'sql': "SELECT AVG(price) FROM menus WHERE type = 'Vegan';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the average price of vegan menu items in the database, we need to filter out only those entries that have "Vegan" as their type and then calculate the average price for these filtered records. Here is the SQL query to achieve this:',
    sql="SELECT AVG(price) AS avg_vegan_menu_price FROM menus WHERE type = 'Vegan';"
), 1), (Example({'sql_prompt': "What is the total number of military vehicles produced by company 'XYZ'?", 'sql_context': "CREATE TABLE military_vehicles (company TEXT, quantity INT, production_date DATE); INSERT INTO military_vehicles (company, quantity, production_date) VALUES ('ABC', 100, '2023-01-01'); INSERT INTO military_vehicles (company, quantity, production_date) VALUES ('XYZ', 200, '2023-02-01');", 'sql': "SELECT SUM(quantity) FROM military_vehicles WHERE company = 'XYZ';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the total number of military vehicles produced by company 'XYZ', we need to filter the records for this specific company and then sum up the quantity column. Here is the SQL query that accomplishes this task:",
    sql="SELECT SUM(quantity) as total_vehicles FROM military_vehicles WHERE company = 'XYZ';"
), 1), (Example({'sql_prompt': 'Find the supplier with the lowest average delivery time for orders in the last month.', 'sql_context': "CREATE TABLE Suppliers (SupplierID int, SupplierName varchar(50)); CREATE TABLE Products (ProductID int, ProductName varchar(50), SupplierID int); CREATE TABLE Orders (OrderID int, ProductID int, OrderDate date, DeliveryTime int); INSERT INTO Suppliers VALUES (1, 'SupplierA'), (2, 'SupplierB'); INSERT INTO Products VALUES (1, 'Organic Apples', 1), (2, 'Bananas', 2); INSERT INTO Orders VALUES (1, 1, '2022-01-01', 2), (2, 2, '2022-01-03', 3);", 'sql': 'SELECT SupplierName, AVG(DeliveryTime) as AvgDeliveryTime FROM Orders o JOIN Products p ON o.ProductID = p.ProductID JOIN Suppliers sp ON p.SupplierID = sp.SupplierID WHERE OrderDate >= DATEADD(month, -1, GETDATE()) GROUP BY SupplierName ORDER BY AvgDeliveryTime ASC;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the supplier with the lowest average delivery time for orders in the last month, we need to follow these steps:\n\n1. Filter the `Orders` table to include only the records from the last month.\n2. Join the filtered `Orders` table with the `Products` and `Suppliers` tables to get the supplier information for each order.\n3. Calculate the average delivery time for each supplier based on their orders in the last month.\n4. Select the supplier with the lowest average delivery time.\n\nHere's the SQL query that accomplishes this:\n\n```sql\nWITH LastMonthOrders AS (\n  SELECT * FROM Orders",
    sql='WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH))\nSELECT s.SupplierID, s.SupplierName, AVG(o.DeliveryTime) AS AvgDeliveryTime\nFROM LastMonthOrders o\nJOIN Products p ON o.ProductID = p.ProductID\nJOIN Suppliers s ON p.SupplierID = s.SupplierID\nGROUP BY s.SupplierID, s.SupplierName\nORDER BY AvgDeliveryTime ASC\nLIMIT 1;'
), 1), (Example({'sql_prompt': 'What is the maximum number of games played concurrently by a player, for each platform?', 'sql_context': "CREATE TABLE PlayerGames (PlayerID INT, Platform VARCHAR(10), MaxGames INT); INSERT INTO PlayerGames (PlayerID, Platform, MaxGames) VALUES (1, 'PC', 3);", 'sql': 'SELECT Platform, MAX(MaxGames) as MaxConcurrentGames FROM PlayerGames GROUP BY Platform;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the maximum number of games played concurrently by a player for each platform, we need to group the data by the platform and then select the maximum value of MaxGames within each group. Here is the SQL query that accomplishes this task:\n\n```sql\nSELECT Platform, MAX(MaxGames) AS max_concurrent_games\nFROM PlayerGames\nGROUP BY Platform;\n```',
    sql="Sql Prompt: What is the maximum number of games played concurrently by a player, for each platform?\n\nSql Context: CREATE TABLE PlayerGames (PlayerID INT, Platform VARCHAR(10), MaxGames INT); INSERT INTO PlayerGames (PlayerID, Platform, MaxGames) VALUES (1, 'PC', 3), (2, 'Xbox', 5), (3, 'PlayStation', 4), (4, 'PC', 6), (5, 'Xbox', 7), (6, 'PlayStation', 8);\n\nReasoning: Let's think step by step in order to find the maximum number of games played concurrently by a player"
), 0), (Example({'sql_prompt': 'Which broadband subscribers have a download speed greater than 300 Mbps?', 'sql_context': 'CREATE TABLE broadband_subscribers (subscriber_id INT, download_speed FLOAT); INSERT INTO broadband_subscribers (subscriber_id, download_speed) VALUES (1, 250.6), (2, 350.8), (3, 120.9);', 'sql': 'SELECT subscriber_id FROM broadband_subscribers WHERE download_speed > 300;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the broadband subscribers with a download speed greater than 300 Mbps, we need to select those rows from the `broadband_subscribers` table where the `download_speed` column value is greater than 300.\n\nHere's the SQL query for this:",
    sql='SELECT subscriber_id FROM broadband_subscribers WHERE download_speed > 300;'
), 1), (Example({'sql_prompt': 'Which cities have a higher average temperature in the "Finance" scheme than in the "Mitigation" scheme?', 'sql_context': "CREATE TABLE Mitigation (city VARCHAR(255), avg_temp FLOAT); INSERT INTO Mitigation VALUES ('CityA', 20.5), ('CityB', 22.3); CREATE TABLE Finance (city VARCHAR(255), avg_temp FLOAT); INSERT INTO Finance VALUES ('CityA', 23.0), ('CityX', 23.5);", 'sql': 'SELECT Finance.city FROM Finance, Mitigation WHERE Finance.city = Mitigation.city AND Finance.avg_temp > Mitigation.avg_temp'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the cities with a higher average temperature in the "Finance" scheme than in the "Mitigation" scheme, we need to join both tables on the city column and compare their average temperatures for each city. We can use an INNER JOIN to combine rows from both tables that have matching city names and then filter out the cities where the average temperature is higher in the Finance table than in the Mitigation table using a WHERE clause.\n\nHere\'s the SQL query:\n\n```sql\nSELECT f.city, m.avg_temp AS mitigation_avg_temp, f.avg_temp AS finance_avg_temp\nFROM Finance f\nINNER',
    sql='JOIN Mitigation m ON f.city = m.city WHERE f.avg_temp > m.avg_temp;'
), 0), (Example({'sql_prompt': "What is the average playtime, in hours, for players from Germany, for games in the 'Simulation' genre?", 'sql_context': 'CREATE TABLE games (game_id INT, game_genre VARCHAR(255), player_id INT, playtime_mins INT); CREATE TABLE players (player_id INT, player_country VARCHAR(255));', 'sql': "SELECT AVG(playtime_mins / 60) FROM games JOIN players ON games.player_id = players.player_id WHERE players.player_country = 'Germany' AND game_genre = 'Simulation';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the average playtime for players from Germany who are playing games in the 'Simulation' genre, we need to join the `games` table with the `players` table on their common column (`player_id`). Then, filter the results based on the player's country being 'Germany' and the game genre being 'Simulation'. Finally, calculate the average playtime in hours.\n\nHere is the SQL query to achieve this:\n\n```sql\nSELECT AVG(playtime_mins / 60) AS avg_playtime_hours\nFROM games g\nINNER JOIN players p ON g.player_id = p.player_id\nWHERE p.",
    sql="player_country = 'Germany' AND g.game_genre = 'Simulation';"
), 0), (Example({'sql_prompt': 'Show the sum of investments by year and industry', 'sql_context': "CREATE TABLE investments (id INT, investment_year INT, industry VARCHAR(255), investment_amount DECIMAL(10,2)); INSERT INTO investments (id, investment_year, industry, investment_amount) VALUES (1, 2020, 'Tech', 50000.00), (2, 2019, 'Biotech', 20000.00), (3, 2020, 'Tech', 75000.00);", 'sql': 'SELECT investment_year, industry, SUM(investment_amount) as total_investments FROM investments GROUP BY investment_year, industry;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To show the sum of investments by year and industry, we need to group the data first by `investment_year` and then by `industry`. After grouping, we will calculate the total investment amount for each combination.\n\nHere is the SQL query that accomplishes this:\n\n```sql\nSELECT \n    investment_year, \n    industry, \n    SUM(investment_amount) AS total_investment\nFROM \n    investments\nGROUP BY \n    investment_year, \n    industry\nORDER BY \n    investment_year DESC, \n    total_investment DESC;\n```\n\nThis query will display the',
    sql="SQL Prompt: Show the sum of investments by year and industry.\n\nSQL Context: CREATE TABLE investments (id INT, investment_year INT, industry VARCHAR(255), investment_amount DECIMAL(10,2)); INSERT INTO investments (id, investment_year, industry, investment_amount) VALUES (1, 2020, 'Tech', 50000.00), (2, 2019, 'Biotech', 20000.00), (3, 2020, 'Tech', 75000.00);\n\nReasoning"
), 1), (Example({'sql_prompt': 'What is the total amount of funds allocated for each type of disaster?', 'sql_context': "CREATE TABLE DisasterFunds (DisasterType VARCHAR(20), FundID INT, AllocatedAmount DECIMAL(10,2)); INSERT INTO DisasterFunds (DisasterType, FundID, AllocatedAmount) VALUES ('Earthquake', 1, 5000.00), ('Flood', 2, 7500.00), ('Hurricane', 3, 10000.00), ('Tornado', 4, 12500.00), ('Volcano', 5, 15000.00);", 'sql': 'SELECT DisasterType, SUM(AllocatedAmount) as TotalFunds FROM DisasterFunds GROUP BY DisasterType;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the total amount of funds allocated for each type of disaster, we need to group the data by `DisasterType` and then sum up the `AllocatedAmount` within each group. The SQL query will look like this:',
    sql='SELECT DisasterType, SUM(AllocatedAmount) AS TotalFunds FROM DisasterFunds GROUP BY DisasterType;'
), 1), (Example({'sql_prompt': 'What is the market share of Hotel X in terms of revenue generated by hotels in New York City?', 'sql_context': "CREATE TABLE hotels (hotel_id INT, hotel_name TEXT, city TEXT, revenue FLOAT); INSERT INTO hotels (hotel_id, hotel_name, city, revenue) VALUES (1, 'Hotel X', 'New York City', 1000000), (2, 'Hotel Y', 'New York City', 800000), (3, 'Hotel Z', 'New York City', 700000);", 'sql': "SELECT (hotels.revenue / (SELECT SUM(revenue) FROM hotels WHERE city = 'New York City') * 100) as market_share FROM hotels WHERE hotel_name = 'Hotel X';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the market share of Hotel X in terms of revenue generated by hotels in New York City, we need to first calculate the total revenue for all hotels in New York City. Then, we can determine the proportion of this total that is contributed by Hotel X's revenue.\n\nHere are the steps:\n\n1. Calculate the sum of revenues for all hotels in New York City.\n2. Find the revenue generated by Hotel X.\n3. Divide Hotel X's revenue by the total revenue to get its market share percentage.\n4. Multiply the result by 100 to express it as a percentage.\n\nThe SQL query for this",
    sql="SELECT hotel_name, (revenue / SUM(revenue) OVER (PARTITION BY city)) * 100 AS market_share_percentage FROM hotels WHERE city = 'New York City' AND hotel_name = 'Hotel X';"
), 1), (Example({'sql_prompt': "How many vehicles of type 'Trolleybus' are due for maintenance in the next 30 days?", 'sql_context': "CREATE TABLE vehicles (id INT, vehicle_type VARCHAR(255), model_year INT, last_maintenance_date DATE, next_maintenance_date DATE); INSERT INTO vehicles (id, vehicle_type, model_year, last_maintenance_date, next_maintenance_date) VALUES (2004, 'Trolleybus', 2020, '2022-04-20', '2022-07-20'), (2005, 'Tram', 2019, '2022-05-15', '2022-11-15');", 'sql': "SELECT vehicle_type, TIMESTAMPDIFF(DAY, CURDATE(), next_maintenance_date) as days_until_next_maintenance FROM vehicles WHERE vehicle_type = 'Trolleybus' HAVING days_until_next_maintenance <= 30;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the number of vehicles of type 'Trolleybus' that are due for maintenance in the next 30 days, we need to compare the current date with the `next_maintenance_date` column. We can use a WHERE clause to filter out only those records where the vehicle type is 'Trolleybus' and the `next_maintenance_date` falls within the next 30 days from today.\n\nHere's the SQL query:\n\n```sql\nSELECT COUNT(*) AS trolleybuses_due_for_maintenature\nFROM vehicles\nWHERE vehicle_type = 'Trolleybus'\nAND next_maintenance_date BETWE",
    sql="SELECT COUNT(*) AS trolleybuses_due_for_maintenance\nFROM vehicles\nWHERE vehicle_type = 'Trolleybus'\nAND next_maintenance_date <= CURDATE() + INTERVAL 30 DAY;"
), 0), (Example({'sql_prompt': "Insert a new row into the 'startups' table for 'Health Startup 5', founded in '2022-03-15' by 'Middle Eastern' founder, with a funding amount of $7,500,000", 'sql_context': 'CREATE TABLE startups (id INT, name TEXT, industry TEXT, founding_date DATE, raised_funding FLOAT, founder_race TEXT);', 'sql': "INSERT INTO startups (name, industry, founding_date, raised_funding, founder_race) VALUES ('Health Startup 5', 'Healthcare', '2022-03-15', 7500000.00, 'Middle Eastern');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To insert a new row into the 'startups' table for 'Health Startup 5', we need to follow these steps:\n\n1. Identify the columns that require values based on the provided information. In this case, they are name, industry, founding_date, raised_funding, and founder_race.\n2. Construct an INSERT INTO statement with the appropriate column names followed by their corresponding values in parentheses.\n3. Execute the SQL command to insert the new row into the 'startups' table.\n\nHere is the resulting SQL query:\n\n```sql\nINSERT INTO startups (name, industry, founding_date, raised_funding, founder_race)",
    sql="VALUES ('Health Startup 5', 'Healthcare', '2022-03-15', 7500000.0, 'Middle Eastern');"
), 1), (Example({'sql_prompt': 'How many mental health parity complaints were filed in the last 12 months by state?', 'sql_context': "CREATE TABLE mental_health_parity_complaints (complaint_id INT, complaint_date DATE, state VARCHAR(20)); INSERT INTO mental_health_parity_complaints (complaint_id, complaint_date, state) VALUES (1, '2021-01-01', 'California'), (2, '2021-03-15', 'New York'), (3, '2020-12-31', 'Texas');", 'sql': 'SELECT state, COUNT(*) as num_complaints FROM mental_health_parity_complaints WHERE complaint_date >= DATE_SUB(CURRENT_DATE, INTERVAL 12 MONTH) GROUP BY state;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the number of mental health parity complaints filed in the last 12 months by state, we need to filter the data based on the `complaint_date` and then group it by `state`. We can use the current date (assuming today is '2023-04-01') to calculate the range for the last 12 months.\n\nHere's the SQL query:\n\n```sql\nSELECT state, COUNT(*) AS complaints_count\nFROM mental_health_parity_complaints\nWHERE complaint_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND complaint_date <= CURDATE",
    sql='SELECT state, COUNT(*) AS complaints_count\nFROM mental_health_parity_complaints\nWHERE complaint_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE()\nGROUP BY state;'
), 1), (Example({'sql_prompt': 'Which chemical plants have exceeded the maximum allowed emission limit in the last year?', 'sql_context': "CREATE TABLE plants (plant_id INT, plant_name VARCHAR(50)); CREATE TABLE emissions (plant_id INT, emission_level INT, emission_date DATE); INSERT INTO plants (plant_id, plant_name) VALUES (1, 'Plant A'), (2, 'Plant B'); INSERT INTO emissions (plant_id, emission_level, emission_date) VALUES (1, 500, '2022-01-01'), (2, 450, '2022-01-01');", 'sql': 'SELECT plants.plant_name FROM plants INNER JOIN emissions ON plants.plant_id = emissions.plant_id WHERE emissions.emission_level > (SELECT MAX(emission_limit) FROM allowed_emissions) AND emissions.emission_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find which chemical plants have exceeded the maximum allowed emission limit in the last year, we need to know the maximum allowed emission level. Assuming there is a table called `emission_limits` that contains this information, and it has columns for plant_id and max_allowed_level:\n\nSql Context (extended): CREATE TABLE emission_limits (plant_id INT, max_allowed_level INT); INSERT INTO emission_limits (plant_id, max_allowed_level) VALUES (1, 400), (2, 350);\n\nNow we can write the SQL query to find which plants have exceeded their maximum allowed emission limit in the last year:',
    sql='SELECT'
), 0), (Example({'sql_prompt': 'What is the total duration played for each player?', 'sql_context': "CREATE TABLE PlayerGame (PlayerID INT, GameID INT, Played DATE, StartTime TIMESTAMP, EndTime TIMESTAMP); INSERT INTO PlayerGame (PlayerID, GameID, Played, StartTime, EndTime) VALUES (1, 1, '2022-01-01', '2022-01-01 10:00:00', '2022-01-01 12:00:00'), (2, 2, '2022-01-02', '2022-01-02 14:00:00', '2022-01-02 16:00:00'), (3, 1, '2022-01-03', '2022-01-03 10:00:00', '2022-01-03 11:00:00'), (4, 3, '2022-01-04', '2022-01-04 18:00:00', '2022-01-04 19:00:00');", 'sql': 'SELECT PlayerID, SUM(TIMESTAMPDIFF(MINUTE, StartTime, EndTime)) FROM PlayerGame GROUP BY PlayerID;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the total duration played for each player, we need to calculate the difference between the `EndTime` and `StartTime` for each game they have played. Then, we can sum up these durations per player. Here is the SQL query that accomplishes this:\n\n```sql\nSELECT PlayerID, SUM(TIMESTAMPDIFF(MINUTE, StartTime, EndTime)) AS TotalDurationMinutes\nFROM PlayerGame\nGROUP BY PlayerID;\n```\n\nThis query calculates the difference in minutes between `StartTime` and `EndTime` for each game using the `TIMESTAMPDIFF()` function. Then it sums up these durations per player by grouping them with the `PlayerID',
    sql='SELECT PlayerID, SUM(TIMESTAMPDIFF(MINUTE, StartTime, EndTime)) AS TotalDurationMinutes FROM PlayerGame GROUP BY PlayerID;'
), 1), (Example({'sql_prompt': 'What is the percentage of legal technology patents granted to applicants in California since 2010?', 'sql_context': 'CREATE TABLE legal_technology_patents (patent_id INT, grant_date DATE, state VARCHAR(20));', 'sql': "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM legal_technology_patents WHERE grant_date >= '2010-01-01')) AS percentage FROM legal_technology_patents WHERE state = 'California';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the percentage of legal technology patents granted to applicants in California since 2010, we need to perform the following steps:\n\n1. Filter out the patents that were granted after 2010 and are from California.\n2. Calculate the total number of such filtered patents.\n3. Find the overall count of legal technology patents granted since 2010 (regardless of state).\n4. Divide the count of California-granted patents by the total count, then multiply by 100 to get the percentage.\n\nHere's the SQL query that accomplishes this:\n\n```sql\nWITH california_patents",
    sql="-- Step 1: Filter out the patents granted after 2010 and are from California\n-- Step 2: Calculate the total number of such filtered patents\n-- Step 3: Find the overall count of legal technology patents granted since 2010 (regardless of state)\n-- Step 4: Divide the count of California-granted patents by the total count, then multiply by 100 to get the percentage\nWITH california_patents AS (\n    SELECT COUNT(*) as california_count\n    FROM legal_technology_patents\n    WHERE state = 'California' AND grant_date >= '201"
), 0), (Example({'sql_prompt': "What is the total quantity of menu items sold in the 'Appetizers' category from the 'Asian' cuisine type?", 'sql_context': "CREATE TABLE menu (menu_id INT, menu_name VARCHAR(50), category VARCHAR(50), cuisine VARCHAR(50), quantity_sold INT, price DECIMAL(5,2), month_sold INT); INSERT INTO menu (menu_id, menu_name, category, cuisine, quantity_sold, price, month_sold) VALUES (12, 'Spring Rolls', 'Appetizers', 'Asian', 30, 4.99, 1), (13, 'Edamame', 'Appetizers', 'Asian', 40, 3.99, 1);", 'sql': "SELECT SUM(quantity_sold) FROM menu WHERE category = 'Appetizers' AND cuisine = 'Asian';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the total quantity of menu items sold in the 'Appetizers' category from the 'Asian' cuisine type, we need to filter the records based on the specified criteria and then sum up the quantities. Here is the SQL query that accomplishes this:",
    sql="SELECT SUM(quantity_sold) AS total_quantity_sold FROM menu WHERE category = 'Appetizers' AND cuisine = 'Asian';"
), 1), (Example({'sql_prompt': 'How many volunteers signed up in each region in 2021?', 'sql_context': "CREATE TABLE volunteers (id INT, name TEXT, region TEXT, signup_date DATE); INSERT INTO volunteers (id, name, region, signup_date) VALUES (1, 'Alice', 'North', '2021-02-03'), (2, 'Bob', 'South', '2021-05-05'), (3, 'Charlie', 'East', '2020-12-12');", 'sql': 'SELECT region, COUNT(*) FROM volunteers WHERE YEAR(signup_date) = 2021 GROUP BY region;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the number of volunteers who signed up in each region during 2021, we need to count the entries for each region where the signup_date falls within the year 2021. We can achieve this using a SQL query that filters records based on the signup_date and then groups them by region.\n\nHere's the SQL query:\n\n```sql\nSELECT region, COUNT(*) AS volunteers_signed_up\nFROM volunteers\nWHERE EXTRACT(YEAR FROM signup_date) = 2021\nGROUP BY region;\n```\n\nThis query extracts the year from the `signup_date` column and compares it to",
    sql='SELECT region, COUNT(*) AS volunteers_signed_up\nFROM volunteers\nWHERE EXTRACT(YEAR FROM signup_date) = 2021\nGROUP BY region;'
), 1), (Example({'sql_prompt': 'What is the total distance traveled for all buses in the London transit system in the past week?', 'sql_context': 'CREATE TABLE london_buses (bus_id INT, daily_distance FLOAT, date DATE);', 'sql': 'SELECT SUM(daily_distance) FROM london_buses WHERE date >= DATE_SUB(NOW(), INTERVAL 1 WEEK);'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the total distance traveled for all buses in the London transit system in the past week, we need to sum up the `daily_distance` column from the `london_buses` table where the date is within the last 7 days.\n\nFirst, determine the current date and then calculate the date range for the past week:\n1. Get today's date using a function like CURDATE() or GETDATE(), depending on your SQL dialect (MySQL/PostgreSQL).\n2. Calculate the start of the last week by subtracting 7 days from today's date and setting it to midnight at the beginning of that day.\n3. Calculate",
    sql='SELECT SUM(daily_distance) AS total_distance_traveled FROM london_buses WHERE date >= CURDATE() - INTERVAL 7 DAY AND date < CURDATE();'
), 1), (Example({'sql_prompt': "List all suppliers who provide products to 'Organic Foods' store in the 'StoreSuppliers' table", 'sql_context': "CREATE TABLE StoreSuppliers (store VARCHAR(255), supplier VARCHAR(255)); INSERT INTO StoreSuppliers (store, supplier) VALUES ('Organic Foods', 'Supplier A'), ('Organic Foods', 'Supplier B'), ('Health Foods', 'Supplier C');", 'sql': "SELECT supplier FROM StoreSuppliers WHERE store = 'Organic Foods';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To list all suppliers who provide products to the 'Organic Foods' store, we need to select rows from the `StoreSuppliers` table where the `store` column matches 'Organic Foods'. The SQL query for this would be as follows:\n\n```sql\nSELECT supplier FROM StoreSuppliers WHERE store = 'Organic Foods';\n```",
    sql="SELECT supplier FROM StoreSuppliers WHERE store = 'Organic Foods';"
), 1), (Example({'sql_prompt': 'What is the percentage of total humanitarian aid spent on education in each world region?', 'sql_context': "CREATE TABLE humanitarian_aid (id INT, region TEXT, category TEXT, amount FLOAT); INSERT INTO humanitarian_aid (id, region, category, amount) VALUES (1, 'Africa', 'Education', 500), (2, 'Asia', 'Health', 750), (3, 'Africa', 'Health', 250);", 'sql': "SELECT region, (SUM(case when category = 'Education' then amount else 0 end) / SUM(amount)) * 100 as education_percentage FROM humanitarian_aid GROUP BY region;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the percentage of total humanitarian aid spent on education in each world region, we need to calculate two things for each region:\n\n1. The total amount of humanitarian aid spent on education.\n2. The total amount of humanitariаid aid spent in that region (regardless of category).\n\nThen, we can divide the first value by the second and multiply by 100 to get the percentage. We will use a combination of subqueries or common table expressions (CTEs) along with window functions for this calculation. Here's an example using CTEs:\n\n```sql\nWITH region_education AS (\n    SELECT\n        region,",
    sql="```sql\nWITH total_aid_by_region AS (\n    SELECT \n        region,\n        SUM(amount) OVER (PARTITION BY region) as total_aid_in_region\n    FROM humanitarian_aid\n),\neducation_aid_by_region AS (\n    SELECT \n        region,\n        SUM(amount) as education_aid_total\n    FROM humanitarian_aid\n    WHERE category = 'Education'\n    GROUP BY region\n)\nSELECT \n    e.region,\n    ROUND((e.education_aid_total / r.total_aid_in_"
), 1)]