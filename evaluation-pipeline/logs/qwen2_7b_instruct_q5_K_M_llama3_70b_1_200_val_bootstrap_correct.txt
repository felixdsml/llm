[(Example({'sql_prompt': "What are the top 3 autonomous vehicles with the highest safety ratings in the 'auto_show' table?", 'sql_context': 'CREATE TABLE auto_show (id INT, vehicle_name VARCHAR(50), safety_rating INT);', 'sql': "SELECT vehicle_name, safety_rating FROM (SELECT vehicle_name, safety_rating, ROW_NUMBER() OVER (ORDER BY safety_rating DESC) as safety_rank FROM auto_show WHERE vehicle_name LIKE '%Autonomous%') AS auton_ranks WHERE safety_rank <= 3;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='answer this SQL query. \n\n1. **Identify the relevant columns**: We need to select `vehicle_name` and `safety_rating` from the table.\n\n2. **Filter for autonomous vehicles**: The condition `is_autonomous = TRUE` is given, so we should filter rows where the vehicle is autonomous.\n\n3. **Sort by safety rating in descending order**: To find the top 3 with highest ratings, we need to sort the results based on `safety_rating` in descending order.\n\n4. **Limit the result to top 3 records**: After sorting, we limit our output to only include the first three rows.\n\nThe SQL query would look like this:\n\n```sql\nSELECT vehicle_name, safety_rating \nFROM auto_show',
    sql='SELECT vehicle_name, safety_rating \nFROM auto_show \nWHERE is_autonomous = TRUE \nORDER BY safety_rating DESC \nLIMIT 3;'
), 0), (Example({'sql_prompt': 'Delete a record from the broadband_usage table', 'sql_context': 'CREATE TABLE broadband_usage (usage_id INT, subscriber_id INT, usage_start_time TIMESTAMP, usage_end_time TIMESTAMP, data_used DECIMAL(10,2));', 'sql': 'DELETE FROM broadband_usage WHERE usage_id = 11111;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Delete a record from the `broadband_usage` table. \n\n### Step 1: Identify the Record to Delete\n\nFirstly, you need to identify which specific record you want to delete. This could be based on various criteria such as `usage_id`, `subscriber_id`, or any other relevant identifier in your dataset.\n\n### Step 2: Construct the SQL Query\n\nOnce you have identified the record, construct an SQL DELETE statement that targets this specific record. The general syntax for a DELETE statement is:\n\n```sql\nDELETE FROM table_name WHERE condition;\n```\n\n### Step 3: Specify the Condition\n\nIn our case, let's assume we want to delete a record where `usage_id` equals some value (let's say `",
    sql='DELETE FROM broadband_usage WHERE usage_id = <specific_value>;```'
), 1), (Example({'sql_prompt': 'How many recycling plants in Canada process exactly 5 types of waste?', 'sql_context': "CREATE TABLE recycling_plants (name TEXT, country TEXT, waste_types INTEGER); INSERT INTO recycling_plants (name, country, waste_types) VALUES ('Recycling Plant 1', 'Canada', 6), ('Recycling Plant 2', 'Canada', 4), ('Recycling Plant 3', 'Canada', 5), ('Recycling Plant 4', 'Canada', 5), ('Recycling Plant 5', 'Canada', 3);", 'sql': "SELECT COUNT(*) FROM recycling_plants WHERE country = 'Canada' AND waste_types = 5;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="1. **Identify the SQL Query**: The question asks for how many recycling plants in Canada process exactly 5 types of waste.\n\n2. **Understand the Context**:\n   - We have a table named `recycling_plants` with columns: `name`, `country`, and `waste_types`.\n   - Each row represents a recycling plant, its country, and the number of waste types it processes.\n   - The condition we're interested in is when `waste_types` equals 5.\n\n3. **Formulate the SQL Query**:\n   - We need to select rows from the `recycling_plants` table where `country` is 'Canada' AND `waste_types` is exactly 5.",
    sql="SELECT COUNT(*) FROM recycling_plants WHERE country = 'Canada' AND waste_types = 5;"
), 1), (Example({'sql_prompt': 'What is the total revenue for each game in the "Gaming" category?', 'sql_context': 'CREATE TABLE Games (GameID int, GameName varchar(50), Category varchar(50), Revenue decimal(10,2));', 'sql': 'SELECT Category, SUM(Revenue) OVER(PARTITION BY Category) as TotalRevenue FROM Games;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="answer this SQL query. \n\nFirstly, we need to select the columns `GameName` and `Revenue` from our table `Games`. This will give us the name of each game along with its revenue.\n\nSecondly, we should filter out only those rows where the category is 'Gaming'. We can do this by adding a WHERE clause that checks if `Category` equals 'Gaming'.\n\nLastly, to get the total revenue for each game, we need to group our results by `GameName`. This will allow us to aggregate the revenues of all games with the same name. To calculate the total revenue for each game, we can use the SUM function on the `Revenue` column.\n\nSo, putting it all together:\n\n```sql",
    sql="SELECT GameName, SUM(Revenue) AS TotalRevenue FROM Games WHERE Category = 'Gaming' GROUP BY GameName;"
), 1), (Example({'sql_prompt': 'Delete all flight safety records for a specific aircraft', 'sql_context': "CREATE SCHEMA if not exists aerospace;CREATE TABLE if not exists aerospace.flight_safety (id INT, incident VARCHAR(255), incident_date DATE, aircraft_id INT);INSERT INTO aerospace.flight_safety (id, incident, incident_date, aircraft_id) VALUES (1, 'Inc1', '2017-01-01', 1), (2, 'Inc2', '2018-01-01', 1);", 'sql': 'DELETE FROM aerospace.flight_safety WHERE aircraft_id = 1;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Delete all flight safety records for a specific aircraft. \n\nFirstly, we need to identify the `aircraft_id` of the specific aircraft whose records we want to delete. This information is not provided directly in your SQL context, so you would typically have this data available from another source or table.\n\nAssuming that we know the `aircraft_id` and it's 1 for our case (as per the example data), here's how you can write the SQL query:\n\n```sql\nDELETE FROM aerospace.flight_safety WHERE aircraft_id = 1;\n```\n\nThis command will delete all records from the `flight_safety` table where the `aircraft_id` is equal to 1, effectively removing all flight safety records for that",
    sql='DELETE FROM aerospace.flight_safety WHERE aircraft_id = 1;'
), 1), (Example({'sql_prompt': 'What is the average hotel price in each city in Europe?', 'sql_context': "CREATE TABLE Hotels_Europe (id INT, name VARCHAR(50), price DECIMAL(5,2), city VARCHAR(50)); INSERT INTO Hotels_Europe (id, name, price, city) VALUES (1, 'Grand Hotel', 200.00, 'Paris'), (2, 'Hotel Colosseo', 350.00, 'Rome'), (3, 'Park Royal', 120.00, 'London'), (4, 'Hotel Versailles', 420.00, 'Paris');", 'sql': 'SELECT city, AVG(price) as avg_price FROM Hotels_Europe GROUP BY city;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the average hotel price in each city in Europe, we need to:\n\n1. Select the `city` and calculate the `average price` for hotels within that city.\n2. Group the results by `city`.\n\nHere is how you can write the SQL query based on the provided context:\n\n```sql\nSELECT \n    city,\n    AVG(price) AS average_price\nFROM \n    Hotels_Europe\nWHERE \n    city IN ('Paris', 'Rome', 'London') -- Assuming these are cities in Europe for this example.\nGROUP BY \n    city;\n```\n\nThis query will return the average hotel price for each of the specified cities (in this case, Paris, Rome, and London). If you want to include all European",
    sql="SELECT city, AVG(price) AS average_price FROM Hotels_Europe WHERE city IN ('Paris', 'Rome', 'London') GROUP BY city;"
), 1), (Example({'sql_prompt': 'Show companies with below average ESG scores in the education sector.', 'sql_context': "INSERT INTO companies (id, name, country, sector, ESG_score) VALUES (4, 'EdCo', 'US', 'Education', 70.0), (5, 'LearnCo', 'UK', 'Education', 80.0);", 'sql': "SELECT * FROM companies WHERE sector = 'Education' AND ESG_score < (SELECT AVG(ESG_score) FROM companies WHERE sector = 'Education');"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="1. **Identify the Average ESG Score for Education Sector Companies**: First, we need to calculate the average ESG score of companies operating in the education sector.\n\n2. **Filter Below-Average ESG Scores**: After calculating the average, we can filter out companies with an ESG score below this calculated average.\n\n3. **Query Execution**:\n\n   - **Step 1: Calculate Average ESG Score for Education Sector Companies**\n     ```sql\n     SELECT AVG(ESG_score) AS avg_education_ESG FROM companies WHERE sector = 'Education';\n     ```\n\n   - **Step 2: Filter Below-Average ESG Scores**\n     Assuming the average calculated is `AVG_ESG`, we can then filter out",
    sql="SELECT name, country, ESG_score FROM companies WHERE sector = 'Education' AND ESG_score < (SELECT AVG(ESG_score) FROM companies WHERE sector = 'Education');"
), 1), (Example({'sql_prompt': "Find the daily new user registrations in 'data_privacy' table for the last week?", 'sql_context': 'CREATE TABLE data_privacy (user_id INT, registration_date DATE);', 'sql': 'SELECT registration_date, COUNT(*) FROM data_privacy WHERE registration_date >= CURDATE() - INTERVAL 7 DAY GROUP BY registration_date;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Find the daily new user registrations in the `data_privacy` table for the last week. \n\n1. **Identify the date range**: First, we need to determine the dates that fall within the last week from today.\n\n2. **Filter records**: Next, we should filter out only those records where the registration_date falls within this identified last week's period.\n\n3. **Count unique users per day**: We then count the number of unique user IDs for each day during this period to get the daily new registrations.\n\n4. **Order and display results**: Finally, we order these counts by date to present the data in chronological order.\n\nHere is how you can write the SQL query:\n\n```sql\nWITH last_week_dates AS (\n    SELECT",
    sql="SELECT registration_date, COUNT(DISTINCT user_id) AS daily_new_registrations FROM data_privacy WHERE registration_date BETWEEN CURRENT_DATE - INTERVAL '7 days' AND CURRENT_DATE GROUP BY registration_date ORDER BY registration_date;```"
), 1), (Example({'sql_prompt': 'Update the total number of employees in the mining industry who identify as Native Hawaiian or Pacific Islander to 350 in California.', 'sql_context': "CREATE TABLE MiningEmployees (State VARCHAR(50), EmployeeEthnicity VARCHAR(50), EmployeeCount INT); INSERT INTO MiningEmployees(State, EmployeeEthnicity, EmployeeCount) VALUES ('Texas', 'Native American or Alaska Native', 200), ('Texas', 'Hispanic', 500), ('Texas', 'Black', 300), ('California', 'Native American or Alaska Native', 100), ('California', 'Hispanic', 700), ('California', 'Black', 600);", 'sql': "UPDATE MiningEmployees SET EmployeeCount = 350 WHERE State = 'California' AND EmployeeEthnicity = 'Native Hawaiian or Pacific Islander';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Update the total number of employees who identify as Native Hawaiian or Pacific Islander (which seems to be a mislabelled category for Native American or Alaska Native based on the context) to 350 in California. \n\nHere is how you would do it:\n\n1. **Identify the row**: First, we need to find the specific row that matches 'California' and 'Native American or Alaska Native'. This can be done using a `SELECT` statement with conditions.\n\n2. **Update the value**: Once identified, we update the `EmployeeCount` for this row to 350.\n\nThe SQL query would look like:\n\n```sql\nUPDATE MiningEmployees \nSET EmployeeCount = 350 \nWHERE State = 'California",
    sql="UPDATE MiningEmployees SET EmployeeCount = 350 WHERE State = 'California' AND EmployeeEthnicity = 'Native American or Alaska Native';"
), 0), (Example({'sql_prompt': 'What is the maximum number of patients served by a rural health center in Europe?', 'sql_context': 'CREATE TABLE centers (id INT, name VARCHAR(50), location VARCHAR(50), patients_served INT);', 'sql': "SELECT MAX(patients_served) FROM centers WHERE location LIKE '%Europe%' AND location LIKE '%rural%';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="1. **Identify the relevant table and column**: We need data from the `centers` table specifically looking at the `patients_served` column.\n\n2. **Filter for rural health centers in Europe**: The condition is that the center must be located in 'Europe' and classified as 'rural'. \n\n3. **Find maximum number of patients served**: Once we have filtered our data, we need to find the highest value from the `patients_served` column.\n\nThe SQL query would look like this:\n\n```sql\nSELECT MAX(patients_served) AS max_patients_served \nFROM centers \nWHERE location = 'Europe' AND type = 'rural';\n```\n\nThis query first filters for rows where the center is located",
    sql="SELECT MAX(patients_served) AS max_patients_served FROM centers WHERE location = 'Europe' AND type = 'rural';"
), 1), (Example({'sql_prompt': 'Display the soldier names and branches from the view', 'sql_context': 'CREATE VIEW soldier_details AS SELECT id, name, branch FROM soldiers;', 'sql': 'SELECT name, branch FROM soldier_details;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="1. **Understand the SQL Query**: The first query is looking for all construction permits issued in each state.\n\n2. **SQL Query Explanation**:\n   - `SELECT State, SUM(PermitCount) AS TotalPermits`: This part of the query selects the 'State' column and sums up the 'PermitCount' for each distinct state. The alias 'TotalPermits' is given to this sum.\n   - `FROM PermitsByState`: Specifies that we are querying from the table named 'PermitsByState'.\n   - `GROUP BY State`: Groups the results by unique states, ensuring that the sum of permits is calculated per state.\n\n3. **Reasoning**:\n   - The query starts with selecting the",
    sql='SELECT name, branch FROM soldier_details;'
), 1), (Example({'sql_prompt': "What is the average attendance for 'Jazz' concerts?", 'sql_context': "CREATE TABLE concerts(id INT, genre VARCHAR(255), avg_attendance FLOAT); INSERT INTO concerts (id, genre, avg_attendance) VALUES (1, 'Jazz', 200.0), (2, 'Classical', 300.0), (3, 'Rock', 500.0);", 'sql': "SELECT avg_attendance FROM concerts WHERE genre = 'Jazz';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the average attendance for 'Jazz' concerts from the given SQL context, we need to:\n\n1. Identify the rows where `genre` is equal to 'Jazz'.\n2. Calculate the average of the `avg_attendance` column for these rows.\n\nHere's how you can write the SQL query step by step:\n\n```sql\n-- Step 1: Select rows with genre as 'Jazz'\nSELECT * FROM concerts WHERE genre = 'Jazz';\n\n-- Step 2: Calculate the average attendance from the selected rows\nSELECT AVG(avg_attendance) AS AverageAttendance FROM concerts WHERE genre = 'Jazz';\n```\n\nThe final SQL query to find the average attendance for 'Jazz' concerts would be:\n\n```sql",
    sql="SELECT AVG(avg_attendance) AS AverageAttendance FROM concerts WHERE genre = 'Jazz';"
), 1), (Example({'sql_prompt': "How many astronauts are from 'Brazil'?", 'sql_context': "CREATE TABLE AstronautData (id INT, name VARCHAR(50), country VARCHAR(50), height FLOAT, weight FLOAT, blood_pressure FLOAT); INSERT INTO AstronautData (id, name, country, height, weight, blood_pressure) VALUES (1, 'John', 'USA', 180, 80, 120), (2, 'Jane', 'Canada', 170, 70, 110), (3, 'Alex', 'Brazil', 190, 90, 130), (4, 'Elena', 'Russia', 165, 60, 115);", 'sql': "SELECT COUNT(*) FROM AstronautData WHERE country = 'Brazil';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find out how many astronauts are from Brazil, we can use a SQL query that filters the `AstronautData` table for rows where the country is 'Brazil'. Here's the SQL query:\n\n```sql\nSELECT COUNT(*) \nFROM AstronautData \nWHERE country = 'Brazil';\n```\n\nThis query does the following:\n1. `COUNT(*)`: Counts the number of rows returned by the query.\n2. `FROM AstronautData`: Specifies the table to select data from, which is `AstronautData` in this case.\n3. `WHERE country = 'Brazil'`: Filters the rows so that only those where the `country` column has a value of 'Brazil' are included.\n\nWhen you run this query against",
    sql="```sql\nSELECT COUNT(*) FROM AstronautData WHERE country = 'Brazil';\n```"
), 1), (Example({'sql_prompt': 'Delete all records in the "digital_divide_stats" table where the "country" is \'United States\'', 'sql_context': 'CREATE TABLE digital_divide_stats (id INT PRIMARY KEY, country VARCHAR(255), year INT, internet_users INT, total_population INT);', 'sql': "WITH deleted_data AS (DELETE FROM digital_divide_stats WHERE country = 'United States' RETURNING *) SELECT * FROM deleted_data;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Delete all records from the `digital_divide_stats` table where the `country` is 'United States', we can use a DELETE statement with a WHERE clause. Here's how you would write this SQL query:\n\n```sql\nDELETE FROM digital_divide_stats \nWHERE country = 'United States';\n```\n\nThis command will remove all rows from the `digital_divide_stats` table where the value in the `country` column is exactly 'United States'. \n\nPlease note that executing a DELETE statement can have significant effects on your data, so it's important to ensure you're deleting the correct records and possibly backup your database before running such commands.",
    sql="DELETE FROM digital_divide_stats WHERE country = 'United States';"
), 1), (Example({'sql_prompt': "What is the maximum depth of marine species in the 'marine_species' table, grouped by their phylum?", 'sql_context': "CREATE TABLE marine_species (id INT, name VARCHAR(255), phylum VARCHAR(255), depth FLOAT); INSERT INTO marine_species (id, name, phylum, depth) VALUES (1, 'Pacific salmon', 'Chordata', 50.0), (2, 'Hawaiian monk seal', 'Chordata', 500.0), (3, 'Sea anemone', 'Cnidaria', 0.01);", 'sql': 'SELECT phylum, MAX(depth) AS max_depth FROM marine_species GROUP BY phylum;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='To answer this SQL prompt and reasoning question, we need to follow these steps:\n\n### Step 1: Understand the Problem\n\nThe task is to find the maximum depth of marine species grouped by their phylum.\n\n### Step 2: Identify Key Elements\n\n- **Table**: `marine_species`\n- **Columns**:\n  - `id`: Unique identifier for each species.\n  - `name`: Name of the marine species.\n  - `phylum`: Phylum to which the species belongs.\n  - `depth`: Maximum depth at which the species can be found.\n\n### Step 3: Formulate SQL Query\n\nTo achieve this, we need to:\n1. **Group** by `phylum`.\n2. **Select** the maximum',
    sql='SELECT phylum, MAX(depth) AS max_depth FROM marine_species GROUP BY phylum;'
), 1), (Example({'sql_prompt': 'What is the percentage of autonomous vehicles sold in the US that are electric?', 'sql_context': 'CREATE TABLE AutonomousVehicles (Make VARCHAR(50), Model VARCHAR(50), Year INT, Country VARCHAR(50), Type VARCHAR(50), Sales INT);', 'sql': "SELECT 100.0 * SUM(CASE WHEN Type = 'Electric' THEN Sales ELSE 0 END) / SUM(Sales) AS Percentage FROM AutonomousVehicles WHERE Country = 'United States';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Solve this SQL query:\n\n1. **Identify Electric Vehicles**: First, we need to filter out the electric autonomous vehicles from our dataset. This can be done using a WHERE clause with `Type = 'Electric'`.\n\n2. **Count Total Autonomous Vehicles Sold in US**: Next, we count all the autonomous vehicles sold in the US by filtering on `Country = 'US'` and summing up the sales.\n\n3. **Count Electric Autonomous Vehicles Sold in US**: Similarly, we need to count only the electric ones among those sold in the US.\n\n4. **Calculate Percentage**: Finally, we calculate the percentage of electric autonomous vehicles out of total autonomous vehicles sold in the US by dividing the number of electric vehicles by the total number and",
    sql="SELECT \n    (SUM(CASE WHEN Type = 'Electric' THEN Sales ELSE 0 END) * 100.0 / SUM(Sales)) AS ElectricPercentage\nFROM \n    AutonomousVehicles\nWHERE \n    Country = 'US';"
), 1), (Example({'sql_prompt': 'Show the average number of streams per day for artists who have held concerts in the USA and Canada.', 'sql_context': 'CREATE TABLE music_streaming (artist_id INT, artist_name VARCHAR(100), genre VARCHAR(50), total_streams BIGINT, stream_date DATE); CREATE TABLE concert_ticket_sales (concert_id INT, artist_id INT, concert_date DATE, venue VARCHAR(100), country VARCHAR(50));', 'sql': "SELECT AVG(ms.total_streams / COUNT(DISTINCT ms.stream_date)) AS avg_daily_streams FROM music_streaming ms INNER JOIN concert_ticket_sales cts ON ms.artist_id = cts.artist_id WHERE cts.country IN ('USA', 'Canada');"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="solve this SQL query. \n\nFirstly, we need to join the `music_streaming` and `concert_ticket_sales` tables on their common column (`artist_id`) to get information about artists who have held concerts in both USA and Canada.\n\nSecondly, we should filter out only those records where the country is either 'USA' or 'Canada'.\n\nThirdly, for each artist, we need to calculate the average number of streams per day. This can be done by grouping the data by `artist_id` and then dividing the total streams (`total_streams`) by the number of days between their first and last concert date.\n\nLastly, we select only those artists who have held at least one concert in both USA and Canada for a valid calculation of",
    sql="SELECT \n    m.artist_name,\n    AVG(m.total_streams / DATEDIFF(MAX(c.concert_date), MIN(c.concert_date)) AS avg_streams_per_day\nFROM \n    music_streaming m\nJOIN \n    concert_ticket_sales c ON m.artist_id = c.artist_id\nWHERE \n    c.country IN ('USA', 'Canada')\nGROUP BY \n    m.artist_name\nHAVING \n    COUNT(DISTINCT CASE WHEN c.country = 'USA' THEN c.concert_date END) > 0 AND\n    COUNT(DISTINCT CASE WHEN c.country = 'Canada' THEN c.concert_date END) > 0;"
), 0), (Example({'sql_prompt': 'What is the minimum number of crimes committed in each type for the past year?', 'sql_context': "CREATE TABLE crimes (crime_id INT, crime_type VARCHAR(255), committed_date DATE); INSERT INTO crimes (crime_id, crime_type, committed_date) VALUES (1, 'Theft', '2022-01-01'), (2, 'Assault', '2022-01-02'), (3, 'Theft', '2022-01-03');", 'sql': 'SELECT c.crime_type, MIN(COUNT(c.crime_id)) FROM crimes c WHERE c.committed_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY c.crime_type;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To answer the SQL prompt about finding the minimum number of crimes committed in each type for the past year, we need to:\n\n1. Filter out the crimes that were committed within the last year.\n2. Group these filtered crimes by their type.\n3. Count the number of crimes per group (type).\n4. Select only those groups where the count is greater than 0.\n\nHere's how you can write this SQL query based on the given context:\n\n```sql\nSELECT \n    crime_type,\n    COUNT(*) AS min_crimes_per_type\nFROM \n    crimes\nWHERE \n    committed_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)\nGROUP BY \n    crime_type\nHAVING \n    COUNT(*) > 0;\n``",
    sql='SELECT crime_type, MIN(COUNT(crime_id)) AS min_crimes_per_type FROM (\n    SELECT crime_type, committed_date, ROW_NUMBER() OVER (PARTITION BY crime_type ORDER BY committed_date DESC) as row_num\n    FROM crimes\n    WHERE committed_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)\n) subquery\nGROUP BY crime_type\nHAVING COUNT(*) > 0;'
), 0), (Example({'sql_prompt': "Delete all marine species in the 'marine_species' table that belong to the 'Mollusca' phylum.", 'sql_context': "CREATE TABLE marine_species (id INT, name VARCHAR(255), phylum VARCHAR(255)); INSERT INTO marine_species (id, name, phylum) VALUES (1, 'Pacific salmon', 'Chordata'), (2, 'Blue whale', 'Chordata'), (3, 'Sea anemone', 'Cnidaria');", 'sql': "DELETE FROM marine_species WHERE phylum = 'Mollusca';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Delete all marine species that belong to the 'Mollusca' phylum from the `marine_species` table:\n\n1. **Identify the query**: We need a SQL DELETE statement.\n2. **Targeted condition**: The condition is that the `phylum` column should be equal to 'Mollusca'.\n3. **Execute the query**: Use the SQL DELETE command with the WHERE clause to filter out rows where `phylum` equals 'Mollusca'.\n\nHere's how you would write this in SQL:\n\n```sql\nDELETE FROM marine_species \nWHERE phylum = 'Mollusca';\n```\n\nThis statement will remove all records from the `marine_species` table that have a `phylum` value of",
    sql="DELETE FROM marine_species WHERE phylum = 'Mollusca';"
), 0), (Example({'sql_prompt': 'What is the average price of vegan menu items in the database?', 'sql_context': "CREATE TABLE menus (menu_id INT, menu_name TEXT, type TEXT, price DECIMAL); INSERT INTO menus (menu_id, menu_name, type, price) VALUES (1, 'Quinoa Salad', 'Vegetarian', 12.99), (2, 'Chicken Caesar Wrap', 'Gluten-free', 10.99), (3, 'Vegan Burger', 'Vegan', 14.99), (4, 'Falafel Wrap', 'Vegan', 9.99);", 'sql': "SELECT AVG(price) FROM menus WHERE type = 'Vegan';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the average price of vegan menu items from the provided SQL context, we need to:\n\n1. Identify all rows where `type` is 'Vegan'.\n2. Extract the prices (`price`) from these rows.\n3. Calculate the average of these prices.\n\nHere's how you can write the SQL query for this:\n\n```sql\nSELECT AVG(price) AS average_price_of_vegan_items\nFROM menus\nWHERE type = 'Vegan';\n```\n\nThis query first filters out all rows where `type` is 'Vegan' using the `WHERE` clause. Then, it calculates the average (`AVG`) of the prices in these filtered rows.\n\nLet's break down each part:\n\n- **SELECT AVG(price) AS average_price",
    sql="```sql\nSELECT AVG(price) AS average_price_of_vegan_items FROM menus WHERE type = 'Vegan';\n```"
), 1), (Example({'sql_prompt': "What is the total number of military vehicles produced by company 'XYZ'?", 'sql_context': "CREATE TABLE military_vehicles (company TEXT, quantity INT, production_date DATE); INSERT INTO military_vehicles (company, quantity, production_date) VALUES ('ABC', 100, '2023-01-01'); INSERT INTO military_vehicles (company, quantity, production_date) VALUES ('XYZ', 200, '2023-02-01');", 'sql': "SELECT SUM(quantity) FROM military_vehicles WHERE company = 'XYZ';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the total number of military vehicles produced by company 'XYZ', we need to:\n\n1. Identify the rows where `company` is 'XYZ'.\n2. Sum up the `quantity` for these rows.\n\nThe SQL query that accomplishes this would be:\n\n```sql\nSELECT SUM(quantity) AS TotalProduced\nFROM military_vehicles\nWHERE company = 'XYZ';\n```\n\nThis query first filters out all records where the `company` column has the value 'XYZ' using the `WHERE` clause. Then, it uses the `SUM()` function to add up all the values in the `quantity` column for these filtered rows, giving us the total number of military vehicles produced by company 'XYZ'.",
    sql="SELECT SUM(quantity) AS TotalProduced FROM military_vehicles WHERE company = 'XYZ';"
), 1), (Example({'sql_prompt': 'Find the supplier with the lowest average delivery time for orders in the last month.', 'sql_context': "CREATE TABLE Suppliers (SupplierID int, SupplierName varchar(50)); CREATE TABLE Products (ProductID int, ProductName varchar(50), SupplierID int); CREATE TABLE Orders (OrderID int, ProductID int, OrderDate date, DeliveryTime int); INSERT INTO Suppliers VALUES (1, 'SupplierA'), (2, 'SupplierB'); INSERT INTO Products VALUES (1, 'Organic Apples', 1), (2, 'Bananas', 2); INSERT INTO Orders VALUES (1, 1, '2022-01-01', 2), (2, 2, '2022-01-03', 3);", 'sql': 'SELECT SupplierName, AVG(DeliveryTime) as AvgDeliveryTime FROM Orders o JOIN Products p ON o.ProductID = p.ProductID JOIN Suppliers sp ON p.SupplierID = sp.SupplierID WHERE OrderDate >= DATEADD(month, -1, GETDATE()) GROUP BY SupplierName ORDER BY AvgDeliveryTime ASC;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Find the supplier with the lowest average delivery time for orders in the last month:\n\n**Step 1:** Identify all orders placed within the last month.\nWe need to filter out orders that were placed more than a month ago. Assuming our database has a function or method to calculate dates, we can use it here.\n\n**Step 2:** Calculate the average delivery time for each supplier.\nOnce we have identified the relevant orders, we will group them by supplier and calculate the average of their respective delivery times.\n\n**Step 3:** Find the supplier with the lowest average delivery time.\nAfter calculating averages for all suppliers, we can find out which one has the smallest value.\n\nHere's how you could write this SQL query:\n\n```sql\nWITH LastMonth",
    sql='WITH LastMonthOrders AS (\n    SELECT OrderID, DeliveryTime\n    FROM Orders\n    WHERE OrderDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH)\n),\nSupplierAverages AS (\n    SELECT SupplierID, AVG(DeliveryTime) AS AvgDeliveryTime\n    FROM LastMonthOrders\n    JOIN Products ON LastMonthOrders.OrderID = Products.ProductID\n    JOIN Suppliers ON Products.SupplierID = Suppliers.SupplierID\n    GROUP BY SupplierID\n)\nSELECT SupplierName, MIN(AvgDeliveryTime) AS LowestAvgDeliveryTime\nFROM SupplierAverages\nJOIN Suppliers ON SupplierAverages.SupplierID = Suppliers.SupplierID;'
), 1), (Example({'sql_prompt': 'What is the maximum number of games played concurrently by a player, for each platform?', 'sql_context': "CREATE TABLE PlayerGames (PlayerID INT, Platform VARCHAR(10), MaxGames INT); INSERT INTO PlayerGames (PlayerID, Platform, MaxGames) VALUES (1, 'PC', 3);", 'sql': 'SELECT Platform, MAX(MaxGames) as MaxConcurrentGames FROM PlayerGames GROUP BY Platform;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Understand the SQL query for finding the maximum number of games played concurrently by a player on each platform:\n\n### Step-by-Step Reasoning\n\n#### 1. **Identify the Table and Columns**\n   - The table `PlayerGames` contains information about players, platforms they play on, and the maximum number of games they can play concurrently.\n   - Relevant columns: `PlayerID`, `Platform`, `MaxGames`.\n\n#### 2. **Objective**\n   - Find the maximum number of games played by a player for each platform.\n\n#### 3. **SQL Query Construction**\n   - We need to group data by `Platform` and find the maximum value in `MaxGames`.\n   - This involves using the `MAX()` function,',
    sql='SELECT Platform, MAX(MaxGames) AS MaxConcurrentGames FROM PlayerGames GROUP BY Platform;'
), 1), (Example({'sql_prompt': 'Which broadband subscribers have a download speed greater than 300 Mbps?', 'sql_context': 'CREATE TABLE broadband_subscribers (subscriber_id INT, download_speed FLOAT); INSERT INTO broadband_subscribers (subscriber_id, download_speed) VALUES (1, 250.6), (2, 350.8), (3, 120.9);', 'sql': 'SELECT subscriber_id FROM broadband_subscribers WHERE download_speed > 300;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To answer the SQL prompt about which broadband subscribers have a download speed greater than 300 Mbps, we need to:\n\n1. Identify the columns and data types of the `broadband_subscribers` table.\n2. Write an SQL query that filters rows where the `download_speed` column value is greater than 300.\n\nHere's how you can write the SQL query based on this reasoning:\n\n```sql\n-- SQL Query to find broadband subscribers with download speed > 300 Mbps\n\nSELECT *\nFROM broadband_subscribers\nWHERE download_speed > 300;\n```\n\nThis query will return all rows from the `broadband_subscribers` table where the `download_speed` is greater than 300",
    sql='SELECT subscriber_id FROM broadband_subscribers WHERE download_speed > 300;'
), 1), (Example({'sql_prompt': 'Which cities have a higher average temperature in the "Finance" scheme than in the "Mitigation" scheme?', 'sql_context': "CREATE TABLE Mitigation (city VARCHAR(255), avg_temp FLOAT); INSERT INTO Mitigation VALUES ('CityA', 20.5), ('CityB', 22.3); CREATE TABLE Finance (city VARCHAR(255), avg_temp FLOAT); INSERT INTO Finance VALUES ('CityA', 23.0), ('CityX', 23.5);", 'sql': 'SELECT Finance.city FROM Finance, Mitigation WHERE Finance.city = Mitigation.city AND Finance.avg_temp > Mitigation.avg_temp'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='1. **Identify the cities with higher average temperatures in the "Finance" scheme**: We need to compare the average temperatures of each city between the two schemes (Mitigation and Finance). \n\n2. **Compare the average temperatures for each city**:\n   - For CityA, we have an average temperature of 23.0 in the "Finance" scheme.\n   - For CityB, we have an average temperature of 22.3 in the "Finance" scheme.\n\n3. **Determine which cities have a higher average temperature in the "Finance" scheme**:\n   - Comparing these values, it\'s clear that CityA has a higher average temperature (23.0) than CityB (22.',
    sql='SELECT M.city \nFROM Mitigation AS M\nJOIN Finance AS F ON M.city = F.city\nWHERE F.avg_temp > M.avg_temp;'
), 1), (Example({'sql_prompt': "What is the average playtime, in hours, for players from Germany, for games in the 'Simulation' genre?", 'sql_context': 'CREATE TABLE games (game_id INT, game_genre VARCHAR(255), player_id INT, playtime_mins INT); CREATE TABLE players (player_id INT, player_country VARCHAR(255));', 'sql': "SELECT AVG(playtime_mins / 60) FROM games JOIN players ON games.player_id = players.player_id WHERE players.player_country = 'Germany' AND game_genre = 'Simulation';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="1. **Identify the relevant data**: We need information about games played by German players that belong to the 'Simulation' genre.\n\n   - From `games` table: `game_id`, `game_genre`, `player_id`, and `playtime_mins`.\n   - From `players` table: `player_id` and `player_country`.\n\n2. **Filter for German players**: We need to select only those rows from the `games` table where the player's country is 'Germany'.\n\n3. **Filter for Simulation genre games**: Within the filtered data, we should further narrow down to only include games that belong to the 'Simulation' genre.\n\n4. **Calculate average playtime in hours**: Once we have identified the relevant rows",
    sql="SELECT AVG(CAST(playtime_mins AS REAL) / 60) AS AveragePlaytimeHours FROM games \nJOIN players ON games.player_id = players.player_id \nWHERE players.player_country = 'Germany' AND games.game_genre = 'Simulation';"
), 1), (Example({'sql_prompt': 'Show the sum of investments by year and industry', 'sql_context': "CREATE TABLE investments (id INT, investment_year INT, industry VARCHAR(255), investment_amount DECIMAL(10,2)); INSERT INTO investments (id, investment_year, industry, investment_amount) VALUES (1, 2020, 'Tech', 50000.00), (2, 2019, 'Biotech', 20000.00), (3, 2020, 'Tech', 75000.00);", 'sql': 'SELECT investment_year, industry, SUM(investment_amount) as total_investments FROM investments GROUP BY investment_year, industry;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='To show the sum of investments by year and industry, we can use a SQL query that groups data based on both `investment_year` and `industry`, then sums up the `investment_amount`. Here is how you could write this query:\n\n```sql\nSELECT investment_year, industry, SUM(investment_amount) as total_investment\nFROM investments\nGROUP BY investment_year, industry;\n```\n\nThis SQL statement does the following:\n1. **SELECT** clause: It selects three columns - `investment_year`, `industry`, and the sum of `investment_amount` (renamed to `total_investment`). The SUM function aggregates all values in the `investment_amount` column for each group.\n2. **FROM** clause: Specifies the table name',
    sql='SELECT investment_year, industry, SUM(investment_amount) as total_investment FROM investments GROUP BY investment_year, industry;'
), 1), (Example({'sql_prompt': 'What is the total amount of funds allocated for each type of disaster?', 'sql_context': "CREATE TABLE DisasterFunds (DisasterType VARCHAR(20), FundID INT, AllocatedAmount DECIMAL(10,2)); INSERT INTO DisasterFunds (DisasterType, FundID, AllocatedAmount) VALUES ('Earthquake', 1, 5000.00), ('Flood', 2, 7500.00), ('Hurricane', 3, 10000.00), ('Tornado', 4, 12500.00), ('Volcano', 5, 15000.00);", 'sql': 'SELECT DisasterType, SUM(AllocatedAmount) as TotalFunds FROM DisasterFunds GROUP BY DisasterType;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='To find the total amount of funds allocated for each type of disaster, we need to use a SQL query that groups the data by `DisasterType` and sums up the `AllocatedAmount`. Here is how you can do it:\n\n```sql\nSELECT DisasterType, SUM(AllocatedAmount) AS TotalFunds\nFROM DisasterFunds\nGROUP BY DisasterType;\n```\n\n**Explanation:**\n\n1. **SELECT clause**: We select two columns - `DisasterType` and the sum of `AllocatedAmount`. The `SUM()` function is used to aggregate all the values in the `AllocatedAmount` column for each group.\n\n2. **FROM clause**: This specifies the table we are querying, which is `Disaster',
    sql='SELECT DisasterType, SUM(AllocatedAmount) AS TotalFunds FROM DisasterFunds GROUP BY DisasterType;'
), 1), (Example({'sql_prompt': 'What is the market share of Hotel X in terms of revenue generated by hotels in New York City?', 'sql_context': "CREATE TABLE hotels (hotel_id INT, hotel_name TEXT, city TEXT, revenue FLOAT); INSERT INTO hotels (hotel_id, hotel_name, city, revenue) VALUES (1, 'Hotel X', 'New York City', 1000000), (2, 'Hotel Y', 'New York City', 800000), (3, 'Hotel Z', 'New York City', 700000);", 'sql': "SELECT (hotels.revenue / (SELECT SUM(revenue) FROM hotels WHERE city = 'New York City') * 100) as market_share FROM hotels WHERE hotel_name = 'Hotel X';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Find the market share of Hotel X in terms of revenue generated by hotels in New York City. \n\n1. **Identify Total Revenue**: First, we need to find out the total revenue generated by all hotels in New York City. This can be done by summing up the revenues from all hotels.\n\n2. **Calculate Hotel X's Revenue**: Next, we identify and calculate the revenue of Hotel X specifically.\n\n3. **Find Market Share**: Finally, we divide Hotel X's revenue by the total revenue to find out what percentage of the total market it represents.\n\nHere is how you can write SQL queries for each step:\n\n**Step 1: Calculate Total Revenue**\n```sql\nSELECT SUM(revenue) as total_revenue FROM hotels WHERE",
    sql="city = 'New York City';```\n\n**Step 2: Calculate Hotel X's Revenue**\n```sql\nSELECT revenue AS hotel_x_revenue FROM hotels WHERE hotel_name = 'Hotel X';\n```\n\n**Step 3: Find Market Share**\n```sql\nWITH total_revenue AS (\n    SELECT SUM(revenue) as total_revenue FROM hotels WHERE city = 'New York City'\n),\nhotel_x_revenue AS (\n    SELECT revenue AS hotel_x_revenue FROM hotels WHERE hotel_name = 'Hotel X'\n)\nSELECT (hotel_x_revenue / total_revenue.total_revenue) * 100 AS market_share_percentage\nFROM hotel_x_revenue, total_revenue;\n```"
), 1), (Example({'sql_prompt': "How many vehicles of type 'Trolleybus' are due for maintenance in the next 30 days?", 'sql_context': "CREATE TABLE vehicles (id INT, vehicle_type VARCHAR(255), model_year INT, last_maintenance_date DATE, next_maintenance_date DATE); INSERT INTO vehicles (id, vehicle_type, model_year, last_maintenance_date, next_maintenance_date) VALUES (2004, 'Trolleybus', 2020, '2022-04-20', '2022-07-20'), (2005, 'Tram', 2019, '2022-05-15', '2022-11-15');", 'sql': "SELECT vehicle_type, TIMESTAMPDIFF(DAY, CURDATE(), next_maintenance_date) as days_until_next_maintenance FROM vehicles WHERE vehicle_type = 'Trolleybus' HAVING days_until_next_maintenance <= 30;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Solve the SQL queries:\n\n### Query 1:\n**Prompt**: What is the total number of construction permits issued in each state?\n\n**Context**:\n```\nCREATE TABLE PermitsByState (State VARCHAR(50), PermitCount INT);\nINSERT INTO PermitsByState (State, PermitCount) VALUES ('Texas', 100);\n```\n\n**SQL Query**:\n```sql\nSELECT State, SUM(PermitCount) AS TotalPermits FROM PermitsByState GROUP BY State;\n```\n**Reasoning**: \n- The `SUM()` function is used to aggregate the number of permits for each state.\n- `GROUP BY` clause groups the results by state so that we can calculate the total permits issued per state",
    sql="SELECT COUNT(*) AS NumberOfTrolleybusesDueForMaintenance FROM vehicles WHERE vehicle_type = 'Trolleybus' AND next_maintenance_date BETWEEN CURDATE() + INTERVAL 1 DAY AND CURDATE() + INTERVAL 30 DAY;"
), 1), (Example({'sql_prompt': "Insert a new row into the 'startups' table for 'Health Startup 5', founded in '2022-03-15' by 'Middle Eastern' founder, with a funding amount of $7,500,000", 'sql_context': 'CREATE TABLE startups (id INT, name TEXT, industry TEXT, founding_date DATE, raised_funding FLOAT, founder_race TEXT);', 'sql': "INSERT INTO startups (name, industry, founding_date, raised_funding, founder_race) VALUES ('Health Startup 5', 'Healthcare', '2022-03-15', 7500000.00, 'Middle Eastern');"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Insert the new row into the 'startups' table:\n\n1. **Identify the columns**: The columns are `id`, `name`, `industry`, `founding_date`, `raised_funding`, and `founder_race`.\n\n2. **Determine values for each column**:\n   - `name`: 'Health Startup 5'\n   - `industry`: (Assuming this is a placeholder, as it's not specified in the prompt)\n   - `founding_date`: '2022-03-15'\n   - `raised_funding`: $7,500,000\n   - `founder_race`: 'Middle Eastern'\n\n3. **Insert into SQL**:\n   Since",
    sql="INSERT INTO startups (name, industry, founding_date, raised_funding, founder_race) VALUES ('Health Startup 5', NULL, '2022-03-15', 7500000, 'Middle Eastern');"
), 1), (Example({'sql_prompt': 'How many mental health parity complaints were filed in the last 12 months by state?', 'sql_context': "CREATE TABLE mental_health_parity_complaints (complaint_id INT, complaint_date DATE, state VARCHAR(20)); INSERT INTO mental_health_parity_complaints (complaint_id, complaint_date, state) VALUES (1, '2021-01-01', 'California'), (2, '2021-03-15', 'New York'), (3, '2020-12-31', 'Texas');", 'sql': 'SELECT state, COUNT(*) as num_complaints FROM mental_health_parity_complaints WHERE complaint_date >= DATE_SUB(CURRENT_DATE, INTERVAL 12 MONTH) GROUP BY state;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To answer the SQL prompt about how many mental health parity complaints were filed in the last 12 months by state, we need to:\n\n1. Identify all the complaints that fall within the last 12 months.\n2. Group these complaints by their respective states.\n3. Count the number of complaints for each state.\n\nHere's a step-by-step SQL query to achieve this:\n\n```sql\n-- First, find the date exactly one year ago from today\nWITH LastYearDate AS (\n    SELECT DATE_SUB(CURDATE(), INTERVAL 1 YEAR) as one_year_ago_date\n)\n\n-- Then, select all complaints filed within the last 12 months and group by state\nSELECT \n    l.one_year_ago_date,",
    sql='SELECT COUNT(*) AS ComplaintsCount, state FROM mental_health_parity_complaints WHERE complaint_date >= (SELECT DATE_SUB(CURDATE(), INTERVAL 1 YEAR)) GROUP BY state;'
), 1), (Example({'sql_prompt': 'Which chemical plants have exceeded the maximum allowed emission limit in the last year?', 'sql_context': "CREATE TABLE plants (plant_id INT, plant_name VARCHAR(50)); CREATE TABLE emissions (plant_id INT, emission_level INT, emission_date DATE); INSERT INTO plants (plant_id, plant_name) VALUES (1, 'Plant A'), (2, 'Plant B'); INSERT INTO emissions (plant_id, emission_level, emission_date) VALUES (1, 500, '2022-01-01'), (2, 450, '2022-01-01');", 'sql': 'SELECT plants.plant_name FROM plants INNER JOIN emissions ON plants.plant_id = emissions.plant_id WHERE emissions.emission_level > (SELECT MAX(emission_limit) FROM allowed_emissions) AND emissions.emission_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Solve the SQL queries:\n\n### Query 1:\n**Prompt**: What is the total number of construction permits issued in each state?\n\n**Context**:\n```sql\nCREATE TABLE PermitsByState (State VARCHAR(50), PermitCount INT);\nINSERT INTO PermitsByState (State, PermitCount) VALUES ('Texas', 100);\n```\n\n**SQL Query**:\n```sql\nSELECT State, SUM(PermitCount) AS TotalPermits FROM PermitsByState GROUP BY State;\n```\n**Reasoning**: \n- The `SUM()` function is used to aggregate the number of permits for each state.\n- `GROUP BY` clause groups the results by state.\n\n### Query 2:\n**Prompt**: What",
    sql='SELECT plant_name FROM plants WHERE plant_id IN (SELECT plant_id FROM emissions WHERE emission_level > (SELECT MAX(allowed_emission) FROM emission_limits) AND emission_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE());'
), 0), (Example({'sql_prompt': 'What is the total duration played for each player?', 'sql_context': "CREATE TABLE PlayerGame (PlayerID INT, GameID INT, Played DATE, StartTime TIMESTAMP, EndTime TIMESTAMP); INSERT INTO PlayerGame (PlayerID, GameID, Played, StartTime, EndTime) VALUES (1, 1, '2022-01-01', '2022-01-01 10:00:00', '2022-01-01 12:00:00'), (2, 2, '2022-01-02', '2022-01-02 14:00:00', '2022-01-02 16:00:00'), (3, 1, '2022-01-03', '2022-01-03 10:00:00', '2022-01-03 11:00:00'), (4, 3, '2022-01-04', '2022-01-04 18:00:00', '2022-01-04 19:00:00');", 'sql': 'SELECT PlayerID, SUM(TIMESTAMPDIFF(MINUTE, StartTime, EndTime)) FROM PlayerGame GROUP BY PlayerID;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To calculate the total duration played for each player, we need to:\n\n1. Identify all rows where a specific player is playing.\n2. Calculate the difference between `EndTime` and `StartTime` for each row of that player to find out how long they were playing.\n3. Sum up these durations for each player.\n\nHere's the SQL query that accomplishes this:\n\n```sql\nSELECT PlayerID, SUM(EndTime - StartTime) AS TotalDurationPlayed\nFROM PlayerGame\nGROUP BY PlayerID;\n```\n\nThis query first selects `PlayerID` and calculates the total duration played by subtracting `StartTime` from `EndTime`. It then groups these results by `PlayerID`, allowing us to sum up the durations for each player individually.",
    sql='SELECT PlayerID, SUM(EndTime - StartTime) AS TotalDurationPlayed FROM PlayerGame GROUP BY PlayerID;'
), 1), (Example({'sql_prompt': 'What is the percentage of legal technology patents granted to applicants in California since 2010?', 'sql_context': 'CREATE TABLE legal_technology_patents (patent_id INT, grant_date DATE, state VARCHAR(20));', 'sql': "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM legal_technology_patents WHERE grant_date >= '2010-01-01')) AS percentage FROM legal_technology_patents WHERE state = 'California';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To answer this SQL prompt, we need to follow these steps:\n\n1. **Filter Patents Granted Since 2010**: We first filter the patents that were granted since 2010.\n2. **Count Patents for California Applicants**: Then, count how many of those filtered patents are from applicants in California.\n3. **Total Patents Counted**: Also, we need to know the total number of patents granted since 2010 (regardless of location).\n4. **Calculate Percentage**: Finally, calculate the percentage of these patents that were granted to Californian applicants.\n\nHere's how you can write the SQL query:\n\n```sql\nSELECT \n    (\n        SELECT COUNT(*) \n        FROM legal_technology",
    sql="legal_technology_patents WHERE grant_date >= '2010-01-01' AND state = 'California') * 100 / (SELECT COUNT(*) FROM legal_technology_patents WHERE grant_date >= '2010-01-01')) AS PercentageOfCalifornianPatents;"
), 1), (Example({'sql_prompt': "What is the total quantity of menu items sold in the 'Appetizers' category from the 'Asian' cuisine type?", 'sql_context': "CREATE TABLE menu (menu_id INT, menu_name VARCHAR(50), category VARCHAR(50), cuisine VARCHAR(50), quantity_sold INT, price DECIMAL(5,2), month_sold INT); INSERT INTO menu (menu_id, menu_name, category, cuisine, quantity_sold, price, month_sold) VALUES (12, 'Spring Rolls', 'Appetizers', 'Asian', 30, 4.99, 1), (13, 'Edamame', 'Appetizers', 'Asian', 40, 3.99, 1);", 'sql': "SELECT SUM(quantity_sold) FROM menu WHERE category = 'Appetizers' AND cuisine = 'Asian';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the total quantity of menu items sold in the 'Appetizers' category from the 'Asian' cuisine type, we need to:\n\n1. Select the `quantity_sold` column.\n2. From the `menu` table.\n3. Where the `category` is 'Appetizers'.\n4. And the `cuisine` is 'Asian'.\n\nThe SQL query that accomplishes this would be:\n\n```sql\nSELECT SUM(quantity_sold) AS total_quantity_sold \nFROM menu \nWHERE category = 'Appetizers' AND cuisine = 'Asian';\n```\n\nThis query uses the `SUM()` function to add up all the values in the `quantity_sold` column for rows where both conditions (`category = 'Appetizers'`",
    sql="SELECT SUM(quantity_sold) AS total_quantity_sold FROM menu WHERE category = 'Appetizers' AND cuisine = 'Asian';"
), 1), (Example({'sql_prompt': 'How many volunteers signed up in each region in 2021?', 'sql_context': "CREATE TABLE volunteers (id INT, name TEXT, region TEXT, signup_date DATE); INSERT INTO volunteers (id, name, region, signup_date) VALUES (1, 'Alice', 'North', '2021-02-03'), (2, 'Bob', 'South', '2021-05-05'), (3, 'Charlie', 'East', '2020-12-12');", 'sql': 'SELECT region, COUNT(*) FROM volunteers WHERE YEAR(signup_date) = 2021 GROUP BY region;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To answer the SQL prompt about how many volunteers signed up in each region in 2021, we need to:\n\n1. **Filter records for the year 2021**: We want only those records where the signup_date is within the year 2021.\n2. **Group by region**: After filtering, we group the data by the 'region' column to aggregate information per region.\n3. **Count unique volunteers**: For each region, we count the number of unique names (volunteers) since a volunteer can sign up multiple times.\n\nHere's how you would write this SQL query:\n\n```sql\nSELECT \n    region,\n    COUNT(DISTINCT id) AS total_volunteers\nFROM \n    volunteers",
    sql="SELECT region, COUNT(DISTINCT id) AS total_volunteers FROM volunteers WHERE signup_date BETWEEN '2021-01-01' AND '2021-12-31';"
), 1), (Example({'sql_prompt': 'What is the total distance traveled for all buses in the London transit system in the past week?', 'sql_context': 'CREATE TABLE london_buses (bus_id INT, daily_distance FLOAT, date DATE);', 'sql': 'SELECT SUM(daily_distance) FROM london_buses WHERE date >= DATE_SUB(NOW(), INTERVAL 1 WEEK);'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="1. **Identify the relevant data**: We need to find information about the total distance traveled for all buses in London over the past week.\n\n2. **Understand the table structure**: The `london_buses` table contains columns for `bus_id`, `daily_distance`, and `date`.\n\n3. **Filter by date range**: To consider only the data from the past week, we need to filter records where the `date` is within that time frame.\n\n4. **Summarize daily distances**: We will sum up all the `daily_distance` values for each bus over the selected date range.\n\n5. **Calculate total distance**: Finally, we'll calculate the total distance traveled by summing up the individual daily distances of all",
    sql='SELECT SUM(daily_distance) AS TotalDistance FROM london_buses WHERE date >= CURDATE() - INTERVAL 7 DAY;'
), 1), (Example({'sql_prompt': "List all suppliers who provide products to 'Organic Foods' store in the 'StoreSuppliers' table", 'sql_context': "CREATE TABLE StoreSuppliers (store VARCHAR(255), supplier VARCHAR(255)); INSERT INTO StoreSuppliers (store, supplier) VALUES ('Organic Foods', 'Supplier A'), ('Organic Foods', 'Supplier B'), ('Health Foods', 'Supplier C');", 'sql': "SELECT supplier FROM StoreSuppliers WHERE store = 'Organic Foods';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="1. Identify the suppliers who are associated with 'Organic Foods' store.\n2. Use a SELECT statement to retrieve the supplier names from the `StoreSuppliers` table.\n3. Filter the results to only include rows where the `store` column is equal to 'Organic Foods'.\n\nThe SQL query that accomplishes this task would be:\n\n```sql\nSELECT supplier \nFROM StoreSuppliers \nWHERE store = 'Organic Foods';\n```\n\nThis query will return a list of all suppliers who provide products to the 'Organic Foods' store.",
    sql="SELECT supplier FROM StoreSuppliers WHERE store = 'Organic Foods';"
), 1), (Example({'sql_prompt': 'What is the percentage of total humanitarian aid spent on education in each world region?', 'sql_context': "CREATE TABLE humanitarian_aid (id INT, region TEXT, category TEXT, amount FLOAT); INSERT INTO humanitarian_aid (id, region, category, amount) VALUES (1, 'Africa', 'Education', 500), (2, 'Asia', 'Health', 750), (3, 'Africa', 'Health', 250);", 'sql': "SELECT region, (SUM(case when category = 'Education' then amount else 0 end) / SUM(amount)) * 100 as education_percentage FROM humanitarian_aid GROUP BY region;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To calculate the percentage of total humanitarian aid spent on education in each world region, we need to follow these steps:\n\n1. **Sum up the amount for Education category** within each region.\n2. **Calculate the total amount of humanitarian aid** for that specific region.\n3. **Divide the sum from step 1 by the total amount from step 2** and multiply it by 100 to get the percentage.\n\nHere's how you can write this SQL query:\n\n```sql\nWITH EducationAmounts AS (\n    SELECT \n        region,\n        SUM(amount) as education_total_amount\n    FROM humanitarian_aid\n    WHERE category = 'Education'\n),\nRegionTotals AS (\n    SELECT \n        region,\n        SUM(amount)",
    sql='SELECT \n  EducationAmounts.region,\n  (education_total_amount / RegionTotals.total_amount) * 100 as percentage_spent_on_education\nFROM \n  EducationAmounts\nJOIN \n  RegionTotals ON EducationAmounts.region = RegionTotals.region;'
), 0)]