[(Example({'sql_prompt': 'Delete records with sales amount over $50,000 in the MilitaryEquipmentSales table', 'sql_context': "CREATE TABLE MilitaryEquipmentSales (id INT, equipment_name VARCHAR(50), sale_amount INT, sale_date DATE); INSERT INTO MilitaryEquipmentSales (id, equipment_name, sale_amount, sale_date) VALUES (1, 'Fighter Jet', 45000, '2021-01-01'), (2, 'Tank', 75000, '2021-02-01');", 'sql': 'DELETE FROM MilitaryEquipmentSales WHERE sale_amount > 50000;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='produce the SQL. We need to identify and remove records where the sale_amount exceeds $50,000. To do this, we will use a DELETE statement with a WHERE clause that specifies the condition for deletion based on the sale_amount column.',
    sql='DELETE FROM MilitaryEquipmentSales WHERE sale_amount > 50000;'
), 1), (Example({'sql_prompt': 'What is the average number of visitor reviews for heritage sites in each category?', 'sql_context': "CREATE TABLE HeritageSitesReviews (ID INT, SiteName VARCHAR(100), Category VARCHAR(50), Reviews INT); INSERT INTO HeritageSitesReviews (ID, SiteName, Category, Reviews) VALUES (1, 'Machu Picchu', 'Archaeological', 5000); INSERT INTO HeritageSitesReviews (ID, SiteName, Category, Reviews) VALUES (2, 'Taj Mahal', 'Architectural', 8000);", 'sql': 'SELECT Category, AVG(Reviews) OVER (PARTITION BY Category) AS AvgReviews FROM HeritageSitesReviews;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='produce the SQL. We need to calculate the average number of reviews for each category present in the HeritageSitesReviews table. To do this, we will use the AVG() function on the Reviews column and group the results by Category.',
    sql='SELECT Category, AVG(Reviews) AS Average_Reviews FROM HeritageSitesReviews GROUP BY Category;'
), 1), (Example({'sql_prompt': 'What is the total revenue from ads targeting users interested in veganism in Q3 2022?', 'sql_context': 'CREATE TABLE ads (id INT, user INT, platform VARCHAR(50), target VARCHAR(50), start_date DATE, end_date DATE, revenue DECIMAL(10, 2));', 'sql': "SELECT SUM(revenue) FROM ads WHERE target = 'veganism' AND platform IN ('Facebook', 'Instagram') AND start_date BETWEEN '2022-07-01' AND '2022-09-30';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='produce the SQL. We need to filter ads that are targeted at users interested in veganism and have a start or end date within Q3 of 2022 (July, August, September). Then we sum up the revenue for these filtered records.',
    sql="SELECT SUM(revenue) FROM ads WHERE target = 'vegan' AND ((start_date >= '2022-07-01' AND start_date <= '2022-09-30') OR (end_date >= '2022-07-01' AND end_date <= '2022-09-30'));"
), 0), (Example({'sql_prompt': 'What is the minimum duration of workouts for members who joined in 2019, grouped by gender?', 'sql_context': 'CREATE TABLE Workout (WorkoutID INT PRIMARY KEY, MemberID INT, Duration INT, Date DATE); CREATE TABLE Member (MemberID INT PRIMARY KEY, Age INT, Gender VARCHAR(10), MembershipStart DATE);', 'sql': "SELECT Member.Gender, MIN(Workout.Duration) FROM Workout INNER JOIN Member ON Workout.MemberID = Member.MemberID WHERE Member.MembershipStart BETWEEN '2019-01-01' AND '2019-12-31' GROUP BY Member.Gender;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the SQL. We need to join the 'Workout' table with the 'Member' table on the MemberID column to access both workout duration and member gender information. Then, we filter for members who joined in 2019 using their MembershipStart date. Finally, we group the results by gender and select the minimum workout duration for each gender group.",
    sql='SELECT m.Gender, MIN(w.Duration) AS MinimumWorkoutDuration FROM Workout w JOIN Member m ON w.MemberID = m.MemberID WHERE EXTRACT(YEAR FROM m.MembershipStart) = 2019 GROUP BY m.Gender;'
), 1), (Example({'sql_prompt': 'How many employees were hired in each month of 2022?', 'sql_context': "CREATE TABLE Employees (EmployeeID INT, HireDate DATE); INSERT INTO Employees (EmployeeID, HireDate) VALUES (1, '2022-01-15'); INSERT INTO Employees (EmployeeID, HireDate) VALUES (2, '2022-02-01');", 'sql': "SELECT EXTRACT(MONTH FROM HireDate) AS Month, COUNT(*) AS NumberOfHires FROM Employees WHERE HireDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY Month;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Produce the SQL. We need to count the number of employees hired each month during 2022. To do this, we will extract the year and month from the HireDate column, filter for entries within the year 2022, group the results by these extracted values (year and month), and then count the occurrences in each group.',
    sql='SELECT EXTRACT(YEAR FROM HireDate) as hiring_year, EXTRACT(MONTH FROM HireDate) as hiring_month, COUNT(*) as number_of_hires FROM Employees WHERE EXTRACT(YEAR FROM HireDate) = 2\n\n---'
), 0), (Example({'sql_prompt': 'What is the maximum quantity of a single organic product delivered in the DELIVERY_RECORDS table?', 'sql_context': 'CREATE TABLE DELIVERY_RECORDS (id INT, supplier_id INT, product_id INT, is_organic BOOLEAN, quantity INT); INSERT INTO DELIVERY_RECORDS (id, supplier_id, product_id, is_organic, quantity) VALUES (1, 1, 1, true, 50), (2, 2, 2, true, 30);', 'sql': 'SELECT MAX(quantity) FROM DELIVERY_RECORDS WHERE is_organic = true;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the SQL. We need to find the maximum value of the 'quantity' column where the product is organic. This means we should filter the records based on the 'is_organic' column being true and then use the MAX() function to get the highest quantity among those filtered records.",
    sql='SELECT MAX(quantity) FROM DELIVERY_RECORDS WHERE is_organic = TRUE;'
), 1), (Example({'sql_prompt': 'Update the description of a sustainable urbanism initiative in the sustainable_urbanism_initiatives table', 'sql_context': "CREATE TABLE public.sustainable_urbanism_initiatives (id SERIAL PRIMARY KEY, initiative_name VARCHAR(255), initiative_description TEXT, city_name VARCHAR(255), state_name VARCHAR(255)); INSERT INTO public.sustainable_urbanism_initiatives (initiative_name, initiative_description, city_name, state_name) VALUES ('Green City Program', 'Promotes green spaces and sustainable transportation options in urban areas', 'Portland', 'Oregon'), ('EcoDistricts Initiative', 'Encourages sustainable community development in city neighborhoods', 'Vancouver', 'British Columbia');", 'sql': "WITH updated_initiative AS (UPDATE public.sustainable_urbanism_initiatives SET initiative_description = 'Promotes green spaces, sustainable transportation, and energy-efficient buildings in urban areas' WHERE initiative_name = 'Green City Program' RETURNING *) INSERT INTO public.sustainable_urbanism_initiatives (initiative_name, initiative_description, city_name, state_name) SELECT initiative_name, initiative_description, city_name, state_name FROM updated_initiative;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the sql. We need to update a specific initiative's description, so we will use an UPDATE statement targeting that particular row based on its unique identifier (id). Assuming we want to update the 'Green City Program' initiative with a new description:",
    sql="UPDATE public.sustainable_urbanism_initiatives SET initiative_description = 'Enhances urban greenery and promotes eco-friendly transportation methods in city centers' WHERE initiative_name = 'Green City Program';"
), 1), (Example({'sql_prompt': 'Calculate the year-over-year revenue growth for each restaurant.', 'sql_context': "CREATE TABLE restaurants (restaurant_id INT, restaurant_name VARCHAR(50), city VARCHAR(50), state VARCHAR(50), revenue FLOAT, year INT); INSERT INTO restaurants (restaurant_id, restaurant_name, city, state, revenue, year) VALUES (1, 'Restaurant A', 'City A', 'State A', 123456.78, 2021);", 'sql': 'SELECT restaurant_name, (revenue - LAG(revenue) OVER (PARTITION BY restaurant_name ORDER BY year)) / ABS(LAG(revenue) OVER (PARTITION BY restaurant_name ORDER BY year)) as revenue_growth FROM restaurants;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the SQL for calculating the year-over-year revenue growth for each restaurant. We need to compare the revenues of restaurants between consecutive years and calculate the percentage change. To do this, we can use a self-join on the 'restaurants' table where one instance represents the current year and the other represents the previous year. Then, we compute the revenue growth for each restaurant by subtracting the previous year's revenue from the current year's revenue, dividing by the previous year's revenue, and multiplying by 100 to get a percentage.",
    sql='SELECT r1.restaurant_name, (r1.revenue - r2.re'
), 0), (Example({'sql_prompt': 'What is the percentage of users in Canada who have used the hashtag #travel?', 'sql_context': "CREATE TABLE posts (id INT, user_id INT, hashtags TEXT); INSERT INTO posts (id, user_id, hashtags) VALUES (1, 1, '#travel'), (2, 1, '#food'), (3, 2, '#travel'), (4, 3, '#art'), (5, 4, '#music'); CREATE TABLE users (id INT, country VARCHAR(2)); INSERT INTO users (id, country) VALUES (1, 'CA'), (2, 'US'), (3, 'CA'), (4, 'DE');", 'sql': "SELECT 100.0 * COUNT(DISTINCT user_id) / (SELECT COUNT(DISTINCT user_id) FROM posts JOIN users ON posts.user_id = users.id WHERE users.country = 'CA') as percentage_travel FROM posts JOIN users ON posts.user_id = users.id WHERE hashtags LIKE '%#travel%' AND users.country = 'CA';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='produce the SQL. We need to join the `posts` table with the `users` table on user_id and id respectively to get the country information for each post. Then we filter posts that contain the hashtag #travel, count them, and calculate the percentage based on the total number of users in Canada.',
    sql="```sql\nWITH CanadianUsers AS (\n    SELECT COUNT(*) as total_users FROM users WHERE country = 'CA'\n),\nTravelPosts AS (\n    SELECT COUNT(DISTINCT p.user_id) as travelers\n    FROM posts p\n    JOIN users u ON p.user_id = u.id\n    WHERE hashtags"
), 0), (Example({'sql_prompt': 'What is the total number of points scored by each team in the NBA this season?', 'sql_context': "CREATE TABLE nba_teams (team_name TEXT, points_scored INT); INSERT INTO nba_teams (team_name, points_scored) VALUES ('Cavaliers', 8000), ('Warriors', 8500), ('Celtics', 7500);", 'sql': 'SELECT team_name, SUM(points_scored) FROM nba_teams GROUP BY team_name;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='produce the SQL. We need to calculate the total points scored for each team, so we will use a SELECT statement with GROUP BY on the team_name column and SUM() function to add up all the points scored by each team.',
    sql='SELECT team_name, SUM(points_scored) AS total_points FROM nba_teams GROUP BY team_name;'
), 1), (Example({'sql_prompt': 'What is the highest number of hat-tricks scored by a player in a single Bundesliga season?', 'sql_context': "CREATE TABLE german_teams (team_id INT, team_name VARCHAR(50)); INSERT INTO german_teams (team_id, team_name) VALUES (1, 'Bayern Munich'), (2, 'Borussia Dortmund'), (3, 'RB Leipzig'); CREATE TABLE german_matches (match_id INT, home_team_id INT, away_team_id INT, home_team_player_hat_tricks INT, away_team_player_hat_tricks INT); INSERT INTO german_matches (match_id, home_team_id, away_team_id, home_team_player_hat_tricks, away_team_player_hat_tricks) VALUES (1, 1, 2, 1, 0), (2, 2, 3, 0, 1), (3, 3, 1, 1, 0);", 'sql': 'SELECT MAX(home_team_player_hat_tricks + away_team_player_hat_tricks) AS max_hat_tricks FROM german_matches;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='produce the SQL. We need to find the highest number of hat-tricks scored by a player for each team across all matches and then determine the maximum value among those. To do this, we will sum up the home_team_player_hat_tricks and away_team_player_hat_tricks separately for each match, group them by the respective teams, and then find the highest total number of hat-tricks scored in a single season.',
    sql='WITH team_hat_tricks AS (\n    SELECT home_team_id AS team_id, SUM(home_team_player_hat_tricks) + SUM(away_team_player_hat_tricks'
), 0), (Example({'sql_prompt': "What is the average word count for articles published in the 'news' schema, grouped by author?", 'sql_context': "CREATE TABLE news.articles (article_id INT, title VARCHAR(100), author VARCHAR(100), word_count INT); INSERT INTO news.articles (article_id, title, author, word_count) VALUES (1, 'Article 1', 'John Doe', 500), (2, 'Article 2', 'Jane Doe', 600), (3, 'Article 3', 'John Doe', 700);", 'sql': 'SELECT author, AVG(word_count) FROM news.articles GROUP BY author;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='produce the SQL. We need to calculate the average word count for each author from the articles table within the news schema. To do this, we will group the results by the author and then use the AVG() function on the word_count column to find the average per author.',
    sql='SELECT author, AVG(word_count) AS avg_word_count FROM news.articles GROUP BY author;'
), 1), (Example({'sql_prompt': 'Show the total budget allocation for healthcare services in the top 5 states with the highest budget allocation', 'sql_context': 'CREATE TABLE healthcare_services (service_id INT, state_id INT, budget FLOAT);CREATE TABLE states (state_id INT, state_name TEXT);', 'sql': 'SELECT s.state_name, SUM(hs.budget)  FROM healthcare_services hs INNER JOIN states s ON hs.state_id = s.state_id GROUP BY s.state_name ORDER BY SUM(hs.budget) DESC LIMIT 5;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the SQL. We need to join the 'healthcare_services' table with the 'states' table on their common column 'state_id'. Then we will sum up the budget for each state, sort them in descending order based on this total budget, and limit our results to the top 5 states.",
    sql='SELECT s.state_name, SUM(hs.budget) as total_budget FROM healthcare_services hs JOIN states s ON hs.state_id = s.state_id GROUP BY s.state_name ORDER BY total_budget DESC LIMIT 5;'
), 1), (Example({'sql_prompt': 'Find the total volume of timber sold in 2021', 'sql_context': "CREATE TABLE forests (id INT, name VARCHAR(50), hectares DECIMAL(5,2), year_planted INT, PRIMARY KEY (id)); INSERT INTO forests (id, name, hectares, year_planted) VALUES (1, 'Forest A', 123.45, 1990), (2, 'Forest B', 654.32, 1985); CREATE TABLE timber_sales (id INT, forest_id INT, year INT, volume DECIMAL(10,2), PRIMARY KEY (id)); INSERT INTO timber_sales (id, forest_id, year, volume) VALUES (1, 1, 2021, 120.50), (2, 1, 2022, 150.75), (3, 2, 2021, 450.23), (4, 2, 2022, 520.89);", 'sql': 'SELECT SUM(ts.volume) FROM timber_sales ts INNER JOIN forests f ON ts.forest_id = f.id WHERE ts.year = 2021;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Produce the SQL query for finding the total volume of timber sold in 2021. We need to join the 'forests' table with the 'timber_sales' table on their respective forest ID fields, filter the results for sales made in the year 2021, and then sum up the volumes of timber sold during that year.",
    sql='SELECT SUM(volume) FROM timber_sales WHERE year = 2021;'
), 0), (Example({'sql_prompt': 'Who are the top 3 suppliers of recycled polyester?', 'sql_context': "CREATE TABLE suppliers (id INT, name VARCHAR(255), material VARCHAR(255)); INSERT INTO suppliers (id, name, material) VALUES (1, 'Supplier A', 'Recycled Polyester'), (2, 'Supplier B', 'Organic Cotton'), (3, 'Supplier C', 'Recycled Polyester'), (4, 'Supplier D', 'Hemp'), (5, 'Supplier E', 'Recycled Polyester');", 'sql': "SELECT name FROM suppliers WHERE material = 'Recycled Polyester' GROUP BY name ORDER BY COUNT(*) DESC LIMIT 3;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Produce the SQL. We need to identify suppliers that provide recycled polyester and then rank them based on how many times they appear as a supplier of this material, selecting only the top 3.',
    sql="SELECT name FROM suppliers WHERE material = 'Recycled Polyester' GROUP BY name ORDER BY COUNT(*) DESC LIMIT 3;"
), 1), (Example({'sql_prompt': "How many donors have donated more than $100 in the 'Donations' table?", 'sql_context': "CREATE TABLE Donations (DonorID INT, DonationDate DATE, Amount DECIMAL(10, 2)); INSERT INTO Donations (DonorID, DonationDate, Amount) VALUES (1, '2022-02-01', 120.00), (2, '2022-01-15', 75.00), (3, '2022-03-05', 150.00);", 'sql': 'SELECT COUNT(*) FROM Donations WHERE Amount > 100;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='produce the SQL query that will give us the number of donors who have donated more than $100. We need to filter out the donations where the amount is greater than $100 and then count the distinct DonorID values that meet this criterion.',
    sql='SELECT COUNT(DISTINCT DonorID) FROM Donations WHERE Amount > 100;'
), 1), (Example({'sql_prompt': "Update the 'Angkor Wat' excavation to have a start date of 1300-01-01.", 'sql_context': "CREATE TABLE ExcavationSites (SiteID INT PRIMARY KEY, Name VARCHAR(255), Country VARCHAR(255), StartDate DATE, EndDate DATE); INSERT INTO ExcavationSites (SiteID, Name, Country, StartDate, EndDate) VALUES (5, 'Angkor Wat', 'Cambodia', '1860-01-01', '1860-05-01');", 'sql': "UPDATE ExcavationSites SET StartDate = '1300-01-01' WHERE Name = 'Angkor Wat';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='update the start date for a specific excavation site. We need to identify the correct record and then modify its StartDate value accordingly.',
    sql="UPDATE ExcavationSites SET StartDate = '1300-01-01' WHERE Name = 'Angkor Wat';"
), 1), (Example({'sql_prompt': 'Calculate the total CO2 emissions (in metric tons) per capita for each country in the population_data and carbon_emissions tables.', 'sql_context': 'CREATE TABLE population_data (country VARCHAR(50), year INT, population INT); CREATE TABLE carbon_emissions (country VARCHAR(50), year INT, co2_emissions FLOAT);', 'sql': 'SELECT p.country, AVG(co2_emissions/population*1000000) as co2_emissions_per_capita FROM population_data p JOIN carbon_emissions c ON p.country = c.country GROUP BY p.country;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='produce the SQL. We need to join both tables on country and year columns since we want to calculate emissions per capita for each country. Then, we will divide the total CO2 emissions by the population of that country to get the per capita value.',
    sql='SELECT p.country, p.year, (c.co2_emissions / p.population) AS co2_per_capita FROM carbon_emissions c JOIN population_data p ON c.country = p.country AND c.year = p.year;'
), 1), (Example({'sql_prompt': "How many rural infrastructure projects were completed in '2022' in the 'Asia-Pacific' region?", 'sql_context': "CREATE TABLE rural_infrastructure(id INT, project TEXT, location TEXT, completion_year INT); INSERT INTO rural_infrastructure (id, project, location, completion_year) VALUES (1, 'Rural Road Project', 'Asia-Pacific', 2022);", 'sql': "SELECT COUNT(*) FROM rural_infrastructure WHERE location = 'Asia-Pacific' AND completion_year = 2022;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the SQL. We need to count the number of projects that match both the year and region criteria specified in the prompt. The completion_year should be equal to '2022', and the location should include 'Asia-Pacific'.",
    sql="SELECT COUNT(*) FROM rural_infrastructure WHERE completion_year = 2022 AND location LIKE '%Asia-Pacific%';"
), 1), (Example({'sql_prompt': "What is the average horsepower of luxury vehicles in the 'GreenCar' database produced after 2017?", 'sql_context': 'CREATE TABLE LuxuryVehicles (Id INT, Make VARCHAR(50), Model VARCHAR(50), Year INT, Horsepower INT);', 'sql': 'SELECT AVG(Horsepower) FROM LuxuryVehicles WHERE Year > 2017;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='produce the SQL. We need to filter the vehicles based on their production year being after 2017 and classify them as luxury vehicles. Then we will calculate the average horsepower for these filtered records.',
    sql='SELECT AVG(horsepower) FROM LuxuryVehicles WHERE Year > 2017;'
), 1), (Example({'sql_prompt': 'What is the maximum response time for emergency calls in the city of Los Angeles?', 'sql_context': 'CREATE TABLE emergency_calls (id INT, city VARCHAR(20), response_time INT);', 'sql': "SELECT MAX(response_time) FROM emergency_calls WHERE city = 'Los Angeles';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the SQL. We need to filter records for the city 'Los Angeles', then find the maximum value of the 'response_time' column from those filtered results.",
    sql="SELECT MAX(response_time) FROM emergency_calls WHERE city = 'Los Angeles';"
), 1), (Example({'sql_prompt': 'What is the maximum loan amount for socially responsible loans in the Asia-Pacific region?', 'sql_context': "CREATE TABLE socially_responsible_loans (loan_id INT, region VARCHAR(20), loan_amount DECIMAL(10,2)); INSERT INTO socially_responsible_loans (loan_id, region, loan_amount) VALUES (101, 'Asia-Pacific', 50000), (102, 'Europe', 30000), (103, 'Asia-Pacific', 70000);", 'sql': "SELECT MAX(srl.loan_amount) FROM socially_responsible_loans srl WHERE srl.region = 'Asia-Pacific';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the SQL. We need to filter the loans based on the region being Asia-Pacific and then find the maximum loan amount within this subset of data. The appropriate aggregate function for finding the maximum value is MAX(). Therefore, we will use a WHERE clause to specify our condition (region = 'Asia-Pacific') and apply the MAX() function to the loan_amount column.",
    sql="SELECT MAX(loan_amount) FROM socially_responsible_loans WHERE region = 'Asia-Pacific';"
), 1), (Example({'sql_prompt': 'What is the maximum number of years a traditional art form has been preserved in each country?', 'sql_context': "CREATE TABLE countries (id INT, name TEXT); INSERT INTO countries (id, name) VALUES (1, 'Nigeria'), (2, 'Brazil'); CREATE TABLE art_forms (id INT, country_id INT, name TEXT, year_preserved INT); INSERT INTO art_forms (id, country_id, name, year_preserved) VALUES (1, 1, 'Tie-dye', 500), (2, 1, 'Batik', 1000), (3, 2, 'Capoeira', 400);", 'sql': 'SELECT c.name, MAX(af.year_preserved) FROM countries c JOIN art_forms af ON c.id = af.country_id GROUP BY c.id;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='produce the SQL. We need to find the maximum number of years each traditional art form has been preserved within a country. This requires us to calculate the difference between the current year and the year_preserved for each art form, then determine the maximum value for these differences per country.',
    sql='SELECT c.name AS country_name, MAX(EXTRACT(YEAR FROM CURRENT_DATE) - af.year_preserved) AS max_years_preserved FROM countries c JOIN art_forms af ON c.id = af.country_id GROUP BY c.name;'
), 1), (Example({'sql_prompt': 'What is the maximum hourly wage for each labor category in the construction industry?', 'sql_context': 'CREATE TABLE labor_statistics (id INT, industry VARCHAR(255), category VARCHAR(255), title VARCHAR(255), hourly_wage DECIMAL(5,2));', 'sql': "SELECT industry, category, MAX(hourly_wage) as max_hourly_wage FROM labor_statistics WHERE industry = 'construction' GROUP BY industry, category;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the SQL. We need to group the data by labor category within the construction industry and then find the maximum hourly wage for each of these groups. This will involve filtering the table based on the 'industry' column, grouping the results by 'category', and using the MAX() function to get the highest hourly_wage in each group.",
    sql="SELECT category, MAX(hourly_wage) AS max_hourly_wage FROM labor_statistics WHERE industry = 'Construction' GROUP BY category;"
), 1), (Example({'sql_prompt': 'List all the drought-impacted counties in Texas in 2018.', 'sql_context': "CREATE TABLE drought_impact(county VARCHAR(20), state VARCHAR(20), year INT, impacted BOOLEAN); INSERT INTO drought_impact(county, state, year, impacted) VALUES ('Harris', 'Texas', 2015, true), ('Harris', 'Texas', 2016, true), ('Harris', 'Texas', 2017, true), ('Harris', 'Texas', 2018, true), ('Bexar', 'Texas', 2015, false), ('Bexar', 'Texas', 2016, false), ('Bexar', 'Texas', 2017, false), ('Bexar', 'Texas', 2018, false);", 'sql': "SELECT county FROM drought_impact WHERE state = 'Texas' AND year = 2018 AND impacted = true;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Produce the SQL. We need to filter the records for drought-impacted counties specifically in Texas and within the year 2018. The query should select distinct county names that meet these criteria.',
    sql="SELECT DISTINCT county FROM drought_impact WHERE state = 'Texas' AND year = 2018 AND impacted = TRUE;"
), 1), (Example({'sql_prompt': 'Find the top 3 genres with the highest revenue in 2022 for streaming services in the USA.', 'sql_context': "CREATE TABLE streaming_services (service_id INT, service_name VARCHAR(255), revenue DECIMAL(10,2)); INSERT INTO streaming_services (service_id, service_name, revenue) VALUES (1, 'StreamingCo', 5000000.00); CREATE TABLE genre_sales (sale_id INT, service_id INT, genre VARCHAR(255), sales DECIMAL(10,2)); INSERT INTO genre_sales (sale_id, service_id, genre, sales) VALUES (1, 1, 'Rock', 150000.00);", 'sql': "SELECT genre, SUM(sales) as total_sales FROM genre_sales gs JOIN streaming_services s ON gs.service_id = s.service_id WHERE s.service_country = 'USA' AND s.service_year = 2022 GROUP BY genre ORDER BY total_sales DESC LIMIT 3;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the SQL query for finding the top 3 genres with the highest revenue in 2022 for streaming services in the USA. We need to join the 'streaming_services' and 'genre_sales' tables on their respective service ID fields, filter by the year of sales (assuming there is a date field or we can infer from context), sum up the revenue per genre, order the results by total revenue in descending order, and limit the output to the top 3 genres.",
    sql='SELECT gs.genre, SUM(gs.sales) as total_revenue FROM genre_sales gs JOIN streaming_services ss ON gs.service'
), 0), (Example({'sql_prompt': "List all unique fields from the 'geology' and 'infrastructure' tables.", 'sql_context': 'CREATE TABLE geology (well_id INT, rock_type VARCHAR(50)); CREATE TABLE infrastructure (well_id INT, platform_type VARCHAR(50));', 'sql': "SELECT field FROM (SELECT 'geology' as table_name, column_name as field FROM information_schema.columns WHERE table_name = 'geology' UNION ALL SELECT 'infrastructure' as table_name, column_name as field FROM information_schema.columns WHERE table_name = 'infrastructure') as subquery;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='produce the SQL for listing all unique fields from both tables. We need to identify the columns that are present in each table and then combine them into a single list without duplicates. Since we want only the field names, not their values or any other data, we will use the `UNION` operator to merge the column lists from both tables while removing duplicates.',
    sql="SELECT 'rock_type' AS Field FROM geology UNION SELECT 'platform_type' AS Field FROM infrastructure;"
), 0), (Example({'sql_prompt': 'Calculate the percentage of total Europium production for each country.', 'sql_context': 'CREATE TABLE europium_production (country VARCHAR(50), quantity INT);', 'sql': 'SELECT country, quantity * 100.0 / SUM(quantity) OVER (PARTITION BY NULL) AS percentage FROM europium_production;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the SQL query that calculates the percentage of total Europium production for each country. We need to find out the total production across all countries first, and then calculate each country's share as a percentage of this total. To do this, we can use a subquery or a common table expression (CTE) to get the overall sum, and then divide each country's production by this number to get their respective percentages.",
    sql='```sql\nWITH TotalProduction AS (\n    SELECT SUM(quantity) as total_quantity FROM europium_production\n)\nSELECT \n    ep.country,\n    ep.quantity,\n    ROUND((ep.quantity / tp.'
), 0), (Example({'sql_prompt': 'Find the mobile subscribers with consecutive speed drops greater than 25% for the last 3 months, ordered by subscription IDs.', 'sql_context': 'CREATE TABLE mobile_usage_detailed (subscriber_id INT, month INT, speed FLOAT); INSERT INTO mobile_usage_detailed (subscriber_id, month, speed) VALUES (1, 1, 100), (1, 2, 80), (1, 3, 70), (2, 1, 200), (2, 2, 180), (2, 3, 160), (3, 1, 150), (3, 2, 130), (3, 3, 110);', 'sql': 'SELECT subscriber_id, speed, month FROM (SELECT subscriber_id, speed, month, LAG(speed, 1) OVER (PARTITION BY subscriber_id ORDER BY month) as prev_speed, LAG(speed, 2) OVER (PARTITION BY subscriber_id ORDER BY month) as prev_prev_speed FROM mobile_usage_detailed) t WHERE t.speed < 0.75 * t.prev_speed AND t.speed < 0.75 * t.prev_prev_speed ORDER BY subscriber_id;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the SQL. We need to identify subscribers who have experienced a speed drop greater than 25% for three consecutive months. To do this, we will compare each month's speed with the previous month and check if the decrease is more than 25%. Then, we will filter out those records that meet this condition for all three months in sequence.",
    sql='WITH SpeedDrops AS (\n    SELECT\n        subscriber_id,\n        month,\n        LAG(speed) OVER (PARTITION BY subscriber_id ORDER BY month) as prev_month_speed,\n        speed\n    FROM mobile_usage_detailed\n), ConsecutiveSpeedDrops AS ('
), 0), (Example({'sql_prompt': 'What is the distribution of AI safety research topics by year?', 'sql_context': "CREATE TABLE if not exists ai_safety_research (year INT, topic VARCHAR(255)); INSERT INTO ai_safety_research (year, topic) VALUES (2018, 'Explainable AI'), (2019, 'Algorithmic fairness'), (2020, 'AI safety'), (2021, 'Robust AI'), (2022, 'AI ethics');", 'sql': 'SELECT year, topic, COUNT(*) OVER (PARTITION BY year) as research_count FROM ai_safety_research ORDER BY year;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='produce the SQL. We need to count how many research topics are associated with each year and then group them accordingly. This will give us an understanding of which years had more diverse AI safety research topics or if certain topics were prevalent during specific years.',
    sql='SELECT year, COUNT(topic) as topic_count FROM ai_safety_research GROUP BY year ORDER BY year;'
), 1), (Example({'sql_prompt': "How many forest management practices are recorded in the 'tropical_forests'?", 'sql_context': "CREATE TABLE forest_management (id INT, forest_type VARCHAR(50), practice_count INT); INSERT INTO forest_management (id, forest_type, practice_count) VALUES (1, 'Tropical Forests', 45); INSERT INTO forest_management (id, forest_type, practice_count) VALUES (2, 'Temperate Forests', 34);", 'sql': "SELECT practice_count FROM forest_management WHERE forest_type = 'Tropical Forests';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the SQL. We need to count the number of records that have 'Tropical Forests' as their forest type in the 'forest_management' table. This will give us the total number of forest management practices recorded for tropical forests.",
    sql="SELECT COUNT(*) FROM forest_management WHERE forest_type = 'Tropical Forests';"
), 1), (Example({'sql_prompt': 'What is the distribution of lifelong learning course enrollments by age group, in total?', 'sql_context': 'CREATE TABLE lifelong_learning (student_id INT, age_group VARCHAR(255), course_id INT); CREATE TABLE courses (course_id INT, course_name VARCHAR(255));', 'sql': 'SELECT l.age_group, COUNT(l.course_id) FROM lifelong_learning l INNER JOIN courses c ON l.course_id = c.course_id GROUP BY l.age_group;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the SQL. We need to join the 'lifelong_learning' table with the 'courses' table on the 'course_id' field to get information about each course enrollment. Then, we will group the results by 'age_group' and count the number of enrollments in each age group.",
    sql='SELECT ll.age_group, COUNT(*) as total_enrollments FROM lifelong_learning ll JOIN courses c ON ll.course_id = c.course_id GROUP BY ll.age_group;'
), 1), (Example({'sql_prompt': "Insert new records into the Employee table with the following data: EmployeeID 3, FirstName 'Mike', LastName 'Smith', Department 'Environment'.", 'sql_context': 'CREATE TABLE Employee (EmployeeID INT, FirstName VARCHAR(50), LastName VARCHAR(50), Department VARCHAR(50));', 'sql': "INSERT INTO Employee (EmployeeID, FirstName, LastName, Department) VALUES (3, 'Mike', 'Smith', 'Environment');"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Insert new records into the Employee table. We need to use an INSERT INTO statement with the provided values for each column. The SQL query will look like this:',
    sql="INSERT INTO Employee (EmployeeID, FirstName, LastName, Department) VALUES (3, 'Mike', 'Smith', 'Environment');"
), 1), (Example({'sql_prompt': 'Which cosmetic brands have the highest average customer rating?', 'sql_context': "CREATE TABLE brand (id INT, name VARCHAR(255), avg_rating FLOAT); CREATE TABLE rating (brand_id INT, rating FLOAT); INSERT INTO brand (id, name, avg_rating) VALUES (1, 'Lush', 4.2), (2, 'The Body Shop', 4.1), (3, 'Sephora', 4.3); INSERT INTO rating (brand_id, rating) VALUES (1, 4.5), (1, 4.0), (2, 4.1), (2, 4.2), (3, 4.4), (3, 4.3);", 'sql': 'SELECT b.name, AVG(r.rating) as avg_rating FROM brand b JOIN rating r ON b.id = r.brand_id GROUP BY b.name ORDER BY avg_rating DESC;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the SQL query that will give us the cosmetic brands with the highest average customer rating. We need to join the 'brand' and 'rating' tables on their respective brand IDs, calculate the average rating for each brand based on all its ratings, and then sort the results by this calculated average in descending order to get the highest rated brands at the top.",
    sql='```sql\nSELECT b.name, AVG(r.rating) as avg_customer_rating\nFROM brand b\nJOIN rating r ON b.id = r.brand_id\nGROUP BY b.name\nORDER BY avg_customer_rating DESC;\n```'
), 1), (Example({'sql_prompt': 'How many unique volunteers worked on projects in each cause area?', 'sql_context': "CREATE TABLE volunteers (id INT, name VARCHAR(30), cause_area VARCHAR(20)); INSERT INTO volunteers (id, name, cause_area) VALUES (1, 'Bob', 'children'), (2, 'Alice', 'children'), (3, 'Charlie', 'health');", 'sql': 'SELECT cause_area, COUNT(DISTINCT name) FROM volunteers GROUP BY cause_area;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Produce the SQL. We need to count the number of unique volunteers for each cause area. To do this, we will use the COUNT function with DISTINCT on the name column and group the results by the cause_area column.',
    sql='SELECT cause_area, COUNT(DISTINCT name) AS unique_volunteers FROM volunteers GROUP BY cause_area;'
), 1), (Example({'sql_prompt': 'Who were the top 3 content creators in terms of likes received on their posts in January 2022?', 'sql_context': "CREATE SCHEMA content; CREATE TABLE creators(creator_id INT, name VARCHAR(255), total_likes INT); INSERT INTO creators (creator_id, name, total_likes) VALUES (1, 'Alice', 5000); INSERT INTO creators (creator_id, name, total_likes) VALUES (2, 'Bob', 7000);", 'sql': 'SELECT name, SUM(total_likes) AS total_likes_january FROM content.creators WHERE MONTH(created_date) = 1 GROUP BY name ORDER BY total_likes_january DESC LIMIT 3;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the SQL. We need to identify the top three content creators based on the number of likes they received for their posts during January 2022. To do this, we will filter records from a hypothetical table that contains post details such as `creator_id`, `likes`, and `post_date`. We'll assume there is a table named `posts` with these columns. The SQL query should select the creators' names and their total likes for January 2022, then order the results by total likes in descending order to get the top three.",
    sql='SELECT c.name, SUM(p.likes) as total_likes FROM content'
), 0), (Example({'sql_prompt': "Update records in the 'Volunteers' table where the volunteer's skill level is 'Beginner' and change it to 'Intermediate'", 'sql_context': 'CREATE TABLE Volunteers (id INT PRIMARY KEY, volunteer_name VARCHAR(255), skill_level VARCHAR(255), last_volunteered DATE);', 'sql': "UPDATE Volunteers SET skill_level = 'Intermediate' WHERE skill_level = 'Beginner';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the SQL. We need to identify all records where the `skill_level` is 'Beginner'. Then, we will update those specific records to change their `skill_level` to 'Intermediate'. To do this, we use an UPDATE statement with a WHERE clause that specifies our condition.",
    sql="UPDATE Volunteers SET skill_level = 'Intermediate' WHERE skill_level = 'Beginner';"
), 1), (Example({'sql_prompt': 'Identify the number of farmers involved in urban agriculture initiatives in California and New York in 2019.', 'sql_context': "CREATE TABLE Urban_Agriculture (Farmer_ID INT, State VARCHAR(20), Initiative VARCHAR(20), Year INT); INSERT INTO Urban_Agriculture (Farmer_ID, State, Initiative, Year) VALUES (101, 'California', 'Community_Garden', 2019), (102, 'California', 'Rooftop_Farming', 2019), (103, 'New_York', 'Community_Garden', 2019);", 'sql': "SELECT COUNT(DISTINCT Farmer_ID) FROM Urban_Agriculture WHERE State IN ('California', 'New York') AND Year = 2019 AND Initiative IN ('Community_Garden', 'Rooftop_Farming');"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the SQL. We need to count the number of unique farmers who are involved in urban agriculture initiatives specifically in California and New York for the year 2019. To do this, we will filter the records based on the 'State' and 'Year' columns and then use COUNT(DISTINCT) to ensure that each farmer is only counted once regardless of how many initiatives they are involved with.",
    sql="SELECT COUNT(DISTINCT Farmer_ID) FROM Urban_Agriculture WHERE State IN ('California', 'New_York') AND Year = 2019;"
), 0), (Example({'sql_prompt': "Update the accommodation type for a student with a StudentID of 2 from 'Assistive Listening Devices' to 'Sign Language Interpretation'.", 'sql_context': "CREATE TABLE StudentAccommodations (StudentID INT, StudentName VARCHAR(255), DisabilityType VARCHAR(255), AccommodationType VARCHAR(255), GraduationYear INT); INSERT INTO StudentAccommodations (StudentID, StudentName, DisabilityType, AccommodationType, GraduationYear) VALUES (1, 'John Doe', 'Visual Impairment', 'Sign Language Interpretation', 2018), (2, 'Jane Smith', 'Hearing Impairment', 'Assistive Listening Devices', NULL), (3, 'Michael Johnson', 'Mobility Impairment', 'Assistive Technology', 2019), (4, 'Sara Johnson', 'Physical Disability', 'Mobility Assistance', 2022);", 'sql': "UPDATE StudentAccommodations SET AccommodationType = 'Sign Language Interpretation' WHERE StudentID = 2;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Update the accommodation type for a student with a StudentID of 2 from 'Assistive Listening Devices' to 'Sign Language Interpretation'. We need to identify the record that matches the given StudentID and then change the AccommodationType field accordingly.",
    sql="UPDATE StudentAccommodations SET AccommodationType = 'Sign Language Interpretation' WHERE StudentID = 2;"
), 1), (Example({'sql_prompt': 'What is the minimum square footage of an inclusive housing unit in the city of Miami?', 'sql_context': "CREATE TABLE housing (id INT, city VARCHAR(20), size INT, inclusive BOOLEAN); INSERT INTO housing (id, city, size, inclusive) VALUES (1, 'Miami', 800, TRUE), (2, 'Miami', 1000, FALSE), (3, 'Miami', 1200, TRUE);", 'sql': "SELECT MIN(size) FROM housing WHERE city = 'Miami' AND inclusive = TRUE;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the SQL. We need to find the smallest size of a housing unit that is marked as inclusive within Miami city limits. To do this, we will filter the records for those where 'inclusive' is true and 'city' is 'Miami'. Then, we will select the minimum value from the 'size' column for these filtered results.",
    sql="SELECT MIN(size) FROM housing WHERE inclusive = TRUE AND city = 'Miami';"
), 1), (Example({'sql_prompt': 'How many works were exhibited in the year 1950?', 'sql_context': "CREATE TABLE exhibitions (exhibition_id INT PRIMARY KEY, exhibition_name TEXT, year INT, location TEXT);CREATE TABLE exhibits (exhibit_id INT PRIMARY KEY, work_id INT, exhibition_id INT, FOREIGN KEY (work_id) REFERENCES works(work_id), FOREIGN KEY (exhibition_id) REFERENCES exhibitions(exhibition_id));INSERT INTO exhibitions (exhibition_id, exhibition_name, year, location) VALUES (1, 'Documenta', 1950, 'Kassel, Germany'); INSERT INTO exhibits (exhibit_id, work_id, exhibition_id) VALUES (1, 1, 1);", 'sql': 'SELECT COUNT(*) FROM exhibits e JOIN exhibitions ex ON e.exhibition_id = ex.exhibition_id WHERE ex.year = 1950;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Produce the SQL. We need to count the number of works that were part of an exhibition in a specific year, which is 1950 in this case. To do so, we will join the 'exhibitions' table with the 'exhibits' table on their common column 'exhibition_id'. Then, we filter the results to include only those exhibitions that took place in the year 1950 and count the distinct works displayed during these exhibitions.",
    sql='SELECT COUNT(DISTINCT work_id) FROM exhibits JOIN exhibitions ON exhibits.exhibition_id = exhibitions.exhibition_id WHERE year = 1950;'
), 0), (Example({'sql_prompt': 'What is the total number of articles written by each author in each region?', 'sql_context': "CREATE TABLE authors (id INT, name TEXT); CREATE TABLE regions (id INT, name TEXT); CREATE TABLE articles (id INT, title TEXT, content TEXT, author_id INT, region_id INT); INSERT INTO authors (id, name) VALUES (1, 'John Doe'), (2, 'Jane Smith'); INSERT INTO regions (id, name) VALUES (1, 'North'), (2, 'South'), (3, 'East'), (4, 'West'); INSERT INTO articles (id, title, content, author_id, region_id) VALUES (1, 'Article 1', 'Content 1', 1, 1), (2, 'Article 2', 'Content 2', 2, 2), (3, 'Article 3', 'Content 3', 1, 3), (4, 'Article 4', 'Content 4', 2, 4);", 'sql': 'SELECT authors.name, regions.name, COUNT(articles.id) FROM authors INNER JOIN articles ON authors.id = articles.author_id INNER JOIN regions ON regions.id = articles.region_id GROUP BY authors.name, regions.name;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Produce the SQL. We need to join the authors and articles tables on author_id to get the names of the authors along with their article IDs. Then we also need to join the regions table on region_id to include the name of each region where an article was written. After joining these tables, we can group by both author's name and region's name to count the total number of articles for each combination.",
    sql='SELECT a.name AS author_name, r.name AS region_name, COUNT(*) AS total_articles FROM authors a JOIN articles art ON a.id = art.author_id JOIN regions r ON art.region_id = r.id GROUP BY author_name, region'
), 0), (Example({'sql_prompt': 'How many tunnels in Washington state were constructed after 2010?', 'sql_context': "CREATE TABLE tunnels (id INT, name TEXT, state TEXT, build_year INT); INSERT INTO tunnels (id, name, state, build_year) VALUES (1, 'WA-1 Underpass', 'WA', 2012);", 'sql': "SELECT COUNT(*) FROM tunnels WHERE state = 'WA' AND build_year > 2010;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the SQL. We need to count the number of tunnels that are located in Washington state and were built after the year 2010. To do this, we will use a WHERE clause to filter out the records based on the 'state' and 'build_year' columns.",
    sql="SELECT COUNT(*) FROM tunnels WHERE state = 'WA' AND build_year > 2010;"
), 1), (Example({'sql_prompt': 'List the top 5 models with the highest explainability scores and their development team names.', 'sql_context': 'CREATE TABLE ModelExplainabilityScores (ModelID INT, ExplainabilityScore INT, TeamID INT); CREATE TABLE TeamNames (TeamID INT, TeamName VARCHAR(50));', 'sql': 'SELECT ModelExplainabilityScores.ModelID, MAX(ModelExplainabilityScores.ExplainabilityScore) AS MaxExplainabilityScore, TeamNames.TeamName FROM ModelExplainabilityScores INNER JOIN TeamNames ON ModelExplainabilityScores.TeamID = TeamNames.TeamID GROUP BY ModelExplainabilityScores.TeamID ORDER BY MaxExplainabilityScore DESC, TeamNames.TeamName DESC LIMIT 5;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the SQL. We need to join the two tables on their common column 'TeamID', then sort the results by 'ExplainabilityScore' in descending order and limit the output to 5 rows to get the top 5 models with the highest scores along with their development team names.",
    sql='SELECT me.ModelID, tn.TeamName, me.ExplainabilityScore FROM ModelExplainabilityScores me JOIN TeamNames tn ON me.TeamID = tn.TeamID ORDER BY me.ExplainabilityScore DESC LIMIT 5;'
), 0), (Example({'sql_prompt': 'How many renewable energy power plants are there in Texas?', 'sql_context': "CREATE TABLE power_plants (state VARCHAR(255), source_type VARCHAR(255), count INT); INSERT INTO power_plants (state, source_type, count) VALUES ('Texas', 'Wind', 45), ('Texas', 'Solar', 25), ('Texas', 'Hydro', 10);", 'sql': "SELECT SUM(count) FROM power_plants WHERE state = 'Texas';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='produce the SQL. We need to filter the power plants based on their location, which is Texas, and then count how many of them are categorized as renewable energy sources. Renewable energy sources typically include wind, solar, hydro, geothermal, and biomass. In this context, we have data for wind, solar, and hydro power plants in Texas.',
    sql="SELECT COUNT(*) FROM power_plants WHERE state = 'Texas' AND source_type IN ('Wind', 'Solar', 'Hydro');"
), 1), (Example({'sql_prompt': 'Find the top 5 countries with the lowest financial capability scores in Europe.', 'sql_context': 'CREATE TABLE financial_capability (id INT, country VARCHAR(255), score INT);', 'sql': "SELECT country, score FROM (SELECT country, score, ROW_NUMBER() OVER (ORDER BY score ASC) rn FROM financial_capability WHERE region = 'Europe') t WHERE rn <= 5;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='produce the SQL query for finding the top 5 countries with the lowest financial capability scores in Europe. We need to filter the results to include only European countries and then sort them based on their financial capability scores in ascending order, limiting the output to the first five entries.',
    sql='SELECT country, score FROM financial_capability WHERE country IN (SELECT name FROM european_countries) ORDER BY score ASC LIMIT 5;'
), 1), (Example({'sql_prompt': 'What is the correlation between climate change and biodiversity in the Arctic?', 'sql_context': "CREATE TABLE Climate_Change (id INT PRIMARY KEY, year INT, temperature FLOAT, region VARCHAR(50)); CREATE TABLE Biodiversity (id INT, year INT, species_count INT, region VARCHAR(50), climate_id INT, FOREIGN KEY (climate_id) REFERENCES Climate_Change(id)); INSERT INTO Climate_Change (id, year, temperature, region) VALUES (1, 2000, -10.0, 'Arctic'), (2, 2010, -9.5, 'Arctic'); INSERT INTO Biodiversity (id, year, species_count, region, climate_id) VALUES (1, 2000, 100, 'Arctic', 1), (2, 2010, 105, 'Arctic', 2);", 'sql': "SELECT Climate_Change.year, Climate_Change.temperature, Biodiversity.species_count FROM Climate_Change INNER JOIN Biodiversity ON Climate_Change.id = Biodiversity.climate_id WHERE Climate_Change.region = 'Arctic';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='produce the SQL. We need to join both tables on their common fields which are `year` and `region`. Then we can calculate the correlation between temperature (as a proxy for climate change) and species_count (as a measure of biodiversity).',
    sql="SELECT CORR(C.temperature, B.species_count) AS correlation FROM Climate_Change C JOIN Biodiversity B ON C.year = B.year AND C.region = B.region WHERE C.region = 'Arctic';"
), 1), (Example({'sql_prompt': 'What is the average budget allocated for ethical AI research by country?', 'sql_context': "CREATE TABLE Country (CountryID INT PRIMARY KEY, CountryName VARCHAR(100), Budget DECIMAL(10,2)); INSERT INTO Country (CountryID, CountryName, Budget) VALUES (1, 'USA', 5000000.00), (2, 'Canada', 3000000.00), (3, 'Mexico', 1000000.00);", 'sql': 'SELECT AVG(Budget) as AvgBudget, CountryName FROM Country GROUP BY CountryName;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='produce the SQL query for this prompt. We need to calculate the average budget allocated specifically for ethical AI research and group it by country. Assuming there is a column that specifies whether the budget is for ethical AI research, we would use an aggregate function AVG() on the Budget column while grouping the results by CountryName.',
    sql="SELECT CountryName, AVG(Budget) AS average_ethical_ai_budget FROM Country WHERE budget_type = 'EthicalAI' GROUP BY CountryName;"
), 1), (Example({'sql_prompt': 'What is the total fare collected for each train line?', 'sql_context': "CREATE TABLE train_lines (line_id INT, line_name TEXT); CREATE TABLE fares (fare_id INT, line_id INT, fare DECIMAL); INSERT INTO train_lines VALUES (1, 'Line 1'), (2, 'Line 2'), (3, 'Line 3'); INSERT INTO fares VALUES (1, 1, 3.50), (2, 1, 3.50), (3, 2, 4.25), (4, 3, 5.00), (5, 3, 5.00);", 'sql': 'SELECT train_lines.line_name, SUM(fares.fare) AS total_fare FROM train_lines INNER JOIN fares ON train_lines.line_id = fares.line_id GROUP BY train_lines.line_id;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the SQL query for calculating the total fare collected for each train line. We need to join the 'train_lines' table with the 'fares' table on their respective line identifiers (line_id). After joining, we will group the results by the line name and sum up all the fares associated with each line.",
    sql='SELECT tl.line_name, SUM(f.fare) AS total_fare_collected FROM train_lines tl JOIN fares f ON tl.line_id = f.line_id GROUP BY tl.line_name;'
), 1), (Example({'sql_prompt': 'What is the total revenue for cosmetics products that are not cruelty-free?', 'sql_context': 'CREATE TABLE product (product_id INT, name TEXT, price FLOAT, cruelty_free BOOLEAN); CREATE TABLE sales (sale_id INT, product_id INT, quantity INT);', 'sql': 'SELECT SUM(price * quantity) FROM product INNER JOIN sales ON product.product_id = sales.product_id WHERE cruelty_free = FALSE;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the SQL. We need to join the 'product' table with the 'sales' table on their respective product IDs. Then we filter out the products that are cruelty-free and calculate the total revenue, which is the sum of price multiplied by quantity for each sale.",
    sql='SELECT SUM(p.price * s.quantity) AS total_revenue FROM product p JOIN sales s ON p.product_id = s.product_id WHERE p.cruelty_free = FALSE;'
), 1), (Example({'sql_prompt': 'What is the total cost of permits for projects with permit numbers greater than 700?', 'sql_context': "CREATE TABLE permit_data (id INT, project VARCHAR(50), permit_number INT, start_date DATE, permit_cost DECIMAL(10,2)); INSERT INTO permit_data (id, project, permit_number, start_date, permit_cost) VALUES (1, 'Office Building', 450, '2019-12-20', 850.00), (2, 'Residential Apartments', 751, '2021-03-01', 1200.50), (3, 'School', 333, '2020-06-15', 500.25), (4, 'Mall', 780, '2020-12-01', 1500.75);", 'sql': 'SELECT SUM(permit_cost) FROM permit_data WHERE permit_number > 700;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Produce the SQL query for calculating the total cost of permits for projects with permit numbers greater than 700. We need to filter out the records where the permit_number is greater than 700 and then sum up the costs associated with those permits.',
    sql='SELECT SUM(permit_cost) FROM permit_data WHERE permit_number > 700;'
), 1), (Example({'sql_prompt': 'Find the total square footage of wheelchair-accessible properties in Boston.', 'sql_context': "CREATE TABLE properties (id INT, city VARCHAR(20), square_footage INT, wheelchair_accessible BOOLEAN); INSERT INTO properties (id, city, square_footage, wheelchair_accessible) VALUES (1, 'Boston', 1000, true); INSERT INTO properties (id, city, square_footage, wheelchair_accessible) VALUES (2, 'Boston', 1200, false);", 'sql': "SELECT SUM(square_footage) FROM properties WHERE city = 'Boston' AND wheelchair_accessible = true;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='produce the SQL. We need to filter the records for properties that are both located in Boston and are wheelchair-accessible. Then we will sum up their square footage to get the total area of such properties.',
    sql="SELECT SUM(square_footage) FROM properties WHERE city = 'Boston' AND wheelchair_accessible = TRUE;"
), 1), (Example({'sql_prompt': 'Which operators have the highest average production quantity per well?', 'sql_context': "CREATE TABLE wells (well_id INT, well_name TEXT, production_qty FLOAT, operator_id INT); INSERT INTO wells (well_id, well_name, production_qty, operator_id) VALUES (1, 'Well A', 1000, 1), (2, 'Well B', 1500, 1), (3, 'Well C', 800, 2); CREATE TABLE operators (operator_id INT, operator_name TEXT); INSERT INTO operators (operator_id, operator_name) VALUES (1, 'ABC Inc.'), (2, 'DEF'), (3, 'GHI Inc.');", 'sql': 'SELECT o.operator_name, AVG(w.production_qty) as avg_production FROM wells w JOIN operators o ON w.operator_id = o.operator_id GROUP BY o.operator_name ORDER BY avg_production DESC;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='produce the SQL query that will give us the information we need. We want to find out which operators have the highest average production quantity per well. To do this, we should first calculate the average production quantity for each operator and then sort these averages from highest to lowest.',
    sql='```sql\nSELECT o.operator_name, AVG(w.production_qty) AS avg_production_quantity\nFROM wells w\nJOIN operators o ON w.operator_id = o.operator_id\nGROUP BY o.operator_name\nORDER BY avg_production_quantity DESC;\n```'
), 1), (Example({'sql_prompt': 'What was the average number of comments per post in Oceania in the last month?', 'sql_context': "CREATE TABLE comments_posts(region VARCHAR(20), post_date DATE, comments INT, posts INT); INSERT INTO comments_posts(region, post_date, comments, posts) VALUES('Oceania', '2021-09-01', 10, 10), ('Oceania', '2021-09-02', 12, 12), ('Oceania', '2021-09-03', 14, 14), ('Oceania', '2021-09-04', 16, 16), ('Oceania', '2021-09-05', 18, 18), ('Oceania', '2021-09-06', 20, 20), ('Oceania', '2021-09-07', 22, 22);", 'sql': "SELECT AVG(comments/posts) FROM comments_posts WHERE region = 'Oceania' AND post_date >= DATEADD(month, -1, CURRENT_DATE)"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Produce the SQL. We need to calculate the average number of comments per post for a specific region (Oceania) and within a certain time frame (the last month). To do this, we will sum up all the comments and posts from that period and then divide the total comments by the total posts to get the average.',
    sql="SELECT AVG(comments * 1.0 / posts) AS avg_comments_per_post FROM comments_posts WHERE region = 'Oceania' AND post_date >= DATEADD(month, -1, GETDATE());"
), 1), (Example({'sql_prompt': 'What is the geopolitical risk assessment score for each country in 2020?', 'sql_context': "CREATE TABLE GeopoliticalRiskAssessments (assessment_id INT, assessment_name VARCHAR(50), score INT, assessment_date DATE, country VARCHAR(50)); INSERT INTO GeopoliticalRiskAssessments (assessment_id, assessment_name, score, assessment_date, country) VALUES (1, 'Assessment A', 7, '2020-01-01', 'USA'), (2, 'Assessment B', 5, '2020-02-15', 'Russia'), (3, 'Assessment C', 8, '2020-03-31', 'China');", 'sql': "SELECT country, score FROM GeopoliticalRiskAssessments WHERE assessment_date BETWEEN '2020-01-01' AND '2020-12-31';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='produce the SQL. We need to filter records for the year 2020 and then group them by country to calculate the average score of geopolitical risk assessments for each country within that year.',
    sql='SELECT country, AVG(score) AS avg_risk_assessment_score FROM GeopoliticalRiskAssessments WHERE EXTRACT(YEAR FROM assessment_date) = 2020 GROUP BY country;'
), 1), (Example({'sql_prompt': 'Find the total revenue for events with an attendance over 200 in 2021.', 'sql_context': "CREATE TABLE events (event_id INT, event_name VARCHAR(50), attendance INT, revenue DECIMAL(10,2), event_date DATE); INSERT INTO events (event_id, event_name, attendance, revenue, event_date) VALUES (1, 'Art Exhibition', 250, 15000, '2021-06-01'); INSERT INTO events (event_id, event_name, attendance, revenue, event_date) VALUES (2, 'Theater Performance', 180, 12000, '2021-07-15');", 'sql': 'SELECT SUM(revenue) FROM events WHERE attendance > 200 AND YEAR(event_date) = 2021;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='produce the SQL. We need to filter events based on attendance greater than 200 and within the year 2021. Then we will sum up the revenue for these filtered records.',
    sql='SELECT SUM(revenue) AS total_revenue FROM events WHERE attendance > 200 AND EXTRACT(YEAR FROM event_date) = 2021;'
), 1), (Example({'sql_prompt': "find the number of records in the CommunityHealthStatistics table where the State is 'TX' and the County is 'Harris'", 'sql_context': "CREATE TABLE CommunityHealthStatistics (ID INT, State TEXT, County TEXT, Population INT, AverageIncome FLOAT); INSERT INTO CommunityHealthStatistics (ID, State, County, Population, AverageIncome) VALUES (1, 'TX', 'Harris', 4500000, 60000), (2, 'CA', 'LA', 2500000, 70000);", 'sql': "SELECT * FROM CommunityHealthStatistics WHERE State = 'TX' AND County = 'Harris';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the SQL. We need to count the number of records that match both conditions where the State is 'TX' and the County is 'Harris'. To do this, we will use a WHERE clause with two conditions combined using the AND operator.",
    sql="SELECT COUNT(*) FROM CommunityHealthStatistics WHERE State = 'TX' AND County = 'Harris';"
), 1), (Example({'sql_prompt': "Insert a new record into the 'weapons' table with the following data: 'Javelin', 'USA', 'in-development'", 'sql_context': "CREATE TABLE weapons (id INT PRIMARY KEY, name VARCHAR(255), origin VARCHAR(255), status VARCHAR(255)); INSERT INTO weapons (id, name, origin) VALUES (1, 'AK-47', 'Russia'), (2, 'RPG-7', 'Russia');", 'sql': "INSERT INTO weapons (name, origin, status) VALUES ('Javelin', 'USA', 'in-development');"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="insert a new record into the 'weapons' table. We need to ensure that we do not violate any primary key constraints and provide all necessary information for the new entry, including the weapon name, origin, and status.",
    sql="INSERT INTO weapons (name, origin, status) VALUES ('Javelin', 'USA', 'in-development');"
), 1), (Example({'sql_prompt': 'Count the number of mining incidents per month in 2021.', 'sql_context': "CREATE TABLE incidents (id INT, date DATE, incident_type TEXT); INSERT INTO incidents (id, date, incident_type) VALUES (1, '2021-01-05', 'equipment_failure'); INSERT INTO incidents (id, date, incident_type) VALUES (2, '2021-03-12', 'safety_violation');", 'sql': "SELECT DATE_PART('month', date) AS month, COUNT(*) FROM incidents WHERE date >= '2021-01-01' AND date < '2022-01-01' GROUP BY month;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='produce the SQL. We need to filter records for the year 2021 and then group them by month to count the number of incidents that occurred each month within that year.',
    sql='SELECT EXTRACT(MONTH FROM date) AS month, COUNT(*) AS incident_count FROM incidents WHERE EXTRACT(YEAR FROM date) = 2021 GROUP BY month;'
), 1), (Example({'sql_prompt': "How many workers are employed in 'renewable energy' sector?", 'sql_context': "CREATE TABLE workers (id INT, worker_name VARCHAR(255), department VARCHAR(255)); INSERT INTO workers (id, worker_name, department) VALUES (1, 'John Doe', 'renewable energy'), (2, 'Jane Smith', 'textiles'), (3, 'Michael Brown', 'renewable energy');", 'sql': "SELECT COUNT(*) FROM workers WHERE department = 'renewable energy';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Produce the SQL. We need to count the number of workers whose department is 'renewable energy'. To do this, we will use a SELECT statement with COUNT() function and filter the results using WHERE clause for the specific department name.",
    sql="SELECT COUNT(*) FROM workers WHERE department = 'renewable energy';"
), 1), (Example({'sql_prompt': 'What is the average performance score for each game genre?', 'sql_context': "CREATE TABLE game_genre_performance (game_id INT, game_genre VARCHAR(255), performance_score INT); INSERT INTO game_genre_performance (game_id, game_genre, performance_score) VALUES (1, 'RPG', 85), (2, 'Strategy', 90), (3, 'RPG', 80);", 'sql': 'SELECT game_genre, AVG(performance_score) as avg_score FROM game_genre_performance GROUP BY game_genre;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='produce the SQL. We need to calculate the average performance score for each game genre present in the table. To do this, we will group the results by the `game_genre` column and use the AVG() function on the `performance_score` column to get the desired averages.',
    sql='SELECT game_genre, AVG(performance_scope) FROM game_genre_performance GROUP BY game_genre;'
), 1), (Example({'sql_prompt': 'How many Indigenous communities in the Arctic are experiencing negative socio-economic impacts due to climate change?', 'sql_context': "CREATE TABLE IndigenousCommunities(community TEXT, socio_economic_impact TEXT, climate_change_impact TEXT); INSERT INTO IndigenousCommunities(community, socio_economic_impact, climate_change_impact) VALUES ('Inuit', 'High', 'Very High'), ('Sami', 'Medium', 'High');", 'sql': "SELECT COUNT(*) FROM IndigenousCommunities WHERE socio_economic_impact = 'High' AND climate_change_impact = 'High' OR socio_economic_impact = 'Very High' AND climate_change_impact = 'Very High';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the SQL. We need to count the number of Indigenous communities that are experiencing negative socio-economic impacts due to climate change. This means we should look for entries where both `socio_economic_impact` and `climate_change_impact` indicate a negative effect, such as 'High' or 'Very High'.",
    sql="SELECT COUNT(*) FROM IndigenousCommunities WHERE socio_economic_impact IN ('High', 'Very High') AND climate_change_impact IN ('High', 'Very High');"
), 1), (Example({'sql_prompt': 'What is the minimum depth recorded in the Mariana Trench?', 'sql_context': "CREATE TABLE ocean_floor_mapping (location VARCHAR(255), depth FLOAT);   INSERT INTO ocean_floor_mapping (location, depth) VALUES ('Mariana Trench', 10994.0), ('Challenger Deep', 10972.8);", 'sql': "SELECT MIN(depth) FROM ocean_floor_mapping WHERE location = 'Mariana Trench';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the sql. We need to find the minimum value of the 'depth' column where the location is specified as 'Mariana Trench'. To do this, we will use the MIN() aggregate function and filter the results for the Mariana Trench using a WHERE clause.",
    sql="SELECT MIN(depth) FROM ocean_floor_mapping WHERE location = 'Mariana Trench';"
), 1), (Example({'sql_prompt': 'List all farmers who have not serviced their irrigation systems in the last 6 months.', 'sql_context': "CREATE TABLE farmer_irrigation (id INT, farmer_id INT, system_type VARCHAR(50), service_date DATE); INSERT INTO farmer_irrigation (id, farmer_id, system_type, service_date) VALUES (1, 1, 'Drip', '2021-08-01'), (2, 2, 'Sprinkler', '2021-10-15'), (3, 3, 'Drip', '2021-11-01'), (4, 4, 'Sprinkler', '2022-02-01'), (5, 5, 'Drip', '2022-03-01'), (6, 6, 'Sprinkler', '2022-01-15'), (7, 7, 'Drip', '2021-06-01'), (8, 8, 'Sprinkler', '2022-04-01'), (9, 9, 'Drip', '2021-12-01'), (10, 10, 'Sprinkler', '2022-05-15');", 'sql': 'SELECT farmers.name FROM farmers LEFT JOIN farmer_irrigation ON farmers.id = farmer_irrigation.farmer_id WHERE farmer_irrigation.service_date <= DATE_SUB(CURDATE(), INTERVAL 6 MONTH);'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the SQL. We need to find all farmers who have not serviced their irrigation systems within the last 6 months from today's date. To do this, we will compare each service_date with a calculated date that is 6 months before today.",
    sql='SELECT DISTINCT farmer_id FROM farmer_irrigation WHERE service_date <= DATE_SUB(CURDATE(), INTERVAL 6 MONTH);'
), 1), (Example({'sql_prompt': 'What is the most common type of medical equipment across hospitals?', 'sql_context': "CREATE TABLE medical_equipment (id INT, hospital_name TEXT, location TEXT, equipment TEXT, quantity INT, last_updated_date DATE); INSERT INTO medical_equipment (id, hospital_name, location, equipment, quantity, last_updated_date) VALUES (1, 'NY Presbyterian', 'NYC', 'Ventilators', 80, '2021-03-31'); INSERT INTO medical_equipment (id, hospital_name, location, equipment, quantity, last_updated_date) VALUES (2, 'Stanford Hospital', 'Palo Alto', 'Ventilators', 90, '2021-03-31');", 'sql': 'SELECT equipment, MAX(quantity) as max_quantity FROM medical_equipment GROUP BY equipment ORDER BY max_quantity DESC LIMIT 1;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the SQL. We need to find out which type of medical equipment is most common across hospitals based on the quantity available. To do this, we will group the data by the 'equipment' column and sum up the quantities for each type of equipment. Then, we can sort the results in descending order to get the most common type at the top.",
    sql='SELECT equipment, SUM(quantity) as total_quantity FROM medical_equipment GROUP BY equipment ORDER BY total_quantity DESC LIMIT 1;'
), 1), (Example({'sql_prompt': "What is the average rating for 'Gluten-Free' items?", 'sql_context': "CREATE TABLE ratings (item_name TEXT, is_gluten_free BOOLEAN, rating INTEGER); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Quinoa Salad', true, 4); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Chicken Stir Fry', false, 5);", 'sql': 'SELECT AVG(rating) FROM ratings WHERE is_gluten_free = true;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='produce the SQL. We need to filter the items that are marked as gluten-free and then calculate their average rating. This involves selecting rows where `is_gluten_free` is true and using the AVG function on the `rating` column for those filtered results.',
    sql='SELECT AVG(rating) FROM ratings WHERE is_gluten_free = TRUE;'
), 1), (Example({'sql_prompt': 'How many water treatment facilities are there in each country, and what is their distribution by continent?', 'sql_context': "CREATE TABLE facilities (id INT, facility_name VARCHAR(50), country VARCHAR(50), total_employees INT); INSERT INTO facilities (id, facility_name, country, total_employees) VALUES (1, 'Water Treatment Plant 1', 'Brazil', 25); INSERT INTO facilities (id, facility_name, country, total_employees) VALUES (2, 'Water Treatment Plant 2', 'India', 30);", 'sql': 'SELECT country, COUNT(*) as facility_count, CONTINENT(location) as continent FROM facilities JOIN countries ON facilities.country = countries.country_name GROUP BY country, continent;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the SQL. We need to count the number of water treatment facilities per country and then join this information with a table that maps countries to continents so we can group them accordingly. Assuming there is another table called 'country_continent' which contains columns 'country' and 'continent', our query would look like this:",
    sql='```sql\nSELECT cc.continent, f.country, COUNT(f.id) as facility_count\nFROM facilities f\nJOIN country_continent cc ON f.country = cc.country\nGROUP BY cc.continent, f.country;\n```'
), 1), (Example({'sql_prompt': "What is the maximum data usage in the 'urban' region?", 'sql_context': "CREATE TABLE subscribers (id INT, name VARCHAR(50), data_usage FLOAT, region VARCHAR(20)); INSERT INTO subscribers (id, name, data_usage, region) VALUES (1, 'John Doe', 20.0, 'urban'), (2, 'Jane Doe', 18.0, 'urban');", 'sql': "SELECT MAX(data_usage) FROM subscribers WHERE region = 'urban';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the SQL query for finding the maximum data usage in the 'urban' region. We need to filter records based on the 'region' column being equal to 'urban'. Then we will select the maximum value from the 'data_usage' column among these filtered records.",
    sql="SELECT MAX(data_usage) FROM subscribers WHERE region = 'urban';"
), 1), (Example({'sql_prompt': 'Find the average depth of all underwater volcanoes in the Atlantic Ocean.', 'sql_context': "CREATE TABLE underwater_volcanoes (id INT, name VARCHAR(50), depth FLOAT, ocean VARCHAR(20)); INSERT INTO underwater_volcanoes (id, name, depth, ocean) VALUES (1, 'Lost City', 800, 'Atlantic'); INSERT INTO underwater_volcanoes (id, name, depth, ocean) VALUES (2, 'Eyjafjallajokull', 1650, 'Atlantic');", 'sql': "SELECT AVG(depth) FROM underwater_volcanoes WHERE ocean = 'Atlantic';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the SQL. We need to calculate the average depth of underwater volcanoes specifically located in the Atlantic Ocean. To do this, we will select the `depth` column from the `underwater_volcanoes` table where the `ocean` column matches 'Atlantic'. Then, we'll use the AVG() function to find the average value of these depths and group them by the ocean name to ensure accuracy.",
    sql="SELECT AVG(depth) AS average_depth FROM underwater_volcanoes WHERE ocean = 'Atlantic';"
), 1), (Example({'sql_prompt': 'What is the total cost of Mars rover missions that have successfully landed?', 'sql_context': 'CREATE TABLE mars_rovers (id INT PRIMARY KEY, name VARCHAR(255), mission_type VARCHAR(255), agency VARCHAR(255), cost FLOAT, launched_date DATE, landed_date DATE);', 'sql': "SELECT SUM(cost) FROM mars_rovers WHERE mission_type = 'Lander' AND landed_date IS NOT NULL;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the SQL. We need to filter out only those Mars rover missions that have successfully landed and then sum up their costs. To do this, we will check if the 'landed_date' column is not null for each mission.",
    sql='SELECT SUM(cost) FROM mars_rovers WHERE landed_date IS NOT NULL;'
), 0), (Example({'sql_prompt': "What is the earliest year a peacekeeping operation was conducted in 'Asia'?", 'sql_context': "CREATE TABLE Peacekeeping_Years (id INT, location VARCHAR(30), year INT); INSERT INTO Peacekeeping_Years (id, location, year) VALUES (1, 'Asia', 1990), (2, 'Asia', 2000);", 'sql': "SELECT MIN(year) FROM Peacekeeping_Years WHERE location = 'Asia';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the sql. We need to find the minimum value of the year column where the location is 'Asia'. This will give us the earliest year a peacekeeping operation was conducted in Asia.",
    sql="SELECT MIN(year) FROM Peacekeeping_Years WHERE location = 'Asia';"
), 1), (Example({'sql_prompt': 'Identify the drug with the lowest sales amount in Europe in 2022.', 'sql_context': "CREATE TABLE sales (drug_name TEXT, continent TEXT, sales_amount INT, sale_date DATE); INSERT INTO sales (drug_name, continent, sales_amount, sale_date) VALUES ('Aspirin', 'Europe', 1000, '2022-01-01');", 'sql': "SELECT drug_name, MIN(sales_amount) FROM sales WHERE continent = 'Europe' AND sale_date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY drug_name;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='produce the SQL. We need to filter records for Europe and the year 2022 first. Then we will group the data by drug_name to get sales amounts per drug. Finally, we select the drug with the lowest sales amount using the MIN function on sales_amount.',
    sql="SELECT drug_name FROM sales WHERE continent = 'Europe' AND EXTRACT(YEAR FROM sale_date) = 2022 GROUP BY drug_name ORDER BY MIN(sales_amount) ASC LIMIT 1;"
), 0), (Example({'sql_prompt': "Insert a new record into 'customer_preferences' for customer 101 and menu item 1 with a preference score of 90", 'sql_context': 'CREATE TABLE customer_preferences (customer_id INT, item_id INT, preference_score INT);', 'sql': 'INSERT INTO customer_preferences (customer_id, item_id, preference_score) VALUES (101, 1, 90);'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="insert the new record. We need to specify the values for each column that we are inserting into the 'customer_preferences' table. The columns are customer_id, item_id, and preference_score. According to the prompt, we want to add a record where customer_id is 101, item_id is 1, and preference_score is 90.",
    sql='INSERT INTO customer_preferences (customer_id, item_id, preference_score) VALUES (101, 1, 90);'
), 1), (Example({'sql_prompt': 'Who is the oldest donor from each city?', 'sql_context': "CREATE TABLE donors_2 (id INT PRIMARY KEY, name VARCHAR(50), age INT, city VARCHAR(50), state VARCHAR(50)); INSERT INTO donors_2 (id, name, age, city, state) VALUES (1, 'John Doe', 35, 'New York', 'NY'), (2, 'Jane Smith', 40, 'Buffalo', 'NY'), (3, 'Mike Johnson', 50, 'Boston', 'MA');", 'sql': 'SELECT city, MAX(age) as oldest_donor_age FROM donors_2 GROUP BY city;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Produce the SQL. We need to find the oldest donor from each city, which means we have to group the results by city and then select the donor with the maximum age within each group. To achieve this, we can use a subquery that selects the maximum age for each city and then join it back to the original table to get the corresponding donor's name.",
    sql='```sql\nSELECT d1.city, d1.name, d1.age\nFROM donors_2 d1\nJOIN (\n    SELECT city, MAX(age) as max_age\n    FROM donors_2\n    GROUP BY city\n) d2 ON d1.city = d'
), 0), (Example({'sql_prompt': 'What are the union membership statistics for unions that have engaged in successful collective bargaining in the healthcare sector?', 'sql_context': "CREATE TABLE Membership (UnionName TEXT, Sector TEXT, MemberCount INT); INSERT INTO Membership (UnionName, Sector, MemberCount) VALUES ('UnionHealthA', 'Healthcare', 3000), ('UnionHealthB', 'Healthcare', 5000), ('UnionHealthC', 'Healthcare', 2000);", 'sql': "SELECT UnionName, MemberCount FROM Membership WHERE Sector = 'Healthcare' AND UnionName IN (SELECT UnionName FROM CBAs WHERE ExpirationDate > CURDATE());"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the SQL. We need to identify unions that have engaged in successful collective bargaining within the healthcare sector and then calculate their membership statistics. Assuming we have another table or a way to determine which unions were successful, let's call it 'CollectiveBargainingSuccess'.",
    sql="SELECT m.UnionName, SUM(m.MemberCount) as TotalMembers FROM Membership m INNER JOIN CollectiveBargainingSuccess cbs ON m.UnionName = cbs.UnionName WHERE m.Sector = 'Healthcare' GROUP BY m.UnionName;"
), 1), (Example({'sql_prompt': 'Calculate the total gas consumption for Nigeria in 2019', 'sql_context': "CREATE TABLE gas_consumption (country VARCHAR(50), consumption_year INT, gas_consumption FLOAT); INSERT INTO gas_consumption (country, consumption_year, gas_consumption) VALUES ('Nigeria', 2019, 12000), ('Nigeria', 2018, 10000), ('Ghana', 2019, 8000), ('Ghana', 2018, 6000), ('Ivory Coast', 2019, 10000), ('Ivory Coast', 2018, 8000);", 'sql': "SELECT gas_consumption FROM gas_consumption WHERE country = 'Nigeria' AND consumption_year = 2019;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='produce the SQL. We need to filter records for Nigeria and the year 2019 from the gas_consumption table. Then we will sum up the gas consumption values for these filtered records to get the total gas consumption for Nigeria in that year.',
    sql="SELECT SUM(gas_consumption) FROM gas_consumption WHERE country = 'Nigeria' AND consumption_year = 2019;"
), 1), (Example({'sql_prompt': 'What is the average socially responsible lending loan amount for microfinance institutions in Southeast Asia?', 'sql_context': "CREATE TABLE socially_responsible_lending(id INT, loan_number INT, institution_region VARCHAR(50), amount INT); INSERT INTO socially_responsible_lending VALUES (1, 701, 'Southeast Asia', 5000); INSERT INTO socially_responsible_lending VALUES (2, 702, 'South Asia', 7000); INSERT INTO socially_responsible_lending VALUES (3, 703, 'East Asia', 9000); INSERT INTO socially_responsible_lending VALUES (4, 704, 'Southeast Asia', 6000);", 'sql': "SELECT AVG(amount) FROM socially_responsible_lending WHERE institution_region = 'Southeast Asia' AND type = 'microfinance';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='produce the SQL. We need to calculate the average loan amount specifically for microfinance institutions located in Southeast Asia. To do this, we will filter the records based on the institution_region column and then compute the average of the amount column for those filtered records.',
    sql="SELECT AVG(amount) FROM socially_responsible_lending WHERE institution_region = 'Southeast Asia';"
), 0), (Example({'sql_prompt': 'What is the average salary of employees who identify as Latinx in the Engineering department?', 'sql_context': "CREATE TABLE Employees (EmployeeID int, Name varchar(50), Gender varchar(10), Department varchar(50), Salary decimal(10,2), Ethnicity varchar(50)); INSERT INTO Employees (EmployeeID, Name, Gender, Department, Salary, Ethnicity) VALUES (1, 'Juan Garcia', 'Male', 'Engineering', 85000.00, 'Latinx'); INSERT INTO Employees (EmployeeID, Name, Gender, Department, Salary, Ethnicity) VALUES (2, 'Maria Rodriguez', 'Female', 'Engineering', 90000.00, 'Latinx');", 'sql': "SELECT AVG(Salary) FROM Employees WHERE Department = 'Engineering' AND Ethnicity = 'Latinx';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='produce the SQL query for this scenario. We need to filter employees based on their ethnicity and department, then calculate the average salary of those who meet these criteria. The steps are as follows:\n\n1. Select only Latinx employees from the Employees table.\n2. Further narrow down the selection to include only those in the Engineering department.\n3. Calculate the average salary for this filtered group.\n\nBased on these steps, here is the SQL query that accomplishes this task:',
    sql="SELECT AVG(Salary) FROM Employees WHERE Ethnicity = 'Latinx' AND Department = 'Engineering';"
), 1), (Example({'sql_prompt': 'What is the name and type of the vessel with the highest average speed?', 'sql_context': "CREATE TABLE Vessels (ID VARCHAR(20), Name VARCHAR(20), Type VARCHAR(20), AverageSpeed FLOAT); INSERT INTO Vessels VALUES ('V012', 'Vessel L', 'Passenger', 35.0), ('V013', 'Vessel M', 'Cargo', 19.5), ('V014', 'Vessel N', 'Passenger', 32.0);", 'sql': 'SELECT Name, Type FROM Vessels WHERE AverageSpeed = (SELECT MAX(AverageSpeed) FROM Vessels);'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='produce the SQL query for finding the name and type of the vessel with the highest average speed. We need to identify the maximum value from the AverageSpeed column, then retrieve the corresponding Name and Type values for that record. To do this, we can use a subquery or an ORDER BY clause combined with LIMIT to get the top result.',
    sql='SELECT Name, Type FROM Vessels WHERE AverageSpeed = (SELECT MAX(AverageSpeed) FROM Vessels);'
), 1), (Example({'sql_prompt': "List all the distinct producers of Gadolinium from the 'production' table, ordered alphabetically.", 'sql_context': 'CREATE TABLE production (element VARCHAR(10), year INT, month INT, producer VARCHAR(20), quantity INT);', 'sql': "SELECT DISTINCT producer FROM production WHERE element = 'Gadolinium' ORDER BY producer ASC;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the SQL query for listing all distinct producers of Gadolinium from the 'production' table. We need to select unique values from the producer column where the element is specifically 'Gadolinium'. Then, we will sort these unique producers alphabetically.",
    sql="SELECT DISTINCT producer FROM production WHERE element = 'Gadolinium' ORDER BY producer ASC;"
), 1)]