[(Example({'sql_prompt': "Update the name of the passenger with the id 3 to 'Emily Lee'.", 'sql_context': "CREATE TABLE PASSENGERS (id INT, name VARCHAR(50)); INSERT INTO PASSENGERS VALUES (3, 'James Brown');", 'sql': "UPDATE PASSENGERS SET name = 'Emily Lee' WHERE id = 3;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="update the name of the passenger with the id 3. To achieve this, we need to use the UPDATE statement in SQL. Here's how it would look like:\n\n```sql\nUPDATE PASSENGERS\nSET name = 'Emily Lee'\nWHERE id = 3;\n```\n\nThis command will update the name column of the row with id 3 to 'Emily Lee'.",
    sql="Sql Prompt: What was the total investment in climate communication in Europe and Central Asia from 2018 to 2019?\n\nSql Context: CREATE TABLE climate_investments (id INT, region VARCHAR(50), category VARCHAR(50), year INT, investment FLOAT); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (1, 'Western Europe', 'Climate Communication', 2018, 500000); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (2, 'Eastern"
), 0), (Example({'sql_prompt': "What is the number of women-led agricultural businesses in the 'business_data' table?", 'sql_context': "CREATE TABLE business_data (business_id INT, business_name VARCHAR(50), gender VARCHAR(10)); INSERT INTO business_data (business_id, business_name, gender) VALUES (1, 'Green Acres', 'female'), (2, 'Brown Farms', 'male'), (3, 'Eco Harvest', 'non-binary');", 'sql': "SELECT COUNT(business_id) FROM business_data WHERE gender = 'female';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='answer the SQL prompts:\n\n1) The total calories of all dishes with names starting with "HealthyHarvest" and a price greater than the average price of all dishes can be calculated using the following SQL query:\n\n```sql\nSELECT SUM(Dishes.calories) FROM Dishes WHERE Dishes.dish_name LIKE \'HealthyHarvest%\' AND Dishes.price > (SELECT AVG(price) FROM Dishes);\n```\n\n2) To find the total investment in climate communication in Europe and Central Asia in 2019, use this SQL query:\n\n```sql\nSELECT SUM(investment) FROM climate_invest',
    sql="Sql Prompt: How much was invested in Climate Adaptation in Eastern Europe in 2019?\n\nSql Context: CREATE TABLE climate_investments (id INT, region VARCHAR(50), category VARCHAR(50), year INT, investment FLOAT); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (1, 'Western Europe', 'Climate Communication', 2018, 500000); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (2, 'Eastern Europe', 'Climate Ad"
), 0), (Example({'sql_prompt': "What is the average rating for 'Gluten-Free' items?", 'sql_context': "CREATE TABLE ratings (item_name TEXT, is_gluten_free BOOLEAN, rating INTEGER); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Quinoa Salad', true, 4); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Chicken Stir Fry', false, 5);", 'sql': 'SELECT AVG(rating) FROM ratings WHERE is_gluten_free = true;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="answer the SQL prompts:\n\n1. The total calories of all dishes with names starting with 'HealthyHarvest' and a price greater than the average price of all dishes can be calculated using the following SQL query:\n\n```sql\nSELECT SUM(Dishes.calories) FROM Dishes WHERE Dishes.dish_name LIKE 'HealthyHarvest%' AND Dishes.price > (SELECT AVG(price) FROM Dishes);\n```\n\n2. To find the total investment in climate communication in Europe and Central Asia in 2019, use this SQL query:\n\n```sql\nSELECT SUM(investment) FROM climate_invest",
    sql="Sql Prompt: What is the average rating for 'Gluten-Free' items?\n\nSql Context: CREATE TABLE ratings (item_name TEXT, is_gluten_free BOOLEAN, rating INTEGER); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Quinoa Salad', true, 4); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Chicken Stir Fry', false, 5);\n\nReasoning: Let's think step by step in order to answer the SQL prompts: 1. To find the average rating for 'Gl"
), 0), (Example({'sql_prompt': 'What is the maximum amount of dissolved oxygen (DO) in the ocean_health table for each month in 2021?', 'sql_context': "CREATE TABLE ocean_health (date DATE, do_value INT); INSERT INTO ocean_health (date, do_value) VALUES ('2021-01-01', 8), ('2021-01-02', 7), ('2021-02-01', 6), ('2021-02-02', 9);", 'sql': "SELECT EXTRACT(MONTH FROM date) as month, MAX(do_value) as max_do_value FROM ocean_health WHERE date BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY EXTRACT(MONTH FROM date);"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="answer the SQL prompts:\n\n1) The total calories of all dishes with names starting with 'HealthyHarvest' and a price greater than the average price of all dishes can be calculated as follows:\n\n```sql\nSELECT SUM(Dishes.calories) FROM Dishes\nWHERE Dishes.dish_name LIKE 'HealthyHarvest%' AND Dishes.price > (SELECT AVG(price) FROM Dishes);\n```\n\n2) To find the total investment in climate communication in Europe and Central Asia in 2019, we need to sum up the investments for those regions and that year where the category is 'Climate Communication':",
    sql="Sql Prompt: What is the maximum amount of dissolved oxygen (DO) in the ocean_health table for each month in 2021?\n\nSql Context: CREATE TABLE ocean_health (date DATE, do_value INT); INSERT INTO ocean_health (date, do_value) VALUES ('2021-01-01', 8), ('2021-01-02', 7), ('2021-02-01', 6), ('2021-02-02', 9);\n\nReasoning: Let's think step by step in order to answer the SQL prom"
), 1), (Example({'sql_prompt': 'What are the total sales and quantity of goods sold by each salesperson, grouped by city?', 'sql_context': 'CREATE TABLE salesperson (id INT, name TEXT, city TEXT); CREATE TABLE sales (id INT, salesperson_id INT, product TEXT, quantity INT, total_sales FLOAT);', 'sql': 'SELECT s.name, s.city, SUM(s.total_sales) as total_sales, SUM(s.quantity) as total_quantity FROM sales s JOIN salesperson sp ON s.salesperson_id = sp.id GROUP BY s.city, s.name;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql:\n1. First, we need to join the `salesperson` and `sales` tables on the `salesperson_id` column. This will allow us to group the sales data by salesperson and city.\n\n```sql\nSELECT salesperson.city, salesperson.name, SUM(sales.quantity) AS total_quantity, SUM(sales.total_sales) AS total_sales\nFROM salesperson\nJOIN sales ON sales.salesperson_id = salesperson.id\nGROUP BY salesperson.city, salesperson.name;\n```\n\nThis query will return the total quantity and total sales for each salesperson',
    sql="Sql Prompt: What is the average price of dishes in the 'HealthyHarvest' category?\n\nSql Context: CREATE TABLE Dishes (id INT, dish_name TEXT, price FLOAT);\n\nReasoning: Let's think step by step in order to Sql: First, we need to filter the `Dishes` table for rows where the `dish_name` is like 'HealthyHarvest%'. Then, we calculate the average price of these dishes using the AVG function. ```sql SELECT AVG(price) FROM Dishes WHERE dish_name LIKE 'HealthyHarvest%'; ``` This query will return the average price of dishes in the 'Healthy"
), 1), (Example({'sql_prompt': 'What is the total funding received by startups in the technology sector that were founded by women?', 'sql_context': "CREATE TABLE startups(id INT, name TEXT, sector TEXT, founder_gender TEXT, funding FLOAT); INSERT INTO startups VALUES (1, 'Acme Inc', 'Technology', 'Female', 2000000); INSERT INTO startups VALUES (2, 'Beta Corp', 'Retail', 'Male', 3000000); INSERT INTO startups VALUES (3, 'Gamma Start', 'Technology', 'Female', 5000000);", 'sql': "SELECT SUM(funding) FROM startups WHERE sector = 'Technology' AND founder_gender = 'Female';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT SUM(funding) FROM startups WHERE sector = 'Technology' AND founder_gender = 'Female';\n\nThis SQL statement will sum up the funding received by startups in the technology sector that were founded by women. The reasoning behind this is that we are looking for startups founded by women in the technology sector, and then we want to find out how much funding they have received, which can be done by using the SUM function on the 'funding' column where the conditions for the 'sector', 'founder_gender' are met.",
    sql="Sql Prompt: What is the total number of startups founded by women in the technology sector?\n\nSql Context: CREATE TABLE startups(id INT, name TEXT, sector TEXT, founder_gender TEXT); INSERT INTO startups VALUES (1, 'Acme Inc', 'Technology', 'Female'); INSERT INTO startups VALUES (2, 'Beta Corp', 'Retail', 'Male'); INSERT INTO startups VALUES (3, 'Gamma Start', 'Technology', 'Female');\n\nReasoning: Let's think step by step in order to Sql: SELECT COUNT(*) FROM start"
), 0), (Example({'sql_prompt': 'What is the recycling rate of plastic in the residential sector in the state of New York?', 'sql_context': "CREATE TABLE recycling_rates_city (sector VARCHAR(20), city VARCHAR(20), material VARCHAR(20), recycling_rate DECIMAL(5,2)); INSERT INTO recycling_rates_city (sector, city, material, recycling_rate) VALUES ('residential', 'New York City', 'plastic', 0.25), ('commercial', 'New York City', 'plastic', 0.30), ('residential', 'New York City', 'paper', 0.45), ('commercial', 'New York City', 'paper', 0.50), ('residential', 'Los Angeles', 'plastic', 0.20), ('commercial', 'Los Angeles', 'plastic', 0.35), ('residential', 'Los Angeles', 'paper', 0.40), ('commercial', 'Los Angeles', 'paper', 0.50);", 'sql': "SELECT recycling_rate FROM recycling_rates_city WHERE sector = 'residential' AND material = 'plastic' AND city = 'New York City';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='find the answer for each SQL query:\n\n1) The total calories of dishes with names starting with "HealthyHarvest" and having a price greater than the average price of all dishes can be calculated as follows:\n\n```sql\nSELECT SUM(Dishes.calories) FROM Dishes\nWHERE Dishes.dish_name LIKE \'HealthyHarvest%\'\nAND Dishes.price > (SELECT AVG(price) FROM Dishes);\n```\n\n2) The total investment in climate communication in Europe and Central Asia in 2019 can be calculated as follows:\n\n```sql\nSELECT SUM(investment) FROM climate_invest',
    sql="Sql Prompt: What is the recycling rate of plastic in the residential sector in the state of New York?\n\nSql Context: CREATE TABLE recycling_rates_city (sector VARCHAR(20), city VARCHAR(20), material VARCHAR(20), recycling_rate DECIMAL(5,2)); INSERT INTO recycling_rates_city (sector, city, material, recycling_rate) VALUES ('residential', 'New York City', 'plastic', 0.25), ('commercial', 'New York City', 'plastic', 0.30), ('residential', 'New York City', '"
), 1), (Example({'sql_prompt': "Which startups in the 'StartupFunding' table received funding in 2020 or later and have a budget greater than $500,000?", 'sql_context': "CREATE SCHEMA BiotechStartups; CREATE TABLE StartupFunding (startup_name VARCHAR(50), funding_year INT, funding DECIMAL(10, 2)); INSERT INTO StartupFunding VALUES ('StartupA', 2019, 500000), ('StartupB', 2020, 750000);", 'sql': 'SELECT startup_name FROM BiotechStartups.StartupFunding WHERE funding_year >= 2020 AND funding > 500000;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="construct the SQL queries for each of the prompts:\n\n1) The given SQL query calculates the total calories of all dishes with names starting with 'HealthyHarvest' and a price greater than the average price of all dishes. To do this, it uses a subquery to find the average price of all dishes and then compares it with the price of dishes that have names starting with 'HealthyHarvest'.\n\n2) The given SQL query calculates the total investment in climate communication in Europe and Central Asia in 2019. It does this by filtering the 'climate_investments' table for rows where the category is 'Climate Communication', the region is either 'Europe'",
    sql="Sql Prompt: Which startups in the 'StartupFunding' table received funding in 2020 or later and have a budget greater than $500,000?\n\nSql Context: CREATE SCHEMA BiotechStartups; CREATE TABLE StartupFunding (startup_name VARCHAR(50), funding_year INT, funding DECIMAL(10, 2)); INSERT INTO StartupFunding VALUES ('StartupA', 2019, 500000), ('StartupB', 2020, 750000);\n\nReasoning"
), 1), (Example({'sql_prompt': "How many female engineers are there in 'australian_mines'?", 'sql_context': "CREATE SCHEMA if not exists australia_schema;CREATE TABLE australia_schema.australian_mines (id INT, name VARCHAR, gender VARCHAR, role VARCHAR);INSERT INTO australia_schema.australian_mines (id, name, gender, role) VALUES (1, 'S worker', 'Female', 'Engineer'), (2, 'T engineer', 'Male', 'Engineer');", 'sql': "SELECT COUNT(*) FROM australia_schema.australian_mines WHERE gender = 'Female' AND role = 'Engineer';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT COUNT(*) FROM australia_schema.australian_mines WHERE gender = 'Female' AND role = 'Engineer';\n\nThis SQL statement counts the number of female engineers in the 'australian_mines' table from the 'australia_schema'. It filters the records based on the specified conditions for gender and role.",
    sql="Sql Prompt: What was the total investment in climate communication in Europe and Central Asia combined in 2019?\n\nSql Context: CREATE TABLE climate_investments (id INT, region VARCHAR(50), category VARCHAR(50), year INT, investment FLOAT); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (1, 'Western Europe', 'Climate Communication', 2018, 500000); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (2, 'Eastern Europe', 'Climate"
), 0), (Example({'sql_prompt': 'What is the average salary of employees in each position?', 'sql_context': "CREATE TABLE Employees (EmployeeID INT, Name VARCHAR(50), Department VARCHAR(50), Position VARCHAR(50), Salary FLOAT); INSERT INTO Employees (EmployeeID, Name, Department, Position, Salary) VALUES (1, 'John Doe', 'IT', 'Developer', 75000.00), (2, 'Jane Smith', 'IT', 'Developer', 80000.00), (3, 'Alice Johnson', 'Marketing', 'Marketing Specialist', 60000.00), (4, 'Bob Brown', 'HR', 'HR Specialist', 65000.00);", 'sql': 'SELECT Position, AVG(Salary) FROM Employees GROUP BY Position;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='answer the SQL prompts:\n\n1) The total calories of all dishes with names starting with "HealthyHarvest" and a price greater than the average price of all dishes can be calculated using the following SQL query:\n\n```sql\nSELECT SUM(Dishes.calories) FROM Dishes WHERE Dishes.dish_name LIKE \'HealthyHarvest%\' AND Dishes.price > (SELECT AVG(price) FROM Dishes);\n```\n\n2) To find the total investment in climate communication in Europe and Central Asia in 2019, use this SQL query:\n\n```sql\nSELECT SUM(investment) FROM climate_invest',
    sql="Sql Prompt: What is the average salary of employees in each position?\n\nSql Context: CREATE TABLE Employees (EmployeeID INT, Name VARCHAR(50), Department VARCHAR(50), Position VARCHAR(50), Salary FLOAT); INSERT INTO Employees (EmployeeID, Name, Department, Position, Salary) VALUES (1, 'John Doe', 'IT', 'Developer', 75000.00), (2, 'Jane Smith', 'IT', 'Developer', 80000.00), (3, 'Alice Johnson', 'Marketing', 'Mark"
), 0), (Example({'sql_prompt': 'What are the names and ranks of all military personnel in country W who were demoted in the year 2019?', 'sql_context': "CREATE TABLE military_demotions (id INT, name TEXT, country TEXT, rank TEXT, demotion_year INT);INSERT INTO military_demotions (id, name, country, rank, demotion_year) VALUES (1, 'John Doe', 'Country W', 'Colonel', 2019);", 'sql': "SELECT name, rank FROM military_demotions WHERE country = 'Country W' AND demotion_year = 2019;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='answer the SQL prompts:\n\n1. The given SQL statement calculates the total calories of all dishes with names starting with "HealthyHarvest" and a price greater than the average price of all dishes. To do this, it sums up the calories from the Dishes table where the dish_name starts with \'HealthyHarvest\' and the price is greater than the average price (calculated using AVG function).\n\n2. The provided SQL statement calculates the total investment in climate communication in Europe and Central Asia in 2019. It sums up the investments from the climate_investments table where the category is \'Climate Communication\', the region is either \'Europe\' or',
    sql="Sql Prompt: What are the names and ranks of all military personnel in country W who were demoted in the year 2019?\n\nSql Context: CREATE TABLE military_demotions (id INT, name TEXT, country TEXT, rank TEXT, demotion_year INT);INSERT INTO military_demotions (id, name, country, rank, demotion_year) VALUES (1, 'John Doe', 'Country W', 'Colonel', 2019);\n\nReasoning: Let's think step by step in order to answer the SQL prompts: 1. To find the names and ranks of all military personnel in country W who were demoted"
), 1), (Example({'sql_prompt': "List the top 2 sectors with the highest donation amounts in the 'Asia' region for the year 2018, ordered by the donation amount in descending order.", 'sql_context': "CREATE TABLE Donors (donor_id INT, donor_name VARCHAR(255), donation_amount INT, sector VARCHAR(255), region VARCHAR(255), donation_date DATE); INSERT INTO Donors (donor_id, donor_name, donation_amount, sector, region, donation_date) VALUES (1, 'DonorA', 100000, 'Health', 'Asia', '2018-01-01');", 'sql': "SELECT sector, SUM(donation_amount) AS total_donation FROM Donors WHERE region = 'Asia' AND donation_date >= '2018-01-01' AND donation_date < '2019-01-01' GROUP BY sector ORDER BY total_donation DESC LIMIT 2;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql:\n```sql\n-- For the first question, we need to find the total calories of dishes that are considered healthy and have a price higher than the average price of all dishes.\nSELECT SUM(Dishes.calories) FROM Dishes WHERE Dishes.dish_name LIKE 'HealthyHarvest%' AND Dishes.price > (SELECT AVG(price) FROM Dishes);\n\n-- For the second question, we need to find the total investment in Climate Communication for Europe and Central Asia in 2019.\nSELECT SUM(investment) FROM climate_investments WHERE category = 'Climate Communication' AND (region = 'Europe'",
    sql="Sql Prompt: List the top 2 sectors with the highest donation amounts in the 'Asia' region for the year 2018, ordered by the donation amount in descending order.\n\nSql Context: CREATE TABLE Donors (donor_id INT, donor_name VARCHAR(255), donation_amount INT, sector VARCHAR(255), region VARCHAR(255), donation_date DATE); INSERT INTO Donors (donor_id, donor_name, donation_amount, sector, region, donation_date) VALUES (1, 'DonorA', 100000"
), 0), (Example({'sql_prompt': "Display the vendor with the highest average price for 'Salmon' in the 'sales' table.", 'sql_context': "CREATE TABLE sales (id INT PRIMARY KEY, vendor VARCHAR(50), quantity INT, species VARCHAR(50), price DECIMAL(5,2)); INSERT INTO sales (id, vendor, quantity, species, price) VALUES (1, 'Seafood Haven', 20, 'Salmon', 15.99), (2, 'Sea Bounty', 30, 'Tilapia', 9.49), (3, 'Sea Bounty', 15, 'Cod', 14.50), (4, 'Fresh Catch', 25, 'Salmon', 17.99);", 'sql': "SELECT vendor, AVG(price) FROM sales WHERE species = 'Salmon' GROUP BY vendor ORDER BY AVG(price) DESC LIMIT 1;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT vendor, AVG(price) as avg_price FROM sales WHERE species = 'Salmon' GROUP BY vendor ORDER BY avg_price DESC LIMIT 1;\n\nExplanation: To find the vendor with the highest average price for 'Salmon', we first need to calculate the average price of salmon sold by each vendor. We do this using the AVG() function and group the results by vendor using the GROUP BY clause. Then, we order the results in descending order (DESC) based on the average price. Finally, we limit the results to only one row using the LIMIT 1 statement. This will return the vendor with the highest average price for '",
    sql="Sql Prompt: What was the total investment in climate communication in Europe and Central Asia from 2018 to 2019?\n\nSql Context: CREATE TABLE climate_investments (id INT, region VARCHAR(50), category VARCHAR(50), year INT, investment FLOAT); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (1, 'Western Europe', 'Climate Communication', 2018, 500000); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (2, 'Eastern"
), 0), (Example({'sql_prompt': "Add new military equipment to 'military_equipment' table", 'sql_context': "CREATE TABLE military_equipment (id INT PRIMARY KEY, name VARCHAR(255), type VARCHAR(255), country VARCHAR(255)); INSERT INTO military_equipment (id, name, type, country) VALUES (1, 'M1 Abrams', 'Tank', 'USA');", 'sql': "INSERT INTO military_equipment (id, name, type, country) VALUES (2, 'Leopard 2', 'Tank', 'Germany');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='In the first example, you are asked to find the total calories of dishes that have a name starting with "HealthyHarvest" and have a price greater than the average price of all dishes. The SQL query would be:\n\n```sql\nSELECT SUM(Dishes.calories) FROM Dishes\nWHERE Dishes.dish_name LIKE \'HealthyHarvest%\' AND Dishes.price > (SELECT AVG(price) FROM Dishes);\n```\n\nIn the second example, you are asked to find the total investment in climate communication in Europe and Central Asia in 2019. The SQL query would be:\n\n```sql\nSELECT SUM(',
    sql="Sql Prompt: What was the total investment in climate communication in Europe and Central Asia in 2019?\n\nSql Context: CREATE TABLE climate_investments (id INT, region VARCHAR(50), category VARCHAR(50), year INT, investment FLOAT); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (1, 'Western Europe', 'Climate Communication', 2018, 500000); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (2, 'Eastern Europe', 'Climate Ad"
), 0), (Example({'sql_prompt': 'Show total number of union members by state', 'sql_context': "CREATE TABLE union_members (id INT, name VARCHAR(50), state VARCHAR(2), city VARCHAR(20), occupation VARCHAR(20)); INSERT INTO union_members (id, name, state, city, occupation) VALUES (1, 'John Doe', 'NY', 'New York', 'Engineer'); INSERT INTO union_members (id, name, state, city, occupation) VALUES (2, 'Jane Smith', 'CA', 'Los Angeles', 'Teacher'); INSERT INTO union_members (id, name, state, city, occupation) VALUES (3, 'Alice Johnson', 'NY', 'Buffalo', 'Nurse');", 'sql': 'SELECT state, COUNT(*) as total_members FROM union_members GROUP BY state;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT COUNT(DISTINCT state) FROM union_members WHERE state IS NOT NULL;\n\nThis SQL statement counts the number of unique states where union members reside, excluding any null values for the 'state' column. The reason for using COUNT(DISTINCT state) instead of COUNT(*), is to ensure that each state is only counted once, even if there are multiple union members in the same state.",
    sql="Sql Prompt: What was the total investment in climate adaptation in Europe and Central Asia in 2019?\n\nSql Context: CREATE TABLE climate_investments (id INT, region VARCHAR(50), category VARCHAR(50), year INT, investment FLOAT); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (1, 'Western Europe', 'Climate Communication', 2018, 500000); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (2, 'Eastern Europe', 'Climate Ad"
), 0), (Example({'sql_prompt': 'What is the total value of military equipment sales to all countries?', 'sql_context': "CREATE TABLE military_sales (id INT, country VARCHAR, value FLOAT); INSERT INTO military_sales (id, country, value) VALUES (1, 'Canada', 5000000), (2, 'Mexico', 3000000), (3, 'Canada', 7000000);", 'sql': 'SELECT SUM(value) FROM military_sales;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT SUM(value) FROM military_sales;\n\nThis query will sum up the total value of military equipment sales to all countries. The reasoning is that we want to find the total investment, and since the table `military_sales` has a column named `value` which represents the investment (in this case, the value of military equipment sales), we can use the SUM function to add up all the values in the `value` column.',
    sql="Sql Prompt: What is the total amount spent on climate communication in Europe and Central Asia in 2019?\n\nSql Context: CREATE TABLE climate_investments (id INT, region VARCHAR(50), category VARCHAR(50), year INT, investment FLOAT); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (1, 'Western Europe', 'Climate Communication', 2018, 500000); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (2, 'Eastern Europe', 'Climate"
), 0), (Example({'sql_prompt': 'Identify the top 3 countries with the highest number of social impact projects in 2019.', 'sql_context': "CREATE TABLE countries (id INT, name VARCHAR(255), total_projects INT); INSERT INTO countries (id, name, total_projects) VALUES (1, 'Brazil', 500), (2, 'India', 700), (3, 'South Africa', 350); CREATE TABLE projects_by_country (country VARCHAR(255), project_count INT); INSERT INTO projects_by_country (country, project_count) SELECT country, COUNT(*) FROM projects GROUP BY country;", 'sql': 'SELECT c.name, p.project_count FROM countries c JOIN (SELECT country, COUNT(*) AS project_count FROM projects GROUP BY country ORDER BY project_count DESC LIMIT 3) p ON c.name = p.country;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="answer the given SQL prompts:\n\n1. The total calories of all dishes with names starting with 'HealthyHarvest' and a price greater than the average price of all dishes can be calculated using the following SQL query:\n\n```sql\nSELECT SUM(Dishes.calories) FROM Dishes WHERE Dishes.dish_name LIKE 'HealthyHarvest%' AND Dishes.price > (SELECT AVG(price) FROM Dishes);\n```\n\n2. To find the total investment in climate communication in Europe and Central Asia in 2019, use this SQL query:\n\n```sql\nSELECT SUM(investment) FROM climate_in",
    sql='Sql Prompt: Find the top 3 countries with the highest number of social impact projects in 2019.\n\nSql Context: The context provided includes two tables: `countries` and `projects_by_country`. The `countries` table contains information about different countries, while the `projects_by_country` table is a result of grouping projects by country based on the number of social impact projects in each country.\n\nReasoning: To answer this question, we need to find the top 3 countries with the highest number of social impact projects in 2019. Since the `projects_by_country` table already groups projects by country, we can simply use an SQL query to'
), 0), (Example({'sql_prompt': 'What is the maximum market price of Terbium in China for 2017?', 'sql_context': 'CREATE TABLE Terbium_Market_Prices (id INT, year INT, country VARCHAR(255), market_price FLOAT);', 'sql': "SELECT MAX(market_price) FROM Terbium_Market_Prices WHERE year = 2017 AND country = 'China';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the SQL query for finding the maximum market price of Terbium in China for a specific year.}\n\nFirst, we need to filter the data based on the country and year. Then, we will find the maximum value from the filtered results.',
    sql="```\nSELECT MAX(market_price) AS Max_Price\nFROM Terbium_Market_Prices\nWHERE country = 'China' AND year = 2017;\n```\nThis query will return the maximum market price of Terbium in China for the year 2017."
), 1), (Example({'sql_prompt': 'What is the maximum amount of research grant received by a faculty member in the Arts and Humanities department?', 'sql_context': "CREATE TABLE grants_faculty (id INT, department VARCHAR(50), faculty_name VARCHAR(50), amount DECIMAL(10,2), grant_date DATE); INSERT INTO grants_faculty (id, department, faculty_name, amount, grant_date) VALUES (1, 'Arts and Humanities', 'Grace', 12000.00, '2018-06-10'), (2, 'Arts and Humanities', 'Harry', 18000.00, '2019-12-20'), (3, 'Arts and Humanities', 'Ida', 20000.00, '2020-08-05');", 'sql': "SELECT MAX(amount) FROM grants_faculty WHERE department = 'Arts and Humanities';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='answer the SQL prompts:\n\n1) The total calories of all dishes with names starting with "HealthyHarvest" and a price greater than the average price of all dishes can be calculated as follows:\n\n```sql\nSELECT SUM(Dishes.calories) FROM Dishes\nWHERE Dishes.dish_name LIKE \'HealthyHarvest%\' AND Dishes.price > (SELECT AVG(price) FROM Dishes);\n```\n\n2) To find the total investment in climate communication in Europe and Central Asia in 2019, use this SQL query:\n\n```sql\nSELECT SUM(investment) FROM climate_investments',
    sql="Sql Prompt: What is the maximum amount of research grant received by a faculty member in the Arts and Humanities department?\n\nSql Context: CREATE TABLE grants_faculty (id INT, department VARCHAR(50), faculty_name VARCHAR(50), amount DECIMAL(10,2), grant_date DATE); INSERT INTO grants_faculty (id, department, faculty_name, amount, grant_date) VALUES (1, 'Arts and Humanities', 'Grace', 12000.00, '2018-06-10'), (2, 'Arts and Humanities', 'Harry"
), 1), (Example({'sql_prompt': 'What is the total mass of all space debris in orbit?', 'sql_context': "CREATE TABLE Space_Debris (ID INT, Object_Type VARCHAR(50), Mass FLOAT); INSERT INTO Space_Debris (ID, Object_Type, Mass) VALUES (1, 'Defunct Satellite', 1500.0), (2, 'Rocket Body', 2000.0), (3, 'Fuel Tank', 500.0), (4, 'Nuts and Bolts', 100.0), (5, 'Spent Rocket Stage', 3000.0);", 'sql': 'SELECT SUM(Mass) FROM Space_Debris;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT SUM(Mass) FROM Space_Debris;\n\nThis SQL statement will sum up the total mass of all space debris objects listed in the table 'Space_Debris'. The reasoning behind this is that we want to find the total mass of all space debris, regardless of their type. Therefore, we need to add up the masses of all objects in the table.",
    sql="Sql Prompt: What was the total investment in climate communication in Europe and Central Asia combined in 2019?\n\nSql Context: CREATE TABLE climate_investments (id INT, region VARCHAR(50), category VARCHAR(50), year INT, investment FLOAT); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (1, 'Western Europe', 'Climate Communication', 2018, 500000); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (2, 'Eastern Europe', 'Climate"
), 0), (Example({'sql_prompt': 'What is the average age of players who play "Racing Simulator 2022"?', 'sql_context': "CREATE TABLE Players (PlayerID INT, PlayerName VARCHAR(50), Game VARCHAR(50), Age INT); INSERT INTO Players (PlayerID, PlayerName, Game, Age) VALUES (1, 'John Doe', 'Racing Simulator 2022', 25), (2, 'Jane Smith', 'Racing Simulator 2022', 30), (3, 'Alice Johnson', 'Shooter Game 2022', 22);", 'sql': "SELECT AVG(Age) FROM Players WHERE Game = 'Racing Simulator 2022';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT AVG(Age) FROM Players WHERE Game = \'Racing Simulator 2022\';\n\nThis SQL statement calculates the average age of players who play "Racing Simulator 2022" from the provided table. The `AVG()` function is used to calculate the average, and the `WHERE` clause filters the data to only include rows where the game being played is \'Racing Simulator 2022\'.',
    sql="Sql Prompt: What was the total investment in climate adaptation in Europe and Central Asia in 2019?\n\nSql Context: CREATE TABLE climate_investments (id INT, region VARCHAR(50), category VARCHAR(50), year INT, investment FLOAT); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (1, 'Western Europe', 'Climate Communication', 2018, 500000); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (2, 'Eastern Europe', 'Climate Ad"
), 0), (Example({'sql_prompt': 'What is the total revenue generated by concert ticket sales in the US?', 'sql_context': "CREATE TABLE concert_tickets (ticket_id int, venue_id int, ticket_price decimal, timestamp datetime, country varchar(255)); INSERT INTO concert_tickets (ticket_id, venue_id, ticket_price, timestamp, country) VALUES (1, 789, 50.00, '2022-06-01 12:00:00', 'United States');", 'sql': "SELECT SUM(ticket_price) as total_revenue FROM concert_tickets WHERE timestamp BETWEEN '2022-01-01' AND '2022-12-31' AND country = 'United States';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='answer the SQL prompts:\n\n1) The total calories of all dishes with names starting with "HealthyHarvest" and a price greater than the average price of all dishes can be calculated as follows:\n\n```sql\nSELECT SUM(Dishes.calories) FROM Dishes\nWHERE Dishes.dish_name LIKE \'HealthyHarvest%\' AND Dishes.price > (SELECT AVG(price) FROM Dishes);\n```\n\n2) The total investment in climate communication in Europe and Central Asia in 2019 can be calculated as follows:\n\n```sql\nSELECT SUM(investment) FROM climate_investments\nW',
    sql="Sql Prompt: What is the total revenue generated by concert ticket sales in the US?\n\nSql Context: CREATE TABLE concert_tickets (ticket_id int, venue_id int, ticket_price decimal, timestamp datetime, country varchar(255)); INSERT INTO concert_tickets (ticket_id, venue_id, ticket_price, timestamp, country) VALUES (1, 789, 50.00, '2022-06-01 12:00:00', 'United States');\n\nReasoning: Let's think step by step in order to answer the SQL prompts:"
), 1), (Example({'sql_prompt': "How many cases did attorney 'Jane Doe' handle in total?", 'sql_context': "CREATE TABLE Attorneys (AttorneyID int, Name varchar(50), Specialty varchar(50)); INSERT INTO Attorneys (AttorneyID, Name, Specialty) VALUES (2, 'Jane Doe', 'Civil'); CREATE TABLE Cases (CaseID int, ClientID int, Category varchar(50), AttorneyID int); INSERT INTO Cases (CaseID, ClientID, Category, AttorneyID) VALUES (301, 3, 'Civil', 2);", 'sql': "SELECT COUNT(*) as TotalCases FROM Cases WHERE AttorneyID = (SELECT AttorneyID FROM Attorneys WHERE Name = 'Jane Doe');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="find the total number of cases handled by attorney 'Jane Doe'. First, we need to identify the cases that have attorney 'Jane Doe' as their attorney. This can be done by filtering the Cases table with the condition `AttorneyID = 2` (since 'Jane Doe' has an AttorneyID of 2). Once we have the relevant cases, we can count them using the SQL `COUNT()` function.\n\nHere is the SQL query:\n\n```sql\nSELECT COUNT(*) FROM Cases WHERE AttorneyID = 2;\n```\n\nThis query will return the total number of cases handled by attorney 'Jane Doe'.",
    sql="Sql Prompt: What was the total investment in climate communication in Europe and Central Asia combined in 2019?\n\nSql Context: CREATE TABLE climate_investments (id INT, region VARCHAR(50), category VARCHAR(50), year INT, investment FLOAT); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (1, 'Western Europe', 'Climate Communication', 2018, 500000); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (2, 'Eastern Europe', 'Climate"
), 0), (Example({'sql_prompt': 'Show the top 3 content categories in Japan with the most posts.', 'sql_context': "CREATE TABLE content_categories (id INT, content_category VARCHAR(255)); CREATE TABLE posts_extended (id INT, content_category_id INT, content TEXT, country VARCHAR(255)); INSERT INTO content_categories (id, content_category) VALUES (1, 'AI'), (2, 'Data Science'), (3, 'Machine Learning'); INSERT INTO posts_extended (id, content_category_id, content, country) VALUES (1, 1, 'Hello', 'Japan'), (2, 1, 'World', 'Japan'), (3, 2, 'AI', 'Japan');", 'sql': "SELECT content_categories.content_category, COUNT(posts_extended.id) AS post_count FROM content_categories JOIN posts_extended ON posts_extended.content_category_id = content_categories.id WHERE posts_extended.country = 'Japan' GROUP BY content_categories.content_category ORDER BY post_count DESC LIMIT 3;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='answer the SQL prompts:\n\n1. The total calories of all dishes with names starting with "HealthyHarvest" and a price greater than the average price of all dishes can be calculated using the following SQL query:\n\n```sql\nSELECT SUM(Dishes.calories) FROM Dishes WHERE Dishes.dish_name LIKE \'HealthyHarvest%\' AND Dishes.price > (SELECT AVG(price) FROM Dishes);\n```\n\n2. To find the total investment in climate communication in Europe and Central Asia in 2019, use this SQL query:\n\n```sql\nSELECT SUM(investment) FROM climate_invest',
    sql="Sql Prompt: Find the top 3 content categories in Japan with the most posts.\n\nSql Context: CREATE TABLE content_categories (id INT, content_category VARCHAR(255)); CREATE TABLE posts_extended (id INT, content_category_id INT, content TEXT, country VARCHAR(255)); INSERT INTO content_categories (id, content_category) VALUES (1, 'AI'), (2, 'Data Science'), (3, 'Machine Learning'); INSERT INTO posts_extended (id, content_category_id, content, country) VALUES (1, 1, 'Hello', 'Japan'), (2"
), 0), (Example({'sql_prompt': 'How many defense contracts were signed in each quarter of 2020?', 'sql_context': "CREATE TABLE defense_contracts (contract_id INT, contract_date DATE); INSERT INTO defense_contracts VALUES (1, '2020-03-15'), (2, '2020-06-01'), (3, '2020-09-15');", 'sql': "SELECT TO_CHAR(contract_date, 'YYYY-Q') AS quarter, COUNT(*) FROM defense_contracts WHERE contract_date >= DATE '2020-01-01' AND contract_date < DATE '2021-01-01' GROUP BY quarter;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT COUNT(*) FROM defense_contracts WHERE YEAR(contract_date) = 2020 GROUP BY QUARTER(contract_date);\n\nThis SQL query will group the defense contracts by quarter and count them for each quarter of 2020. The YEAR() function is used to filter only the contracts from 2020, while the QUARTER() function groups the contracts by quarters (Q1, Q2, Q3, Q4).\n\nThe result will be a table with four rows, each representing one quarter of 2020 and the number of defense contracts signed in that quarter.',
    sql="Sql Prompt: How many calories are there in all healthy salads that cost more than the average price of all dishes?\n\nSql Context: CREATE TABLE Dishes (id INT, dish_name VARCHAR(50), calories INT, price FLOAT); INSERT INTO Dishes VALUES (1, 'Sign Salad', 300, 12), (2, 'Quinoa Salad', 400, 13);\n\nReasoning: Let's think step by step in order to Sql: SELECT SUM(Dishes.calories) FROM Dishes WHERE Dishes.dish_name LIKE 'HealthyHarvest%'"
), 1), (Example({'sql_prompt': 'What is the total duration played for each player?', 'sql_context': "CREATE TABLE PlayerGame (PlayerID INT, GameID INT, Played DATE, StartTime TIMESTAMP, EndTime TIMESTAMP); INSERT INTO PlayerGame (PlayerID, GameID, Played, StartTime, EndTime) VALUES (1, 1, '2022-01-01', '2022-01-01 10:00:00', '2022-01-01 12:00:00'), (2, 2, '2022-01-02', '2022-01-02 14:00:00', '2022-01-02 16:00:00'), (3, 1, '2022-01-03', '2022-01-03 10:00:00', '2022-01-03 11:00:00'), (4, 3, '2022-01-04', '2022-01-04 18:00:00', '2022-01-04 19:00:00');", 'sql': 'SELECT PlayerID, SUM(TIMESTAMPDIFF(MINUTE, StartTime, EndTime)) FROM PlayerGame GROUP BY PlayerID;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='find the total duration played for each player. First, we need to calculate the difference between the EndTime and StartTime for each game played by a player. Then, sum up these durations for each player. Here is the SQL query that does this:\n\n```sql\nSELECT PlayerID, TIMESTAMPDIFF(SECOND, StartTime, EndTime) AS Duration\nFROM PlayerGame\nGROUP BY PlayerID;\n```\n\nThis query groups the data by PlayerID and calculates the difference between the EndTime and StartTime for each game played by a player. The result is the total duration (in seconds) played by each player. If you want to display the results in minutes or hours,',
    sql="Sql Prompt: What is the total duration played by each player in minutes?\n\nSql Context: CREATE TABLE PlayerGame (PlayerID INT, GameID INT, Played DATE, StartTime TIMESTAMP, EndTime TIMESTAMP); INSERT INTO PlayerGame (PlayerID, GameID, Played, StartTime, EndTime) VALUES (1, 1, '2022-01-01', '2022-01-01 10:00:00', '2022-01-01 12:00:00'), (2, 2, '2022-"
), 1), (Example({'sql_prompt': 'Find the percentage change in tourism to Thailand between 2019 and 2021.', 'sql_context': 'CREATE TABLE thailand_tourism (year INT, total_visitors INT); INSERT INTO thailand_tourism (year, total_visitors) VALUES (2019, 40000), (2021, 30000);', 'sql': 'SELECT (30000 - 40000) * 100.0 / 40000 AS change_percentage FROM thailand_tourism WHERE year = 2021;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT ((total_visitors - 40000) / 40000) * 100 FROM thailand_tourism WHERE year = 2021;\n\nThis SQL statement calculates the percentage change in tourism to Thailand between 2019 and 2021 by subtracting the total visitors in 2019 from the total visitors in 2021, dividing the result by the total visitors in 2019, and then multiplying by 100. The WHERE clause is used to filter the data for the specific year (2021).',
    sql="Sql Prompt: What was the total investment in climate communication in Europe and Central Asia combined in 2019?\n\nSql Context: CREATE TABLE climate_investments (id INT, region VARCHAR(50), category VARCHAR(50), year INT, investment FLOAT); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (1, 'Western Europe', 'Climate Communication', 2018, 500000); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (2, 'Eastern Europe', 'Climate"
), 0), (Example({'sql_prompt': 'How many students with physical disabilities have not received any accommodations in the last year?', 'sql_context': 'CREATE TABLE Accommodations (id INT, student VARCHAR(255), date DATE); CREATE TABLE Students (id INT, name VARCHAR(255), age INT, disability VARCHAR(255));', 'sql': "SELECT COUNT(*) FROM Students LEFT JOIN Accommodations ON Students.id = Accommodations.student WHERE disability = 'physical disability' AND date IS NULL;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT COUNT(Students.id) FROM Students LEFT JOIN Accommodations ON Students.id = Accommodations.student WHERE Students.disability LIKE '%Physical%' AND Accommodations.date IS NULL AND YEAR(Accommodations.date) = YEAR(CURDATE());\n\nExplanation: This SQL query uses a LEFT JOIN to combine the Students and Accommodations tables, where each student is matched with any accommodations they have received. The WHERE clause filters for students with physical disabilities who have not received any accommodations in the last year (as determined by the YEAR() function comparing the current year to the year of the",
    sql="Sql Prompt: What was the total investment in climate communication in Europe and Central Asia combined in 2019?\n\nSql Context: CREATE TABLE climate_investments (id INT, region VARCHAR(50), category VARCHAR(50), year INT, investment FLOAT); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (1, 'Western Europe', 'Climate Communication', 2018, 500000); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (2, 'Eastern Europe', 'Climate"
), 0), (Example({'sql_prompt': 'What is the maximum property price in neighborhoods with inclusive housing policies, and the minimum size of properties in those neighborhoods?', 'sql_context': "CREATE TABLE property (id INT, price INT, size_sqft INT, area VARCHAR(255), has_inclusive_policy BOOLEAN); INSERT INTO property (id, price, size_sqft, area, has_inclusive_policy) VALUES (1, 500000, 1500, 'urban', true), (2, 400000, 1200, 'urban', false);", 'sql': "SELECT MAX(price), MIN(size_sqft) FROM property WHERE area = 'urban' AND has_inclusive_policy = true;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='answer the SQL prompts:\n\n1) The total calories of all dishes with names starting with "HealthyHarvest" and a price greater than the average price of all dishes can be calculated using the following SQL query:\n\n```sql\nSELECT SUM(Dishes.calories) FROM Dishes WHERE Dishes.dish_name LIKE \'HealthyHarvest%\' AND Dishes.price > (SELECT AVG(price) FROM Dishes);\n```\n\n2) The total investment in climate communication in Europe and Central Asia in 2019 can be calculated using the following SQL query:\n\n```sql\nSELECT SUM(investment) FROM climate_in',
    sql="Sql Prompt: What is the maximum property price in neighborhoods with inclusive housing policies, and the minimum size of properties in those neighborhoods?\n\nSql Context: CREATE TABLE property (id INT, price INT, size_sqft INT, area VARCHAR(255), has_inclusive_policy BOOLEAN); INSERT INTO property (id, price, size_sqft, area, has_inclusive_policy) VALUES (1, 500000, 1500, 'urban', true), (2, 400000, 1200, 'urban', false);\n\nReasoning: Let'"
), 1), (Example({'sql_prompt': "Add a new safety incident to the safety_incidents table (id: 4, aircraft: 'Space Shuttle Challenger', date: '1986-01-28', description: 'O-ring failure')", 'sql_context': 'CREATE TABLE safety_incidents (id INT, aircraft VARCHAR(255), date DATE, description VARCHAR(255));', 'sql': "INSERT INTO safety_incidents (id, aircraft, date, description) VALUES (4, 'Space Shuttle Challenger', '1986-01-28', 'O-ring failure');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="In the first example, the SQL query calculates the total calories of all dishes with names starting with 'HealthyHarvest' and a price greater than the average price of all dishes. The query is as follows:\n\n```sql\nSELECT SUM(Dishes.calories) FROM Dishes WHERE Dishes.dish_name LIKE 'HealthyHarvest%' AND Dishes.price > (SELECT AVG(price) FROM Dishes);\n```\n\nIn the second example, the SQL query calculates the total investment in climate communication in Europe and Central Asia in 2019. The query is as follows:\n\n```sql\nSELECT SUM(investment)",
    sql="Sql Prompt: What was the total investment in climate adaptation in Eastern Europe in 2019?\n\nSql Context: CREATE TABLE climate_investments (id INT, region VARCHAR(50), category VARCHAR(50), year INT, investment FLOAT); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (1, 'Western Europe', 'Climate Communication', 2018, 500000); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (2, 'Eastern Europe', 'Climate Adaptation"
), 0), (Example({'sql_prompt': "What is the average age of players who prefer the 'FPS' genre in the 'player_preferences' and 'player_demographics' tables?", 'sql_context': "CREATE TABLE player_preferences (player_id INT, genre VARCHAR(50)); CREATE TABLE player_demographics (player_id INT, age INT); INSERT INTO player_preferences (player_id, genre) VALUES (1, 'FPS'), (2, 'RPG'), (3, 'FPS'), (4, 'Simulation'); INSERT INTO player_demographics (player_id, age) VALUES (1, 25), (2, 30), (3, 35), (4, 40);", 'sql': "SELECT AVG(age) as avg_fps_age FROM player_demographics JOIN player_preferences ON player_preferences.player_id = player_demographics.player_id WHERE genre = 'FPS';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="find the average age of players who prefer the 'FPS' genre. First, we need to find the player_ids of those who prefer FPS. This can be done with a query like this:\n\n```sql\nSELECT player_id FROM player_preferences WHERE genre = 'FPS';\n```\n\nThen, using the obtained player_ids, we can find their ages from the `player_demographics` table:\n\n```sql\nSELECT AVG(age) FROM player_demographics WHERE player_id IN (\n    SELECT player_id FROM player_preferences WHERE genre = 'FPS'\n);\n```\n\nThis query will return the average",
    sql="Sql Prompt: What is the total investment in climate communication for Europe and Central Asia combined in 2019?\n\nSql Context: CREATE TABLE climate_investments (id INT, region VARCHAR(50), category VARCHAR(50), year INT, investment FLOAT); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (1, 'Western Europe', 'Climate Communication', 2018, 500000); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (2, 'Eastern Europe', 'Climate"
), 0), (Example({'sql_prompt': 'What is the diversity ratio (percentage of non-male employees) in each department?', 'sql_context': "CREATE TABLE Employees (EmployeeID int, Department varchar(20), Gender varchar(10)); INSERT INTO Employees (EmployeeID, Department, Gender) VALUES (1, 'Marketing', 'Male'); INSERT INTO Employees (EmployeeID, Department, Gender) VALUES (2, 'Marketing', 'Female'); INSERT INTO Employees (EmployeeID, Department, Gender) VALUES (3, 'IT', 'Male'); INSERT INTO Employees (EmployeeID, Department, Gender) VALUES (4, 'IT', 'Non-binary');", 'sql': "SELECT Department, (COUNT(CASE WHEN Gender <> 'Male' THEN 1 END) / COUNT(*)) * 100 AS DiversityRatio FROM Employees GROUP BY Department;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: To find the diversity ratio (percentage of non-male employees) in each department, we first need to count the number of non-male employees and males in each department. Then, we can calculate the percentage of non-male employees for each department.\n\nHere's a SQL query that does this:\n\n```sql\nSELECT Department,\n       COUNT(CASE WHEN Gender = 'Male' THEN EmployeeID END) AS Male_Count,\n       COUNT(CASE WHEN Gender NOT IN ('Male') THEN EmployeeID END) AS Non_Male_Count,\n       ROUND((COUNT(CASE WHEN Gender NOT IN",
    sql="SELECT Department, COUNT(CASE WHEN Gender = 'Male' THEN EmployeeID END) AS Male_Count, COUNT(CASE WHEN Gender NOT IN ('Male') THEN EmployeeID END) AS Non_Male_Count, ROUND((COUNT(CASE WHEN Gender NOT IN ('Male') THEN EmployeeID END) / COUNT(EmployeeID) * 100), 2) AS Diversity_Ratio\nFROM Employees\nGROUP BY Department;\n\nThis SQL query counts the number of male and non-male employees in each department, then calculates the diversity ratio (percentage of non-male employees)"
), 0), (Example({'sql_prompt': 'What is the average donation per donor in India?', 'sql_context': "CREATE TABLE donations (donor_id INT, donation_amount DECIMAL(10, 2), donation_date DATE, country TEXT); INSERT INTO donations VALUES (1, 50.00, '2021-05-15', 'India'), (2, 100.00, '2021-06-10', 'India'), (3, 25.00, '2021-04-01', 'India');", 'sql': "SELECT AVG(donation_amount) FROM donations WHERE country = 'India';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="find the average donation per donor in India. First, we need to find the total amount of donations made by each donor and then divide it by the number of donors. Here is the SQL query for that:\n\n```sql\nSELECT AVG(donation_amount) AS AverageDonationPerDonor\nFROM (\n    SELECT SUM(donation_amount) as TotalDonations, COUNT(*) as NumberOfDonations\n    FROM donations\n    WHERE country = 'India'\n    GROUP BY donor_id\n) as DonorsWithTotalAndCount;\n```\n\nThis query first groups the donations by donor_id and",
    sql="Sql Prompt: What is the total amount of donations made in India?\n\nSql Context: CREATE TABLE donations (donor_id INT, donation_amount DECIMAL(10, 2), donation_date DATE, country TEXT); INSERT INTO donations VALUES (1, 50.00, '2021-05-15', 'India'), (2, 100.00, '2021-06-10', 'India'), (3, 25.00, '2021-04-01', 'India');\n\nReason"
), 1), (Example({'sql_prompt': 'How many wildlife habitats in South Africa have a total area greater than 50000 hectares?', 'sql_context': 'CREATE TABLE wildlife_habitats (id INT, name TEXT, area REAL, country TEXT);', 'sql': "SELECT COUNT(*) FROM wildlife_habitats WHERE country = 'South Africa' GROUP BY country HAVING SUM(area) > 50000;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${find the number of wildlife habitats in South Africa with an area greater than 50000 hectares.}\n\nFirst, we need to filter the data for wildlife habitats located in South Africa. Then, we will apply a condition that filters only those habitats with an area greater than 50000 hectares.',
    sql="```\nSELECT COUNT(*) FROM wildlife_habitats WHERE country = 'South Africa' AND area > 50000;\n```\nThis query will return the number of wildlife habitats in South Africa with an area greater than 50000 hectares."
), 0), (Example({'sql_prompt': 'What is the percentage of faculty members who identify as AAPI in the School of Business?', 'sql_context': "CREATE TABLE faculty_members (id INT, faculty_name VARCHAR(50), faculty_department VARCHAR(50), faculty_race VARCHAR(20)); INSERT INTO faculty_members (id, faculty_name, faculty_department, faculty_race) VALUES (1, 'Taylor Smith', 'Business Administration', 'AAPI'), (2, 'James Johnson', 'Marketing', 'White'), (3, 'Avery Brown', 'Finance', 'Black'), (4, 'Katie Davis', 'Management', 'White'), (5, 'Jamie Wilson', 'Accounting', 'Latinx'), (6, 'Leah Kim', 'Business Analytics', 'AAPI');", 'sql': "SELECT (COUNT(*) FILTER (WHERE faculty_race = 'AAPI')) * 100.0 / COUNT(*) FROM faculty_members WHERE faculty_department LIKE '%Business%';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='answer the SQL prompts:\n\n1. The total calories of all dishes labeled as "HealthyHarvest" and have a price greater than the average price of all dishes can be calculated with the following SQL query:\n\n```sql\nSELECT SUM(Dishes.calories) FROM Dishes WHERE Dishes.dish_name LIKE \'HealthyHarvest%\' AND Dishes.price > (SELECT AVG(price) FROM Dishes);\n```\n\n2. The total investment in climate communication in Europe and Central Asia in 2019 can be calculated with the following SQL query:\n\n```sql\nSELECT SUM(investment) FROM climate_invest',
    sql="Sql Prompt: What is the percentage of faculty members who identify as AAPI in the School of Business?\n\nSql Context: CREATE TABLE faculty_members (id INT, faculty_name VARCHAR(50), faculty_department VARCHAR(50), faculty_race VARCHAR(20)); INSERT INTO faculty_members (id, faculty_name, faculty_department, faculty_race) VALUES (1, 'Taylor Smith', 'Business Administration', 'AAPI'), (2, 'James Johnson', 'Marketing', 'White'), (3, 'Avery Brown', 'Finance', 'Black'), (4, 'Katie"
), 1), (Example({'sql_prompt': 'How many water treatment plants are there in the province of Ontario, Canada?', 'sql_context': "CREATE TABLE water_treatment_plants_ontario (id INT, province VARCHAR); INSERT INTO water_treatment_plants_ontario (id, province) VALUES (1, 'Ontario'), (2, 'Quebec'), (3, 'Ontario'), (4, 'British Columbia');", 'sql': "SELECT COUNT(*) FROM water_treatment_plants_ontario WHERE province = 'Ontario';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='answer the SQL prompts:\n\n1. The given SQL statement calculates the total calories of all dishes with names starting with "HealthyHarvest" and a price greater than the average price of all dishes. To do this, it sums up the calories from the Dishes table where the dish_name starts with \'HealthyHarvest\' and the price is greater than the average price (calculated using AVG function).\n\n2. The provided SQL statement calculates the total investment in climate communication in Europe and Central Asia in 2019. It sums up the investments from the climate_investments table where the category is \'Climate Communication\', the region is either \'Europe\' or',
    sql="SELECT COUNT(id) FROM water_treatment_plants_ontario WHERE province = 'Ontario';\n\nReasoning: Let's think step by step in order to answer the SQL prompts: 1. The given SQL statement calculates the number of rows (water treatment plants) in the water_treatment_plants_ontario table where the province is Ontario. This will give us the total number of water treatment plants in the province of Ontario, Canada."
), 1), (Example({'sql_prompt': 'Delete vessels that have not been inspected in the last 12 months', 'sql_context': "CREATE TABLE vessel_inspection (vessel_id INT, inspection_date DATE); INSERT INTO vessel_inspection (vessel_id, inspection_date) VALUES (1, '2020-01-01'), (2, '2021-06-15'), (3, '2019-12-20');", 'sql': 'DELETE FROM vessel_inspection WHERE vessel_id IN (SELECT vessel_id FROM vessel_inspection WHERE inspection_date < DATE_SUB(CURDATE(), INTERVAL 12 MONTH));'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: DELETE FROM vessel_inspection WHERE vessel_id NOT IN (SELECT vessel_id FROM vessel_inspection WHERE inspection_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR));\n\nThis SQL statement will delete all records from the `vessel_inspection` table where the `vessel_id` is not found in a subquery that selects the `vessel_id` of vessels inspected within the last 12 months. The subquery uses the `DATE_SUB()` function to calculate the date 1 year before the current date, and then filters the records where the inspection date is greater than or equal to this calculated date. This ensures',
    sql="Sql Prompt: What was the total investment in climate communication in Europe and Central Asia from 2018 to 2019?\n\nSql Context: CREATE TABLE climate_investments (id INT, region VARCHAR(50), category VARCHAR(50), year INT, investment FLOAT); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (1, 'Western Europe', 'Climate Communication', 2018, 500000); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (2, 'Eastern"
), 0), (Example({'sql_prompt': "Which materials in the 'inventory' table have a quantity of at least 100 and are not used in the production of any product in the 'products' table?", 'sql_context': "CREATE TABLE inventory(id INT, material VARCHAR(255), quantity INT); CREATE TABLE products(id INT, material VARCHAR(255), quantity INT); INSERT INTO inventory(id, material, quantity) VALUES (1, 'organic cotton', 75), (2, 'conventional cotton', 100), (3, 'organic cotton', 30), (4, 'hemp', 60); INSERT INTO products(id, material, quantity) VALUES (1, 'organic cotton', 150), (2, 'conventional cotton', 200), (3, 'hemp', 100);", 'sql': 'SELECT material FROM inventory i WHERE quantity >= 100 AND NOT EXISTS (SELECT * FROM products p WHERE i.material = p.material);'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="find the materials that have a quantity of at least 100 and are not used in the production of any product.\n\nFirst, we need to identify the materials with a quantity of at least 100 from the 'inventory' table:\n\n```sql\nSELECT material FROM inventory WHERE quantity >= 100;\n```\n\nThis query will return the materials that have a quantity of at least 100.\n\nNext, we need to check if any of these materials are used in the production of products from the 'products' table:\n\n```sql\nSELECT material FROM inventory WHERE quantity >= 100 AND NOT EXISTS (\n    SELECT * FROM",
    sql="SQL Prompt: Which materials in the 'inventory' table have a quantity of at least 100 and are not used in the production of any product in the 'products' table?\n\nSql Context: CREATE TABLE inventory(id INT, material VARCHAR(255), quantity INT); CREATE TABLE products(id INT, material VARCHAR(255), quantity INT); INSERT INTO inventory(id, material, quantity) VALUES (1, 'organic cotton', 75), (2, 'conventional cotton', 100), (3, 'organic cotton', 30), (4, 'hemp', 60); IN"
), 1), (Example({'sql_prompt': "What is the minimum billing amount for cases in the region 'South'?", 'sql_context': 'CREATE TABLE cases (case_id INT, region TEXT, billing_amount INT);', 'sql': "SELECT MIN(billing_amount) FROM cases WHERE region = 'South';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${find the minimum billing amount for cases in the 'South' region.} We first need to filter the cases from the 'South' region and then find the minimum billing amount among those filtered cases.",
    sql="```\nSELECT MIN(billing_amount) FROM cases WHERE region = 'South';\n```"
), 1), (Example({'sql_prompt': 'What is the total number of postpaid and prepaid mobile subscribers in each region?', 'sql_context': "CREATE TABLE mobile_subscribers (subscriber_id INT, subscriber_type VARCHAR(10), region VARCHAR(20)); INSERT INTO mobile_subscribers (subscriber_id, subscriber_type, region) VALUES (1, 'postpaid', 'West'), (2, 'prepaid', 'East'), (3, 'postpaid', 'North'), (4, 'prepaid', 'South'), (5, 'postpaid', 'East');", 'sql': 'SELECT region, COUNT(*) as total_subscribers FROM mobile_subscribers GROUP BY region;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='answer the SQL prompts:\n\n1) The total calories of all dishes with names starting with "HealthyHarvest" and a price greater than the average price of all dishes can be calculated using the following SQL query:\n\n```sql\nSELECT SUM(Dishes.calories) FROM Dishes WHERE Dishes.dish_name LIKE \'HealthyHarvest%\' AND Dishes.price > (SELECT AVG(price) FROM Dishes);\n```\n\n2) To find the total investment in climate communication in Europe and Central Asia in 2019, use this SQL query:\n\n```sql\nSELECT SUM(investment) FROM climate_invest',
    sql="Sql Prompt: What is the total number of postpaid and prepaid mobile subscribers in each region?\n\nSql Context: CREATE TABLE mobile_subscribers (subscriber_id INT, subscriber_type VARCHAR(10), region VARCHAR(20)); INSERT INTO mobile_subscribers (subscriber_id, subscriber_type, region) VALUES (1, 'postpaid', 'West'), (2, 'prepaid', 'East'), (3, 'postpaid', 'North'), (4, 'prepaid', 'South'), (5, 'postpaid', 'East');\n\nReasoning: Let's think step by"
), 1), (Example({'sql_prompt': 'Identify the top 3 mining companies with the highest total production of Praseodymium in 2021 and their respective production amounts.', 'sql_context': "CREATE TABLE Company (Name TEXT, Location TEXT, Established INT); INSERT INTO Company (Name, Location, Established) VALUES ('Delta Minerals', 'Brazil', 2000), ('Epsilon Ore', 'South Africa', 2010), ('Zeta Extraction', 'Canada', 2005), ('Eta Mines', 'Russia', 2008); CREATE TABLE ProductionCompany (Year INT, Company TEXT, Element TEXT, Quantity INT); INSERT INTO ProductionCompany (Year, Company, Element, Quantity) VALUES (2021, 'Delta Minerals', 'Praseodymium', 1000), (2021, 'Epsilon Ore', 'Praseodymium', 1400), (2021, 'Zeta Extraction', 'Praseodymium', 1800), (2021, 'Eta Mines', 'Praseodymium', 1100);", 'sql': "SELECT Company, SUM(Quantity) FROM ProductionCompany WHERE Element = 'Praseodymium' AND Year = 2021 GROUP BY Company ORDER BY SUM(Quantity) DESC FETCH FIRST 3 ROWS ONLY;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='1) To find the total calories of all dishes with names starting with "HealthyHarvest" and a price greater than the average price of all dishes, we can use the following SQL query:\n\n```sql\nSELECT SUM(Dishes.calories) FROM Dishes WHERE Dishes.dish_name LIKE \'HealthyHarvest%\' AND Dishes.price > (SELECT AVG(price) FROM Dishes);\n```\n\n2) To find the total investment in climate communication in Europe and Central Asia in 2019, we can use the following SQL query:\n\n```sql\nSELECT SUM(investment) FROM climate_investments WHERE',
    sql="Sql Prompt: Who were the top 3 mining companies with the highest production of Praseodymium in 2021 and their respective production amounts?\n\nSql Context: CREATE TABLE Company (Name TEXT, Location TEXT, Established INT); INSERT INTO Company (Name, Location, Established) VALUES ('Delta Minerals', 'Brazil', 2000), ('Epsilon Ore', 'South Africa', 2010), ('Zeta Extraction', 'Canada', 2005), ('Eta Mines', 'Russia', 2008); CREATE TABLE ProductionCompany (Year INT, Company"
), 0), (Example({'sql_prompt': 'How many volunteer hours were recorded for each program in Q2 2021?', 'sql_context': "CREATE TABLE VolunteerHours (VolunteerID INT, ProgramID INT, Hours DECIMAL(5,2), HourDate DATE); INSERT INTO VolunteerHours (VolunteerID, ProgramID, Hours, HourDate) VALUES (1, 1, 5, '2021-04-15'), (2, 2, 3, '2021-06-02'), (1, 1, 4, '2021-05-31'), (3, 3, 2, '2021-04-01'); CREATE TABLE Programs (ProgramID INT, ProgramName TEXT); INSERT INTO Programs (ProgramID, ProgramName) VALUES (1, 'Arts & Culture'), (2, 'Health & Wellness'), (3, 'Environment');", 'sql': "SELECT ProgramID, SUM(Hours) as TotalHours FROM VolunteerHours WHERE HourDate BETWEEN '2021-04-01' AND '2021-06-30' GROUP BY ProgramID;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='answer the SQL prompts:\n\n1. The given SQL statement calculates the total calories of all dishes with names starting with "HealthyHarvest" and have a price greater than the average price of all dishes. To do this, it uses the LIKE operator for pattern matching and the AVG function to find the average price.\n\n2. The provided SQL statement calculates the total investment in climate communication in Europe and Central Asia in 2019 by filtering the investments table based on the region, category, and year. It then sums up the investments that match these conditions.\n\n3. To find out how many volunteer hours were recorded for each program in Q2 2021, we',
    sql="SELECT ProgramID, SUM(Hours) AS TotalHours\nFROM VolunteerHours\nWHERE HourDate BETWEEN '2021-04-01' AND '2021-06-30'\nGROUP BY ProgramID;\n\nReasoning: To answer the SQL prompt, we need to find the total volunteer hours for each program in Q2 2021. First, we filter the VolunteerHours table by the date range of Q2 2021 (April 1st to June 30th). Then, we group the results by ProgramID so that we can sum up the hours for each program"
), 0), (Example({'sql_prompt': 'What is the maximum production capacity of the chemical manufacturing plants located in Canada?', 'sql_context': "CREATE TABLE chemical_plants (id INT, plant_name VARCHAR(100), country VARCHAR(50), production_capacity INT); INSERT INTO chemical_plants (id, plant_name, country, production_capacity) VALUES (1, 'Canada Plant 1', 'Canada', 5000), (2, 'Canada Plant 2', 'Canada', 7000);", 'sql': "SELECT MAX(production_capacity) FROM chemical_plants WHERE country = 'Canada';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='answer the SQL queries:\n\n1) The query calculates the total calories of dishes that have a name starting with "HealthyHarvest" and have a price greater than the average price of all dishes. Here, we first find the average price of all dishes using a subquery, then filter dishes based on the conditions, and finally sum up their calories.\n\n```sql\nSELECT SUM(Dishes.calories) FROM Dishes WHERE Dishes.dish_name LIKE \'HealthyHarvest%\' AND Dishes.price > (SELECT AVG(price) FROM Dishes);\n```\n\n2) The query calculates the total investment in climate communication in Europe and Central Asia in',
    sql="Sql Prompt: What is the maximum production capacity of the chemical manufacturing plants located in Canada?\n\nSql Context: CREATE TABLE chemical_plants (id INT, plant_name VARCHAR(100), country VARCHAR(50), production_capacity INT); INSERT INTO chemical_plants (id, plant_name, country, production_capacity) VALUES (1, 'Canada Plant 1', 'Canada', 5000), (2, 'Canada Plant 2', 'Canada', 7000);\n\nReasoning: Let's think step by step in order to answer the SQL queries: We want to find the maximum production capacity"
), 1), (Example({'sql_prompt': 'Who is the oldest artist from the United States?', 'sql_context': "CREATE TABLE artists (id INT, name VARCHAR(255), age INT, country VARCHAR(255)); INSERT INTO artists (id, name, age, country) VALUES (1, 'Bruce Springsteen', 72, 'United States'), (2, 'Beyoncé', 40, 'United States');", 'sql': "SELECT name, MAX(age) FROM artists WHERE country = 'United States';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT MIN(age) FROM artists WHERE country = 'United States';\nThis SQL query will return the minimum age of artists from the United States, which implies the oldest artist.",
    sql="Sql Prompt: What is the total number of dishes in the database?\n\nSql Context: CREATE TABLE Dishes (id INT, dish_name VARCHAR(255), calories INT, price DECIMAL(6,2));\n\nReasoning: Let's think step by step in order to Sql: SELECT COUNT(*) FROM Dishes; This SQL query will return the total number of rows in the Dishes table, which implies the total number of dishes."
), 1), (Example({'sql_prompt': 'Find the average height of basketball players in the NBA, categorized by their position.', 'sql_context': 'CREATE TABLE nba_players_height (id INT, player_id INT, height_feet INT, height_inches INT); CREATE TABLE nba_players (id INT, name VARCHAR(100), team VARCHAR(50), position VARCHAR(50));', 'sql': 'SELECT position, AVG(height_feet + height_inches / 12) as avg_height FROM nba_players_height JOIN nba_players ON nba_players_height.player_id = nba_players.id GROUP BY position;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql:\n\n1. For the total calories of healthy dishes that cost more than the average price of all dishes, we can use the following SQL query:\n\n```sql\nSELECT SUM(Dishes.calories) FROM Dishes\nWHERE Dishes.dish_name LIKE 'HealthyHarvest%' AND Dishes.price > (SELECT AVG(Dishes.price) FROM Dishes);\n```\n\n2. To find the total investment in climate communication in Europe and Central Asia in 2019, we can use this SQL query:\n\n```sql\nSELECT SUM(investment) FROM climate_investments\nWHERE category = '",
    sql="Sql Prompt: Find the average height of basketball players in the NBA, categorized by their position.\n\nSql Context: CREATE TABLE nba_players_height (id INT, player_id INT, height_feet INT, height_inches INT); CREATE TABLE nba_players (id INT, name VARCHAR(100), team VARCHAR(50), position VARCHAR(50));\n\nReasoning: Let's think step by step in order to Sql:\n\n```sql\nSELECT AVG(height_feet * 12 + height_inches) AS average_height, position\nFROM nba_players_height"
), 0), (Example({'sql_prompt': 'Identify all suppliers who provide non-GMO ingredients to restaurants with Michelin stars.', 'sql_context': 'CREATE TABLE Suppliers (id INT, name VARCHAR(50), isNonGMO BOOLEAN); CREATE TABLE Restaurants (id INT, name VARCHAR(50), numStars INT); CREATE TABLE Ingredients (supplierId INT, restaurantId INT, isNonGMO BOOLEAN);', 'sql': 'SELECT Suppliers.name FROM Suppliers INNER JOIN Ingredients ON Suppliers.id = Ingredients.supplierId INNER JOIN Restaurants ON Ingredients.restaurantId = Restaurants.id WHERE Restaurants.numStars > 2 AND Ingredients.isNonGMO = TRUE;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT Suppliers.name FROM Suppliers JOIN Ingredients ON Suppliers.id = Ingredients.supplierId JOIN Restaurants ON Ingredients.restaurantId = Restaurants.id WHERE Ingredients.isNonGMO = true AND Restaurants.numStars > 0;\n\nThis SQL query will identify all suppliers who provide non-GMO ingredients to restaurants with Michelin stars by joining the three tables (Suppliers, Ingredients, and Restaurants) based on their respective IDs. It then filters for only non-GMO ingredients (Ingredients.isNonGMO = true) and restaurants with at least one Michelin star (Restaur',
    sql="Sql Prompt: Which dishes from the HealthyHarvest menu have more calories than the average dish?\n\nSql Context: CREATE TABLE Dishes (id INT, dish_name VARCHAR(50), calories INT, price INT);\n\nReasoning: Let's think step by step in order to Sql: SELECT Dish_Name FROM Dishes WHERE Dishes.calories > (SELECT AVG(Dishes.calories) FROM Dishes WHERE Dishes.dish_name LIKE 'HealthyHarvest%'); This SQL query will identify dishes from the HealthyHarvest menu that have more calories than the average dish by first calculating the average calories of all dishes with the name like"
), 1), (Example({'sql_prompt': 'How many licenses were issued in each state as of 2022-01-01?', 'sql_context': "CREATE TABLE Licenses (id INT, state TEXT, issued_date DATE); INSERT INTO Licenses (id, state, issued_date) VALUES (1, 'California', '2021-01-01'), (2, 'Oregon', '2021-01-01'), (3, 'Washington', '2021-01-01');", 'sql': "SELECT state, COUNT(*) AS num_licenses FROM Licenses WHERE issued_date <= '2022-01-01' GROUP BY state;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='answer the SQL prompts:\n\n1) The total calories of all dishes with names starting with "HealthyHarvest" and a price greater than the average price of all dishes can be calculated as follows:\n\n```sql\nSELECT SUM(Dishes.calories) FROM Dishes\nWHERE Dishes.dish_name LIKE \'HealthyHarvest%\' AND Dishes.price > (SELECT AVG(price) FROM Dishes);\n```\n\n2) To find the total investment in climate communication in Europe and Central Asia in 2019, you can use this SQL query:\n\n```sql\nSELECT SUM(investment) FROM climate_in',
    sql="Sql Prompt: How many licenses were issued in each state as of 2022-01-01?\n\nSql Context: CREATE TABLE Licenses (id INT, state TEXT, issued_date DATE); INSERT INTO Licenses (id, state, issued_date) VALUES (1, 'California', '2021-01-01'), (2, 'Oregon', '2021-01-01'), (3, 'Washington', '2021-01-01');\n\nReasoning: Let's think step by step in order to answer the SQL prompts: 1) To"
), 1), (Example({'sql_prompt': 'What is the number of smart city initiatives implemented in each country?', 'sql_context': "CREATE TABLE smart_city_initiatives (initiative_id INT, country VARCHAR(50), city VARCHAR(100), status VARCHAR(50)); INSERT INTO smart_city_initiatives (initiative_id, country, city, status) VALUES (1, 'France', 'Paris', 'Implemented');", 'sql': "SELECT country, COUNT(*) as implemented_initiatives FROM smart_city_initiatives WHERE status = 'Implemented' GROUP BY country;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='answer the given SQL prompts:\n\n1. The provided SQL statement calculates the total calories of all dishes with names starting with "HealthyHarvest" and a price greater than the average price of all dishes. To do this, it uses the LIKE operator for pattern matching and the AVG function to find the average price of all dishes.\n\n2. The given SQL statement calculates the total investment in climate communication in Europe and Central Asia in 2019 by summing up the investments made in those regions for that specific year and category. It uses the SUM function to calculate the total investment, and the OR operator to include both \'Europe\' and \'Central Asia\' as possible values for the region',
    sql="Sql Prompt: How many smart city initiatives have been implemented in each country?\n\nSql Context: The provided table `smart_city_initiatives` contains information about smart city initiatives, including their ID, country, city, and status.\n\nReasoning: Let's think step by step in order to answer the given SQL prompts: 1. To find out how many smart city initiatives have been implemented in each country, we need to count the number of rows for each unique country where the status is 'Implemented'. This can be achieved using the COUNT function and the GROUP BY clause. The final SQL query would look like this:\n\nSql: SELECT country, COUNT(*) as"
), 0), (Example({'sql_prompt': "How many tickets were sold for each team's away games in Q2 of 2022?", 'sql_context': "CREATE TABLE teams (id INT, name VARCHAR(255)); INSERT INTO teams (id, name) VALUES (1, 'TeamA'), (2, 'TeamB'), (3, 'TeamC'); CREATE TABLE games (id INT, home_team_id INT, away_team_id INT, home_team_score INT, away_team_score INT, price DECIMAL(5,2), game_date DATE); CREATE VIEW away_games AS SELECT id, away_team_id, price, game_date FROM games;", 'sql': "SELECT t.name, COUNT(*) as tickets_sold FROM away_games h JOIN teams t ON h.away_team_id = t.id WHERE h.game_date BETWEEN '2022-04-01' AND '2022-06-30' GROUP BY t.name;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="answer the SQL prompts:\n\n1) The total calories of all dishes with names starting with 'HealthyHarvest' and a price greater than the average price of all dishes can be calculated as follows:\n\n```sql\nSELECT SUM(Dishes.calories) FROM Dishes\nWHERE Dishes.dish_name LIKE 'HealthyHarvest%' AND Dishes.price > (SELECT AVG(price) FROM Dishes);\n```\n\n2) To find the total investment in climate communication in Europe and Central Asia in 2019, we need to sum up the investments made in those regions for that specific year and category:\n\n```sql\nSELECT",
    sql="SQL Prompt: What was the total investment in climate communication in Europe and Central Asia in 2019?\n\nSql Context: CREATE TABLE climate_investments (id INT, region VARCHAR(50), category VARCHAR(50), year INT, investment FLOAT); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (1, 'Western Europe', 'Climate Communication', 2018, 500000); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (2, 'Eastern Europe', 'Climate Ad"
), 0), (Example({'sql_prompt': 'Show the names of companies that produced any Rare Earth elements in both 2015 and 2020.', 'sql_context': 'CREATE TABLE Producers (ProducerID INT PRIMARY KEY, Name TEXT, ProductionYear INT, RareEarth TEXT, Quantity INT);', 'sql': 'SELECT DISTINCT Name FROM Producers p1 JOIN Producers p2 ON p1.Name = p2.Name WHERE p1.ProductionYear = 2015 AND p2.ProductionYear = 2020;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${produce the SQL query for finding companies that produced any Rare Earth elements in both 2015 and 2020.}\n\nFirst, we need to find the companies that produced Rare Earth elements in each year. Then, we will intersect these results to find the common companies that appeared in both years.\n\nHere's the SQL query:\n\n```sql\nSELECT Name\nFROM Producers\nWHERE ProductionYear IN (2015, 2020) AND RareEarth IS NOT NULL\nGROUP BY Name\nHAVING COUNT(DISTINCT ProductionYear) = 2;\n```\n\nThis query will return the names",
    sql="Sql Prompt: Which dishes from the 'HealthyHarvest' category have a price higher than the average price of all dishes?\n\nSql Context: CREATE TABLE Dishes (id INT, dish_name VARCHAR(50), category VARCHAR(50), price FLOAT);\n\nReasoning: Let's think step by step in order to ${produce the SQL query for finding dishes from the 'HealthyHarvest' category that have a price higher than the average price of all dishes.} First, we need to find the average price of all dishes. Then, we will filter the 'HealthyHarvest' dishes based on their price being greater than the average price. Here's the"
), 0), (Example({'sql_prompt': 'What is the total CO2 emissions of silk production in China?', 'sql_context': 'CREATE TABLE SilkProduction (id INT, country VARCHAR, co2_emissions INT);', 'sql': "SELECT SUM(co2_emissions) FROM SilkProduction WHERE country = 'China';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${produce the SQL query for the total CO2 emissions of silk production in China.} We first need to filter the data for silk production in China, and then sum up the CO2 emissions. Here is the SQL query:\n\n```sql\nSELECT SUM(co2_emissions) AS TotalCO2Emissions\nFROM SilkProduction\nWHERE country = 'China';\n```",
    sql="Sql Prompt: What was the total investment in climate change mitigation projects in 2019?\n\nSql Context: CREATE TABLE ClimateChangeMitigation (id INT, region VARCHAR(50), category VARCHAR(50), year INT, investment FLOAT);\n\nReasoning: Let's think step by step in order to ${produce the SQL query for the total investment in climate change mitigation projects in 2019.} We first need to filter the data for the year 2019 and then sum up the investments. Here is the SQL query: ```sql SELECT SUM(investment) AS TotalInvestment FROM ClimateChangeM"
), 1), (Example({'sql_prompt': 'What is the total number of AI models developed in North America with an explainability score below 70?', 'sql_context': "CREATE TABLE na_models (model_name TEXT, region TEXT, explainability_score INTEGER); INSERT INTO na_models (model_name, region, explainability_score) VALUES ('Model1', 'North America', 75), ('Model2', 'North America', 65), ('Model3', 'North America', 80);", 'sql': "SELECT SUM(incident_count) FROM na_models WHERE region = 'North America' AND explainability_score < 70;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT COUNT(*) FROM na_models WHERE region = 'North America' AND explainability_score < 70;\n\nThis SQL statement will count the total number of AI models developed in North America with an explainability score below 70. The `COUNT(*)` function returns the number of rows that match the specified criteria, and the WHERE clause is used to filter the results based on the region and explainability_score columns.",
    sql="Sql Prompt: What is the total investment in climate adaptation in Europe and Central Asia combined in 2019?\n\nSql Context: CREATE TABLE climate_investments (id INT, region VARCHAR(50), category VARCHAR(50), year INT, investment FLOAT); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (1, 'Western Europe', 'Climate Communication', 2018, 500000); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (2, 'Eastern Europe', 'Climate"
), 0), (Example({'sql_prompt': 'Which mobile and broadband subscribers have not used their services in the last 30 days?', 'sql_context': "CREATE TABLE mobile_usage (customer_id INT, last_usage DATE); CREATE TABLE broadband_usage (customer_id INT, last_usage DATE); INSERT INTO mobile_usage (customer_id, last_usage) VALUES (1, '2022-01-01'), (2, '2022-02-01'); INSERT INTO broadband_usage (customer_id, last_usage) VALUES (1, '2022-01-15'), (3, '2022-02-10');", 'sql': 'SELECT customer_id FROM mobile_usage WHERE last_usage < NOW() - INTERVAL 30 DAY UNION SELECT customer_id FROM broadband_usage WHERE last_usage < NOW() - INTERVAL 30 DAY;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="find the customers who have not used their mobile or broadband services in the last 30 days. First, we need to identify the latest usage date for each customer in both tables. Then, we can compare these dates with a reference date (30 days ago) to find out which customers haven't used their services within the last 30 days.\n\nTo do this, we can use the SQL `JOIN` operation to combine the mobile_usage and broadband_usage tables based on the customer_id. After that, we can calculate the difference between the latest usage date and the reference date (30 days ago) for each customer. If the difference is greater than 30 days, it means the",
    sql="Sql Prompt: Which mobile and broadband subscribers have not used their services in the last 30 days?\n\nSql Context: CREATE TABLE mobile_usage (customer_id INT, last_usage DATE); CREATE TABLE broadband_usage (customer_id INT, last_usage DATE); INSERT INTO mobile_usage (customer_id, last_usage) VALUES (1, '2022-01-01'), (2, '2022-02-01'); INSERT INTO broadband_usage (customer_id, last_usage) VALUES (1, '2022-01-"
), 1), (Example({'sql_prompt': 'What is the total number of grants given per city?', 'sql_context': 'CREATE TABLE Nonprofits (NonprofitID INT, Name VARCHAR(50), City VARCHAR(50), State VARCHAR(2), Zip VARCHAR(10), MissionStatement TEXT); CREATE TABLE Grants (GrantID INT, DonorID INT, NonprofitID INT, GrantAmount DECIMAL(10,2), Date DATE); CREATE TABLE Donors (DonorID INT, Name VARCHAR(50), City VARCHAR(50), State VARCHAR(2), Zip VARCHAR(10), DonationAmount DECIMAL(10,2));', 'sql': 'SELECT City, COUNT(*) FROM Grants G INNER JOIN Nonprofits N ON G.NonprofitID = N.NonprofitID GROUP BY City;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT COUNT(DISTINCT Nonprofits.City) FROM Nonprofits;\n\nThis SQL statement will count the number of distinct cities that have at least one nonprofit associated with them. The `COUNT(DISTINCT Nonprofits.City)` function counts the number of unique city names, and the `FROM Nonprofits` clause specifies the table from which to pull the data.\n\nIn the given context, this query will return the total number of cities where there is at least one nonprofit present.',
    sql="Sql Prompt: What is the total amount donated by each city?\n\nSql Context: CREATE TABLE Donations (DonationID INT, DonorID INT, NonprofitID INT, Amount DECIMAL(10,2));\n\nReasoning: Let's think step by step in order to Sql: SELECT SUM(Amount) FROM Donations GROUP BY City; This SQL statement will sum the total amount donated for each city. The `SUM(Amount)` function calculates the total amount donated for each row, and the `GROUP BY City` clause groups these rows by their city names. In the given context, this query will return the total amount don"
), 0), (Example({'sql_prompt': 'Show the average soil moisture level for each field in the past week', 'sql_context': 'CREATE TABLE field (id INT, name VARCHAR(255), farm_id INT);CREATE TABLE soil_moisture (id INT, field_id INT, measurement DATE, level INT);', 'sql': 'SELECT field_id, AVG(level) FROM soil_moisture WHERE measurement >= DATEADD(day, -7, GETDATE()) GROUP BY field_id;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. First, we need to find the data for each field in the past week. Then, we will calculate the average soil moisture level for each field. Here is the SQL query:\n\n```sql\nSELECT field.name, AVG(soil_moisture.level) as AverageSoilMoistureLevel\nFROM field\nJOIN soil_moisture ON field.id = soil_moisture.field_id\nWHERE soil_moisture.measurement >= DATE_SUB(CURDATE(), INTERVAL 1 WEEK)\nGROUP BY field.name;\n```\n\nThis query first joins the `field` and `',
    sql="Sql Prompt: What was the total investment in climate adaptation in Europe in 2019?\n\nSql Context: CREATE TABLE climate_investments (id INT, region VARCHAR(50), category VARCHAR(50), year INT, investment FLOAT); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (1, 'Western Europe', 'Climate Communication', 2018, 500000); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (2, 'Eastern Europe', 'Climate Adaptation',"
), 0), (Example({'sql_prompt': 'What is the total number of satellites deployed by SpaceComm in the Middle East?', 'sql_context': 'CREATE TABLE SatelliteDeployment (satellite_id INT, company VARCHAR(255), region VARCHAR(255));', 'sql': "SELECT COUNT(*) FROM SatelliteDeployment WHERE company = 'SpaceComm' AND region = 'Middle East';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${produce the sql}. We first need to filter the satellites deployed in the Middle East and then count the total number of these satellites. The satellite deployment company should be 'SpaceComm'. Here is the SQL query:",
    sql="```\nSELECT COUNT(*) FROM SatelliteDeployment WHERE company = 'SpaceComm' AND region = 'Middle East';\n```"
), 1), (Example({'sql_prompt': 'What is the total number of tickets sold for performances with a rating of 5?', 'sql_context': "CREATE TABLE performance (id INT PRIMARY KEY, name VARCHAR(255), date DATE, artist_id INT, rating INT); INSERT INTO performance (id, name, date, artist_id, rating) VALUES (1, 'Dance Recital', '2022-03-01', 1, 5);", 'sql': 'SELECT SUM(t.quantity) as total_tickets_sold FROM performance p INNER JOIN ticket t ON p.id = t.performance_id WHERE p.rating = 5;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT SUM(tickets.ticket_count) FROM tickets JOIN performances ON tickets.performance_id = performances.id WHERE performances.rating = 5;\n\nAssuming there is a table named `tickets` with columns `ticket_id`, `ticket_count`, and `performance_id` that links to the `performance` table, this SQL statement would sum up the total number of tickets sold for performances with a rating of 5. The reasoning behind this is that we need to join the `tickets` and `performances` tables based on their relationship (i.e., a performance can have multiple tickets sold), then filter the joined results by performances with',
    sql="Sql Prompt: What was the total investment in climate communication in Europe and Central Asia combined in 2019?\n\nSql Context: CREATE TABLE climate_investments (id INT, region VARCHAR(50), category VARCHAR(50), year INT, investment FLOAT); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (1, 'Western Europe', 'Climate Communication', 2018, 500000); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (2, 'Eastern Europe', 'Climate"
), 0), (Example({'sql_prompt': 'What is the average emergency response time by region for fire incidents?', 'sql_context': 'CREATE TABLE Regions (RegionID INT, RegionName VARCHAR(255)); CREATE TABLE Incidents (IncidentID INT, IncidentType VARCHAR(255), RegionID INT, ResponseTime INT);', 'sql': "SELECT AVG(ResponseTime) as AvgResponseTime, RegionName FROM Incidents i JOIN Regions r ON i.RegionID = r.RegionID WHERE IncidentType = 'Fire' GROUP BY RegionName;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT AVG(ResponseTime) FROM Incidents WHERE IncidentType = 'fire incidents' GROUP BY RegionID;\n\nThis SQL query calculates the average emergency response time for fire incidents grouped by region. It assumes that the table `Incidents` contains data about different types of incidents, their regions, and response times. The `GROUP BY` clause groups the results by region, allowing us to find the average response time for each region separately.",
    sql="Sql Prompt: What is the total investment in climate change mitigation projects in Europe and Central Asia in 2019?\n\nSql Context: CREATE TABLE Climate_Investments (id INT, region VARCHAR(50), category VARCHAR(50), year INT, investment FLOAT); INSERT INTO Climate_Investments (id, region, category, year, investment) VALUES (1, 'Western Europe', 'Climate Change Mitigation', 2018, 600000); INSERT INTO Climate_Investments (id, region, category, year, investment) VALUES (2, 'E"
), 0), (Example({'sql_prompt': "What is the average revenue of virtual tours in 'Spain'?", 'sql_context': "CREATE TABLE virtual_tours (id INT, name TEXT, country TEXT, revenue FLOAT); INSERT INTO virtual_tours (id, name, country, revenue) VALUES (1, 'Virtual Barcelona Tour', 'Spain', 2000);", 'sql': "SELECT AVG(revenue) FROM virtual_tours WHERE country = 'Spain';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT AVG(revenue) FROM virtual_tours WHERE country = 'Spain';\n\nThis SQL query calculates the average revenue of virtual tours in Spain. Since there is only one record for a virtual tour in Spain, the result will be the same as the revenue of that specific tour (2000). However, if more records were present, the average would be calculated based on all the revenues from those records.",
    sql="Sql Prompt: What was the total investment in climate change education in 'Western Europe' and 'Eastern Europe' combined in 2019?\n\nSql Context: CREATE TABLE climate_education (id INT, region VARCHAR(50), year INT, investment FLOAT); INSERT INTO climate_education (id, region, year, investment) VALUES (1, 'Western Europe', 2019, 600000);\nINSERT INTO climate_education (id, region, year, investment) VALUES (2, 'Eastern Europe', 2019, 500000);"
), 0), (Example({'sql_prompt': 'What is the total number of students and staff with accommodations in the "disability_services" schema, excluding the "accessibility_parking" type?', 'sql_context': 'CREATE SCHEMA disability_services; CREATE TABLE staff (id INT, name VARCHAR(50), accommodation VARCHAR(50)); CREATE TABLE students (id INT, name VARCHAR(50), accommodation VARCHAR(50));', 'sql': "SELECT COUNT(*) FROM disability_services.staff WHERE accommodation != 'accessibility_parking' UNION SELECT COUNT(*) FROM disability_services.students WHERE accommodation != 'accessibility_parking';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="construct the SQL queries for each problem.\n\n1) To find the total calories of all dishes with names starting with 'HealthyHarvest' and a price greater than the average price of all dishes, we can use the following query:\n\n```sql\nSELECT SUM(Dishes.calories) FROM Dishes\nWHERE Dishes.dish_name LIKE 'HealthyHarvest%' AND Dishes.price > (SELECT AVG(Dishes.price) FROM Dishes);\n```\n\n2) To find the total investment in climate communication in Europe and Central Asia in 2019, we can use the following query:\n\n```sql\nSELECT SUM",
    sql='Sql Prompt: What is the total number of students and staff with accommodations in the "disability_services" schema, excluding the "accessibility_parking" type?\n\nSql Context: CREATE SCHEMA disability_services; CREATE TABLE staff (id INT, name VARCHAR(50), accommodation VARCHAR(50)); CREATE TABLE students (id INT, name VARCHAR(50), accommodation VARCHAR(50));\n\nReasoning: Let\'s think step by step in order to construct the SQL queries for each problem. 1) To find the total number of students and staff with accommodations in the "disability_services" schema, excluding the'
), 1), (Example({'sql_prompt': 'What is the number of electric trams in service in Istanbul in 2021?', 'sql_context': "CREATE TABLE electric_trams (tram_id INT, service_date DATE, in_service INT); INSERT INTO electric_trams (tram_id, service_date, in_service) VALUES (1, '2021-01-01', 1), (2, '2021-01-02', 1), (3, '2021-01-03', 0);", 'sql': "SELECT COUNT(*) FROM electric_trams WHERE in_service = 1 AND service_date BETWEEN '2021-01-01' AND '2021-12-31';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='answer the SQL queries:\n\n1) The query calculates the total calories of all dishes with names starting with "HealthyHarvest" and have a price greater than the average price of all dishes.\n\n```sql\nSELECT SUM(Dishes.calories) FROM Dishes WHERE Dishes.dish_name LIKE \'HealthyHarvest%\' AND Dishes.price > (SELECT AVG(price) FROM Dishes);\n```\n\n2) The query calculates the total investment in climate communication in Europe and Central Asia in 2019.\n\n```sql\nSELECT SUM(investment) FROM climate_investments WHERE category = \'Climate',
    sql="Sql Prompt: What is the number of electric trams in service in Istanbul in 2021?\n\nSql Context: CREATE TABLE electric_trams (tram_id INT, service_date DATE, in_service INT); INSERT INTO electric_trams (tram_id, service_date, in_service) VALUES (1, '2021-01-01', 1), (2, '2021-01-02', 1), (3, '2021-01-03', 0);\n\nReasoning: Let's think step by step in order to"
), 1), (Example({'sql_prompt': "What is the total number of trips taken on accessible vehicles in the 'East' region for the current year?", 'sql_context': "CREATE TABLE Vehicles (VehicleID int, VehicleType varchar(255), Region varchar(255)); INSERT INTO Vehicles (VehicleID, VehicleType, Region) VALUES (1, 'Bus', 'East'), (2, 'Tram', 'West'), (3, 'Wheelchair Bus', 'South'), (4, 'Accessible Tram', 'East'); CREATE TABLE Trips (TripID int, VehicleID int, TripDateTime datetime);", 'sql': "SELECT COUNT(*) FROM Vehicles JOIN Trips ON Vehicles.VehicleID = Trips.VehicleID WHERE Vehicles.Region = 'East' AND Vehicles.VehicleType IN ('Wheelchair Bus', 'Accessible Tram') AND YEAR(Trips.TripDateTime) = YEAR(GETDATE());"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT SUM(CASE WHEN Vehicles.Region = 'East' AND Vehicles.VehicleType LIKE '%Accessible%' THEN 1 ELSE 0 END) AS TotalTrips FROM Vehicles;\n\nThis SQL query calculates the total number of trips taken on accessible vehicles in the 'East' region for the current year by counting the number of times the condition 'East' and 'Accessible' appear in the Vehicles table. The CASE statement is used to check if a vehicle is accessible (VehicleType LIKE '%Accessible%') and located in the East region (Vehicles.Region = 'East'). If both conditions",
    sql="Sql Prompt: What was the total investment in climate communication in Europe and Central Asia for the years 2018 and 2019?\n\nSql Context: CREATE TABLE climate_investments (id INT, region VARCHAR(50), category VARCHAR(50), year INT, investment FLOAT); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (1, 'Western Europe', 'Climate Communication', 2018, 500000); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (2, '"
), 0), (Example({'sql_prompt': 'Identify the suppliers with the highest and lowest sustainability ratings in the supplier_ratings table.', 'sql_context': 'CREATE TABLE supplier_ratings (supplier_id INT, sustainability_rating INT); INSERT INTO supplier_ratings (supplier_id, sustainability_rating) VALUES (100, 95), (101, 60), (102, 90);', 'sql': 'SELECT supplier_id, sustainability_rating FROM (SELECT supplier_id, sustainability_rating, RANK() OVER (ORDER BY sustainability_rating DESC) AS rank, RANK() OVER (ORDER BY sustainability_rating ASC) AS reverse_rank FROM supplier_ratings) WHERE rank = 1 OR reverse_rank = 1;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT supplier_id, MAX(sustainability_rating) AS highest_rating FROM supplier_ratings;',
    sql='SELECT supplier_id, MIN(sustainability_rating) AS lowest_rating FROM supplier_ratings;\n\nThe first query will return the ID of the supplier with the highest sustainability rating. The second query will return the ID of the supplier with the lowest sustainability rating.'
), 0), (Example({'sql_prompt': 'What is the total amount of socially responsible loans issued to women in 2021?', 'sql_context': 'CREATE TABLE socially_responsible_lending (id INT PRIMARY KEY, loan_amount DECIMAL(10, 2), borrower_gender TEXT, lending_date DATE);', 'sql': "SELECT SUM(loan_amount) FROM socially_responsible_lending WHERE borrower_gender = 'Female' AND lending_date BETWEEN '2021-01-01' AND '2021-12-31';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT SUM(loan_amount) FROM socially_responsible_lending WHERE borrower_gender = 'women' AND lending_date = '2021';\n\nIn this case, we are looking for the total amount of socially responsible loans issued to women in 2021. To do that, we need to filter the table `socially_responsible_lending` by the conditions: borrower_gender equals 'women' and lending_date equals '2021'. The result will be the sum of all loan amounts that meet these conditions, which represents the total amount of socially responsible loans issued to women in 2021",
    sql="Sql Prompt: What is the average price of dishes from the 'HealthyHarvest' category?\n\nSql Context: CREATE TABLE Dishes (id INT PRIMARY KEY, dish_name VARCHAR(50), calories INT, price FLOAT);\n\nReasoning: Let's think step by step in order to Sql: SELECT AVG(price) FROM Dishes WHERE dish_name LIKE 'HealthyHarvest%'; In this case, we are looking for the average price of dishes from the 'HealthyHarvest' category. To do that, we need to filter the table `Dishes` by the condition: dish_name starts with 'HealthyHarvest'. The"
), 1), (Example({'sql_prompt': 'What is the maximum energy efficiency rating of hydroelectric dams in Canada?', 'sql_context': "CREATE TABLE hydro_dams (id INT, name TEXT, country TEXT, energy_efficiency_rating FLOAT); INSERT INTO hydro_dams (id, name, country, energy_efficiency_rating) VALUES (1, 'Robert-Bourassa', 'Canada', 0.94), (2, 'Churchill Falls', 'Canada', 0.92);", 'sql': "SELECT MAX(energy_efficiency_rating) FROM hydro_dams WHERE country = 'Canada';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT MAX(energy_efficiency_rating) FROM hydro_dams WHERE country = 'Canada';\n\nThis SQL statement will return the maximum energy efficiency rating of hydroelectric dams in Canada. The reasoning behind this is that we want to find the highest energy efficiency rating among all hydroelectric dams located in Canada, which can be achieved by using the MAX() function and filtering the results for the specific country.",
    sql="Sql Prompt: What was the total investment in climate communication in Europe and Central Asia in 2019?\n\nSql Context: CREATE TABLE climate_investments (id INT, region VARCHAR(50), category VARCHAR(50), year INT, investment FLOAT); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (1, 'Western Europe', 'Climate Communication', 2018, 500000); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (2, 'Eastern Europe', 'Climate Ad"
), 0), (Example({'sql_prompt': 'How many streams did each song by an artist get in a given month?', 'sql_context': "CREATE TABLE Songs (id INT, artist_id INT, title VARCHAR(50)); CREATE TABLE Streams (id INT, song_id INT, date DATE, streams INT); INSERT INTO Songs (id, artist_id, title) VALUES (1, 1, 'Shake it Off'), (2, 1, 'Blank Space'), (3, 2, 'Humble'), (4, 2, 'DNA'); INSERT INTO Streams (id, song_id, date, streams) VALUES (1, 1, '2022-01-01', 1000), (2, 1, '2022-01-02', 1500), (3, 2, '2022-01-01', 2000), (4, 2, '2022-01-02', 2500), (5, 3, '2022-01-01', 3000), (6, 3, '2022-01-02', 3500), (7, 4, '2022-01-01', 4000), (8, 4, '2022-01-02', 4500);", 'sql': "SELECT s.title, SUM(s.streams) as total_streams FROM Songs s JOIN Streams st ON s.id = st.song_id WHERE st.date BETWEEN '2022-01-01' AND '2022-01-31' GROUP BY s.title;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='1) To find the total calories of all dishes with names starting with "HealthyHarvest" and a price greater than the average price of all dishes, we can use the following SQL query:\n\n```sql\nSELECT SUM(Dishes.calories) FROM Dishes WHERE Dishes.dish_name LIKE \'HealthyHarvest%\' AND Dishes.price > (SELECT AVG(price) FROM Dishes);\n```\n\n2) To find the total investment in climate communication in Europe and Central Asia in 2019, we can use the following SQL query:\n\n```sql\nSELECT SUM(investment) FROM climate_investments WHERE',
    sql="Sql Prompt: How many streams did each song by an artist get in a given month?\n\nSql Context: CREATE TABLE Songs (id INT, artist_id INT, title VARCHAR(50)); CREATE TABLE Streams (id INT, song_id INT, date DATE, streams INT); INSERT INTO Songs (id, artist_id, title) VALUES (1, 1, 'Shake it Off'), (2, 1, 'Blank Space'), (3, 2, 'Humble'), (4, 2, 'DNA'); INSERT INTO Streams (id, song_id, date, streams) VALUES (1,"
), 0), (Example({'sql_prompt': 'What is the total number of security incidents for each department in the organization?', 'sql_context': 'CREATE TABLE incident (incident_id INT, incident_date DATE, incident_description TEXT, department_id INT);CREATE TABLE department (department_id INT, department_name VARCHAR(255));', 'sql': 'SELECT d.department_name, COUNT(i.incident_id) AS incident_count FROM incident i JOIN department d ON i.department_id = d.department_id GROUP BY d.department_name;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: First, we need to join the `incident` and `department` tables on the `department_id`. Then, for each department, we can count the number of incidents using the `COUNT()` function. Here is the SQL query:\n\n```sql\nSELECT department.department_name, COUNT(incident.incident_id) AS total_incidents\nFROM incident\nJOIN department ON incident.department_id = department.department_id\nGROUP BY department.department_name;\n```\n\nThis query will return a list of departments and the total number of security incidents for each one.',
    sql="Sql Prompt: What is the average price of dishes in the 'HealthyHarvest' category?\n\nSql Context: CREATE TABLE Dishes (id INT, dish_name VARCHAR(50), calories INT, price FLOAT);\n\nReasoning: Let's think step by step in order to Sql: First, we need to filter the `Dishes` table for rows where the `dish_name` starts with 'HealthyHarvest'. Then, we can calculate the average price using the `AVG()` function. Here is the SQL query: ```sql SELECT AVG(price) AS avg_price FROM Dishes WHERE dish_name LIKE 'HealthyHar"
), 0), (Example({'sql_prompt': 'What is the market spend on sustainable tourism initiatives in Japan between 2017 and 2019?', 'sql_context': "CREATE TABLE sustainable_tourism_initiatives(initiative_id INT, name TEXT, country TEXT, start_year INT, end_year INT, market_spend INT);INSERT INTO sustainable_tourism_initiatives (initiative_id, name, country, start_year, end_year, market_spend) VALUES (1, 'Eco-friendly hotels in Tokyo', 'Japan', 2017, 2019, 5000000), (2, 'Sustainable transport in Kyoto', 'Japan', 2018, 2019, 7000000), (3, 'Carbon offsetting in Osaka', 'Japan', 2017, 2018, 3000000);", 'sql': "SELECT SUM(market_spend) FROM sustainable_tourism_initiatives WHERE country = 'Japan' AND start_year BETWEEN 2017 AND 2019;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="answer the SQL prompts:\n\n1) The total calories of healthy dishes is the sum of calories for all dishes with names starting with 'HealthyHarvest' and a price greater than the average price of all dishes.\n\n```sql\nSELECT SUM(Dishes.calories) FROM Dishes WHERE Dishes.dish_name LIKE 'HealthyHarvest%' AND Dishes.price > (SELECT AVG(price) FROM Dishes);\n```\n\n2) The total investment in climate communication in Europe and Central Asia in 2019 is the sum of investments in climate communication for both regions in that year.\n\n```sql\nSELECT SUM(invest",
    sql="Sql Prompt: What is the market spend on sustainable tourism initiatives in Japan between 2017 and 2019?\n\nSql Context: CREATE TABLE sustainable_tourism_initiatives(initiative_id INT, name TEXT, country TEXT, start_year INT, end_year INT, market_spend INT);INSERT INTO sustainable_tourism_initiatives (initiative_id, name, country, start_year, end_year, market_spend) VALUES (1, 'Eco-friendly hotels in Tokyo', 'Japan', 2017, 2019, 5000000),"
), 1), (Example({'sql_prompt': 'What is the percentage of hotels in Europe that offer virtual tours?', 'sql_context': "CREATE TABLE hotel_features (hotel_id INT, hotel_name TEXT, virtual_tour INT, country TEXT); INSERT INTO hotel_features (hotel_id, hotel_name, virtual_tour, country) VALUES (1, 'Hotel A', 1, 'France'), (2, 'Hotel B', 0, 'Germany'), (3, 'Hotel C', 1, 'Italy'), (4, 'Hotel D', 0, 'France'), (5, 'Hotel E', 1, 'Spain');", 'sql': "SELECT (COUNT(*) FILTER (WHERE virtual_tour = 1) * 100.0 / COUNT(*)) AS percentage FROM hotel_features WHERE country = 'Europe';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT COUNT(*) / (SELECT COUNT(*) FROM hotel_features WHERE country = 'Europe') * 100 AS percentage FROM hotel_features WHERE virtual_tour = 1 AND country = 'Europe';\n\nThis SQL query calculates the percentage of hotels in Europe that offer virtual tours. It first counts the number of hotels in Europe (by filtering the `hotel_features` table for the 'Europe' country), then it counts the number of hotels in Europe that offer virtual tours, and finally it divides the second count by the first one to get the percentage. The result is multiplied by 100 to express the percentage as a whole number.",
    sql="Sql Prompt: What is the total investment in climate communication for Europe and Central Asia combined in 2019?\n\nSql Context: CREATE TABLE climate_investments (id INT, region VARCHAR(50), category VARCHAR(50), year INT, investment FLOAT); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (1, 'Western Europe', 'Climate Communication', 2018, 500000); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (2, 'Eastern Europe', 'Climate"
), 0), (Example({'sql_prompt': 'What are the ethical AI principles for the technology projects in India?', 'sql_context': "CREATE TABLE EthicalAI (principle_id INT, principle_name VARCHAR(50), project_location VARCHAR(20)); INSERT INTO EthicalAI (principle_id, principle_name, project_location) VALUES (1, 'Fairness', 'India'), (2, 'Accountability', 'India'), (3, 'Transparency', 'India'), (4, 'Data Minimization', 'India'), (5, 'Explainability', 'India'), (6, 'Human Oversight', 'India');", 'sql': "SELECT principle_name FROM EthicalAI WHERE project_location = 'India';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT principle_name FROM EthicalAI WHERE project_location = 'India';\n\nThis SQL statement will return the ethical AI principles for technology projects in India. It selects the principle_name column from the EthicalAI table where the project_location is 'India'. This should provide a list of the ethical principles that are relevant to technology projects in India.",
    sql="Sql Prompt: What were the total calories consumed by all dishes with names starting with 'Quinoa' or 'Sign'?\n\nSql Context: CREATE TABLE Dishes (id INT, dish_name VARCHAR(50), calories INT, price INT); INSERT INTO Dishes (id, dish_name, calories, price) VALUES (1, 'Quinoa Salad', 400, 12), (2, 'Sign Salad', 300, 12);\n\nReasoning: Let's think step by step in order to Sql: SELECT SUM(calories) FROM Dishes WHERE dish_name LIKE 'Quino"
), 0), (Example({'sql_prompt': 'What is the total mass of all spacecraft manufactured by SpaceX?', 'sql_context': "CREATE TABLE Spacecraft (SpacecraftID INT, SpacecraftName VARCHAR(50), Manufacturer VARCHAR(50), Mass FLOAT); INSERT INTO Spacecraft (SpacecraftID, SpacecraftName, Manufacturer, Mass) VALUES (1, 'SpaceX Dragon', 'SpaceX', 10000), (2, 'Orion', 'Lockheed Martin', 20000), (3, 'Starliner', 'Boeing', 15000);", 'sql': "SELECT SUM(Mass) FROM Spacecraft WHERE Manufacturer = 'SpaceX';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT SUM(Mass) FROM Spacecraft WHERE Manufacturer = 'SpaceX';\n\nThis SQL query will sum up the mass of all spacecraft manufactured by SpaceX from the provided table.",
    sql="Sql Prompt: What is the total investment in climate communication for Europe and Central Asia combined in 2019?\n\nSql Context: CREATE TABLE climate_investments (id INT, region VARCHAR(50), category VARCHAR(50), year INT, investment FLOAT); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (1, 'Western Europe', 'Climate Communication', 2018, 500000); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (2, 'Eastern Europe', 'Climate"
), 0), (Example({'sql_prompt': "What is the total age of 'stone' artifacts in 'american_archaeology'?", 'sql_context': 'CREATE TABLE american_archaeology (id INT, site_name VARCHAR(50), artifact_name VARCHAR(50), age INT, material VARCHAR(20));', 'sql': "SELECT SUM(age) FROM american_archaeology WHERE material = 'stone';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${produce the total age of 'stone' artifacts in 'american_archaeology'. First, we need to filter the data for artifacts that are made of stone and belong to the 'american_archaeology' site. Then, we sum up their ages.}",
    sql="SELECT SUM(age) FROM american_archaeology WHERE artifact_name LIKE 'stone%' AND site_name = 'american_archaeology';"
), 1), (Example({'sql_prompt': 'What is the average hotel price for beachfront hotels in Mexico?', 'sql_context': "CREATE TABLE hotels (hotel_id INT, name TEXT, country TEXT, has_beachfront BOOLEAN, price INT); INSERT INTO hotels (hotel_id, name, country, has_beachfront, price) VALUES (1, 'Beach Palace', 'Mexico', true, 200), (2, 'Green Valley', 'USA', false, 150);", 'sql': "SELECT AVG(price) FROM hotels WHERE has_beachfront = true AND country = 'Mexico';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT AVG(price) FROM hotels WHERE country = 'Mexico' AND has_beachfront = true;\n\nThis SQL query calculates the average price of beachfront hotels in Mexico. It filters the data based on the country and the presence of a beachfront, then calculates the average price using the AVG() function.",
    sql="Sql Prompt: What is the total investment in climate communication for Europe and Central Asia combined in 2019?\n\nSql Context: CREATE TABLE climate_investments (id INT, region VARCHAR(50), category VARCHAR(50), year INT, investment FLOAT); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (1, 'Western Europe', 'Climate Communication', 2018, 500000); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (2, 'Eastern Europe', 'Climate"
), 0), (Example({'sql_prompt': 'List all instructors and number of students they support with accommodations.', 'sql_context': 'CREATE TABLE Instructors (id INT, name VARCHAR(50), title VARCHAR(50));', 'sql': 'SELECT i.name, COUNT(a.student_id) as supported_students FROM Instructors i JOIN Accommodations a ON i.id = a.instructor_id GROUP BY i.name;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${produce the sql}. We first need to join the instructors table with a table that contains information about the students they support with accommodations. However, it seems like such a table is not provided in the context. To proceed, we would need an additional table named something like `StudentAccommodations` that has columns for instructor_id and student_id.\n\nHere's an example of how the SQL query might look:\n\n```sql\nSELECT Instructors.name, COUNT(StudentAccommodations.student_id) as num_students\nFROM Instructors\nJOIN StudentAccommodations ON Instructors.id = StudentAccommodations.instructor",
    sql="Sql Prompt: List all dishes and their total calories for dishes that are either 'Sign Salad' or 'Quinoa Salad'.\n\nSql Context: CREATE TABLE Dishes (id INT, dish_name VARCHAR(50), calories INT, price INT); INSERT INTO Dishes (id, dish_name, calories, price) VALUES (1, 'Sign Salad', 300, 12); INSERT INTO Dishes (id, dish_name, calories, price) VALUES (2, 'Quinoa Salad', 400, 13);\n\nReasoning: Let's think step by step in order to"
), 0), (Example({'sql_prompt': "What is the total fare collected from bus routes that start with the letter 'B'?", 'sql_context': "CREATE TABLE bus_trips (trip_id INT, route_id INT, fare FLOAT); INSERT INTO bus_trips (trip_id, route_id, fare) VALUES (1, 101, 2.5), (2, 202, 3.0), (3, 303, 1.5), (4, 404, 2.0), (5, 505, 2.5), (6, 106, 3.0); CREATE TABLE bus_routes (route_id INT, route_name TEXT, starting_letter TEXT); INSERT INTO bus_routes (route_id, route_name, starting_letter) VALUES (101, 'Broadway', 'B'), (202, 'Park Ave', 'P'), (303, 'Lakeshore', 'L'), (404, 'Sunset Blvd', 'S'), (505, 'Beverly Hills', 'B');", 'sql': "SELECT SUM(bt.fare) FROM bus_trips bt JOIN bus_routes br ON bt.route_id = br.route_id WHERE br.starting_letter = 'B';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="find the total fare collected from bus routes that start with the letter 'B'.\n\n1. First, we need to identify the bus routes that start with the letter 'B'. This can be done using the `bus_routes` table and filtering for rows where `starting_letter = 'B'`.\n\n2. Once we have the route IDs of the bus routes starting with 'B', we can use these IDs to query the `bus_trips` table and sum up the fares for each trip on those specific routes.\n\nHere is the SQL query that combines both steps:\n\n```sql\nSELECT SUM(fare) AS total_fare\nFROM bus_trips",
    sql="Sql Prompt: What is the total fare collected from bus routes that start with the letter 'B'?\n\nSql Context: CREATE TABLE bus_trips (trip_id INT, route_id INT, fare FLOAT); INSERT INTO bus_trips (trip_id, route_id, fare) VALUES (1, 101, 2.5), (2, 202, 3.0), (3, 303, 1.5), (4, 404, 2.0), (5, 505, 2.5), (6, 106, 3"
), 1), (Example({'sql_prompt': 'What is the percentage of total revenue from streaming and concert ticket sales for Pop music in 2018?', 'sql_context': 'CREATE TABLE StreamingRevenue (id INT, year INT, genre VARCHAR(50), revenue FLOAT); CREATE TABLE ConcertTicketSales (id INT, year INT, genre VARCHAR(50), revenue FLOAT);', 'sql': "SELECT (SUM(sr.revenue) + SUM(cts.revenue)) / (SELECT SUM(revenue) FROM (SELECT revenue FROM StreamingRevenue WHERE year = 2018 UNION ALL SELECT revenue FROM ConcertTicketSales WHERE year = 2018) t) FROM StreamingRevenue sr JOIN ConcertTicketSales cts ON sr.genre = cts.genre WHERE sr.year = 2018 AND sr.genre = 'Pop';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: First, we need to find the total revenue from both streaming and concert ticket sales for Pop music in 2018. To do this, we will join the two tables on the year and genre columns, and then sum the revenues.\n\n```sql\nSELECT SUM(StreamingRevenue.revenue) + SUM(ConcertTicketSales.revenue) AS total_revenue\nFROM StreamingRevenue\nJOIN ConcertTicketSales ON StreamingRevenue.year = ConcertTicketSales.year AND StreamingRevenue.genre = ConcertTicketSales.genre\nWHERE StreamingRevenue',
    sql="Sql Prompt: What is the total revenue from streaming and concert ticket sales for Pop music in 2018?\n\nSql Context: CREATE TABLE StreamingRevenue (id INT, year INT, genre VARCHAR(50), revenue FLOAT); CREATE TABLE ConcertTicketSales (id INT, year INT, genre VARCHAR(50), revenue FLOAT);\n\nReasoning: Let's think step by step in order to Sql: First, we need to find the total revenue from both streaming and concert ticket sales for Pop music in 2018. To do this, we will join the two tables on the year and genre columns, and then sum"
), 0), (Example({'sql_prompt': 'What is the total defense spending by countries in Oceania in 2018?', 'sql_context': "CREATE TABLE defense_spending (country VARCHAR(50), continent VARCHAR(50), year INT, amount FLOAT); INSERT INTO defense_spending (country, continent, year, amount) VALUES ('Australia', 'Oceania', 2018, 750.3), ('New Zealand', 'Oceania', 2018, 23.4), ('Papua New Guinea', 'Oceania', 2018, 6.7);", 'sql': "SELECT SUM(amount) FROM defense_spending WHERE continent = 'Oceania' AND year = 2018;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT SUM(amount) FROM defense_spending WHERE continent = 'Oceania' AND year = 2018;\n\nThis SQL statement calculates the total defense spending by countries in Oceania during the year 2018. It does so by selecting all records from the `defense_spending` table where the `continent` is 'Oceania' and the `year` is 2018, then summing up the `amount` column for those records.",
    sql="Sql Prompt: What was the total investment in climate adaptation in Europe and Central Asia in 2019?\n\nSql Context: CREATE TABLE climate_investments (id INT, region VARCHAR(50), category VARCHAR(50), year INT, investment FLOAT); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (1, 'Western Europe', 'Climate Communication', 2018, 500000); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (2, 'Eastern Europe', 'Climate Ad"
), 0), (Example({'sql_prompt': 'What is the total number of refugee families supported by each NGO in the last 6 months?', 'sql_context': "CREATE TABLE NGOs (NGOID int, NGOName varchar(50)); INSERT INTO NGOs (NGOID, NGOName) VALUES (1, 'International Rescue Committee'), (2, 'Save the Children'); CREATE TABLE RefugeeSupport (SupportID int, NGOID int, FamilyID int, SupportDate date); INSERT INTO RefugeeSupport (SupportID, NGOID, FamilyID, SupportDate) VALUES (1, 1, 1, '2022-01-01'), (2, 1, 2, '2022-02-01'), (3, 2, 1, '2022-03-01');", 'sql': 'SELECT NGOName, COUNT(DISTINCT FamilyID) as SupportedFamilies FROM NGOs INNER JOIN RefugeeSupport ON NGOs.NGOID = RefugeeSupport.NGOID WHERE SupportDate >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY NGOName;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='answer the SQL prompts:\n\n1. The given SQL statement calculates the total calories of all dishes with names starting with "HealthyHarvest" and a price greater than the average price of all dishes. To do this, it sums up the calories from the Dishes table where the dish_name starts with \'HealthyHarvest\' and the price is greater than the average price (calculated using AVG function).\n\n2. The provided SQL statement calculates the total investment in climate communication in Europe and Central Asia in 2019. It sums up the investments from the climate_investments table where the category is \'Climate Communication\', the region is either \'Europe\' or',
    sql="Sql Prompt: What is the total number of refugee families supported by each NGO in the last 6 months?\n\nSql Context: The context provided includes two tables, `NGOs` and `RefugeeSupport`. The `NGOs` table contains information about different NGOs, while the `RefugeeSupport` table records support given to refugee families by each NGO.\n\nReasoning: Let's think step by step in order to answer the SQL prompts: 1. To find the total number of refugee families supported by each NGO in the last 6 months, we need to group the data by NGO and count the unique family IDs within the specified time"
), 1), (Example({'sql_prompt': "Which regulatory frameworks have been implemented in 'Country1'?", 'sql_context': "CREATE TABLE countries (id INT, name VARCHAR(255)); INSERT INTO countries (id, name) VALUES (1, 'Country1'); CREATE TABLE regulatory_frameworks (id INT, country_id INT, name VARCHAR(255)); INSERT INTO regulatory_frameworks (id, country_id, name) VALUES (1, 1, 'Framework1'); INSERT INTO regulatory_frameworks (id, country_id, name) VALUES (2, 1, 'Framework2'); INSERT INTO regulatory_frameworks (id, country_id, name) VALUES (3, 1, 'Framework3');", 'sql': "SELECT name FROM regulatory_frameworks WHERE country_id = (SELECT id FROM countries WHERE name = 'Country1');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='answer the SQL prompts:\n\n1. The given SQL statement calculates the total calories of all dishes with names starting with "HealthyHarvest" and a price greater than the average price of all dishes. To do this, it sums up the calories from the Dishes table where the dish_name contains \'HealthyHarvest\' and the price is greater than the average price (calculated using AVG function).\n\n2. The provided SQL statement calculates the total investment in climate communication in Europe and Central Asia in 2019. It sums up the investments from the climate_investments table where the category is \'Climate Communication\', the region is either \'Europe\' or \'',
    sql="Sql Prompt: Which regulatory frameworks have been implemented in 'Country1'?\n\nSql Context: CREATE TABLE countries (id INT, name VARCHAR(255)); INSERT INTO countries (id, name) VALUES (1, 'Country1'); CREATE TABLE regulatory_frameworks (id INT, country_id INT, name VARCHAR(255)); INSERT INTO regulatory_frameworks (id, country_id, name) VALUES (1, 1, 'Framework1'); INSERT INTO regulatory_frameworks (id, country_id, name) VALUES (2, 1, 'Framework2'); INSERT INTO regulatory"
), 1), (Example({'sql_prompt': 'What is the percentage of factories in each country that have implemented circular economy practices?', 'sql_context': "CREATE TABLE factory_circle (factory VARCHAR(255), country VARCHAR(255), practice VARCHAR(255)); INSERT INTO factory_circle (factory, country, practice) VALUES ('Factory1', 'Bangladesh', 'yes'), ('Factory2', 'Bangladesh', 'no'), ('Factory3', 'Bangladesh', 'yes'), ('Factory4', 'China', 'yes'), ('Factory5', 'China', 'no'), ('Factory6', 'India', 'no'), ('Factory7', 'India', 'yes'), ('Factory8', 'India', 'yes');", 'sql': "SELECT country, 100.0 * COUNT(*) FILTER (WHERE practice = 'yes') / COUNT(*) AS percentage FROM factory_circle GROUP BY country;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql Prompt: To find the percentage of factories in each country that have implemented circular economy practices, we first need to count the number of factories that have implemented these practices and the total number of factories in each country. Here is the SQL query for this purpose:\n\n```sql\nSELECT country, COUNT(CASE WHEN practice = 'yes' THEN factory END) AS num_factories_with_practice, COUNT(factory) AS total_factories\nFROM factory_circle\nGROUP BY country;\n```\n\nThis query groups the data by country and counts the number of factories that have implemented circular economy practices (num_factories_with_practice)",
    sql="Sql Prompt: To find the percentage of factories in each country that have implemented circular economy practices, we first need to calculate the ratio of the number of factories with these practices to the total number of factories in each country. Here is the SQL query for this purpose:\n\n```sql\nSELECT country, COUNT(CASE WHEN practice = 'yes' THEN factory END) AS num_factories_with_practice, COUNT(factory) AS total_factories,\n       ROUND((COUNT(CASE WHEN practice = 'yes' THEN factory END) / COUNT(factory) * 100), 2) AS percentage\nFROM factory_circle\nGROUP BY"
), 1)]