[(Example({'sql_prompt': "What are the top 3 autonomous vehicles with the highest safety ratings in the 'auto_show' table?", 'sql_context': 'CREATE TABLE auto_show (id INT, vehicle_name VARCHAR(50), safety_rating INT);', 'sql': "SELECT vehicle_name, safety_rating FROM (SELECT vehicle_name, safety_rating, ROW_NUMBER() OVER (ORDER BY safety_rating DESC) as safety_rank FROM auto_show WHERE vehicle_name LIKE '%Autonomous%') AS auton_ranks WHERE safety_rank <= 3;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='```sql\nSELECT vehicle_name\nFROM auto_show\nORDER BY safety_rating DESC\nLIMIT 3;\n```'
), 1), (Example({'sql_prompt': 'Delete a record from the broadband_usage table', 'sql_context': 'CREATE TABLE broadband_usage (usage_id INT, subscriber_id INT, usage_start_time TIMESTAMP, usage_end_time TIMESTAMP, data_used DECIMAL(10,2));', 'sql': 'DELETE FROM broadband_usage WHERE usage_id = 11111;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Here is the SQL query based on the provided prompt and context:\n\n```sql\nDELETE FROM broadband_usage\nWHERE usage_id = <specific_usage_id>;\n```\n\nIn this query, you would replace `<specific_usage_id>` with the actual ID of the record you want to delete. This query will remove the specified record from the `broadband_usage` table.'
), 1), (Example({'sql_prompt': 'How many recycling plants in Canada process exactly 5 types of waste?', 'sql_context': "CREATE TABLE recycling_plants (name TEXT, country TEXT, waste_types INTEGER); INSERT INTO recycling_plants (name, country, waste_types) VALUES ('Recycling Plant 1', 'Canada', 6), ('Recycling Plant 2', 'Canada', 4), ('Recycling Plant 3', 'Canada', 5), ('Recycling Plant 4', 'Canada', 5), ('Recycling Plant 5', 'Canada', 3);", 'sql': "SELECT COUNT(*) FROM recycling_plants WHERE country = 'Canada' AND waste_types = 5;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Here is the SQL query based on the provided prompt and context:\n\n```sql\nSELECT COUNT(*) FROM recycling_plants\nWHERE country = 'Canada' AND waste_types = 5;\n```\n\nThis query counts the number of recycling plants in Canada that process exactly 5 types of waste."
), 1), (Example({'sql_prompt': 'What is the total revenue for each game in the "Gaming" category?', 'sql_context': 'CREATE TABLE Games (GameID int, GameName varchar(50), Category varchar(50), Revenue decimal(10,2));', 'sql': 'SELECT Category, SUM(Revenue) OVER(PARTITION BY Category) as TotalRevenue FROM Games;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Here is the SQL query based on the provided prompt and context:\n\n```sql\nSELECT GameName, SUM(Revenue) AS TotalRevenue\nFROM Games\nWHERE Category = \'Gaming\'\nGROUP BY GameName;\n```\n\nThis query selects the game name and calculates the total revenue for each game in the "Gaming" category by summing up the revenue values. The results are grouped by game name.'
), 1), (Example({'sql_prompt': 'Delete all flight safety records for a specific aircraft', 'sql_context': "CREATE SCHEMA if not exists aerospace;CREATE TABLE if not exists aerospace.flight_safety (id INT, incident VARCHAR(255), incident_date DATE, aircraft_id INT);INSERT INTO aerospace.flight_safety (id, incident, incident_date, aircraft_id) VALUES (1, 'Inc1', '2017-01-01', 1), (2, 'Inc2', '2018-01-01', 1);", 'sql': 'DELETE FROM aerospace.flight_safety WHERE aircraft_id = 1;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Here is the SQL query based on the provided prompt and context:\n\n**SQL Prompt:** Delete all flight safety records for a specific aircraft.\n**SQL Context:** \n```sql\nCREATE SCHEMA if not exists aerospace;\nCREATE TABLE if not exists aerospace.flight_safety (\n    id INT,\n    incident VARCHAR(255),\n    incident_date DATE,\n    aircraft_id INT\n);\nINSERT INTO aerospace.flight_safety (id, incident, incident_date, aircraft_id)\nVALUES (1, 'Inc1', '2017-01-01', 1),\n       (2, 'Inc2', '2018-01-01', 1"
), 1), (Example({'sql_prompt': 'What is the average hotel price in each city in Europe?', 'sql_context': "CREATE TABLE Hotels_Europe (id INT, name VARCHAR(50), price DECIMAL(5,2), city VARCHAR(50)); INSERT INTO Hotels_Europe (id, name, price, city) VALUES (1, 'Grand Hotel', 200.00, 'Paris'), (2, 'Hotel Colosseo', 350.00, 'Rome'), (3, 'Park Royal', 120.00, 'London'), (4, 'Hotel Versailles', 420.00, 'Paris');", 'sql': 'SELECT city, AVG(price) as avg_price FROM Hotels_Europe GROUP BY city;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Here is the SQL query based on the provided prompt and context:\n```sql\nSELECT city, AVG(price) AS average_price\nFROM Hotels_Europe\nWHERE city IN ('Paris', 'Rome', 'London')\nGROUP BY city;\n```\n\nThis query calculates the average hotel price for each city in Europe by filtering the data for specific cities and then grouping the results by city name."
), 1), (Example({'sql_prompt': 'Show companies with below average ESG scores in the education sector.', 'sql_context': "INSERT INTO companies (id, name, country, sector, ESG_score) VALUES (4, 'EdCo', 'US', 'Education', 70.0), (5, 'LearnCo', 'UK', 'Education', 80.0);", 'sql': "SELECT * FROM companies WHERE sector = 'Education' AND ESG_score < (SELECT AVG(ESG_score) FROM companies WHERE sector = 'Education');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Here is the SQL query based on the prompt and context provided:\n\n```sql\nSELECT * FROM companies\nWHERE sector = \'Education\' AND ESG_score < (\n    SELECT AVG(ESG_score) FROM companies WHERE sector = \'Education\'\n);\n```\n\nThis query selects all rows from the "companies" table where the sector is \'Education\' and the ESG score is below the average ESG score of companies in the \'Education\' sector.'
), 1), (Example({'sql_prompt': "Find the daily new user registrations in 'data_privacy' table for the last week?", 'sql_context': 'CREATE TABLE data_privacy (user_id INT, registration_date DATE);', 'sql': 'SELECT registration_date, COUNT(*) FROM data_privacy WHERE registration_date >= CURDATE() - INTERVAL 7 DAY GROUP BY registration_date;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Here is the SQL query based on the prompt and context provided:\n```sql\nSELECT COUNT(*) AS daily_new_registrations\nFROM data_privacy\nWHERE registration_date BETWEEN DATEADD(DAY, -7, GETDATE()) AND GETDATE()\nGROUP BY DATE(registration_date)\nORDER BY DATE(registration_date);\n```\n\nThis query calculates the number of new user registrations for each day in the last week from the 'data_privacy' table and presents the results in ascending order of registration dates."
), 1), (Example({'sql_prompt': 'Update the total number of employees in the mining industry who identify as Native Hawaiian or Pacific Islander to 350 in California.', 'sql_context': "CREATE TABLE MiningEmployees (State VARCHAR(50), EmployeeEthnicity VARCHAR(50), EmployeeCount INT); INSERT INTO MiningEmployees(State, EmployeeEthnicity, EmployeeCount) VALUES ('Texas', 'Native American or Alaska Native', 200), ('Texas', 'Hispanic', 500), ('Texas', 'Black', 300), ('California', 'Native American or Alaska Native', 100), ('California', 'Hispanic', 700), ('California', 'Black', 600);", 'sql': "UPDATE MiningEmployees SET EmployeeCount = 350 WHERE State = 'California' AND EmployeeEthnicity = 'Native Hawaiian or Pacific Islander';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Here is the SQL query based on the prompt and context provided:\n\n```sql\nUPDATE MiningEmployees\nSET EmployeeCount = 350\nWHERE State = 'California' AND EmployeeEthnicity = 'Native Hawaiian or Pacific Islander';\n```\n\nThis query updates the `EmployeeCount` for rows in the `MiningEmployees` table where the state is California and the employee ethnicity is 'Native Hawaiian or Pacific Islander', setting the count to 350."
), 1), (Example({'sql_prompt': 'What is the maximum number of patients served by a rural health center in Europe?', 'sql_context': 'CREATE TABLE centers (id INT, name VARCHAR(50), location VARCHAR(50), patients_served INT);', 'sql': "SELECT MAX(patients_served) FROM centers WHERE location LIKE '%Europe%' AND location LIKE '%rural%';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Here is the SQL query based on the provided prompt and context:\n\n```sql\nSELECT MAX(patients_served) AS max_patients_served\nFROM centers\nWHERE location = 'Europe' AND name LIKE '%Rural Health%';\n```\n\nThis query selects the maximum value of `patients_served` from the `centers` table where the location is 'Europe' and the name contains the phrase 'Rural Health'."
), 1), (Example({'sql_prompt': 'Display the soldier names and branches from the view', 'sql_context': 'CREATE VIEW soldier_details AS SELECT id, name, branch FROM soldiers;', 'sql': 'SELECT name, branch FROM soldier_details;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Here is the SQL query based on the provided prompt and context:\n\n```sql\nSELECT name, branch FROM soldier_details;\n```\n\nThis query selects the 'name' and 'branch' columns from the 'soldier_details' view, which was created in the provided SQL context."
), 1), (Example({'sql_prompt': "What is the average attendance for 'Jazz' concerts?", 'sql_context': "CREATE TABLE concerts(id INT, genre VARCHAR(255), avg_attendance FLOAT); INSERT INTO concerts (id, genre, avg_attendance) VALUES (1, 'Jazz', 200.0), (2, 'Classical', 300.0), (3, 'Rock', 500.0);", 'sql': "SELECT avg_attendance FROM concerts WHERE genre = 'Jazz';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="```sql\nSELECT avg(avg_attendance) AS average_attendance\nFROM concerts\nWHERE genre = 'Jazz';\n```"
), 1), (Example({'sql_prompt': "How many astronauts are from 'Brazil'?", 'sql_context': "CREATE TABLE AstronautData (id INT, name VARCHAR(50), country VARCHAR(50), height FLOAT, weight FLOAT, blood_pressure FLOAT); INSERT INTO AstronautData (id, name, country, height, weight, blood_pressure) VALUES (1, 'John', 'USA', 180, 80, 120), (2, 'Jane', 'Canada', 170, 70, 110), (3, 'Alex', 'Brazil', 190, 90, 130), (4, 'Elena', 'Russia', 165, 60, 115);", 'sql': "SELECT COUNT(*) FROM AstronautData WHERE country = 'Brazil';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Here is the SQL query based on the provided prompt and context:\n\n```sql\nSELECT COUNT(*) AS astronaut_count\nFROM AstronautData\nWHERE country = 'Brazil';\n```\n\nThis query counts the number of rows in the `AstronautData` table where the `country` column is equal to 'Brazil', giving you the number of astronauts from Brazil."
), 1), (Example({'sql_prompt': 'Delete all records in the "digital_divide_stats" table where the "country" is \'United States\'', 'sql_context': 'CREATE TABLE digital_divide_stats (id INT PRIMARY KEY, country VARCHAR(255), year INT, internet_users INT, total_population INT);', 'sql': "WITH deleted_data AS (DELETE FROM digital_divide_stats WHERE country = 'United States' RETURNING *) SELECT * FROM deleted_data;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SQL: ```sql\nDELETE FROM digital_divide_stats WHERE country = 'United States';\n```"
), 1), (Example({'sql_prompt': "What is the maximum depth of marine species in the 'marine_species' table, grouped by their phylum?", 'sql_context': "CREATE TABLE marine_species (id INT, name VARCHAR(255), phylum VARCHAR(255), depth FLOAT); INSERT INTO marine_species (id, name, phylum, depth) VALUES (1, 'Pacific salmon', 'Chordata', 50.0), (2, 'Hawaiian monk seal', 'Chordata', 500.0), (3, 'Sea anemone', 'Cnidaria', 0.01);", 'sql': 'SELECT phylum, MAX(depth) AS max_depth FROM marine_species GROUP BY phylum;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='```sql\nSELECT phylum, MAX(depth) AS max_depth\nFROM marine_species\nGROUP BY phylum;\n```'
), 1), (Example({'sql_prompt': 'What is the percentage of autonomous vehicles sold in the US that are electric?', 'sql_context': 'CREATE TABLE AutonomousVehicles (Make VARCHAR(50), Model VARCHAR(50), Year INT, Country VARCHAR(50), Type VARCHAR(50), Sales INT);', 'sql': "SELECT 100.0 * SUM(CASE WHEN Type = 'Electric' THEN Sales ELSE 0 END) / SUM(Sales) AS Percentage FROM AutonomousVehicles WHERE Country = 'United States';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Here is the SQL query based on the provided prompt and context:\n\n```sql\nSELECT \n    (SUM(Sales) * 100.0 / (SELECT SUM(Sales) FROM AutonomousVehicles)) AS PercentageElectric\nFROM \n    AutonomousVehicles\nWHERE \n    Type = 'Electric' AND Country = 'US';\n```\n\nThis query calculates the percentage of autonomous vehicles sold in the US that are electric by summing up the sales of electric vehicles in the US and then dividing it by the total sales of autonomous vehicles, multiplying by 100 to get the percentage."
), 1), (Example({'sql_prompt': 'Show the average number of streams per day for artists who have held concerts in the USA and Canada.', 'sql_context': 'CREATE TABLE music_streaming (artist_id INT, artist_name VARCHAR(100), genre VARCHAR(50), total_streams BIGINT, stream_date DATE); CREATE TABLE concert_ticket_sales (concert_id INT, artist_id INT, concert_date DATE, venue VARCHAR(100), country VARCHAR(50));', 'sql': "SELECT AVG(ms.total_streams / COUNT(DISTINCT ms.stream_date)) AS avg_daily_streams FROM music_streaming ms INNER JOIN concert_ticket_sales cts ON ms.artist_id = cts.artist_id WHERE cts.country IN ('USA', 'Canada');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="```sql\nSELECT\n    m.artist_id,\n    m.artist_name,\n    AVG(m.total_streams) AS avg_streams_per_day\nFROM music_streaming m\nJOIN concert_ticket_sales c ON m.artist_id = c.artist_id\nWHERE c.country IN ('USA', 'Canada')\nGROUP BY m.artist_id, m.artist_name;\n```"
), 1), (Example({'sql_prompt': 'What is the minimum number of crimes committed in each type for the past year?', 'sql_context': "CREATE TABLE crimes (crime_id INT, crime_type VARCHAR(255), committed_date DATE); INSERT INTO crimes (crime_id, crime_type, committed_date) VALUES (1, 'Theft', '2022-01-01'), (2, 'Assault', '2022-01-02'), (3, 'Theft', '2022-01-03');", 'sql': 'SELECT c.crime_type, MIN(COUNT(c.crime_id)) FROM crimes c WHERE c.committed_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY c.crime_type;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="```sql\nSELECT crime_type, MIN(crime_id) AS min_crime_id\nFROM crimes\nWHERE committed_date BETWEEN '2022-01-01' AND '2023-01-01'\nGROUP BY crime_type;\n```"
), 1), (Example({'sql_prompt': "Delete all marine species in the 'marine_species' table that belong to the 'Mollusca' phylum.", 'sql_context': "CREATE TABLE marine_species (id INT, name VARCHAR(255), phylum VARCHAR(255)); INSERT INTO marine_species (id, name, phylum) VALUES (1, 'Pacific salmon', 'Chordata'), (2, 'Blue whale', 'Chordata'), (3, 'Sea anemone', 'Cnidaria');", 'sql': "DELETE FROM marine_species WHERE phylum = 'Mollusca';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="```sql\nDELETE FROM marine_species\nWHERE phylum = 'Mollusca';\n```"
), 0), (Example({'sql_prompt': 'What is the average price of vegan menu items in the database?', 'sql_context': "CREATE TABLE menus (menu_id INT, menu_name TEXT, type TEXT, price DECIMAL); INSERT INTO menus (menu_id, menu_name, type, price) VALUES (1, 'Quinoa Salad', 'Vegetarian', 12.99), (2, 'Chicken Caesar Wrap', 'Gluten-free', 10.99), (3, 'Vegan Burger', 'Vegan', 14.99), (4, 'Falafel Wrap', 'Vegan', 9.99);", 'sql': "SELECT AVG(price) FROM menus WHERE type = 'Vegan';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Here is the SQL query based on the provided prompt and context:\n\n```sql\nSELECT AVG(price) AS average_vegan_price\nFROM menus\nWHERE type = 'Vegan';\n```\n\nThis query calculates the average price of menu items with the type 'Vegan' in the `menus` table."
), 1), (Example({'sql_prompt': "What is the total number of military vehicles produced by company 'XYZ'?", 'sql_context': "CREATE TABLE military_vehicles (company TEXT, quantity INT, production_date DATE); INSERT INTO military_vehicles (company, quantity, production_date) VALUES ('ABC', 100, '2023-01-01'); INSERT INTO military_vehicles (company, quantity, production_date) VALUES ('XYZ', 200, '2023-02-01');", 'sql': "SELECT SUM(quantity) FROM military_vehicles WHERE company = 'XYZ';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Here is the SQL query based on the provided prompt and context:\n\n```sql\nSELECT SUM(quantity) AS total_production\nFROM military_vehicles\nWHERE company = 'XYZ';\n```\n\nThis query calculates the total number of military vehicles produced by company 'XYZ' by summing up the `quantity` values for that company in the `military_vehicles` table."
), 1), (Example({'sql_prompt': 'Find the supplier with the lowest average delivery time for orders in the last month.', 'sql_context': "CREATE TABLE Suppliers (SupplierID int, SupplierName varchar(50)); CREATE TABLE Products (ProductID int, ProductName varchar(50), SupplierID int); CREATE TABLE Orders (OrderID int, ProductID int, OrderDate date, DeliveryTime int); INSERT INTO Suppliers VALUES (1, 'SupplierA'), (2, 'SupplierB'); INSERT INTO Products VALUES (1, 'Organic Apples', 1), (2, 'Bananas', 2); INSERT INTO Orders VALUES (1, 1, '2022-01-01', 2), (2, 2, '2022-01-03', 3);", 'sql': 'SELECT SupplierName, AVG(DeliveryTime) as AvgDeliveryTime FROM Orders o JOIN Products p ON o.ProductID = p.ProductID JOIN Suppliers sp ON p.SupplierID = sp.SupplierID WHERE OrderDate >= DATEADD(month, -1, GETDATE()) GROUP BY SupplierName ORDER BY AvgDeliveryTime ASC;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Here is the SQL query based on the provided prompt and context:\n```sql\nSELECT s.SupplierID, s.SupplierName, AVG(o.DeliveryTime) AS AvgDeliveryTime\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nJOIN Orders o ON p.ProductID = o.ProductID\nWHERE o.OrderDate >= DATEADD(MONTH, -1, GETDATE())\nGROUP BY s.SupplierID, s.SupplierName\nORDER BY AvgDeliveryTime ASC\nLIMIT 1;\n```\n\nThis query joins the `Suppliers`, `Products`, and `Orders` tables based on their respective IDs. It filters orders placed in the last month using the'
), 1), (Example({'sql_prompt': 'What is the maximum number of games played concurrently by a player, for each platform?', 'sql_context': "CREATE TABLE PlayerGames (PlayerID INT, Platform VARCHAR(10), MaxGames INT); INSERT INTO PlayerGames (PlayerID, Platform, MaxGames) VALUES (1, 'PC', 3);", 'sql': 'SELECT Platform, MAX(MaxGames) as MaxConcurrentGames FROM PlayerGames GROUP BY Platform;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='```sql\nSELECT Platform, MAX(MaxGames) AS MaxConcurrentGames\nFROM PlayerGames\nGROUP BY Platform;\n```'
), 1), (Example({'sql_prompt': 'Which broadband subscribers have a download speed greater than 300 Mbps?', 'sql_context': 'CREATE TABLE broadband_subscribers (subscriber_id INT, download_speed FLOAT); INSERT INTO broadband_subscribers (subscriber_id, download_speed) VALUES (1, 250.6), (2, 350.8), (3, 120.9);', 'sql': 'SELECT subscriber_id FROM broadband_subscribers WHERE download_speed > 300;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='```sql\nSELECT subscriber_id\nFROM broadband_subscribers\nWHERE download_speed > 300;\n```'
), 1), (Example({'sql_prompt': 'Which cities have a higher average temperature in the "Finance" scheme than in the "Mitigation" scheme?', 'sql_context': "CREATE TABLE Mitigation (city VARCHAR(255), avg_temp FLOAT); INSERT INTO Mitigation VALUES ('CityA', 20.5), ('CityB', 22.3); CREATE TABLE Finance (city VARCHAR(255), avg_temp FLOAT); INSERT INTO Finance VALUES ('CityA', 23.0), ('CityX', 23.5);", 'sql': 'SELECT Finance.city FROM Finance, Mitigation WHERE Finance.city = Mitigation.city AND Finance.avg_temp > Mitigation.avg_temp'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='```sql\nSELECT city\nFROM Finance f\nJOIN Mitigation m ON f.city = m.city\nWHERE f.avg_temp > m.avg_temp;\n```'
), 1), (Example({'sql_prompt': "What is the average playtime, in hours, for players from Germany, for games in the 'Simulation' genre?", 'sql_context': 'CREATE TABLE games (game_id INT, game_genre VARCHAR(255), player_id INT, playtime_mins INT); CREATE TABLE players (player_id INT, player_country VARCHAR(255));', 'sql': "SELECT AVG(playtime_mins / 60) FROM games JOIN players ON games.player_id = players.player_id WHERE players.player_country = 'Germany' AND game_genre = 'Simulation';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="```sql\nSELECT AVG(playtime_mins / 60) AS avg_playtime_hours\nFROM games\nJOIN players ON games.player_id = players.player_id\nWHERE players.player_country = 'Germany' AND games.game_genre = 'Simulation';\n```"
), 1), (Example({'sql_prompt': 'Show the sum of investments by year and industry', 'sql_context': "CREATE TABLE investments (id INT, investment_year INT, industry VARCHAR(255), investment_amount DECIMAL(10,2)); INSERT INTO investments (id, investment_year, industry, investment_amount) VALUES (1, 2020, 'Tech', 50000.00), (2, 2019, 'Biotech', 20000.00), (3, 2020, 'Tech', 75000.00);", 'sql': 'SELECT investment_year, industry, SUM(investment_amount) as total_investments FROM investments GROUP BY investment_year, industry;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Here is the SQL query based on the provided prompt and context:\n```sql\nSELECT investment_year, industry, SUM(investment_amount) AS total_investment\nFROM investments\nGROUP BY investment_year, industry\nORDER BY investment_year, industry;\n```\n\nThis query calculates the sum of investment amounts for each year and industry combination and presents the results in a table with columns for the investment year, industry, and the total investment amount. The results are ordered by investment year and then by industry.'
), 1), (Example({'sql_prompt': 'What is the total amount of funds allocated for each type of disaster?', 'sql_context': "CREATE TABLE DisasterFunds (DisasterType VARCHAR(20), FundID INT, AllocatedAmount DECIMAL(10,2)); INSERT INTO DisasterFunds (DisasterType, FundID, AllocatedAmount) VALUES ('Earthquake', 1, 5000.00), ('Flood', 2, 7500.00), ('Hurricane', 3, 10000.00), ('Tornado', 4, 12500.00), ('Volcano', 5, 15000.00);", 'sql': 'SELECT DisasterType, SUM(AllocatedAmount) as TotalFunds FROM DisasterFunds GROUP BY DisasterType;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Here is the SQL query based on the provided prompt and context:\n\n```sql\nSELECT DisasterType, SUM(AllocatedAmount) AS TotalAllocatedFunds\nFROM DisasterFunds\nGROUP BY DisasterType;\n```\n\nThis query selects the `DisasterType` and calculates the sum of `AllocatedAmount` for each type of disaster using the `SUM` function. The `GROUP BY` clause groups the results by `DisasterType`, providing a total amount of funds allocated for each type of disaster.'
), 1), (Example({'sql_prompt': 'What is the market share of Hotel X in terms of revenue generated by hotels in New York City?', 'sql_context': "CREATE TABLE hotels (hotel_id INT, hotel_name TEXT, city TEXT, revenue FLOAT); INSERT INTO hotels (hotel_id, hotel_name, city, revenue) VALUES (1, 'Hotel X', 'New York City', 1000000), (2, 'Hotel Y', 'New York City', 800000), (3, 'Hotel Z', 'New York City', 700000);", 'sql': "SELECT (hotels.revenue / (SELECT SUM(revenue) FROM hotels WHERE city = 'New York City') * 100) as market_share FROM hotels WHERE hotel_name = 'Hotel X';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Here is the SQL query based on the provided prompt and context:\n\n```sql\nSELECT hotel_name, revenue,\n       (revenue / SUM(revenue) OVER (PARTITION BY city)) * 100 AS market_share\nFROM hotels\nWHERE city = 'New York City';\n```\n\nThis query calculates the market share of each hotel in New York City based on their revenue. It uses the `SUM` window function to calculate the total revenue for all hotels in the same city and then computes the percentage share of each hotel's revenue out of the total."
), 1), (Example({'sql_prompt': "How many vehicles of type 'Trolleybus' are due for maintenance in the next 30 days?", 'sql_context': "CREATE TABLE vehicles (id INT, vehicle_type VARCHAR(255), model_year INT, last_maintenance_date DATE, next_maintenance_date DATE); INSERT INTO vehicles (id, vehicle_type, model_year, last_maintenance_date, next_maintenance_date) VALUES (2004, 'Trolleybus', 2020, '2022-04-20', '2022-07-20'), (2005, 'Tram', 2019, '2022-05-15', '2022-11-15');", 'sql': "SELECT vehicle_type, TIMESTAMPDIFF(DAY, CURDATE(), next_maintenance_date) as days_until_next_maintenance FROM vehicles WHERE vehicle_type = 'Trolleybus' HAVING days_until_next_maintenance <= 30;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Here is the SQL query based on the provided prompt and context:\n```sql\nSELECT COUNT(*) AS maintenance_due_count\nFROM vehicles\nWHERE vehicle_type = 'Trolleybus'\n  AND next_maintenance_date BETWEEN DATEADD(DAY, 1, GETDATE()) AND DATEADD(DAY, 30, GETDATE());\n```\n\nThis query counts the number of 'Trolleybus' vehicles whose next maintenance date falls within the next 30 days from the current date."
), 1), (Example({'sql_prompt': "Insert a new row into the 'startups' table for 'Health Startup 5', founded in '2022-03-15' by 'Middle Eastern' founder, with a funding amount of $7,500,000", 'sql_context': 'CREATE TABLE startups (id INT, name TEXT, industry TEXT, founding_date DATE, raised_funding FLOAT, founder_race TEXT);', 'sql': "INSERT INTO startups (name, industry, founding_date, raised_funding, founder_race) VALUES ('Health Startup 5', 'Healthcare', '2022-03-15', 7500000.00, 'Middle Eastern');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Here is the SQL query based on the provided prompt and context:\n```sql\nINSERT INTO startups (name, industry, founding_date, raised_funding, founder_race)\nVALUES ('Health Startup 5', 'Health', '2022-03-15', 7500000.00, 'Middle Eastern');\n```\n\nThis query inserts a new row into the 'startups' table with the specified details for 'Health Startup 5'."
), 1), (Example({'sql_prompt': 'How many mental health parity complaints were filed in the last 12 months by state?', 'sql_context': "CREATE TABLE mental_health_parity_complaints (complaint_id INT, complaint_date DATE, state VARCHAR(20)); INSERT INTO mental_health_parity_complaints (complaint_id, complaint_date, state) VALUES (1, '2021-01-01', 'California'), (2, '2021-03-15', 'New York'), (3, '2020-12-31', 'Texas');", 'sql': 'SELECT state, COUNT(*) as num_complaints FROM mental_health_parity_complaints WHERE complaint_date >= DATE_SUB(CURRENT_DATE, INTERVAL 12 MONTH) GROUP BY state;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='```sql\nSELECT state, COUNT(*) AS complaint_count\nFROM mental_health_parity_complaints\nWHERE complaint_date >= DATEADD(MONTH, -12, GETDATE())\nGROUP BY state;\n```\n\nThis SQL query retrieves the number of mental health parity complaints filed in the last 12 months for each state. It uses the `DATEADD` function to subtract 12 months from the current date (`GETDATE()`) to determine the start date for the time range. The `COUNT(*)` function counts the number of complaints for each state, and the `GROUP BY` clause groups the results by state.'
), 1), (Example({'sql_prompt': 'Which chemical plants have exceeded the maximum allowed emission limit in the last year?', 'sql_context': "CREATE TABLE plants (plant_id INT, plant_name VARCHAR(50)); CREATE TABLE emissions (plant_id INT, emission_level INT, emission_date DATE); INSERT INTO plants (plant_id, plant_name) VALUES (1, 'Plant A'), (2, 'Plant B'); INSERT INTO emissions (plant_id, emission_level, emission_date) VALUES (1, 500, '2022-01-01'), (2, 450, '2022-01-01');", 'sql': 'SELECT plants.plant_name FROM plants INNER JOIN emissions ON plants.plant_id = emissions.plant_id WHERE emissions.emission_level > (SELECT MAX(emission_limit) FROM allowed_emissions) AND emissions.emission_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Here is the SQL query based on the provided prompt and context:\n```sql\nSELECT p.plant_name\nFROM plants p\nJOIN emissions e ON p.plant_id = e.plant_id\nWHERE e.emission_level > 500 AND e.emission_date BETWEEN '2022-01-01' AND '2023-01-01';\n```\n\nThis query joins the `plants` and `emissions` tables on the `plant_id` column and filters the results to include only those plants with emission levels exceeding 500 units and emission dates between January 1, 2022, and January 1,"
), 1), (Example({'sql_prompt': 'What is the total duration played for each player?', 'sql_context': "CREATE TABLE PlayerGame (PlayerID INT, GameID INT, Played DATE, StartTime TIMESTAMP, EndTime TIMESTAMP); INSERT INTO PlayerGame (PlayerID, GameID, Played, StartTime, EndTime) VALUES (1, 1, '2022-01-01', '2022-01-01 10:00:00', '2022-01-01 12:00:00'), (2, 2, '2022-01-02', '2022-01-02 14:00:00', '2022-01-02 16:00:00'), (3, 1, '2022-01-03', '2022-01-03 10:00:00', '2022-01-03 11:00:00'), (4, 3, '2022-01-04', '2022-01-04 18:00:00', '2022-01-04 19:00:00');", 'sql': 'SELECT PlayerID, SUM(TIMESTAMPDIFF(MINUTE, StartTime, EndTime)) FROM PlayerGame GROUP BY PlayerID;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Here is the SQL query based on the provided prompt and context:\n\n```sql\nSELECT PlayerID, \n       SUM(TIME_TO_SEC(TIMEDIFF(EndTime, StartTime))) AS TotalDurationSeconds\nFROM PlayerGame\nGROUP BY PlayerID;\n```\n\nThis query calculates the total duration played for each player by subtracting the start time from the end time and converting the result to seconds using the `TIME_TO_SEC` function. The `GROUP BY` clause groups the results by `PlayerID`, so you get the total duration played for each player.'
), 1), (Example({'sql_prompt': 'What is the percentage of legal technology patents granted to applicants in California since 2010?', 'sql_context': 'CREATE TABLE legal_technology_patents (patent_id INT, grant_date DATE, state VARCHAR(20));', 'sql': "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM legal_technology_patents WHERE grant_date >= '2010-01-01')) AS percentage FROM legal_technology_patents WHERE state = 'California';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="```sql\nSELECT \n    (COUNT(*) / CAST(SUM(CASE WHEN state = 'California' THEN 1 ELSE 0 END) AS FLOAT)) * 100 AS percentage\nFROM \n    legal_technology_patents\nWHERE \n    grant_date >= '2010-01-01';\n```"
), 0), (Example({'sql_prompt': "What is the total quantity of menu items sold in the 'Appetizers' category from the 'Asian' cuisine type?", 'sql_context': "CREATE TABLE menu (menu_id INT, menu_name VARCHAR(50), category VARCHAR(50), cuisine VARCHAR(50), quantity_sold INT, price DECIMAL(5,2), month_sold INT); INSERT INTO menu (menu_id, menu_name, category, cuisine, quantity_sold, price, month_sold) VALUES (12, 'Spring Rolls', 'Appetizers', 'Asian', 30, 4.99, 1), (13, 'Edamame', 'Appetizers', 'Asian', 40, 3.99, 1);", 'sql': "SELECT SUM(quantity_sold) FROM menu WHERE category = 'Appetizers' AND cuisine = 'Asian';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="```sql\nSELECT SUM(quantity_sold) AS total_quantity_sold\nFROM menu\nWHERE category = 'Appetizers' AND cuisine = 'Asian';\n```"
), 1), (Example({'sql_prompt': 'How many volunteers signed up in each region in 2021?', 'sql_context': "CREATE TABLE volunteers (id INT, name TEXT, region TEXT, signup_date DATE); INSERT INTO volunteers (id, name, region, signup_date) VALUES (1, 'Alice', 'North', '2021-02-03'), (2, 'Bob', 'South', '2021-05-05'), (3, 'Charlie', 'East', '2020-12-12');", 'sql': 'SELECT region, COUNT(*) FROM volunteers WHERE YEAR(signup_date) = 2021 GROUP BY region;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='```sql\nSELECT region, COUNT(*) AS volunteer_count\nFROM volunteers\nWHERE YEAR(signup_date) = 2021\nGROUP BY region;\n```'
), 1), (Example({'sql_prompt': 'What is the total distance traveled for all buses in the London transit system in the past week?', 'sql_context': 'CREATE TABLE london_buses (bus_id INT, daily_distance FLOAT, date DATE);', 'sql': 'SELECT SUM(daily_distance) FROM london_buses WHERE date >= DATE_SUB(NOW(), INTERVAL 1 WEEK);'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Here is the SQL query based on the provided prompt and context:\n\n```sql\nSELECT bus_id, SUM(daily_distance) AS total_distance\nFROM london_buses\nWHERE date BETWEEN DATEADD(DAY, -7, GETDATE()) AND GETDATE()\nGROUP BY bus_id;\n```\n\nThis query calculates the total distance traveled by each bus in the London transit system over the past week. It uses the `london_buses` table, which contains daily distance data for each bus, and filters the records to only include those from the past week using the `WHERE` clause. The results are then grouped by `bus_id`, and the `SUM` function is used to calculate'
), 0), (Example({'sql_prompt': "List all suppliers who provide products to 'Organic Foods' store in the 'StoreSuppliers' table", 'sql_context': "CREATE TABLE StoreSuppliers (store VARCHAR(255), supplier VARCHAR(255)); INSERT INTO StoreSuppliers (store, supplier) VALUES ('Organic Foods', 'Supplier A'), ('Organic Foods', 'Supplier B'), ('Health Foods', 'Supplier C');", 'sql': "SELECT supplier FROM StoreSuppliers WHERE store = 'Organic Foods';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Here is the SQL query based on the provided prompt and context:\n\n```sql\nSELECT DISTINCT supplier\nFROM StoreSuppliers\nWHERE store = 'Organic Foods';\n```\n\nThis query selects distinct suppliers from the `StoreSuppliers` table where the store name is 'Organic Foods'."
), 1), (Example({'sql_prompt': 'What is the percentage of total humanitarian aid spent on education in each world region?', 'sql_context': "CREATE TABLE humanitarian_aid (id INT, region TEXT, category TEXT, amount FLOAT); INSERT INTO humanitarian_aid (id, region, category, amount) VALUES (1, 'Africa', 'Education', 500), (2, 'Asia', 'Health', 750), (3, 'Africa', 'Health', 250);", 'sql': "SELECT region, (SUM(case when category = 'Education' then amount else 0 end) / SUM(amount)) * 100 as education_percentage FROM humanitarian_aid GROUP BY region;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='```sql\nSELECT region,\n       category,\n       amount / SUM(amount) OVER (PARTITION BY region) * 100 AS percentage_spent\nFROM humanitarian_aid;\n```'
), 0)]