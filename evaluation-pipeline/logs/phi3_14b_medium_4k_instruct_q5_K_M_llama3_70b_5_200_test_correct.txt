[(Example({'sql_prompt': "Update the name of the passenger with the id 3 to 'Emily Lee'.", 'sql_context': "CREATE TABLE PASSENGERS (id INT, name VARCHAR(50)); INSERT INTO PASSENGERS VALUES (3, 'James Brown');", 'sql': "UPDATE PASSENGERS SET name = 'Emily Lee' WHERE id = 3;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: Update the name of the passenger with the id 3 to 'Emily Lee'.\nSql Context: The table `PASSENGERS` contains information about passengers including their unique identifier (`id`) and names. Currently, there is a record for a passenger with an ID of 3 whose name is 'James Brown'.\nSql: UPDATE PASSENGERS SET name = 'Emily Lee' WHERE id = 3;"
), 1), (Example({'sql_prompt': "What is the number of women-led agricultural businesses in the 'business_data' table?", 'sql_context': "CREATE TABLE business_data (business_id INT, business_name VARCHAR(50), gender VARCHAR(10)); INSERT INTO business_data (business_id, business_name, gender) VALUES (1, 'Green Acres', 'female'), (2, 'Brown Farms', 'male'), (3, 'Eco Harvest', 'non-binary');", 'sql': "SELECT COUNT(business_id) FROM business_data WHERE gender = 'female';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: What is the number of women-led agricultural businesses in the 'business_data' table?\nSql Context: The 'business_data' table contains information about various agricultural businesses. Each record includes a unique identifier (business_id), the name of the business (business_name), and the gender associated with leading the business (gender).\nSql: SELECT COUNT(*) AS number_of_women_led_businesses FROM business_data WHERE gender = 'female';"
), 1), (Example({'sql_prompt': "What is the average rating for 'Gluten-Free' items?", 'sql_context': "CREATE TABLE ratings (item_name TEXT, is_gluten_free BOOLEAN, rating INTEGER); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Quinoa Salad', true, 4); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Chicken Stir Fry', false, 5);", 'sql': 'SELECT AVG(rating) FROM ratings WHERE is_gluten_free = true;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: What is the average rating for 'Gluten-Free' items?\nSql Context: The table `ratings` contains columns for item names (`item_name`), whether they are gluten-free or not (`is_gluten_free`), and their ratings (`rating`). There are at least two entries in this table, one for a 'Quinoa Salad' which is gluten-free with a rating of 4, and another for a 'Chicken Stir Fry' which is not gluten-free with a rating of 5.\nSql: SELECT AVG(rating) AS average_gluten_free_rating FROM ratings WHERE is_gluten_free = TRUE"
), 1), (Example({'sql_prompt': 'What is the maximum amount of dissolved oxygen (DO) in the ocean_health table for each month in 2021?', 'sql_context': "CREATE TABLE ocean_health (date DATE, do_value INT); INSERT INTO ocean_health (date, do_value) VALUES ('2021-01-01', 8), ('2021-01-02', 7), ('2021-02-01', 6), ('2021-02-02', 9);", 'sql': "SELECT EXTRACT(MONTH FROM date) as month, MAX(do_value) as max_do_value FROM ocean_health WHERE date BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY EXTRACT(MONTH FROM date);"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: What is the maximum amount of dissolved oxygen (DO) in the ocean_health table for each month in 2021?\nSql Context: The `ocean_health` table contains daily records of dissolved oxygen values (`do_value`) with corresponding dates. Each record represents a single day's measurement within the year 2021.\nSql:\n```sql\nSELECT \n    EXTRACT(MONTH FROM date) AS month,\n    MAX(do_value) AS max_dissolved_oxygen\nFROM \n    ocean_health\nWHERE \n    date >= '2021-01"
), 1), (Example({'sql_prompt': 'What are the total sales and quantity of goods sold by each salesperson, grouped by city?', 'sql_context': 'CREATE TABLE salesperson (id INT, name TEXT, city TEXT); CREATE TABLE sales (id INT, salesperson_id INT, product TEXT, quantity INT, total_sales FLOAT);', 'sql': 'SELECT s.name, s.city, SUM(s.total_sales) as total_sales, SUM(s.quantity) as total_quantity FROM sales s JOIN salesperson sp ON s.salesperson_id = sp.id GROUP BY s.city, s.name;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: What are the total sales and quantity of goods sold by each salesperson, grouped by city?\n\nSql Context: \n- There is a table named `salesperson` with columns for id (INT), name (TEXT), and city (TEXT).\n- Another table called `sales` includes columns for id (INT), salesperson_id (INT) as a foreign key to the salesperson's id, product (TEXT), quantity (INT), and total_sales (FLOAT).\n\nSql: \n```sql\nSELECT sp.name AS SalespersonName, \n       sp.city AS City, \n       SUM(s.quantity) AS TotalQuantity"
), 0), (Example({'sql_prompt': 'What is the total funding received by startups in the technology sector that were founded by women?', 'sql_context': "CREATE TABLE startups(id INT, name TEXT, sector TEXT, founder_gender TEXT, funding FLOAT); INSERT INTO startups VALUES (1, 'Acme Inc', 'Technology', 'Female', 2000000); INSERT INTO startups VALUES (2, 'Beta Corp', 'Retail', 'Male', 3000000); INSERT INTO startups VALUES (3, 'Gamma Start', 'Technology', 'Female', 5000000);", 'sql': "SELECT SUM(funding) FROM startups WHERE sector = 'Technology' AND founder_gender = 'Female';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: What is the total funding received by startups in the technology sector that were founded by women?\n\nSql Context: The table `startups` contains information about various startup companies, including their ID (`id`), name (`name`), sector they operate in (`sector`), gender of the founder(`founder_gender`), and the amount of funding received (`funding`).\n\nSql: \n```sql\nSELECT SUM(funding) AS total_funding\nFROM startups\nWHERE sector = 'Technology' AND founder_gender = 'Female';\n```"
), 1), (Example({'sql_prompt': 'What is the recycling rate of plastic in the residential sector in the state of New York?', 'sql_context': "CREATE TABLE recycling_rates_city (sector VARCHAR(20), city VARCHAR(20), material VARCHAR(20), recycling_rate DECIMAL(5,2)); INSERT INTO recycling_rates_city (sector, city, material, recycling_rate) VALUES ('residential', 'New York City', 'plastic', 0.25), ('commercial', 'New York City', 'plastic', 0.30), ('residential', 'New York City', 'paper', 0.45), ('commercial', 'New York City', 'paper', 0.50), ('residential', 'Los Angeles', 'plastic', 0.20), ('commercial', 'Los Angeles', 'plastic', 0.35), ('residential', 'Los Angeles', 'paper', 0.40), ('commercial', 'Los Angeles', 'paper', 0.50);", 'sql': "SELECT recycling_rate FROM recycling_rates_city WHERE sector = 'residential' AND material = 'plastic' AND city = 'New York City';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="```sql\nSELECT recycling_rate\nFROM recycling_rates_city\nWHERE sector = 'residential' AND city = 'New York City' AND material = 'plastic';\n```"
), 1), (Example({'sql_prompt': "Which startups in the 'StartupFunding' table received funding in 2020 or later and have a budget greater than $500,000?", 'sql_context': "CREATE SCHEMA BiotechStartups; CREATE TABLE StartupFunding (startup_name VARCHAR(50), funding_year INT, funding DECIMAL(10, 2)); INSERT INTO StartupFunding VALUES ('StartupA', 2019, 500000), ('StartupB', 2020, 750000);", 'sql': 'SELECT startup_name FROM BiotechStartups.StartupFunding WHERE funding_year >= 2020 AND funding > 500000;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: Which startups in the 'StartupFunding' table received funding in 2020 or later and have a budget greater than $500,000?\nSql Context: CREATE SCHEMA BiotechStartups; CREATE TABLE StartupFunding (startup_name VARCHAR(50), funding_year INT, funding DECIMAL(10, 2)); INSERT INTO StartupFunding VALUES ('StartupA', 2019, 500000), ('StartupB', 2020, 750000);\nSql: SELECT startup_name FROM Biotech"
), 0), (Example({'sql_prompt': "How many female engineers are there in 'australian_mines'?", 'sql_context': "CREATE SCHEMA if not exists australia_schema;CREATE TABLE australia_schema.australian_mines (id INT, name VARCHAR, gender VARCHAR, role VARCHAR);INSERT INTO australia_schema.australian_mines (id, name, gender, role) VALUES (1, 'S worker', 'Female', 'Engineer'), (2, 'T engineer', 'Male', 'Engineer');", 'sql': "SELECT COUNT(*) FROM australia_schema.australian_mines WHERE gender = 'Female' AND role = 'Engineer';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: How many female engineers are there in 'australian_mines'?\nSql Context: The table `australia_schema.australian_mines` contains records of individuals working at the Australian mines, with columns for their ID (`id`), name (`name`), gender (`gender`), and role (`role`).\nSql: \n```sql\nSELECT COUNT(*) AS female_engineers_count\nFROM australia_schema.australian_mines\nWHERE gender = 'Female' AND role = 'Engineer';\n```"
), 1), (Example({'sql_prompt': 'What is the average salary of employees in each position?', 'sql_context': "CREATE TABLE Employees (EmployeeID INT, Name VARCHAR(50), Department VARCHAR(50), Position VARCHAR(50), Salary FLOAT); INSERT INTO Employees (EmployeeID, Name, Department, Position, Salary) VALUES (1, 'John Doe', 'IT', 'Developer', 75000.00), (2, 'Jane Smith', 'IT', 'Developer', 80000.00), (3, 'Alice Johnson', 'Marketing', 'Marketing Specialist', 60000.00), (4, 'Bob Brown', 'HR', 'HR Specialist', 65000.00);", 'sql': 'SELECT Position, AVG(Salary) FROM Employees GROUP BY Position;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='SELECT Position, AVG(Salary) AS Average_Salary FROM Employees GROUP BY Position;'
), 1), (Example({'sql_prompt': 'What are the names and ranks of all military personnel in country W who were demoted in the year 2019?', 'sql_context': "CREATE TABLE military_demotions (id INT, name TEXT, country TEXT, rank TEXT, demotion_year INT);INSERT INTO military_demotions (id, name, country, rank, demotion_year) VALUES (1, 'John Doe', 'Country W', 'Colonel', 2019);", 'sql': "SELECT name, rank FROM military_demotions WHERE country = 'Country W' AND demotion_year = 2019;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: What are the names and ranks of all military personnel in country W who were demoted in the year 2019?\n\nSql Context: The table `military_demotions` contains records of individuals who have been demoted, including their ID, name, country they belong to, rank before demotion, and the year of demotion.\n\nSql: SELECT name, rank FROM military_demotions WHERE country = 'Country W' AND demotion_year = 2019;"
), 1), (Example({'sql_prompt': "List the top 2 sectors with the highest donation amounts in the 'Asia' region for the year 2018, ordered by the donation amount in descending order.", 'sql_context': "CREATE TABLE Donors (donor_id INT, donor_name VARCHAR(255), donation_amount INT, sector VARCHAR(255), region VARCHAR(255), donation_date DATE); INSERT INTO Donors (donor_id, donor_name, donation_amount, sector, region, donation_date) VALUES (1, 'DonorA', 100000, 'Health', 'Asia', '2018-01-01');", 'sql': "SELECT sector, SUM(donation_amount) AS total_donation FROM Donors WHERE region = 'Asia' AND donation_date >= '2018-01-01' AND donation_date < '2019-01-01' GROUP BY sector ORDER BY total_donation DESC LIMIT 2;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: List the top 2 sectors with the highest donation amounts in the 'Asia' region for the year 2018, ordered by the donation amount in descending order.\nSql Context: The table `Donors` contains information about donations made to various sectors across different regions and dates. Each record includes a unique `donor_id`, the name of the donor (`donor_name`), the amount donated (`donation_amount`), the sector that received the donation (`sector`), the region where the donation was made (`region`), and the date when the donation occurred (`donation_date`).\nSql: \n```sql\nSELECT sector,"
), 0), (Example({'sql_prompt': "Display the vendor with the highest average price for 'Salmon' in the 'sales' table.", 'sql_context': "CREATE TABLE sales (id INT PRIMARY KEY, vendor VARCHAR(50), quantity INT, species VARCHAR(50), price DECIMAL(5,2)); INSERT INTO sales (id, vendor, quantity, species, price) VALUES (1, 'Seafood Haven', 20, 'Salmon', 15.99), (2, 'Sea Bounty', 30, 'Tilapia', 9.49), (3, 'Sea Bounty', 15, 'Cod', 14.50), (4, 'Fresh Catch', 25, 'Salmon', 17.99);", 'sql': "SELECT vendor, AVG(price) FROM sales WHERE species = 'Salmon' GROUP BY vendor ORDER BY AVG(price) DESC LIMIT 1;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="```sql\nSELECT vendor, AVG(price) AS average_price\nFROM sales\nWHERE species = 'Salmon'\nGROUP BY vendor\nORDER BY average_price DESC\nLIMIT 1;\n```"
), 1), (Example({'sql_prompt': "Add new military equipment to 'military_equipment' table", 'sql_context': "CREATE TABLE military_equipment (id INT PRIMARY KEY, name VARCHAR(255), type VARCHAR(255), country VARCHAR(255)); INSERT INTO military_equipment (id, name, type, country) VALUES (1, 'M1 Abrams', 'Tank', 'USA');", 'sql': "INSERT INTO military_equipment (id, name, type, country) VALUES (2, 'Leopard 2', 'Tank', 'Germany');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: Add new military equipment to 'military_equipment' table\nSql Context: CREATE TABLE military_equipment (id INT PRIMARY KEY, name VARCHAR(255), type VARCHAR(255), country VARCHAR(255)); INSERT INTO military_equipment (id, name, type, country) VALUES (1, 'M1 Abrams', 'Tank', 'USA');\nSql: INSERT INTO military_equipment (name, type, country) VALUES ('Type 99 Main Battle Tank', 'Tank', 'China');"
), 1), (Example({'sql_prompt': 'Show total number of union members by state', 'sql_context': "CREATE TABLE union_members (id INT, name VARCHAR(50), state VARCHAR(2), city VARCHAR(20), occupation VARCHAR(20)); INSERT INTO union_members (id, name, state, city, occupation) VALUES (1, 'John Doe', 'NY', 'New York', 'Engineer'); INSERT INTO union_members (id, name, state, city, occupation) VALUES (2, 'Jane Smith', 'CA', 'Los Angeles', 'Teacher'); INSERT INTO union_members (id, name, state, city, occupation) VALUES (3, 'Alice Johnson', 'NY', 'Buffalo', 'Nurse');", 'sql': 'SELECT state, COUNT(*) as total_members FROM union_members GROUP BY state;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='```sql\nSELECT state, COUNT(*) AS total_union_members \nFROM union_members \nGROUP BY state;\n```'
), 1), (Example({'sql_prompt': 'What is the total value of military equipment sales to all countries?', 'sql_context': "CREATE TABLE military_sales (id INT, country VARCHAR, value FLOAT); INSERT INTO military_sales (id, country, value) VALUES (1, 'Canada', 5000000), (2, 'Mexico', 3000000), (3, 'Canada', 7000000);", 'sql': 'SELECT SUM(value) FROM military_sales;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Sql Prompt: What is the total value of military equipment sales to all countries?\nSql Context: The table `military_sales` contains records of sales transactions with columns for an ID (`id`), the country where the sale was made (`country`), and the monetary value of each transaction (`value`).\nSql: SELECT SUM(value) AS total_sales FROM military_sales;'
), 1), (Example({'sql_prompt': 'Identify the top 3 countries with the highest number of social impact projects in 2019.', 'sql_context': "CREATE TABLE countries (id INT, name VARCHAR(255), total_projects INT); INSERT INTO countries (id, name, total_projects) VALUES (1, 'Brazil', 500), (2, 'India', 700), (3, 'South Africa', 350); CREATE TABLE projects_by_country (country VARCHAR(255), project_count INT); INSERT INTO projects_by_country (country, project_count) SELECT country, COUNT(*) FROM projects GROUP BY country;", 'sql': 'SELECT c.name, p.project_count FROM countries c JOIN (SELECT country, COUNT(*) AS project_count FROM projects GROUP BY country ORDER BY project_count DESC LIMIT 3) p ON c.name = p.country;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Sql Prompt: Identify the top 3 countries with the highest number of social impact projects in 2019.\n\nSql Context: The context includes two tables - `countries` and `projects_by_country`. The `countries` table contains information about each country, including its ID, name, and total number of projects. The `projects_by_country` table records the count of social impact projects by country for a specific year (2019).\n\nSql: \n```sql\nSELECT c.name AS CountryName, pbc.project_count AS ProjectCount\nFROM countries c\nJOIN projects_by_country pbc ON c.name = pbc.country'
), 0), (Example({'sql_prompt': 'What is the maximum market price of Terbium in China for 2017?', 'sql_context': 'CREATE TABLE Terbium_Market_Prices (id INT, year INT, country VARCHAR(255), market_price FLOAT);', 'sql': "SELECT MAX(market_price) FROM Terbium_Market_Prices WHERE year = 2017 AND country = 'China';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: What is the maximum market price of Terbium in China for 2017?\nSql Context: The table `Terbium_Market_Prices` contains columns for an ID, year, country, and market price of Terbium. Each row represents a record with these details.\nSql: SELECT MAX(market_price) AS max_price FROM Terbium_Market_Prices WHERE country = 'China' AND year = 2017;"
), 1), (Example({'sql_prompt': 'What is the maximum amount of research grant received by a faculty member in the Arts and Humanities department?', 'sql_context': "CREATE TABLE grants_faculty (id INT, department VARCHAR(50), faculty_name VARCHAR(50), amount DECIMAL(10,2), grant_date DATE); INSERT INTO grants_faculty (id, department, faculty_name, amount, grant_date) VALUES (1, 'Arts and Humanities', 'Grace', 12000.00, '2018-06-10'), (2, 'Arts and Humanities', 'Harry', 18000.00, '2019-12-20'), (3, 'Arts and Humanities', 'Ida', 20000.00, '2020-08-05');", 'sql': "SELECT MAX(amount) FROM grants_faculty WHERE department = 'Arts and Humanities';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: What is the maximum amount of research grant received by a faculty member in the Arts and Humanities department?\nSql Context: CREATE TABLE grants_faculty (id INT, department VARCHAR(50), faculty_name VARCHAR(50), amount DECIMAL(10,2), grant_date DATE); INSERT INTO grants_faculty (id, department, faculty_name, amount, grant_date) VALUES \n(1, 'Arts and Humanities', 'Grace', 12000.00, '2018-06-10'), \n(2, 'Arts and Humanities', 'Harry',"
), 0), (Example({'sql_prompt': 'What is the total mass of all space debris in orbit?', 'sql_context': "CREATE TABLE Space_Debris (ID INT, Object_Type VARCHAR(50), Mass FLOAT); INSERT INTO Space_Debris (ID, Object_Type, Mass) VALUES (1, 'Defunct Satellite', 1500.0), (2, 'Rocket Body', 2000.0), (3, 'Fuel Tank', 500.0), (4, 'Nuts and Bolts', 100.0), (5, 'Spent Rocket Stage', 3000.0);", 'sql': 'SELECT SUM(Mass) FROM Space_Debris;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='```sql\nSELECT SUM(Mass) AS Total_Space_Debris_Mass FROM Space_Debris;\n```'
), 1), (Example({'sql_prompt': 'What is the average age of players who play "Racing Simulator 2022"?', 'sql_context': "CREATE TABLE Players (PlayerID INT, PlayerName VARCHAR(50), Game VARCHAR(50), Age INT); INSERT INTO Players (PlayerID, PlayerName, Game, Age) VALUES (1, 'John Doe', 'Racing Simulator 2022', 25), (2, 'Jane Smith', 'Racing Simulator 2022', 30), (3, 'Alice Johnson', 'Shooter Game 2022', 22);", 'sql': "SELECT AVG(Age) FROM Players WHERE Game = 'Racing Simulator 2022';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Sql Prompt: What is the average age of players who play "Racing Simulator 2022"?\nSql Context: The Players table contains information about various players including their ID, name, the game they are playing, and their age. We want to find out the average age of all players who are currently playing "Racing Simulator 2022".\nSql: SELECT AVG(Age) AS Average_Age FROM Players WHERE Game = \'Racing Simulator 2022\';'
), 1), (Example({'sql_prompt': 'What is the total revenue generated by concert ticket sales in the US?', 'sql_context': "CREATE TABLE concert_tickets (ticket_id int, venue_id int, ticket_price decimal, timestamp datetime, country varchar(255)); INSERT INTO concert_tickets (ticket_id, venue_id, ticket_price, timestamp, country) VALUES (1, 789, 50.00, '2022-06-01 12:00:00', 'United States');", 'sql': "SELECT SUM(ticket_price) as total_revenue FROM concert_tickets WHERE timestamp BETWEEN '2022-01-01' AND '2022-12-31' AND country = 'United States';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: What is the total revenue generated by concert ticket sales in the US?\nSql Context: The table `concert_tickets` contains information about tickets sold for concerts, including their price and the country where they were sold.\nSql: \n```sql\nSELECT SUM(ticket_price) AS total_revenue\nFROM concert_tickets\nWHERE country = 'United States';\n```"
), 1), (Example({'sql_prompt': "How many cases did attorney 'Jane Doe' handle in total?", 'sql_context': "CREATE TABLE Attorneys (AttorneyID int, Name varchar(50), Specialty varchar(50)); INSERT INTO Attorneys (AttorneyID, Name, Specialty) VALUES (2, 'Jane Doe', 'Civil'); CREATE TABLE Cases (CaseID int, ClientID int, Category varchar(50), AttorneyID int); INSERT INTO Cases (CaseID, ClientID, Category, AttorneyID) VALUES (301, 3, 'Civil', 2);", 'sql': "SELECT COUNT(*) as TotalCases FROM Cases WHERE AttorneyID = (SELECT AttorneyID FROM Attorneys WHERE Name = 'Jane Doe');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: How many cases did attorney 'Jane Doe' handle in total?\nSql Context: CREATE TABLE Attorneys (AttorneyID int, Name varchar(50), Specialty varchar(50)); INSERT INTO Attorneys (AttorneyID, Name, Specialty) VALUES (2, 'Jane Doe', 'Civil'); CREATE TABLE Cases (CaseID int, ClientID int, Category varchar(50), AttorneyID int); INSERT INTO Cases (CaseID, ClientID, Category, AttorneyID) VALUES (301, 3, 'Civil', 2);\nSql: SELECT COUNT(*) AS Total_Cases FROM Cases"
), 1), (Example({'sql_prompt': 'Show the top 3 content categories in Japan with the most posts.', 'sql_context': "CREATE TABLE content_categories (id INT, content_category VARCHAR(255)); CREATE TABLE posts_extended (id INT, content_category_id INT, content TEXT, country VARCHAR(255)); INSERT INTO content_categories (id, content_category) VALUES (1, 'AI'), (2, 'Data Science'), (3, 'Machine Learning'); INSERT INTO posts_extended (id, content_category_id, content, country) VALUES (1, 1, 'Hello', 'Japan'), (2, 1, 'World', 'Japan'), (3, 2, 'AI', 'Japan');", 'sql': "SELECT content_categories.content_category, COUNT(posts_extended.id) AS post_count FROM content_categories JOIN posts_extended ON posts_extended.content_category_id = content_categories.id WHERE posts_extended.country = 'Japan' GROUP BY content_categories.content_category ORDER BY post_count DESC LIMIT 3;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Sql Prompt: Show the top 3 content categories in Japan with the most posts.\nSql Context: The database contains two tables - `content_categories` and `posts_extended`. The `content_categories` table has columns for category ID (`id`) and name (`content_category`). The `posts_extended` table includes post details such as post ID (`id`), associated content category ID (`content_category_id`), the content of the post (`content`), and the country where the post was made (`country`).\n\nSql: \n```sql\nSELECT cc.content_category, COUNT(pe.id) AS number_of_posts\nFROM posts_extended pe\nJOIN content_'
), 0), (Example({'sql_prompt': 'How many defense contracts were signed in each quarter of 2020?', 'sql_context': "CREATE TABLE defense_contracts (contract_id INT, contract_date DATE); INSERT INTO defense_contracts VALUES (1, '2020-03-15'), (2, '2020-06-01'), (3, '2020-09-15');", 'sql': "SELECT TO_CHAR(contract_date, 'YYYY-Q') AS quarter, COUNT(*) FROM defense_contracts WHERE contract_date >= DATE '2020-01-01' AND contract_date < DATE '2021-01-01' GROUP BY quarter;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Sql Prompt: How many defense contracts were signed in each quarter of 2020?\nSql Context: The table `defense_contracts` contains information about various defense contracts. Each row represents a contract with an ID and the date it was signed. We are interested in counting how many contracts were signed in each quarter of the year 2020.\nSql:\n```sql\nSELECT YEAR(contract_date) AS Year, QUARTER(contract_date) AS Quarter, COUNT(*) AS ContractCount\nFROM defense_contracts\nWHERE YEAR(contract_date) = 2020\nGROUP BY Year, Quarter'
), 1), (Example({'sql_prompt': 'What is the total duration played for each player?', 'sql_context': "CREATE TABLE PlayerGame (PlayerID INT, GameID INT, Played DATE, StartTime TIMESTAMP, EndTime TIMESTAMP); INSERT INTO PlayerGame (PlayerID, GameID, Played, StartTime, EndTime) VALUES (1, 1, '2022-01-01', '2022-01-01 10:00:00', '2022-01-01 12:00:00'), (2, 2, '2022-01-02', '2022-01-02 14:00:00', '2022-01-02 16:00:00'), (3, 1, '2022-01-03', '2022-01-03 10:00:00', '2022-01-03 11:00:00'), (4, 3, '2022-01-04', '2022-01-04 18:00:00', '2022-01-04 19:00:00');", 'sql': 'SELECT PlayerID, SUM(TIMESTAMPDIFF(MINUTE, StartTime, EndTime)) FROM PlayerGame GROUP BY PlayerID;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: What is the total duration played for each player?\nSql Context: CREATE TABLE PlayerGame (PlayerID INT, GameID INT, Played DATE, StartTime TIMESTAMP, EndTime TIMESTAMP); INSERT INTO PlayerGame (PlayerID, GameID, Played, StartTime, EndTime) VALUES (1, 1, '2022-01-01', '2022-01-01 10:00:00', '2022-01-01 12:00:00'), (2, 2, '2022-01-02', '2"
), 0), (Example({'sql_prompt': 'Find the percentage change in tourism to Thailand between 2019 and 2021.', 'sql_context': 'CREATE TABLE thailand_tourism (year INT, total_visitors INT); INSERT INTO thailand_tourism (year, total_visitors) VALUES (2019, 40000), (2021, 30000);', 'sql': 'SELECT (30000 - 40000) * 100.0 / 40000 AS change_percentage FROM thailand_tourism WHERE year = 2021;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Sql Prompt: Find the percentage change in tourism to Thailand between 2019 and 2021.\nSql Context: The table `thailand_tourism` contains data on the total number of visitors each year with columns for the year (`year`) and the total number of visitors (`total_visitors`).\n```sql\nINSERT INTO thailand_tourism (year, total_visitors) VALUES \n(2019, 40000), \n(2021, 30000);\n```\nSql:\n```sql\nSELECT ((MAX(CASE WHEN year = 2021 THEN total_visitors END'
), 0), (Example({'sql_prompt': 'How many students with physical disabilities have not received any accommodations in the last year?', 'sql_context': 'CREATE TABLE Accommodations (id INT, student VARCHAR(255), date DATE); CREATE TABLE Students (id INT, name VARCHAR(255), age INT, disability VARCHAR(255));', 'sql': "SELECT COUNT(*) FROM Students LEFT JOIN Accommodations ON Students.id = Accommodations.student WHERE disability = 'physical disability' AND date IS NULL;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: How many students with physical disabilities have not received any accommodations in the last year?\nSql Context: \n- The `Accommodations` table contains records of accommodations provided to students. Each record has an ID, the student's name, and the date when the accommodation was given.\n- The `Students` table lists all students with their respective IDs, names, ages, and types of disabilities (including physical).\n\nSql: \n```sql\nSELECT COUNT(DISTINCT s.id) AS NumberOfStudentsWithoutAccommodations\nFROM Students s\nLEFT JOIN Accommodations a ON s.name = a.student"
), 0), (Example({'sql_prompt': 'What is the maximum property price in neighborhoods with inclusive housing policies, and the minimum size of properties in those neighborhoods?', 'sql_context': "CREATE TABLE property (id INT, price INT, size_sqft INT, area VARCHAR(255), has_inclusive_policy BOOLEAN); INSERT INTO property (id, price, size_sqft, area, has_inclusive_policy) VALUES (1, 500000, 1500, 'urban', true), (2, 400000, 1200, 'urban', false);", 'sql': "SELECT MAX(price), MIN(size_sqft) FROM property WHERE area = 'urban' AND has_inclusive_policy = true;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: What is the maximum property price in neighborhoods with inclusive housing policies, and the minimum size of properties in those neighborhoods?\n\nSql Context: The table `property` contains information about various properties. Each row represents a property with its ID, price, size in square feet (`size_sqft`), area type (e.g., 'urban'), and whether it has an inclusive housing policy (`has_inclusive_policy`).\n\nSql: \n```sql\nSELECT MAX(price) AS max_price, MIN(size_sqft) AS min_size\nFROM property\nWHERE has_inclusive_policy = TRUE;\n```"
), 1), (Example({'sql_prompt': "Add a new safety incident to the safety_incidents table (id: 4, aircraft: 'Space Shuttle Challenger', date: '1986-01-28', description: 'O-ring failure')", 'sql_context': 'CREATE TABLE safety_incidents (id INT, aircraft VARCHAR(255), date DATE, description VARCHAR(255));', 'sql': "INSERT INTO safety_incidents (id, aircraft, date, description) VALUES (4, 'Space Shuttle Challenger', '1986-01-28', 'O-ring failure');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: Add a new safety incident to the safety_incidents table (id: 4, aircraft: 'Space Shuttle Challenger', date: '1986-01-28', description: 'O-ring failure')\nSql Context: CREATE TABLE safety_incidents (id INT, aircraft VARCHAR(255), date DATE, description VARCHAR(255));\nSql: INSERT INTO safety_incidents (id, aircraft, date, description) VALUES (4, 'Space Shuttle Challenger', '1986-01-28', 'O-ring failure');"
), 1), (Example({'sql_prompt': "What is the average age of players who prefer the 'FPS' genre in the 'player_preferences' and 'player_demographics' tables?", 'sql_context': "CREATE TABLE player_preferences (player_id INT, genre VARCHAR(50)); CREATE TABLE player_demographics (player_id INT, age INT); INSERT INTO player_preferences (player_id, genre) VALUES (1, 'FPS'), (2, 'RPG'), (3, 'FPS'), (4, 'Simulation'); INSERT INTO player_demographics (player_id, age) VALUES (1, 25), (2, 30), (3, 35), (4, 40);", 'sql': "SELECT AVG(age) as avg_fps_age FROM player_demographics JOIN player_preferences ON player_preferences.player_id = player_demographics.player_id WHERE genre = 'FPS';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: What is the average age of players who prefer the 'FPS' genre in the 'player_preferences' and 'player_demographics' tables?\nSql Context: The database contains two tables. The first table `player_preferences` has columns for player ID and their preferred game genre, while the second table `player_demographics` includes player ID and age information. Both tables can be joined on the player ID to correlate preferences with demographic data.\nSql: \n```sql\nSELECT AVG(pd.age) AS average_age\nFROM player_preferences pp\nJOIN player_demographics pd ON pp.player_id = pd.player_"
), 1), (Example({'sql_prompt': 'What is the diversity ratio (percentage of non-male employees) in each department?', 'sql_context': "CREATE TABLE Employees (EmployeeID int, Department varchar(20), Gender varchar(10)); INSERT INTO Employees (EmployeeID, Department, Gender) VALUES (1, 'Marketing', 'Male'); INSERT INTO Employees (EmployeeID, Department, Gender) VALUES (2, 'Marketing', 'Female'); INSERT INTO Employees (EmployeeID, Department, Gender) VALUES (3, 'IT', 'Male'); INSERT INTO Employees (EmployeeID, Department, Gender) VALUES (4, 'IT', 'Non-binary');", 'sql': "SELECT Department, (COUNT(CASE WHEN Gender <> 'Male' THEN 1 END) / COUNT(*)) * 100 AS DiversityRatio FROM Employees GROUP BY Department;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: What is the diversity ratio (percentage of non-male employees) in each department?\nSql Context: \n```sql\nCREATE TABLE Employees (\n    EmployeeID int,\n    Department varchar(20),\n    Gender varchar(10)\n);\nINSERT INTO Employees (EmployeeID, Department, Gender) VALUES (1, 'Marketing', 'Male');\nINSERT INTO Employees (EmployeeID, Department, Gender) VALUES (2, 'Marketing', 'Female');\nINSERT INTO Employees (EmployeeID, Department, Gender) VALUES (3, 'IT', 'Male');\nINSERT INTO Employees"
), 0), (Example({'sql_prompt': 'What is the average donation per donor in India?', 'sql_context': "CREATE TABLE donations (donor_id INT, donation_amount DECIMAL(10, 2), donation_date DATE, country TEXT); INSERT INTO donations VALUES (1, 50.00, '2021-05-15', 'India'), (2, 100.00, '2021-06-10', 'India'), (3, 25.00, '2021-04-01', 'India');", 'sql': "SELECT AVG(donation_amount) FROM donations WHERE country = 'India';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="```sql\nSELECT AVG(donation_amount) AS average_donation_per_donor FROM donations WHERE country = 'India';\n```"
), 1), (Example({'sql_prompt': 'How many wildlife habitats in South Africa have a total area greater than 50000 hectares?', 'sql_context': 'CREATE TABLE wildlife_habitats (id INT, name TEXT, area REAL, country TEXT);', 'sql': "SELECT COUNT(*) FROM wildlife_habitats WHERE country = 'South Africa' GROUP BY country HAVING SUM(area) > 50000;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: How many wildlife habitats in South Africa have a total area greater than 50000 hectares?\nSql Context: The table `wildlife_habitats` contains information about various wildlife habitats. Each record includes an ID, the name of the habitat, its total area in hectares, and the country where it is located.\nSql: SELECT COUNT(*) FROM wildlife_habitats WHERE country = 'South Africa' AND area > 50000;"
), 1), (Example({'sql_prompt': 'What is the percentage of faculty members who identify as AAPI in the School of Business?', 'sql_context': "CREATE TABLE faculty_members (id INT, faculty_name VARCHAR(50), faculty_department VARCHAR(50), faculty_race VARCHAR(20)); INSERT INTO faculty_members (id, faculty_name, faculty_department, faculty_race) VALUES (1, 'Taylor Smith', 'Business Administration', 'AAPI'), (2, 'James Johnson', 'Marketing', 'White'), (3, 'Avery Brown', 'Finance', 'Black'), (4, 'Katie Davis', 'Management', 'White'), (5, 'Jamie Wilson', 'Accounting', 'Latinx'), (6, 'Leah Kim', 'Business Analytics', 'AAPI');", 'sql': "SELECT (COUNT(*) FILTER (WHERE faculty_race = 'AAPI')) * 100.0 / COUNT(*) FROM faculty_members WHERE faculty_department LIKE '%Business%';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="```sql\nSELECT \n    ROUND((COUNT(*) * 100.0) / (SELECT COUNT(*) FROM faculty_members WHERE faculty_department = 'School of Business'), 2) AS percentage_aapi\nFROM \n    faculty_members\nWHERE \n    faculty_race = 'AAPI' AND faculty_department LIKE '%Business%';\n```"
), 0), (Example({'sql_prompt': 'How many water treatment plants are there in the province of Ontario, Canada?', 'sql_context': "CREATE TABLE water_treatment_plants_ontario (id INT, province VARCHAR); INSERT INTO water_treatment_plants_ontario (id, province) VALUES (1, 'Ontario'), (2, 'Quebec'), (3, 'Ontario'), (4, 'British Columbia');", 'sql': "SELECT COUNT(*) FROM water_treatment_plants_ontario WHERE province = 'Ontario';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: How many water treatment plants are there in the province of Ontario, Canada?\nSql Context: The table `water_treatment_plants_ontario` contains information about various water treatment plants and their associated provinces. Each row represents a unique plant with an ID and its corresponding province name.\n\nSql: SELECT COUNT(*) FROM water_treatment_plants_ontario WHERE province = 'Ontario';"
), 1), (Example({'sql_prompt': 'Delete vessels that have not been inspected in the last 12 months', 'sql_context': "CREATE TABLE vessel_inspection (vessel_id INT, inspection_date DATE); INSERT INTO vessel_inspection (vessel_id, inspection_date) VALUES (1, '2020-01-01'), (2, '2021-06-15'), (3, '2019-12-20');", 'sql': 'DELETE FROM vessel_inspection WHERE vessel_id IN (SELECT vessel_id FROM vessel_inspection WHERE inspection_date < DATE_SUB(CURDATE(), INTERVAL 12 MONTH));'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Sql Prompt: Delete vessels that have not been inspected in the last 12 months\nSql Context: The table `vessel_inspection` contains records of vessel inspections with columns for `vessel_id` and `inspection_date`. We want to remove entries where the inspection date is older than 12 months from today.\nSql: DELETE FROM vessel_inspection WHERE inspection_date <= CURDATE() - INTERVAL 1 YEAR;'
), 1), (Example({'sql_prompt': "Which materials in the 'inventory' table have a quantity of at least 100 and are not used in the production of any product in the 'products' table?", 'sql_context': "CREATE TABLE inventory(id INT, material VARCHAR(255), quantity INT); CREATE TABLE products(id INT, material VARCHAR(255), quantity INT); INSERT INTO inventory(id, material, quantity) VALUES (1, 'organic cotton', 75), (2, 'conventional cotton', 100), (3, 'organic cotton', 30), (4, 'hemp', 60); INSERT INTO products(id, material, quantity) VALUES (1, 'organic cotton', 150), (2, 'conventional cotton', 200), (3, 'hemp', 100);", 'sql': 'SELECT material FROM inventory i WHERE quantity >= 100 AND NOT EXISTS (SELECT * FROM products p WHERE i.material = p.material);'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='```sql\nSELECT i.material\nFROM inventory i\nLEFT JOIN products p ON i.material = p.material\nWHERE i.quantity >= 100 AND p.id IS NULL;\n```'
), 1), (Example({'sql_prompt': "What is the minimum billing amount for cases in the region 'South'?", 'sql_context': 'CREATE TABLE cases (case_id INT, region TEXT, billing_amount INT);', 'sql': "SELECT MIN(billing_amount) FROM cases WHERE region = 'South';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: What is the minimum billing amount for cases in the region 'South'?\nSql Context: The table `cases` contains information about various cases including their IDs, regions they belong to, and the associated billing amounts.\nSql: \n```sql\nSELECT MIN(billing_amount) AS MinBillingAmount FROM cases WHERE region = 'South';\n```"
), 1), (Example({'sql_prompt': 'What is the total number of postpaid and prepaid mobile subscribers in each region?', 'sql_context': "CREATE TABLE mobile_subscribers (subscriber_id INT, subscriber_type VARCHAR(10), region VARCHAR(20)); INSERT INTO mobile_subscribers (subscriber_id, subscriber_type, region) VALUES (1, 'postpaid', 'West'), (2, 'prepaid', 'East'), (3, 'postpaid', 'North'), (4, 'prepaid', 'South'), (5, 'postpaid', 'East');", 'sql': 'SELECT region, COUNT(*) as total_subscribers FROM mobile_subscribers GROUP BY region;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Sql Prompt: What is the total number of postpaid and prepaid mobile subscribers in each region?\nSql Context: The table `mobile_subscribers` contains data on different types of mobile subscribers categorized by their subscription type (postpaid or prepaid) and the region they are located in.\nSql: \n```sql\nSELECT region, subscriber_type, COUNT(*) AS total_subscribers\nFROM mobile_subscribers\nGROUP BY region, subscriber_type;\n```'
), 0), (Example({'sql_prompt': 'Identify the top 3 mining companies with the highest total production of Praseodymium in 2021 and their respective production amounts.', 'sql_context': "CREATE TABLE Company (Name TEXT, Location TEXT, Established INT); INSERT INTO Company (Name, Location, Established) VALUES ('Delta Minerals', 'Brazil', 2000), ('Epsilon Ore', 'South Africa', 2010), ('Zeta Extraction', 'Canada', 2005), ('Eta Mines', 'Russia', 2008); CREATE TABLE ProductionCompany (Year INT, Company TEXT, Element TEXT, Quantity INT); INSERT INTO ProductionCompany (Year, Company, Element, Quantity) VALUES (2021, 'Delta Minerals', 'Praseodymium', 1000), (2021, 'Epsilon Ore', 'Praseodymium', 1400), (2021, 'Zeta Extraction', 'Praseodymium', 1800), (2021, 'Eta Mines', 'Praseodymium', 1100);", 'sql': "SELECT Company, SUM(Quantity) FROM ProductionCompany WHERE Element = 'Praseodymium' AND Year = 2021 GROUP BY Company ORDER BY SUM(Quantity) DESC FETCH FIRST 3 ROWS ONLY;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="```sql\nSELECT pc.Company, SUM(pc.Quantity) AS TotalProduction\nFROM ProductionCompany pc\nWHERE pc.Element = 'Praseodymium' AND pc.Year = 2021\nGROUP BY pc.Company\nORDER BY TotalProduction DESC\nLIMIT 3;\n```"
), 1), (Example({'sql_prompt': 'How many volunteer hours were recorded for each program in Q2 2021?', 'sql_context': "CREATE TABLE VolunteerHours (VolunteerID INT, ProgramID INT, Hours DECIMAL(5,2), HourDate DATE); INSERT INTO VolunteerHours (VolunteerID, ProgramID, Hours, HourDate) VALUES (1, 1, 5, '2021-04-15'), (2, 2, 3, '2021-06-02'), (1, 1, 4, '2021-05-31'), (3, 3, 2, '2021-04-01'); CREATE TABLE Programs (ProgramID INT, ProgramName TEXT); INSERT INTO Programs (ProgramID, ProgramName) VALUES (1, 'Arts & Culture'), (2, 'Health & Wellness'), (3, 'Environment');", 'sql': "SELECT ProgramID, SUM(Hours) as TotalHours FROM VolunteerHours WHERE HourDate BETWEEN '2021-04-01' AND '2021-06-30' GROUP BY ProgramID;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="```sql\nSELECT p.ProgramName, SUM(vh.Hours) AS TotalVolunteerHours\nFROM VolunteerHours vh\nJOIN Programs p ON vh.ProgramID = p.ProgramID\nWHERE HourDate >= '2021-04-01' AND HourDate <= '2021-06-30'\nGROUP BY p.ProgramName;\n```"
), 1), (Example({'sql_prompt': 'What is the maximum production capacity of the chemical manufacturing plants located in Canada?', 'sql_context': "CREATE TABLE chemical_plants (id INT, plant_name VARCHAR(100), country VARCHAR(50), production_capacity INT); INSERT INTO chemical_plants (id, plant_name, country, production_capacity) VALUES (1, 'Canada Plant 1', 'Canada', 5000), (2, 'Canada Plant 2', 'Canada', 7000);", 'sql': "SELECT MAX(production_capacity) FROM chemical_plants WHERE country = 'Canada';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: What is the maximum production capacity of the chemical manufacturing plants located in Canada?\nSql Context: The table `chemical_plants` contains information about various chemical manufacturing plants including their ID, name, country, and production capacity.\nSql: SELECT MAX(production_capacity) AS max_production_capacity FROM chemical_plants WHERE country = 'Canada';"
), 1), (Example({'sql_prompt': 'Who is the oldest artist from the United States?', 'sql_context': "CREATE TABLE artists (id INT, name VARCHAR(255), age INT, country VARCHAR(255)); INSERT INTO artists (id, name, age, country) VALUES (1, 'Bruce Springsteen', 72, 'United States'), (2, 'Beyoncé', 40, 'United States');", 'sql': "SELECT name, MAX(age) FROM artists WHERE country = 'United States';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: Who is the oldest artist from the United States?\nSql Context: CREATE TABLE artists (id INT, name VARCHAR(255), age INT, country VARCHAR(255)); INSERT INTO artists (id, name, age, country) VALUES (1, 'Bruce Springsteen', 72, 'United States'), (2, 'Beyoncé', 40, 'United States');\nSql: SELECT name FROM artists WHERE country = 'United States' ORDER BY age DESC LIMIT 1;"
), 1), (Example({'sql_prompt': 'Find the average height of basketball players in the NBA, categorized by their position.', 'sql_context': 'CREATE TABLE nba_players_height (id INT, player_id INT, height_feet INT, height_inches INT); CREATE TABLE nba_players (id INT, name VARCHAR(100), team VARCHAR(50), position VARCHAR(50));', 'sql': 'SELECT position, AVG(height_feet + height_inches / 12) as avg_height FROM nba_players_height JOIN nba_players ON nba_players_height.player_id = nba_players.id GROUP BY position;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: Find the average height of basketball players in the NBA, categorized by their position.\nSql Context: \n- Table `nba_players_height` contains columns for player ID (`player_id`), and their heights in feet and inches (`height_feet`, `height_inches`).\n- Table `nba_players` includes the player's name, team, and position.\n\nSql: \n```sql\nSELECT np.position, AVG(nph.height_feet + nph.height_inches/12) AS average_height\nFROM nba_players_height nph\nJOIN nba_players np"
), 1), (Example({'sql_prompt': 'Identify all suppliers who provide non-GMO ingredients to restaurants with Michelin stars.', 'sql_context': 'CREATE TABLE Suppliers (id INT, name VARCHAR(50), isNonGMO BOOLEAN); CREATE TABLE Restaurants (id INT, name VARCHAR(50), numStars INT); CREATE TABLE Ingredients (supplierId INT, restaurantId INT, isNonGMO BOOLEAN);', 'sql': 'SELECT Suppliers.name FROM Suppliers INNER JOIN Ingredients ON Suppliers.id = Ingredients.supplierId INNER JOIN Restaurants ON Ingredients.restaurantId = Restaurants.id WHERE Restaurants.numStars > 2 AND Ingredients.isNonGMO = TRUE;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Sql Prompt: Identify all suppliers who provide non-GMO ingredients to restaurants with Michelin stars.\n\nSql Context: \n- Suppliers table contains information about the suppliers including their ID, name, and whether they supply non-GMO products or not.\n- Restaurants table includes details of various restaurants such as their ID, name, and number of Michelin stars awarded to them.\n- Ingredients table links suppliers with restaurants by showing which ingredients from which supplier are used in which restaurant, along with information on whether those ingredients are non-GMO or not.\n\nSql: \n```sql\nSELECT DISTINCT s.'
), 1), (Example({'sql_prompt': 'How many licenses were issued in each state as of 2022-01-01?', 'sql_context': "CREATE TABLE Licenses (id INT, state TEXT, issued_date DATE); INSERT INTO Licenses (id, state, issued_date) VALUES (1, 'California', '2021-01-01'), (2, 'Oregon', '2021-01-01'), (3, 'Washington', '2021-01-01');", 'sql': "SELECT state, COUNT(*) AS num_licenses FROM Licenses WHERE issued_date <= '2022-01-01' GROUP BY state;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: How many licenses were issued in each state as of 2022-01-01?\nSql Context: The table `Licenses` contains information about the issuance of licenses, including an ID for each license (`id`), the state where it was issued (`state`), and the date when it was issued (`issued_date`).\nSql: \n```sql\nSELECT state, COUNT(id) AS number_of_licenses\nFROM Licenses\nWHERE issued_date <= '2022-01-01'\nGROUP BY state;\n```"
), 1), (Example({'sql_prompt': 'What is the number of smart city initiatives implemented in each country?', 'sql_context': "CREATE TABLE smart_city_initiatives (initiative_id INT, country VARCHAR(50), city VARCHAR(100), status VARCHAR(50)); INSERT INTO smart_city_initiatives (initiative_id, country, city, status) VALUES (1, 'France', 'Paris', 'Implemented');", 'sql': "SELECT country, COUNT(*) as implemented_initiatives FROM smart_city_initiatives WHERE status = 'Implemented' GROUP BY country;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: What is the number of smart city initiatives implemented in each country?\nSql Context: The table `smart_city_initiatives` contains information about various smart city projects. Each record includes an `initiative_id`, the `country` where it's located, the `city` name, and the current `status` of the initiative (e.g., 'Implemented', 'Planned', etc.).\nSql: \n```sql\nSELECT country, COUNT(*) AS number_of_initiatives\nFROM smart_city_initiatives\nWHERE status = 'Implemented'\nGROUP BY country;\n```"
), 1), (Example({'sql_prompt': "How many tickets were sold for each team's away games in Q2 of 2022?", 'sql_context': "CREATE TABLE teams (id INT, name VARCHAR(255)); INSERT INTO teams (id, name) VALUES (1, 'TeamA'), (2, 'TeamB'), (3, 'TeamC'); CREATE TABLE games (id INT, home_team_id INT, away_team_id INT, home_team_score INT, away_team_score INT, price DECIMAL(5,2), game_date DATE); CREATE VIEW away_games AS SELECT id, away_team_id, price, game_date FROM games;", 'sql': "SELECT t.name, COUNT(*) as tickets_sold FROM away_games h JOIN teams t ON h.away_team_id = t.id WHERE h.game_date BETWEEN '2022-04-01' AND '2022-06-30' GROUP BY t.name;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: How many tickets were sold for each team's away games in Q2 of 2022?\nSql Context: The database contains two tables - 'teams' and 'games'. There is also a view named 'away_games' that simplifies querying away game information. We need to calculate the number of tickets sold for each team during their away games in Q2 (April, May, June) of 2022.\nSql: SELECT t.name AS TeamName, COUNT(ag.*) AS TicketsSold FROM teams t JOIN away_games ag ON t.id = ag.away_team_id WHERE YEAR(ag"
), 0), (Example({'sql_prompt': 'Show the names of companies that produced any Rare Earth elements in both 2015 and 2020.', 'sql_context': 'CREATE TABLE Producers (ProducerID INT PRIMARY KEY, Name TEXT, ProductionYear INT, RareEarth TEXT, Quantity INT);', 'sql': 'SELECT DISTINCT Name FROM Producers p1 JOIN Producers p2 ON p1.Name = p2.Name WHERE p1.ProductionYear = 2015 AND p2.ProductionYear = 2020;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Sql Prompt: Show the names of companies that produced any Rare Earth elements in both 2月2015 and 2020.\nSql Context: CREATE TABLE Producers (ProducerID INT PRIMARY KEY, Name TEXT, ProductionYear INT, RareEarth TEXT, Quantity INT);\nSql: SELECT DISTINCT p1.Name FROM Producers p1 JOIN Producers p2 ON p1.Name = p2.Name WHERE p1.RareEarth IS NOT NULL AND p2.RareEarth IS NOT NULL AND p1.ProductionYear = 2015 AND p2.ProductionYear = 2020;'
), 1), (Example({'sql_prompt': 'What is the total CO2 emissions of silk production in China?', 'sql_context': 'CREATE TABLE SilkProduction (id INT, country VARCHAR, co2_emissions INT);', 'sql': "SELECT SUM(co2_emissions) FROM SilkProduction WHERE country = 'China';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: What is the total CO2 emissions of silk production in China?\nSql Context: The table `SilkProduction` contains data on silk production with columns for an ID (`int`), the producing country's name as a string (`varchar`), and the amount of CO2 emissions associated with that production, measured in some unit (e.g., metric tons) represented by an integer (`int`).\nSql: \n```sql\nSELECT SUM(co2_emissions) AS total_co2_emissions FROM SilkProduction WHERE country = 'China';\n```"
), 1), (Example({'sql_prompt': 'What is the total number of AI models developed in North America with an explainability score below 70?', 'sql_context': "CREATE TABLE na_models (model_name TEXT, region TEXT, explainability_score INTEGER); INSERT INTO na_models (model_name, region, explainability_score) VALUES ('Model1', 'North America', 75), ('Model2', 'North America', 65), ('Model3', 'North America', 80);", 'sql': "SELECT SUM(incident_count) FROM na_models WHERE region = 'North America' AND explainability_score < 70;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: What is the total number of AI models developed in North America with an explainability score below 70?\nSql Context: The table `na_models` contains information about various AI models, including their names (`model_name`), the region they were developed in (`region`), and their explainability scores (`explainability_score`).\nSql: SELECT COUNT(*) FROM na_models WHERE region = 'North America' AND explainability_score < 70;"
), 1), (Example({'sql_prompt': 'Which mobile and broadband subscribers have not used their services in the last 30 days?', 'sql_context': "CREATE TABLE mobile_usage (customer_id INT, last_usage DATE); CREATE TABLE broadband_usage (customer_id INT, last_usage DATE); INSERT INTO mobile_usage (customer_id, last_usage) VALUES (1, '2022-01-01'), (2, '2022-02-01'); INSERT INTO broadband_usage (customer_id, last_usage) VALUES (1, '2022-01-15'), (3, '2022-02-10');", 'sql': 'SELECT customer_id FROM mobile_usage WHERE last_usage < NOW() - INTERVAL 30 DAY UNION SELECT customer_id FROM broadband_usage WHERE last_usage < NOW() - INTERVAL 30 DAY;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: Which mobile and broadband subscribers have not used their services in the last 30 days?\nSql Context: The database contains two tables - `mobile_usage` and `broadband_usage`. Both tables store information about customers' usage of mobile and broadband services, respectively. Each table has a `customer_id` column to identify the customer and a `last_usage` column that records the date when the service was last used by the customer.\n\nSql: \n```sql\nSELECT DISTINCT COALESCE(m.customer_id, b.customer_id) AS customer_id\nFROM mobile_usage m\nFULL OUTER JOIN broadband_usage"
), 0), (Example({'sql_prompt': 'What is the total number of grants given per city?', 'sql_context': 'CREATE TABLE Nonprofits (NonprofitID INT, Name VARCHAR(50), City VARCHAR(50), State VARCHAR(2), Zip VARCHAR(10), MissionStatement TEXT); CREATE TABLE Grants (GrantID INT, DonorID INT, NonprofitID INT, GrantAmount DECIMAL(10,2), Date DATE); CREATE TABLE Donors (DonorID INT, Name VARCHAR(50), City VARCHAR(50), State VARCHAR(2), Zip VARCHAR(10), DonationAmount DECIMAL(10,2));', 'sql': 'SELECT City, COUNT(*) FROM Grants G INNER JOIN Nonprofits N ON G.NonprofitID = N.NonprofitID GROUP BY City;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: What is the total number of grants given per city?\n\nSql Context: The database contains three tables - Nonprofits, Grants, and Donors. Each nonprofit organization has a unique ID, name, city, state, zip code, and mission statement. Grants are tracked with their own IDs, the donor's ID who provided them, the nonprofit's ID they were given to, the amount of each grant, and the date it was awarded. Donors also have unique IDs, names, cities, states, zip codes, and the total amount they have donated.\n\nSql: \n```sql\nSELECT n.City, COUNT(g.Gr"
), 1), (Example({'sql_prompt': 'Show the average soil moisture level for each field in the past week', 'sql_context': 'CREATE TABLE field (id INT, name VARCHAR(255), farm_id INT);CREATE TABLE soil_moisture (id INT, field_id INT, measurement DATE, level INT);', 'sql': 'SELECT field_id, AVG(level) FROM soil_moisture WHERE measurement >= DATEADD(day, -7, GETDATE()) GROUP BY field_id;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Sql Prompt: Show the average soil moisture level for each field in the past week\nSql Context: \n- The `field` table contains information about different fields with columns: id (unique identifier), name (name of the field), and farm_id (identifier for which farm the field belongs to).\n- The `soil_moisture` table records soil moisture measurements with columns: id (unique identifier), field_id (linking to the field it relates to), measurement date, and level (the measured soil moisture level as an integer value).\n\nSql: \n```sql\nSELECT f.name AS FieldName, AVG(sm.level) AS Average'
), 0), (Example({'sql_prompt': 'What is the total number of satellites deployed by SpaceComm in the Middle East?', 'sql_context': 'CREATE TABLE SatelliteDeployment (satellite_id INT, company VARCHAR(255), region VARCHAR(255));', 'sql': "SELECT COUNT(*) FROM SatelliteDeployment WHERE company = 'SpaceComm' AND region = 'Middle East';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: What is the total number of satellites deployed by SpaceComm in the Middle East?\nSql Context: The table `SatelliteDeployment` contains records of satellite deployments with columns for `satellite_id`, `company`, and `region`.\nSql: \n```sql\nSELECT COUNT(*) AS TotalSatellitesInMiddleEast\nFROM SatelliteDeployment\nWHERE company = 'SpaceComm' AND region = 'Middle East';\n```"
), 1), (Example({'sql_prompt': 'What is the total number of tickets sold for performances with a rating of 5?', 'sql_context': "CREATE TABLE performance (id INT PRIMARY KEY, name VARCHAR(255), date DATE, artist_id INT, rating INT); INSERT INTO performance (id, name, date, artist_id, rating) VALUES (1, 'Dance Recital', '2022-03-01', 1, 5);", 'sql': 'SELECT SUM(t.quantity) as total_tickets_sold FROM performance p INNER JOIN ticket t ON p.id = t.performance_id WHERE p.rating = 5;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: What is the total number of tickets sold for performances with a rating of 5?\nSql Context: The table `performance` contains information about various performances including their ID, name, date, artist_id, and rating. Each performance has an associated rating value where a rating of 5 indicates high-quality performances. To answer the query, we would need to know how tickets are tracked in relation to these performances. Assuming there is another table that tracks ticket sales for each performance (e.g., `ticket_sales`), which includes a foreign key reference to the `performance` table's ID and records of each ticket sold.\n\nSql: \n```sql\nSELECT"
), 0), (Example({'sql_prompt': 'What is the average emergency response time by region for fire incidents?', 'sql_context': 'CREATE TABLE Regions (RegionID INT, RegionName VARCHAR(255)); CREATE TABLE Incidents (IncidentID INT, IncidentType VARCHAR(255), RegionID INT, ResponseTime INT);', 'sql': "SELECT AVG(ResponseTime) as AvgResponseTime, RegionName FROM Incidents i JOIN Regions r ON i.RegionID = r.RegionID WHERE IncidentType = 'Fire' GROUP BY RegionName;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: What is the average emergency response time by region for fire incidents?\nSql Context: \n- The database contains two tables. One table named 'Regions' has information about different regions with columns 'RegionID' and 'RegionName'. Another table named 'Incidents' records various types of incidents, including fires, with columns such as 'IncidentType', 'RegionID' (which links to the Regions table), and 'ResponseTime' indicating how long it took for emergency services to respond.\n- The goal is to calculate the average response time specifically for fire incidents across different regions.\nSql: \n```sql\nSELECT r.RegionName, AVG("
), 0), (Example({'sql_prompt': "What is the average revenue of virtual tours in 'Spain'?", 'sql_context': "CREATE TABLE virtual_tours (id INT, name TEXT, country TEXT, revenue FLOAT); INSERT INTO virtual_tours (id, name, country, revenue) VALUES (1, 'Virtual Barcelona Tour', 'Spain', 2000);", 'sql': "SELECT AVG(revenue) FROM virtual_tours WHERE country = 'Spain';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: What is the average revenue of virtual tours in 'Spain'?\nSql Context: CREATE TABLE virtual_tours (id INT, name TEXT, country TEXT, revenue FLOAT); INSERT INTO virtual_tours (id, name, country, revenue) VALUES (1, 'Virtual Barcelona Tour', 'Spain', 2000);\n\nAssuming there are more entries in the table for Spain that we need to consider for calculating the average.\n\nSql: SELECT AVG(revenue) AS average_revenue FROM virtual_tours WHERE country = 'Spain';"
), 1), (Example({'sql_prompt': 'What is the total number of students and staff with accommodations in the "disability_services" schema, excluding the "accessibility_parking" type?', 'sql_context': 'CREATE SCHEMA disability_services; CREATE TABLE staff (id INT, name VARCHAR(50), accommodation VARCHAR(50)); CREATE TABLE students (id INT, name VARCHAR(50), accommodation VARCHAR(50));', 'sql': "SELECT COUNT(*) FROM disability_services.staff WHERE accommodation != 'accessibility_parking' UNION SELECT COUNT(*) FROM disability_services.students WHERE accommodation != 'accessibility_parking';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Sql Prompt: What is the total number of students and staff with accommodations in the "disability_services" schema, excluding the "accessibility_parking" type?\nSql Context: \n```sql\nCREATE SCHEMA disability_services;\nCREATE TABLE disability_services.staff (id INT, name VARCHAR(50), accommodation VARCHAR(50));\nCREATE TABLE disability_services.students (id INT, name VARCHAR(50), accommodation VARCHAR(50));\n```\nSql: \n```sql\nSELECT \'Total\' AS Type, COUNT(*) AS TotalCount\nFROM (\n    SELECT id FROM disability_services.staff WHERE accommodation'
), 0), (Example({'sql_prompt': 'What is the number of electric trams in service in Istanbul in 2021?', 'sql_context': "CREATE TABLE electric_trams (tram_id INT, service_date DATE, in_service INT); INSERT INTO electric_trams (tram_id, service_date, in_service) VALUES (1, '2021-01-01', 1), (2, '2021-01-02', 1), (3, '2021-01-03', 0);", 'sql': "SELECT COUNT(*) FROM electric_trams WHERE in_service = 1 AND service_date BETWEEN '2021-01-01' AND '2021-12-31';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: What is the number of electric trams in service in Istanbul in 2021?\nSql Context: The table `electric_trams` contains information about each tram's ID, the date it was serviced, and whether it was in service (represented by a 1 for in-service or 0 for out of service).\nSql: SELECT COUNT(*) AS NumberOfTramsInService FROM electric_trams WHERE YEAR(service_date) = 2021 AND in_service = 1;"
), 1), (Example({'sql_prompt': "What is the total number of trips taken on accessible vehicles in the 'East' region for the current year?", 'sql_context': "CREATE TABLE Vehicles (VehicleID int, VehicleType varchar(255), Region varchar(255)); INSERT INTO Vehicles (VehicleID, VehicleType, Region) VALUES (1, 'Bus', 'East'), (2, 'Tram', 'West'), (3, 'Wheelchair Bus', 'South'), (4, 'Accessible Tram', 'East'); CREATE TABLE Trips (TripID int, VehicleID int, TripDateTime datetime);", 'sql': "SELECT COUNT(*) FROM Vehicles JOIN Trips ON Vehicles.VehicleID = Trips.VehicleID WHERE Vehicles.Region = 'East' AND Vehicles.VehicleType IN ('Wheelchair Bus', 'Accessible Tram') AND YEAR(Trips.TripDateTime) = YEAR(GETDATE());"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: What is the total number of trips taken on accessible vehicles in the 'East' region for the current year?\nSql Context: \n- The `Vehicles` table contains information about each vehicle including its ID, type, and the region it operates in.\n- The `Trips` table records individual trip instances with a unique TripID, associated VehicleID, and the date and time of the trip (TripDateTime).\n- Accessible vehicles are those that have 'Accessible' as part of their type name.\n\nSql: \n```sql\nSELECT COUNT(*) AS TotalTripsOnAccessibleVehiclesInEastRegionThisYear\nFROM Tri"
), 0), (Example({'sql_prompt': 'Identify the suppliers with the highest and lowest sustainability ratings in the supplier_ratings table.', 'sql_context': 'CREATE TABLE supplier_ratings (supplier_id INT, sustainability_rating INT); INSERT INTO supplier_ratings (supplier_id, sustainability_rating) VALUES (100, 95), (101, 60), (102, 90);', 'sql': 'SELECT supplier_id, sustainability_rating FROM (SELECT supplier_id, sustainability_rating, RANK() OVER (ORDER BY sustainability_rating DESC) AS rank, RANK() OVER (ORDER BY sustainability_rating ASC) AS reverse_rank FROM supplier_ratings) WHERE rank = 1 OR reverse_rank = 1;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Sql Prompt: Identify the suppliers with the highest and lowest sustainability ratings in the supplier_ratings table.\nSql Context: The `supplier_ratings` table contains two columns: `supplier_id`, which is an integer representing the unique identifier for each supplier, and `sustainability_rating`, which is an integer indicating the sustainability rating of that supplier on a scale (the higher the number, the better the rating).\nSql: \n```sql\nSELECT \n    MAX(supplier_id) AS highest_rated_supplier_id, \n    MIN(supplier_id) AS lowest_rated_supplier_'
), 0), (Example({'sql_prompt': 'What is the total amount of socially responsible loans issued to women in 2021?', 'sql_context': 'CREATE TABLE socially_responsible_lending (id INT PRIMARY KEY, loan_amount DECIMAL(10, 2), borrower_gender TEXT, lending_date DATE);', 'sql': "SELECT SUM(loan_amount) FROM socially_responsible_lending WHERE borrower_gender = 'Female' AND lending_date BETWEEN '2021-01-01' AND '2021-12-31';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: What is the total amount of socially responsible loans issued to women in 2021?\n\nSql Context: The table `socially_responsible_lending` contains records of loans that are categorized as socially responsible. Each record includes an ID, the loan amount (in a decimal format with two digits after the decimal point), the gender of the borrower (as text), and the date when the lending occurred.\n\nSql: \n```sql\nSELECT SUM(loan_amount) AS total_loans_to_women\nFROM socially_responsible_lending\nWHERE borrower_gender = 'Woman' AND YEAR"
), 1), (Example({'sql_prompt': 'What is the maximum energy efficiency rating of hydroelectric dams in Canada?', 'sql_context': "CREATE TABLE hydro_dams (id INT, name TEXT, country TEXT, energy_efficiency_rating FLOAT); INSERT INTO hydro_dams (id, name, country, energy_efficiency_rating) VALUES (1, 'Robert-Bourassa', 'Canada', 0.94), (2, 'Churchill Falls', 'Canada', 0.92);", 'sql': "SELECT MAX(energy_efficiency_rating) FROM hydro_dams WHERE country = 'Canada';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: What is the maximum energy efficiency rating of hydroelectric dams in Canada?\nSql Context: CREATE TABLE hydro_dams (id INT, name TEXT, country TEXT, energy_efficiency_rating FLOAT); INSERT INTO hydro_dams (id, name, country, energy_efficiency_rating) VALUES (1, 'Robert-Bourassa', 'Canada', 0.94), (2, 'Churchill Falls', 'Canada', 0.92);\nSql: SELECT MAX(energy_efficiency_rating) FROM hydro_dams WHERE country = 'Canada';"
), 1), (Example({'sql_prompt': 'How many streams did each song by an artist get in a given month?', 'sql_context': "CREATE TABLE Songs (id INT, artist_id INT, title VARCHAR(50)); CREATE TABLE Streams (id INT, song_id INT, date DATE, streams INT); INSERT INTO Songs (id, artist_id, title) VALUES (1, 1, 'Shake it Off'), (2, 1, 'Blank Space'), (3, 2, 'Humble'), (4, 2, 'DNA'); INSERT INTO Streams (id, song_id, date, streams) VALUES (1, 1, '2022-01-01', 1000), (2, 1, '2022-01-02', 1500), (3, 2, '2022-01-01', 2000), (4, 2, '2022-01-02', 2500), (5, 3, '2022-01-01', 3000), (6, 3, '2022-01-02', 3500), (7, 4, '2022-01-01', 4000), (8, 4, '2022-01-02', 4500);", 'sql': "SELECT s.title, SUM(s.streams) as total_streams FROM Songs s JOIN Streams st ON s.id = st.song_id WHERE st.date BETWEEN '2022-01-01' AND '2022-01-31' GROUP BY s.title;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="```sql\nSELECT s.artist_id, sa.title, SUM(st.streams) AS total_streams\nFROM Streams st\nJOIN Songs s ON st.song_id = s.id\nJOIN (SELECT id, artist_id, title FROM Songs) sa ON s.artist_id = sa.artist_id AND s.title = sa.title\nWHERE DATE_FORMAT(st.date, '%Y-%m') = '2022-01' -- Replace with the given month in YYYY-MM format\nGROUP BY s.artist_id, sa.title;\n```"
), 0), (Example({'sql_prompt': 'What is the total number of security incidents for each department in the organization?', 'sql_context': 'CREATE TABLE incident (incident_id INT, incident_date DATE, incident_description TEXT, department_id INT);CREATE TABLE department (department_id INT, department_name VARCHAR(255));', 'sql': 'SELECT d.department_name, COUNT(i.incident_id) AS incident_count FROM incident i JOIN department d ON i.department_id = d.department_id GROUP BY d.department_name;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: What is the total number of security incidents for each department in the organization?\n\nSql Context: \n- There are two tables involved. The first table named 'incident' contains details about various security incidents including an incident ID, date when it occurred, a description of the incident, and the associated department ID.\n- The second table is called 'department', which lists all departments within the organization with each having a unique department ID and name.\n\nSql: \n```sql\nSELECT d.department_name, COUNT(i.incident_id) AS total_incidents\nFROM incident i\nJOIN department d ON i.department_id = d."
), 1), (Example({'sql_prompt': 'What is the market spend on sustainable tourism initiatives in Japan between 2017 and 2019?', 'sql_context': "CREATE TABLE sustainable_tourism_initiatives(initiative_id INT, name TEXT, country TEXT, start_year INT, end_year INT, market_spend INT);INSERT INTO sustainable_tourism_initiatives (initiative_id, name, country, start_year, end_year, market_spend) VALUES (1, 'Eco-friendly hotels in Tokyo', 'Japan', 2017, 2019, 5000000), (2, 'Sustainable transport in Kyoto', 'Japan', 2018, 2019, 7000000), (3, 'Carbon offsetting in Osaka', 'Japan', 2017, 2018, 3000000);", 'sql': "SELECT SUM(market_spend) FROM sustainable_tourism_initiatives WHERE country = 'Japan' AND start_year BETWEEN 2017 AND 2019;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="```sql\nSELECT SUM(market_spend) AS total_market_spend\nFROM sustainable_tourism_initiatives\nWHERE country = 'Japan' AND start_year >= 2017 AND end_year <= 2019;\n```"
), 1), (Example({'sql_prompt': 'What is the percentage of hotels in Europe that offer virtual tours?', 'sql_context': "CREATE TABLE hotel_features (hotel_id INT, hotel_name TEXT, virtual_tour INT, country TEXT); INSERT INTO hotel_features (hotel_id, hotel_name, virtual_tour, country) VALUES (1, 'Hotel A', 1, 'France'), (2, 'Hotel B', 0, 'Germany'), (3, 'Hotel C', 1, 'Italy'), (4, 'Hotel D', 0, 'France'), (5, 'Hotel E', 1, 'Spain');", 'sql': "SELECT (COUNT(*) FILTER (WHERE virtual_tour = 1) * 100.0 / COUNT(*)) AS percentage FROM hotel_features WHERE country = 'Europe';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Sql Prompt: What is the percentage of hotels in Europe that offer virtual tours?\nSql Context: The table `hotel_features` contains information about various hotels including whether they offer a virtual tour (`virtual_tour` column with values 1 for yes and 0 for no) and their country. We are interested in calculating the percentage of these hotels that provide virtual tours specifically within Europe.\nSql:\n```sql\nSELECT ROUND((SUM(CASE WHEN virtual_tour = 1 THEN 1 ELSE 0 END)::DECIMAL / COUNT(*)) * 100, 2) AS percentage_of_hotels_with_virtual_tours'
), 1), (Example({'sql_prompt': 'What are the ethical AI principles for the technology projects in India?', 'sql_context': "CREATE TABLE EthicalAI (principle_id INT, principle_name VARCHAR(50), project_location VARCHAR(20)); INSERT INTO EthicalAI (principle_id, principle_name, project_location) VALUES (1, 'Fairness', 'India'), (2, 'Accountability', 'India'), (3, 'Transparency', 'India'), (4, 'Data Minimization', 'India'), (5, 'Explainability', 'India'), (6, 'Human Oversight', 'India');", 'sql': "SELECT principle_name FROM EthicalAI WHERE project_location = 'India';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="```sql\nSELECT principle_name \nFROM EthicalAI \nWHERE project_location = 'India';\n```"
), 1), (Example({'sql_prompt': 'What is the total mass of all spacecraft manufactured by SpaceX?', 'sql_context': "CREATE TABLE Spacecraft (SpacecraftID INT, SpacecraftName VARCHAR(50), Manufacturer VARCHAR(50), Mass FLOAT); INSERT INTO Spacecraft (SpacecraftID, SpacecraftName, Manufacturer, Mass) VALUES (1, 'SpaceX Dragon', 'SpaceX', 10000), (2, 'Orion', 'Lockheed Martin', 20000), (3, 'Starliner', 'Boeing', 15000);", 'sql': "SELECT SUM(Mass) FROM Spacecraft WHERE Manufacturer = 'SpaceX';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="```sql\nSELECT SUM(Mass) AS TotalSpaceXMass FROM Spacecraft WHERE Manufacturer = 'SpaceX';\n```"
), 1), (Example({'sql_prompt': "What is the total age of 'stone' artifacts in 'american_archaeology'?", 'sql_context': 'CREATE TABLE american_archaeology (id INT, site_name VARCHAR(50), artifact_name VARCHAR(50), age INT, material VARCHAR(20));', 'sql': "SELECT SUM(age) FROM american_archaeology WHERE material = 'stone';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: What is the total age of 'stone' artifacts in 'american_archaeology'?\nSql Context: The table `american_archaeology` contains records of archaeological findings. Each record includes an ID, site name, artifact name, its estimated age (in years), and material composition.\nSql: \n```sql\nSELECT SUM(age) AS total_stone_artifacts_age FROM american_archaeology WHERE material = 'stone';\n```"
), 1), (Example({'sql_prompt': 'What is the average hotel price for beachfront hotels in Mexico?', 'sql_context': "CREATE TABLE hotels (hotel_id INT, name TEXT, country TEXT, has_beachfront BOOLEAN, price INT); INSERT INTO hotels (hotel_id, name, country, has_beachfront, price) VALUES (1, 'Beach Palace', 'Mexico', true, 200), (2, 'Green Valley', 'USA', false, 150);", 'sql': "SELECT AVG(price) FROM hotels WHERE has_beachfront = true AND country = 'Mexico';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: What is the average hotel price for beachfront hotels in Mexico?\nSql Context: The database contains a table named `hotels` with columns for hotel ID (`hotel_id`), name (`name`), country of location (`country`), whether it has a beachfront (`has_beachfront`), and its price (`price`). There are at least two entries, one being 'Beach Palace' in Mexico which is a beachfront property priced at 200, and another 'Green Valley' in the USA without a beachfront priced at 150.\nSql: SELECT AVG(price) AS average_price FROM hotels WHERE country = 'Mexico' AND has_"
), 1), (Example({'sql_prompt': 'List all instructors and number of students they support with accommodations.', 'sql_context': 'CREATE TABLE Instructors (id INT, name VARCHAR(50), title VARCHAR(50));', 'sql': 'SELECT i.name, COUNT(a.student_id) as supported_students FROM Instructors i JOIN Accommodations a ON i.id = a.instructor_id GROUP BY i.name;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Sql Prompt: List all instructors and the count of their students who have accommodations.\nSql Context: \n```sql\nCREATE TABLE Students (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    instructor_id INT,\n    has_accommodation BOOLEAN, -- Assuming a boolean column to indicate if the student has an accommodation.\n    FOREIGN KEY (instructor_id) REFERENCES Instructors(id)\n);\n```\nSql: \n```sql\nSELECT i.name AS InstructorName, COUNT(s.id) AS NumberOfStudentsWithAccommodations\nFROM Inst'
), 1), (Example({'sql_prompt': "What is the total fare collected from bus routes that start with the letter 'B'?", 'sql_context': "CREATE TABLE bus_trips (trip_id INT, route_id INT, fare FLOAT); INSERT INTO bus_trips (trip_id, route_id, fare) VALUES (1, 101, 2.5), (2, 202, 3.0), (3, 303, 1.5), (4, 404, 2.0), (5, 505, 2.5), (6, 106, 3.0); CREATE TABLE bus_routes (route_id INT, route_name TEXT, starting_letter TEXT); INSERT INTO bus_routes (route_id, route_name, starting_letter) VALUES (101, 'Broadway', 'B'), (202, 'Park Ave', 'P'), (303, 'Lakeshore', 'L'), (404, 'Sunset Blvd', 'S'), (505, 'Beverly Hills', 'B');", 'sql': "SELECT SUM(bt.fare) FROM bus_trips bt JOIN bus_routes br ON bt.route_id = br.route_id WHERE br.starting_letter = 'B';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: What is the total fare collected from bus routes that start with the letter 'B'?\nSql Context: \n- Table `bus_trips` contains columns for trip ID (`trip_id`), route ID (`route_id`), and fare amount (`fare`).\n- Table `bus_routes` contains columns for route ID (`route_id`), route name (`route_name`), and the starting letter of the route (`starting_letter`).\n\nSql: \n```sql\nSELECT SUM(b.fare) AS total_fare_collected\nFROM bus_trips b\nJOIN bus_routes r ON b.route_id = r.route_id\nWHERE r"
), 1), (Example({'sql_prompt': 'What is the percentage of total revenue from streaming and concert ticket sales for Pop music in 2018?', 'sql_context': 'CREATE TABLE StreamingRevenue (id INT, year INT, genre VARCHAR(50), revenue FLOAT); CREATE TABLE ConcertTicketSales (id INT, year INT, genre VARCHAR(50), revenue FLOAT);', 'sql': "SELECT (SUM(sr.revenue) + SUM(cts.revenue)) / (SELECT SUM(revenue) FROM (SELECT revenue FROM StreamingRevenue WHERE year = 2018 UNION ALL SELECT revenue FROM ConcertTicketSales WHERE year = 2018) t) FROM StreamingRevenue sr JOIN ConcertTicketSales cts ON sr.genre = cts.genre WHERE sr.year = 2018 AND sr.genre = 'Pop';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Sql Prompt: What is the percentage of total revenue from streaming and concert ticket sales for Pop music in 2018?\nSql Context: The database contains two tables. One table named `StreamingRevenue` with columns `id`, `year`, `genre`, and `revenue`. Another table named `ConcertTicketSales` with the same structure as `StreamingRevenue`. Both tables store revenue data for different music genres, including Pop, across various years.\nSql: \n```sql\nWITH CombinedRevenues AS (\n    SELECT 'streaming' AS source, year, genre, SUM(revenue) AS total_revenue\n    FROM"
), 0), (Example({'sql_prompt': 'What is the total defense spending by countries in Oceania in 2018?', 'sql_context': "CREATE TABLE defense_spending (country VARCHAR(50), continent VARCHAR(50), year INT, amount FLOAT); INSERT INTO defense_spending (country, continent, year, amount) VALUES ('Australia', 'Oceania', 2018, 750.3), ('New Zealand', 'Oceania', 2018, 23.4), ('Papua New Guinea', 'Oceania', 2018, 6.7);", 'sql': "SELECT SUM(amount) FROM defense_spending WHERE continent = 'Oceania' AND year = 2018;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="```sql\nSELECT SUM(amount) AS total_defense_spending\nFROM defense_spending\nWHERE continent = 'Oceania' AND year = 2018;\n```"
), 1), (Example({'sql_prompt': 'What is the total number of refugee families supported by each NGO in the last 6 months?', 'sql_context': "CREATE TABLE NGOs (NGOID int, NGOName varchar(50)); INSERT INTO NGOs (NGOID, NGOName) VALUES (1, 'International Rescue Committee'), (2, 'Save the Children'); CREATE TABLE RefugeeSupport (SupportID int, NGOID int, FamilyID int, SupportDate date); INSERT INTO RefugeeSupport (SupportID, NGOID, FamilyID, SupportDate) VALUES (1, 1, 1, '2022-01-01'), (2, 1, 2, '2022-02-01'), (3, 2, 1, '2022-03-01');", 'sql': 'SELECT NGOName, COUNT(DISTINCT FamilyID) as SupportedFamilies FROM NGOs INNER JOIN RefugeeSupport ON NGOs.NGOID = RefugeeSupport.NGOID WHERE SupportDate >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY NGOName;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='```sql\nSELECT n.NGOName, COUNT(DISTINCT rs.FamilyID) AS TotalRefugeeFamiliesSupported\nFROM NGOs n\nJOIN RefugeeSupport rs ON n.NGOID = rs.NGOID\nWHERE rs.SupportDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)\nGROUP BY n.NGOName;\n```'
), 1), (Example({'sql_prompt': "Which regulatory frameworks have been implemented in 'Country1'?", 'sql_context': "CREATE TABLE countries (id INT, name VARCHAR(255)); INSERT INTO countries (id, name) VALUES (1, 'Country1'); CREATE TABLE regulatory_frameworks (id INT, country_id INT, name VARCHAR(255)); INSERT INTO regulatory_frameworks (id, country_id, name) VALUES (1, 1, 'Framework1'); INSERT INTO regulatory_frameworks (id, country_id, name) VALUES (2, 1, 'Framework2'); INSERT INTO regulatory_frameworks (id, country_id, name) VALUES (3, 1, 'Framework3');", 'sql': "SELECT name FROM regulatory_frameworks WHERE country_id = (SELECT id FROM countries WHERE name = 'Country1');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="```sql\nSELECT rf.name AS RegulatoryFrameworkName\nFROM regulatory_frameworks rf\nJOIN countries c ON rf.country_id = c.id\nWHERE c.name = 'Country1';\n```"
), 1), (Example({'sql_prompt': 'What is the percentage of factories in each country that have implemented circular economy practices?', 'sql_context': "CREATE TABLE factory_circle (factory VARCHAR(255), country VARCHAR(255), practice VARCHAR(255)); INSERT INTO factory_circle (factory, country, practice) VALUES ('Factory1', 'Bangladesh', 'yes'), ('Factory2', 'Bangladesh', 'no'), ('Factory3', 'Bangladesh', 'yes'), ('Factory4', 'China', 'yes'), ('Factory5', 'China', 'no'), ('Factory6', 'India', 'no'), ('Factory7', 'India', 'yes'), ('Factory8', 'India', 'yes');", 'sql': "SELECT country, 100.0 * COUNT(*) FILTER (WHERE practice = 'yes') / COUNT(*) AS percentage FROM factory_circle GROUP BY country;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="```sql\nSELECT \n    country,\n    ROUND((SUM(CASE WHEN practice = 'yes' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)), 2) AS percentage_circular_economy\nFROM \n    factory_circle\nGROUP BY \n    country;\n```"
), 1)]