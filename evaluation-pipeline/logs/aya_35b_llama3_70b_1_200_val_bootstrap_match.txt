[(Example({'sql_prompt': "What are the top 3 autonomous vehicles with the highest safety ratings in the 'auto_show' table?", 'sql_context': 'CREATE TABLE auto_show (id INT, vehicle_name VARCHAR(50), safety_rating INT);', 'sql': "SELECT vehicle_name, safety_rating FROM (SELECT vehicle_name, safety_rating, ROW_NUMBER() OVER (ORDER BY safety_rating DESC) as safety_rank FROM auto_show WHERE vehicle_name LIKE '%Autonomous%') AS auton_ranks WHERE safety_rank <= 3;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to retrieve the top 3 autonomous vehicles with the highest safety ratings from the 'auto_show' table:\n```sql\nSELECT vehicle_name, safety_rating\nFROM auto_show\nORDER BY safety_rating DESC\nLIMIT 3;\n```\n\nThis query selects the 'vehicle_name' and 'safety_rating' columns from the 'auto_show' table. It orders the results in descending order based on the 'safety_rating', ensuring that the vehicles with the highest safety ratings appear at the top. The LIMIT 3 clause restricts the output to only the top 3 rows, giving us the autonomous vehicles with the highest safety ratings.",
    sql="Here is the SQL query to retrieve the top 3 autonomous vehicles with the highest safety ratings from the 'auto_show' table:\n```sql\nSELECT vehicle_name, safety_rating\nFROM auto_show\nORDER BY safety_rating DESC\nLIMIT 3;\n```\n\nThis query selects the 'vehicle_name' and 'safety_rating' columns from the 'auto_show' table. It orders the results in descending order based on the 'safety_rating', ensuring that the vehicles with the highest safety ratings appear at the top. The LIMIT 3 clause restricts the output to only the top 3 rows, giving us the autonomous vehicles with the highest safety ratings."
), 0), (Example({'sql_prompt': 'Delete a record from the broadband_usage table', 'sql_context': 'CREATE TABLE broadband_usage (usage_id INT, subscriber_id INT, usage_start_time TIMESTAMP, usage_end_time TIMESTAMP, data_used DECIMAL(10,2));', 'sql': 'DELETE FROM broadband_usage WHERE usage_id = 11111;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To delete a record from the `broadband_usage` table, you can use the following SQL query:\n```sql\nDELETE FROM broadband_usage WHERE usage_id = <specific_usage_id>;\n```\n\nReplace `<specific_usage_id>` with the actual ID of the record you want to delete. For example, if you want to delete the record with `usage_id` 5, the query would be:\n```sql\nDELETE FROM broadband_usage WHERE usage_id = 5;\n```\n\nThis query will remove the row from the `broadband_usage` table where the `usage_id` matches the specified ID. Make sure to back up your data before running delete queries',
    sql='To delete a record from the `broadband_usage` table, you can use the following SQL query:\n```sql\nDELETE FROM broadband_usage\nWHERE usage_id = <specific_usage_id>;\n```\n\nReplace `<specific_usage_id>` with the actual ID of the record you want to delete. For example, if you want to delete the record with `usage_id` 5, the query would be:\n```sql\nDELETE FROM broadband_usage\nWHERE usage_id = 5;\n```\n\nThis query will remove the row from the `broadband_usage` table where the `usage_id` matches the specified ID. Make sure to back up your data before running'
), 1), (Example({'sql_prompt': 'How many recycling plants in Canada process exactly 5 types of waste?', 'sql_context': "CREATE TABLE recycling_plants (name TEXT, country TEXT, waste_types INTEGER); INSERT INTO recycling_plants (name, country, waste_types) VALUES ('Recycling Plant 1', 'Canada', 6), ('Recycling Plant 2', 'Canada', 4), ('Recycling Plant 3', 'Canada', 5), ('Recycling Plant 4', 'Canada', 5), ('Recycling Plant 5', 'Canada', 3);", 'sql': "SELECT COUNT(*) FROM recycling_plants WHERE country = 'Canada' AND waste_types = 5;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To answer the question, consider the following steps: -- Create a CTE named recycling_plants_canada that contains all the recycling plants in Canada. -- Use a SELECT statement with a WHERE clause to filter for plants that process exactly 5 types of waste.\n\nHere's the SQL query based on the provided context:\n```sql\nWITH recycling_plants_canada AS (\n    SELECT * FROM recycling_plants\n    WHERE country = 'Canada'\n)\nSELECT COUNT(*) FROM recycling_plants_canada\nWHERE waste_types = 5;\n```",
    sql="Here is the SQL query based on the provided context:\n```sql\nWITH recycling_plants_canada AS (\n    SELECT * FROM recycling_plants\n    WHERE country = 'Canada'\n)\nSELECT COUNT(*) FROM recycling_plants_canada\nWHERE waste_types = 5;\n```"
), 1), (Example({'sql_prompt': 'What is the total revenue for each game in the "Gaming" category?', 'sql_context': 'CREATE TABLE Games (GameID int, GameName varchar(50), Category varchar(50), Revenue decimal(10,2));', 'sql': 'SELECT Category, SUM(Revenue) OVER(PARTITION BY Category) as TotalRevenue FROM Games;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to find the total revenue for each game in the "Gaming" category:\n```sql\nSELECT SUM(Revenue) AS TotalRevenue\nFROM Games\nWHERE Category = \'Gaming\';\n```\nThis query uses the `SUM` function to calculate the total revenue by summing up the "Revenue" column for all rows where the "Category" is \'Gaming\'. The result will be a single value representing the total revenue for all games in the "Gaming" category.',
    sql='Here is the SQL query to find the total revenue for each game in the "Gaming" category:\n```sql\nSELECT SUM(Revenue) AS TotalRevenue\nFROM Games\nWHERE Category = \'Gaming\';\n```\n\nThis query uses the `SUM` function to calculate the total revenue by summing up the "Revenue" column for all rows where the "Category" is \'Gaming\'. The result will be a single value representing the total revenue for all games in the "Gaming" category.'
), 1), (Example({'sql_prompt': 'Delete all flight safety records for a specific aircraft', 'sql_context': "CREATE SCHEMA if not exists aerospace;CREATE TABLE if not exists aerospace.flight_safety (id INT, incident VARCHAR(255), incident_date DATE, aircraft_id INT);INSERT INTO aerospace.flight_safety (id, incident, incident_date, aircraft_id) VALUES (1, 'Inc1', '2017-01-01', 1), (2, 'Inc2', '2018-01-01', 1);", 'sql': 'DELETE FROM aerospace.flight_safety WHERE aircraft_id = 1;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to delete all flight safety records for a specific aircraft:\n```sql\nDELETE FROM aerospace.flight_safety WHERE aircraft_id = <specific_aircraft_id>;\n```\n\nIn this query, replace `<specific_aircraft_id>` with the actual ID of the aircraft for which you want to delete the safety records. This query will remove all rows from the `flight_safety` table where the `aircraft_id` matches the specified ID.',
    sql='Here is the SQL query to delete all flight safety records for a specific aircraft:\n```sql\nDELETE FROM aerospace.flight_safety WHERE aircraft_id = <specific_aircraft_id>;\n```\nIn this query, replace `<specific_aircraft_id>` with the actual ID of the aircraft for which you want to delete the safety records. This query will remove all rows from the `flight_safety` table where the `aircraft_id` matches the specified ID.'
), 1), (Example({'sql_prompt': 'What is the average hotel price in each city in Europe?', 'sql_context': "CREATE TABLE Hotels_Europe (id INT, name VARCHAR(50), price DECIMAL(5,2), city VARCHAR(50)); INSERT INTO Hotels_Europe (id, name, price, city) VALUES (1, 'Grand Hotel', 200.00, 'Paris'), (2, 'Hotel Colosseo', 350.00, 'Rome'), (3, 'Park Royal', 120.00, 'London'), (4, 'Hotel Versailles', 420.00, 'Paris');", 'sql': 'SELECT city, AVG(price) as avg_price FROM Hotels_Europe GROUP BY city;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to find the average hotel price for each city in Europe:\n```sql\nSELECT city, AVG(price) AS avg_price\nFROM Hotels_Europe\nGROUP BY city;\n```\n\nThis query groups the data by city and calculates the average price for each city using the `AVG` function. The result will show the city name along with its corresponding average hotel price.',
    sql='Here is the SQL query to find the average hotel price for each city in Europe:\n```sql\nSELECT city, AVG(price) AS avg_price\nFROM Hotels_Europe\nGROUP BY city;\n```\n\nThis query groups the data by city and calculates the average price for each city using the `AVG` function. The result will show the city name along with its corresponding average hotel price.'
), 1), (Example({'sql_prompt': 'Show companies with below average ESG scores in the education sector.', 'sql_context': "INSERT INTO companies (id, name, country, sector, ESG_score) VALUES (4, 'EdCo', 'US', 'Education', 70.0), (5, 'LearnCo', 'UK', 'Education', 80.0);", 'sql': "SELECT * FROM companies WHERE sector = 'Education' AND ESG_score < (SELECT AVG(ESG_score) FROM companies WHERE sector = 'Education');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to find companies with below-average ESG scores in the education sector:\n```sql\nSELECT * FROM companies\nWHERE sector = \'Education\' AND ESG_score < (\n    SELECT AVG(ESG_score) FROM companies WHERE sector = \'Education\'\n);\n```\n\nThis query first calculates the average ESG score of all companies in the education sector using a subquery. Then, it selects all companies from the "companies" table where their ESG score is lower than this calculated average. This will give you a list of companies in the education sector with below-average ESG scores.',
    sql='Here is the SQL query to find companies with below-average ESG scores in the education sector:\n```sql\nSELECT * FROM companies\nWHERE sector = \'Education\' AND ESG_score < (\n    SELECT AVG(ESG_score) FROM companies WHERE sector = \'Education\'\n);\n```\n\nThis query first calculates the average ESG score of all companies in the education sector using a subquery. Then, it selects all companies from the "companies" table where their ESG score is lower than this calculated average. This will give you a list of companies in the education sector with below-average ESG scores.'
), 1), (Example({'sql_prompt': "Find the daily new user registrations in 'data_privacy' table for the last week?", 'sql_context': 'CREATE TABLE data_privacy (user_id INT, registration_date DATE);', 'sql': 'SELECT registration_date, COUNT(*) FROM data_privacy WHERE registration_date >= CURDATE() - INTERVAL 7 DAY GROUP BY registration_date;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to find the daily new user registrations in the 'data_privacy' table for the last week:\n```sql\nSELECT registration_date, COUNT(*) AS daily_registrations\nFROM data_privacy\nWHERE registration_date BETWEEN DATEADD(DAY, -7, GETDATE()) AND GETDATE()\nGROUP BY registration_date\nORDER BY registration_date;\n```\n\nThis query calculates the number of new user registrations for each day in the last week and presents the results in ascending order of registration dates.",
    sql="Here is the SQL query to find the daily new user registrations in the 'data_privacy' table for the last week:\n```sql\nSELECT registration_date, COUNT(*) AS daily_registrations\nFROM data_privacy\nWHERE registration_date BETWEEN DATEADD(DAY, -7, GETDATE()) AND GETDATE()\nGROUP BY registration_date\nORDER BY registration_date;\n```\n\nThis query calculates the number of new user registrations for each day in the last week and presents the results in ascending order of registration dates."
), 1), (Example({'sql_prompt': 'Update the total number of employees in the mining industry who identify as Native Hawaiian or Pacific Islander to 350 in California.', 'sql_context': "CREATE TABLE MiningEmployees (State VARCHAR(50), EmployeeEthnicity VARCHAR(50), EmployeeCount INT); INSERT INTO MiningEmployees(State, EmployeeEthnicity, EmployeeCount) VALUES ('Texas', 'Native American or Alaska Native', 200), ('Texas', 'Hispanic', 500), ('Texas', 'Black', 300), ('California', 'Native American or Alaska Native', 100), ('California', 'Hispanic', 700), ('California', 'Black', 600);", 'sql': "UPDATE MiningEmployees SET EmployeeCount = 350 WHERE State = 'California' AND EmployeeEthnicity = 'Native Hawaiian or Pacific Islander';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to update the total number of employees in the mining industry who identify as Native Hawaiian or Pacific Islander to 350 in California:\n```sql\nUPDATE MiningEmployees\nSET EmployeeCount = 350\nWHERE State = 'California' AND EmployeeEthnicity = 'Native Hawaiian or Pacific Islander';\n```\nThis query will update the `EmployeeCount` for the specific combination of 'California' and 'Native Hawaiian or Pacific Islander' to the desired value of 350.",
    sql="Here is the SQL query to update the total number of employees in the mining industry who identify as Native Hawaiian or Pacific Islander to 350 in California:\n```sql\nUPDATE MiningEmployees\nSET EmployeeCount = 350\nWHERE State = 'California' AND EmployeeEthnicity = 'Native Hawaiian or Pacific Islander';\n```\n\nThis query will update the `EmployeeCount` for the specific combination of 'California' and 'Native Hawaiian or Pacific Islander' to the desired value of 350."
), 1), (Example({'sql_prompt': 'What is the maximum number of patients served by a rural health center in Europe?', 'sql_context': 'CREATE TABLE centers (id INT, name VARCHAR(50), location VARCHAR(50), patients_served INT);', 'sql': "SELECT MAX(patients_served) FROM centers WHERE location LIKE '%Europe%' AND location LIKE '%rural%';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to find the maximum number of patients served by a rural health center in Europe:\n```sql\nSELECT MAX(patients_served) AS max_patients_served\nFROM centers\nWHERE location = 'Rural' AND name LIKE '%Europe%';\n```\n\nThis query uses the `MAX` function to find the highest value of `patients_served` from the `centers` table where the `location` is 'Rural' and the `name` contains the word 'Europe'. The result will give you the maximum number of patients served by a rural health center in Europe.",
    sql="Here is the SQL query to find the maximum number of patients served by a rural health center in Europe:\n```sql\nSELECT MAX(patients_served) AS max_patients_served\nFROM centers\nWHERE location = 'Rural' AND name LIKE '%Europe%';\n```\n\nThis query uses the `MAX` function to find the highest value of `patients_served` from the `centers` table where the `location` is 'Rural' and the `name` contains the word 'Europe'. The result will give you the maximum number of patients served by a rural health center in Europe."
), 1), (Example({'sql_prompt': 'Display the soldier names and branches from the view', 'sql_context': 'CREATE VIEW soldier_details AS SELECT id, name, branch FROM soldiers;', 'sql': 'SELECT name, branch FROM soldier_details;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to display the soldier names and branches from the view:\n```sql\nSELECT name, branch FROM soldier_details;\n```\nThis query selects the columns "name" and "branch" from the "soldier_details" view, which was created using the "soldiers" table.',
    sql='Here is the SQL query to display the soldier names and branches from the view:\n```sql\nSELECT name, branch FROM soldier_details;\n```\nThis query selects the columns "name" and "branch" from the "soldier_details" view, which was created using the "soldiers" table.'
), 1), (Example({'sql_prompt': "What is the average attendance for 'Jazz' concerts?", 'sql_context': "CREATE TABLE concerts(id INT, genre VARCHAR(255), avg_attendance FLOAT); INSERT INTO concerts (id, genre, avg_attendance) VALUES (1, 'Jazz', 200.0), (2, 'Classical', 300.0), (3, 'Rock', 500.0);", 'sql': "SELECT avg_attendance FROM concerts WHERE genre = 'Jazz';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to find the average attendance for 'Jazz' concerts:\n```sql\nSELECT AVG(avg_attendance) AS avg_jazz_attendance\nFROM concerts\nWHERE genre = 'Jazz';\n```\nThis query calculates the average of the `avg_attendance` column for rows where the genre is 'Jazz', providing the average attendance for Jazz concerts.",
    sql="Here is the SQL query to find the average attendance for 'Jazz' concerts:\n```sql\nSELECT AVG(avg_attendance) AS avg_jazz_attendance\nFROM concerts\nWHERE genre = 'Jazz';\n```\n\nThis query calculates the average of the `avg_attendance` column for rows where the genre is 'Jazz', providing the average attendance for Jazz concerts."
), 0), (Example({'sql_prompt': "How many astronauts are from 'Brazil'?", 'sql_context': "CREATE TABLE AstronautData (id INT, name VARCHAR(50), country VARCHAR(50), height FLOAT, weight FLOAT, blood_pressure FLOAT); INSERT INTO AstronautData (id, name, country, height, weight, blood_pressure) VALUES (1, 'John', 'USA', 180, 80, 120), (2, 'Jane', 'Canada', 170, 70, 110), (3, 'Alex', 'Brazil', 190, 90, 130), (4, 'Elena', 'Russia', 165, 60, 115);", 'sql': "SELECT COUNT(*) FROM AstronautData WHERE country = 'Brazil';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to find out how many astronauts are from Brazil:\n```sql\nSELECT COUNT(*) FROM AstronautData WHERE country = 'Brazil';\n```\nThis query counts the number of rows (astronaut records) where the country is 'Brazil' and returns that count as the result.",
    sql="Here is the SQL query to find out how many astronauts are from Brazil:\n```sql\nSELECT COUNT(*) FROM AstronautData WHERE country = 'Brazil';\n```\nThis query counts the number of rows (astronaut records) where the country is 'Brazil' and returns that count as the result."
), 1), (Example({'sql_prompt': 'Delete all records in the "digital_divide_stats" table where the "country" is \'United States\'', 'sql_context': 'CREATE TABLE digital_divide_stats (id INT PRIMARY KEY, country VARCHAR(255), year INT, internet_users INT, total_population INT);', 'sql': "WITH deleted_data AS (DELETE FROM digital_divide_stats WHERE country = 'United States' RETURNING *) SELECT * FROM deleted_data;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to delete all records in the "digital_divide_stats" table where the "country" is \'United States\':\n```sql\nDELETE FROM digital_divide_stats WHERE country = \'United States\';\n```\nThis query will remove all rows from the "digital_divide_stats" table where the value in the "country" column is equal to \'United States\'.',
    sql='Here is the SQL query to delete all records in the "digital_divide_stats" table where the "country" is \'United States\':\n```sql\nDELETE FROM digital_divide_stats WHERE country = \'United States\';\n```\nThis query will remove all rows from the "digital_divide_stats" table where the value in the "country" column is equal to \'United States\'.'
), 1), (Example({'sql_prompt': "What is the maximum depth of marine species in the 'marine_species' table, grouped by their phylum?", 'sql_context': "CREATE TABLE marine_species (id INT, name VARCHAR(255), phylum VARCHAR(255), depth FLOAT); INSERT INTO marine_species (id, name, phylum, depth) VALUES (1, 'Pacific salmon', 'Chordata', 50.0), (2, 'Hawaiian monk seal', 'Chordata', 500.0), (3, 'Sea anemone', 'Cnidaria', 0.01);", 'sql': 'SELECT phylum, MAX(depth) AS max_depth FROM marine_species GROUP BY phylum;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query that answers the question you have described:\n```sql\nSELECT phylum, MAX(depth) AS max_depth\nFROM marine_species\nGROUP BY phylum;\n```\n\nThis query groups the data by the "phylum" column and then calculates the maximum depth for each group using the MAX function. The result will show the maximum depth for each phylum in the "marine_species" table.',
    sql='Here is the SQL query that answers the question you have described:\n```sql\nSELECT phylum, MAX(depth) AS max_depth\nFROM marine_species\nGROUP BY phylum;\n```\nThis query groups the data by the "phylum" column and then calculates the maximum depth for each group using the MAX function. The result will show the maximum depth for each phylum in the "marine_species" table.'
), 1), (Example({'sql_prompt': 'What is the percentage of autonomous vehicles sold in the US that are electric?', 'sql_context': 'CREATE TABLE AutonomousVehicles (Make VARCHAR(50), Model VARCHAR(50), Year INT, Country VARCHAR(50), Type VARCHAR(50), Sales INT);', 'sql': "SELECT 100.0 * SUM(CASE WHEN Type = 'Electric' THEN Sales ELSE 0 END) / SUM(Sales) AS Percentage FROM AutonomousVehicles WHERE Country = 'United States';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to calculate the percentage of autonomous vehicles sold in the US that are electric:\n```sql\nSELECT \n    (SUM(Sales) * 100.0 / SUM(Sales) OVER ()) AS PercentageOfElectricVehicles\nFROM AutonomousVehicles\nWHERE Country = 'US' AND Type = 'Electric';\n```\n\nThis query calculates the total sales of electric autonomous vehicles in the US and then divides it by the total sales of all autonomous vehicles in the US to get the percentage.",
    sql="Here is the SQL query to calculate the percentage of autonomous vehicles sold in the US that are electric:\n```sql\nSELECT (SUM(Sales) * 100.0 / SUM(Sales) OVER ()) AS PercentageOfElectricVehicles\nFROM AutonomousVehicles\nWHERE Country = 'US' AND Type = 'Electric';\n```\n\nThis query calculates the total sales of electric autonomous vehicles in the US and then divides it by the total sales of all autonomous vehicles in the US to get the percentage."
), 0), (Example({'sql_prompt': 'Show the average number of streams per day for artists who have held concerts in the USA and Canada.', 'sql_context': 'CREATE TABLE music_streaming (artist_id INT, artist_name VARCHAR(100), genre VARCHAR(50), total_streams BIGINT, stream_date DATE); CREATE TABLE concert_ticket_sales (concert_id INT, artist_id INT, concert_date DATE, venue VARCHAR(100), country VARCHAR(50));', 'sql': "SELECT AVG(ms.total_streams / COUNT(DISTINCT ms.stream_date)) AS avg_daily_streams FROM music_streaming ms INNER JOIN concert_ticket_sales cts ON ms.artist_id = cts.artist_id WHERE cts.country IN ('USA', 'Canada');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query that addresses the prompt:\n```sql\nWITH ConcertArtists AS (\n    SELECT DISTINCT artist_id\n    FROM concert_ticket_sales\n    WHERE country IN ('USA', 'Canada')\n)\nSELECT m.artist_name, \n       COUNT(DISTINCT m.stream_date) AS stream_days,\n       AVG(m.total_streams) AS avg_streams_per_day\nFROM music_streaming m\nJOIN ConcertArtists ca ON m.artist_id = ca.artist_id\nGROUP BY m.artist_name;\n```\n\nStep by step reasoning:\n1. The subquery `ConcertArtists` identifies distinct artist IDs from the `concert_ticket_sales`",
    sql="Here is the SQL query that addresses the prompt:\n```sql\nWITH ConcertArtists AS (\n    SELECT DISTINCT artist_id\n    FROM concert_ticket_sales\n    WHERE country IN ('USA', 'Canada')\n)\nSELECT m.artist_name,\n       COUNT(DISTINCT m.stream_date) AS stream_days,\n       AVG(m.total_streams) AS avg_streams_per_day\nFROM music_streaming m\nJOIN ConcertArtists ca ON m.artist_id = ca.artist_id\nGROUP BY m.artist_name;\n```\n\nStep by step reasoning:\n1. The subquery `ConcertArtists` identifies distinct artist IDs from the `concert_ticket_sales`"
), 0), (Example({'sql_prompt': 'What is the minimum number of crimes committed in each type for the past year?', 'sql_context': "CREATE TABLE crimes (crime_id INT, crime_type VARCHAR(255), committed_date DATE); INSERT INTO crimes (crime_id, crime_type, committed_date) VALUES (1, 'Theft', '2022-01-01'), (2, 'Assault', '2022-01-02'), (3, 'Theft', '2022-01-03');", 'sql': 'SELECT c.crime_type, MIN(COUNT(c.crime_id)) FROM crimes c WHERE c.committed_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY c.crime_type;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to find the minimum number of crimes committed in each type for the past year:\n```sql\nSELECT crime_type, MIN(crime_id) AS min_crime_id\nFROM crimes\nWHERE committed_date BETWEEN '2022-01-01' AND '2023-01-01'\nGROUP BY crime_type;\n```\n\nThis query uses the `MIN` function to find the minimum `crime_id` for each `crime_type` within the date range of January 1, 2022, to January 1, 2023. The `GROUP BY` clause groups the results by `crime",
    sql="Here is the SQL query to find the minimum number of crimes committed in each type for the past year:\n```sql\nSELECT crime_type, MIN(crime_id) AS min_crime_id\nFROM crimes\nWHERE committed_date BETWEEN '2022-01-01' AND '2023-01-01'\nGROUP BY crime_type;\n```\n\nThis query uses the `MIN` function to find the minimum `crime_id` for each `crime_type` within the date range of January 1, 2022, to January 1, 2023. The `GROUP BY` clause groups the results by `crime"
), 0), (Example({'sql_prompt': "Delete all marine species in the 'marine_species' table that belong to the 'Mollusca' phylum.", 'sql_context': "CREATE TABLE marine_species (id INT, name VARCHAR(255), phylum VARCHAR(255)); INSERT INTO marine_species (id, name, phylum) VALUES (1, 'Pacific salmon', 'Chordata'), (2, 'Blue whale', 'Chordata'), (3, 'Sea anemone', 'Cnidaria');", 'sql': "DELETE FROM marine_species WHERE phylum = 'Mollusca';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to delete all marine species in the 'marine_species' table that belong to the 'Mollusca' phylum:\n```sql\nDELETE FROM marine_species WHERE phylum = 'Mollusca';\n```\nThis query will remove all rows from the 'marine_species' table where the value in the 'phylum' column is equal to 'Mollusca'.",
    sql="Here is the SQL query to delete all marine species in the 'marine_species' table that belong to the 'Mollusca' phylum:\n```sql\nDELETE FROM marine_species WHERE phylum = 'Mollusca';\n```\n\nThis query will remove all rows from the 'marine_species' table where the value in the 'phylum' column is equal to 'Mollusca'."
), 1), (Example({'sql_prompt': 'What is the average price of vegan menu items in the database?', 'sql_context': "CREATE TABLE menus (menu_id INT, menu_name TEXT, type TEXT, price DECIMAL); INSERT INTO menus (menu_id, menu_name, type, price) VALUES (1, 'Quinoa Salad', 'Vegetarian', 12.99), (2, 'Chicken Caesar Wrap', 'Gluten-free', 10.99), (3, 'Vegan Burger', 'Vegan', 14.99), (4, 'Falafel Wrap', 'Vegan', 9.99);", 'sql': "SELECT AVG(price) FROM menus WHERE type = 'Vegan';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to find the average price of vegan menu items:\n```sql\nSELECT AVG(price) AS avg_price\nFROM menus\nWHERE type = 'Vegan';\n```\nThis query calculates the average price of all menu items with the type 'Vegan' using the `AVG` function and aliases the result as 'avg_price'.",
    sql="Here is the SQL query to find the average price of vegan menu items:\n```sql\nSELECT AVG(price) AS avg_price\nFROM menus\nWHERE type = 'Vegan';\n```\n\nThis query calculates the average price of all menu items with the type 'Vegan' using the `AVG` function and aliases the result as 'avg_price'."
), 1), (Example({'sql_prompt': "What is the total number of military vehicles produced by company 'XYZ'?", 'sql_context': "CREATE TABLE military_vehicles (company TEXT, quantity INT, production_date DATE); INSERT INTO military_vehicles (company, quantity, production_date) VALUES ('ABC', 100, '2023-01-01'); INSERT INTO military_vehicles (company, quantity, production_date) VALUES ('XYZ', 200, '2023-02-01');", 'sql': "SELECT SUM(quantity) FROM military_vehicles WHERE company = 'XYZ';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to answer the prompt:\n```sql\nSELECT SUM(quantity) AS total_vehicles\nFROM military_vehicles\nWHERE company = 'XYZ';\n```\n\nThis query sums up the `quantity` column for all rows where the `company` is 'XYZ' and assigns an alias 'total_vehicles' to the result. This will give you the total number of military vehicles produced by company 'XYZ'.",
    sql="Here is the SQL query to answer the prompt: ```sql SELECT SUM(quantity) AS total_vehicles FROM military_vehicles WHERE company = 'XYZ'; ``` This query sums up the `quantity` column for all rows where the `company` is 'XYZ' and assigns an alias 'total_vehicles' to the result. This will give you the total number of military vehicles produced by company 'XYZ'."
), 1), (Example({'sql_prompt': 'Find the supplier with the lowest average delivery time for orders in the last month.', 'sql_context': "CREATE TABLE Suppliers (SupplierID int, SupplierName varchar(50)); CREATE TABLE Products (ProductID int, ProductName varchar(50), SupplierID int); CREATE TABLE Orders (OrderID int, ProductID int, OrderDate date, DeliveryTime int); INSERT INTO Suppliers VALUES (1, 'SupplierA'), (2, 'SupplierB'); INSERT INTO Products VALUES (1, 'Organic Apples', 1), (2, 'Bananas', 2); INSERT INTO Orders VALUES (1, 1, '2022-01-01', 2), (2, 2, '2022-01-03', 3);", 'sql': 'SELECT SupplierName, AVG(DeliveryTime) as AvgDeliveryTime FROM Orders o JOIN Products p ON o.ProductID = p.ProductID JOIN Suppliers sp ON p.SupplierID = sp.SupplierID WHERE OrderDate >= DATEADD(month, -1, GETDATE()) GROUP BY SupplierName ORDER BY AvgDeliveryTime ASC;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to find the supplier with the lowest average delivery time for orders in the last month:\n```sql\nSELECT s.SupplierID, s.SupplierName, AVG(o.DeliveryTime) AS AvgDeliveryTime\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nJOIN Orders o ON p.ProductID = o.ProductID\nWHERE o.OrderDate >= DATEADD(MONTH, -1, GETDATE())\nGROUP BY s.SupplierID, s.SupplierName\nORDER BY AvgDeliveryTime ASC;\n```\n\nStep by step reasoning:\n1. We start by selecting the relevant columns from the Suppliers table, which includes SupplierID and SupplierName.',
    sql='Here is the SQL query to find the supplier with the lowest average delivery time for orders in the last month:\n```sql\nSELECT s.SupplierID, s.SupplierName, AVG(o.DeliveryTime) AS AvgDeliveryTime\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nJOIN Orders o ON p.ProductID = o.ProductID\nWHERE o.OrderDate >= DATEADD(MONTH, -1, GETDATE())\nGROUP BY s.SupplierID, s.SupplierName\nORDER BY AvgDeliveryTime ASC;\n```\n\nStep by step reasoning:\n1. We start by selecting the relevant columns from the Suppliers table, which includes SupplierID and SupplierName.'
), 0), (Example({'sql_prompt': 'What is the maximum number of games played concurrently by a player, for each platform?', 'sql_context': "CREATE TABLE PlayerGames (PlayerID INT, Platform VARCHAR(10), MaxGames INT); INSERT INTO PlayerGames (PlayerID, Platform, MaxGames) VALUES (1, 'PC', 3);", 'sql': 'SELECT Platform, MAX(MaxGames) as MaxConcurrentGames FROM PlayerGames GROUP BY Platform;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to find the maximum number of games played concurrently by a player for each platform:\n```sql\nSELECT Platform, MAX(MaxGames) AS MaxConcurrentGames\nFROM PlayerGames\nGROUP BY Platform;\n```\n\nThis query groups the data by the "Platform" column and then uses the `MAX` function to find the maximum value of "MaxGames" for each group. The result will show the platform and the maximum number of games played concurrently on that platform.',
    sql='Here is the SQL query to find the maximum number of games played concurrently by a player for each platform:\n```sql\nSELECT Platform, MAX(MaxGames) AS MaxConcurrentGames\nFROM PlayerGames\nGROUP BY Platform;\n```\n\nThis query groups the data by the "Platform" column and then uses the `MAX` function to find the maximum value of "MaxGames" for each group. The result will show the platform and the maximum number of games played concurrently on that platform.'
), 1), (Example({'sql_prompt': 'Which broadband subscribers have a download speed greater than 300 Mbps?', 'sql_context': 'CREATE TABLE broadband_subscribers (subscriber_id INT, download_speed FLOAT); INSERT INTO broadband_subscribers (subscriber_id, download_speed) VALUES (1, 250.6), (2, 350.8), (3, 120.9);', 'sql': 'SELECT subscriber_id FROM broadband_subscribers WHERE download_speed > 300;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to find the broadband subscribers with a download speed greater than 300 Mbps:\n```sql\nSELECT * FROM broadband_subscribers WHERE download_speed > 300;\n```\nThis query selects all columns from the `broadband_subscribers` table where the `download_speed` is greater than 300 Mbps.',
    sql='Here is the SQL query to find the broadband subscribers with a download speed greater than 300 Mbps:\n```sql\nSELECT * FROM broadband_subscribers WHERE download_speed > 300;\n```\nThis query selects all columns from the `broadband_subscribers` table where the `download_speed` is greater than 300 Mbps.'
), 1), (Example({'sql_prompt': 'Which cities have a higher average temperature in the "Finance" scheme than in the "Mitigation" scheme?', 'sql_context': "CREATE TABLE Mitigation (city VARCHAR(255), avg_temp FLOAT); INSERT INTO Mitigation VALUES ('CityA', 20.5), ('CityB', 22.3); CREATE TABLE Finance (city VARCHAR(255), avg_temp FLOAT); INSERT INTO Finance VALUES ('CityA', 23.0), ('CityX', 23.5);", 'sql': 'SELECT Finance.city FROM Finance, Mitigation WHERE Finance.city = Mitigation.city AND Finance.avg_temp > Mitigation.avg_temp'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query that answers the question you have described:\n```sql\nSELECT city\nFROM Mitigation m, Finance f\nWHERE m.city = f.city AND m.avg_temp < f.avg_temp;\n```\n\n**Step-by-step reasoning:**\n\n1. We need to compare average temperatures in the "Finance" and "Mitigation" schemes for different cities.\n2. We can use a JOIN operation to combine the data from both tables based on the city column.\n3. The WHERE clause is used to filter the results and select only those rows where the average temperature in the "Mitigation" scheme is less than the average temperature in the "Finance" scheme for the same',
    sql='Here is the SQL query that answers the question you have described:\n```sql\nSELECT city\nFROM Mitigation m, Finance f\nWHERE m.city = f.city AND m.avg_temp < f.avg_temp;\n```\n**Step-by-step reasoning:**\n1. We need to compare average temperatures in the "Finance" and "Mitigation" schemes for different cities.\n2. We can use a JOIN operation to combine the data from both tables based on the city column.\n3. The WHERE clause is used to filter the results and select only those rows where the average temperature in the "Mitigation" scheme is less than the average temperature in the "Finance" scheme for the same city'
), 0), (Example({'sql_prompt': "What is the average playtime, in hours, for players from Germany, for games in the 'Simulation' genre?", 'sql_context': 'CREATE TABLE games (game_id INT, game_genre VARCHAR(255), player_id INT, playtime_mins INT); CREATE TABLE players (player_id INT, player_country VARCHAR(255));', 'sql': "SELECT AVG(playtime_mins / 60) FROM games JOIN players ON games.player_id = players.player_id WHERE players.player_country = 'Germany' AND game_genre = 'Simulation';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query that answers the question you have described:\n```sql\nSELECT AVG(playtime_mins / 60) AS avg_playtime_hours\nFROM games\nJOIN players ON games.player_id = players.player_id\nWHERE player_country = 'Germany' AND game_genre = 'Simulation';\n```\n\n**Step-by-step reasoning:**\n\n1. We start by selecting the average playtime for players from Germany who played games in the 'Simulation' genre.\n2. We use the `AVG` function to calculate the average of the `playtime_mins` column, which represents the playtime in minutes.\n3. To convert the playtime from minutes",
    sql="Here is the SQL query that answers the question you have described:\n```sql\nSELECT AVG(playtime_mins / 60) AS avg_playtime_hours\nFROM games\nJOIN players ON games.player_id = players.player_id\nWHERE player_country = 'Germany' AND game_genre = 'Simulation';\n```\n\n**Step-by-step reasoning:**\n1. We start by selecting the average playtime for players from Germany who played games in the 'Simulation' genre.\n2. We use the `AVG` function to calculate the average of the `playtime_mins` column, which represents the playtime in minutes.\n3. To convert the playtime from minutes"
), 1), (Example({'sql_prompt': 'Show the sum of investments by year and industry', 'sql_context': "CREATE TABLE investments (id INT, investment_year INT, industry VARCHAR(255), investment_amount DECIMAL(10,2)); INSERT INTO investments (id, investment_year, industry, investment_amount) VALUES (1, 2020, 'Tech', 50000.00), (2, 2019, 'Biotech', 20000.00), (3, 2020, 'Tech', 75000.00);", 'sql': 'SELECT investment_year, industry, SUM(investment_amount) as total_investments FROM investments GROUP BY investment_year, industry;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query that addresses the prompt:\n```sql\nSELECT investment_year, industry, SUM(investment_amount) AS total_investment\nFROM investments\nGROUP BY investment_year, industry;\n```\n\nThis query groups the data by `investment_year` and `industry`, and then calculates the sum of `investment_amount` for each combination of year and industry using the `SUM` function. The result will show the total investment for each year and industry pair.',
    sql='Here is the SQL query that addresses the prompt:\n```sql\nSELECT investment_year, industry, SUM(investment_amount) AS total_investment\nFROM investments\nGROUP BY investment_year, industry;\n```\n\nThis query groups the data by `investment_year` and `industry`, and then calculates the sum of `investment_amount` for each combination of year and industry using the `SUM` function. The result will show the total investment for each year and industry pair.'
), 1), (Example({'sql_prompt': 'What is the total amount of funds allocated for each type of disaster?', 'sql_context': "CREATE TABLE DisasterFunds (DisasterType VARCHAR(20), FundID INT, AllocatedAmount DECIMAL(10,2)); INSERT INTO DisasterFunds (DisasterType, FundID, AllocatedAmount) VALUES ('Earthquake', 1, 5000.00), ('Flood', 2, 7500.00), ('Hurricane', 3, 10000.00), ('Tornado', 4, 12500.00), ('Volcano', 5, 15000.00);", 'sql': 'SELECT DisasterType, SUM(AllocatedAmount) as TotalFunds FROM DisasterFunds GROUP BY DisasterType;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to answer your question:\n```sql\nSELECT DisasterType, SUM(AllocatedAmount) AS TotalFunds\nFROM DisasterFunds\nGROUP BY DisasterType;\n```\n\nThis query selects the `DisasterType` and calculates the sum of `AllocatedAmount` for each disaster type using the `SUM` function. The `GROUP BY` clause groups the results by `DisasterType`, so you get the total funds allocated for each type of disaster.',
    sql='Here is the SQL query to answer your question:\n```sql\nSELECT DisasterType, SUM(AllocatedAmount) AS TotalFunds\nFROM DisasterFunds\nGROUP BY DisasterType;\n```\nThis query selects the `DisasterType` and calculates the sum of `AllocatedAmount` for each disaster type using the `SUM` function. The `GROUP BY` clause groups the results by `DisasterType`, so you get the total funds allocated for each type of disaster.'
), 1), (Example({'sql_prompt': 'What is the market share of Hotel X in terms of revenue generated by hotels in New York City?', 'sql_context': "CREATE TABLE hotels (hotel_id INT, hotel_name TEXT, city TEXT, revenue FLOAT); INSERT INTO hotels (hotel_id, hotel_name, city, revenue) VALUES (1, 'Hotel X', 'New York City', 1000000), (2, 'Hotel Y', 'New York City', 800000), (3, 'Hotel Z', 'New York City', 700000);", 'sql': "SELECT (hotels.revenue / (SELECT SUM(revenue) FROM hotels WHERE city = 'New York City') * 100) as market_share FROM hotels WHERE hotel_name = 'Hotel X';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to calculate the market share of Hotel X in terms of revenue generated by hotels in New York City:\n```sql\nSELECT (h.revenue / SUM(h2.revenue)) * 100 AS market_share\nFROM hotels h\nJOIN hotels h2 ON h.city = h2.city\nWHERE h.hotel_name = 'Hotel X' AND h.city = 'New York City';\n```\n\nStep-by-step reasoning:\n1. We start by selecting the relevant columns and calculating the market share using the formula `(h.revenue / SUM(h2.revenue)) * 100`.\n2. We use a JOIN clause to combine the hotels",
    sql="Here is the SQL query to calculate the market share of Hotel X in terms of revenue generated by hotels in New York City:\n```sql\nSELECT (h.revenue / SUM(h2.revenue)) * 100 AS market_share\nFROM hotels h\nJOIN hotels h2 ON h.city = h2.city\nWHERE h.hotel_name = 'Hotel X' AND h.city = 'New York City';\n```\n\nStep-by-step reasoning:\n1. We start by selecting the relevant columns and calculating the market share using the formula `(h.revenue / SUM(h2.revenue)) * 100`.\n2. We use a JOIN clause to combine the hotels"
), 0), (Example({'sql_prompt': "How many vehicles of type 'Trolleybus' are due for maintenance in the next 30 days?", 'sql_context': "CREATE TABLE vehicles (id INT, vehicle_type VARCHAR(255), model_year INT, last_maintenance_date DATE, next_maintenance_date DATE); INSERT INTO vehicles (id, vehicle_type, model_year, last_maintenance_date, next_maintenance_date) VALUES (2004, 'Trolleybus', 2020, '2022-04-20', '2022-07-20'), (2005, 'Tram', 2019, '2022-05-15', '2022-11-15');", 'sql': "SELECT vehicle_type, TIMESTAMPDIFF(DAY, CURDATE(), next_maintenance_date) as days_until_next_maintenance FROM vehicles WHERE vehicle_type = 'Trolleybus' HAVING days_until_next_maintenance <= 30;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to find out how many vehicles of type 'Trolleybus' are due for maintenance in the next 30 days:\n```sql\nSELECT COUNT(*) FROM vehicles\nWHERE vehicle_type = 'Trolleybus' AND next_maintenance_date BETWEEN NOW() AND NOW() + INTERVAL 30 DAY;\n```\n\nThis query counts the rows (vehicles) where the `vehicle_type` is 'Trolleybus' and the `next_maintenance_date` falls within the next 30 days from the current date (`NOW()`). The `BETWEEN` clause is used to specify this date range.",
    sql="Here is the SQL query to find out how many vehicles of type 'Trolleybus' are due for maintenance in the next 30 days:\n```sql\nSELECT COUNT(*)\nFROM vehicles\nWHERE vehicle_type = 'Trolleybus'\n  AND next_maintenance_date BETWEEN NOW() AND NOW() + INTERVAL 30 DAY;\n```\n\nThis query counts the rows (vehicles) where the `vehicle_type` is 'Trolleybus' and the `next_maintenance_date` falls within the next 30 days from the current date (`NOW()`). The `BETWEEN` clause is used to specify this date range."
), 0), (Example({'sql_prompt': "Insert a new row into the 'startups' table for 'Health Startup 5', founded in '2022-03-15' by 'Middle Eastern' founder, with a funding amount of $7,500,000", 'sql_context': 'CREATE TABLE startups (id INT, name TEXT, industry TEXT, founding_date DATE, raised_funding FLOAT, founder_race TEXT);', 'sql': "INSERT INTO startups (name, industry, founding_date, raised_funding, founder_race) VALUES ('Health Startup 5', 'Healthcare', '2022-03-15', 7500000.00, 'Middle Eastern');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to insert a new row into the 'startups' table:\n```sql\nINSERT INTO startups (name, industry, founding_date, raised_funding, founder_race)\nVALUES ('Health Startup 5', 'Healthcare', '2022-03-15', 7500000.00, 'Middle Eastern');\n```\nThis query inserts a new row into the 'startups' table with the provided values. The name of the startup is 'Health Startup 5', the industry is 'Healthcare', the founding date is '2022-03-15', the raised funding amount is $7,500,00",
    sql="Here is the SQL query to insert a new row into the 'startups' table:\n```sql\nINSERT INTO startups (name, industry, founding_date, raised_funding, founder_race)\nVALUES ('Health Startup 5', 'Healthcare', '2022-03-15', 7500000.00, 'Middle Eastern');\n```\n\nThis query inserts a new row into the 'startups' table with the provided values. The name of the startup is 'Health Startup 5', the industry is 'Healthcare', the founding date is '2022-03-15', the raised funding amount is $7,500,0"
), 1), (Example({'sql_prompt': 'How many mental health parity complaints were filed in the last 12 months by state?', 'sql_context': "CREATE TABLE mental_health_parity_complaints (complaint_id INT, complaint_date DATE, state VARCHAR(20)); INSERT INTO mental_health_parity_complaints (complaint_id, complaint_date, state) VALUES (1, '2021-01-01', 'California'), (2, '2021-03-15', 'New York'), (3, '2020-12-31', 'Texas');", 'sql': 'SELECT state, COUNT(*) as num_complaints FROM mental_health_parity_complaints WHERE complaint_date >= DATE_SUB(CURRENT_DATE, INTERVAL 12 MONTH) GROUP BY state;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to answer the prompt:\n```sql\nSELECT state, COUNT(*) AS complaint_count\nFROM mental_health_parity_complaints\nWHERE complaint_date >= DATEADD(MONTH, -12, GETDATE())\nGROUP BY state;\n```\n\nThis query filters the complaints by those filed in the last 12 months using the `DATEADD` and `GETDATE()` functions. It then groups the results by state and counts the number of complaints for each state.',
    sql='Here is the SQL query to answer the prompt:\n```sql\nSELECT state, COUNT(*) AS complaint_count\nFROM mental_health_parity_complaints\nWHERE complaint_date >= DATEADD(MONTH, -12, GETDATE())\nGROUP BY state;\n```\n\nThis query filters the complaints by those filed in the last 12 months using the `DATEADD` and `GETDATE()` functions. It then groups the results by state and counts the number of complaints for each state.'
), 1), (Example({'sql_prompt': 'Which chemical plants have exceeded the maximum allowed emission limit in the last year?', 'sql_context': "CREATE TABLE plants (plant_id INT, plant_name VARCHAR(50)); CREATE TABLE emissions (plant_id INT, emission_level INT, emission_date DATE); INSERT INTO plants (plant_id, plant_name) VALUES (1, 'Plant A'), (2, 'Plant B'); INSERT INTO emissions (plant_id, emission_level, emission_date) VALUES (1, 500, '2022-01-01'), (2, 450, '2022-01-01');", 'sql': 'SELECT plants.plant_name FROM plants INNER JOIN emissions ON plants.plant_id = emissions.plant_id WHERE emissions.emission_level > (SELECT MAX(emission_limit) FROM allowed_emissions) AND emissions.emission_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to find which chemical plants have exceeded the maximum allowed emission limit in the last year:\n```sql\nSELECT p.plant_name\nFROM plants p\nJOIN emissions e ON p.plant_id = e.plant_id\nWHERE e.emission_level > 500 AND e.emission_date BETWEEN '2021-01-01' AND '2022-01-01';\n```\n\nThis query joins the `plants` and `emissions` tables on the `plant_id` column. It then filters the results to only include rows where the `emission_level` is greater than 500 (assuming this is",
    sql="Here is the SQL query to find which chemical plants have exceeded the maximum allowed emission limit in the last year:\n```sql\nSELECT p.plant_name\nFROM plants p\nJOIN emissions e ON p.plant_id = e.plant_id\nWHERE e.emission_level > 500 AND e.emission_date BETWEEN '2021-01-01' AND '2022-01-01';\n```\n\nThis query joins the `plants` and `emissions` tables on the `plant_id` column. It then filters the results to only include rows where the `emission_level` is greater than 500 (assuming this is"
), 0), (Example({'sql_prompt': 'What is the total duration played for each player?', 'sql_context': "CREATE TABLE PlayerGame (PlayerID INT, GameID INT, Played DATE, StartTime TIMESTAMP, EndTime TIMESTAMP); INSERT INTO PlayerGame (PlayerID, GameID, Played, StartTime, EndTime) VALUES (1, 1, '2022-01-01', '2022-01-01 10:00:00', '2022-01-01 12:00:00'), (2, 2, '2022-01-02', '2022-01-02 14:00:00', '2022-01-02 16:00:00'), (3, 1, '2022-01-03', '2022-01-03 10:00:00', '2022-01-03 11:00:00'), (4, 3, '2022-01-04', '2022-01-04 18:00:00', '2022-01-04 19:00:00');", 'sql': 'SELECT PlayerID, SUM(TIMESTAMPDIFF(MINUTE, StartTime, EndTime)) FROM PlayerGame GROUP BY PlayerID;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to calculate the total duration played for each player:\n```sql\nSELECT PlayerID, \n       SUM(EXTRACT(EPOCH FROM (EndTime - StartTime)) / 3600) AS TotalDurationInHours\nFROM PlayerGame\nGROUP BY PlayerID;\n```\n\nStep by step reasoning:\n1. We use the `EXTRACT` function to get the time difference in seconds between the `EndTime` and `StartTime`.\n2. We divide the result by 3600 to convert seconds to hours.\n3. The `GROUP BY PlayerID` groups the results by each player, so you get the total duration for each player.',
    sql='Here is the SQL query to calculate the total duration played for each player:\n```sql\nSELECT PlayerID, SUM(EXTRACT(EPOCH FROM (EndTime - StartTime)) / 3600) AS TotalDurationInHours\nFROM PlayerGame\nGROUP BY PlayerID;\n```\n\nStep-by-step reasoning: \n1. We use the `EXTRACT` function to get the time difference in seconds between the `EndTime` and `StartTime`.\n2. We divide the result by 3600 to convert seconds to hours.\n3. The `GROUP BY PlayerID` groups the results by each player, so you get the total duration for each player.'
), 0), (Example({'sql_prompt': 'What is the percentage of legal technology patents granted to applicants in California since 2010?', 'sql_context': 'CREATE TABLE legal_technology_patents (patent_id INT, grant_date DATE, state VARCHAR(20));', 'sql': "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM legal_technology_patents WHERE grant_date >= '2010-01-01')) AS percentage FROM legal_technology_patents WHERE state = 'California';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to calculate the percentage of legal technology patents granted to applicants in California since 2010:\n```sql\nSELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM legal_technology_patents)) AS percentage\nFROM legal_technology_patents\nWHERE state = 'California' AND grant_date >= '2010-01-01';\n```\n\nStep by step explanation:\n1. The subquery `(SELECT COUNT(*) FROM legal_technology_patents)` calculates the total number of legal technology patents in the table.\n2. The main query then counts the number of patents granted to applicants in California since 2010 using",
    sql="Here is the SQL query to calculate the percentage of legal technology patents granted to applicants in California since 2010: ```sql SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM legal_technology_patents)) AS percentage FROM legal_technology_patents WHERE state = 'California' AND grant_date >= '2010-01-01'; ``` Step by step explanation: 1. The subquery `(SELECT COUNT(*) FROM legal_technology_patents)` calculates the total number of legal technology patents in the table. 2. The main query then counts the number of patents granted to applicants in California since 2010 using the `COUNT(*)` function and"
), 0), (Example({'sql_prompt': "What is the total quantity of menu items sold in the 'Appetizers' category from the 'Asian' cuisine type?", 'sql_context': "CREATE TABLE menu (menu_id INT, menu_name VARCHAR(50), category VARCHAR(50), cuisine VARCHAR(50), quantity_sold INT, price DECIMAL(5,2), month_sold INT); INSERT INTO menu (menu_id, menu_name, category, cuisine, quantity_sold, price, month_sold) VALUES (12, 'Spring Rolls', 'Appetizers', 'Asian', 30, 4.99, 1), (13, 'Edamame', 'Appetizers', 'Asian', 40, 3.99, 1);", 'sql': "SELECT SUM(quantity_sold) FROM menu WHERE category = 'Appetizers' AND cuisine = 'Asian';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query that answers the question you have described:\n```sql\nSELECT SUM(quantity_sold) AS total_quantity_sold\nFROM menu\nWHERE category = 'Appetizers' AND cuisine = 'Asian';\n```\n\nThis query sums up the `quantity_sold` column for all rows where the `category` is 'Appetizers' and the `cuisine` is 'Asian', giving you the total quantity of menu items sold in that category and cuisine type.",
    sql="Here is the SQL query that answers the question you have described:\n```sql\nSELECT SUM(quantity_sold) AS total_quantity_sold\nFROM menu\nWHERE category = 'Appetizers' AND cuisine = 'Asian';\n```\n\nThis query sums up the `quantity_sold` column for all rows where the `category` is 'Appetizers' and the `cuisine` is 'Asian', giving you the total quantity of menu items sold in that category and cuisine type."
), 1), (Example({'sql_prompt': 'How many volunteers signed up in each region in 2021?', 'sql_context': "CREATE TABLE volunteers (id INT, name TEXT, region TEXT, signup_date DATE); INSERT INTO volunteers (id, name, region, signup_date) VALUES (1, 'Alice', 'North', '2021-02-03'), (2, 'Bob', 'South', '2021-05-05'), (3, 'Charlie', 'East', '2020-12-12');", 'sql': 'SELECT region, COUNT(*) FROM volunteers WHERE YEAR(signup_date) = 2021 GROUP BY region;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to answer the question "How many volunteers signed up in each region in 2021?":\n```sql\nSELECT region, COUNT(*) AS volunteer_count\nFROM volunteers\nWHERE EXTRACT(YEAR FROM signup_date) = 2021\nGROUP BY region;\n```\n\nThis query filters the volunteers table to only include records with a signup date in 2021, then groups the results by region and counts the number of volunteers in each region.',
    sql='Here is the SQL query to answer the question "How many volunteers signed up in each region in 2021?":\n```sql\nSELECT region, COUNT(*) AS volunteer_count\nFROM volunteers\nWHERE EXTRACT(YEAR FROM signup_date) = 2021\nGROUP BY region;\n```\n\nThis query filters the `volunteers` table to only include records with a signup date in 2021, then groups the results by region and counts the number of volunteers in each region.'
), 1), (Example({'sql_prompt': 'What is the total distance traveled for all buses in the London transit system in the past week?', 'sql_context': 'CREATE TABLE london_buses (bus_id INT, daily_distance FLOAT, date DATE);', 'sql': 'SELECT SUM(daily_distance) FROM london_buses WHERE date >= DATE_SUB(NOW(), INTERVAL 1 WEEK);'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to find the total distance traveled for all buses in the London transit system in the past week:\n```sql\nSELECT SUM(daily_distance) AS total_distance_traveled\nFROM london_buses\nWHERE date BETWEEN DATEADD(DAY, -7, GETDATE()) AND GETDATE();\n```\n\nThis query calculates the sum of the `daily_distance` values from the `london_buses` table for buses with dates within the last 7 days, including today. The `DATEADD` function is used to subtract 7 days from the current date (`GETDATE()`), and the `BETWEEN` clause specifies the date range for the past week. The result will give',
    sql='Here is the SQL query to find the total distance traveled for all buses in the London transit system in the past week:\n```sql\nSELECT SUM(daily_distance) AS total_distance_traveled\nFROM london_buses\nWHERE date BETWEEN DATEADD(DAY, -7, GETDATE()) AND GETDATE();\n```\n\nThis query calculates the sum of the `daily_distance` values from the `london_buses` table for buses with dates within the last 7 days, including today. The `DATEADD` function is used to subtract 7 days from the current date (`GETDATE()`), and the `BETWEEN` clause specifies the date range for the past week. The result will give'
), 1), (Example({'sql_prompt': "List all suppliers who provide products to 'Organic Foods' store in the 'StoreSuppliers' table", 'sql_context': "CREATE TABLE StoreSuppliers (store VARCHAR(255), supplier VARCHAR(255)); INSERT INTO StoreSuppliers (store, supplier) VALUES ('Organic Foods', 'Supplier A'), ('Organic Foods', 'Supplier B'), ('Health Foods', 'Supplier C');", 'sql': "SELECT supplier FROM StoreSuppliers WHERE store = 'Organic Foods';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to list all suppliers who provide products to 'Organic Foods' store in the 'StoreSuppliers' table:\n```sql\nSELECT supplier FROM StoreSuppliers WHERE store = 'Organic Foods';\n```\nThis query selects the 'supplier' column from the 'StoreSuppliers' table where the 'store' is 'Organic Foods'. This will return a list of all suppliers who provide products to that specific store.",
    sql="Here is the SQL query to list all suppliers who provide products to 'Organic Foods' store in the 'StoreSuppliers' table:\n```sql\nSELECT supplier FROM StoreSuppliers WHERE store = 'Organic Foods';\n```\nThis query selects the 'supplier' column from the 'StoreSuppliers' table where the 'store' is 'Organic Foods'. This will return a list of all suppliers who provide products to that specific store."
), 1), (Example({'sql_prompt': 'What is the percentage of total humanitarian aid spent on education in each world region?', 'sql_context': "CREATE TABLE humanitarian_aid (id INT, region TEXT, category TEXT, amount FLOAT); INSERT INTO humanitarian_aid (id, region, category, amount) VALUES (1, 'Africa', 'Education', 500), (2, 'Asia', 'Health', 750), (3, 'Africa', 'Health', 250);", 'sql': "SELECT region, (SUM(case when category = 'Education' then amount else 0 end) / SUM(amount)) * 100 as education_percentage FROM humanitarian_aid GROUP BY region;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to calculate the percentage of total humanitarian aid spent on education in each world region:\n```sql\nSELECT \n    region,\n    category,\n    SUM(amount) AS total_amount,\n    (SUM(CASE WHEN category = 'Education' THEN amount ELSE 0 END) / SUM(amount)) * 100 AS percentage_education\nFROM humanitarian_aid\nGROUP BY region, category;\n```\n\nStep by step explanation:\n1. The `SUM` function is used to calculate the total amount of humanitarian aid for each region and category.\n2. The `CASE` statement is used to conditionally sum the amounts for the 'Education' category only.\n3. The result of the",
    sql="Here is the SQL query to calculate the percentage of total humanitarian aid spent on education in each world region:\n```sql\nSELECT region, category, SUM(amount) AS total_amount,\n       (SUM(CASE WHEN category = 'Education' THEN amount ELSE 0 END) / SUM(amount)) * 100 AS percentage_education\nFROM humanitarian_aid\nGROUP BY region, category;\n```\n\nStep by step explanation:\n1. The `SUM` function is used to calculate the total amount of humanitarian aid for each region and category.\n2. The `CASE` statement is used to conditionally sum the amounts for the 'Education' category only.\n3. The result of the `CASE`"
), 0)]