[(Example({'sql_prompt': "Update the name of the passenger with the id 3 to 'Emily Lee'.", 'sql_context': "CREATE TABLE PASSENGERS (id INT, name VARCHAR(50)); INSERT INTO PASSENGERS VALUES (3, 'James Brown');", 'sql': "UPDATE PASSENGERS SET name = 'Emily Lee' WHERE id = 3;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Update the name of the passenger with id 3 to 'Emily Lee', we need to follow these steps:\n\n1. **Identify the current data**: First, we should check what the current data looks like for the passengers table. This will help us understand if there are any constraints or relationships that might affect our update operation.\n\n   SQL Query:\n   ```sql\n   SELECT * FROM PASSENGERS;\n   ```\n\n2. **Update the name**: Once we know the current state of the table, we can proceed to update the name for passenger with id 3 from 'James Brown' to 'Emily Lee'. This is done using an UPDATE statement.\n\n   SQL Query:\n   ```sql\n   UPDATE PASSENGERS",
    sql="UPDATE PASSENGERS SET name = 'Emily Lee' WHERE id = 3;"
), 1), (Example({'sql_prompt': "What is the number of women-led agricultural businesses in the 'business_data' table?", 'sql_context': "CREATE TABLE business_data (business_id INT, business_name VARCHAR(50), gender VARCHAR(10)); INSERT INTO business_data (business_id, business_name, gender) VALUES (1, 'Green Acres', 'female'), (2, 'Brown Farms', 'male'), (3, 'Eco Harvest', 'non-binary');", 'sql': "SELECT COUNT(business_id) FROM business_data WHERE gender = 'female';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Solve the SQL query for finding the number of women-led agricultural businesses:\n\n1. **Identify the relevant table**: The `business_data` table contains information about different businesses and their respective gender.\n\n2. **Filter the data based on criteria**: We need to filter this table to only include rows where the business is led by a woman, which means we should look for entries with 'female' in the `gender` column.\n\n3. **Count the filtered results**: After filtering, we will count the number of rows returned to get our final answer.\n\nThe SQL query that accomplishes these steps would be:\n\n```sql\nSELECT COUNT(*) \nFROM business_data \nWHERE gender = 'female';\n```\n\nThis query selects all records from `business",
    sql="SELECT COUNT(*) AS num_women_led_agricultural_businesses \nFROM business_data \nWHERE gender = 'female' \nAND business_name LIKE '%agriculture%' \nAND business_name LIKE '%business%';"
), 0), (Example({'sql_prompt': "What is the average rating for 'Gluten-Free' items?", 'sql_context': "CREATE TABLE ratings (item_name TEXT, is_gluten_free BOOLEAN, rating INTEGER); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Quinoa Salad', true, 4); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Chicken Stir Fry', false, 5);", 'sql': 'SELECT AVG(rating) FROM ratings WHERE is_gluten_free = true;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="1. **Identify the SQL Query for Total Funding Amount of Startups Founded by Veterans in Japan**\n\n   To find the total funding amount for startups founded by veterans in Japan, we need to join two tables - `funding` and `company`. The `funding` table likely contains information about each funding event (like amount), while the `company` table contains details about companies including their founding date, country, and whether the founder is a veteran.\n\n   **SQL Query:**\n   \n   ```sql\n   SELECT SUM(funding_amount) AS total_funding \n   FROM funding \n   INNER JOIN company ON funding.company_id = company.id \n   WHERE company.country = 'Japan' AND company.founder_veteran = TRUE;",
    sql="```sql\nSELECT SUM(funding_amount) AS total_funding \nFROM funding \nINNER JOIN company \nON funding.company_id = company.id \nWHERE company.country = 'Japan' \nAND company.founder_veteran = TRUE;\n```"
), 0), (Example({'sql_prompt': 'What is the maximum amount of dissolved oxygen (DO) in the ocean_health table for each month in 2021?', 'sql_context': "CREATE TABLE ocean_health (date DATE, do_value INT); INSERT INTO ocean_health (date, do_value) VALUES ('2021-01-01', 8), ('2021-01-02', 7), ('2021-02-01', 6), ('2021-02-02', 9);", 'sql': "SELECT EXTRACT(MONTH FROM date) as month, MAX(do_value) as max_do_value FROM ocean_health WHERE date BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY EXTRACT(MONTH FROM date);"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Understand the SQL queries and their context, we can break down each prompt as follows:\n\n### Prompt 1: Query for Wells with High Daily Production Rate\n\n**Context**: The provided SQL query is already correct. It selects all columns from the `wells` table where the daily production rate (`daily_production_rate`) exceeds 125.\n\n**Reasoning**: \n- **Table**: `wells`\n- **Columns**: All\n- **Condition**: `daily_production_rate > 125`\n\n### Prompt 2: Total Funding for Veteran-Founded Startups in Japan\n\n**Context**: The SQL query is designed to calculate the total funding amount for startups founded by veterans in Japan. It joins the `funding` table with',
    sql='SELECT MAX(do_value) AS max_do FROM ocean_health WHERE YEAR(date) = 2021;'
), 1), (Example({'sql_prompt': 'What are the total sales and quantity of goods sold by each salesperson, grouped by city?', 'sql_context': 'CREATE TABLE salesperson (id INT, name TEXT, city TEXT); CREATE TABLE sales (id INT, salesperson_id INT, product TEXT, quantity INT, total_sales FLOAT);', 'sql': 'SELECT s.name, s.city, SUM(s.total_sales) as total_sales, SUM(s.quantity) as total_quantity FROM sales s JOIN salesperson sp ON s.salesperson_id = sp.id GROUP BY s.city, s.name;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='1. **Join the tables**: We need to join `sales` and `salesperson` tables on their common column (`salesperson_id`) to get all necessary information about sales made by each salesperson.\n\n2. **Group by city**: After joining, we should group the data by the `city` field from the `salesperson` table to calculate total sales and quantity for each city separately.\n\n3. **Calculate total sales and quantity**: For each group (i.e., each city), we need to sum up the `total_sales` and `quantity` fields respectively, which are present in the `sales` table.\n\n4. **Select relevant columns**: Finally, select the required columns (`city`, `total_sales`, and `quantity',
    sql='SELECT sp.city, SUM(s.total_sales) AS total_sales, SUM(s.quantity) AS quantity_sold\nFROM salesperson sp\nJOIN sales s ON sp.id = s.salesperson_id\nGROUP BY sp.city;'
), 1), (Example({'sql_prompt': 'What is the total funding received by startups in the technology sector that were founded by women?', 'sql_context': "CREATE TABLE startups(id INT, name TEXT, sector TEXT, founder_gender TEXT, funding FLOAT); INSERT INTO startups VALUES (1, 'Acme Inc', 'Technology', 'Female', 2000000); INSERT INTO startups VALUES (2, 'Beta Corp', 'Retail', 'Male', 3000000); INSERT INTO startups VALUES (3, 'Gamma Start', 'Technology', 'Female', 5000000);", 'sql': "SELECT SUM(funding) FROM startups WHERE sector = 'Technology' AND founder_gender = 'Female';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Find the total funding received by startups in the technology sector that were founded by women. \n\n1. **Identify Relevant Data**: We need data on startups, their sectors, founders' genders, and funding amounts.\n\n2. **Filter for Technology Sector**: First, we filter the startups table to include only those in the 'Technology' sector.\n\n3. **Filter for Female Founders**: Next, we further filter this subset to include only startups founded by women ('Female').\n\n4. **Sum Funding Amounts**: Finally, we sum up the funding amounts of these filtered startups to get the total funding received by technology startups founded by women.\n\nThe SQL query that accomplishes this is:\n\n```sql\nSELECT SUM(funding) AS TotalFunding",
    sql="SELECT SUM(funding) AS TotalFunding FROM startups WHERE sector = 'Technology' AND founder_gender = 'Female';"
), 1), (Example({'sql_prompt': 'What is the recycling rate of plastic in the residential sector in the state of New York?', 'sql_context': "CREATE TABLE recycling_rates_city (sector VARCHAR(20), city VARCHAR(20), material VARCHAR(20), recycling_rate DECIMAL(5,2)); INSERT INTO recycling_rates_city (sector, city, material, recycling_rate) VALUES ('residential', 'New York City', 'plastic', 0.25), ('commercial', 'New York City', 'plastic', 0.30), ('residential', 'New York City', 'paper', 0.45), ('commercial', 'New York City', 'paper', 0.50), ('residential', 'Los Angeles', 'plastic', 0.20), ('commercial', 'Los Angeles', 'plastic', 0.35), ('residential', 'Los Angeles', 'paper', 0.40), ('commercial', 'Los Angeles', 'paper', 0.50);", 'sql': "SELECT recycling_rate FROM recycling_rates_city WHERE sector = 'residential' AND material = 'plastic' AND city = 'New York City';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='1. **SQL Query for Total Funding Amount for Startups Founded by Veterans in Japan**\n\n   To find the total funding amount for startups founded by veterans in Japan, we need to join two tables - `funding` and `company`. The `funding` table likely contains information about each funding transaction, while the `company` table should contain details about each startup including whether it was founded by a veteran. We can use an INNER JOIN on the `company_id` field (assuming this is how the two tables are linked) to filter for startups in Japan that were founded by veterans.\n\n   **SQL Query:**\n   ```sql\n   SELECT SUM(funding.amount) AS total_funding\n   FROM funding\n   INNER JOIN company ON',
    sql="SELECT SUM(funding.amount) AS total_funding \nFROM funding \nINNER JOIN company ON funding.company_id = company.id \nWHERE company.country = 'Japan' AND company.founder_status = 'veteran'; \n\nReasoning:\n1. **Join Tables**: We join the `funding` table with the `company` table using an INNER JOIN on the `company_id` field, assuming this is how the two tables are linked.\n2. **Filter Conditions**:\n   - The `WHERE` clause filters for companies in Japan (`company.country = 'Japan'`) and those founded by veterans (`company.founder_status = 'veteran'`).\n3. **Sum Funding Amount**: We use the SUM function to calculate the total"
), 0), (Example({'sql_prompt': "Which startups in the 'StartupFunding' table received funding in 2020 or later and have a budget greater than $500,000?", 'sql_context': "CREATE SCHEMA BiotechStartups; CREATE TABLE StartupFunding (startup_name VARCHAR(50), funding_year INT, funding DECIMAL(10, 2)); INSERT INTO StartupFunding VALUES ('StartupA', 2019, 500000), ('StartupB', 2020, 750000);", 'sql': 'SELECT startup_name FROM BiotechStartups.StartupFunding WHERE funding_year >= 2020 AND funding > 500000;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Solve the SQL query for this prompt. \n\nFirstly, we need to select startups that received funding in 2020 or later. This can be done using a WHERE clause with a condition `funding_year >= 2020`.\n\nSecondly, we want those startups where the funding amount is greater than $500,000. We can add another condition to our WHERE clause for this.\n\nLastly, we select the columns `startup_name` and `funding_year` from the table `StartupFunding`. \n\nSo, putting it all together:\n\n```sql\nSELECT startup_name, funding_year \nFROM BiotechStartups.StartupFunding \nWHERE funding_year >= 2020 AND funding >',
    sql='SELECT startup_name, funding_year FROM BiotechStartups.StartupFunding WHERE funding_year >= 2020 AND funding > 500000;'
), 1), (Example({'sql_prompt': "How many female engineers are there in 'australian_mines'?", 'sql_context': "CREATE SCHEMA if not exists australia_schema;CREATE TABLE australia_schema.australian_mines (id INT, name VARCHAR, gender VARCHAR, role VARCHAR);INSERT INTO australia_schema.australian_mines (id, name, gender, role) VALUES (1, 'S worker', 'Female', 'Engineer'), (2, 'T engineer', 'Male', 'Engineer');", 'sql': "SELECT COUNT(*) FROM australia_schema.australian_mines WHERE gender = 'Female' AND role = 'Engineer';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To answer the SQL prompt "How many female engineers are there in \'australian_mines\'?", we need to:\n\n1. Identify the table that contains information about Australian mines.\n2. Select only those records where the gender is \'Female\'.\n3. Filter out any roles other than \'Engineer\'.\n4. Count the number of rows returned by these queries.\n\nHere\'s how you can write the SQL query step-by-step:\n\n```sql\n-- Step 1: Identify the table and select relevant columns\nSELECT * FROM australia_schema.australian_mines;\n\n-- Step 2: Filter for female gender\nSELECT * FROM australia_schema.australian_mines WHERE gender = \'Female\';\n\n-- Step 3: Further filter to only include',
    sql="SELECT COUNT(*) AS num_female_engineers \nFROM australia_schema.australian_mines \nWHERE gender = 'Female' AND role = 'Engineer';"
), 1), (Example({'sql_prompt': 'What is the average salary of employees in each position?', 'sql_context': "CREATE TABLE Employees (EmployeeID INT, Name VARCHAR(50), Department VARCHAR(50), Position VARCHAR(50), Salary FLOAT); INSERT INTO Employees (EmployeeID, Name, Department, Position, Salary) VALUES (1, 'John Doe', 'IT', 'Developer', 75000.00), (2, 'Jane Smith', 'IT', 'Developer', 80000.00), (3, 'Alice Johnson', 'Marketing', 'Marketing Specialist', 60000.00), (4, 'Bob Brown', 'HR', 'HR Specialist', 65000.00);", 'sql': 'SELECT Position, AVG(Salary) FROM Employees GROUP BY Position;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="1. **SQL Query for Average Salary of Employees in Each Position**\n\nTo find the average salary of employees in each position, we can use a `GROUP BY` clause with an aggregate function like `AVG()`. Here is how you would write this SQL query:\n\n```sql\nSELECT Position, AVG(Salary) AS AverageSalary\nFROM Employees\nGROUP BY Position;\n```\n\n**Explanation:**\n\n- **SELECT Position**: This selects the 'Position' column from the table.\n- **AVG(Salary)**: The `AVG()` function calculates the average salary for each group of positions. \n- **AS AverageSalary**: This renames the calculated average to a more descriptive name, 'AverageSalary'.\n- **FROM Employees**: Specifies",
    sql='```sql\nSELECT Position, AVG(Salary) AS AverageSalary FROM Employees GROUP BY Position;\n```'
), 1), (Example({'sql_prompt': 'What are the names and ranks of all military personnel in country W who were demoted in the year 2019?', 'sql_context': "CREATE TABLE military_demotions (id INT, name TEXT, country TEXT, rank TEXT, demotion_year INT);INSERT INTO military_demotions (id, name, country, rank, demotion_year) VALUES (1, 'John Doe', 'Country W', 'Colonel', 2019);", 'sql': "SELECT name, rank FROM military_demotions WHERE country = 'Country W' AND demotion_year = 2019;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Understand the SQL query for this prompt:\n\n**Prompt**: What are the names and ranks of all military personnel in country W who were demoted in the year 2019?\n\n**SQL Query**:\n```sql\nSELECT name, rank FROM military_demotions WHERE country = 'Country W' AND demotion_year = 2019;\n```\n\n### Step-by-step reasoning:\n\n1. **Identify the table**: The relevant data is stored in the `military_demotions` table.\n\n2. **Select the required columns**: We need to select two columns: `name` and `rank`.\n\n3. **Filter by country**: Since we're interested only in personnel from 'Country W', we add a condition `WHERE",
    sql="```sql\nSELECT name, rank FROM military_demotions WHERE country = 'Country W' AND demotion_year = 2019;\n```"
), 1), (Example({'sql_prompt': "List the top 2 sectors with the highest donation amounts in the 'Asia' region for the year 2018, ordered by the donation amount in descending order.", 'sql_context': "CREATE TABLE Donors (donor_id INT, donor_name VARCHAR(255), donation_amount INT, sector VARCHAR(255), region VARCHAR(255), donation_date DATE); INSERT INTO Donors (donor_id, donor_name, donation_amount, sector, region, donation_date) VALUES (1, 'DonorA', 100000, 'Health', 'Asia', '2018-01-01');", 'sql': "SELECT sector, SUM(donation_amount) AS total_donation FROM Donors WHERE region = 'Asia' AND donation_date >= '2018-01-01' AND donation_date < '2019-01-01' GROUP BY sector ORDER BY total_donation DESC LIMIT 2;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Solve the SQL prompt for listing the top 2 sectors with the highest donation amounts in the 'Asia' region for the year 2018, ordered by the donation amount in descending order. \n\n**Step-by-step reasoning:**\n\n1. **Filter Data**: First, we need to filter out only those rows where the `region` is 'Asia' and the `donation_date` is within or on the boundary of 2018.\n\n2. **Group By Sector**: Next, group the filtered data by the `sector`.\n\n3. **Calculate Total Donation Amounts**: For each sector in the grouped data, calculate the total donation amount.\n\n4. **Order Results**: Order these totals in descending order to find the",
    sql="SELECT sector, SUM(donation_amount) as total_donation \nFROM Donors \nWHERE region = 'Asia' AND YEAR(donation_date) = 2018 \nGROUP BY sector \nORDER BY total_donation DESC \nLIMIT 2;"
), 1), (Example({'sql_prompt': "Display the vendor with the highest average price for 'Salmon' in the 'sales' table.", 'sql_context': "CREATE TABLE sales (id INT PRIMARY KEY, vendor VARCHAR(50), quantity INT, species VARCHAR(50), price DECIMAL(5,2)); INSERT INTO sales (id, vendor, quantity, species, price) VALUES (1, 'Seafood Haven', 20, 'Salmon', 15.99), (2, 'Sea Bounty', 30, 'Tilapia', 9.49), (3, 'Sea Bounty', 15, 'Cod', 14.50), (4, 'Fresh Catch', 25, 'Salmon', 17.99);", 'sql': "SELECT vendor, AVG(price) FROM sales WHERE species = 'Salmon' GROUP BY vendor ORDER BY AVG(price) DESC LIMIT 1;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Solve the SQL prompt for displaying the vendor with the highest average price for 'Salmon'. \n\n**Step 1:** Identify the rows where `species` is 'Salmon'.\n- The `sales` table has columns `id`, `vendor`, `quantity`, `species`, and `price`. We need to filter out only those rows where `species` equals 'Salmon'.\n\n**Step 2:** Calculate the average price for each vendor of Salmon.\n- Once we have filtered the rows with 'Salmon', we can calculate the average price per vendor.\n\n**Step 3:** Find the vendor with the highest average price.\n- After calculating the averages, we need to find which vendor has the highest value in this average column.\n\nHere",
    sql="SELECT vendor FROM sales WHERE species = 'Salmon' GROUP BY vendor ORDER BY AVG(price) DESC LIMIT 1;"
), 1), (Example({'sql_prompt': "Add new military equipment to 'military_equipment' table", 'sql_context': "CREATE TABLE military_equipment (id INT PRIMARY KEY, name VARCHAR(255), type VARCHAR(255), country VARCHAR(255)); INSERT INTO military_equipment (id, name, type, country) VALUES (1, 'M1 Abrams', 'Tank', 'USA');", 'sql': "INSERT INTO military_equipment (id, name, type, country) VALUES (2, 'Leopard 2', 'Tank', 'Germany');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Add new military equipment to the `military_equipment` table:\n\nStep 1: Identify the details of the new military equipment you want to add. This typically includes:\n- ID (unique identifier for each piece of equipment)\n- Name (the name or model of the equipment)\n- Type (classification, such as tank, aircraft, ship, etc.)\n- Country (where the equipment is from)\n\nStep 2: Ensure that the new equipment's details are not already in the table. You can do this by running a SELECT query with the same criteria you plan to insert.\n\nStep 3: Use an INSERT INTO statement to add the new military equipment into the `military_equipment` table, specifying each column and its corresponding value from",
    sql="INSERT INTO military_equipment (id, name, type, country) VALUES (2, 'Leclerc', 'Tank', 'France');"
), 1), (Example({'sql_prompt': 'Show total number of union members by state', 'sql_context': "CREATE TABLE union_members (id INT, name VARCHAR(50), state VARCHAR(2), city VARCHAR(20), occupation VARCHAR(20)); INSERT INTO union_members (id, name, state, city, occupation) VALUES (1, 'John Doe', 'NY', 'New York', 'Engineer'); INSERT INTO union_members (id, name, state, city, occupation) VALUES (2, 'Jane Smith', 'CA', 'Los Angeles', 'Teacher'); INSERT INTO union_members (id, name, state, city, occupation) VALUES (3, 'Alice Johnson', 'NY', 'Buffalo', 'Nurse');", 'sql': 'SELECT state, COUNT(*) as total_members FROM union_members GROUP BY state;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='1. **Total number of union members by state**:\n\nTo find the total number of union members by state, we need to count the distinct `id` values for each unique combination of `state` and `occupation`. This will give us a count of how many union members there are in each state for each occupation.\n\n```sql\nSELECT \n    state,\n    occupation,\n    COUNT(DISTINCT id) AS total_members\nFROM \n    union_members\nGROUP BY \n    state, occupation;\n```\n\nThis SQL query groups the data by `state` and `occupation`, then counts the number of distinct `id`s (union members) for each group.\n\n2. **Insert a new clinical trial for DrugE in 202',
    sql='INSERT INTO clinical_trials (drug_name, start_year) VALUES (\'DrugE\', 202); --- \n\nReasoning: To add a new record to the `clinical_trials` table representing a clinical trial for "DrugE" that started in the year 202, we use an SQL `INSERT INTO` statement. This statement specifies the table name (`clinical_trials`) and lists the columns we want to populate (in this case, `drug_name` and `start_year`). We then provide the values for these columns within parentheses.\n\nHere\'s a breakdown of the SQL query:\n\n1. **Table Name**: The first part of the `INSERT INTO` statement is the name of the table where the new record will be inserted (`clinical'
), 0), (Example({'sql_prompt': 'What is the total value of military equipment sales to all countries?', 'sql_context': "CREATE TABLE military_sales (id INT, country VARCHAR, value FLOAT); INSERT INTO military_sales (id, country, value) VALUES (1, 'Canada', 5000000), (2, 'Mexico', 3000000), (3, 'Canada', 7000000);", 'sql': 'SELECT SUM(value) FROM military_sales;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Solve the SQL query for finding the total value of military equipment sales to all countries. \n\n1. **Identify the table**: We need data from the `military_sales` table.\n\n2. **Select the required column**: The total value is what we're interested in, so we select the `value` column.\n\n3. **Sum up the values**: To get a total sum of all sales, we use the SQL `SUM()` function on the `value` column.\n\n4. **Consider all rows**: Since we want to find the total for all countries, there's no need to filter by country in this case.\n\n5. **Write the query**:\n```sql\nSELECT SUM(value) AS total_sales FROM military_sales;",
    sql='SELECT SUM(value) AS total_sales FROM military_sales;'
), 1), (Example({'sql_prompt': 'Identify the top 3 countries with the highest number of social impact projects in 2019.', 'sql_context': "CREATE TABLE countries (id INT, name VARCHAR(255), total_projects INT); INSERT INTO countries (id, name, total_projects) VALUES (1, 'Brazil', 500), (2, 'India', 700), (3, 'South Africa', 350); CREATE TABLE projects_by_country (country VARCHAR(255), project_count INT); INSERT INTO projects_by_country (country, project_count) SELECT country, COUNT(*) FROM projects GROUP BY country;", 'sql': 'SELECT c.name, p.project_count FROM countries c JOIN (SELECT country, COUNT(*) AS project_count FROM projects GROUP BY country ORDER BY project_count DESC LIMIT 3) p ON c.name = p.country;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Identify the top 3 countries with the highest number of social impact projects in 2019:\n\n**Step 1:** We need to join the `countries` table and the `projects_by_country` table on their respective country names. This will allow us to match each country's total projects count from the `projects_by_country` table with its name from the `countries` table.\n\n**Step 2:** After joining, we can use a `GROUP BY` clause to aggregate the project counts by country and calculate the total number of social impact projects for each country. This will give us a summary of how many projects each country has in our dataset.\n\n**Step 3:** We then order these results by the total project count in",
    sql='SELECT countries.name, projects_by_country.project_count \nFROM countries \nJOIN projects_by_country ON countries.name = projects_by_country.country \nORDER BY projects_by_country.project_count DESC \nLIMIT 3;'
), 1), (Example({'sql_prompt': 'What is the maximum market price of Terbium in China for 2017?', 'sql_context': 'CREATE TABLE Terbium_Market_Prices (id INT, year INT, country VARCHAR(255), market_price FLOAT);', 'sql': "SELECT MAX(market_price) FROM Terbium_Market_Prices WHERE year = 2017 AND country = 'China';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='answer the SQL prompt. \n\nFirstly, we need a table named `Terbium_Market_Prices` that contains information about Terbium prices for different years and countries. The structure of this table is as follows:\n\n- `id`: An integer representing the unique identifier for each record.\n- `year`: An integer indicating the year when the price was recorded.\n- `country`: A string specifying the country where the market price was observed.\n- `market_price`: A float representing the market price of Terbium.\n\nGiven this context, we can now formulate an SQL query to find the maximum market price of Terbium in China for 2017. \n\nThe SQL query would look like:\n\n```sql\nSELECT MAX',
    sql="SELECT MAX(market_price) AS max_market_price FROM Terbium_Market_Prices WHERE year = 2017 AND country = 'China';"
), 1), (Example({'sql_prompt': 'What is the maximum amount of research grant received by a faculty member in the Arts and Humanities department?', 'sql_context': "CREATE TABLE grants_faculty (id INT, department VARCHAR(50), faculty_name VARCHAR(50), amount DECIMAL(10,2), grant_date DATE); INSERT INTO grants_faculty (id, department, faculty_name, amount, grant_date) VALUES (1, 'Arts and Humanities', 'Grace', 12000.00, '2018-06-10'), (2, 'Arts and Humanities', 'Harry', 18000.00, '2019-12-20'), (3, 'Arts and Humanities', 'Ida', 20000.00, '2020-08-05');", 'sql': "SELECT MAX(amount) FROM grants_faculty WHERE department = 'Arts and Humanities';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the maximum amount of research grant received by a faculty member in the Arts and Humanities department, we can use SQL to query our `grants_faculty` table. Here is how you would write the SQL statement:\n\n```sql\nSELECT MAX(amount) AS max_grant_amount \nFROM grants_faculty \nWHERE department = 'Arts and Humanities';\n```\n\n**Explanation:**\n\n1. **SELECT MAX(amount):** This part of the query tells SQL to find the maximum value in the `amount` column.\n2. **AS max_grant_amount:** This is an alias for the result, making it easier to read when you print out the results.\n3. **FROM grants_faculty:** This specifies that we are querying data from",
    sql="```sql\nSELECT MAX(amount) AS max_grant_amount FROM grants_faculty WHERE department = 'Arts and Humanities';\n```\n\n**Explanation:**\n\n1. **`SELECT MAX(amount)`**: This part of the query tells SQL to find the maximum value in the `amount` column, which represents the research grant amount.\n2. **`AS max_grant_amount`**: This is an alias for the result, making it easier to read when you print out the results and understand that this value represents the maximum grant amount received by a faculty member in the Arts and Humanities department.\n3. **`FROM grants_faculty`**: This specifies that we are querying data from the `grants_faculty` table, which contains information about research"
), 1), (Example({'sql_prompt': 'What is the total mass of all space debris in orbit?', 'sql_context': "CREATE TABLE Space_Debris (ID INT, Object_Type VARCHAR(50), Mass FLOAT); INSERT INTO Space_Debris (ID, Object_Type, Mass) VALUES (1, 'Defunct Satellite', 1500.0), (2, 'Rocket Body', 2000.0), (3, 'Fuel Tank', 500.0), (4, 'Nuts and Bolts', 100.0), (5, 'Spent Rocket Stage', 3000.0);", 'sql': 'SELECT SUM(Mass) FROM Space_Debris;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the total mass of all space debris in orbit, we need to sum up the `Mass` column from the `Space_Debris` table.\n\nHere is how you can write the SQL query:\n\n```sql\nSELECT SUM(Mass) AS Total_Mass FROM Space_Debris;\n```\n\nThis query will calculate the sum of all values in the `Mass` column and return it as `Total_Mass`.',
    sql='```sql\nSELECT SUM(Mass) AS Total_Mass FROM Space_Debris;\n```'
), 1), (Example({'sql_prompt': 'What is the average age of players who play "Racing Simulator 2022"?', 'sql_context': "CREATE TABLE Players (PlayerID INT, PlayerName VARCHAR(50), Game VARCHAR(50), Age INT); INSERT INTO Players (PlayerID, PlayerName, Game, Age) VALUES (1, 'John Doe', 'Racing Simulator 2022', 25), (2, 'Jane Smith', 'Racing Simulator 2022', 30), (3, 'Alice Johnson', 'Shooter Game 2022', 22);", 'sql': "SELECT AVG(Age) FROM Players WHERE Game = 'Racing Simulator 2022';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='1. **Identify the relevant data**: We need to find players who play "Racing Simulator 2022". This means we should filter our `Players` table based on the game name.\n\n   - **Step 1**: Select all columns from the `Players` table.\n   - **Step 2**: Filter rows where `Game` is \'Racing Simulator 2022\'.\n\n2. **Calculate the average age**: Once we have identified the players who play "Racing Simulator 2022", we can calculate their average age.\n\n   - **Step 3**: Use the AVG function to find the average of the `Age` column from the filtered rows.\n\n**SQL Query:**\n\n```sql',
    sql="SELECT AVG(Age) as AverageAge FROM Players WHERE Game = 'Racing Simulator 2022';\n\n```"
), 1), (Example({'sql_prompt': 'What is the total revenue generated by concert ticket sales in the US?', 'sql_context': "CREATE TABLE concert_tickets (ticket_id int, venue_id int, ticket_price decimal, timestamp datetime, country varchar(255)); INSERT INTO concert_tickets (ticket_id, venue_id, ticket_price, timestamp, country) VALUES (1, 789, 50.00, '2022-06-01 12:00:00', 'United States');", 'sql': "SELECT SUM(ticket_price) as total_revenue FROM concert_tickets WHERE timestamp BETWEEN '2022-01-01' AND '2022-12-31' AND country = 'United States';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Understand the SQL query that would be used to find the total revenue generated by concert ticket sales in the US. \n\nStep 1: Identify the table and columns needed for this query.\n- The relevant table is `concert_tickets`.\n- We need the `ticket_price` column, which represents the price of each ticket sold.\n\nStep 2: Filter the data based on the country.\n- Since we're interested only in sales from the US, we'll use a WHERE clause to filter rows where `country` equals 'United States'.\n\nStep 3: Calculate the total revenue.\n- To find the total revenue, we need to sum up all the ticket prices. This can be done using the SUM() function.\n\nPutting it together:\n\n```sql",
    sql="SELECT SUM(ticket_price) AS total_revenue FROM concert_tickets WHERE country = 'United States';"
), 1), (Example({'sql_prompt': "How many cases did attorney 'Jane Doe' handle in total?", 'sql_context': "CREATE TABLE Attorneys (AttorneyID int, Name varchar(50), Specialty varchar(50)); INSERT INTO Attorneys (AttorneyID, Name, Specialty) VALUES (2, 'Jane Doe', 'Civil'); CREATE TABLE Cases (CaseID int, ClientID int, Category varchar(50), AttorneyID int); INSERT INTO Cases (CaseID, ClientID, Category, AttorneyID) VALUES (301, 3, 'Civil', 2);", 'sql': "SELECT COUNT(*) as TotalCases FROM Cases WHERE AttorneyID = (SELECT AttorneyID FROM Attorneys WHERE Name = 'Jane Doe');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To answer the SQL prompt "How many cases did attorney \'Jane Doe\' handle in total?", we need to:\n\n1. Identify all rows where `AttorneyID` is equal to the ID of \'Jane Doe\'.\n2. Count the number of these rows, which will give us the total number of cases Jane Doe handled.\n\nHere\'s how you can write this SQL query:\n\n```sql\nSELECT COUNT(*) \nFROM Attorneys a\nJOIN Cases c ON a.AttorneyID = c.AttorneyID\nWHERE a.Name = \'Jane Doe\';\n```\n\nThis query first joins the `Attorneys` table with the `Cases` table on the condition that their `AttorneyID`s match. Then, it filters out rows where the attorney\'s',
    sql="```sql\nSELECT COUNT(*) FROM Attorneys a JOIN Cases c ON a.AttorneyID = c.AttorneyID WHERE a.Name = 'Jane Doe';\n```"
), 1), (Example({'sql_prompt': 'Show the top 3 content categories in Japan with the most posts.', 'sql_context': "CREATE TABLE content_categories (id INT, content_category VARCHAR(255)); CREATE TABLE posts_extended (id INT, content_category_id INT, content TEXT, country VARCHAR(255)); INSERT INTO content_categories (id, content_category) VALUES (1, 'AI'), (2, 'Data Science'), (3, 'Machine Learning'); INSERT INTO posts_extended (id, content_category_id, content, country) VALUES (1, 1, 'Hello', 'Japan'), (2, 1, 'World', 'Japan'), (3, 2, 'AI', 'Japan');", 'sql': "SELECT content_categories.content_category, COUNT(posts_extended.id) AS post_count FROM content_categories JOIN posts_extended ON posts_extended.content_category_id = content_categories.id WHERE posts_extended.country = 'Japan' GROUP BY content_categories.content_category ORDER BY post_count DESC LIMIT 3;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="1. **Total Funding for Startups Founded by Veterans in Japan**\n\n   To find the total funding amount for startups founded by veterans in Japan, we need to join two tables - `funding` and `company`. The `funding` table likely contains information about each funding event, while the `company` table contains details about the companies including their founding year, country, and whether the founder is a veteran. \n\n   **Steps:**\n   \n   1. Join the `funding` table with the `company` table on the common field (e.g., company ID).\n   2. Filter for rows where the country is 'Japan'.\n   3. Filter for rows where the founder is a veteran.\n   4",
    sql="SELECT SUM(funding_amount) AS total_funding FROM funding \nJOIN company ON funding.company_id = company.id \nWHERE company.country = 'Japan' AND company.is_veteran_founder = TRUE;"
), 0), (Example({'sql_prompt': 'How many defense contracts were signed in each quarter of 2020?', 'sql_context': "CREATE TABLE defense_contracts (contract_id INT, contract_date DATE); INSERT INTO defense_contracts VALUES (1, '2020-03-15'), (2, '2020-06-01'), (3, '2020-09-15');", 'sql': "SELECT TO_CHAR(contract_date, 'YYYY-Q') AS quarter, COUNT(*) FROM defense_contracts WHERE contract_date >= DATE '2020-01-01' AND contract_date < DATE '2021-01-01' GROUP BY quarter;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Understand how we can answer the SQL prompt "How many defense contracts were signed in each quarter of 2020?" given the provided context.\n\n### Step-by-step reasoning:\n\n#### 1. **Identify the relevant data**: \n   - The dataset `defense_contracts` contains information about defense contracts, specifically contract IDs and their respective dates (`contract_date`).\n\n#### 2. **Extract the year from the date**:\n   - We need to filter out only those contracts signed in 2020.\n\n#### 3. **Break down the year into quarters**:\n   - A calendar year is divided into four quarters: Q1 (January-March), Q2 (April-June), Q3 (July-',
    sql="SELECT \n    DATE_FORMAT(contract_date, '%Y-%m') AS quarter,\n    COUNT(*) AS contract_count\nFROM \n    defense_contracts\nWHERE \n    YEAR(contract_date) = 2020\nGROUP BY \n    quarter;"
), 1), (Example({'sql_prompt': 'What is the total duration played for each player?', 'sql_context': "CREATE TABLE PlayerGame (PlayerID INT, GameID INT, Played DATE, StartTime TIMESTAMP, EndTime TIMESTAMP); INSERT INTO PlayerGame (PlayerID, GameID, Played, StartTime, EndTime) VALUES (1, 1, '2022-01-01', '2022-01-01 10:00:00', '2022-01-01 12:00:00'), (2, 2, '2022-01-02', '2022-01-02 14:00:00', '2022-01-02 16:00:00'), (3, 1, '2022-01-03', '2022-01-03 10:00:00', '2022-01-03 11:00:00'), (4, 3, '2022-01-04', '2022-01-04 18:00:00', '2022-01-04 19:00:00');", 'sql': 'SELECT PlayerID, SUM(TIMESTAMPDIFF(MINUTE, StartTime, EndTime)) FROM PlayerGame GROUP BY PlayerID;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To calculate the total duration played for each player, we need to:\n\n1. Identify all games that a specific player has participated in.\n2. Calculate the difference between the end time and start time of each game to find out how long they have been playing.\n3. Sum up these durations for each player.\n\nHere's the SQL query that accomplishes this task:\n\n```sql\nSELECT PlayerID, SUM(EndTime - StartTime) AS TotalDurationPlayed\nFROM PlayerGame\nGROUP BY PlayerID;\n```\n\nThis query does the following:\n- `PlayerGame` is the table containing information about players and their games.\n- `SUM(EndTime - StartTime)` calculates the total duration played for each game by subtracting the start time from the end time",
    sql='```sql\nSELECT PlayerID, SUM(EndTime - StartTime) AS TotalDurationPlayed \nFROM PlayerGame \nGROUP BY PlayerID;\n```'
), 1), (Example({'sql_prompt': 'Find the percentage change in tourism to Thailand between 2019 and 2021.', 'sql_context': 'CREATE TABLE thailand_tourism (year INT, total_visitors INT); INSERT INTO thailand_tourism (year, total_visitors) VALUES (2019, 40000), (2021, 30000);', 'sql': 'SELECT (30000 - 40000) * 100.0 / 40000 AS change_percentage FROM thailand_tourism WHERE year = 2021;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Find the percentage change in tourism to Thailand between 2019 and 2021:\n\nStep 1: Calculate the difference in total visitors between 2021 and 2019.\nDifference = Total Visitors (2021) - Total Visitors (2019)\n\nStep 2: Calculate the percentage change using the formula:\nPercentage Change = (Difference / Total Visitors (2019)) * 100\n\nNow, let's write SQL to calculate this:\n\n```sql\nWITH tourism_data AS (\n    SELECT \n        year,\n        total_visitors\n    FROM thailand_tourism\n),\ntourist_change AS (\n    SELECT \n        (total_visitors_202",
    sql='WITH tourism_data AS (\n    SELECT \n        year,\n        total_visitors\n    FROM \n        thailand_tourism\n),\ntourist_change AS (\n    SELECT\n        2021 - 2019 AS years_difference,\n        (total_visitors_2021 - total_visitors_2019) / total_visitors_2019 * 100 AS percentage_change\nFROM \n    tourism_data\nWHERE \n    year = 2021 OR year = 2019\n)\nSELECT \n    years_difference,\n    percentage_change\nFROM \n    tourist_change;'
), 1), (Example({'sql_prompt': 'How many students with physical disabilities have not received any accommodations in the last year?', 'sql_context': 'CREATE TABLE Accommodations (id INT, student VARCHAR(255), date DATE); CREATE TABLE Students (id INT, name VARCHAR(255), age INT, disability VARCHAR(255));', 'sql': "SELECT COUNT(*) FROM Students LEFT JOIN Accommodations ON Students.id = Accommodations.student WHERE disability = 'physical disability' AND date IS NULL;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Solve the SQL query for each prompt:\n\n### Prompt 1: Total Funding Amount for Startups Founded by Veterans in Japan\n\n**SQL Query:**\n```sql\nSELECT SUM(funding_amount) AS total_funding FROM funding INNER JOIN company ON funding.company_id = company.id WHERE company.country = 'Japan' AND company.founder_veteran = TRUE;\n```\n\n**Reasoning:**\n1. **Join Tables:** First, join the `funding` table with the `company` table on their respective IDs to link each funding record to its corresponding company.\n2. **Filter Criteria:** Filter for companies located in Japan (`company.country = 'Japan'`) and founded by veterans (`company.founder_veteran = TRUE`).",
    sql="```sql\nSELECT SUM(funding_amount) AS total_funding \nFROM funding \nINNER JOIN company ON funding.company_id = company.id \nWHERE company.country = 'Japan' AND company.founder_veteran = TRUE;\n```"
), 0), (Example({'sql_prompt': 'What is the maximum property price in neighborhoods with inclusive housing policies, and the minimum size of properties in those neighborhoods?', 'sql_context': "CREATE TABLE property (id INT, price INT, size_sqft INT, area VARCHAR(255), has_inclusive_policy BOOLEAN); INSERT INTO property (id, price, size_sqft, area, has_inclusive_policy) VALUES (1, 500000, 1500, 'urban', true), (2, 400000, 1200, 'urban', false);", 'sql': "SELECT MAX(price), MIN(size_sqft) FROM property WHERE area = 'urban' AND has_inclusive_policy = true;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Solve the SQL prompts:\n\n### Prompt 1: Total Funding for Startups Founded by Veterans in Japan\n\n**Context**: We have a `company` table with columns `id`, `name`, `country`, and `founding_date`. A `founder_veteran` column indicates if the founder is a veteran. There's also a separate `funding` table that links to companies.\n\n**SQL Query**:\n```sql\nSELECT SUM(funding_amount) AS total_funding FROM funding\nINNER JOIN company ON funding.company_id = company.id\nWHERE company.country = 'Japan' AND company.founder_veteran = TRUE;\n```\n\n### Prompt 2: Most Common Mental Health Treatment in France\n\n**Context**: We have",
    sql='SELECT MAX(property.price), MIN(property.size_sqft) FROM property INNER JOIN area ON property.area = area.name WHERE area.has_inclusive_policy = true;'
), 0), (Example({'sql_prompt': "Add a new safety incident to the safety_incidents table (id: 4, aircraft: 'Space Shuttle Challenger', date: '1986-01-28', description: 'O-ring failure')", 'sql_context': 'CREATE TABLE safety_incidents (id INT, aircraft VARCHAR(255), date DATE, description VARCHAR(255));', 'sql': "INSERT INTO safety_incidents (id, aircraft, date, description) VALUES (4, 'Space Shuttle Challenger', '1986-01-28', 'O-ring failure');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Add a new safety incident to the `safety_incidents` table:\n\n1. **Identify the current structure of the `safety_incidents` table**: \n   - The table has four columns:\n     - `id`: An integer that uniquely identifies each safety incident.\n     - `aircraft`: A string that specifies the aircraft involved in the incident.\n     - `date`: A date indicating when the incident occurred.\n     - `description`: A string detailing what happened during the incident.\n\n2. **Understand the new data to be added**:\n   - The new safety incident involves an aircraft named 'Space Shuttle Challenger'.\n   - It occurred on a specific date, which is '1986-01-28",
    sql="INSERT INTO safety_incidents (id, aircraft, date, description) VALUES (4, 'Space Shuttle Challenger', '1986-01-28', 'O-ring failure');"
), 1), (Example({'sql_prompt': "What is the average age of players who prefer the 'FPS' genre in the 'player_preferences' and 'player_demographics' tables?", 'sql_context': "CREATE TABLE player_preferences (player_id INT, genre VARCHAR(50)); CREATE TABLE player_demographics (player_id INT, age INT); INSERT INTO player_preferences (player_id, genre) VALUES (1, 'FPS'), (2, 'RPG'), (3, 'FPS'), (4, 'Simulation'); INSERT INTO player_demographics (player_id, age) VALUES (1, 25), (2, 30), (3, 35), (4, 40);", 'sql': "SELECT AVG(age) as avg_fps_age FROM player_demographics JOIN player_preferences ON player_preferences.player_id = player_demographics.player_id WHERE genre = 'FPS';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Solve the SQL prompt for finding the average age of players who prefer the 'FPS' genre. \n\n**Step 1:** Identify the relevant tables and their relationships.\n- `player_preferences` contains player IDs and genres they prefer.\n- `player_demographics` contains player IDs and their ages.\n\n**Step 2:** Join the two tables based on the common column (player_id).\n- This will allow us to match each player's preference with their age.\n\n**Step 3:** Filter for players who prefer 'FPS'.\n- We can use a WHERE clause to select only rows where `genre` is 'FPS'.\n\n**Step 4:** Calculate the average age of these filtered players.\n- Use the AVG() function on the `age`",
    sql="SELECT AVG(player_demographics.age) AS avg_age FROM player_preferences JOIN player_demographics ON player_preferences.player_id = player_demographics.player_id WHERE player_preferences.genre = 'FPS';"
), 1), (Example({'sql_prompt': 'What is the diversity ratio (percentage of non-male employees) in each department?', 'sql_context': "CREATE TABLE Employees (EmployeeID int, Department varchar(20), Gender varchar(10)); INSERT INTO Employees (EmployeeID, Department, Gender) VALUES (1, 'Marketing', 'Male'); INSERT INTO Employees (EmployeeID, Department, Gender) VALUES (2, 'Marketing', 'Female'); INSERT INTO Employees (EmployeeID, Department, Gender) VALUES (3, 'IT', 'Male'); INSERT INTO Employees (EmployeeID, Department, Gender) VALUES (4, 'IT', 'Non-binary');", 'sql': "SELECT Department, (COUNT(CASE WHEN Gender <> 'Male' THEN 1 END) / COUNT(*)) * 100 AS DiversityRatio FROM Employees GROUP BY Department;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="1. **Calculate the total number of employees per department**: We need to count the number of employees for each department.\n2. **Count the non-male employees per department**: Since we have a binary gender system (male and female), we can subtract the number of male employees from the total number of employees in each department to find out how many are non-male.\n3. **Calculate the diversity ratio**: The diversity ratio is calculated as the percentage of non-male employees within each department, which can be found by dividing the number of non-male employees by the total number of employees and then multiplying by 100.\n\nHere's the SQL query that accomplishes this:\n\n```sql\nSELECT \n    Department,\n    COUNT(EmployeeID",
    sql="```sql\nSELECT \n    Department,\n    (COUNT(CASE WHEN Gender NOT IN ('Male') THEN EmployeeID END) * 100.0 / COUNT(EmployeeID)) AS DiversityRatio\nFROM Employees\nGROUP BY Department;\n```\n\nReasoning:\n- **Step 1**: We start by selecting the `Department` column from the `Employees` table.\n- **Step 2**: To calculate the diversity ratio, we use a CASE statement within the COUNT function. This counts the number of employees who are not 'Male' (i.e., they could be 'Female' or 'Non-binary'). The `NOT IN ('Male')` condition ensures that only non-male employees are counted.\n- **Step 3**: We"
), 1), (Example({'sql_prompt': 'What is the average donation per donor in India?', 'sql_context': "CREATE TABLE donations (donor_id INT, donation_amount DECIMAL(10, 2), donation_date DATE, country TEXT); INSERT INTO donations VALUES (1, 50.00, '2021-05-15', 'India'), (2, 100.00, '2021-06-10', 'India'), (3, 25.00, '2021-04-01', 'India');", 'sql': "SELECT AVG(donation_amount) FROM donations WHERE country = 'India';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Find the average donation per donor in India:\n\n1. **Identify the relevant data**: We need to look at the `donations` table where the `country` column is set to `'India'`.\n\n2. **Calculate total donations for each donor**: To find out how much each donor has donated, we can use a subquery that groups by `donor_id` and sums up all donation amounts for each individual.\n\n3. **Divide total donations by number of donors**: Once we have the total amount donated by each donor, we need to divide this sum by the count of donations made by each donor (which is essentially 1 per donor since we're grouping by `donor_id`).\n\n4. **Calculate average donation**:",
    sql="SELECT AVG(total_donation) AS average_donation_per_donor FROM (\n    SELECT donor_id, SUM(donation_amount) AS total_donation \n    FROM donations \n    WHERE country = 'India' \n    GROUP BY donor_id\n) subquery;"
), 1), (Example({'sql_prompt': 'How many wildlife habitats in South Africa have a total area greater than 50000 hectares?', 'sql_context': 'CREATE TABLE wildlife_habitats (id INT, name TEXT, area REAL, country TEXT);', 'sql': "SELECT COUNT(*) FROM wildlife_habitats WHERE country = 'South Africa' GROUP BY country HAVING SUM(area) > 50000;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="1. **Identify the SQL Query**: We need to find out how many wildlife habitats in South Africa have a total area greater than 50000 hectares.\n\n2. **Understand the Data Structure**:\n   - The `wildlife_habitats` table contains columns: `id`, `name`, `area`, and `country`.\n\n3. **Formulate the SQL Query**:\n   - We will use a SELECT statement to count rows.\n   - Use WHERE clause to filter habitats where area is greater than 50000 hectares.\n   - The country should be 'South Africa'.\n\n4. **Write the SQL Query**:\n\n```sql\nSELECT COUNT(*) \nFROM wildlife_habitats \nWHERE area >",
    sql="SELECT COUNT(*) FROM wildlife_habitats WHERE area > 50000 AND country = 'South Africa';"
), 1), (Example({'sql_prompt': 'What is the percentage of faculty members who identify as AAPI in the School of Business?', 'sql_context': "CREATE TABLE faculty_members (id INT, faculty_name VARCHAR(50), faculty_department VARCHAR(50), faculty_race VARCHAR(20)); INSERT INTO faculty_members (id, faculty_name, faculty_department, faculty_race) VALUES (1, 'Taylor Smith', 'Business Administration', 'AAPI'), (2, 'James Johnson', 'Marketing', 'White'), (3, 'Avery Brown', 'Finance', 'Black'), (4, 'Katie Davis', 'Management', 'White'), (5, 'Jamie Wilson', 'Accounting', 'Latinx'), (6, 'Leah Kim', 'Business Analytics', 'AAPI');", 'sql': "SELECT (COUNT(*) FILTER (WHERE faculty_race = 'AAPI')) * 100.0 / COUNT(*) FROM faculty_members WHERE faculty_department LIKE '%Business%';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="1. **Identify the relevant data**: We need to find faculty members who identify as AAPI and are part of the School of Business.\n2. **Filter the data**: Use a WHERE clause to filter for `faculty_race = 'AAPI'` AND `faculty_department = 'Business Administration'`.\n3. **Count the filtered records**: Use COUNT(*) to count how many faculty members meet our criteria.\n4. **Find the total number of faculty members in the School of Business**: This might not be directly available, so we'll assume it's a known value or calculated separately for this example.\n5. **Calculate the percentage**: Divide the count from step 3 by the total number of faculty members (which is our assumed or calculated",
    sql="SELECT CAST(COUNT(*) AS REAL) * 100 / (SELECT COUNT(*) FROM faculty_members WHERE faculty_department = 'Business Administration') FROM faculty_members WHERE faculty_race = 'AAPI' AND faculty_department = 'Business Administration';"
), 0), (Example({'sql_prompt': 'How many water treatment plants are there in the province of Ontario, Canada?', 'sql_context': "CREATE TABLE water_treatment_plants_ontario (id INT, province VARCHAR); INSERT INTO water_treatment_plants_ontario (id, province) VALUES (1, 'Ontario'), (2, 'Quebec'), (3, 'Ontario'), (4, 'British Columbia');", 'sql': "SELECT COUNT(*) FROM water_treatment_plants_ontario WHERE province = 'Ontario';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Solve the SQL prompts:\n\n### 1. Total Funding for Startups Founded by Veterans in Japan\n\n**Prompt**: What was the total funding amount for startups founded by veterans in Japan?\n\n**Context**:\n- `company` table with columns (`id`, `name`, `country`, `founding_date`, `founder_veteran`)\n- `funding` table (not shown, but assumed to have a column `funding_amount` and an `id` or `company_id` linking it to the `company` table)\n\n**SQL Query**:\n```sql\nSELECT SUM(funding_amount) AS total_funding FROM funding\nINNER JOIN company ON funding.company_id = company.id\nWHERE company.country = 'Japan' AND",
    sql="SELECT SUM(funding.funding_amount) AS total_funding \nFROM funding \nJOIN company ON funding.company_id = company.id \nWHERE company.country = 'Japan' AND company.founder_veteran = TRUE;"
), 0), (Example({'sql_prompt': 'Delete vessels that have not been inspected in the last 12 months', 'sql_context': "CREATE TABLE vessel_inspection (vessel_id INT, inspection_date DATE); INSERT INTO vessel_inspection (vessel_id, inspection_date) VALUES (1, '2020-01-01'), (2, '2021-06-15'), (3, '2019-12-20');", 'sql': 'DELETE FROM vessel_inspection WHERE vessel_id IN (SELECT vessel_id FROM vessel_inspection WHERE inspection_date < DATE_SUB(CURDATE(), INTERVAL 12 MONTH));'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Delete vessels that have not been inspected in the last 12 months:\n\nStep 1: Identify the current date. This is necessary for calculating if a vessel has been inspected within the last 12 months.\n\nStep 2: Calculate the date 12 months ago from the current date. This will be used to filter out vessels that have not been inspected in the last year.\n\nStep 3: Join the `vessel_inspection` table with a subquery or a derived table that contains today's date and the calculated date 12 months ago.\n\nStep 4: Filter out rows where the inspection_date is less than (or equal to) the date 12 months ago. This will give us vessels that have not been",
    sql='DELETE FROM vessel_inspection WHERE inspection_date <= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR);'
), 1), (Example({'sql_prompt': "Which materials in the 'inventory' table have a quantity of at least 100 and are not used in the production of any product in the 'products' table?", 'sql_context': "CREATE TABLE inventory(id INT, material VARCHAR(255), quantity INT); CREATE TABLE products(id INT, material VARCHAR(255), quantity INT); INSERT INTO inventory(id, material, quantity) VALUES (1, 'organic cotton', 75), (2, 'conventional cotton', 100), (3, 'organic cotton', 30), (4, 'hemp', 60); INSERT INTO products(id, material, quantity) VALUES (1, 'organic cotton', 150), (2, 'conventional cotton', 200), (3, 'hemp', 100);", 'sql': 'SELECT material FROM inventory i WHERE quantity >= 100 AND NOT EXISTS (SELECT * FROM products p WHERE i.material = p.material);'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Solve the SQL query for this prompt. \n\nFirstly, we need to find materials that have a quantity of at least 100 in the inventory table. This can be done using an `INNER JOIN` clause between the `inventory` and `products` tables on the `material` column.\n\nSecondly, we want to exclude any materials that are used in the production of any product (i.e., those with a non-zero quantity in the products table). To do this, we can use a WHERE clause to filter out rows where the `quantity` is greater than 0. \n\nFinally, we select only the `material` column from the `inventory` table.\n\nHere's how you would write that SQL query:\n\n```sql",
    sql='SELECT inventory.material \nFROM inventory \nINNER JOIN products ON inventory.material = products.material \nWHERE inventory.quantity >= 100 AND products.quantity IS NULL;\n\n```'
), 0), (Example({'sql_prompt': "What is the minimum billing amount for cases in the region 'South'?", 'sql_context': 'CREATE TABLE cases (case_id INT, region TEXT, billing_amount INT);', 'sql': "SELECT MIN(billing_amount) FROM cases WHERE region = 'South';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="1. **Identify the SQL Query**: The prompt asks for the minimum billing amount for cases in the region 'South'. This means we need to select the `billing_amount` column from the `cases` table and find its minimum value, but only for rows where the `region` is 'South'.\n\n2. **Write the SQL Query**:\n   - Use the `SELECT` statement to specify that we want to retrieve the `billing_amount`.\n   - Include a `FROM` clause to indicate which table (`cases`) we are querying.\n   - Add a `WHERE` clause to filter rows where the `region` is 'South'.\n   - Finally, use an `ORDER BY` clause with `ASC` (ascending) to ensure",
    sql="SELECT MIN(billing_amount) FROM cases WHERE region = 'South';"
), 1), (Example({'sql_prompt': 'What is the total number of postpaid and prepaid mobile subscribers in each region?', 'sql_context': "CREATE TABLE mobile_subscribers (subscriber_id INT, subscriber_type VARCHAR(10), region VARCHAR(20)); INSERT INTO mobile_subscribers (subscriber_id, subscriber_type, region) VALUES (1, 'postpaid', 'West'), (2, 'prepaid', 'East'), (3, 'postpaid', 'North'), (4, 'prepaid', 'South'), (5, 'postpaid', 'East');", 'sql': 'SELECT region, COUNT(*) as total_subscribers FROM mobile_subscribers GROUP BY region;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="1. **Total number of postpaid and prepaid mobile subscribers in each region**\n\nTo find the total number of postpaid and prepaid mobile subscribers in each region, we can use a combination of `GROUP BY` clause and aggregation functions like `COUNT()`.\n\n**SQL Query:**\n```sql\nSELECT \n    region,\n    SUM(CASE WHEN subscriber_type = 'postpaid' THEN 1 ELSE 0 END) AS total_postpaid_subscribers,\n    SUM(CASE WHEN subscriber_type = 'prepaid' THEN 1 ELSE 0 END) AS total_prepaid_subscribers\nFROM mobile_subscribers\nGROUP BY region;\n```\n\nThis query will return a result set with each region and the corresponding counts of postpaid and prepaid subscribers.",
    sql="```sql\nSELECT region, \n       SUM(CASE WHEN subscriber_type = 'postpaid' THEN 1 ELSE 0 END) AS total_postpaid_subscribers,\n       SUM(CASE WHEN subscriber_type = 'prepaid' THEN 1 ELSE 0 END) AS total_prepaid_subscribers\nFROM mobile_subscribers\nGROUP BY region;\n```"
), 1), (Example({'sql_prompt': 'Identify the top 3 mining companies with the highest total production of Praseodymium in 2021 and their respective production amounts.', 'sql_context': "CREATE TABLE Company (Name TEXT, Location TEXT, Established INT); INSERT INTO Company (Name, Location, Established) VALUES ('Delta Minerals', 'Brazil', 2000), ('Epsilon Ore', 'South Africa', 2010), ('Zeta Extraction', 'Canada', 2005), ('Eta Mines', 'Russia', 2008); CREATE TABLE ProductionCompany (Year INT, Company TEXT, Element TEXT, Quantity INT); INSERT INTO ProductionCompany (Year, Company, Element, Quantity) VALUES (2021, 'Delta Minerals', 'Praseodymium', 1000), (2021, 'Epsilon Ore', 'Praseodymium', 1400), (2021, 'Zeta Extraction', 'Praseodymium', 1800), (2021, 'Eta Mines', 'Praseodymium', 1100);", 'sql': "SELECT Company, SUM(Quantity) FROM ProductionCompany WHERE Element = 'Praseodymium' AND Year = 2021 GROUP BY Company ORDER BY SUM(Quantity) DESC FETCH FIRST 3 ROWS ONLY;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Solve the SQL prompts:\n\n### Prompt 1: Retrieve Data on Wells with High Daily Production Rate\n\n**SQL Query:**\n```sql\nSELECT *\nFROM wells\nWHERE daily_production > 50;\n```\n\n- **Explanation:** This query selects all records from a table named `wells` where the `daily_production` is greater than 50. It's assuming that there's a column in the `wells` table called `daily_production` which holds the production rate of each well.\n\n### Prompt 2: Insert New Clinical Trial for DrugE\n\n**SQL Query:**\n```sql\nINSERT INTO clinical_trials (trial_id, drug_name, year, country)\nVALUES (5, 'DrugE', 20",
    sql="SELECT * FROM clinical_trials WHERE drug_name = 'DrugE' AND year = 20; --- \n\n### Prompt 3: Update Safety Records for Vessel with ID 401 **SQL Query:** ```sql UPDATE safety_records SET resolution = 'Resolved' WHERE vessel_id = 401; --- \n\n### Prompt 4: Find Top 3 Mining Companies by Total Praseodymium Production in 2021\n\n**SQL Query:** \n```sql\nSELECT Company.Name, SUM(ProductionCompany.Quantity) as total_production\nFROM Company\nJOIN ProductionCompany ON Company.Name = ProductionCompany.Company\nWHERE ProductionCompany.Element = 'Praseodymium' AND ProductionCompany.Year = 2021\nGROUP BY"
), 1), (Example({'sql_prompt': 'How many volunteer hours were recorded for each program in Q2 2021?', 'sql_context': "CREATE TABLE VolunteerHours (VolunteerID INT, ProgramID INT, Hours DECIMAL(5,2), HourDate DATE); INSERT INTO VolunteerHours (VolunteerID, ProgramID, Hours, HourDate) VALUES (1, 1, 5, '2021-04-15'), (2, 2, 3, '2021-06-02'), (1, 1, 4, '2021-05-31'), (3, 3, 2, '2021-04-01'); CREATE TABLE Programs (ProgramID INT, ProgramName TEXT); INSERT INTO Programs (ProgramID, ProgramName) VALUES (1, 'Arts & Culture'), (2, 'Health & Wellness'), (3, 'Environment');", 'sql': "SELECT ProgramID, SUM(Hours) as TotalHours FROM VolunteerHours WHERE HourDate BETWEEN '2021-04-01' AND '2021-06-30' GROUP BY ProgramID;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To answer the SQL prompt "How many volunteer hours were recorded for each program in Q2 2021?", we need to follow these steps:\n\n1. **Filter Data**: First, we need to filter the data from `VolunteerHours` table where the `HourDate` is within the second quarter (Q2) of 2021.\n\n   - The first day of Q2 2021 was April 1st and the last day was June 30th. So, we need to select rows with `HourDate` between \'2021-04-01\' and \'2021-06-30\'.\n\n2. **Join Tables**: Next, we',
    sql="SELECT Programs.ProgramName, SUM(VolunteerHours.Hours) as TotalVolunteerHours\nFROM VolunteerHours\nJOIN Programs ON VolunteerHours.ProgramID = Programs.ProgramID\nWHERE HourDate BETWEEN '2021-04-01' AND '2021-06-30'\nGROUP BY Programs.ProgramName;"
), 1), (Example({'sql_prompt': 'What is the maximum production capacity of the chemical manufacturing plants located in Canada?', 'sql_context': "CREATE TABLE chemical_plants (id INT, plant_name VARCHAR(100), country VARCHAR(50), production_capacity INT); INSERT INTO chemical_plants (id, plant_name, country, production_capacity) VALUES (1, 'Canada Plant 1', 'Canada', 5000), (2, 'Canada Plant 2', 'Canada', 7000);", 'sql': "SELECT MAX(production_capacity) FROM chemical_plants WHERE country = 'Canada';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the maximum production capacity of chemical manufacturing plants located in Canada, we can use a SQL query that filters for plants in Canada and then selects the highest `production_capacity` value. Here is how you could write this query:\n\n```sql\nSELECT MAX(production_capacity) AS max_production_capacity \nFROM chemical_plants \nWHERE country = 'Canada';\n```\n\nThis query does the following:\n1. Uses the `MAX()` function to find the maximum value of the `production_capacity` column.\n2. Selects rows from the `chemical_plants` table where the `country` column is equal to 'Canada'.\n3. Returns the highest production capacity found for plants in Canada.\n\nThis will give you the maximum production capacity among all chemical manufacturing",
    sql="```sql\nSELECT MAX(production_capacity) AS max_production_capacity FROM chemical_plants WHERE country = 'Canada';\n```"
), 1), (Example({'sql_prompt': 'Who is the oldest artist from the United States?', 'sql_context': "CREATE TABLE artists (id INT, name VARCHAR(255), age INT, country VARCHAR(255)); INSERT INTO artists (id, name, age, country) VALUES (1, 'Bruce Springsteen', 72, 'United States'), (2, 'Beyoncé', 40, 'United States');", 'sql': "SELECT name, MAX(age) FROM artists WHERE country = 'United States';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Find the oldest artist from the United States:\n\n1. **Identify the relevant table**: We need data from the `artists` table.\n   \n2. **Filter by country**: The query should only consider artists who are from the 'United States'.\n   \n3. **Sort by age in descending order**: To find the oldest, we sort the results with the highest (oldest) ages first.\n\n4. **Limit to one row**: Since we're looking for just one artist, we'll limit our result set to 1 row.\n\nThe SQL query that accomplishes this is:\n\n```sql\nSELECT name FROM artists \nWHERE country = 'United States' \nORDER BY age DESC \nLIMIT 1;\n```\n\nThis query first filters the `",
    sql="SELECT name FROM artists WHERE country = 'United States' ORDER BY age DESC LIMIT 1;"
), 1), (Example({'sql_prompt': 'Find the average height of basketball players in the NBA, categorized by their position.', 'sql_context': 'CREATE TABLE nba_players_height (id INT, player_id INT, height_feet INT, height_inches INT); CREATE TABLE nba_players (id INT, name VARCHAR(100), team VARCHAR(50), position VARCHAR(50));', 'sql': 'SELECT position, AVG(height_feet + height_inches / 12) as avg_height FROM nba_players_height JOIN nba_players ON nba_players_height.player_id = nba_players.id GROUP BY position;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="answer the SQL prompts:\n\n### 1. Total Funding for Startups Founded by Veterans in Japan\n\n**Prompt**: What was the total funding amount for startups founded by veterans in Japan?\n\n**Context**:\n- `company` table with columns `id`, `name`, `country`, `founding_date`, and `founder_veteran`.\n- `funding` table (not shown) that links to `company.id`.\n\n**SQL Query**:\n\n```sql\nSELECT SUM(funding_amount)\nFROM funding\nINNER JOIN company ON funding.company_id = company.id\nWHERE company.country = 'Japan' AND company.founder_veteran = TRUE;\n```\n\n### 2. Most Common Mental Health Condition Treated in France\n\n**Prompt",
    sql="SELECT mental_health_condition, COUNT(*) AS condition_count \nFROM treatment_records \nJOIN patients ON treatment_records.patient_id = patients.patient_id \nWHERE patients.country = 'France' \nGROUP BY mental_health_condition \nORDER BY condition_count DESC \nLIMIT 1;"
), 0), (Example({'sql_prompt': 'Identify all suppliers who provide non-GMO ingredients to restaurants with Michelin stars.', 'sql_context': 'CREATE TABLE Suppliers (id INT, name VARCHAR(50), isNonGMO BOOLEAN); CREATE TABLE Restaurants (id INT, name VARCHAR(50), numStars INT); CREATE TABLE Ingredients (supplierId INT, restaurantId INT, isNonGMO BOOLEAN);', 'sql': 'SELECT Suppliers.name FROM Suppliers INNER JOIN Ingredients ON Suppliers.id = Ingredients.supplierId INNER JOIN Restaurants ON Ingredients.restaurantId = Restaurants.id WHERE Restaurants.numStars > 2 AND Ingredients.isNonGMO = TRUE;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='1. **Identify suppliers who provide non-GMO ingredients**:\n   - We need to select suppliers (`Suppliers`) where `isNonGMO` is true.\n\n2. **Find restaurants with Michelin stars**:\n   - Select restaurants (`Restaurants`) where `numStars` is greater than 0, indicating they have at least one star.\n\n3. **Link suppliers and restaurants through ingredients**:\n   - Join the `Suppliers`, `Ingredients`, and `Restaurants` tables on their respective IDs to find connections between suppliers, ingredients, and restaurants.\n   - Ensure that for each supplier-restaurant pair, there is a non-GMO ingredient (`isNonGMO = true`) associated.\n\n4. **Combine all conditions',
    sql='SELECT s.name AS SupplierName FROM Suppliers s\nJOIN Ingredients i ON s.id = i.supplierId\nJOIN Restaurants r ON i.restaurantId = r.id\nWHERE s.isNonGMO = TRUE AND r.numStars > 0;'
), 1), (Example({'sql_prompt': 'How many licenses were issued in each state as of 2022-01-01?', 'sql_context': "CREATE TABLE Licenses (id INT, state TEXT, issued_date DATE); INSERT INTO Licenses (id, state, issued_date) VALUES (1, 'California', '2021-01-01'), (2, 'Oregon', '2021-01-01'), (3, 'Washington', '2021-01-01');", 'sql': "SELECT state, COUNT(*) AS num_licenses FROM Licenses WHERE issued_date <= '2022-01-01' GROUP BY state;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To answer the SQL prompt "How many licenses were issued in each state as of 2022-01-01?", we need to:\n\n1. Select the `state` column from the `Licenses` table.\n2. Filter the records where the `issued_date` is on or before \'2022-01-01\'.\n3. Group the results by `state`.\n4. Count the number of rows for each group.\n\nHere\'s how you can write the SQL query:\n\n```sql\nSELECT state, COUNT(*) as num_licenses\nFROM Licenses\nWHERE issued_date <= \'2022-01-01\'\nGROUP BY state;\n```\n\nThis query will return a result',
    sql="```sql\nSELECT state, COUNT(*) as num_licenses \nFROM Licenses \nWHERE issued_date <= '2022-01-01'\nGROUP BY state;\n```"
), 1), (Example({'sql_prompt': 'What is the number of smart city initiatives implemented in each country?', 'sql_context': "CREATE TABLE smart_city_initiatives (initiative_id INT, country VARCHAR(50), city VARCHAR(100), status VARCHAR(50)); INSERT INTO smart_city_initiatives (initiative_id, country, city, status) VALUES (1, 'France', 'Paris', 'Implemented');", 'sql': "SELECT country, COUNT(*) as implemented_initiatives FROM smart_city_initiatives WHERE status = 'Implemented' GROUP BY country;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="answer the SQL prompts:\n\n### 1. Total Funding for Startups Founded by Veterans in Japan\n\n**Prompt**: What was the total funding amount for startups founded by veterans in Japan?\n\n**Context**:\n- `company` table with columns `id`, `name`, `country`, `founding_date`, and `founder_veteran`.\n- `funding` table (not shown) that links to `company.id`.\n\n**SQL Query**:\n\n```sql\nSELECT SUM(funding_amount)\nFROM funding\nINNER JOIN company ON funding.company_id = company.id\nWHERE company.country = 'Japan' AND company.founder_veteran = TRUE;\n```\n\n### 2. Most Common Mental Health Condition Treated in France\n\n**Prompt",
    sql="SELECT treatment_type, COUNT(*) AS treatment_count \nFROM treatments \nJOIN patients ON patients.patient_id = treatments.patient_id \nWHERE patients.country = 'France' \nGROUP BY treatment_type \nORDER BY treatment_count DESC \nLIMIT 1;"
), 0), (Example({'sql_prompt': "How many tickets were sold for each team's away games in Q2 of 2022?", 'sql_context': "CREATE TABLE teams (id INT, name VARCHAR(255)); INSERT INTO teams (id, name) VALUES (1, 'TeamA'), (2, 'TeamB'), (3, 'TeamC'); CREATE TABLE games (id INT, home_team_id INT, away_team_id INT, home_team_score INT, away_team_score INT, price DECIMAL(5,2), game_date DATE); CREATE VIEW away_games AS SELECT id, away_team_id, price, game_date FROM games;", 'sql': "SELECT t.name, COUNT(*) as tickets_sold FROM away_games h JOIN teams t ON h.away_team_id = t.id WHERE h.game_date BETWEEN '2022-04-01' AND '2022-06-30' GROUP BY t.name;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="1. **Identify the relevant data**: We need information about tickets sold for each team's away games in Q2 of 2022.\n\n2. **Filter by quarter and year**: First, we should filter the `away_games` view to only include games from Q2 (April, May, June) of 2022.\n\n3. **Group by team**: Next, group the results by the away_team_id to count how many tickets were sold for each team's away games.\n\n4. **Execute SQL query**: Using these steps, we can write an SQL query that accomplishes this task.\n\nHere is the SQL query:\n\n```sql\nSELECT \n    away_team_id,\n    COUNT(*) AS total_tickets_sold",
    sql="SELECT away_team_id, COUNT(*) AS total_tickets_sold FROM away_games WHERE game_date BETWEEN '2022-04-01' AND '2022-06-30' GROUP BY away_team_id;"
), 1), (Example({'sql_prompt': 'Show the names of companies that produced any Rare Earth elements in both 2015 and 2020.', 'sql_context': 'CREATE TABLE Producers (ProducerID INT PRIMARY KEY, Name TEXT, ProductionYear INT, RareEarth TEXT, Quantity INT);', 'sql': 'SELECT DISTINCT Name FROM Producers p1 JOIN Producers p2 ON p1.Name = p2.Name WHERE p1.ProductionYear = 2015 AND p2.ProductionYear = 2020;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Solve the SQL query for this prompt. \n\nStep 1: Identify all producers who produced any rare earth elements in both years.\n- We need to find rows where `ProductionYear` is either 2015 or 2020 and `RareEarth` is not null.\n\nStep 2: Filter out duplicates\n- Some companies might have produced different quantities of the same rare earth element in these two years. To avoid duplication, we'll use DISTINCT to ensure each company appears only once in our result set.\n\nStep 3: Combine steps 1 and 2 into a single SQL query.\n- We can achieve this by using an INNER JOIN clause with a WHERE clause that checks for the presence of rare earth elements in both",
    sql='SELECT DISTINCT Name \nFROM Producers \nWHERE ProductionYear IN (2015, 2020) AND RareEarth IS NOT NULL;'
), 1), (Example({'sql_prompt': 'What is the total CO2 emissions of silk production in China?', 'sql_context': 'CREATE TABLE SilkProduction (id INT, country VARCHAR, co2_emissions INT);', 'sql': "SELECT SUM(co2_emissions) FROM SilkProduction WHERE country = 'China';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="1. **Identify the SQL Query**: The prompt asks for the total CO2 emissions of silk production in China. This means we need to sum up the `co2_emissions` column from the `SilkProduction` table where the country is 'China'.\n\n2. **Write the SQL Query**:\n   ```sql\n   SELECT SUM(co2_emissions) AS TotalCO2Emissions FROM SilkProduction WHERE country = 'China';\n   ```\n\n3. **Explain the Query**:\n   - `SUM(co2_emissions)` calculates the total sum of CO2 emissions.\n   - `AS TotalCO2Emissions` renames the resulting column for clarity in the output.\n   - `FROM SilkProduction` specifies the",
    sql="```sql\nSELECT SUM(co2_emissions) AS TotalCO2Emissions FROM SilkProduction WHERE country = 'China';\n```"
), 1), (Example({'sql_prompt': 'What is the total number of AI models developed in North America with an explainability score below 70?', 'sql_context': "CREATE TABLE na_models (model_name TEXT, region TEXT, explainability_score INTEGER); INSERT INTO na_models (model_name, region, explainability_score) VALUES ('Model1', 'North America', 75), ('Model2', 'North America', 65), ('Model3', 'North America', 80);", 'sql': "SELECT SUM(incident_count) FROM na_models WHERE region = 'North America' AND explainability_score < 70;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Solve the SQL query for finding the total number of AI models developed in North America with an explainability score below 70. \n\n1. **Identify the relevant table**: We need data from `na_models` since it contains information about AI models and their regions.\n\n2. **Filter by region**: The condition is that the model must be developed in 'North America'. This can be done using a WHERE clause with `region = 'North America'`.\n\n3. **Filter by explainability score**: We need to find models where the `explainability_score` is below 70, which means we should use another WHERE clause with `explainability_score < 70`.\n\n4. **Count the filtered rows**: To get the",
    sql="SELECT COUNT(*) FROM na_models WHERE region = 'North America' AND explainability_score < 70;"
), 1), (Example({'sql_prompt': 'Which mobile and broadband subscribers have not used their services in the last 30 days?', 'sql_context': "CREATE TABLE mobile_usage (customer_id INT, last_usage DATE); CREATE TABLE broadband_usage (customer_id INT, last_usage DATE); INSERT INTO mobile_usage (customer_id, last_usage) VALUES (1, '2022-01-01'), (2, '2022-02-01'); INSERT INTO broadband_usage (customer_id, last_usage) VALUES (1, '2022-01-15'), (3, '2022-02-10');", 'sql': 'SELECT customer_id FROM mobile_usage WHERE last_usage < NOW() - INTERVAL 30 DAY UNION SELECT customer_id FROM broadband_usage WHERE last_usage < NOW() - INTERVAL 30 DAY;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Solve the SQL query for "Which mobile and broadband subscribers have not used their services in the last 30 days?".\n\n**Step 1:** Identify the current date.\nAssuming we are using a system that can provide the current date, let\'s denote it as `CURRENT_DATE`.\n\n**Step 2:** Calculate the date 30 days ago from the current date.\nWe will subtract 30 days from `CURRENT_DATE` to find out when was the last day of usage for services.\n\n**Step 3:** Compare mobile and broadband usage dates with the calculated date.\nFor each customer, we need to check if their last usage date is before the date that\'s 30 days ago. If it is, then they have',
    sql='SELECT \n    m.customer_id AS mobile_customer_id,\n    b.customer_id AS broadband_customer_id\nFROM \n    mobile_usage m\nJOIN \n    broadband_usage b ON m.customer_id = b.customer_id\nWHERE \n    m.last_usage < DATE_SUB(CURRENT_DATE, INTERVAL 30 DAY) AND\n    b.last_usage < DATE_SUB(CURRENT_DATE, INTERVAL 30 DAY);'
), 0), (Example({'sql_prompt': 'What is the total number of grants given per city?', 'sql_context': 'CREATE TABLE Nonprofits (NonprofitID INT, Name VARCHAR(50), City VARCHAR(50), State VARCHAR(2), Zip VARCHAR(10), MissionStatement TEXT); CREATE TABLE Grants (GrantID INT, DonorID INT, NonprofitID INT, GrantAmount DECIMAL(10,2), Date DATE); CREATE TABLE Donors (DonorID INT, Name VARCHAR(50), City VARCHAR(50), State VARCHAR(2), Zip VARCHAR(10), DonationAmount DECIMAL(10,2));', 'sql': 'SELECT City, COUNT(*) FROM Grants G INNER JOIN Nonprofits N ON G.NonprofitID = N.NonprofitID GROUP BY City;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Understand the SQL query for finding the total number of grants given per city:\n\n### Step 1: Identify the tables involved\n- **Grants**: Contains information about each grant including `GrantID`, `DonorID`, `NonprofitID`, `GrantAmount`, and `Date`.\n- **Nonprofits**: Contains details about non-profit organizations, including `NonprofitID`, `Name`, `City`, `State`, and `Zip`.\n\n### Step 2: Determine the necessary columns\nWe need to find out how many grants each city has received. This means we will be looking at the `Grants` table.\n\n### Step 3: Join tables if needed\nSince we want information about both grants and non-profit organizations, we',
    sql='SELECT COUNT(*) AS TotalGrantsPerCity, N.Name \nFROM Grants G\nJOIN Nonprofits N ON G.NonprofitID = N.NonprofitID\nGROUP BY N.City;'
), 0), (Example({'sql_prompt': 'Show the average soil moisture level for each field in the past week', 'sql_context': 'CREATE TABLE field (id INT, name VARCHAR(255), farm_id INT);CREATE TABLE soil_moisture (id INT, field_id INT, measurement DATE, level INT);', 'sql': 'SELECT field_id, AVG(level) FROM soil_moisture WHERE measurement >= DATEADD(day, -7, GETDATE()) GROUP BY field_id;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="1. **Retrieve the data for each field**: We need to select all fields from our `field` table.\n\n2. **Join with Soil Moisture Data**: Next, we will join this list of fields with the `soil_moisture` table on the `field_id`. This allows us to connect each field with its corresponding soil moisture measurements.\n\n3. **Filter for Past Week's Data**: We need to filter out only those records where the measurement date is within the past week. This can be done by using a WHERE clause that checks if the current date minus 7 days (or some other method of calculating the last week) is less than or equal to the `measurement` date.\n\n4. **Calculate Average Soil Moisture",
    sql="SELECT field.name, AVG(soil_moisture.level) AS average_soil_moisture\nFROM field\nJOIN soil_moisture ON field.id = soil_moisture.field_id\nWHERE soil_moisture.measurement >= CURRENT_DATE - INTERVAL '7 days'\nGROUP BY field.name;"
), 1), (Example({'sql_prompt': 'What is the total number of satellites deployed by SpaceComm in the Middle East?', 'sql_context': 'CREATE TABLE SatelliteDeployment (satellite_id INT, company VARCHAR(255), region VARCHAR(255));', 'sql': "SELECT COUNT(*) FROM SatelliteDeployment WHERE company = 'SpaceComm' AND region = 'Middle East';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="1. **Identify the relevant data**: We need information about satellites deployed by SpaceComm specifically in the Middle East.\n   \n   - The `SatelliteDeployment` table contains details about satellite deployments, including the `satellite_id`, `company`, and `region`.\n   \n2. **Filter for SpaceComm's deployments**: First, we should filter the records to only include those where the company is 'SpaceComm'.\n   \n3. **Filter for Middle East region**: Next, within these filtered records, we need to further narrow down to those that are in the 'Middle East' region.\n   \n4. **Count the total number of satellites**: Finally, once we have identified all relevant deployments, we can count them to get the total number.",
    sql="SELECT COUNT(*) AS total_satellites_deployed FROM SatelliteDeployment WHERE company = 'SpaceComm' AND region = 'Middle East';"
), 1), (Example({'sql_prompt': 'What is the total number of tickets sold for performances with a rating of 5?', 'sql_context': "CREATE TABLE performance (id INT PRIMARY KEY, name VARCHAR(255), date DATE, artist_id INT, rating INT); INSERT INTO performance (id, name, date, artist_id, rating) VALUES (1, 'Dance Recital', '2022-03-01', 1, 5);", 'sql': 'SELECT SUM(t.quantity) as total_tickets_sold FROM performance p INNER JOIN ticket t ON p.id = t.performance_id WHERE p.rating = 5;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Understand the SQL query that would be used to answer this prompt. \n\nThe question asks for the total number of tickets sold for performances with a rating of 5. However, there is no information about ticket sales or any table containing such data within the provided context. Therefore, we cannot directly calculate the total number of tickets sold based on performance ratings alone.\n\nTo proceed, let's assume that there exists another table called `tickets` which contains information about each ticket sale including a foreign key to the `performance` table to link it back to specific performances. The structure might look something like this:\n\n```sql\nCREATE TABLE tickets (\n    id INT PRIMARY KEY,\n    performance_id INT,\n    quantity INT, -- assuming quantity represents the number of tickets",
    sql='SELECT SUM(t.quantity) AS total_tickets_sold FROM tickets t JOIN performance p ON t.performance_id = p.id WHERE p.rating = 5;'
), 0), (Example({'sql_prompt': 'What is the average emergency response time by region for fire incidents?', 'sql_context': 'CREATE TABLE Regions (RegionID INT, RegionName VARCHAR(255)); CREATE TABLE Incidents (IncidentID INT, IncidentType VARCHAR(255), RegionID INT, ResponseTime INT);', 'sql': "SELECT AVG(ResponseTime) as AvgResponseTime, RegionName FROM Incidents i JOIN Regions r ON i.RegionID = r.RegionID WHERE IncidentType = 'Fire' GROUP BY RegionName;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="1. **Identify the relevant data**: We need to find information about emergency response times for fire incidents across different regions.\n\n2. **Join tables if necessary**: Since we have two tables (`Regions` and `Incidents`) that might contain related information, we may need to join them on a common field (in this case, `RegionID`). \n\n3. **Filter the data**: We want to find the average response time by region for fire incidents specifically.\n\n4. **Calculate averages**: Once we have the relevant data, we can calculate the average response time for each region.\n\n5. **Present results**: Finally, we'll present these averages in a way that's easy to understand and interpret.\n\nHere is how you might write this SQL",
    sql="```sql\nSELECT \n    R.RegionName,\n    AVG(I.ResponseTime) AS AverageResponseTime\nFROM \n    Regions R\nJOIN \n    Incidents I ON R.RegionID = I.RegionID\nWHERE \n    I.IncidentType = 'Fire'\nGROUP BY \n    R.RegionName;\n```\n\nThis query first joins the `Regions` and `Incidents` tables on their common `RegionID`. It then filters for incidents of type 'Fire' and calculates the average response time for each region. The results are grouped by region name, providing an easy-to-read summary of average emergency response times by region for fire incidents."
), 1), (Example({'sql_prompt': "What is the average revenue of virtual tours in 'Spain'?", 'sql_context': "CREATE TABLE virtual_tours (id INT, name TEXT, country TEXT, revenue FLOAT); INSERT INTO virtual_tours (id, name, country, revenue) VALUES (1, 'Virtual Barcelona Tour', 'Spain', 2000);", 'sql': "SELECT AVG(revenue) FROM virtual_tours WHERE country = 'Spain';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Understand the SQL query for calculating the average revenue of virtual tours in Spain:\n\n1. **Identify the table**: We need data from the `virtual_tours` table.\n\n2. **Filter the data**: The query should only consider rows where the country is 'Spain'.\n\n3. **Calculate the average**: After filtering, we calculate the average (`AVG`) of the revenue column.\n\n4. **Execute the query**: Putting it all together in SQL code would look like:\n\n```sql\nSELECT AVG(revenue) AS average_revenue \nFROM virtual_tours \nWHERE country = 'Spain';\n```\n\nThis query will return the average revenue for virtual tours conducted in Spain from the `virtual_tours` table.\n\nIf you need to perform",
    sql="```sql\nSELECT AVG(revenue) AS average_revenue \nFROM virtual_tours \nWHERE country = 'Spain';\n```"
), 1), (Example({'sql_prompt': 'What is the total number of students and staff with accommodations in the "disability_services" schema, excluding the "accessibility_parking" type?', 'sql_context': 'CREATE SCHEMA disability_services; CREATE TABLE staff (id INT, name VARCHAR(50), accommodation VARCHAR(50)); CREATE TABLE students (id INT, name VARCHAR(50), accommodation VARCHAR(50));', 'sql': "SELECT COUNT(*) FROM disability_services.staff WHERE accommodation != 'accessibility_parking' UNION SELECT COUNT(*) FROM disability_services.students WHERE accommodation != 'accessibility_parking';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Solve the SQL prompt for each question. Here are the solutions:\n\n### 1. Total Funding Amount for Startups Founded by Veterans in Japan\n\n**SQL Query:**\n```sql\nSELECT SUM(funding_amount) AS total_funding FROM funding INNER JOIN company ON funding.company_id = company.id WHERE company.country = 'Japan' AND company.founder_veteran = TRUE;\n```\n\n### 2. Most Common Mental Health Condition Treated in France\n\n**SQL Query:**\n```sql\nSELECT treatment_type, COUNT(*) AS treatment_count \nFROM treatments JOIN patients ON treatments.patient_id = patients.patient_id \nWHERE patients.country = 'France'\nGROUP BY treatment_type \nORDER BY treatment_count DESC \nLIMIT 1;\n```\n\n###",
    sql="```sql\nSELECT treatment_type, COUNT(*) AS treatment_count \nFROM treatments \nJOIN patients ON treatments.patient_id = patients.patient_id \nWHERE patients.country = 'France' \nGROUP BY treatment_type \nORDER BY treatment_count DESC \nLIMIT 1;\n```"
), 0), (Example({'sql_prompt': 'What is the number of electric trams in service in Istanbul in 2021?', 'sql_context': "CREATE TABLE electric_trams (tram_id INT, service_date DATE, in_service INT); INSERT INTO electric_trams (tram_id, service_date, in_service) VALUES (1, '2021-01-01', 1), (2, '2021-01-02', 1), (3, '2021-01-03', 0);", 'sql': "SELECT COUNT(*) FROM electric_trams WHERE in_service = 1 AND service_date BETWEEN '2021-01-01' AND '2021-12-31';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Understand the SQL query for finding the number of electric trams in service in Istanbul in 2021. \n\nStep 1: Identify the relevant table and column.\nWe need data from the `electric_trams` table, specifically the `in_service` column which indicates whether a tram is in service or not.\n\nStep 2: Filter by date range.\nSince we're interested only in the year 2021, we'll use a WHERE clause to filter rows where the `service_date` is within January 1st and December 31st of that year. \n\nStep 3: Count the number of trams meeting the criteria.\nWe will use the COUNT function on the `in_service` column to count",
    sql="SELECT COUNT(*) as num_in_service FROM electric_trams WHERE service_date BETWEEN '2021-01-01' AND '2021-12-31' AND in_service = 1;"
), 1), (Example({'sql_prompt': "What is the total number of trips taken on accessible vehicles in the 'East' region for the current year?", 'sql_context': "CREATE TABLE Vehicles (VehicleID int, VehicleType varchar(255), Region varchar(255)); INSERT INTO Vehicles (VehicleID, VehicleType, Region) VALUES (1, 'Bus', 'East'), (2, 'Tram', 'West'), (3, 'Wheelchair Bus', 'South'), (4, 'Accessible Tram', 'East'); CREATE TABLE Trips (TripID int, VehicleID int, TripDateTime datetime);", 'sql': "SELECT COUNT(*) FROM Vehicles JOIN Trips ON Vehicles.VehicleID = Trips.VehicleID WHERE Vehicles.Region = 'East' AND Vehicles.VehicleType IN ('Wheelchair Bus', 'Accessible Tram') AND YEAR(Trips.TripDateTime) = YEAR(GETDATE());"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="1. **Identify Accessible Vehicles**: First, we need to identify the accessible vehicles that are located in the 'East' region. This can be done using a `JOIN` clause between the `Vehicles` and `Trips` tables on the `VehicleID`, followed by a WHERE clause to filter for vehicles of type 'Accessible Bus' or 'Accessible Tram', and also for those located in the 'East' region.\n\n2. **Filter Trips**: Next, we need to select only the trips that were taken using these accessible vehicles. This can be done by adding another `WHERE` clause on the `TripID` column from the `Trips` table.\n\n3. **Count Total Trips**: Finally, we",
    sql="SELECT COUNT(TripID) AS total_trips FROM Vehicles \nJOIN Trips ON Vehicles.VehicleID = Trips.VehicleID \nWHERE VehicleType IN ('Accessible Bus', 'Accessible Tram') AND Region = 'East';"
), 1), (Example({'sql_prompt': 'Identify the suppliers with the highest and lowest sustainability ratings in the supplier_ratings table.', 'sql_context': 'CREATE TABLE supplier_ratings (supplier_id INT, sustainability_rating INT); INSERT INTO supplier_ratings (supplier_id, sustainability_rating) VALUES (100, 95), (101, 60), (102, 90);', 'sql': 'SELECT supplier_id, sustainability_rating FROM (SELECT supplier_id, sustainability_rating, RANK() OVER (ORDER BY sustainability_rating DESC) AS rank, RANK() OVER (ORDER BY sustainability_rating ASC) AS reverse_rank FROM supplier_ratings) WHERE rank = 1 OR reverse_rank = 1;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Identify the suppliers with the highest and lowest sustainability ratings:\n\n**Step 1:** First, we need to select all the supplier IDs from `supplier_ratings` table.\n\n**Step 2:** Then, for each selected supplier ID, we will find their corresponding sustainability rating. \n\n**Step 3:** To get the highest sustainability rating, we'll order the results in descending order and limit our selection to one row (the maximum value).\n\n**Step 4:** Similarly, to get the lowest sustainability rating, we'll order the results in ascending order and again limit our selection to one row (the minimum value).\n\nHere's how you can write this SQL query:\n\n```sql\nSELECT \n    supplier_id,\n    MAX(sustainability_rating) AS highest",
    sql='SELECT supplier_id, MAX(sustainability_rating) AS highest_rating FROM supplier_ratings UNION SELECT supplier_id, MIN(sustainability_rating) AS lowest_rating FROM supplier_ratings;'
), 0), (Example({'sql_prompt': 'What is the total amount of socially responsible loans issued to women in 2021?', 'sql_context': 'CREATE TABLE socially_responsible_lending (id INT PRIMARY KEY, loan_amount DECIMAL(10, 2), borrower_gender TEXT, lending_date DATE);', 'sql': "SELECT SUM(loan_amount) FROM socially_responsible_lending WHERE borrower_gender = 'Female' AND lending_date BETWEEN '2021-01-01' AND '2021-12-31';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Understand the SQL query needed for this prompt:\n\n1. **Identify the relevant table**: The `socially_responsible_lending` table contains information about loans issued.\n2. **Filter by criteria**:\n   - We need loans issued to women, so we filter on `borrower_gender = 'women'`.\n   - We also want loans from 2021, so we filter on `lending_date BETWEEN '2021-01-01' AND '2021-12-31'`.\n3. **Calculate the total amount**: We need to sum up all loan amounts that meet our criteria.\n\nHere's how you can write this SQL query:\n\n```sql\nSELECT SUM(",
    sql="SELECT SUM(loan_amount) AS total_loans FROM socially_responsible_lending WHERE borrower_gender = 'women' AND lending_date BETWEEN '2021-01-01' AND '2021-12-31';"
), 1), (Example({'sql_prompt': 'What is the maximum energy efficiency rating of hydroelectric dams in Canada?', 'sql_context': "CREATE TABLE hydro_dams (id INT, name TEXT, country TEXT, energy_efficiency_rating FLOAT); INSERT INTO hydro_dams (id, name, country, energy_efficiency_rating) VALUES (1, 'Robert-Bourassa', 'Canada', 0.94), (2, 'Churchill Falls', 'Canada', 0.92);", 'sql': "SELECT MAX(energy_efficiency_rating) FROM hydro_dams WHERE country = 'Canada';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To answer the SQL prompt "What is the maximum energy efficiency rating of hydroelectric dams in Canada?", we need to:\n\n1. Identify the table that contains information about hydroelectric dams, which is `hydro_dams`.\n2. Extract the columns related to our query: `id`, `name`, and `energy_efficiency_rating` from the `hydro_dams` table.\n3. Filter the results to only include dams located in Canada (`country = \'Canada\'`).\n4. Use a MAX function to find the highest (maximum) energy efficiency rating among these Canadian hydroelectric dams.\n\nThe SQL query would look like this:\n\n```sql\nSELECT MAX(energy_efficiency_rating)\nFROM hydro_dams\nWHERE country = \'Canada\';\n``',
    sql="```sql\nSELECT MAX(energy_efficiency_rating) AS max_energy_efficiency_rating\nFROM hydro_dams\nWHERE country = 'Canada';\n```"
), 1), (Example({'sql_prompt': 'How many streams did each song by an artist get in a given month?', 'sql_context': "CREATE TABLE Songs (id INT, artist_id INT, title VARCHAR(50)); CREATE TABLE Streams (id INT, song_id INT, date DATE, streams INT); INSERT INTO Songs (id, artist_id, title) VALUES (1, 1, 'Shake it Off'), (2, 1, 'Blank Space'), (3, 2, 'Humble'), (4, 2, 'DNA'); INSERT INTO Streams (id, song_id, date, streams) VALUES (1, 1, '2022-01-01', 1000), (2, 1, '2022-01-02', 1500), (3, 2, '2022-01-01', 2000), (4, 2, '2022-01-02', 2500), (5, 3, '2022-01-01', 3000), (6, 3, '2022-01-02', 3500), (7, 4, '2022-01-01', 4000), (8, 4, '2022-01-02', 4500);", 'sql': "SELECT s.title, SUM(s.streams) as total_streams FROM Songs s JOIN Streams st ON s.id = st.song_id WHERE st.date BETWEEN '2022-01-01' AND '2022-01-31' GROUP BY s.title;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To answer the SQL prompt "How many streams did each song by an artist get in a given month?", we need to:\n\n1. Join the `Songs` and `Streams` tables on their respective IDs.\n2. Group the results by both `title` (song) and `MONTH(date)` to aggregate the stream counts for each song per month.\n3. Order the result set by the total number of streams in descending order.\n\nHere\'s how you can write the SQL query:\n\n```sql\nSELECT \n    s.title AS Song,\n    MONTH(s.date) AS Month,\n    COUNT(st.streams) AS Streams\nFROM \n    Songs s\nJOIN \n    Streams st ON s.id = st.song_id\nWHERE \n    YEAR(s.date',
    sql='```sql\nSELECT s.title AS Song, MONTH(s.date) AS Month, SUM(st.streams) AS TotalStreams\nFROM Songs s\nJOIN Streams st ON s.id = st.song_id\nWHERE YEAR(s.date) = 2022 AND MONTH(s.date) = 1\nGROUP BY s.title, MONTH(s.date)\nORDER BY TotalStreams DESC;\n```\n\nThis query selects the song title (`s.title`), month (`MONTH(s.date)`), and calculates the total number of streams for each song in January 2022. It then groups the results by both `title` and `month`, ensuring that we get a count per song per month, and orders them by the total number of streams in descending order'
), 0), (Example({'sql_prompt': 'What is the total number of security incidents for each department in the organization?', 'sql_context': 'CREATE TABLE incident (incident_id INT, incident_date DATE, incident_description TEXT, department_id INT);CREATE TABLE department (department_id INT, department_name VARCHAR(255));', 'sql': 'SELECT d.department_name, COUNT(i.incident_id) AS incident_count FROM incident i JOIN department d ON i.department_id = d.department_id GROUP BY d.department_name;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='1. **Retrieve all security incidents**: First, we need to select all the records from the `incident` table.\n\n   SQL Query:\n   ```sql\n   SELECT * FROM incident;\n   ```\n\n2. **Join with department table**: Next, we join this result set with the `department` table using the `department_id` column to get the name of each department associated with an incident.\n\n   SQL Query:\n   ```sql\n   SELECT i.incident_id, i.incident_date, i.incident_description, d.department_name \n   FROM incident AS i\n   JOIN department AS d ON i.department_id = d.department_id;\n   ```\n\n3. **Group by department**: We then group the results by `department_name`',
    sql='SELECT d.department_name, COUNT(i.incident_id) as total_incidents \nFROM incident AS i \nJOIN department AS d ON i.department_id = d.department_id \nGROUP BY d.department_name;'
), 1), (Example({'sql_prompt': 'What is the market spend on sustainable tourism initiatives in Japan between 2017 and 2019?', 'sql_context': "CREATE TABLE sustainable_tourism_initiatives(initiative_id INT, name TEXT, country TEXT, start_year INT, end_year INT, market_spend INT);INSERT INTO sustainable_tourism_initiatives (initiative_id, name, country, start_year, end_year, market_spend) VALUES (1, 'Eco-friendly hotels in Tokyo', 'Japan', 2017, 2019, 5000000), (2, 'Sustainable transport in Kyoto', 'Japan', 2018, 2019, 7000000), (3, 'Carbon offsetting in Osaka', 'Japan', 2017, 2018, 3000000);", 'sql': "SELECT SUM(market_spend) FROM sustainable_tourism_initiatives WHERE country = 'Japan' AND start_year BETWEEN 2017 AND 2019;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To answer the SQL prompt about the market spend on sustainable tourism initiatives in Japan between 2017 and 2019, we need to:\n\n1. Select the `market_spend` column from the `sustainable_tourism_initiatives` table.\n2. Filter for rows where the `country` is 'Japan'.\n3. Filter for rows where the `start_year` is between 2017 and 2019, inclusive.\n\nThe SQL query to achieve this would be:\n\n```sql\nSELECT market_spend \nFROM sustainable_tourism_initiatives \nWHERE country = 'Japan' AND start_year BETWEEN 2017 AND 2019;\n```\n\nThis query will",
    sql="SELECT SUM(market_spend) AS total_market_spend FROM sustainable_tourism_initiatives WHERE country = 'Japan' AND start_year BETWEEN 2017 AND 2019;\n\nReasoning:\nTo find the total market spend on sustainable tourism initiatives in Japan between 2017 and 2019, we need to:\n\n1. Select the `market_spend` column from the `sustainable_tourism_initiatives` table.\n2. Filter for rows where the `country` is 'Japan'.\n3. Filter for rows where the `start_year` is between 2017 and 2019, inclusive.\n4. Sum up all the selected market spends to get"
), 1), (Example({'sql_prompt': 'What is the percentage of hotels in Europe that offer virtual tours?', 'sql_context': "CREATE TABLE hotel_features (hotel_id INT, hotel_name TEXT, virtual_tour INT, country TEXT); INSERT INTO hotel_features (hotel_id, hotel_name, virtual_tour, country) VALUES (1, 'Hotel A', 1, 'France'), (2, 'Hotel B', 0, 'Germany'), (3, 'Hotel C', 1, 'Italy'), (4, 'Hotel D', 0, 'France'), (5, 'Hotel E', 1, 'Spain');", 'sql': "SELECT (COUNT(*) FILTER (WHERE virtual_tour = 1) * 100.0 / COUNT(*)) AS percentage FROM hotel_features WHERE country = 'Europe';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Solve the SQL query for finding the percentage of hotels in Europe that offer virtual tours. \n\n**Step 1:** Identify the relevant columns and data.\n- We need `hotel_id`, `hotel_name`, `virtual_tour`, and `country` from the table `hotel_features`.\n\n**Step 2:** Filter the data based on location (Europe).\n- Since we're interested in Europe, we'll filter rows where `country` is either 'France', 'Germany', 'Italy', or 'Spain'.\n\n**Step 3:** Identify hotels that offer virtual tours.\n- We need to select rows where `virtual_tour` equals 1.\n\n**Step 4:** Count the total number of hotels in Europe and the number of hotels offering",
    sql="SELECT \n    COUNT(CASE WHEN country IN ('France', 'Germany', 'Italy', 'Spain') AND virtual_tour = 1 THEN hotel_id END) * 100.0 / COUNT(hotel_id)\nFROM \n    hotel_features\nWHERE \n    country IN ('France', 'Germany', 'Italy', 'Spain');"
), 1), (Example({'sql_prompt': 'What are the ethical AI principles for the technology projects in India?', 'sql_context': "CREATE TABLE EthicalAI (principle_id INT, principle_name VARCHAR(50), project_location VARCHAR(20)); INSERT INTO EthicalAI (principle_id, principle_name, project_location) VALUES (1, 'Fairness', 'India'), (2, 'Accountability', 'India'), (3, 'Transparency', 'India'), (4, 'Data Minimization', 'India'), (5, 'Explainability', 'India'), (6, 'Human Oversight', 'India');", 'sql': "SELECT principle_name FROM EthicalAI WHERE project_location = 'India';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Understand the context and requirements for each SQL prompt:\n\n### 1. Query for wells with high daily production rate\n\n**Prompt**: What is the total funding amount for startups founded by veterans in Japan?\n\n**Context**: \n- `company` table contains information about companies, including their founding date and whether the founder is a veteran.\n- `funding` table links to company IDs and funding amounts.\n\n**SQL Query**:\n```sql\nSELECT SUM(funding_amount) AS total_funding FROM funding INNER JOIN company ON funding.company_id = company.id WHERE company.country = 'Japan' AND company.founder_veteran = TRUE;\n```\n\n### 2. Find the most common mental health condition treated in France\n\n**Prompt**: Insert a",
    sql="SELECT mental_health_condition AS most_common_condition, COUNT(*) AS frequency FROM treatment_records WHERE country = 'France' GROUP BY mental_health_condition ORDER BY frequency DESC LIMIT 1;\n\n### 3. List wells with daily production rate greater than 125 barrels **Prompt**: Find the total number of vessels in the South China sea by category **Context**: - `vessels` table contains information about each vessel, including its location and category. **SQL Query**: ```sql SELECT COUNT(*) AS total_vessels, category FROM vessels WHERE location = 'South China Sea' GROUP BY category; ``` ### 4. Find the ethical AI principles for technology projects in India **Prompt**: What are the ethical AI principles for the technology projects in India"
), 0), (Example({'sql_prompt': 'What is the total mass of all spacecraft manufactured by SpaceX?', 'sql_context': "CREATE TABLE Spacecraft (SpacecraftID INT, SpacecraftName VARCHAR(50), Manufacturer VARCHAR(50), Mass FLOAT); INSERT INTO Spacecraft (SpacecraftID, SpacecraftName, Manufacturer, Mass) VALUES (1, 'SpaceX Dragon', 'SpaceX', 10000), (2, 'Orion', 'Lockheed Martin', 20000), (3, 'Starliner', 'Boeing', 15000);", 'sql': "SELECT SUM(Mass) FROM Spacecraft WHERE Manufacturer = 'SpaceX';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the total mass of all spacecraft manufactured by SpaceX, we need to:\n\n1. Identify the rows where the manufacturer is 'SpaceX'.\n2. Select the `Mass` column from those rows.\n3. Sum up the values of the `Mass` column.\n\nHere's how you can write the SQL query for this:\n\n```sql\nSELECT SUM(Mass) AS TotalMassOfSpacecraftBySpaceX\nFROM Spacecraft\nWHERE Manufacturer = 'SpaceX';\n```\n\nThis query first filters out all spacecraft that are manufactured by SpaceX using the `WHERE Manufacturer = 'SpaceX'` clause. Then, it sums up the `Mass` values of these filtered rows to give you the total mass of all SpaceX-manufactured spacecraft.",
    sql="```sql\nSELECT SUM(Mass) AS TotalMassOfSpacecraftBySpaceX FROM Spacecraft WHERE Manufacturer = 'SpaceX';\n```"
), 1), (Example({'sql_prompt': "What is the total age of 'stone' artifacts in 'american_archaeology'?", 'sql_context': 'CREATE TABLE american_archaeology (id INT, site_name VARCHAR(50), artifact_name VARCHAR(50), age INT, material VARCHAR(20));', 'sql': "SELECT SUM(age) FROM american_archaeology WHERE material = 'stone';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="1. **Identify the relevant table and columns**: We need to look at the `american_archaeology` table which contains information about artifacts found in American archaeology. The key column here is `material`, which should help us filter for 'stone' artifacts, and `age`, which we want to sum up.\n\n2. **Filter by material**: First, we will select rows where the `material` column equals 'stone'.\n\n3. **Summarize ages**: After filtering, we'll use a SUM function on the `age` column to calculate the total age of all stone artifacts found in American archaeology.\n\nThe SQL query would look like this:\n\n```sql\nSELECT SUM(age) AS total_age_of_stone_artifacts",
    sql="```sql\nSELECT SUM(age) AS total_age_of_stone_artifacts \nFROM american_archaeology \nWHERE material = 'stone';\n```"
), 1), (Example({'sql_prompt': 'What is the average hotel price for beachfront hotels in Mexico?', 'sql_context': "CREATE TABLE hotels (hotel_id INT, name TEXT, country TEXT, has_beachfront BOOLEAN, price INT); INSERT INTO hotels (hotel_id, name, country, has_beachfront, price) VALUES (1, 'Beach Palace', 'Mexico', true, 200), (2, 'Green Valley', 'USA', false, 150);", 'sql': "SELECT AVG(price) FROM hotels WHERE has_beachfront = true AND country = 'Mexico';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Solve the SQL prompts:\n\n### Prompt 1: Total Funding for Startups Founded by Veterans in Japan\n\n**Context**: We have a `company` table with columns `id`, `name`, `country`, and `founding_date`. A `founder_veteran` column indicates if the founder is a veteran. There's also a separate `funding` table that links to companies.\n\n**SQL Query**:\n```sql\nSELECT SUM(funding_amount) AS total_funding FROM funding\nINNER JOIN company ON funding.company_id = company.id\nWHERE company.country = 'Japan' AND company.founder_veteran = TRUE;\n```\n\n### Prompt 2: Most Common Mental Health Condition Treated in France\n\n**Context**:",
    sql="SELECT mental_health_condition, COUNT(*) AS condition_count FROM treatment_records JOIN patients ON treatment_records.patient_id = patients.patient_id WHERE patients.country = 'France' GROUP BY mental_health_condition ORDER BY condition_count DESC LIMIT 1;"
), 0), (Example({'sql_prompt': 'List all instructors and number of students they support with accommodations.', 'sql_context': 'CREATE TABLE Instructors (id INT, name VARCHAR(50), title VARCHAR(50));', 'sql': 'SELECT i.name, COUNT(a.student_id) as supported_students FROM Instructors i JOIN Accommodations a ON i.id = a.instructor_id GROUP BY i.name;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='answer the SQL prompt. \n\n1. **Identify the tables**: We need data from two tables - `Instructors` and `StudentAccommodations`. The `Instructors` table contains information about instructors, while the `StudentAccommodations` table likely contains information on students who receive accommodations.\n\n2. **Join Tables**: Since we want to find out which instructors support how many students with accommodations, we need to join these two tables based on a common field. This common field is most likely an `instructor_id` in the `StudentAccommodations` table that corresponds to an `id` in the `Instructors` table.\n\n3. **Count Students**: We want to count how many students each instructor supports',
    sql='SELECT Instructors.name, COUNT(StudentAccommodations.student_id) as num_students\nFROM Instructors\nJOIN StudentAccommodations ON Instructors.id = StudentAccommodations.instructor_id\nGROUP BY Instructors.name;'
), 1), (Example({'sql_prompt': "What is the total fare collected from bus routes that start with the letter 'B'?", 'sql_context': "CREATE TABLE bus_trips (trip_id INT, route_id INT, fare FLOAT); INSERT INTO bus_trips (trip_id, route_id, fare) VALUES (1, 101, 2.5), (2, 202, 3.0), (3, 303, 1.5), (4, 404, 2.0), (5, 505, 2.5), (6, 106, 3.0); CREATE TABLE bus_routes (route_id INT, route_name TEXT, starting_letter TEXT); INSERT INTO bus_routes (route_id, route_name, starting_letter) VALUES (101, 'Broadway', 'B'), (202, 'Park Ave', 'P'), (303, 'Lakeshore', 'L'), (404, 'Sunset Blvd', 'S'), (505, 'Beverly Hills', 'B');", 'sql': "SELECT SUM(bt.fare) FROM bus_trips bt JOIN bus_routes br ON bt.route_id = br.route_id WHERE br.starting_letter = 'B';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="1. **Total Fare Collected from Bus Routes Starting with 'B'**\n\nTo find the total fare collected from bus routes that start with the letter 'B', we need to:\n\n- Join `bus_trips` and `bus_routes` tables on their common column, which is `route_id`.\n- Filter for rows where `starting_letter` in `bus_routes` equals 'B'.\n- Sum up the `fare` values from `bus_trips`.\n\n**SQL Query:**\n```sql\nSELECT SUM(bt.fare) AS total_fare_collected\nFROM bus_trips bt\nJOIN bus_routes br ON bt.route_id = br.route_id\nWHERE br.starting_letter = 'B';\n```\n\n2. **Insert a New",
    sql="INSERT INTO bus_routes (route_id, route_name, starting_letter) VALUES (606, 'Beach St', 'B');"
), 0), (Example({'sql_prompt': 'What is the percentage of total revenue from streaming and concert ticket sales for Pop music in 2018?', 'sql_context': 'CREATE TABLE StreamingRevenue (id INT, year INT, genre VARCHAR(50), revenue FLOAT); CREATE TABLE ConcertTicketSales (id INT, year INT, genre VARCHAR(50), revenue FLOAT);', 'sql': "SELECT (SUM(sr.revenue) + SUM(cts.revenue)) / (SELECT SUM(revenue) FROM (SELECT revenue FROM StreamingRevenue WHERE year = 2018 UNION ALL SELECT revenue FROM ConcertTicketSales WHERE year = 2018) t) FROM StreamingRevenue sr JOIN ConcertTicketSales cts ON sr.genre = cts.genre WHERE sr.year = 2018 AND sr.genre = 'Pop';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Solve the SQL query for each prompt:\n\n### Prompt 1: Total Funding Amount for Startups Founded by Veterans in Japan\n\n**SQL Query:**\n```sql\nSELECT SUM(funding_amount) AS total_funding FROM funding INNER JOIN company ON funding.company_id = company.id WHERE company.country = 'Japan' AND company.founder_veteran = TRUE;\n```\n\n**Reasoning:**\n1. **Join Tables:** First, join the `funding` table with the `company` table on their respective IDs (`company_id`) to link each funding record to its corresponding company.\n2. **Filter Conditions:** Apply conditions to filter for companies in Japan (`company.country = 'Japan'`) and those founded by veterans (`company.founder",
    sql="```sql\nSELECT \n    (SUM(StreamingRevenue.revenue) + SUM(ConcertTicketSales.revenue)) / \n    (SELECT SUM(revenue) FROM StreamingRevenue UNION SELECT SUM(revenue) FROM ConcertTicketSales) * 100 AS percentage_of_total_revenue\nFROM \n    StreamingRevenue, ConcertTicketSales\nWHERE \n    StreamingRevenue.year = 2018 AND StreamingRevenue.genre = 'Pop'\nUNION ALL\nSELECT \n    (SUM(StreamingRevenue.revenue) + SUM(ConcertTicketSales.revenue)) / \n    (SELECT SUM(revenue) FROM StreamingRevenue UNION SELECT SUM(revenue) FROM ConcertTicketSales) * 100 AS percentage_of_total_revenue\nFROM"
), 0), (Example({'sql_prompt': 'What is the total defense spending by countries in Oceania in 2018?', 'sql_context': "CREATE TABLE defense_spending (country VARCHAR(50), continent VARCHAR(50), year INT, amount FLOAT); INSERT INTO defense_spending (country, continent, year, amount) VALUES ('Australia', 'Oceania', 2018, 750.3), ('New Zealand', 'Oceania', 2018, 23.4), ('Papua New Guinea', 'Oceania', 2018, 6.7);", 'sql': "SELECT SUM(amount) FROM defense_spending WHERE continent = 'Oceania' AND year = 2018;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To answer the SQL prompt "What is the total defense spending by countries in Oceania in 2018?", we need to:\n\n1. Identify all rows where `country` is from Oceania and `year` is 2018.\n2. Sum up the `amount` column for these identified rows.\n\nHere\'s how you can write the SQL query:\n\n```sql\nSELECT SUM(amount) AS total_defense_spending\nFROM defense_spending\nWHERE country IN (\'Australia\', \'New Zealand\', \'Papua New Guinea\') AND year = 2018;\n```\n\nThis query first filters out all rows where `country` is either Australia, New Zealand, or Papua New Guinea (the countries',
    sql="```sql\nSELECT SUM(amount) AS total_defense_spending FROM defense_spending WHERE country IN ('Australia', 'New Zealand', 'Papua New Guinea') AND year = 2018;\n```\n\nThis SQL query sums up the `amount` column for all rows where the `country` is either Australia, New Zealand, or Papua New Guinea and the `year` is 2018. The result will be the total defense spending by countries in Oceania in that year."
), 1), (Example({'sql_prompt': 'What is the total number of refugee families supported by each NGO in the last 6 months?', 'sql_context': "CREATE TABLE NGOs (NGOID int, NGOName varchar(50)); INSERT INTO NGOs (NGOID, NGOName) VALUES (1, 'International Rescue Committee'), (2, 'Save the Children'); CREATE TABLE RefugeeSupport (SupportID int, NGOID int, FamilyID int, SupportDate date); INSERT INTO RefugeeSupport (SupportID, NGOID, FamilyID, SupportDate) VALUES (1, 1, 1, '2022-01-01'), (2, 1, 2, '2022-02-01'), (3, 2, 1, '2022-03-01');", 'sql': 'SELECT NGOName, COUNT(DISTINCT FamilyID) as SupportedFamilies FROM NGOs INNER JOIN RefugeeSupport ON NGOs.NGOID = RefugeeSupport.NGOID WHERE SupportDate >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY NGOName;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the total number of refugee families supported by each NGO in the last 6 months, we need to:\n\n1. Identify all the support records within the last 6 months.\n2. Group these records by the NGO ID and count the unique family IDs for each group.\n\nHere's how you can write the SQL query:\n\n```sql\nSELECT \n    NGOs.NGOID,\n    COUNT(DISTINCT RefugeeSupport.FamilyID) AS TotalFamiliesSupported\nFROM \n    NGOs\nJOIN \n    RefugeeSupport ON NGOs.NGOID = RefugeeSupport.NGOID\nWHERE \n    RefugeeSupport.SupportDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)\nGROUP BY \n    NGOs.NGOID;\n```\n\n**Explanation:**",
    sql="```sql\nSELECT NGOs.NGOID, COUNT(DISTINCT RefugeeSupport.FamilyID) AS TotalFamiliesSupported \nFROM NGOs \nJOIN RefugeeSupport ON NGOs.NGOID = RefugeeSupport.NGOID \nWHERE RefugeeSupport.SupportDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) \nGROUP BY NGOs.NGOID;\n```\n\n**Reasoning:**\n\n1. **Join the tables**: We start by joining the `NGOs` table with the `RefugeeSupport` table on the common column `NGOID`. This allows us to match each NGO's ID with the records of families they have supported.\n\n2. **Filter recent support dates**: The `WHERE` clause filters out any support records that are older than"
), 1), (Example({'sql_prompt': "Which regulatory frameworks have been implemented in 'Country1'?", 'sql_context': "CREATE TABLE countries (id INT, name VARCHAR(255)); INSERT INTO countries (id, name) VALUES (1, 'Country1'); CREATE TABLE regulatory_frameworks (id INT, country_id INT, name VARCHAR(255)); INSERT INTO regulatory_frameworks (id, country_id, name) VALUES (1, 1, 'Framework1'); INSERT INTO regulatory_frameworks (id, country_id, name) VALUES (2, 1, 'Framework2'); INSERT INTO regulatory_frameworks (id, country_id, name) VALUES (3, 1, 'Framework3');", 'sql': "SELECT name FROM regulatory_frameworks WHERE country_id = (SELECT id FROM countries WHERE name = 'Country1');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="answer the SQL prompts:\n\n### Prompt 1: Total Funding for Startups Founded by Veterans in Japan\n\n**Context**: We have a `company` table with columns `id`, `name`, `country`, and `founding_date`. A `founder_veteran` column indicates if the founder is a veteran. Additionally, there's a `funding` table that links to companies through `company_id`.\n\n**SQL Query**:\n```sql\nSELECT SUM(funding_amount) AS total_funding FROM funding\nINNER JOIN company ON funding.company_id = company.id\nWHERE company.country = 'Japan' AND company.founder_veteran = 1;\n```\n\n### Prompt 2: New Clinical Trial for DrugE in France",
    sql="SELECT * FROM clinical_trials WHERE drug_name = 'DrugE' AND country = 'France'; --- \n\n### Prompt 3: Average Number of Employees per Company in Germany\n\nSql Context: We have a `company` table with columns `id`, `name`, `country`, and `employees_count`.\n\nSql: SELECT AVG(employees_count) AS avg_employees FROM company WHERE country = 'Germany'; --- \n\n### Prompt 4: Top 5 Countries by Number of Companies Founded in the Last Year\n\nSql Context: We have a `company` table with columns `id`, `name`, `country`, and `founding_year`.\n\nSql: SELECT country, COUNT(*) AS num_companies FROM company WHERE founding_year = YEAR(CURDATE"
), 0), (Example({'sql_prompt': 'What is the percentage of factories in each country that have implemented circular economy practices?', 'sql_context': "CREATE TABLE factory_circle (factory VARCHAR(255), country VARCHAR(255), practice VARCHAR(255)); INSERT INTO factory_circle (factory, country, practice) VALUES ('Factory1', 'Bangladesh', 'yes'), ('Factory2', 'Bangladesh', 'no'), ('Factory3', 'Bangladesh', 'yes'), ('Factory4', 'China', 'yes'), ('Factory5', 'China', 'no'), ('Factory6', 'India', 'no'), ('Factory7', 'India', 'yes'), ('Factory8', 'India', 'yes');", 'sql': "SELECT country, 100.0 * COUNT(*) FILTER (WHERE practice = 'yes') / COUNT(*) AS percentage FROM factory_circle GROUP BY country;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="1. **Calculate the total number of factories for each country**: We need to count the number of factories per country, which will be used as the denominator when calculating percentages.\n\n   SQL Query:\n   ```sql\n   SELECT country, COUNT(factory) AS total_factories\n   FROM factory_circle\n   GROUP BY country;\n   ```\n\n2. **Calculate the number of factories that have implemented circular economy practices for each country**: We need to count the number of factories per country where `practice` is 'yes'.\n\n   SQL Query:\n   ```sql\n   SELECT country, COUNT(factory) AS circle_factories\n   FROM factory_circle\n   WHERE practice = 'yes'\n   GROUP BY country;\n   ```\n\n3. **Calculate the percentage",
    sql="SELECT \n    country,\n    (COUNT(CASE WHEN practice = 'yes' THEN factory END) * 100.0 / COUNT(factory)) AS percentage_of_factories_practicing_circular_economy\nFROM \n    factory_circle\nGROUP BY \n    country;"
), 1)]