[(Example({'sql_prompt': 'Delete records with sales amount over $50,000 in the MilitaryEquipmentSales table', 'sql_context': "CREATE TABLE MilitaryEquipmentSales (id INT, equipment_name VARCHAR(50), sale_amount INT, sale_date DATE); INSERT INTO MilitaryEquipmentSales (id, equipment_name, sale_amount, sale_date) VALUES (1, 'Fighter Jet', 45000, '2021-01-01'), (2, 'Tank', 75000, '2021-02-01');", 'sql': 'DELETE FROM MilitaryEquipmentSales WHERE sale_amount > 50000;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query to delete records with sales amounts over $50,000 from the "MilitaryEquipmentSales" table:\n```sql\nDELETE FROM MilitaryEquipmentSales\nWHERE sale_amount > 50000;\n```\n\nThis query uses the `DELETE` statement to remove rows from the "MilitaryEquipmentSales" table where the "sale_amount" column is greater than $50,000.',
    sql='Here is the SQL query to calculate the total mass of all spacecraft manufactured by SpaceX:\n```sql\nSELECT SUM(Mass) AS TotalMass FROM Spacecraft WHERE Manufacturer = \'SpaceX\';\n```\nThis query calculates the sum of the "Mass" column for all rows in the "Spacecraft" table where the "Manufacturer" is \'SpaceX\', giving you the total mass of SpaceX-manufactured spacecraft.'
), 0), (Example({'sql_prompt': 'What is the average number of visitor reviews for heritage sites in each category?', 'sql_context': "CREATE TABLE HeritageSitesReviews (ID INT, SiteName VARCHAR(100), Category VARCHAR(50), Reviews INT); INSERT INTO HeritageSitesReviews (ID, SiteName, Category, Reviews) VALUES (1, 'Machu Picchu', 'Archaeological', 5000); INSERT INTO HeritageSitesReviews (ID, SiteName, Category, Reviews) VALUES (2, 'Taj Mahal', 'Architectural', 8000);", 'sql': 'SELECT Category, AVG(Reviews) OVER (PARTITION BY Category) AS AvgReviews FROM HeritageSitesReviews;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query to find the average number of visitor reviews for heritage sites in each category:\n```sql\nSELECT Category, AVG(Reviews) AS AverageReviews\nFROM HeritageSitesReviews\nGROUP BY Category;\n```\n\nThis query selects the `Category` column and calculates the average of the `Reviews` column for each category using the `AVG` function. The `GROUP BY` clause groups the results by the `Category` column, so you get the average number of reviews for each heritage site category.',
    sql='Here is the SQL query to find the average number of visitor reviews for heritage sites in each category:\n```sql\nSELECT Category, AVG(Reviews) AS AverageReviews\nFROM HeritageSitesReviews\nGROUP BY Category;\n```\nThis query selects the `Category` column and calculates the average of the `Reviews` column for each category using the `AVG` function. The `GROUP BY` clause groups the results by the `Category` column, so you get the average number of reviews for each heritage site category.'
), 0), (Example({'sql_prompt': 'What is the total revenue from ads targeting users interested in veganism in Q3 2022?', 'sql_context': 'CREATE TABLE ads (id INT, user INT, platform VARCHAR(50), target VARCHAR(50), start_date DATE, end_date DATE, revenue DECIMAL(10, 2));', 'sql': "SELECT SUM(revenue) FROM ads WHERE target = 'veganism' AND platform IN ('Facebook', 'Instagram') AND start_date BETWEEN '2022-07-01' AND '2022-09-30';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query to calculate the total revenue from ads targeting users interested in veganism in Q3 2022:\n```sql\nSELECT SUM(revenue) AS total_revenue\nFROM ads\nWHERE target = \'veganism\'\n  AND start_date BETWEEN \'2022-07-01\' AND \'2022-09-30\';\n```\n\nThis query sums up the revenue from all ads that have "veganism" as their target and whose start date falls within the range of Q3 2022 (from July 1 to September 30). The result will give you the total revenue generated from these ads during that quarter.',
    sql="SELECT SUM(revenue) AS total_revenue FROM ads WHERE target = 'veganism' AND start_date BETWEEN '2022-07-01' AND '2022-09-30';"
), 0), (Example({'sql_prompt': 'What is the minimum duration of workouts for members who joined in 2019, grouped by gender?', 'sql_context': 'CREATE TABLE Workout (WorkoutID INT PRIMARY KEY, MemberID INT, Duration INT, Date DATE); CREATE TABLE Member (MemberID INT PRIMARY KEY, Age INT, Gender VARCHAR(10), MembershipStart DATE);', 'sql': "SELECT Member.Gender, MIN(Workout.Duration) FROM Workout INNER JOIN Member ON Workout.MemberID = Member.MemberID WHERE Member.MembershipStart BETWEEN '2019-01-01' AND '2019-12-31' GROUP BY Member.Gender;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query that answers the prompt:\n```sql\nSELECT m.Gender, MIN(w.Duration) AS MinWorkoutDuration\nFROM Workout w\nJOIN Member m ON w.MemberID = m.MemberID\nWHERE EXTRACT(YEAR FROM m.MembershipStart) = 2019\nGROUP BY m.Gender;\n```\n\nStep by step explanation:\n- The query starts by selecting the `Gender` column from the `Member` table and calculating the minimum `Duration` of workouts from the `Workout` table.\n- The `JOIN` clause is used to combine the `Workout` and `Member` tables based on the `MemberID` column.\n-',
    sql='```sql\nSELECT m.Gender, MIN(w.Duration) AS MinWorkoutDuration\nFROM Workout w\nJOIN Member m ON w.MemberID = m.MemberID\nWHERE EXTRACT(YEAR FROM m.MembershipStart) = 2019\nGROUP BY m.Gender;\n```'
), 0), (Example({'sql_prompt': 'How many employees were hired in each month of 2022?', 'sql_context': "CREATE TABLE Employees (EmployeeID INT, HireDate DATE); INSERT INTO Employees (EmployeeID, HireDate) VALUES (1, '2022-01-15'); INSERT INTO Employees (EmployeeID, HireDate) VALUES (2, '2022-02-01');", 'sql': "SELECT EXTRACT(MONTH FROM HireDate) AS Month, COUNT(*) AS NumberOfHires FROM Employees WHERE HireDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY Month;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query to find out how many employees were hired each month in 2022:\n```sql\nSELECT EXTRACT(MONTH FROM HireDate) AS Month, COUNT(*) AS NumberOfEmployees\nFROM Employees\nWHERE EXTRACT(YEAR FROM HireDate) = 2022\nGROUP BY EXTRACT(MONTH FROM HireDate)\nORDER BY Month;\n```\n\nStep by step explanation:\n1. The `EXTRACT` function is used to get the month and year from the `HireDate` column.\n2. The `COUNT` function counts the number of employees hired each month.\n3. The `WHERE` clause filters the data to only include records from the year',
    sql='Here is the SQL query to find out how many employees were hired each month in 2022:\n```sql\nSELECT EXTRACT(MONTH FROM HireDate) AS Month, COUNT(*) AS NumberOfEmployees\nFROM Employees\nWHERE EXTRACT(YEAR FROM HireDate) = 2022\nGROUP BY EXTRACT(MONTH FROM HireDate)\nORDER BY Month;\n```\n\nStep by step explanation:\n1. The `EXTRACT` function is used to get the month and year from the `HireDate` column.\n2. The `COUNT` function counts the number of employees hired each month.\n3. The `WHERE` clause filters the data to only include records from the year'
), 0), (Example({'sql_prompt': 'What is the maximum quantity of a single organic product delivered in the DELIVERY_RECORDS table?', 'sql_context': 'CREATE TABLE DELIVERY_RECORDS (id INT, supplier_id INT, product_id INT, is_organic BOOLEAN, quantity INT); INSERT INTO DELIVERY_RECORDS (id, supplier_id, product_id, is_organic, quantity) VALUES (1, 1, 1, true, 50), (2, 2, 2, true, 30);', 'sql': 'SELECT MAX(quantity) FROM DELIVERY_RECORDS WHERE is_organic = true;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query to find the maximum quantity of a single organic product in the DELIVERY_RECORDS table:\n```sql\nSELECT MAX(quantity) AS max_quantity\nFROM DELIVERY_RECORDS\nWHERE is_organic = true;\n```\n\nThis query uses the `MAX` function to find the maximum value of the "quantity" column in the "DELIVERY_RECORDS" table where the "is_organic" column is true, indicating that the product is organic. The result will give you the maximum quantity of a single organic product delivered.',
    sql='SELECT MAX(quantity) AS max_quantity FROM DELIVERY_RECORDS WHERE is_organic = true;'
), 0), (Example({'sql_prompt': 'Update the description of a sustainable urbanism initiative in the sustainable_urbanism_initiatives table', 'sql_context': "CREATE TABLE public.sustainable_urbanism_initiatives (id SERIAL PRIMARY KEY, initiative_name VARCHAR(255), initiative_description TEXT, city_name VARCHAR(255), state_name VARCHAR(255)); INSERT INTO public.sustainable_urbanism_initiatives (initiative_name, initiative_description, city_name, state_name) VALUES ('Green City Program', 'Promotes green spaces and sustainable transportation options in urban areas', 'Portland', 'Oregon'), ('EcoDistricts Initiative', 'Encourages sustainable community development in city neighborhoods', 'Vancouver', 'British Columbia');", 'sql': "WITH updated_initiative AS (UPDATE public.sustainable_urbanism_initiatives SET initiative_description = 'Promotes green spaces, sustainable transportation, and energy-efficient buildings in urban areas' WHERE initiative_name = 'Green City Program' RETURNING *) INSERT INTO public.sustainable_urbanism_initiatives (initiative_name, initiative_description, city_name, state_name) SELECT initiative_name, initiative_description, city_name, state_name FROM updated_initiative;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Here is the SQL query to update the description of a sustainable urbanism initiative:\n```sql\nUPDATE public.sustainable_urbanism_initiatives\nSET initiative_description = 'Promotes green spaces, sustainable transportation options, and eco-friendly building practices in urban areas.'\nWHERE initiative_name = 'Green City Program';\n```\n\nThis query updates the `initiative_description` of the record with the initiative name 'Green City Program' to the new description: 'Promotes green spaces, sustainable transportation options, and eco-friendly building practices in urban areas.'.",
    sql="Here is the SQL query to update the description of a sustainable urbanism initiative:\n```sql\nUPDATE public.sustainable_urbanism_initiatives\nSET initiative_description = 'Promotes green spaces, sustainable transportation options, and eco-friendly building practices in urban areas.'\nWHERE initiative_name = 'Green City Program';\n```\nThis query updates the `initiative_description` of the record with the initiative name 'Green City Program' to the new description: 'Promotes green spaces, sustainable transportation options, and eco-friendly building practices in urban areas.'."
), 0), (Example({'sql_prompt': 'Calculate the year-over-year revenue growth for each restaurant.', 'sql_context': "CREATE TABLE restaurants (restaurant_id INT, restaurant_name VARCHAR(50), city VARCHAR(50), state VARCHAR(50), revenue FLOAT, year INT); INSERT INTO restaurants (restaurant_id, restaurant_name, city, state, revenue, year) VALUES (1, 'Restaurant A', 'City A', 'State A', 123456.78, 2021);", 'sql': 'SELECT restaurant_name, (revenue - LAG(revenue) OVER (PARTITION BY restaurant_name ORDER BY year)) / ABS(LAG(revenue) OVER (PARTITION BY restaurant_name ORDER BY year)) as revenue_growth FROM restaurants;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query to calculate the year-over-year revenue growth for each restaurant:\n```sql\nSELECT \n    restaurant_id,\n    restaurant_name,\n    city,\n    state,\n    year,\n    revenue,\n    LAG(revenue) OVER (PARTITION BY restaurant_id ORDER BY year) AS previous_year_revenue,\n    ((revenue - LAG(revenue) OVER (PARTITION BY restaurant_id ORDER BY year)) / LAG(revenue) OVER (PARTITION BY restaurant_id ORDER BY year)) * 100 AS revenue_growth_percentage\nFROM \n    restaurants;\n```\n\nStep-by-step reasoning:\n1. We start by selecting the columns we want to include in our result set: `',
    sql='```sql\nSELECT\n    restaurant_id,\n    restaurant_name,\n    city,\n    state,\n    year,\n    revenue,\n    LAG(revenue) OVER (PARTITION BY restaurant_id ORDER BY year) AS previous_year_revenue,\n    ((revenue - LAG(revenue) OVER (PARTITION BY restaurant_id ORDER BY year)) / LAG(revenue) OVER (PARTITION BY restaurant_id ORDER BY year)) * 100 AS revenue_growth_percentage\nFROM\n    restaurants;\n```'
), 0), (Example({'sql_prompt': 'What is the percentage of users in Canada who have used the hashtag #travel?', 'sql_context': "CREATE TABLE posts (id INT, user_id INT, hashtags TEXT); INSERT INTO posts (id, user_id, hashtags) VALUES (1, 1, '#travel'), (2, 1, '#food'), (3, 2, '#travel'), (4, 3, '#art'), (5, 4, '#music'); CREATE TABLE users (id INT, country VARCHAR(2)); INSERT INTO users (id, country) VALUES (1, 'CA'), (2, 'US'), (3, 'CA'), (4, 'DE');", 'sql': "SELECT 100.0 * COUNT(DISTINCT user_id) / (SELECT COUNT(DISTINCT user_id) FROM posts JOIN users ON posts.user_id = users.id WHERE users.country = 'CA') as percentage_travel FROM posts JOIN users ON posts.user_id = users.id WHERE hashtags LIKE '%#travel%' AND users.country = 'CA';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query to answer the prompt:\n```sql\nSELECT (COUNT(*) / (SELECT COUNT(*) FROM users WHERE country = \'CA\')) * 100 AS percentage\nFROM posts\nWHERE user_id IN (SELECT id FROM users WHERE country = \'CA\') AND hashtags LIKE \'%#travel%\';\n```\n\nThis query calculates the percentage of users in Canada who have used the hashtag "#travel." It does so by first counting the number of posts with the hashtag "#travel" from users in Canada. Then, it divides this count by the total number of users in Canada and multiplies by 100 to get the percentage.',
    sql="SELECT (COUNT(*) / (SELECT COUNT(*) FROM users WHERE country = 'CA')) * 100 AS percentage\nFROM posts\nWHERE user_id IN (SELECT id FROM users WHERE country = 'CA') AND hashtags LIKE '%#travel%';"
), 0), (Example({'sql_prompt': 'What is the total number of points scored by each team in the NBA this season?', 'sql_context': "CREATE TABLE nba_teams (team_name TEXT, points_scored INT); INSERT INTO nba_teams (team_name, points_scored) VALUES ('Cavaliers', 8000), ('Warriors', 8500), ('Celtics', 7500);", 'sql': 'SELECT team_name, SUM(points_scored) FROM nba_teams GROUP BY team_name;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query to find the total number of points scored by each team in the NBA this season:\n```sql\nSELECT team_name, SUM(points_scored) AS total_points FROM nba_teams GROUP BY team_name;\n```\n\nThis query selects the `team_name` and calculates the sum of `points_scored` for each team using the `SUM` function. The `GROUP BY` clause groups the results by `team_name`, so you get the total points scored by each team.',
    sql='Here is the SQL query to find the total number of points scored by each team in the NBA this season:\n```sql\nSELECT team_name, SUM(points_scored) AS total_points\nFROM nba_teams\nGROUP BY team_name;\n```\nThis query selects the `team_name` and calculates the sum of `points_scored` for each team using the `SUM` function. The `GROUP BY` clause groups the results by `team_name`, so you get the total points scored by each team.'
), 0), (Example({'sql_prompt': 'What is the highest number of hat-tricks scored by a player in a single Bundesliga season?', 'sql_context': "CREATE TABLE german_teams (team_id INT, team_name VARCHAR(50)); INSERT INTO german_teams (team_id, team_name) VALUES (1, 'Bayern Munich'), (2, 'Borussia Dortmund'), (3, 'RB Leipzig'); CREATE TABLE german_matches (match_id INT, home_team_id INT, away_team_id INT, home_team_player_hat_tricks INT, away_team_player_hat_tricks INT); INSERT INTO german_matches (match_id, home_team_id, away_team_id, home_team_player_hat_tricks, away_team_player_hat_tricks) VALUES (1, 1, 2, 1, 0), (2, 2, 3, 0, 1), (3, 3, 1, 1, 0);", 'sql': 'SELECT MAX(home_team_player_hat_tricks + away_team_player_hat_tricks) AS max_hat_tricks FROM german_matches;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To answer the question, we need to find the maximum number of hat-tricks scored by a player in a single match from the `german_matches` table. We can then count the occurrences of this maximum value to get the highest number of hat-tricks in a single season. Here's the SQL query:\n```sql\nSELECT home_team_player_hat_tricks, away_team_player_hat_tricks,\n       MAX(home_team_player_hat_tricks + away_team_player_hat_tricks) AS max_hat_tricks\nFROM german_matches\nGROUP BY home_team_player_hat_tricks, away_team_player_hat_tricks;\n```\nThis query",
    sql='SELECT home_team_player_hat_tricks, away_team_player_hat_tricks, MAX(home_team_player_hat_tricks + away_team_player_hat_tricks) AS max_hat_tricks\nFROM german_matches\nGROUP BY home_team_player_hat_tricks, away_team_player_hat_tricks;'
), 0), (Example({'sql_prompt': "What is the average word count for articles published in the 'news' schema, grouped by author?", 'sql_context': "CREATE TABLE news.articles (article_id INT, title VARCHAR(100), author VARCHAR(100), word_count INT); INSERT INTO news.articles (article_id, title, author, word_count) VALUES (1, 'Article 1', 'John Doe', 500), (2, 'Article 2', 'Jane Doe', 600), (3, 'Article 3', 'John Doe', 700);", 'sql': 'SELECT author, AVG(word_count) FROM news.articles GROUP BY author;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Here is the SQL query to find the average word count for articles published in the 'news' schema, grouped by author:\n```sql\nSELECT author, AVG(word_count) AS avg_word_count\nFROM news.articles\nGROUP BY author;\n```\n\nThis query selects the 'author' column and calculates the average of the 'word_count' column for each author using the `AVG` function. The `GROUP BY` clause groups the results by the 'author' column, so you get the average word count for each author.",
    sql='SELECT author, AVG(word_count) AS avg_word_count FROM news.articles GROUP BY author;'
), 0), (Example({'sql_prompt': 'Show the total budget allocation for healthcare services in the top 5 states with the highest budget allocation', 'sql_context': 'CREATE TABLE healthcare_services (service_id INT, state_id INT, budget FLOAT);CREATE TABLE states (state_id INT, state_name TEXT);', 'sql': 'SELECT s.state_name, SUM(hs.budget)  FROM healthcare_services hs INNER JOIN states s ON hs.state_id = s.state_id GROUP BY s.state_name ORDER BY SUM(hs.budget) DESC LIMIT 5;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query to show the total budget allocation for healthcare services in the top 5 states with the highest budget allocation:\n```sql\nWITH RankedStates AS (\n    SELECT s.state_id, s.state_name, hs.budget,\n           RANK() OVER (ORDER BY hs.budget DESC) AS rank\n    FROM states s\n    JOIN healthcare_services hs ON s.state_id = hs.state_id\n)\nSELECT state_id, state_name, budget\nFROM RankedStates\nWHERE rank <= 5;\n```\n\nStep by step explanation:\n1. The query starts with a Common Table Expression (CTE) named `RankedStates`.\n2. The CTE',
    sql='```sql\nWITH RankedStates AS (\n    SELECT s.state_id, s.state_name, hs.budget, RANK() OVER (ORDER BY hs.budget DESC) AS rank\n    FROM states s\n    JOIN healthcare_services hs ON s.state_id = hs.state_id\n)\nSELECT state_id, state_name, budget\nFROM RankedStates\nWHERE rank <= 5;\n```'
), 0), (Example({'sql_prompt': 'Find the total volume of timber sold in 2021', 'sql_context': "CREATE TABLE forests (id INT, name VARCHAR(50), hectares DECIMAL(5,2), year_planted INT, PRIMARY KEY (id)); INSERT INTO forests (id, name, hectares, year_planted) VALUES (1, 'Forest A', 123.45, 1990), (2, 'Forest B', 654.32, 1985); CREATE TABLE timber_sales (id INT, forest_id INT, year INT, volume DECIMAL(10,2), PRIMARY KEY (id)); INSERT INTO timber_sales (id, forest_id, year, volume) VALUES (1, 1, 2021, 120.50), (2, 1, 2022, 150.75), (3, 2, 2021, 450.23), (4, 2, 2022, 520.89);", 'sql': 'SELECT SUM(ts.volume) FROM timber_sales ts INNER JOIN forests f ON ts.forest_id = f.id WHERE ts.year = 2021;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Here is the SQL query to find the total volume of timber sold in 2021:\n```sql\nSELECT SUM(volume) AS total_volume_sold\nFROM timber_sales\nWHERE year = 2021;\n```\n\nThis query calculates the sum of the 'volume' column from the 'timber_sales' table where the 'year' is equal to 2021, giving you the total volume of timber sold in that specific year.",
    sql="Here is the SQL query to find the total volume of timber sold in 2021:\n```sql\nSELECT SUM(volume) AS total_volume_sold\nFROM timber_sales\nWHERE year = 2021;\n```\nThis query calculates the sum of the 'volume' column from the 'timber_sales' table where the 'year' is equal to 2021, giving you the total volume of timber sold in that specific year."
), 0), (Example({'sql_prompt': 'Who are the top 3 suppliers of recycled polyester?', 'sql_context': "CREATE TABLE suppliers (id INT, name VARCHAR(255), material VARCHAR(255)); INSERT INTO suppliers (id, name, material) VALUES (1, 'Supplier A', 'Recycled Polyester'), (2, 'Supplier B', 'Organic Cotton'), (3, 'Supplier C', 'Recycled Polyester'), (4, 'Supplier D', 'Hemp'), (5, 'Supplier E', 'Recycled Polyester');", 'sql': "SELECT name FROM suppliers WHERE material = 'Recycled Polyester' GROUP BY name ORDER BY COUNT(*) DESC LIMIT 3;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query to find the top 3 suppliers of recycled polyester:\n```sql\nSELECT name\nFROM suppliers\nWHERE material = \'Recycled Polyester\'\nORDER BY id\nLIMIT 3;\n```\n\nThis query selects the names of suppliers from the "suppliers" table where the material is \'Recycled Polyester\'. The results are then ordered by supplier ID in ascending order, and the LIMIT 3 clause restricts the output to the top 3 records.',
    sql="SELECT name FROM suppliers WHERE material = 'Recycled Polyester' ORDER BY id LIMIT 3;"
), 0), (Example({'sql_prompt': "How many donors have donated more than $100 in the 'Donations' table?", 'sql_context': "CREATE TABLE Donations (DonorID INT, DonationDate DATE, Amount DECIMAL(10, 2)); INSERT INTO Donations (DonorID, DonationDate, Amount) VALUES (1, '2022-02-01', 120.00), (2, '2022-01-15', 75.00), (3, '2022-03-05', 150.00);", 'sql': 'SELECT COUNT(*) FROM Donations WHERE Amount > 100;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Here is the SQL query to find out how many donors have donated more than $100 in the 'Donations' table:\n```sql\nSELECT COUNT(*) FROM Donations WHERE Amount > 100;\n```\nThis query uses the `COUNT(*)` function to count the number of records in the 'Donations' table where the donation amount is greater than $100. The result will give you the number of donors who have donated more than the specified amount.",
    sql="Here is the SQL query that answers the question you have described:\n```sql\nSELECT COUNT(*) FROM Donations WHERE Amount > 100;\n```\nThis query uses the `COUNT(*)` function to count the number of records in the 'Donations' table where the donation amount is greater than $100. The result will give you the number of donors who have donated more than the specified amount."
), 1), (Example({'sql_prompt': "Update the 'Angkor Wat' excavation to have a start date of 1300-01-01.", 'sql_context': "CREATE TABLE ExcavationSites (SiteID INT PRIMARY KEY, Name VARCHAR(255), Country VARCHAR(255), StartDate DATE, EndDate DATE); INSERT INTO ExcavationSites (SiteID, Name, Country, StartDate, EndDate) VALUES (5, 'Angkor Wat', 'Cambodia', '1860-01-01', '1860-05-01');", 'sql': "UPDATE ExcavationSites SET StartDate = '1300-01-01' WHERE Name = 'Angkor Wat';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Here is the SQL query to update the start date of the 'Angkor Wat' excavation to 1300-01-01:\n```sql\nUPDATE ExcavationSites\nSET StartDate = '1300-01-01'\nWHERE Name = 'Angkor Wat';\n```\nThis query uses the `UPDATE` statement to modify the existing record in the `ExcavationSites` table where the name is 'Angkor Wat'. The `SET` clause specifies that we want to update the `StartDate` column with the new value of '1300-01-01'.",
    sql="Here is the SQL query to update the start date of the 'Angkor Wat' excavation to 1300-01-01:\n```sql\nUPDATE ExcavationSites\nSET StartDate = '1300-01-01'\nWHERE Name = 'Angkor Wat';\n```\nThis query uses the `UPDATE` statement to modify the existing record in the `ExcavationSites` table where the name is 'Angkor Wat'. The `SET` clause specifies that we want to update the `StartDate` column with the new value of '1300-01-01'."
), 1), (Example({'sql_prompt': 'Calculate the total CO2 emissions (in metric tons) per capita for each country in the population_data and carbon_emissions tables.', 'sql_context': 'CREATE TABLE population_data (country VARCHAR(50), year INT, population INT); CREATE TABLE carbon_emissions (country VARCHAR(50), year INT, co2_emissions FLOAT);', 'sql': 'SELECT p.country, AVG(co2_emissions/population*1000000) as co2_emissions_per_capita FROM population_data p JOIN carbon_emissions c ON p.country = c.country GROUP BY p.country;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query that calculates the total CO2 emissions per capita for each country:\n```sql\nSELECT p.country,\n       (ce.co2_emissions / NULLIF(p.population, 0)) AS co2_per_capita\nFROM population_data p\nJOIN carbon_emissions ce ON p.country = ce.country AND p.year = ce.year;\n```\n\nStep-by-step reasoning:\n1. We start by selecting the country name from the `population_data` table as well as calculating the CO2 emissions per capita for each country.\n2. We use the `JOIN` clause to combine the `population_data` and `carbon_',
    sql='Here is the SQL query that calculates the total CO2 emissions per capita for each country:\n```sql\nSELECT p.country,\n       (ce.co2_emissions / NULLIF(p.population, 0)) AS co2_per_capita\nFROM population_data p\nJOIN carbon_emissions ce ON p.country = ce.country AND p.year = ce.year;\n```\n\nStep-by-step reasoning:\n1. We start by selecting the country name from the `population_data` table as well as calculating the CO2 emissions per capita for each country.\n2. We use the `JOIN` clause to combine the `population_data` and `carbon_'
), 0), (Example({'sql_prompt': "How many rural infrastructure projects were completed in '2022' in the 'Asia-Pacific' region?", 'sql_context': "CREATE TABLE rural_infrastructure(id INT, project TEXT, location TEXT, completion_year INT); INSERT INTO rural_infrastructure (id, project, location, completion_year) VALUES (1, 'Rural Road Project', 'Asia-Pacific', 2022);", 'sql': "SELECT COUNT(*) FROM rural_infrastructure WHERE location = 'Asia-Pacific' AND completion_year = 2022;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query to answer the prompt:\n```sql\nSELECT COUNT(*) FROM rural_infrastructure\nWHERE completion_year = 2022 AND location = \'Asia-Pacific\';\n```\nThis query counts the number of records in the "rural_infrastructure" table where the completion year is 2022 and the location is \'Asia-Pacific\'.',
    sql="```sql\nSELECT COUNT(*) FROM rural_infrastructure WHERE completion_year = 2022 AND location = 'Asia-Pacific';\n```"
), 1), (Example({'sql_prompt': "What is the average horsepower of luxury vehicles in the 'GreenCar' database produced after 2017?", 'sql_context': 'CREATE TABLE LuxuryVehicles (Id INT, Make VARCHAR(50), Model VARCHAR(50), Year INT, Horsepower INT);', 'sql': 'SELECT AVG(Horsepower) FROM LuxuryVehicles WHERE Year > 2017;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query to find the average horsepower of luxury vehicles produced after 2017 from the "GreenCar" database:\n```sql\nSELECT AVG(Horsepower) AS AverageHorsepower\nFROM LuxuryVehicles\nWHERE Year > 2017 AND Make = \'LuxuryBrand\';\n```\n\nThis query calculates the average horsepower by filtering the data for luxury vehicles produced after 2017 and then calculating the average of the "Horsepower" column.',
    sql='SELECT AVG(Horsepower) AS AverageHorsepower FROM LuxuryVehicles WHERE Year > 2017;'
), 0), (Example({'sql_prompt': 'What is the maximum response time for emergency calls in the city of Los Angeles?', 'sql_context': 'CREATE TABLE emergency_calls (id INT, city VARCHAR(20), response_time INT);', 'sql': "SELECT MAX(response_time) FROM emergency_calls WHERE city = 'Los Angeles';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Here is the SQL query to find the maximum response time for emergency calls in the city of Los Angeles:\n```sql\nSELECT MAX(response_time) AS max_response_time\nFROM emergency_calls\nWHERE city = 'Los Angeles';\n```\n\nThis query selects the maximum value of the `response_time` column from the `emergency_calls` table where the `city` is 'Los Angeles'. The result will give you the longest response time for emergency calls in that specific city.",
    sql="SELECT MAX(response_time) AS max_response_time FROM emergency_calls WHERE city = 'Los Angeles';"
), 0), (Example({'sql_prompt': 'What is the maximum loan amount for socially responsible loans in the Asia-Pacific region?', 'sql_context': "CREATE TABLE socially_responsible_loans (loan_id INT, region VARCHAR(20), loan_amount DECIMAL(10,2)); INSERT INTO socially_responsible_loans (loan_id, region, loan_amount) VALUES (101, 'Asia-Pacific', 50000), (102, 'Europe', 30000), (103, 'Asia-Pacific', 70000);", 'sql': "SELECT MAX(srl.loan_amount) FROM socially_responsible_loans srl WHERE srl.region = 'Asia-Pacific';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Here is the SQL query to find the maximum loan amount for socially responsible loans in the Asia-Pacific region:\n```sql\nSELECT MAX(loan_amount) AS max_loan_amount\nFROM socially_responsible_loans\nWHERE region = 'Asia-Pacific';\n```\n\nThis query uses the `MAX` function to find the maximum value of the `loan_amount` column in the `socially_responsible_loans` table where the `region` is 'Asia-Pacific'. The result will be a single value representing the highest loan amount offered in that region.",
    sql="SELECT MAX(loan_amount) AS max_loan_amount FROM socially_responsible_loans WHERE region = 'Asia-Pacific';"
), 1), (Example({'sql_prompt': 'What is the maximum number of years a traditional art form has been preserved in each country?', 'sql_context': "CREATE TABLE countries (id INT, name TEXT); INSERT INTO countries (id, name) VALUES (1, 'Nigeria'), (2, 'Brazil'); CREATE TABLE art_forms (id INT, country_id INT, name TEXT, year_preserved INT); INSERT INTO art_forms (id, country_id, name, year_preserved) VALUES (1, 1, 'Tie-dye', 500), (2, 1, 'Batik', 1000), (3, 2, 'Capoeira', 400);", 'sql': 'SELECT c.name, MAX(af.year_preserved) FROM countries c JOIN art_forms af ON c.id = af.country_id GROUP BY c.id;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query that answers the prompt:\n```sql\nSELECT country_id, MAX(year_preserved) AS max_years_preserved\nFROM art_forms\nGROUP BY country_id;\n```\n\nStep-by-step reasoning:\n1. The query starts with the SELECT statement to retrieve data from the "art_forms" table.\n2. We use the MAX function along with the "year_preserved" column to find the maximum number of years each art form has been preserved.\n3. The GROUP BY clause groups the results by "country_id," so we can get the maximum years preserved for each country.\n4. The result will include two columns: "country_id"',
    sql='SELECT country_id, MAX(year_preserved) AS max_years_preserved FROM art_forms GROUP BY country_id;'
), 0), (Example({'sql_prompt': 'What is the maximum hourly wage for each labor category in the construction industry?', 'sql_context': 'CREATE TABLE labor_statistics (id INT, industry VARCHAR(255), category VARCHAR(255), title VARCHAR(255), hourly_wage DECIMAL(5,2));', 'sql': "SELECT industry, category, MAX(hourly_wage) as max_hourly_wage FROM labor_statistics WHERE industry = 'construction' GROUP BY industry, category;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Here is the SQL query to find the maximum hourly wage for each labor category in the construction industry:\n```sql\nSELECT category, MAX(hourly_wage) AS max_hourly_wage\nFROM labor_statistics\nWHERE industry = 'Construction'\nGROUP BY category;\n```\n\nThis query selects the `category` and calculates the maximum `hourly_wage` for each category in the 'Construction' industry using the `MAX` function. The `GROUP BY` clause groups the results by category, so you get the maximum hourly wage for each labor category in the construction industry.",
    sql="SELECT category, MAX(hourly_wage) AS max_hourly_wage\nFROM labor_statistics\nWHERE industry = 'Construction'\nGROUP BY category;"
), 0), (Example({'sql_prompt': 'List all the drought-impacted counties in Texas in 2018.', 'sql_context': "CREATE TABLE drought_impact(county VARCHAR(20), state VARCHAR(20), year INT, impacted BOOLEAN); INSERT INTO drought_impact(county, state, year, impacted) VALUES ('Harris', 'Texas', 2015, true), ('Harris', 'Texas', 2016, true), ('Harris', 'Texas', 2017, true), ('Harris', 'Texas', 2018, true), ('Bexar', 'Texas', 2015, false), ('Bexar', 'Texas', 2016, false), ('Bexar', 'Texas', 2017, false), ('Bexar', 'Texas', 2018, false);", 'sql': "SELECT county FROM drought_impact WHERE state = 'Texas' AND year = 2018 AND impacted = true;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To list all the drought-impacted counties in Texas for the year 2018, we can use a simple SQL query with a WHERE clause to filter the data based on the state and year. Here's the SQL query:\n```sql\nSELECT county, state, year\nFROM drought_impact\nWHERE state = 'Texas' AND year = 2018 AND impacted = true;\n```\nThis query will return all the counties in Texas that were impacted by drought in the year 2018.",
    sql="SELECT county, state, year \nFROM drought_impact \nWHERE state = 'Texas' AND year = 2018 AND impacted = true;"
), 0), (Example({'sql_prompt': 'Find the top 3 genres with the highest revenue in 2022 for streaming services in the USA.', 'sql_context': "CREATE TABLE streaming_services (service_id INT, service_name VARCHAR(255), revenue DECIMAL(10,2)); INSERT INTO streaming_services (service_id, service_name, revenue) VALUES (1, 'StreamingCo', 5000000.00); CREATE TABLE genre_sales (sale_id INT, service_id INT, genre VARCHAR(255), sales DECIMAL(10,2)); INSERT INTO genre_sales (sale_id, service_id, genre, sales) VALUES (1, 1, 'Rock', 150000.00);", 'sql': "SELECT genre, SUM(sales) as total_sales FROM genre_sales gs JOIN streaming_services s ON gs.service_id = s.service_id WHERE s.service_country = 'USA' AND s.service_year = 2022 GROUP BY genre ORDER BY total_sales DESC LIMIT 3;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Here is the SQL query to find the top 3 genres with the highest revenue in 2022 for streaming services in the USA:\n```sql\nSELECT g.genre, SUM(ss.revenue) AS total_revenue\nFROM genre_sales g\nJOIN streaming_services ss ON g.service_id = ss.service_id\nWHERE EXTRACT(YEAR FROM ss.date_added) = 2022 AND ss.country = 'USA'\nGROUP BY g.genre\nORDER BY total_revenue DESC\nLIMIT 3;\n```\n\nStep-by-step reasoning:\n1. We start by selecting the genre and calculating the sum of revenue for each genre using the `SUM",
    sql="Here is the SQL query to find the top 3 genres with the highest revenue in 2022 for streaming services in the USA:\n```sql\nSELECT g.genre, SUM(ss.revenue) AS total_revenue\nFROM genre_sales g\nJOIN streaming_services ss ON g.service_id = ss.service_id\nWHERE EXTRACT(YEAR FROM ss.date_added) = 2022 AND ss.country = 'USA'\nGROUP BY g.genre\nORDER BY total_revenue DESC\nLIMIT 3;\n```\n\nStep-by-step reasoning:\n1. We start by selecting the genre and calculating the sum of revenue for each genre using the `SUM"
), 0), (Example({'sql_prompt': "List all unique fields from the 'geology' and 'infrastructure' tables.", 'sql_context': 'CREATE TABLE geology (well_id INT, rock_type VARCHAR(50)); CREATE TABLE infrastructure (well_id INT, platform_type VARCHAR(50));', 'sql': "SELECT field FROM (SELECT 'geology' as table_name, column_name as field FROM information_schema.columns WHERE table_name = 'geology' UNION ALL SELECT 'infrastructure' as table_name, column_name as field FROM information_schema.columns WHERE table_name = 'infrastructure') as subquery;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Here is the SQL query that lists all unique fields from the 'geology' and 'infrastructure' tables:\n```sql\nSELECT DISTINCT column_name\nFROM information_schema.columns\nWHERE table_name IN ('geology', 'infrastructure');\n```\n\nStep by step reasoning:\n1. The `information_schema.columns` table is a system table that provides metadata about the columns in your database.\n2. The `SELECT DISTINCT column_name` part selects only the unique column names from the `information_schema.columns` table.\n3. The `WHERE table_name IN ('geology', 'infrastructure')` part filters the results to only include columns from the 'geology' and",
    sql="SELECT DISTINCT column_name FROM information_schema.columns WHERE table_name IN ('geology', 'infrastructure');"
), 0), (Example({'sql_prompt': 'Calculate the percentage of total Europium production for each country.', 'sql_context': 'CREATE TABLE europium_production (country VARCHAR(50), quantity INT);', 'sql': 'SELECT country, quantity * 100.0 / SUM(quantity) OVER (PARTITION BY NULL) AS percentage FROM europium_production;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query to calculate the percentage of total Europium production for each country:\n```sql\nSELECT country, \n       quantity, \n       (quantity / SUM(quantity) OVER ()) * 100 AS percentage\nFROM europium_production;\n```\n\nThis query selects the `country` and `quantity` columns from the `europium_production` table. It then calculates the percentage of total Europium production for each country by dividing the quantity produced by that country by the total quantity produced (using the `SUM(quantity) OVER ()` window function) and multiplying it by 100. The result is a list of countries along with their respective percentages of total Europium production.',
    sql='SELECT country, quantity, (quantity / SUM(quantity) OVER ()) * 100 AS percentage\nFROM europium_production;'
), 0), (Example({'sql_prompt': 'Find the mobile subscribers with consecutive speed drops greater than 25% for the last 3 months, ordered by subscription IDs.', 'sql_context': 'CREATE TABLE mobile_usage_detailed (subscriber_id INT, month INT, speed FLOAT); INSERT INTO mobile_usage_detailed (subscriber_id, month, speed) VALUES (1, 1, 100), (1, 2, 80), (1, 3, 70), (2, 1, 200), (2, 2, 180), (2, 3, 160), (3, 1, 150), (3, 2, 130), (3, 3, 110);', 'sql': 'SELECT subscriber_id, speed, month FROM (SELECT subscriber_id, speed, month, LAG(speed, 1) OVER (PARTITION BY subscriber_id ORDER BY month) as prev_speed, LAG(speed, 2) OVER (PARTITION BY subscriber_id ORDER BY month) as prev_prev_speed FROM mobile_usage_detailed) t WHERE t.speed < 0.75 * t.prev_speed AND t.speed < 0.75 * t.prev_prev_speed ORDER BY subscriber_id;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Here is the SQL query to find the mobile subscribers with consecutive speed drops greater than 25% for the last 3 months, ordered by subscription IDs:\n```sql\nSELECT subscriber_id, month\nFROM (\n    SELECT subscriber_id, month,\n           speed / LAG(speed, 1) AS speed_drop_percentage\n    FROM mobile_usage_detailed\n) AS speed_drops\nWHERE speed_drop_percentage > 0.25\nORDER BY subscriber_id, month;\n```\n\nStep-by-step reasoning:\n\n1. The inner subquery calculates the speed drop percentage by dividing the current month's speed by the previous month's speed for each subscriber and month using the `LAG`",
    sql="Here is the SQL query to find the mobile subscribers with consecutive speed drops greater than 25% for the last 3 months, ordered by subscription IDs:\n```sql\nSELECT subscriber_id, month\nFROM (\n    SELECT subscriber_id, month, speed / LAG(speed, 1) AS speed_drop_percentage\n    FROM mobile_usage_detailed\n) AS speed_drops\nWHERE speed_drop_percentage > 0.25\nORDER BY subscriber_id, month;\n```\nStep-by-step reasoning: \n1. The inner subquery calculates the speed drop percentage by dividing the current month's speed by the previous month's speed for each subscriber and month using the `LAG` window function"
), 0), (Example({'sql_prompt': 'What is the distribution of AI safety research topics by year?', 'sql_context': "CREATE TABLE if not exists ai_safety_research (year INT, topic VARCHAR(255)); INSERT INTO ai_safety_research (year, topic) VALUES (2018, 'Explainable AI'), (2019, 'Algorithmic fairness'), (2020, 'AI safety'), (2021, 'Robust AI'), (2022, 'AI ethics');", 'sql': 'SELECT year, topic, COUNT(*) OVER (PARTITION BY year) as research_count FROM ai_safety_research ORDER BY year;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query to answer the prompt:\n```sql\nSELECT year, COUNT(*) AS topic_count\nFROM ai_safety_research\nGROUP BY year\nORDER BY year;\n```\n\nThis query selects the year and counts the number of research topics for each year from the "ai_safety_research" table. It then groups the results by year and orders them in ascending order to show the distribution of AI safety research topics over time.',
    sql='Here is the SQL query to answer the prompt:\n```sql\nSELECT year, COUNT(*) AS topic_count\nFROM ai_safety_research\nGROUP BY year\nORDER BY year;\n```\nThis query selects the "year" and counts the number of research topics for each year from the "ai_safety_research" table. It then groups the results by "year" and orders them in ascending order to show the distribution of AI safety research topics over time.'
), 0), (Example({'sql_prompt': "How many forest management practices are recorded in the 'tropical_forests'?", 'sql_context': "CREATE TABLE forest_management (id INT, forest_type VARCHAR(50), practice_count INT); INSERT INTO forest_management (id, forest_type, practice_count) VALUES (1, 'Tropical Forests', 45); INSERT INTO forest_management (id, forest_type, practice_count) VALUES (2, 'Temperate Forests', 34);", 'sql': "SELECT practice_count FROM forest_management WHERE forest_type = 'Tropical Forests';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='The SQL query that answers the question "How many forest management practices are recorded in the \'tropical_forests\'?" is as follows:\n```sql\nSELECT practice_count FROM forest_management WHERE forest_type = \'Tropical Forests\';\n```\n\nThis query retrieves the value of `practice_count` from the `forest_management` table where the `forest_type` is \'Tropical Forests\'. This will give you the number of forest management practices recorded for tropical forests.',
    sql="SELECT practice_count FROM forest_management WHERE forest_type = 'Tropical Forests';"
), 1), (Example({'sql_prompt': 'What is the distribution of lifelong learning course enrollments by age group, in total?', 'sql_context': 'CREATE TABLE lifelong_learning (student_id INT, age_group VARCHAR(255), course_id INT); CREATE TABLE courses (course_id INT, course_name VARCHAR(255));', 'sql': 'SELECT l.age_group, COUNT(l.course_id) FROM lifelong_learning l INNER JOIN courses c ON l.course_id = c.course_id GROUP BY l.age_group;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query that addresses the prompt:\n```sql\nSELECT age_group, COUNT(*) AS total_enrollments\nFROM lifelong_learning ll\nJOIN courses c ON ll.course_id = c.course_id\nGROUP BY age_group;\n```\n\nStep-by-step reasoning:\n1. We start by selecting the `age_group` column from the `lifelong_learning` table, which represents the age groups of students enrolled in lifelong learning courses.\n2. We use the `COUNT(*)` function to count the number of enrollments for each age group. This will give us the total number of enrollments for each age group.\n3. We then perform an inner',
    sql='```sql\nSELECT age_group, COUNT(*) AS total_enrollments\nFROM lifelong_learning ll\nJOIN courses c ON ll.course_id = c.course_id\nGROUP BY age_group;\n```'
), 0), (Example({'sql_prompt': "Insert new records into the Employee table with the following data: EmployeeID 3, FirstName 'Mike', LastName 'Smith', Department 'Environment'.", 'sql_context': 'CREATE TABLE Employee (EmployeeID INT, FirstName VARCHAR(50), LastName VARCHAR(50), Department VARCHAR(50));', 'sql': "INSERT INTO Employee (EmployeeID, FirstName, LastName, Department) VALUES (3, 'Mike', 'Smith', 'Environment');"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query to insert new records into the "Employee" table with the given data:\n```sql\nINSERT INTO Employee (EmployeeID, FirstName, LastName, Department)\nVALUES (3, \'Mike\', \'Smith\', \'Environment\');\n```\nThis SQL statement inserts a new record into the "Employee" table with the specified values. The "EmployeeID" is set to 3, the "FirstName" is \'Mike\', the "LastName" is \'Smith\', and the "Department" is \'Environment\'.',
    sql='Here is the SQL query to calculate the total mass of all spacecraft manufactured by SpaceX:\n```sql\nSELECT SUM(Mass) AS TotalMass\nFROM Spacecraft\nWHERE Manufacturer = \'SpaceX\';\n```\nThis query sums up the "Mass" values for all rows where the "Manufacturer" is \'SpaceX\' and assigns the result an alias "TotalMass". The output will be a single value representing the total mass of SpaceX spacecraft.'
), 0), (Example({'sql_prompt': 'Which cosmetic brands have the highest average customer rating?', 'sql_context': "CREATE TABLE brand (id INT, name VARCHAR(255), avg_rating FLOAT); CREATE TABLE rating (brand_id INT, rating FLOAT); INSERT INTO brand (id, name, avg_rating) VALUES (1, 'Lush', 4.2), (2, 'The Body Shop', 4.1), (3, 'Sephora', 4.3); INSERT INTO rating (brand_id, rating) VALUES (1, 4.5), (1, 4.0), (2, 4.1), (2, 4.2), (3, 4.4), (3, 4.3);", 'sql': 'SELECT b.name, AVG(r.rating) as avg_rating FROM brand b JOIN rating r ON b.id = r.brand_id GROUP BY b.name ORDER BY avg_rating DESC;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query to find the cosmetic brands with the highest average customer rating:\n```sql\nSELECT b.name, AVG(r.rating) AS avg_rating\nFROM brand b\nJOIN rating r ON b.id = r.brand_id\nGROUP BY b.id, b.name\nORDER BY avg_rating DESC;\n```\n\nStep by step reasoning:\n1. We start by selecting the brand name (`b.name`) and calculating the average rating (`AVG(r.rating)`) from the `brand` table (`b`) and joining it with the `rating` table (`r`) on the brand ID (`b.id = r.brand_id`).\n2. We use',
    sql='SELECT b.name, AVG(r.rating) AS avg_rating FROM brand b JOIN rating r ON b.id = r.brand_id GROUP BY b.id, b.name ORDER BY avg_rating DESC;'
), 0), (Example({'sql_prompt': 'How many unique volunteers worked on projects in each cause area?', 'sql_context': "CREATE TABLE volunteers (id INT, name VARCHAR(30), cause_area VARCHAR(20)); INSERT INTO volunteers (id, name, cause_area) VALUES (1, 'Bob', 'children'), (2, 'Alice', 'children'), (3, 'Charlie', 'health');", 'sql': 'SELECT cause_area, COUNT(DISTINCT name) FROM volunteers GROUP BY cause_area;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query to find out how many unique volunteers worked on projects in each cause area:\n```sql\nSELECT cause_area, COUNT(DISTINCT id) AS unique_volunteers\nFROM volunteers\nGROUP BY cause_area;\n```\n\nThis query uses the `COUNT(DISTINCT id)` function to count the number of unique volunteer IDs in each cause area, and then groups the results by `cause_area` using the `GROUP BY` clause.',
    sql='SELECT cause_area, COUNT(DISTINCT id) AS unique_volunteers FROM volunteers GROUP BY cause_area;'
), 0), (Example({'sql_prompt': 'Who were the top 3 content creators in terms of likes received on their posts in January 2022?', 'sql_context': "CREATE SCHEMA content; CREATE TABLE creators(creator_id INT, name VARCHAR(255), total_likes INT); INSERT INTO creators (creator_id, name, total_likes) VALUES (1, 'Alice', 5000); INSERT INTO creators (creator_id, name, total_likes) VALUES (2, 'Bob', 7000);", 'sql': 'SELECT name, SUM(total_likes) AS total_likes_january FROM content.creators WHERE MONTH(created_date) = 1 GROUP BY name ORDER BY total_likes_january DESC LIMIT 3;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query to find the top 3 content creators with the most likes received on their posts in January 2022:\n```sql\nSELECT name, SUM(total_likes) AS total_likes_january\nFROM creators\nWHERE EXTRACT(MONTH FROM date_posted) = 1 AND EXTRACT(YEAR FROM date_posted) = 2022\nGROUP BY name\nORDER BY total_likes_january DESC\nLIMIT 3;\n```\n\nStep by step reasoning:\n1. We start by selecting the `name` column from the `creators` table.\n2. We use the `SUM` function to calculate the total likes received by each creator in',
    sql='SELECT name, SUM(total_likes) AS total_likes_january\nFROM creators\nWHERE EXTRACT(MONTH FROM date_posted) = 1 AND EXTRACT(YEAR FROM date_posted) = 2022\nGROUP BY name\nORDER BY total_likes_january DESC\nLIMIT 3;'
), 0), (Example({'sql_prompt': "Update records in the 'Volunteers' table where the volunteer's skill level is 'Beginner' and change it to 'Intermediate'", 'sql_context': 'CREATE TABLE Volunteers (id INT PRIMARY KEY, volunteer_name VARCHAR(255), skill_level VARCHAR(255), last_volunteered DATE);', 'sql': "UPDATE Volunteers SET skill_level = 'Intermediate' WHERE skill_level = 'Beginner';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Here is the SQL query to update records in the 'Volunteers' table where the volunteer's skill level is 'Beginner' and change it to 'Intermediate':\n```sql\nUPDATE Volunteers\nSET skill_level = 'Intermediate'\nWHERE skill_level = 'Beginner';\n```\nThis SQL code updates the 'skill_level' column in the 'Volunteers' table for rows where the 'skill_level' is 'Beginner', changing it to 'Intermediate'.",
    sql="UPDATE Volunteers SET skill_level = 'Intermediate' WHERE skill_level = 'Beginner';"
), 1), (Example({'sql_prompt': 'Identify the number of farmers involved in urban agriculture initiatives in California and New York in 2019.', 'sql_context': "CREATE TABLE Urban_Agriculture (Farmer_ID INT, State VARCHAR(20), Initiative VARCHAR(20), Year INT); INSERT INTO Urban_Agriculture (Farmer_ID, State, Initiative, Year) VALUES (101, 'California', 'Community_Garden', 2019), (102, 'California', 'Rooftop_Farming', 2019), (103, 'New_York', 'Community_Garden', 2019);", 'sql': "SELECT COUNT(DISTINCT Farmer_ID) FROM Urban_Agriculture WHERE State IN ('California', 'New York') AND Year = 2019 AND Initiative IN ('Community_Garden', 'Rooftop_Farming');"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query to answer the prompt:\n```sql\nSELECT COUNT(DISTINCT Farmer_ID) AS NumberOfFarmers\nFROM Urban_Agriculture\nWHERE State IN (\'California\', \'New_York\') AND Year = 2019;\n```\n\nThis query counts the distinct farmer IDs from the "Urban_Agriculture" table where the state is either California or New York and the year is 2019. The result will give you the number of farmers involved in urban agriculture initiatives in those two states for that specific year.',
    sql='Here is the SQL query to answer the prompt:\n```sql\nSELECT COUNT(DISTINCT Farmer_ID) AS NumberOfFarmers\nFROM Urban_Agriculture\nWHERE State IN (\'California\', \'New_York\') AND Year = 2019;\n```\n\nThis query counts the distinct farmer IDs from the "Urban_Agriculture" table where the state is either California or New York and the year is 2019. The result will give you the number of farmers involved in urban agriculture initiatives in those two states for that specific year.'
), 0), (Example({'sql_prompt': "Update the accommodation type for a student with a StudentID of 2 from 'Assistive Listening Devices' to 'Sign Language Interpretation'.", 'sql_context': "CREATE TABLE StudentAccommodations (StudentID INT, StudentName VARCHAR(255), DisabilityType VARCHAR(255), AccommodationType VARCHAR(255), GraduationYear INT); INSERT INTO StudentAccommodations (StudentID, StudentName, DisabilityType, AccommodationType, GraduationYear) VALUES (1, 'John Doe', 'Visual Impairment', 'Sign Language Interpretation', 2018), (2, 'Jane Smith', 'Hearing Impairment', 'Assistive Listening Devices', NULL), (3, 'Michael Johnson', 'Mobility Impairment', 'Assistive Technology', 2019), (4, 'Sara Johnson', 'Physical Disability', 'Mobility Assistance', 2022);", 'sql': "UPDATE StudentAccommodations SET AccommodationType = 'Sign Language Interpretation' WHERE StudentID = 2;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Here is the SQL query to update the accommodation type for a student with StudentID 2 from 'Assistive Listening Devices' to 'Sign Language Interpretation':\n```sql\nUPDATE StudentAccommodations\nSET AccommodationType = 'Sign Language Interpretation'\nWHERE StudentID = 2;\n```\nThis query will update the `AccommodationType` column for the row where `StudentID` is equal to 2, changing it from 'Assistive Listening Devices' to 'Sign Language Interpretation'.",
    sql="Here is the SQL query to update the accommodation type for a student with StudentID 2 from 'Assistive Listening Devices' to 'Sign Language Interpretation':\n```sql\nUPDATE StudentAccommodations\nSET AccommodationType = 'Sign Language Interpretation'\nWHERE StudentID = 2;\n```\nThis query will update the `AccommodationType` column for the row where `StudentID` is equal to 2, changing it from 'Assistive Listening Devices' to 'Sign Language Interpretation'."
), 1), (Example({'sql_prompt': 'What is the minimum square footage of an inclusive housing unit in the city of Miami?', 'sql_context': "CREATE TABLE housing (id INT, city VARCHAR(20), size INT, inclusive BOOLEAN); INSERT INTO housing (id, city, size, inclusive) VALUES (1, 'Miami', 800, TRUE), (2, 'Miami', 1000, FALSE), (3, 'Miami', 1200, TRUE);", 'sql': "SELECT MIN(size) FROM housing WHERE city = 'Miami' AND inclusive = TRUE;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query to find the minimum square footage of an inclusive housing unit in the city of Miami:\n```sql\nSELECT MIN(size) FROM housing WHERE city = \'Miami\' AND inclusive = TRUE;\n```\n\nThe query uses the `MIN` function to find the minimum value of the "size" column for housing units located in Miami that are marked as inclusive. The `WHERE` clause specifies the conditions that the housing units must meet: they must be in Miami and they must be inclusive.',
    sql="SELECT MIN(size) FROM housing WHERE city = 'Miami' AND inclusive = TRUE;"
), 1), (Example({'sql_prompt': 'How many works were exhibited in the year 1950?', 'sql_context': "CREATE TABLE exhibitions (exhibition_id INT PRIMARY KEY, exhibition_name TEXT, year INT, location TEXT);CREATE TABLE exhibits (exhibit_id INT PRIMARY KEY, work_id INT, exhibition_id INT, FOREIGN KEY (work_id) REFERENCES works(work_id), FOREIGN KEY (exhibition_id) REFERENCES exhibitions(exhibition_id));INSERT INTO exhibitions (exhibition_id, exhibition_name, year, location) VALUES (1, 'Documenta', 1950, 'Kassel, Germany'); INSERT INTO exhibits (exhibit_id, work_id, exhibition_id) VALUES (1, 1, 1);", 'sql': 'SELECT COUNT(*) FROM exhibits e JOIN exhibitions ex ON e.exhibition_id = ex.exhibition_id WHERE ex.year = 1950;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To answer the question, we need to count the number of unique exhibition_id values from the exhibits table where the year of the corresponding exhibition record in the exhibitions table is 1950. Here's the SQL query:\n```sql\nSELECT COUNT(DISTINCT e.exhibition_id) AS num_exhibitions\nFROM exhibits e\nJOIN exhibitions ex ON e.exhibition_id = ex.exhibition_id\nWHERE ex.year = 1950;\n```\nThis query joins the exhibits and exhibitions tables on the exhibition_id column and filters for records where the year is 1950. The COUNT(DISTINCT ...) function then counts the number of unique exhibition_ids in",
    sql='SELECT COUNT(DISTINCT e.exhibition_id) AS num_exhibitions FROM exhibits e JOIN exhibitions ex ON e.exhibition_id = ex.exhibition_id WHERE ex.year = 1950;'
), 0), (Example({'sql_prompt': 'What is the total number of articles written by each author in each region?', 'sql_context': "CREATE TABLE authors (id INT, name TEXT); CREATE TABLE regions (id INT, name TEXT); CREATE TABLE articles (id INT, title TEXT, content TEXT, author_id INT, region_id INT); INSERT INTO authors (id, name) VALUES (1, 'John Doe'), (2, 'Jane Smith'); INSERT INTO regions (id, name) VALUES (1, 'North'), (2, 'South'), (3, 'East'), (4, 'West'); INSERT INTO articles (id, title, content, author_id, region_id) VALUES (1, 'Article 1', 'Content 1', 1, 1), (2, 'Article 2', 'Content 2', 2, 2), (3, 'Article 3', 'Content 3', 1, 3), (4, 'Article 4', 'Content 4', 2, 4);", 'sql': 'SELECT authors.name, regions.name, COUNT(articles.id) FROM authors INNER JOIN articles ON authors.id = articles.author_id INNER JOIN regions ON regions.id = articles.region_id GROUP BY authors.name, regions.name;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query that answers the prompt:\n```sql\nSELECT a.name AS author_name, r.name AS region_name, COUNT(a.id) AS article_count\nFROM authors a\nJOIN articles art ON a.id = art.author_id\nJOIN regions r ON art.region_id = r.id\nGROUP BY a.name, r.name;\n```\n\nStep by step reasoning:\n1. We start by selecting the name of the author (`a.name`) and the name of the region (`r.name`) from the `authors` and `regions` tables.\n2. We use JOIN operations to combine the `authors`, `articles`, and `',
    sql='```sql\nSELECT a.name AS author_name, r.name AS region_name, COUNT(a.id) AS article_count\nFROM authors a\nJOIN articles art ON a.id = art.author_id\nJOIN regions r ON art.region_id = r.id\nGROUP BY a.name, r.name;\n```'
), 1), (Example({'sql_prompt': 'How many tunnels in Washington state were constructed after 2010?', 'sql_context': "CREATE TABLE tunnels (id INT, name TEXT, state TEXT, build_year INT); INSERT INTO tunnels (id, name, state, build_year) VALUES (1, 'WA-1 Underpass', 'WA', 2012);", 'sql': "SELECT COUNT(*) FROM tunnels WHERE state = 'WA' AND build_year > 2010;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Here is the SQL query to find out how many tunnels in Washington state were constructed after 2010:\n```sql\nSELECT COUNT(*) FROM tunnels\nWHERE state = 'WA' AND build_year > 2010;\n```\n\nThis query filters the tunnels based on the state being 'WA' (Washington) and the build year being greater than 2010, and then counts the number of records that match these criteria.",
    sql="```sql\nSELECT COUNT(*) FROM tunnels WHERE state = 'WA' AND build_year > 2010;\n```"
), 1), (Example({'sql_prompt': 'List the top 5 models with the highest explainability scores and their development team names.', 'sql_context': 'CREATE TABLE ModelExplainabilityScores (ModelID INT, ExplainabilityScore INT, TeamID INT); CREATE TABLE TeamNames (TeamID INT, TeamName VARCHAR(50));', 'sql': 'SELECT ModelExplainabilityScores.ModelID, MAX(ModelExplainabilityScores.ExplainabilityScore) AS MaxExplainabilityScore, TeamNames.TeamName FROM ModelExplainabilityScores INNER JOIN TeamNames ON ModelExplainabilityScores.TeamID = TeamNames.TeamID GROUP BY ModelExplainabilityScores.TeamID ORDER BY MaxExplainabilityScore DESC, TeamNames.TeamName DESC LIMIT 5;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query to list the top 5 models with the highest explainability scores and their development team names:\n```sql\nSELECT m.ModelID, m.ExplainabilityScore, t.TeamName\nFROM ModelExplainabilityScores m\nJOIN TeamNames t ON m.TeamID = t.TeamID\nORDER BY m.ExplainabilityScore DESC\nLIMIT 5;\n```\n\nStep by step reasoning:\n1. We want to retrieve data from two tables, `ModelExplainabilityScores` (aliased as `m`) and `TeamNames` (aliased as `t`).\n2. We use a `JOIN` operation to combine the rows from both tables based on the common column `Team',
    sql='SELECT m.ModelID, m.ExplainabilityScore, t.TeamName\nFROM ModelExplainabilityScores m\nJOIN TeamNames t ON m.TeamID = t.TeamID\nORDER BY m.ExplainabilityScore DESC\nLIMIT 5;'
), 0), (Example({'sql_prompt': 'How many renewable energy power plants are there in Texas?', 'sql_context': "CREATE TABLE power_plants (state VARCHAR(255), source_type VARCHAR(255), count INT); INSERT INTO power_plants (state, source_type, count) VALUES ('Texas', 'Wind', 45), ('Texas', 'Solar', 25), ('Texas', 'Hydro', 10);", 'sql': "SELECT SUM(count) FROM power_plants WHERE state = 'Texas';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query to answer the question "How many renewable energy power plants are there in Texas?":\n```sql\nSELECT SUM(count) AS total_renewable_plants\nFROM power_plants\nWHERE state = \'Texas\' AND source_type IN (\'Wind\', \'Solar\', \'Hydro\');\n```\n\nThis query sums up the count of power plants in Texas that use renewable energy sources (wind, solar, and hydro) and provides the total number of renewable energy power plants in Texas.',
    sql="SELECT SUM(count) AS total_renewable_plants FROM power_plants WHERE state = 'Texas' AND source_type IN ('Wind', 'Solar', 'Hydro');"
), 0), (Example({'sql_prompt': 'Find the top 5 countries with the lowest financial capability scores in Europe.', 'sql_context': 'CREATE TABLE financial_capability (id INT, country VARCHAR(255), score INT);', 'sql': "SELECT country, score FROM (SELECT country, score, ROW_NUMBER() OVER (ORDER BY score ASC) rn FROM financial_capability WHERE region = 'Europe') t WHERE rn <= 5;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Here is the SQL query to find the top 5 countries with the lowest financial capability scores in Europe:\n```sql\nSELECT country, score\nFROM financial_capability\nWHERE country IN (\n    SELECT name\n    FROM countries\n    WHERE continent = 'Europe'\n)\nORDER BY score ASC\nLIMIT 5;\n```\n\nStep by step explanation:\n1. The subquery `(SELECT name FROM countries WHERE continent = 'Europe')` retrieves the list of country names in Europe.\n2. The main query then selects the `country` and `score` columns from the `financial_capability` table where the `country` is in the list of European countries.\n3. The results are ordered by the `score`",
    sql="SELECT country, score FROM financial_capability WHERE country IN ( SELECT name FROM countries WHERE continent = 'Europe' ) ORDER BY score ASC LIMIT 5;"
), 0), (Example({'sql_prompt': 'What is the correlation between climate change and biodiversity in the Arctic?', 'sql_context': "CREATE TABLE Climate_Change (id INT PRIMARY KEY, year INT, temperature FLOAT, region VARCHAR(50)); CREATE TABLE Biodiversity (id INT, year INT, species_count INT, region VARCHAR(50), climate_id INT, FOREIGN KEY (climate_id) REFERENCES Climate_Change(id)); INSERT INTO Climate_Change (id, year, temperature, region) VALUES (1, 2000, -10.0, 'Arctic'), (2, 2010, -9.5, 'Arctic'); INSERT INTO Biodiversity (id, year, species_count, region, climate_id) VALUES (1, 2000, 100, 'Arctic', 1), (2, 2010, 105, 'Arctic', 2);", 'sql': "SELECT Climate_Change.year, Climate_Change.temperature, Biodiversity.species_count FROM Climate_Change INNER JOIN Biodiversity ON Climate_Change.id = Biodiversity.climate_id WHERE Climate_Change.region = 'Arctic';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To answer the question, we need to find the correlation between the temperature changes in the Arctic region from the 'Climate_Change' table and the corresponding changes in biodiversity (species count) in the same region and time period from the 'Biodiversity' table. We can then analyze if there is a pattern or relationship between these two datasets.\n\nHere's the SQL query to calculate the correlation:\n```sql\nSELECT\n    cc.region,\n    cc.year,\n    cc.temperature,\n    bd.species_count,\n    cc.temperature - bd.species_count AS temperature_vs_species_count\nFROM Climate_Change cc\nJOIN Biodiversity bd ON cc.id = bd.climate_id AND cc.region =",
    sql="```sql\nSELECT\n    cc.region,\n    cc.year,\n    cc.temperature,\n    bd.species_count,\n    cc.temperature - bd.species_count AS temperature_vs_species_count\nFROM Climate_Change cc\nJOIN Biodiversity bd ON cc.id = bd.climate_id AND cc.region = bd.region\nWHERE cc.region = 'Arctic';\n```"
), 0), (Example({'sql_prompt': 'What is the average budget allocated for ethical AI research by country?', 'sql_context': "CREATE TABLE Country (CountryID INT PRIMARY KEY, CountryName VARCHAR(100), Budget DECIMAL(10,2)); INSERT INTO Country (CountryID, CountryName, Budget) VALUES (1, 'USA', 5000000.00), (2, 'Canada', 3000000.00), (3, 'Mexico', 1000000.00);", 'sql': 'SELECT AVG(Budget) as AvgBudget, CountryName FROM Country GROUP BY CountryName;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query to find the average budget allocated for ethical AI research by country:\n```sql\nSELECT CountryName, AVG(Budget) AS AvgBudget\nFROM Country\nGROUP BY CountryName;\n```\nThis query selects the `CountryName` and calculates the average of the `Budget` column for each unique `CountryName` in the `Country` table. The results are grouped by `CountryName`, providing the average budget allocated for ethical AI research by each country.',
    sql='Here is the SQL query to find the average budget allocated for ethical AI research by country:\n```sql\nSELECT CountryName, AVG(Budget) AS AvgBudget\nFROM Country\nGROUP BY CountryName;\n```\nThis query selects the `CountryName` and calculates the average of the `Budget` column for each unique `CountryName` in the `Country` table. The results are grouped by `CountryName`, providing the average budget allocated for ethical AI research by each country.'
), 1), (Example({'sql_prompt': 'What is the total fare collected for each train line?', 'sql_context': "CREATE TABLE train_lines (line_id INT, line_name TEXT); CREATE TABLE fares (fare_id INT, line_id INT, fare DECIMAL); INSERT INTO train_lines VALUES (1, 'Line 1'), (2, 'Line 2'), (3, 'Line 3'); INSERT INTO fares VALUES (1, 1, 3.50), (2, 1, 3.50), (3, 2, 4.25), (4, 3, 5.00), (5, 3, 5.00);", 'sql': 'SELECT train_lines.line_name, SUM(fares.fare) AS total_fare FROM train_lines INNER JOIN fares ON train_lines.line_id = fares.line_id GROUP BY train_lines.line_id;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query to calculate the total fare collected for each train line:\n```sql\nSELECT tl.line_name, SUM(f.fare) AS total_fare\nFROM train_lines tl\nJOIN fares f ON tl.line_id = f.line_id\nGROUP BY tl.line_name;\n```\n\nStep-by-step reasoning:\n1. We start by selecting the `line_name` from the `train_lines` table and calculating the sum of fares for each line.\n2. We use a JOIN operation to combine the `train_lines` table (aliased as `tl`) with the `fares` table (aliased as `f`) on the `',
    sql='```sql\nSELECT tl.line_name, SUM(f.fare) AS total_fare\nFROM train_lines tl\nJOIN fares f ON tl.line_id = f.line_id\nGROUP BY tl.line_name;\n```'
), 0), (Example({'sql_prompt': 'What is the total revenue for cosmetics products that are not cruelty-free?', 'sql_context': 'CREATE TABLE product (product_id INT, name TEXT, price FLOAT, cruelty_free BOOLEAN); CREATE TABLE sales (sale_id INT, product_id INT, quantity INT);', 'sql': 'SELECT SUM(price * quantity) FROM product INNER JOIN sales ON product.product_id = sales.product_id WHERE cruelty_free = FALSE;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query to calculate the total revenue for cosmetics products that are not cruelty-free:\n```sql\nSELECT SUM(p.price * s.quantity) AS total_revenue\nFROM product p\nJOIN sales s ON p.product_id = s.product_id\nWHERE p.cruelty_free = FALSE;\n```\n\nStep by step explanation:\n1. The `SUM` function is used to calculate the total revenue.\n2. We multiply the price of each product (`p.price`) by the quantity sold (`s.quantity`) to get the revenue for each product.\n3. The `JOIN` clause is used to combine the `product` and `sales` tables based',
    sql='```sql\nSELECT SUM(p.price * s.quantity) AS total_revenue\nFROM product p\nJOIN sales s ON p.product_id = s.product_id\nWHERE p.cruelty_free = FALSE;\n```'
), 1), (Example({'sql_prompt': 'What is the total cost of permits for projects with permit numbers greater than 700?', 'sql_context': "CREATE TABLE permit_data (id INT, project VARCHAR(50), permit_number INT, start_date DATE, permit_cost DECIMAL(10,2)); INSERT INTO permit_data (id, project, permit_number, start_date, permit_cost) VALUES (1, 'Office Building', 450, '2019-12-20', 850.00), (2, 'Residential Apartments', 751, '2021-03-01', 1200.50), (3, 'School', 333, '2020-06-15', 500.25), (4, 'Mall', 780, '2020-12-01', 1500.75);", 'sql': 'SELECT SUM(permit_cost) FROM permit_data WHERE permit_number > 700;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query to find the total cost of permits for projects with permit numbers greater than 700:\n```sql\nSELECT SUM(permit_cost) AS total_cost\nFROM permit_data\nWHERE permit_number > 700;\n```\n\nThis query uses the `SUM` function to calculate the total cost of permits and the `WHERE` clause to filter for projects with permit numbers greater than 700.',
    sql='Here is the SQL query to find the total cost of permits for projects with permit numbers greater than 700:\n```sql\nSELECT SUM(permit_cost) AS total_cost\nFROM permit_data\nWHERE permit_number > 700;\n```\nThis query uses the `SUM` function to calculate the total cost of permits and the `WHERE` clause to filter for projects with permit numbers greater than 700.'
), 1), (Example({'sql_prompt': 'Find the total square footage of wheelchair-accessible properties in Boston.', 'sql_context': "CREATE TABLE properties (id INT, city VARCHAR(20), square_footage INT, wheelchair_accessible BOOLEAN); INSERT INTO properties (id, city, square_footage, wheelchair_accessible) VALUES (1, 'Boston', 1000, true); INSERT INTO properties (id, city, square_footage, wheelchair_accessible) VALUES (2, 'Boston', 1200, false);", 'sql': "SELECT SUM(square_footage) FROM properties WHERE city = 'Boston' AND wheelchair_accessible = true;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Here is the SQL query to find the total square footage of wheelchair-accessible properties in Boston:\n```sql\nSELECT SUM(square_footage) AS total_square_footage\nFROM properties\nWHERE city = 'Boston' AND wheelchair_accessible = true;\n```\n\nThis query sums up the `square_footage` column for all records where the `city` is 'Boston' and the `wheelchair_accessible` column is true, giving you the total square footage of wheelchair-accessible properties in Boston.",
    sql="Here is the SQL query to find the total square footage of wheelchair-accessible properties in Boston:\n```sql\nSELECT SUM(square_footage) AS total_square_footage\nFROM properties\nWHERE city = 'Boston' AND wheelchair_accessible = true;\n```\nThis query calculates the sum of the `square_footage` column for all records where the `city` is 'Boston' and the `wheelchair_accessible` column is true, providing you with the total square footage of wheelchair-accessible properties in Boston."
), 0), (Example({'sql_prompt': 'Which operators have the highest average production quantity per well?', 'sql_context': "CREATE TABLE wells (well_id INT, well_name TEXT, production_qty FLOAT, operator_id INT); INSERT INTO wells (well_id, well_name, production_qty, operator_id) VALUES (1, 'Well A', 1000, 1), (2, 'Well B', 1500, 1), (3, 'Well C', 800, 2); CREATE TABLE operators (operator_id INT, operator_name TEXT); INSERT INTO operators (operator_id, operator_name) VALUES (1, 'ABC Inc.'), (2, 'DEF'), (3, 'GHI Inc.');", 'sql': 'SELECT o.operator_name, AVG(w.production_qty) as avg_production FROM wells w JOIN operators o ON w.operator_id = o.operator_id GROUP BY o.operator_name ORDER BY avg_production DESC;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query to find the operators with the highest average production quantity per well:\n```sql\nSELECT o.operator_name, AVG(w.production_qty) AS avg_production\nFROM wells w\nJOIN operators o ON w.operator_id = o.operator_id\nGROUP BY o.operator_name\nORDER BY avg_production DESC;\n```\n\nStep-by-step reasoning:\n1. We start by selecting the operator name and calculating the average production quantity using the `AVG` function.\n2. We use a `JOIN` operation to combine the `wells` and `operators` tables based on the common `operator_id`.\n3. The `GROUP BY` clause',
    sql='Here is the SQL query to find the operators with the highest average production quantity per well:\n```sql\nSELECT o.operator_name, AVG(w.production_qty) AS avg_production\nFROM wells w\nJOIN operators o ON w.operator_id = o.operator_id\nGROUP BY o.operator_name\nORDER BY avg_production DESC;\n```\n\nStep-by-step reasoning:\n1. We start by selecting the operator name and calculating the average production quantity using the `AVG` function.\n2. We use a `JOIN` operation to combine the `wells` and `operators` tables based on the common `operator_id`.\n3. The `GROUP BY` clause'
), 1), (Example({'sql_prompt': 'What was the average number of comments per post in Oceania in the last month?', 'sql_context': "CREATE TABLE comments_posts(region VARCHAR(20), post_date DATE, comments INT, posts INT); INSERT INTO comments_posts(region, post_date, comments, posts) VALUES('Oceania', '2021-09-01', 10, 10), ('Oceania', '2021-09-02', 12, 12), ('Oceania', '2021-09-03', 14, 14), ('Oceania', '2021-09-04', 16, 16), ('Oceania', '2021-09-05', 18, 18), ('Oceania', '2021-09-06', 20, 20), ('Oceania', '2021-09-07', 22, 22);", 'sql': "SELECT AVG(comments/posts) FROM comments_posts WHERE region = 'Oceania' AND post_date >= DATEADD(month, -1, CURRENT_DATE)"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query to find the average number of comments per post in Oceania for the last month:\n```sql\nSELECT AVG(comments) AS avg_comments\nFROM comments_posts\nWHERE region = \'Oceania\' AND post_date BETWEEN \'2021-09-01\' AND \'2021-09-30\';\n```\n\nThis query calculates the average value of the "comments" column for rows where the "region" is \'Oceania\' and the "post_date" falls between September 1, 2021, and September 30, 2021. The result will give you the average number of comments per post in Oceania for',
    sql="SELECT AVG(comments) AS avg_comments FROM comments_posts WHERE region = 'Oceania' AND post_date BETWEEN '2021-09-01' AND '2021-09-30';"
), 0), (Example({'sql_prompt': 'What is the geopolitical risk assessment score for each country in 2020?', 'sql_context': "CREATE TABLE GeopoliticalRiskAssessments (assessment_id INT, assessment_name VARCHAR(50), score INT, assessment_date DATE, country VARCHAR(50)); INSERT INTO GeopoliticalRiskAssessments (assessment_id, assessment_name, score, assessment_date, country) VALUES (1, 'Assessment A', 7, '2020-01-01', 'USA'), (2, 'Assessment B', 5, '2020-02-15', 'Russia'), (3, 'Assessment C', 8, '2020-03-31', 'China');", 'sql': "SELECT country, score FROM GeopoliticalRiskAssessments WHERE assessment_date BETWEEN '2020-01-01' AND '2020-12-31';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query to retrieve the geopolitical risk assessment scores for each country in 2020:\n```sql\nSELECT country, score\nFROM GeopoliticalRiskAssessments\nWHERE EXTRACT(YEAR FROM assessment_date) = 2020;\n```\n\nStep by step reasoning:\n1. The query selects the columns `country` and `score` from the `GeopoliticalRiskAssessments` table.\n2. The `WHERE` clause filters the rows based on the year of the `assessment_date`. We use the `EXTRACT` function to get the year out of the date.\n3. Only rows with an assessment date in the year 2020',
    sql='SELECT country, score FROM GeopoliticalRiskAssessments WHERE EXTRACT(YEAR FROM assessment_date) = 2020;'
), 0), (Example({'sql_prompt': 'Find the total revenue for events with an attendance over 200 in 2021.', 'sql_context': "CREATE TABLE events (event_id INT, event_name VARCHAR(50), attendance INT, revenue DECIMAL(10,2), event_date DATE); INSERT INTO events (event_id, event_name, attendance, revenue, event_date) VALUES (1, 'Art Exhibition', 250, 15000, '2021-06-01'); INSERT INTO events (event_id, event_name, attendance, revenue, event_date) VALUES (2, 'Theater Performance', 180, 12000, '2021-07-15');", 'sql': 'SELECT SUM(revenue) FROM events WHERE attendance > 200 AND YEAR(event_date) = 2021;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query to find the total revenue for events with an attendance over 200 in 2021:\n```sql\nSELECT SUM(revenue) AS total_revenue\nFROM events\nWHERE attendance > 200 AND EXTRACT(YEAR FROM event_date) = 2021;\n```\n\nThis query calculates the sum of revenue for events that meet the following conditions:\n- The attendance is greater than 200.\n- The event took place in the year 2021.\n\nThe `EXTRACT` function is used to get the year from the `event_date` column, and it helps in filtering events based on the year.',
    sql='Here is the SQL query to find the total revenue for events with an attendance over 200 in 2021:\n```sql\nSELECT SUM(revenue) AS total_revenue\nFROM events\nWHERE attendance > 200 AND EXTRACT(YEAR FROM event_date) = 2021;\n```\n\nThis query calculates the sum of revenue for events that meet the following conditions:\n- The attendance is greater than 200.\n- The event took place in the year 2021.\nThe `EXTRACT` function is used to get the year from the `event_date` column, and it helps in filtering events based on the year.'
), 1), (Example({'sql_prompt': "find the number of records in the CommunityHealthStatistics table where the State is 'TX' and the County is 'Harris'", 'sql_context': "CREATE TABLE CommunityHealthStatistics (ID INT, State TEXT, County TEXT, Population INT, AverageIncome FLOAT); INSERT INTO CommunityHealthStatistics (ID, State, County, Population, AverageIncome) VALUES (1, 'TX', 'Harris', 4500000, 60000), (2, 'CA', 'LA', 2500000, 70000);", 'sql': "SELECT * FROM CommunityHealthStatistics WHERE State = 'TX' AND County = 'Harris';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query to find the number of records in the "CommunityHealthStatistics" table where the state is \'TX\' and the county is \'Harris\':\n```sql\nSELECT COUNT(*) FROM CommunityHealthStatistics\nWHERE State = \'TX\' AND County = \'Harris\';\n```\nThis query uses the `COUNT(*)` function to count the number of records that meet the specified conditions. The `WHERE` clause filters the records based on the state and county values.',
    sql='Here is the SQL query to find the number of records in the "CommunityHealthStatistics" table where the state is \'TX\' and the county is \'Harris\':\n```sql\nSELECT COUNT(*) FROM CommunityHealthStatistics WHERE State = \'TX\' AND County = \'Harris\';\n```\nThis query uses the `COUNT(*)` function to count the number of records that meet the specified conditions. The `WHERE` clause filters the records based on the state and county values.'
), 0), (Example({'sql_prompt': "Insert a new record into the 'weapons' table with the following data: 'Javelin', 'USA', 'in-development'", 'sql_context': "CREATE TABLE weapons (id INT PRIMARY KEY, name VARCHAR(255), origin VARCHAR(255), status VARCHAR(255)); INSERT INTO weapons (id, name, origin) VALUES (1, 'AK-47', 'Russia'), (2, 'RPG-7', 'Russia');", 'sql': "INSERT INTO weapons (name, origin, status) VALUES ('Javelin', 'USA', 'in-development');"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Here is the SQL query to insert a new record into the 'weapons' table with the provided data:\n```sql\nINSERT INTO weapons (name, origin, status) VALUES ('Javelin', 'USA', 'in-development');\n```\nThis query inserts a new row into the 'weapons' table with the name 'Javelin', origin as 'USA', and status as 'in-development'.",
    sql="Here is the SQL query to insert a new record into the 'weapons' table with the provided data:\n```sql\nINSERT INTO weapons (name, origin, status)\nVALUES ('Javelin', 'USA', 'in-development');\n```\nThis query inserts a new row into the 'weapons' table with the name 'Javelin', origin as 'USA', and status as 'in-development'."
), 1), (Example({'sql_prompt': 'Count the number of mining incidents per month in 2021.', 'sql_context': "CREATE TABLE incidents (id INT, date DATE, incident_type TEXT); INSERT INTO incidents (id, date, incident_type) VALUES (1, '2021-01-05', 'equipment_failure'); INSERT INTO incidents (id, date, incident_type) VALUES (2, '2021-03-12', 'safety_violation');", 'sql': "SELECT DATE_PART('month', date) AS month, COUNT(*) FROM incidents WHERE date >= '2021-01-01' AND date < '2022-01-01' GROUP BY month;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query to count the number of mining incidents per month in 2021:\n```sql\nSELECT EXTRACT(MONTH FROM date) AS month, COUNT(*) AS incident_count\nFROM incidents\nWHERE EXTRACT(YEAR FROM date) = 2021\nGROUP BY month\nORDER BY month;\n```\n\nStep by step explanation:\n1. The `EXTRACT` function is used to extract the month from the "date" column and assign it an alias "month".\n2. The `COUNT` function counts the number of incidents for each month.\n3. The `WHERE` clause filters the records to only include incidents that occurred in the year 2021.',
    sql='Here is the SQL query to count the number of mining incidents per month in 2021:\n```sql\nSELECT EXTRACT(MONTH FROM date) AS month, COUNT(*) AS incident_count\nFROM incidents\nWHERE EXTRACT(YEAR FROM date) = 2021\nGROUP BY month\nORDER BY month;\n```'
), 0), (Example({'sql_prompt': "How many workers are employed in 'renewable energy' sector?", 'sql_context': "CREATE TABLE workers (id INT, worker_name VARCHAR(255), department VARCHAR(255)); INSERT INTO workers (id, worker_name, department) VALUES (1, 'John Doe', 'renewable energy'), (2, 'Jane Smith', 'textiles'), (3, 'Michael Brown', 'renewable energy');", 'sql': "SELECT COUNT(*) FROM workers WHERE department = 'renewable energy';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Here is the SQL query to find out how many workers are employed in the 'renewable energy' sector:\n```sql\nSELECT COUNT(*) FROM workers WHERE department = 'renewable energy';\n```\nThis query counts the number of records in the 'workers' table where the 'department' column is equal to 'renewable energy', giving you the number of workers employed in that sector.",
    sql="SELECT COUNT(*) FROM workers WHERE department = 'renewable energy';"
), 1), (Example({'sql_prompt': 'What is the average performance score for each game genre?', 'sql_context': "CREATE TABLE game_genre_performance (game_id INT, game_genre VARCHAR(255), performance_score INT); INSERT INTO game_genre_performance (game_id, game_genre, performance_score) VALUES (1, 'RPG', 85), (2, 'Strategy', 90), (3, 'RPG', 80);", 'sql': 'SELECT game_genre, AVG(performance_score) as avg_score FROM game_genre_performance GROUP BY game_genre;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query to find the average performance score for each game genre:\n```sql\nSELECT game_genre, AVG(performance_score) AS avg_performance\nFROM game_genre_performance\nGROUP BY game_genre;\n```\n\nThis query selects the `game_genre` column and calculates the average of the `performance_score` column for each unique game genre using the `AVG` function. The `GROUP BY` clause groups the results by the `game_genre` column, so you get the average performance score for each genre.',
    sql='SELECT game_genre, AVG(performance_score) AS avg_performance FROM game_genre_performance GROUP BY game_genre;'
), 0), (Example({'sql_prompt': 'How many Indigenous communities in the Arctic are experiencing negative socio-economic impacts due to climate change?', 'sql_context': "CREATE TABLE IndigenousCommunities(community TEXT, socio_economic_impact TEXT, climate_change_impact TEXT); INSERT INTO IndigenousCommunities(community, socio_economic_impact, climate_change_impact) VALUES ('Inuit', 'High', 'Very High'), ('Sami', 'Medium', 'High');", 'sql': "SELECT COUNT(*) FROM IndigenousCommunities WHERE socio_economic_impact = 'High' AND climate_change_impact = 'High' OR socio_economic_impact = 'Very High' AND climate_change_impact = 'Very High';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Here is the SQL query to answer the prompt:\n```sql\nSELECT COUNT(*) FROM IndigenousCommunities\nWHERE socio_economic_impact = 'Negative' AND climate_change_impact = 'Arctic';\n```\n\nThis query counts the number of records in the `IndigenousCommunities` table where the `socio_economic_impact` is 'Negative' and the `climate_change_impact` is related to the Arctic region. The result will give you the number of Indigenous communities experiencing negative socio-economic impacts due to climate change in the Arctic.",
    sql="SELECT COUNT(*) FROM IndigenousCommunities WHERE socio_economic_impact = 'Negative' AND climate_change_impact = 'Arctic';"
), 0), (Example({'sql_prompt': 'What is the minimum depth recorded in the Mariana Trench?', 'sql_context': "CREATE TABLE ocean_floor_mapping (location VARCHAR(255), depth FLOAT);   INSERT INTO ocean_floor_mapping (location, depth) VALUES ('Mariana Trench', 10994.0), ('Challenger Deep', 10972.8);", 'sql': "SELECT MIN(depth) FROM ocean_floor_mapping WHERE location = 'Mariana Trench';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query to find the minimum depth recorded in the Mariana Trench:\n```sql\nSELECT MIN(depth) AS min_depth\nFROM ocean_floor_mapping\nWHERE location = \'Mariana Trench\';\n```\n\nThis query selects the minimum value of the "depth" column from the "ocean_floor_mapping" table where the "location" is \'Mariana Trench\'. The result will give you the minimum depth recorded in that specific location.',
    sql="SELECT MIN(depth) AS min_depth FROM ocean_floor_mapping WHERE location = 'Mariana Trench';"
), 0), (Example({'sql_prompt': 'List all farmers who have not serviced their irrigation systems in the last 6 months.', 'sql_context': "CREATE TABLE farmer_irrigation (id INT, farmer_id INT, system_type VARCHAR(50), service_date DATE); INSERT INTO farmer_irrigation (id, farmer_id, system_type, service_date) VALUES (1, 1, 'Drip', '2021-08-01'), (2, 2, 'Sprinkler', '2021-10-15'), (3, 3, 'Drip', '2021-11-01'), (4, 4, 'Sprinkler', '2022-02-01'), (5, 5, 'Drip', '2022-03-01'), (6, 6, 'Sprinkler', '2022-01-15'), (7, 7, 'Drip', '2021-06-01'), (8, 8, 'Sprinkler', '2022-04-01'), (9, 9, 'Drip', '2021-12-01'), (10, 10, 'Sprinkler', '2022-05-15');", 'sql': 'SELECT farmers.name FROM farmers LEFT JOIN farmer_irrigation ON farmers.id = farmer_irrigation.farmer_id WHERE farmer_irrigation.service_date <= DATE_SUB(CURDATE(), INTERVAL 6 MONTH);'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Here is the SQL query to list all farmers who have not serviced their irrigation systems in the last 6 months:\n```sql\nSELECT DISTINCT farmer_id\nFROM farmer_irrigation\nWHERE service_date < DATEADD(MONTH, -6, GETDATE());\n```\n\nThis query selects distinct farmer IDs from the `farmer_irrigation` table where the `service_date` is older than 6 months from the current date. The `DATEADD` function is used to subtract 6 months from the current date (`GETDATE()`), and then it compares this value with the `service_date` column to identify farmers who haven't serviced their systems in the last 6 months.",
    sql="Here is the SQL query to list all farmers who have not serviced their irrigation systems in the last 6 months:\n```sql\nSELECT DISTINCT farmer_id\nFROM farmer_irrigation\nWHERE service_date < DATEADD(MONTH, -6, GETDATE());\n```\nThis query selects distinct farmer IDs from the `farmer_irrigation` table where the `service_date` is older than 6 months from the current date. The `DATEADD` function is used to subtract 6 months from the current date (`GETDATE()`), and then it compares this value with the `service_date` column to identify farmers who haven't serviced their systems in the last 6 months."
), 0), (Example({'sql_prompt': 'What is the most common type of medical equipment across hospitals?', 'sql_context': "CREATE TABLE medical_equipment (id INT, hospital_name TEXT, location TEXT, equipment TEXT, quantity INT, last_updated_date DATE); INSERT INTO medical_equipment (id, hospital_name, location, equipment, quantity, last_updated_date) VALUES (1, 'NY Presbyterian', 'NYC', 'Ventilators', 80, '2021-03-31'); INSERT INTO medical_equipment (id, hospital_name, location, equipment, quantity, last_updated_date) VALUES (2, 'Stanford Hospital', 'Palo Alto', 'Ventilators', 90, '2021-03-31');", 'sql': 'SELECT equipment, MAX(quantity) as max_quantity FROM medical_equipment GROUP BY equipment ORDER BY max_quantity DESC LIMIT 1;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='To answer the question, we need to find the type of medical equipment that appears most frequently across hospitals. We can achieve this by grouping the data by the "equipment" column and then ordering the results by quantity in descending order. Here\'s the SQL query:\n```sql\nSELECT equipment, COUNT(*) AS quantity_count\nFROM medical_equipment\nGROUP BY equipment\nORDER BY quantity_count DESC\nLIMIT 1;\n```\nThis query will return the type of medical equipment with the highest count, which represents the most common type across hospitals.',
    sql='SELECT equipment, COUNT(*) AS quantity_count\nFROM medical_equipment\nGROUP BY equipment\nORDER BY quantity_count DESC\nLIMIT 1;'
), 0), (Example({'sql_prompt': "What is the average rating for 'Gluten-Free' items?", 'sql_context': "CREATE TABLE ratings (item_name TEXT, is_gluten_free BOOLEAN, rating INTEGER); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Quinoa Salad', true, 4); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Chicken Stir Fry', false, 5);", 'sql': 'SELECT AVG(rating) FROM ratings WHERE is_gluten_free = true;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Here is the SQL query to find the average rating for 'Gluten-Free' items:\n```sql\nSELECT AVG(rating) AS avg_rating\nFROM ratings\nWHERE is_gluten_free = TRUE;\n```\n\nThis query calculates the average of the 'rating' column for rows where the 'is_gluten_free' column is true, which indicates that the item is gluten-free. The result will be a single value representing the average rating for gluten-free items.",
    sql='SELECT AVG(rating) AS avg_rating FROM ratings WHERE is_gluten_free = TRUE;'
), 1), (Example({'sql_prompt': 'How many water treatment facilities are there in each country, and what is their distribution by continent?', 'sql_context': "CREATE TABLE facilities (id INT, facility_name VARCHAR(50), country VARCHAR(50), total_employees INT); INSERT INTO facilities (id, facility_name, country, total_employees) VALUES (1, 'Water Treatment Plant 1', 'Brazil', 25); INSERT INTO facilities (id, facility_name, country, total_employees) VALUES (2, 'Water Treatment Plant 2', 'India', 30);", 'sql': 'SELECT country, COUNT(*) as facility_count, CONTINENT(location) as continent FROM facilities JOIN countries ON facilities.country = countries.country_name GROUP BY country, continent;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query to answer the prompt:\n```sql\nSELECT country, COUNT(*) AS facility_count, continent\nFROM facilities\nJOIN countries ON facilities.country = countries.country\nGROUP BY country, continent;\n```\n\nStep-by-step reasoning:\n1. We start by selecting the relevant columns from the "facilities" table: "country" and "total_employees."\n2. We use a JOIN operation to combine the "facilities" table with the "countries" table based on the "country" column. This allows us to access the continent information for each facility.\n3. The GROUP BY clause groups the results by both "country" and "continent." This is necessary because we',
    sql='Here is the SQL query to answer the prompt:\n```sql\nSELECT country, COUNT(*) AS facility_count, continent\nFROM facilities\nJOIN countries ON facilities.country = countries.country\nGROUP BY country, continent;\n```\n\nStep-by-step reasoning:\n1. We start by selecting the relevant columns from the "facilities" table: "country" and "total_employees."\n2. We use a JOIN operation to combine the "facilities" table with the "countries" table based on the "country" column. This allows us to access the continent information for each facility.\n3. The GROUP BY clause groups the results by both "country" and "continent." This is necessary because we'
), 0), (Example({'sql_prompt': "What is the maximum data usage in the 'urban' region?", 'sql_context': "CREATE TABLE subscribers (id INT, name VARCHAR(50), data_usage FLOAT, region VARCHAR(20)); INSERT INTO subscribers (id, name, data_usage, region) VALUES (1, 'John Doe', 20.0, 'urban'), (2, 'Jane Doe', 18.0, 'urban');", 'sql': "SELECT MAX(data_usage) FROM subscribers WHERE region = 'urban';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Here is the SQL query to find the maximum data usage in the 'urban' region:\n```sql\nSELECT MAX(data_usage) AS max_data_usage\nFROM subscribers\nWHERE region = 'urban';\n```\n\nThis query uses the `MAX` function to find the maximum value of the `data_usage` column for records where the `region` is 'urban'. The result will be a single value representing the highest data usage in that region.",
    sql="SELECT MAX(data_usage) AS max_data_usage FROM subscribers WHERE region = 'urban';"
), 0), (Example({'sql_prompt': 'Find the average depth of all underwater volcanoes in the Atlantic Ocean.', 'sql_context': "CREATE TABLE underwater_volcanoes (id INT, name VARCHAR(50), depth FLOAT, ocean VARCHAR(20)); INSERT INTO underwater_volcanoes (id, name, depth, ocean) VALUES (1, 'Lost City', 800, 'Atlantic'); INSERT INTO underwater_volcanoes (id, name, depth, ocean) VALUES (2, 'Eyjafjallajokull', 1650, 'Atlantic');", 'sql': "SELECT AVG(depth) FROM underwater_volcanoes WHERE ocean = 'Atlantic';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query to find the average depth of all underwater volcanoes in the Atlantic Ocean:\n```sql\nSELECT AVG(depth) AS average_depth\nFROM underwater_volcanoes\nWHERE ocean = \'Atlantic\';\n```\n\nThis query calculates the average depth of underwater volcanoes in the Atlantic Ocean by selecting the average value of the "depth" column from the "underwater_volcanoes" table where the "ocean" column is equal to \'Atlantic\'.',
    sql='Here is the SQL query to find the average depth of all underwater volcanoes in the Atlantic Ocean:\n```sql\nSELECT AVG(depth) AS average_depth\nFROM underwater_volcanoes\nWHERE ocean = \'Atlantic\';\n```\nThis query calculates the average depth of underwater volcanoes in the Atlantic Ocean by selecting the average value of the "depth" column from the "underwater_volcanoes" table where the "ocean" column is equal to \'Atlantic\'.'
), 0), (Example({'sql_prompt': 'What is the total cost of Mars rover missions that have successfully landed?', 'sql_context': 'CREATE TABLE mars_rovers (id INT PRIMARY KEY, name VARCHAR(255), mission_type VARCHAR(255), agency VARCHAR(255), cost FLOAT, launched_date DATE, landed_date DATE);', 'sql': "SELECT SUM(cost) FROM mars_rovers WHERE mission_type = 'Lander' AND landed_date IS NOT NULL;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query to calculate the total cost of Mars rover missions that have successfully landed:\n```sql\nSELECT SUM(cost) AS total_cost\nFROM mars_rovers\nWHERE landed_date IS NOT NULL;\n```\n\nStep by step reasoning:\n1. The goal is to find the total cost of Mars rover missions that have successfully landed.\n2. We will use the `mars_rovers` table, which contains information about different Mars rover missions.\n3. To filter for missions that have successfully landed, we use the condition `landed_date IS NOT NULL`. This ensures that we only consider missions with a valid landing date.\n4. The `SUM` function is then applied to the `',
    sql='SELECT SUM(cost) AS total_cost FROM mars_rovers WHERE landed_date IS NOT NULL;'
), 0), (Example({'sql_prompt': "What is the earliest year a peacekeeping operation was conducted in 'Asia'?", 'sql_context': "CREATE TABLE Peacekeeping_Years (id INT, location VARCHAR(30), year INT); INSERT INTO Peacekeeping_Years (id, location, year) VALUES (1, 'Asia', 1990), (2, 'Asia', 2000);", 'sql': "SELECT MIN(year) FROM Peacekeeping_Years WHERE location = 'Asia';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the earliest year a peacekeeping operation was conducted in 'Asia', we can use the following SQL query:\n```sql\nSELECT MIN(year) AS earliest_year\nFROM Peacekeeping_Years\nWHERE location = 'Asia';\n```\nThis query uses the MIN() function to find the minimum value of the 'year' column in the 'Peacekeeping_Years' table where the 'location' is 'Asia'. The result will give us the earliest year that a peacekeeping operation was conducted in the specified region.",
    sql="SELECT MIN(year) AS EarliestYear FROM Peacekeeping_Years WHERE location = 'Asia';"
), 0), (Example({'sql_prompt': 'Identify the drug with the lowest sales amount in Europe in 2022.', 'sql_context': "CREATE TABLE sales (drug_name TEXT, continent TEXT, sales_amount INT, sale_date DATE); INSERT INTO sales (drug_name, continent, sales_amount, sale_date) VALUES ('Aspirin', 'Europe', 1000, '2022-01-01');", 'sql': "SELECT drug_name, MIN(sales_amount) FROM sales WHERE continent = 'Europe' AND sale_date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY drug_name;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Here is the SQL query to identify the drug with the lowest sales amount in Europe in 2022:\n```sql\nSELECT drug_name, sales_amount\nFROM sales\nWHERE continent = 'Europe' AND sale_date LIKE '2022%';\n```\n\nThis query selects the `drug_name` and `sales_amount` columns from the `sales` table where the `continent` is 'Europe' and the `sale_date` is in the year 2022. This will return all drug sales records that meet these criteria, allowing you to identify the drug with the lowest sales amount among these records.",
    sql="Here is the SQL query to identify the drug with the lowest sales amount in Europe in 2022:\n```sql\nSELECT drug_name, sales_amount\nFROM sales\nWHERE continent = 'Europe' AND sale_date LIKE '2022%';\n```\n\nThis query selects the `drug_name` and `sales_amount` columns from the `sales` table where the `continent` is 'Europe' and the `sale_date` is in the year 2022. This will return all drug sales records that meet these criteria, allowing you to identify the drug with the lowest sales amount among these records."
), 0), (Example({'sql_prompt': "Insert a new record into 'customer_preferences' for customer 101 and menu item 1 with a preference score of 90", 'sql_context': 'CREATE TABLE customer_preferences (customer_id INT, item_id INT, preference_score INT);', 'sql': 'INSERT INTO customer_preferences (customer_id, item_id, preference_score) VALUES (101, 1, 90);'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query to insert a new record into the "customer_preferences" table for customer 101 and menu item 1 with a preference score of 90:\n```sql\nINSERT INTO customer_preferences (customer_id, item_id, preference_score)\nVALUES (101, 1, 90);\n```\n\nThis query inserts a new row into the "customer_preferences" table with the specified values. The "customer_id" is set to 101, the "item_id" is set to 1, and the "preference_score" is set to 90.',
    sql='Here is the SQL query to insert a new record into the "customer_preferences" table for customer 101 and menu item 1 with a preference score of 90:\n```sql\nINSERT INTO customer_preferences (customer_id, item_id, preference_score)\nVALUES (101, 1, 90);\n```\nThis query inserts a new row into the "customer_preferences" table with the specified values. The "customer_id" is set to 101, the "item_id" is set to 1, and the "preference_score" is set to 90.'
), 1), (Example({'sql_prompt': 'Who is the oldest donor from each city?', 'sql_context': "CREATE TABLE donors_2 (id INT PRIMARY KEY, name VARCHAR(50), age INT, city VARCHAR(50), state VARCHAR(50)); INSERT INTO donors_2 (id, name, age, city, state) VALUES (1, 'John Doe', 35, 'New York', 'NY'), (2, 'Jane Smith', 40, 'Buffalo', 'NY'), (3, 'Mike Johnson', 50, 'Boston', 'MA');", 'sql': 'SELECT city, MAX(age) as oldest_donor_age FROM donors_2 GROUP BY city;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query that addresses the prompt:\n```sql\nSELECT name, city, state, age\nFROM (\n    SELECT name, city, state, age,\n           ROW_NUMBER() OVER (PARTITION BY city ORDER BY age DESC) AS rn\n    FROM donors_2\n) ranked\nWHERE rn = 1;\n```\n\nStep by step explanation:\n1. The subquery `SELECT name, city, state, age, ROW_NUMBER() OVER (PARTITION BY city ORDER BY age DESC) AS rn FROM donors_2` assigns a row number to each donor within their city, ordered by age in descending order. This means that the oldest donor in each city will have the row number 1.\n2',
    sql='SELECT name, city, state, age FROM ( SELECT name, city, state, age, ROW_NUMBER() OVER (PARTITION BY city ORDER BY age DESC) AS rn FROM donors_2 ) ranked WHERE rn = 1;'
), 0), (Example({'sql_prompt': 'What are the union membership statistics for unions that have engaged in successful collective bargaining in the healthcare sector?', 'sql_context': "CREATE TABLE Membership (UnionName TEXT, Sector TEXT, MemberCount INT); INSERT INTO Membership (UnionName, Sector, MemberCount) VALUES ('UnionHealthA', 'Healthcare', 3000), ('UnionHealthB', 'Healthcare', 5000), ('UnionHealthC', 'Healthcare', 2000);", 'sql': "SELECT UnionName, MemberCount FROM Membership WHERE Sector = 'Healthcare' AND UnionName IN (SELECT UnionName FROM CBAs WHERE ExpirationDate > CURDATE());"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query that addresses the prompt:\n```sql\nSELECT U.UnionName, SUM(M.MemberCount) AS TotalMembers\nFROM Membership M\nJOIN Unions U ON M.UnionName = U.UnionName\nWHERE U.Sector = \'Healthcare\' AND U.CollectiveBargaining = \'Successful\'\nGROUP BY U.UnionName;\n```\n\n**Step-by-step reasoning:**\n\n1. We start by selecting data from the "Membership" table, which contains information about union membership counts.\n2. We then perform an inner join with the "Unions" table using the UnionName field as the common key. This allows us to link the membership data with additional information about',
    sql="```sql\nSELECT U.UnionName, SUM(M.MemberCount) AS TotalMembers\nFROM Membership M\nJOIN Unions U ON M.UnionName = U.UnionName\nWHERE U.Sector = 'Healthcare' AND U.CollectiveBargaining = 'Successful'\nGROUP BY U.UnionName;\n```"
), 0), (Example({'sql_prompt': 'Calculate the total gas consumption for Nigeria in 2019', 'sql_context': "CREATE TABLE gas_consumption (country VARCHAR(50), consumption_year INT, gas_consumption FLOAT); INSERT INTO gas_consumption (country, consumption_year, gas_consumption) VALUES ('Nigeria', 2019, 12000), ('Nigeria', 2018, 10000), ('Ghana', 2019, 8000), ('Ghana', 2018, 6000), ('Ivory Coast', 2019, 10000), ('Ivory Coast', 2018, 8000);", 'sql': "SELECT gas_consumption FROM gas_consumption WHERE country = 'Nigeria' AND consumption_year = 2019;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Here is the SQL query to calculate the total gas consumption for Nigeria in 2019:\n```sql\nSELECT SUM(gas_consumption) AS total_consumption\nFROM gas_consumption\nWHERE country = 'Nigeria' AND consumption_year = 2019;\n```\n\nThis query uses the `SUM` function to add up the `gas_consumption` values for Nigeria in the year 2019. The result will be a single value representing the total gas consumption for Nigeria during that year.",
    sql="Here is the SQL query to calculate the total gas consumption for Nigeria in 2019:\n```sql\nSELECT SUM(gas_consumption) AS total_consumption\nFROM gas_consumption\nWHERE country = 'Nigeria' AND consumption_year = 2019;\n```\n\nThis query uses the `SUM` function to add up the `gas_consumption` values for Nigeria in the year 2019. The result will be a single value representing the total gas consumption for Nigeria during that year."
), 0), (Example({'sql_prompt': 'What is the average socially responsible lending loan amount for microfinance institutions in Southeast Asia?', 'sql_context': "CREATE TABLE socially_responsible_lending(id INT, loan_number INT, institution_region VARCHAR(50), amount INT); INSERT INTO socially_responsible_lending VALUES (1, 701, 'Southeast Asia', 5000); INSERT INTO socially_responsible_lending VALUES (2, 702, 'South Asia', 7000); INSERT INTO socially_responsible_lending VALUES (3, 703, 'East Asia', 9000); INSERT INTO socially_responsible_lending VALUES (4, 704, 'Southeast Asia', 6000);", 'sql': "SELECT AVG(amount) FROM socially_responsible_lending WHERE institution_region = 'Southeast Asia' AND type = 'microfinance';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='To answer the question, we need to calculate the average loan amount for microfinance institutions in Southeast Asia from the given table. Here\'s the SQL query to achieve that:\n```sql\nSELECT AVG(amount) AS average_loan_amount\nFROM socially_responsible_lending\nWHERE institution_region = \'Southeast Asia\';\n```\nThis query calculates the average of the "amount" column for rows where the "institution_region" is \'Southeast Asia\', which will give us the average socially responsible lending loan amount for microfinance institutions in that region.',
    sql="SELECT AVG(amount) AS average_loan_amount FROM socially_responsible_lending WHERE institution_region = 'Southeast Asia';"
), 0), (Example({'sql_prompt': 'What is the average salary of employees who identify as Latinx in the Engineering department?', 'sql_context': "CREATE TABLE Employees (EmployeeID int, Name varchar(50), Gender varchar(10), Department varchar(50), Salary decimal(10,2), Ethnicity varchar(50)); INSERT INTO Employees (EmployeeID, Name, Gender, Department, Salary, Ethnicity) VALUES (1, 'Juan Garcia', 'Male', 'Engineering', 85000.00, 'Latinx'); INSERT INTO Employees (EmployeeID, Name, Gender, Department, Salary, Ethnicity) VALUES (2, 'Maria Rodriguez', 'Female', 'Engineering', 90000.00, 'Latinx');", 'sql': "SELECT AVG(Salary) FROM Employees WHERE Department = 'Engineering' AND Ethnicity = 'Latinx';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Here is the SQL query to find the average salary of employees who identify as Latinx in the Engineering department:\n```sql\nSELECT AVG(Salary) AS Average_Salary\nFROM Employees\nWHERE Ethnicity = 'Latinx' AND Department = 'Engineering';\n```\nThis query calculates the average salary by filtering the records based on the 'Ethnicity' and 'Department' columns, and then using the AVG function to find the mean of the resulting salaries.",
    sql="Here is the SQL query to find the average salary of employees who identify as Latinx in the Engineering department:\n```sql\nSELECT AVG(Salary) AS Average_Salary\nFROM Employees\nWHERE Ethnicity = 'Latinx' AND Department = 'Engineering';\n```\nThis query calculates the average salary by filtering the records based on the 'Ethnicity' and 'Department' columns, and then using the AVG function to find the mean of the resulting salaries."
), 1), (Example({'sql_prompt': 'What is the name and type of the vessel with the highest average speed?', 'sql_context': "CREATE TABLE Vessels (ID VARCHAR(20), Name VARCHAR(20), Type VARCHAR(20), AverageSpeed FLOAT); INSERT INTO Vessels VALUES ('V012', 'Vessel L', 'Passenger', 35.0), ('V013', 'Vessel M', 'Cargo', 19.5), ('V014', 'Vessel N', 'Passenger', 32.0);", 'sql': 'SELECT Name, Type FROM Vessels WHERE AverageSpeed = (SELECT MAX(AverageSpeed) FROM Vessels);'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Here is the SQL query to find the name and type of the vessel with the highest average speed:\n```sql\nSELECT Name, Type\nFROM Vessels\nORDER BY AverageSpeed DESC\nLIMIT 1;\n```\n\nThis query orders the rows in the `Vessels` table by `AverageSpeed` in descending order and then limits the result to the first row using `LIMIT 1`. This will return the vessel with the highest average speed, along with its name and type.',
    sql='SELECT Name , Type FROM Vessels ORDER BY AverageSpeed DESC LIMIT 1;'
), 0), (Example({'sql_prompt': "List all the distinct producers of Gadolinium from the 'production' table, ordered alphabetically.", 'sql_context': 'CREATE TABLE production (element VARCHAR(10), year INT, month INT, producer VARCHAR(20), quantity INT);', 'sql': "SELECT DISTINCT producer FROM production WHERE element = 'Gadolinium' ORDER BY producer ASC;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Here is the SQL query to list all the distinct producers of Gadolinium from the 'production' table, ordered alphabetically:\n```sql\nSELECT DISTINCT producer\nFROM production\nWHERE element = 'Gadolinium'\nORDER BY producer;\n```\n\nThis query selects the distinct values of the 'producer' column from the 'production' table where the 'element' is 'Gadolinium', and then orders the results alphabetically by the producer.",
    sql="SELECT DISTINCT producer FROM production WHERE element = 'Gadolinium' ORDER BY producer;"
), 1)]