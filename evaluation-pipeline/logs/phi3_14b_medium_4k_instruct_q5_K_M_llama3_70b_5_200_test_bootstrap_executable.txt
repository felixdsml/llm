[(Example({'sql_prompt': "Update the name of the passenger with the id 3 to 'Emily Lee'.", 'sql_context': "CREATE TABLE PASSENGERS (id INT, name VARCHAR(50)); INSERT INTO PASSENGERS VALUES (3, 'James Brown');", 'sql': "UPDATE PASSENGERS SET name = 'Emily Lee' WHERE id = 3;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To update the name of the passenger with id 3 to 'Emily Lee', we need to use an UPDATE statement that specifies the table and sets the new value for the `name` column where the `id` is equal to 3.\n\nHere's how you can write the SQL query:\n\n```sql\nUPDATE PASSENGERS SET name = 'Emily Lee' WHERE id = 3;\n```\n\nThis statement will change the passenger's name with id 3 from its current value ('James Brown') to 'Emily Lee'.",
    sql="Sql Prompt: Update the name of the passenger with the id 3 to 'Emily Lee'.\n\nSql Context: CREATE TABLE PASSENGERS (id INT, name VARCHAR(50)); INSERT INTO PASSENGERS VALUES (3, 'James Brown');\n\nReasoning: Let's think step by step in order to update the passenger's record. We need an SQL UPDATE statement that targets the `PASSENGERS` table and changes the value of the `name` column for the row where the `id` is 3. The WHERE clause ensures we only affect the intended record, preventing unintended updates to other rows in the table.\n\nSql: ```sql"
), 0), (Example({'sql_prompt': "What is the number of women-led agricultural businesses in the 'business_data' table?", 'sql_context': "CREATE TABLE business_data (business_id INT, business_name VARCHAR(50), gender VARCHAR(10)); INSERT INTO business_data (business_id, business_name, gender) VALUES (1, 'Green Acres', 'female'), (2, 'Brown Farms', 'male'), (3, 'Eco Harvest', 'non-binary');", 'sql': "SELECT COUNT(business_id) FROM business_data WHERE gender = 'female';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the number of women-led agricultural businesses from the `business_data` table, we need to count the entries where the gender is specified as 'female'. The SQL query for this would be:\n\n```sql\nSELECT COUNT(*) FROM business_data WHERE gender = 'female';\n```",
    sql="Sql Prompt: What is the number of women-led agricultural businesses in the 'business_data' table?\n\nSql Context: CREATE TABLE business_data (business_id INT, business_name VARCHAR(50), gender VARCHAR(10)); INSERT INTO business_data (business_id, business_name, gender) VALUES (1, 'Green Acres', 'female'), (2, 'Brown Farms', 'male'), (3, 'Eco Harvest', 'non-binary');\n\nReasoning: Let's think step by step in order to find the number of women-led agricultural businesses from the `business_data` table"
), 1), (Example({'sql_prompt': "What is the average rating for 'Gluten-Free' items?", 'sql_context': "CREATE TABLE ratings (item_name TEXT, is_gluten_free BOOLEAN, rating INTEGER); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Quinoa Salad', true, 4); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Chicken Stir Fry', false, 5);", 'sql': 'SELECT AVG(rating) FROM ratings WHERE is_gluten_free = true;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the average rating for 'Gluten-Free' items, we need to filter the ratings table where `is_gluten_free` is true and then calculate the average of the `rating` column. Here's how you can write the SQL query:",
    sql='SELECT AVG(rating) FROM ratings WHERE is_gluten_free = TRUE;'
), 1), (Example({'sql_prompt': 'What is the maximum amount of dissolved oxygen (DO) in the ocean_health table for each month in 2021?', 'sql_context': "CREATE TABLE ocean_health (date DATE, do_value INT); INSERT INTO ocean_health (date, do_value) VALUES ('2021-01-01', 8), ('2021-01-02', 7), ('2021-02-01', 6), ('2021-02-02', 9);", 'sql': "SELECT EXTRACT(MONTH FROM date) as month, MAX(do_value) as max_do_value FROM ocean_health WHERE date BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY EXTRACT(MONTH FROM date);"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the maximum amount of dissolved oxygen (DO) for each month in 2021, we need to extract the year and month from the date column, group the results by these extracted values, and then select the maximum DO value within each group.\n\nHere's how you can write the SQL query:\n\n```sql\nSELECT EXTRACT(YEAR FROM date) AS Year, \n       EXTRACT(MONTH FROM date) AS Month, \n       MAX(do_value) AS MaxDOValue\nFROM ocean_health\nWHERE EXTRACT(YEAR FROM date) = 2021\nGROUP BY Year, Month;\n```",
    sql="Sql Prompt: What is the maximum amount of dissolved oxygen (DO) in the ocean_health table for each month in 2021?\n\nSql Context: CREATE TABLE ocean_health (date DATE, do_value INT); INSERT INTO ocean_health (date, do_value) VALUES ('2021-01-01', 8), ('2021-01-02', 7), ('2021-02-01', 6), ('2021-02-02', 9);\n\nReasoning: Let's think step by step in order to find the maximum amount of dissol"
), 1), (Example({'sql_prompt': 'What are the total sales and quantity of goods sold by each salesperson, grouped by city?', 'sql_context': 'CREATE TABLE salesperson (id INT, name TEXT, city TEXT); CREATE TABLE sales (id INT, salesperson_id INT, product TEXT, quantity INT, total_sales FLOAT);', 'sql': 'SELECT s.name, s.city, SUM(s.total_sales) as total_sales, SUM(s.quantity) as total_quantity FROM sales s JOIN salesperson sp ON s.salesperson_id = sp.id GROUP BY s.city, s.name;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the total sales and quantity of goods sold by each salesperson, grouped by city, we need to join the `salesperson` table with the `sales` table on their respective IDs. Then, we can group the results by both the salesperson's name and city while summing up the quantities and total sales for each grouping.\n\nHere is the SQL query that accomplishes this:\n\n```sql\nSELECT sp.name AS Salesperson_Name, \n       sp.city AS City, \n       SUM(s.quantity) AS Total_Quantity_Sold, \n       SUM(s.total_sales) AS Total_Sales\nFROM salesperson sp\nJ",
    sql='INNER JOIN sales s ON sp.id = s.salesperson_id GROUP BY sp.name, sp.city;'
), 0), (Example({'sql_prompt': 'What is the total funding received by startups in the technology sector that were founded by women?', 'sql_context': "CREATE TABLE startups(id INT, name TEXT, sector TEXT, founder_gender TEXT, funding FLOAT); INSERT INTO startups VALUES (1, 'Acme Inc', 'Technology', 'Female', 2000000); INSERT INTO startups VALUES (2, 'Beta Corp', 'Retail', 'Male', 3000000); INSERT INTO startups VALUES (3, 'Gamma Start', 'Technology', 'Female', 5000000);", 'sql': "SELECT SUM(funding) FROM startups WHERE sector = 'Technology' AND founder_gender = 'Female';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the total funding received by startups in the technology sector that were founded by women, we need to filter the `startups` table based on two conditions: the `sector` should be 'Technology', and the `founder_gender` should be 'Female'. After applying these filters, we will sum up the `funding` column for all matching rows.\n\nHere's the SQL query to achieve this:\n\n```sql\nSELECT SUM(funding) AS total_funding\nFROM startups\nWHERE sector = 'Technology' AND founder_gender = 'Female';\n```",
    sql="Sql Prompt: What is the total funding received by startups in the technology sector that were founded by women?\n\nSql Context: CREATE TABLE startups(id INT, name TEXT, sector TEXT, founder_gender TEXT, funding FLOAT); INSERT INTO startups VALUES (1, 'Acme Inc', 'Technology', 'Female', 2000000); INSERT INTO startups VALUES (2, 'Beta Corp', 'Retail', 'Male', 3000000); INSERT INTO startups VALUES (3, 'Gamma Start', 'Technology', 'Female', 5000000"
), 1), (Example({'sql_prompt': 'What is the recycling rate of plastic in the residential sector in the state of New York?', 'sql_context': "CREATE TABLE recycling_rates_city (sector VARCHAR(20), city VARCHAR(20), material VARCHAR(20), recycling_rate DECIMAL(5,2)); INSERT INTO recycling_rates_city (sector, city, material, recycling_rate) VALUES ('residential', 'New York City', 'plastic', 0.25), ('commercial', 'New York City', 'plastic', 0.30), ('residential', 'New York City', 'paper', 0.45), ('commercial', 'New York City', 'paper', 0.50), ('residential', 'Los Angeles', 'plastic', 0.20), ('commercial', 'Los Angeles', 'plastic', 0.35), ('residential', 'Los Angeles', 'paper', 0.40), ('commercial', 'Los Angeles', 'paper', 0.50);", 'sql': "SELECT recycling_rate FROM recycling_rates_city WHERE sector = 'residential' AND material = 'plastic' AND city = 'New York City';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the recycling rate of plastic in the residential sector specifically for the state of New York, we need to filter our data based on the given criteria (sector and material) while also considering that "New York City" is part of the state of New York.\n\nHere\'s how you can write the SQL query:\n\n```sql\nSELECT recycling_rate FROM recycling_rates_city WHERE sector = \'residential\' AND city = \'New York City\' AND material = \'plastic\';\n```\n\nThis query will return the recycling rate of plastic in the residential sector for New York City, which is part of the state of New York.',
    sql="Sql Prompt: What is the recycling rate of plastic in the residential sector in the state of New York?\n\nSql Context: CREATE TABLE recycling_rates_city (sector VARCHAR(20), city VARCHAR(20), material VARCHAR(20), recycling_rate DECIMAL(5,2)); INSERT INTO recycling_rates_city (sector, city, material, recycling_rate) VALUES ('residential', 'New York City', 'plastic', 0.25), ('commercial', 'New York City', 'plastic', 0.30), ('residential', 'New York City',"
), 1), (Example({'sql_prompt': "Which startups in the 'StartupFunding' table received funding in 2020 or later and have a budget greater than $500,000?", 'sql_context': "CREATE SCHEMA BiotechStartups; CREATE TABLE StartupFunding (startup_name VARCHAR(50), funding_year INT, funding DECIMAL(10, 2)); INSERT INTO StartupFunding VALUES ('StartupA', 2019, 500000), ('StartupB', 2020, 750000);", 'sql': 'SELECT startup_name FROM BiotechStartups.StartupFunding WHERE funding_year >= 2020 AND funding > 500000;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the startups that received funding in 2020 or later and have a budget greater than $500,000, we need to filter the `StartupFunding` table based on two conditions:\n\n1. The `funding_year` should be 2020 or later (i.e., >= 2020).\n2. The `funding` amount should be greater than $500,000.\n\nHere's the SQL query that accomplishes this:\n\n```sql\nSELECT startup_name, funding_year, funding\nFROM BiotechStartups.StartupFunding\nWHERE fund",
    sql='```sql\nSELECT startup_name, funding_year, funding \nFROM BiotechStartups.StartupFunding \nWHERE funding_year >= 2020 AND funding > 500000;\n```'
), 1), (Example({'sql_prompt': "How many female engineers are there in 'australian_mines'?", 'sql_context': "CREATE SCHEMA if not exists australia_schema;CREATE TABLE australia_schema.australian_mines (id INT, name VARCHAR, gender VARCHAR, role VARCHAR);INSERT INTO australia_schema.australian_mines (id, name, gender, role) VALUES (1, 'S worker', 'Female', 'Engineer'), (2, 'T engineer', 'Male', 'Engineer');", 'sql': "SELECT COUNT(*) FROM australia_schema.australian_mines WHERE gender = 'Female' AND role = 'Engineer';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find out how many female engineers are there in the 'australian_mines' table within the 'Australia_schema', we need to write an SQL query that selects and counts all rows where the gender is 'Female' and the role is 'Engineer'. Here's the SQL statement for this:",
    sql="SELECT COUNT(*) FROM australia_schema.australian_mines WHERE gender = 'Female' AND role = 'Engineer';"
), 1), (Example({'sql_prompt': 'What is the average salary of employees in each position?', 'sql_context': "CREATE TABLE Employees (EmployeeID INT, Name VARCHAR(50), Department VARCHAR(50), Position VARCHAR(50), Salary FLOAT); INSERT INTO Employees (EmployeeID, Name, Department, Position, Salary) VALUES (1, 'John Doe', 'IT', 'Developer', 75000.00), (2, 'Jane Smith', 'IT', 'Developer', 80000.00), (3, 'Alice Johnson', 'Marketing', 'Marketing Specialist', 60000.00), (4, 'Bob Brown', 'HR', 'HR Specialist', 65000.00);", 'sql': 'SELECT Position, AVG(Salary) FROM Employees GROUP BY Position;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the average salary of employees in each position, we need to group the data by the "Position" column and then calculate the average salary for each group. The SQL query will use the AVG() aggregate function to compute this average.\n\nHere\'s the SQL statement that accomplishes this:\n\n```sql\nSELECT Position, AVG(Salary) AS Average_Salary\nFROM Employees\nGROUP BY Position;\n```\n\nThis query selects two columns: "Position" and the average salary for each position (aliased as "Average_Salary"). The GROUP BY clause groups the rows by their positions, allowing us to calculate the average salary within each group.',
    sql="Sql Prompt: What is the average salary of employees in each position?\n\nSql Context: CREATE TABLE Employees (EmployeeID INT, Name VARCHAR(50), Department VARCHAR(50), Position VARCHAR(50), Salary FLOAT); INSERT INTO Employees (EmployeeID, Name, Department, Position, Salary) VALUES (1, 'John Doe', 'IT', 'Developer', 75000.00), (2, 'Jane Smith', 'IT', 'Developer', 80000.00), (3, 'Alice Johnson', 'Marketing', 'Marketing Specialist', 60000.0"
), 0), (Example({'sql_prompt': 'What are the names and ranks of all military personnel in country W who were demoted in the year 2019?', 'sql_context': "CREATE TABLE military_demotions (id INT, name TEXT, country TEXT, rank TEXT, demotion_year INT);INSERT INTO military_demotions (id, name, country, rank, demotion_year) VALUES (1, 'John Doe', 'Country W', 'Colonel', 2019);", 'sql': "SELECT name, rank FROM military_demotions WHERE country = 'Country W' AND demotion_year = 2019;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the names and ranks of all military personnel in Country W who were demoted in the year 2019, we need to query the `military_demotions` table. We will filter based on the country being 'Country W' and the `demotion_year` being 2019. Then, we select the relevant columns which are `name` and `rank`.\n\nThe SQL statement for this would be:\n\n```sql\nSELECT name, rank FROM military_demotions WHERE country = 'Country W' AND demotion_year = 2019;\n```",
    sql="Sql Prompt: What are the names and ranks of all military personnel in country W who were demoted in the year 2019?\n\nSql Context: CREATE TABLE military_demotions (id INT, name TEXT, country TEXT, rank TEXT, demotion_year INT);INSERT INTO military_demotions (id, name, country, rank, demotion_year) VALUES (1, 'John Doe', 'Country W', 'Colonel', 2019);\n\nReasoning: Let's think step by step in order to find the names and ranks of all military personnel in Country W who were demoted in the year 2019. We"
), 1), (Example({'sql_prompt': "List the top 2 sectors with the highest donation amounts in the 'Asia' region for the year 2018, ordered by the donation amount in descending order.", 'sql_context': "CREATE TABLE Donors (donor_id INT, donor_name VARCHAR(255), donation_amount INT, sector VARCHAR(255), region VARCHAR(255), donation_date DATE); INSERT INTO Donors (donor_id, donor_name, donation_amount, sector, region, donation_date) VALUES (1, 'DonorA', 100000, 'Health', 'Asia', '2018-01-01');", 'sql': "SELECT sector, SUM(donation_amount) AS total_donation FROM Donors WHERE region = 'Asia' AND donation_date >= '2018-01-01' AND donation_date < '2019-01-01' GROUP BY sector ORDER BY total_donation DESC LIMIT 2;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To list the top 2 sectors with the highest donation amounts in the 'Asia' region for the year 2018, we need to filter records based on the `region` and `donation_date`, then group them by `sector`. After grouping, we will sum up the `donation_amount` for each sector. Finally, we order the results in descending order of donation amounts and limit the output to 2 rows to get the top sectors.\n\nHere's how you can write the SQL query:\n\n```sql\nSELECT sector, SUM(donation_amount) AS total_donations\nFROM Donors\nWHERE region = 'Asia' AND Y",
    sql="```sql\nSELECT sector, SUM(donation_amount) AS total_donations \nFROM Donors \nWHERE region = 'Asia' AND EXTRACT(YEAR FROM donation_date) = 2018 \nGROUP BY sector \nORDER BY total_donations DESC \nLIMIT 2;\n```"
), 1), (Example({'sql_prompt': "Display the vendor with the highest average price for 'Salmon' in the 'sales' table.", 'sql_context': "CREATE TABLE sales (id INT PRIMARY KEY, vendor VARCHAR(50), quantity INT, species VARCHAR(50), price DECIMAL(5,2)); INSERT INTO sales (id, vendor, quantity, species, price) VALUES (1, 'Seafood Haven', 20, 'Salmon', 15.99), (2, 'Sea Bounty', 30, 'Tilapia', 9.49), (3, 'Sea Bounty', 15, 'Cod', 14.50), (4, 'Fresh Catch', 25, 'Salmon', 17.99);", 'sql': "SELECT vendor, AVG(price) FROM sales WHERE species = 'Salmon' GROUP BY vendor ORDER BY AVG(price) DESC LIMIT 1;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the vendor with the highest average price for 'Salmon' in the sales table, we need to perform a few steps:\n\n1. Filter records where species is 'Salmon'.\n2. Group the filtered results by vendor.\n3. Calculate the average price of Salmon per vendor.\n4. Order the result set based on the calculated average price in descending order.\n5. Select the top record, which will be the vendor with the highest average price for 'Salmon'.\n\nHere's how you can write this SQL query:\n\n```sql\nSELECT \n    vendor,\n    AVG(price) AS avg_price\nFROM \n    sales\nWHERE",
    sql="```sql\nSELECT vendor, AVG(price) AS avg_price \nFROM sales \nWHERE species = 'Salmon' \nGROUP BY vendor \nORDER BY avg_price DESC \nLIMIT 1;\n```"
), 1), (Example({'sql_prompt': "Add new military equipment to 'military_equipment' table", 'sql_context': "CREATE TABLE military_equipment (id INT PRIMARY KEY, name VARCHAR(255), type VARCHAR(255), country VARCHAR(255)); INSERT INTO military_equipment (id, name, type, country) VALUES (1, 'M1 Abrams', 'Tank', 'USA');", 'sql': "INSERT INTO military_equipment (id, name, type, country) VALUES (2, 'Leopard 2', 'Tank', 'Germany');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To add new military equipment to the `military_equipment` table, we need to follow these steps:\n\n1. Determine the details of the new military equipment that needs to be added (e.g., name, type, and country).\n2. Use an INSERT statement with the appropriate values for each column in the `military_equipment` table.\n3. Execute the SQL command to insert the new record into the table.\n\nFor example, let\'s say we want to add a new fighter jet called "Falcon X" from France:\n\n```sql\nINSERT INTO military_equipment (id, name, type, country) VALUES',
    sql="INSERT INTO military_equipment (name, type, country) VALUES ('Falcon X', 'Fighter Jet', 'France');"
), 0), (Example({'sql_prompt': 'Show total number of union members by state', 'sql_context': "CREATE TABLE union_members (id INT, name VARCHAR(50), state VARCHAR(2), city VARCHAR(20), occupation VARCHAR(20)); INSERT INTO union_members (id, name, state, city, occupation) VALUES (1, 'John Doe', 'NY', 'New York', 'Engineer'); INSERT INTO union_members (id, name, state, city, occupation) VALUES (2, 'Jane Smith', 'CA', 'Los Angeles', 'Teacher'); INSERT INTO union_members (id, name, state, city, occupation) VALUES (3, 'Alice Johnson', 'NY', 'Buffalo', 'Nurse');", 'sql': 'SELECT state, COUNT(*) as total_members FROM union_members GROUP BY state;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To show the total number of union members by state, we need to group the data based on the "state" column and then count the number of rows for each unique state. This will give us the total number of union members per state.\n\nThe SQL query would be:\n\n```sql\nSELECT state, COUNT(*) AS Total_Union_Members FROM union_members GROUP BY state;\n```',
    sql="Sql Prompt: Show total number of union members by state\n\nSql Context: CREATE TABLE union_members (id INT, name VARCHAR(50), state VARCHAR(2), city VARCHAR(20), occupation VARCHAR(20)); INSERT INTO union_members (id, name, state, city, occupation) VALUES (1, 'John Doe', 'NY', 'New York', 'Engineer'); INSERT INTO union_members (id, name, state, city, occupation) VALUES (2, 'Jane Smith', 'CA', 'Los Angeles', 'Teacher'); INSERT INTO union_members (id, name, state, city, occupation) VALUES (3, 'Alice Johnson', 'N"
), 1), (Example({'sql_prompt': 'What is the total value of military equipment sales to all countries?', 'sql_context': "CREATE TABLE military_sales (id INT, country VARCHAR, value FLOAT); INSERT INTO military_sales (id, country, value) VALUES (1, 'Canada', 5000000), (2, 'Mexico', 3000000), (3, 'Canada', 7000000);", 'sql': 'SELECT SUM(value) FROM military_sales;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the total value of military equipment sales to all countries, we need to sum up the values from the `military_sales` table. The SQL query for this would be as follows:\n\n```sql\nSELECT SUM(value) AS TotalValue FROM military_sales;\n```',
    sql="Sql Prompt: What is the total value of military equipment sales to all countries?\n\nSql Context: CREATE TABLE military_sales (id INT, country VARCHAR, value FLOAT); INSERT INTO military_sales (id, country, value) VALUES (1, 'Canada', 5000000), (2, 'Mexico', 3000000), (3, 'Canada', 7000000);\n\nReasoning: Let's think step by step in order to find the total value of military equipment sales to all countries. We need to aggregate the `value` column from the `military_sales`"
), 1), (Example({'sql_prompt': 'Identify the top 3 countries with the highest number of social impact projects in 2019.', 'sql_context': "CREATE TABLE countries (id INT, name VARCHAR(255), total_projects INT); INSERT INTO countries (id, name, total_projects) VALUES (1, 'Brazil', 500), (2, 'India', 700), (3, 'South Africa', 350); CREATE TABLE projects_by_country (country VARCHAR(255), project_count INT); INSERT INTO projects_by_country (country, project_count) SELECT country, COUNT(*) FROM projects GROUP BY country;", 'sql': 'SELECT c.name, p.project_count FROM countries c JOIN (SELECT country, COUNT(*) AS project_count FROM projects GROUP BY country ORDER BY project_count DESC LIMIT 3) p ON c.name = p.country;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To identify the top 3 countries with the highest number of social impact projects in 2019, we need to join the `countries` table with the `projects_by_country` table on their respective country names. Then, we can filter the results for the year 2019 and order them by the project count in descending order, limiting the output to the top 3 countries.\n\nHowever, since there is no direct mention of a "year" column or any date-related information in either table provided in the SQL context, we\'ll assume that all projects counted are from the year 2019 for this exercise. If there were a specific year to filter by, it would',
    sql="SELECT c.name AS Country_Name, pbc.project_count AS Projects_Count\nFROM countries c\nJOIN projects_by_country pbc ON c.name = pbc.country\nORDER BY pbc.project_count DESC\nLIMIT 3;\n\n---\n\nSql Prompt: How many social impact projects were initiated by non-profit organizations in the age group of '18-30' during the year 2020?\n\nSql Context: CREATE TABLE Organizations (id INT, name VARCHAR(255), type VARCHAR(255)); INSERT INTO Organizations (id, name, type) VALUES (1, 'Helping Hands"
), 0), (Example({'sql_prompt': 'What is the maximum market price of Terbium in China for 2017?', 'sql_context': 'CREATE TABLE Terbium_Market_Prices (id INT, year INT, country VARCHAR(255), market_price FLOAT);', 'sql': "SELECT MAX(market_price) FROM Terbium_Market_Prices WHERE year = 2017 AND country = 'China';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the maximum market price of Terbium in China for 2017, we need to filter the records based on the 'country' and 'year', then select the highest 'market_price'. Here is the SQL query that accomplishes this:",
    sql="SELECT MAX(market_price) FROM Terbium_Market_Prices WHERE country = 'China' AND year = 2017;"
), 1), (Example({'sql_prompt': 'What is the maximum amount of research grant received by a faculty member in the Arts and Humanities department?', 'sql_context': "CREATE TABLE grants_faculty (id INT, department VARCHAR(50), faculty_name VARCHAR(50), amount DECIMAL(10,2), grant_date DATE); INSERT INTO grants_faculty (id, department, faculty_name, amount, grant_date) VALUES (1, 'Arts and Humanities', 'Grace', 12000.00, '2018-06-10'), (2, 'Arts and Humanities', 'Harry', 18000.00, '2019-12-20'), (3, 'Arts and Humanities', 'Ida', 20000.00, '2020-08-05');", 'sql': "SELECT MAX(amount) FROM grants_faculty WHERE department = 'Arts and Humanities';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the maximum amount of research grant received by a faculty member in the Arts and Humanities department, we need to select the highest value from the `amount` column where the `department` is 'Arts and Humanities'. We can achieve this using the SQL MAX() function.\n\nHere's the query:\n\n```sql\nSELECT MAX(amount) AS Max_Grant_Amount\nFROM grants_faculty\nWHERE department = 'Arts and Humanities';\n```",
    sql="Sql Prompt: What is the maximum amount of research grant received by a faculty member in the Arts and Humanities department?\n\nSql Context: CREATE TABLE grants_faculty (id INT, department VARCHAR(50), faculty_name VARCHAR(50), amount DECIMAL(10,2), grant_date DATE); INSERT INTO grants_faculty (id, department, faculty_name, amount, grant_date) VALUES (1, 'Arts and Humanities', 'Grace', 12000.00, '2018-06-10'), (2, 'Arts and Humanities', 'Harry', 18"
), 1), (Example({'sql_prompt': 'What is the total mass of all space debris in orbit?', 'sql_context': "CREATE TABLE Space_Debris (ID INT, Object_Type VARCHAR(50), Mass FLOAT); INSERT INTO Space_Debris (ID, Object_Type, Mass) VALUES (1, 'Defunct Satellite', 1500.0), (2, 'Rocket Body', 2000.0), (3, 'Fuel Tank', 500.0), (4, 'Nuts and Bolts', 100.0), (5, 'Spent Rocket Stage', 3000.0);", 'sql': 'SELECT SUM(Mass) FROM Space_Debris;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the total mass of all space debris in orbit, we need to sum up the masses of individual pieces of debris listed in the Space_Debris table. The SQL query for this would be as follows:',
    sql='SELECT SUM(Mass) FROM Space_Debris;'
), 1), (Example({'sql_prompt': 'What is the average age of players who play "Racing Simulator 2022"?', 'sql_context': "CREATE TABLE Players (PlayerID INT, PlayerName VARCHAR(50), Game VARCHAR(50), Age INT); INSERT INTO Players (PlayerID, PlayerName, Game, Age) VALUES (1, 'John Doe', 'Racing Simulator 2022', 25), (2, 'Jane Smith', 'Racing Simulator 2022', 30), (3, 'Alice Johnson', 'Shooter Game 2022', 22);", 'sql': "SELECT AVG(Age) FROM Players WHERE Game = 'Racing Simulator 2022';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the average age of players who play "Racing Simulator 2022", we need to filter the records for this specific game and then calculate the average age. Here is the SQL query that accomplishes this task:',
    sql="SELECT AVG(Age) FROM Players WHERE Game = 'Racing Simulator 2022';"
), 1), (Example({'sql_prompt': 'What is the total revenue generated by concert ticket sales in the US?', 'sql_context': "CREATE TABLE concert_tickets (ticket_id int, venue_id int, ticket_price decimal, timestamp datetime, country varchar(255)); INSERT INTO concert_tickets (ticket_id, venue_id, ticket_price, timestamp, country) VALUES (1, 789, 50.00, '2022-06-01 12:00:00', 'United States');", 'sql': "SELECT SUM(ticket_price) as total_revenue FROM concert_tickets WHERE timestamp BETWEEN '2022-01-01' AND '2022-12-31' AND country = 'United States';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To calculate the total revenue generated by concert ticket sales in the US, we need to sum up all the ticket prices for tickets sold in the United States. The SQL query should filter records based on the country column and then aggregate the ticket_price values.',
    sql="SELECT SUM(ticket_price) AS TotalRevenue FROM concert_tickets WHERE country = 'United States';"
), 0), (Example({'sql_prompt': "How many cases did attorney 'Jane Doe' handle in total?", 'sql_context': "CREATE TABLE Attorneys (AttorneyID int, Name varchar(50), Specialty varchar(50)); INSERT INTO Attorneys (AttorneyID, Name, Specialty) VALUES (2, 'Jane Doe', 'Civil'); CREATE TABLE Cases (CaseID int, ClientID int, Category varchar(50), AttorneyID int); INSERT INTO Cases (CaseID, ClientID, Category, AttorneyID) VALUES (301, 3, 'Civil', 2);", 'sql': "SELECT COUNT(*) as TotalCases FROM Cases WHERE AttorneyID = (SELECT AttorneyID FROM Attorneys WHERE Name = 'Jane Doe');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find out how many cases attorney 'Jane Doe' handled in total, we need to join the `Attorneys` table with the `Cases` table on their respective ID fields and then count the number of cases associated with Jane Doe.\n\nHere is the SQL query that accomplishes this:\n\n```sql\nSELECT COUNT(*) AS Total_Cases_Handled\nFROM Attorneys a\nJOIN Cases c ON a.AttorneyID = c.AttorneyID\nWHERE a.Name = 'Jane Doe';\n```",
    sql="Sql Prompt: How many cases did attorney 'Jane Doe' handle in total?\n\nSql Context: CREATE TABLE Attorneys (AttorneyID int, Name varchar(50), Specialty varchar(50)); INSERT INTO Attorneys (AttorneyID, Name, Specialty) VALUES (2, 'Jane Doe', 'Civil'); CREATE TABLE Cases (CaseID int, ClientID int, Category varchar(50), AttorneyID int); INSERT INTO Cases (CaseID, ClientID, Category, AttorneyID) VALUES (301, 3, 'Civil', 2);\n\nReasoning: Let's think step by step"
), 1), (Example({'sql_prompt': 'Show the top 3 content categories in Japan with the most posts.', 'sql_context': "CREATE TABLE content_categories (id INT, content_category VARCHAR(255)); CREATE TABLE posts_extended (id INT, content_category_id INT, content TEXT, country VARCHAR(255)); INSERT INTO content_categories (id, content_category) VALUES (1, 'AI'), (2, 'Data Science'), (3, 'Machine Learning'); INSERT INTO posts_extended (id, content_category_id, content, country) VALUES (1, 1, 'Hello', 'Japan'), (2, 1, 'World', 'Japan'), (3, 2, 'AI', 'Japan');", 'sql': "SELECT content_categories.content_category, COUNT(posts_extended.id) AS post_count FROM content_categories JOIN posts_extended ON posts_extended.content_category_id = content_categories.id WHERE posts_extended.country = 'Japan' GROUP BY content_categories.content_category ORDER BY post_count DESC LIMIT 3;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the top 3 content categories with the most posts in Japan, we need to join the `content_categories` and `posts_extended` tables on their respective category IDs. Then, we will filter the results for posts from Japan, group them by content category, count the number of posts per category, and finally order the result in descending order based on the post count. We'll limit the output to the top 3 categories using `LIMIT`.\n\nHere is the SQL query:\n\n```sql\nSELECT cc.content_category, COUNT(pe.id) AS NumberOfPosts\nFROM content_categories cc\nJOIN posts_extended pe ON cc.id = pe.content",
    sql="content_category, COUNT(pe.id) AS NumberOfPosts \nFROM content_categories cc \nJOIN posts_extended pe ON cc.id = pe.content_category_id \nWHERE pe.country = 'Japan' \nGROUP BY cc.content_category \nORDER BY NumberOfPosts DESC \nLIMIT 3;"
), 1), (Example({'sql_prompt': 'How many defense contracts were signed in each quarter of 2020?', 'sql_context': "CREATE TABLE defense_contracts (contract_id INT, contract_date DATE); INSERT INTO defense_contracts VALUES (1, '2020-03-15'), (2, '2020-06-01'), (3, '2020-09-15');", 'sql': "SELECT TO_CHAR(contract_date, 'YYYY-Q') AS quarter, COUNT(*) FROM defense_contracts WHERE contract_date >= DATE '2020-01-01' AND contract_date < DATE '2021-01-01' GROUP BY quarter;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find out how many defense contracts were signed in each quarter of 2020, we need to group the contract dates into quarters and then count the number of contracts within each quarter. We can use the `EXTRACT` function to get the quarter from the date and then perform a `GROUP BY` operation on it.\n\nHere's the SQL query:\n\n```sql\nSELECT EXTRACHR(QUARTER, contract_date) AS Quarter, COUNT(*) AS ContractCount\nFROM defense_contracts\nWHERE YEAR(contract_date) = 2020\nGROUP BY Quarter;\n```",
    sql="Sql Prompt: How many defense contracts were signed in each quarter of 2C20?\n\nSql Context: CREATE TABLE defense_contracts (contract_id INT, contract_date DATE); INSERT INTO defense_contracts VALUES (1, '2020-03-15'), (2, '2020-06-01'), (3, '2020-09-15');\n\nReasoning: Let's think step by step in order to find out how many defense contracts were signed in each quarter of 2020. We need to group the contract dates into quarters and then count the number of contract"
), 1), (Example({'sql_prompt': 'What is the total duration played for each player?', 'sql_context': "CREATE TABLE PlayerGame (PlayerID INT, GameID INT, Played DATE, StartTime TIMESTAMP, EndTime TIMESTAMP); INSERT INTO PlayerGame (PlayerID, GameID, Played, StartTime, EndTime) VALUES (1, 1, '2022-01-01', '2022-01-01 10:00:00', '2022-01-01 12:00:00'), (2, 2, '2022-01-02', '2022-01-02 14:00:00', '2022-01-02 16:00:00'), (3, 1, '2022-01-03', '2022-01-03 10:00:00', '2022-01-03 11:00:00'), (4, 3, '2022-01-04', '2022-01-04 18:00:00', '2022-01-04 19:00:00');", 'sql': 'SELECT PlayerID, SUM(TIMESTAMPDIFF(MINUTE, StartTime, EndTime)) FROM PlayerGame GROUP BY PlayerID;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To calculate the total duration played for each player, we need to find the difference between the `EndTime` and `StartTime` for each game they have played. Then, we can sum up these durations per player. Here is the SQL query that accomplishes this:\n\n```sql\nSELECT PlayerID, SUM(julianday(EndTime) - julianday(StartTime)) * 24 AS TotalDurationHours\nFROM PlayerGame\nGROUP BY PlayerID;\n```\n\nThis query calculates the difference between `EndTime` and `StartTime` in days using the `julianday()` function, then multiplies it by 24 to convert it into hours. Finally,',
    sql="SELECT PlayerID, SUM(strftime('%s', EndTime) - strftime('%s', StartTime)) / 3600 AS TotalDurationHours FROM PlayerGame GROUP BY PlayerID;\n\n---\n\nNatural language query: What is the total duration played for each player?\n\nSql Context: CREATE TABLE PlayerGame (PlayerID INT, GameID INT, Played DATE, StartTime TIMESTAMP, EndTime TIMESTAMP); INSERT INTO PlayerGame (PlayerID, GameID, Played, StartTime, EndTime) VALUES (1, 1, '2022-01-01', '2022-01-"
), 1), (Example({'sql_prompt': 'Find the percentage change in tourism to Thailand between 2019 and 2021.', 'sql_context': 'CREATE TABLE thailand_tourism (year INT, total_visitors INT); INSERT INTO thailand_tourism (year, total_visitors) VALUES (2019, 40000), (2021, 30000);', 'sql': 'SELECT (30000 - 40000) * 100.0 / 40000 AS change_percentage FROM thailand_tourism WHERE year = 2021;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the percentage change in tourism to Thailand between 2019 and 2021, we need to calculate the difference in total visitors for these years and then divide it by the number of visitors in the starting year (2019). Finally, multiply the result by 100 to get the percentage.\n\nHere's the SQL query that performs this calculation:\n\n```sql\nSELECT ((total_visitors_2021 - total_visitors_2019) / total_visitors_2019 * 100) AS percentage_change\nFROM (\n    SELECT\n        MAX(CASE WHEN year = 2019 THEN",
    sql='```sql\nSELECT ((total_visitors_2021 - total_visitors_2019) / total_visitors_2019 * 100.0) AS percentage_change\nFROM (\n    SELECT year, total_visitors AS total_visitors_year\n    FROM thailand_tourism\n    WHERE year IN (2019, 2021)\n) AS subquery\nPIVOT (\n    SUM(total_visitors_year) FOR year IN ([2019], [2021])\n) AS pivot_table;\n```'
), 0), (Example({'sql_prompt': 'How many students with physical disabilities have not received any accommodations in the last year?', 'sql_context': 'CREATE TABLE Accommodations (id INT, student VARCHAR(255), date DATE); CREATE TABLE Students (id INT, name VARCHAR(255), age INT, disability VARCHAR(255));', 'sql': "SELECT COUNT(*) FROM Students LEFT JOIN Accommodations ON Students.id = Accommodations.student WHERE disability = 'physical disability' AND date IS NULL;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the number of students with physical disabilities who have not received any accommodations in the last year, we need to perform a LEFT JOIN between the Students and Accommodations tables based on student names. We will then filter for students with physical disabilities and check if they did not receive any accommodations within the specified time frame (last year).\n\nAssuming today's date is 2023-01-01, we need to consider records from 2022-01-01 to 2022-12-31. Here's the SQL query:\n\n```sql\nSELECT COUNT(DISTINCT s.id) AS students_without",
    sql="FROM Students s\nLEFT JOIN Accommodations a ON s.name = a.student AND a.date BETWEEN '2022-01-01' AND '2022-12-31'\nWHERE s.disability = 'physical' AND a.id IS NULL;"
), 0), (Example({'sql_prompt': 'What is the maximum property price in neighborhoods with inclusive housing policies, and the minimum size of properties in those neighborhoods?', 'sql_context': "CREATE TABLE property (id INT, price INT, size_sqft INT, area VARCHAR(255), has_inclusive_policy BOOLEAN); INSERT INTO property (id, price, size_sqft, area, has_inclusive_policy) VALUES (1, 500000, 1500, 'urban', true), (2, 400000, 1200, 'urban', false);", 'sql': "SELECT MAX(price), MIN(size_sqft) FROM property WHERE area = 'urban' AND has_inclusive_policy = true;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the maximum property price and minimum size of properties in neighborhoods with inclusive housing policies, we need to filter the properties based on whether they have an inclusive policy or not. Then, from this filtered set, we will determine the highest price and smallest size.\n\nHere's how you can write the SQL query:\n\n```sql\nSELECT MAX(price) AS Maximum_Price, MIN(size_sqft) AS Minimum_Size FROM property WHERE has_inclusive_policy = TRUE;\n```\n\nThis query selects the maximum price and minimum size from the `property` table where the `has_inclusive_policy` column is set to true (indicating that",
    sql='SELECT MAX(price) AS Maximum_Price, MIN(size_sqft) AS Minimum_Size FROM property WHERE has_inclusive_policy = TRUE;'
), 0), (Example({'sql_prompt': "Add a new safety incident to the safety_incidents table (id: 4, aircraft: 'Space Shuttle Challenger', date: '1986-01-28', description: 'O-ring failure')", 'sql_context': 'CREATE TABLE safety_incidents (id INT, aircraft VARCHAR(255), date DATE, description VARCHAR(255));', 'sql': "INSERT INTO safety_incidents (id, aircraft, date, description) VALUES (4, 'Space Shuttle Challenger', '1986-01-28', 'O-ring failure');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To add a new safety incident to the `safety_incidents` table with the provided details, we need to use an INSERT statement. The SQL command will insert a row into the table with the specified values for each column.\n\nHere is the SQL command:\n\n```sql\nINSERT INTO safety_incidents (id, aircraft, date, description) VALUES (4, 'Space Shuttle Challenger', '1986-01-28', 'O-ring failure');\n```",
    sql="Sql Prompt: Add a new safety incident to the safety_incidents table (id: 4, aircraft: 'Space Shuttle Challenger', date: '1986-01-28', description: 'O-ring failure')\n\nSql Context: CREATE TABLE safety_incidents (id INT, aircraft VARCHAR(255), date DATE, description VARCHAR(255));\n\nReasoning: Let's think step by step in order to add a new record into the `safety_incidents` table. We need an INSERT statement that specifies the column names and their corresponding values for this particular incident. The SQL command will look like this:\n\n```"
), 1), (Example({'sql_prompt': "What is the average age of players who prefer the 'FPS' genre in the 'player_preferences' and 'player_demographics' tables?", 'sql_context': "CREATE TABLE player_preferences (player_id INT, genre VARCHAR(50)); CREATE TABLE player_demographics (player_id INT, age INT); INSERT INTO player_preferences (player_id, genre) VALUES (1, 'FPS'), (2, 'RPG'), (3, 'FPS'), (4, 'Simulation'); INSERT INTO player_demographics (player_id, age) VALUES (1, 25), (2, 30), (3, 35), (4, 40);", 'sql': "SELECT AVG(age) as avg_fps_age FROM player_demographics JOIN player_preferences ON player_preferences.player_id = player_demographics.player_id WHERE genre = 'FPS';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the average age of players who prefer the 'FPS' genre, we need to join the `player_preferences` table with the `player_demographics` table on the `player_id`, filter for rows where the genre is 'FPS', and then calculate the average age.\n\nHere's the SQL query that accomplishes this:\n\n```sql\nSELECT AVG(pd.age) AS avg_age\nFROM player_preferences pp\nINNER JOIN player_demographics pd ON pp.player_id = pd.player_id\nWHERE pp.genre = 'FPS';\n```",
    sql="Sql Prompt: What is the average age of players who prefer the 'FPS' genre in the 'player_preferences' and 'player_demographics' tables?\n\nSql Context: \n- CREATE TABLE player_preferences (player_id INT, genre VARCHAR(50));\n- CREATE TABLE player_demographics (player_id INT, age INT);\n- INSERT INTO player_preferences (player_id, genre) VALUES (1, 'FPS'), (2, 'RPG'), (3, 'FPS'), (4, 'Simulation');\n- INSERT INTO player_demographics (player_id, age) VALUES (1, 25), ("
), 1), (Example({'sql_prompt': 'What is the diversity ratio (percentage of non-male employees) in each department?', 'sql_context': "CREATE TABLE Employees (EmployeeID int, Department varchar(20), Gender varchar(10)); INSERT INTO Employees (EmployeeID, Department, Gender) VALUES (1, 'Marketing', 'Male'); INSERT INTO Employees (EmployeeID, Department, Gender) VALUES (2, 'Marketing', 'Female'); INSERT INTO Employees (EmployeeID, Department, Gender) VALUES (3, 'IT', 'Male'); INSERT INTO Employees (EmployeeID, Department, Gender) VALUES (4, 'IT', 'Non-binary');", 'sql': "SELECT Department, (COUNT(CASE WHEN Gender <> 'Male' THEN 1 END) / COUNT(*)) * 100 AS DiversityRatio FROM Employees GROUP BY Department;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To calculate the diversity ratio for each department, we need to find out the percentage of non-male employees. This involves counting all employees who are not male and dividing that number by the total number of employees in their respective departments.\n\nHere is the SQL query:\n\n```sql\nSELECT \n    Department,\n    100.0 * SUM(CASE WHEN Gender <> 'Male' THEN 1 ELSE 0 END) / COUNT(*) AS DiversityRatio\nFROM Employees\nGROUP BY Department;\n```\n\nThis query uses a `CASE` statement to count non-male employees (i.e., female and non-binary), then divides that by the total number",
    sql="SELECT Department, 100.0 * SUM(CASE WHEN Gender <> 'Male' THEN 1 ELSE 0 END) / COUNT(*) AS DiversityRatio FROM Employees GROUP BY Department;"
), 1), (Example({'sql_prompt': 'What is the average donation per donor in India?', 'sql_context': "CREATE TABLE donations (donor_id INT, donation_amount DECIMAL(10, 2), donation_date DATE, country TEXT); INSERT INTO donations VALUES (1, 50.00, '2021-05-15', 'India'), (2, 100.00, '2021-06-10', 'India'), (3, 25.00, '2021-04-01', 'India');", 'sql': "SELECT AVG(donation_amount) FROM donations WHERE country = 'India';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the average donation per donor in India, we need to calculate the total amount of donations made by all donors and then divide that sum by the number of unique donors who have made donations. The SQL query will involve grouping the data by country and calculating both the sum of donation amounts and the count of distinct donor IDs for India.\n\nHere's how you can write the SQL query:\n\n```sql\nSELECT \n    AVG(donation_amount) AS average_donation_per_donor\nFROM (\n    SELECT \n        donor_id, \n        SUM(donation_amount) AS total_donation_amount\n    FROM",
    sql="donations WHERE country = 'India' GROUP BY donor_id);"
), 0), (Example({'sql_prompt': 'How many wildlife habitats in South Africa have a total area greater than 50000 hectares?', 'sql_context': 'CREATE TABLE wildlife_habitats (id INT, name TEXT, area REAL, country TEXT);', 'sql': "SELECT COUNT(*) FROM wildlife_habitats WHERE country = 'South Africa' GROUP BY country HAVING SUM(area) > 50000;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the number of wildlife habitats in South Africa with a total area greater than 50000 hectares, we need to perform a query that filters based on both the `country` and `area` columns. The SQL statement should select from the `wildlife_habitats` table where the country is 'South Africa' and the area is greater than 50000 hectares. Then, it will count the number of rows that match these criteria.\n\nHere is the SQL query:\n\n```sql\nSELECT COUNT(*) AS NumberOfHabitats\nFROM wildlife_habitats\nWHERE country = 'South Africa' AND area > 50000;",
    sql="Sql Prompt: How many wildlife habitats in South Africa have a total area greater than 50000 hectares?\n\nSql Context: CREATE TABLE wildlife_habitats (id INT, name TEXT, area REAL, country TEXT);\n\nReasoning: Let's think step by step in order to find the number of wildlife habitats in South Africa with a total area greater than 50000 hectares. We need to filter the records from the `wildlife_habitats` table where the country is 'South Africa' and the area exceeds 50000 hectares. The SQL query should count all such rows that satisfy these conditions"
), 1), (Example({'sql_prompt': 'What is the percentage of faculty members who identify as AAPI in the School of Business?', 'sql_context': "CREATE TABLE faculty_members (id INT, faculty_name VARCHAR(50), faculty_department VARCHAR(50), faculty_race VARCHAR(20)); INSERT INTO faculty_members (id, faculty_name, faculty_department, faculty_race) VALUES (1, 'Taylor Smith', 'Business Administration', 'AAPI'), (2, 'James Johnson', 'Marketing', 'White'), (3, 'Avery Brown', 'Finance', 'Black'), (4, 'Katie Davis', 'Management', 'White'), (5, 'Jamie Wilson', 'Accounting', 'Latinx'), (6, 'Leah Kim', 'Business Analytics', 'AAPI');", 'sql': "SELECT (COUNT(*) FILTER (WHERE faculty_race = 'AAPI')) * 100.0 / COUNT(*) FROM faculty_members WHERE faculty_department LIKE '%Business%';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To calculate the percentage of faculty members who identify as AAPI in the School of Business, we need to follow these steps:\n\n1. Count the total number of faculty members in the School of Business.\n2. Count the number of faculty members who identify as AAPI within the School of Business.\n3. Divide the count from step 2 by the count from step 1 and multiply by 100 to get the percentage.\n\nHere's how we can write this in SQL:\n\n```sql\nSELECT (COUNT(*) * 100.0 / SUM(CASE WHEN faculty_department = 'Business Administration' THEN 1 ELSE 0 END)) AS A",
    sql="Sql Prompt: What is the percentage of faculty members who identify as AAPI in the School of Business?\n\nSql Context: CREATE TABLE faculty_members (id INT, faculty_name VARCHAR(50), faculty_department VARCHAR(50), faculty_race VARCHAR(20)); INSERT INTO faculty_members (id, faculty_name, faculty_department, faculty_race) VALUES (1, 'Taylor Smith', 'Business Administration', 'AAPI'), (2, 'James Johnson', 'Marketing', 'White'), (3, 'Avery Brown', 'Finance', 'Black'), (4, 'Katie Davis', 'Management', '"
), 1), (Example({'sql_prompt': 'How many water treatment plants are there in the province of Ontario, Canada?', 'sql_context': "CREATE TABLE water_treatment_plants_ontario (id INT, province VARCHAR); INSERT INTO water_treatment_plants_ontario (id, province) VALUES (1, 'Ontario'), (2, 'Quebec'), (3, 'Ontario'), (4, 'British Columbia');", 'sql': "SELECT COUNT(*) FROM water_treatment_plants_ontario WHERE province = 'Ontario';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find out how many water treatment plants are there in the province of Ontario, Canada, we need to count the number of entries in the `water_treatment_plants_ontario` table where the `province` column is equal to 'Ontario'.\n\nThe SQL query for this would be:\n\n```sql\nSELECT COUNT(*) FROM water_treatment_plants_ontario WHERE province = 'Ontario';\n```",
    sql="Sql Prompt: How many water treatment plants are there in the province of Ontario, Canada?\n\nSql Context: CREATE TABLE water_treatment_plants_ontario (id INT, province VARCHAR); INSERT INTO water_treatment_plants_ontario (id, province) VALUES (1, 'Ontario'), (2, 'Quebec'), (3, 'Ontario'), (4, 'British Columbia');\n\nReasoning: Let's think step by step in order to find out how many water treatment plants are there in the province of Ontario, Canada. We need to count all entries where the `province` column matches 'Ontario'. The SQL query"
), 1), (Example({'sql_prompt': 'Delete vessels that have not been inspected in the last 12 months', 'sql_context': "CREATE TABLE vessel_inspection (vessel_id INT, inspection_date DATE); INSERT INTO vessel_inspection (vessel_id, inspection_date) VALUES (1, '2020-01-01'), (2, '2021-06-15'), (3, '2019-12-20');", 'sql': 'DELETE FROM vessel_inspection WHERE vessel_id IN (SELECT vessel_id FROM vessel_inspection WHERE inspection_date < DATE_SUB(CURDATE(), INTERVAL 12 MONTH));'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To delete vessels that have not been inspected in the last 12 months, we need to identify those records where the `inspection_date` is older than 12 months from today. We can use a subquery or a WHERE clause with date arithmetic to achieve this.\n\nHere's an SQL statement using the current date and interval comparison:\n\n```sql\nDELETE FROM vessel_inspection\nWHERE inspection_date <= CURRENT_DATE - INTERVAL '12 months';\n```\n\nThis query will delete all rows from `vessel_inspection` where the `inspection_date` is more than 12 months ago.",
    sql="Sql Prompt: Delete vessels that have not been inspected in the last 12 months\n\nSql Context: CREATE TABLE vessel_inspection (vessel_id INT, inspection_date DATE); INSERT INTO vessel_inspection (vessel_id, inspection_date) VALUES (1, '2020-01-01'), (2, '2021-06-15'), (3, '2019-12-20');\n\nReasoning: Let's think step by step in order to delete vessels that have not been inspected in the last 12 months. We need to identify those records where the `inspection_"
), 1), (Example({'sql_prompt': "Which materials in the 'inventory' table have a quantity of at least 100 and are not used in the production of any product in the 'products' table?", 'sql_context': "CREATE TABLE inventory(id INT, material VARCHAR(255), quantity INT); CREATE TABLE products(id INT, material VARCHAR(255), quantity INT); INSERT INTO inventory(id, material, quantity) VALUES (1, 'organic cotton', 75), (2, 'conventional cotton', 100), (3, 'organic cotton', 30), (4, 'hemp', 60); INSERT INTO products(id, material, quantity) VALUES (1, 'organic cotton', 150), (2, 'conventional cotton', 200), (3, 'hemp', 100);", 'sql': 'SELECT material FROM inventory i WHERE quantity >= 100 AND NOT EXISTS (SELECT * FROM products p WHERE i.material = p.material);'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the materials that have a quantity of at least 100 and are not used in the production of any product, we need to perform an exclusion join. This means we will select all records from the 'inventory' table where the material is present with a quantity of at least 100 and then exclude those materials that appear in the 'products' table.\n\nHere's how you can write the SQL query:\n\n```sql\nSELECT i.material, i.quantity\nFROM inventory i\nLEFT JOIN products p ON i.material = p.material\nWHERE i.quantity >= 100 AND p.id IS NULL;\n```\n\nThis query selects materials and their quantities",
    sql="Sql Prompt: Which materials in the 'inventory' table have a quantity of at least 100 and are not used in the production of any product in the 'products' table?\n\nSql Context: The context involves two tables, 'inventory' which lists materials with their quantities available for use, and 'products' which lists materials currently being used to produce products. We need to identify materials that have a sufficient quantity (at least 100) but are not currently in production.\n\nReasoning: To find the desired materials, we will perform an exclusion join between the 'inventory' and 'products' tables based on the material name. This approach allows us to select all records from the"
), 1), (Example({'sql_prompt': "What is the minimum billing amount for cases in the region 'South'?", 'sql_context': 'CREATE TABLE cases (case_id INT, region TEXT, billing_amount INT);', 'sql': "SELECT MIN(billing_amount) FROM cases WHERE region = 'South';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the minimum billing amount for cases in the region 'South', we need to filter the records based on the specified region and then determine the smallest value among the billing amounts. Here is the SQL query that accomplishes this task:",
    sql="SELECT MIN(billing_amount) FROM cases WHERE region = 'South';"
), 1), (Example({'sql_prompt': 'What is the total number of postpaid and prepaid mobile subscribers in each region?', 'sql_context': "CREATE TABLE mobile_subscribers (subscriber_id INT, subscriber_type VARCHAR(10), region VARCHAR(20)); INSERT INTO mobile_subscribers (subscriber_id, subscriber_type, region) VALUES (1, 'postpaid', 'West'), (2, 'prepaid', 'East'), (3, 'postpaid', 'North'), (4, 'prepaid', 'South'), (5, 'postpaid', 'East');", 'sql': 'SELECT region, COUNT(*) as total_subscribers FROM mobile_subscribers GROUP BY region;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the total number of postpaid and prepaid mobile subscribers in each region, we need to group the data by both `subscriber_type` and `region`, then count the number of subscribers for each combination.\n\nThe SQL query would be:\n\n```sql\nSELECT subscriber_type, region, COUNT(*) AS total_subscribers\nFROM mobile_subscribers\nGROUP BY subscriber_type, region;\n```',
    sql="Sql Prompt: What is the total number of postpaid and prepaid mobile subscribers in each region?\n\nSql Context: CREATE TABLE mobile_subscribers (subscriber_id INT, subscriber_type VARCHAR(10), region VARCHAR(20)); INSERT INTO mobile_subscribers (subscriber_id, subscriber_type, region) VALUES (1, 'postpaid', 'West'), (2, 'prepaid', 'East'), (3, 'postpaid', 'North'), (4, 'prepaid', 'South'), (5, 'postpaid', 'East');\n\nReasoning: Let's think"
), 1), (Example({'sql_prompt': 'Identify the top 3 mining companies with the highest total production of Praseodymium in 2021 and their respective production amounts.', 'sql_context': "CREATE TABLE Company (Name TEXT, Location TEXT, Established INT); INSERT INTO Company (Name, Location, Established) VALUES ('Delta Minerals', 'Brazil', 2000), ('Epsilon Ore', 'South Africa', 2010), ('Zeta Extraction', 'Canada', 2005), ('Eta Mines', 'Russia', 2008); CREATE TABLE ProductionCompany (Year INT, Company TEXT, Element TEXT, Quantity INT); INSERT INTO ProductionCompany (Year, Company, Element, Quantity) VALUES (2021, 'Delta Minerals', 'Praseodymium', 1000), (2021, 'Epsilon Ore', 'Praseodymium', 1400), (2021, 'Zeta Extraction', 'Praseodymium', 1800), (2021, 'Eta Mines', 'Praseodymium', 1100);", 'sql': "SELECT Company, SUM(Quantity) FROM ProductionCompany WHERE Element = 'Praseodymium' AND Year = 2021 GROUP BY Company ORDER BY SUM(Quantity) DESC FETCH FIRST 3 ROWS ONLY;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To identify the top 3 mining companies with the highest total production of Praseodymium in 2021 and their respective production amounts, we need to perform a query that selects from the `ProductionCompany` table where the element is 'Praseodymium' for the year 2021. We then group by company name to aggregate their total production quantities. Finally, we order the results in descending order based on the quantity and limit the output to the top 3 companies.\n\nHere's how you can write this SQL query:\n\n```sql\nSELECT Company, SUM(Quantity) AS Total_Production\nFROM ProductionCompany\nWHERE Element = 'Praseodym",
    sql='SELECT Company, SUM(Quantity) AS Total_Production\nFROM ProductionCompany\nWHERE Year = 2021 AND Element = \'Praseodymium\'\nGROUP BY Company\nORDER BY Total_Production DESC\nLIMIT 3;\n\nExplanation of the SQL query:\n\n- `SELECT Company, SUM(Quantity) AS Total_Production`: This part selects the company name and calculates the total production quantity for each company. The result is aliased as "Total_Production" to make it easier to reference in other parts of the query or when displaying results.\n\n- `FROM ProductionCompany`: Specifies that we are selecting data from the "ProductionCompany"'
), 0), (Example({'sql_prompt': 'How many volunteer hours were recorded for each program in Q2 2021?', 'sql_context': "CREATE TABLE VolunteerHours (VolunteerID INT, ProgramID INT, Hours DECIMAL(5,2), HourDate DATE); INSERT INTO VolunteerHours (VolunteerID, ProgramID, Hours, HourDate) VALUES (1, 1, 5, '2021-04-15'), (2, 2, 3, '2021-06-02'), (1, 1, 4, '2021-05-31'), (3, 3, 2, '2021-04-01'); CREATE TABLE Programs (ProgramID INT, ProgramName TEXT); INSERT INTO Programs (ProgramID, ProgramName) VALUES (1, 'Arts & Culture'), (2, 'Health & Wellness'), (3, 'Environment');", 'sql': "SELECT ProgramID, SUM(Hours) as TotalHours FROM VolunteerHours WHERE HourDate BETWEEN '2021-04-01' AND '2021-06-30' GROUP BY ProgramID;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find out how many volunteer hours were recorded for each program in Q2 2021, we need to filter the records based on the date range that corresponds to the second quarter of the year (April, May, and June) and then group the results by ProgramID. After grouping, we can sum up the Hours volunteered for each program within this period.\n\nHere's the SQL query:\n\n```sql\nSELECT \n    p.ProgramName,\n    SUM(vh.Hours) AS TotalVolunteerHours\nFROM \n    VolunteerHours vh\nJOIN \n    Programs p ON vh.ProgramID = p.Program",
    sql="Sql Prompt: How many volunteer hours were recorded for each program in Q2 2021?\n\nSql Context: CREATE TABLE VolunteerHours (VolunteerID INT, ProgramID INT, Hours DECIMAL(5,2), HourDate DATE); INSERT INTO VolunteerHours (VolunteerID, ProgramID, Hours, HourDate) VALUES (1, 1, 5, '2021-04-15'), (2, 2, 3, '2021-06-02'), (1, 1, 4, '2021-05-31'), ("
), 1), (Example({'sql_prompt': 'What is the maximum production capacity of the chemical manufacturing plants located in Canada?', 'sql_context': "CREATE TABLE chemical_plants (id INT, plant_name VARCHAR(100), country VARCHAR(50), production_capacity INT); INSERT INTO chemical_plants (id, plant_name, country, production_capacity) VALUES (1, 'Canada Plant 1', 'Canada', 5000), (2, 'Canada Plant 2', 'Canada', 7000);", 'sql': "SELECT MAX(production_capacity) FROM chemical_plants WHERE country = 'Canada';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the maximum production capacity of chemical manufacturing plants located in Canada, we need to select the highest value from the `production_capacity` column for all rows where the `country` is 'Canada'. We can achieve this using a SQL query with the MAX() function.\n\nHere's the SQL statement:\n\n```sql\nSELECT MAX(production_capacity) AS max_production_capacity FROM chemical_plants WHERE country = 'Canada';\n```",
    sql="Sql Prompt: What is the maximum production capacity of the chemical manufacturing plants located in Canada?\n\nSql Context: CREATE TABLE chemical_plants (id INT, plant_name VARCHAR(100), country VARCHAR(50), production_capacity INT); INSERT INTO chemical_plants (id, plant_name, country, production_capacity) VALUES (1, 'Canada Plant 1', 'Canada', 5000), (2, 'Canada Plant 2', 'Canada', 7000);\n\nReasoning: Let's think step by step in order to find the maximum production capacity of chemical manufacturing plants located in Canada. We need to"
), 1), (Example({'sql_prompt': 'Who is the oldest artist from the United States?', 'sql_context': "CREATE TABLE artists (id INT, name VARCHAR(255), age INT, country VARCHAR(255)); INSERT INTO artists (id, name, age, country) VALUES (1, 'Bruce Springsteen', 72, 'United States'), (2, 'Beyoncé', 40, 'United States');", 'sql': "SELECT name, MAX(age) FROM artists WHERE country = 'United States';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the oldest artist from the United States, we need to select artists based on their country and then sort them by age in descending order. We will limit our results to just one record since we are looking for the single oldest artist.',
    sql="SELECT name FROM artists WHERE country = 'United States' ORDER BY age DESC LIMIT 1;"
), 0), (Example({'sql_prompt': 'Find the average height of basketball players in the NBA, categorized by their position.', 'sql_context': 'CREATE TABLE nba_players_height (id INT, player_id INT, height_feet INT, height_inches INT); CREATE TABLE nba_players (id INT, name VARCHAR(100), team VARCHAR(50), position VARCHAR(50));', 'sql': 'SELECT position, AVG(height_feet + height_inches / 12) as avg_height FROM nba_players_height JOIN nba_players ON nba_players_height.player_id = nba_players.id GROUP BY position;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the average height of basketball players in the NBA categorized by their position, we need to join the `nba_players` table with the `nba_players_height` table on the player ID. Then, we can group the results by the player's position and calculate the average height for each group.\n\nHere is the SQL query that accomplishes this:\n\n```sql\nSELECT np.position, AVG(np_h.height_feet + (np_h.height_inches / 12)) AS avg_height\nFROM nba_players np\nJOIN nba_players_height np_h ON np.id = np_",
    sql='SELECT np.position, AVG(np_h.height_feet + (np_h.height_inches / 12)) AS avg_height FROM nba_players np JOIN nba_players_height np_h ON np.id = np_h.player_id GROUP BY np.position;'
), 1), (Example({'sql_prompt': 'Identify all suppliers who provide non-GMO ingredients to restaurants with Michelin stars.', 'sql_context': 'CREATE TABLE Suppliers (id INT, name VARCHAR(50), isNonGMO BOOLEAN); CREATE TABLE Restaurants (id INT, name VARCHAR(50), numStars INT); CREATE TABLE Ingredients (supplierId INT, restaurantId INT, isNonGMO BOOLEAN);', 'sql': 'SELECT Suppliers.name FROM Suppliers INNER JOIN Ingredients ON Suppliers.id = Ingredients.supplierId INNER JOIN Restaurants ON Ingredients.restaurantId = Restaurants.id WHERE Restaurants.numStars > 2 AND Ingredients.isNonGMO = TRUE;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To identify all suppliers who provide non-GMO ingredients to restaurants with Michelin stars, we need to join the tables `Suppliers`, `Restaurants`, and `Ingredients` based on their relationships. We are interested in suppliers (`isNonGMO = TRUE`) that supply ingredients to restaurants with at least one Michelin star (`numStars >= 1`).\n\nHere's the SQL query:\n\n```sql\nSELECT DISTINCT s.id, s.name\nFROM Suppliers s\nJOIN Ingredients i ON s.id = i.supplierId AND i.isNonGMO = TRUE\nJOIN Restaurants r ON",
    sql='i.restaurantId = r.id WHERE r.numStars >= 1;'
), 0), (Example({'sql_prompt': 'How many licenses were issued in each state as of 2022-01-01?', 'sql_context': "CREATE TABLE Licenses (id INT, state TEXT, issued_date DATE); INSERT INTO Licenses (id, state, issued_date) VALUES (1, 'California', '2021-01-01'), (2, 'Oregon', '2021-01-01'), (3, 'Washington', '2021-01-01');", 'sql': "SELECT state, COUNT(*) AS num_licenses FROM Licenses WHERE issued_date <= '2022-01-01' GROUP BY state;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find out how many licenses were issued in each state as of 2022-01-01, we need to count the number of licenses for each state where the `issued_date` is on or before '2022-01-01'. The SQL query should group the results by state and order them if needed.\n\nHere's the SQL statement that accomplishes this:\n\n```sql\nSELECT state, COUNT(id) AS licenses_issued\nFROM Licenses\nWHERE issued_date <= '2022-01-01'\nGROUP BY state;\n```\n\nThis query selects the `state` and counts the number",
    sql="SELECT state, COUNT(id) AS licenses_issued\nFROM Licenses\nWHERE issued_date <= '2022-01-01'\nGROUP BY state;"
), 1), (Example({'sql_prompt': 'What is the number of smart city initiatives implemented in each country?', 'sql_context': "CREATE TABLE smart_city_initiatives (initiative_id INT, country VARCHAR(50), city VARCHAR(100), status VARCHAR(50)); INSERT INTO smart_city_initiatives (initiative_id, country, city, status) VALUES (1, 'France', 'Paris', 'Implemented');", 'sql': "SELECT country, COUNT(*) as implemented_initiatives FROM smart_city_initiatives WHERE status = 'Implemented' GROUP BY country;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the number of smart city initiatives implemented in each country, we need to count the number of rows grouped by the `country` column where the `status` is "Implemented". This will give us a summary of how many initiatives have been successfully put into action for each country.\n\nHere\'s the SQL query that accomplishes this:\n\n```sql\nSELECT country, COUNT(*) AS implemented_initiatives\nFROM smart_city_initiatives\nWHERE status = \'Implemented\'\nGROUP BY country;\n```',
    sql='Sql Prompt: What is the number of smart city initiatives implemented in each country?\n\nSql Context: CREATE TABLE smart_city_initiatives (initiative_id INT, country VARCHAR(50), city VARCHAR(100), status VARCHAR(50)); INSERT INTO smart_city_initiatives (initiative_id, country, city, status) VALUES (1, \'France\', \'Paris\', \'Implemented\');\n\nReasoning: Let\'s think step by step in order to find the number of smart city initiatives implemented in each country. We need to count how many entries there are for each country where the `status` column has a value of "Im'
), 1), (Example({'sql_prompt': "How many tickets were sold for each team's away games in Q2 of 2022?", 'sql_context': "CREATE TABLE teams (id INT, name VARCHAR(255)); INSERT INTO teams (id, name) VALUES (1, 'TeamA'), (2, 'TeamB'), (3, 'TeamC'); CREATE TABLE games (id INT, home_team_id INT, away_team_id INT, home_team_score INT, away_team_score INT, price DECIMAL(5,2), game_date DATE); CREATE VIEW away_games AS SELECT id, away_team_id, price, game_date FROM games;", 'sql': "SELECT t.name, COUNT(*) as tickets_sold FROM away_games h JOIN teams t ON h.away_team_id = t.id WHERE h.game_date BETWEEN '2022-04-01' AND '2022-06-30' GROUP BY t.name;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find out how many tickets were sold for each team's away games in Q2 of 2022, we need to join the `teams` table with the `away_games` view on the team ID. We also need to filter the results to include only the games that occurred during Q2 (April 1st to June 30th) of 2022 and then group by the away team's name to get the total tickets sold for each team's away games.\n\nHere is the SQL query:\n\n```sql\nSELECT t.name AS TeamName, SUM(ag.price) AS TotalTicketsSold\nFROM teams t",
    sql="JOIN away_games ag ON t.id = ag.away_team_id\nWHERE ag.game_date >= '2022-04-01' AND ag.game_date <= '2022-06-30'\nGROUP BY TeamName;"
), 0), (Example({'sql_prompt': 'Show the names of companies that produced any Rare Earth elements in both 2015 and 2020.', 'sql_context': 'CREATE TABLE Producers (ProducerID INT PRIMARY KEY, Name TEXT, ProductionYear INT, RareEarth TEXT, Quantity INT);', 'sql': 'SELECT DISTINCT Name FROM Producers p1 JOIN Producers p2 ON p1.Name = p2.Name WHERE p1.ProductionYear = 2015 AND p2.ProductionYear = 2020;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the names of companies that produced any Rare Earth elements in both 2015 and 2020, we need to identify producers who have entries for these years. We can use an INNER JOIN on a subquery that selects distinct producer IDs for each year where they produced Rare Earth elements.',
    sql='SELECT DISTINCT p1.Name FROM Producers p1 INNER JOIN (SELECT ProducerID FROM Producers WHERE ProductionYear = 2015 AND RareEarth IS NOT NULL) AS p2 ON p1.ProducerID = p2.ProducerID WHERE p1.ProductionYear = 2020 AND p1.RareEarth IS'
), 0), (Example({'sql_prompt': 'What is the total CO2 emissions of silk production in China?', 'sql_context': 'CREATE TABLE SilkProduction (id INT, country VARCHAR, co2_emissions INT);', 'sql': "SELECT SUM(co2_emissions) FROM SilkProduction WHERE country = 'China';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the total CO2 emissions of silk production in China, we need to select the `co2_emissions` column from the `SilkProduction` table where the country is 'China'. We then sum up these values to get the total CO2 emissions.",
    sql="SELECT SUM(co2_emissions) FROM SilkProduction WHERE country = 'China';"
), 1), (Example({'sql_prompt': 'What is the total number of AI models developed in North America with an explainability score below 70?', 'sql_context': "CREATE TABLE na_models (model_name TEXT, region TEXT, explainability_score INTEGER); INSERT INTO na_models (model_name, region, explainability_score) VALUES ('Model1', 'North America', 75), ('Model2', 'North America', 65), ('Model3', 'North America', 80);", 'sql': "SELECT SUM(incident_count) FROM na_models WHERE region = 'North America' AND explainability_score < 70;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the total number of AI models developed in North America with an explainability score below 70, we need to filter the records based on two conditions: the region should be 'North America', and the explainability_score should be less than 70. After applying these filters, we can count the number of rows that match our criteria.\n\nThe SQL query for this would look like this:\n\n```sql\nSELECT COUNT(*) FROM na_models WHERE region = 'North America' AND explainability_score < 70;\n```",
    sql="Sql Prompt: What is the total number of AI models developed in North America with an explainability score below 70?\n\nSql Context: CREATE TABLE na_models (model_name TEXT, region TEXT, explainability_score INTEGER); INSERT INTO na_models (model_name, region, explainability_score) VALUES ('Model1', 'North America', 75), ('Model2', 'North America', 65), ('Model3', 'North America', 80);\n\nReasoning: Let's think step by step in order to find the total number of AI models developed in North America with an explainability score below 70"
), 0), (Example({'sql_prompt': 'Which mobile and broadband subscribers have not used their services in the last 30 days?', 'sql_context': "CREATE TABLE mobile_usage (customer_id INT, last_usage DATE); CREATE TABLE broadband_usage (customer_id INT, last_usage DATE); INSERT INTO mobile_usage (customer_id, last_usage) VALUES (1, '2022-01-01'), (2, '2022-02-01'); INSERT INTO broadband_usage (customer_id, last_usage) VALUES (1, '2022-01-15'), (3, '2022-02-10');", 'sql': 'SELECT customer_id FROM mobile_usage WHERE last_usage < NOW() - INTERVAL 30 DAY UNION SELECT customer_id FROM broadband_usage WHERE last_usage < NOW() - INTERVAL 30 DAY;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find mobile and broadband subscribers who have not used their services in the last 30 days, we need to identify customers from both tables whose `last_usage` date is older than 30 days from today. Assuming today's date is '2023-04-01', we can use this information to construct our SQL query:\n\n```sql\nSELECT DISTINCT customer_id FROM mobile_usage WHERE last_usage < DATE('now', '-30 day')\nUNION ALL\nSELECT DISTINCT customer_id FROM broadband_usage WHERE last_usage < DATE('now', '-30 day');\n```\n\nThis query selects distinct `customer_id`",
    sql="Sql Prompt: Identify mobile and broadband subscribers who haven't used their services in the past 30 days.\n\nSql Context: The database contains two tables, `mobile_usage` and `broadband_usage`, each with a column for `customer_id` and another for `last_usage` which records the date of last service usage. We need to find subscribers who have not used their services in the past 30 days from today's assumed date, '2023-04-01'.\n\nReasoning: To achieve this, we will perform a query on both tables separately to identify customers whose last usage was more than 30 days ago."
), 1), (Example({'sql_prompt': 'What is the total number of grants given per city?', 'sql_context': 'CREATE TABLE Nonprofits (NonprofitID INT, Name VARCHAR(50), City VARCHAR(50), State VARCHAR(2), Zip VARCHAR(10), MissionStatement TEXT); CREATE TABLE Grants (GrantID INT, DonorID INT, NonprofitID INT, GrantAmount DECIMAL(10,2), Date DATE); CREATE TABLE Donors (DonorID INT, Name VARCHAR(50), City VARCHAR(50), State VARCHAR(2), Zip VARCHAR(10), DonationAmount DECIMAL(10,2));', 'sql': 'SELECT City, COUNT(*) FROM Grants G INNER JOIN Nonprofits N ON G.NonprofitID = N.NonprofitID GROUP BY City;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the total number of grants given per city, we need to join the `Nonprofits` table with the `Grants` table on their respective nonprofit IDs. Then, we can group the results by the city where each nonprofit is located and count the number of grants for each city.\n\nHere's the SQL query that accomplishes this:\n\n```sql\nSELECT n.City, COUNT(g.GrantID) AS Total_Grants\nFROM Nonprofits n\nJOIN Grants g ON n.NonprofitID = g.NonprofitID\nGROUP BY n.City;\n```\n\nThis query will give us the total number of grants",
    sql='SELECT n.City, COUNT(g.GrantID) AS Total_Grants\nFROM Nonprofits n \nJOIN Grants g ON n.NonprofitID = g.NonprofitID \nGROUP BY n.City;'
), 1), (Example({'sql_prompt': 'Show the average soil moisture level for each field in the past week', 'sql_context': 'CREATE TABLE field (id INT, name VARCHAR(255), farm_id INT);CREATE TABLE soil_moisture (id INT, field_id INT, measurement DATE, level INT);', 'sql': 'SELECT field_id, AVG(level) FROM soil_moisture WHERE measurement >= DATEADD(day, -7, GETDATE()) GROUP BY field_id;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To show the average soil moisture level for each field in the past week, we need to calculate the average of the 'level' column from the 'soil_moisture' table where the 'measurement' date is within the last 7 days. We also need to group the results by the 'field_id' and join with the 'field' table to get the field names.\n\nHere's the SQL query:\n\n```sql\nSELECT f.name, AVG(sm.level) AS average_moisture_level\nFROM soil_moisture sm\nJOIN field f ON sm.field_id = f.id\nWHERE sm.measurement >= CURDATE",
    sql="CREATE TABLE field (id INT, name VARCHAR(255), farm_id INT);\nCREATE TABLE soil_moisture (id INT, field_id INT, measurement DATE, level INT);\n\nReasoning: Let's think step by step in order to show the average soil moisture level for each field in the past week. We need to calculate the average of the 'level' column from the 'soil_moisture' table where the 'measurement' date is within the last 7 days (past week). To do this, we will use the `CURDATE()` function to get today's date and subtract 7 days using the `INTERVAL` keyword. We also"
), 0), (Example({'sql_prompt': 'What is the total number of satellites deployed by SpaceComm in the Middle East?', 'sql_context': 'CREATE TABLE SatelliteDeployment (satellite_id INT, company VARCHAR(255), region VARCHAR(255));', 'sql': "SELECT COUNT(*) FROM SatelliteDeployment WHERE company = 'SpaceComm' AND region = 'Middle East';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find out the total number of satellites deployed by SpaceComm in the Middle East, we need to count all entries in the `SatelliteDeployment` table where the company is 'SpaceComm' and the region is 'Middle East'.\n\nThe SQL query for this would be:\n\n```sql\nSELECT COUNT(*) AS total_satellites FROM SatelliteDeployment WHERE company = 'SpaceComm' AND region = 'Middle East';\n```",
    sql="Sql Prompt: What is the total number of satellites deployed by SpaceComm in the Middle East?\n\nSql Context: CREATE TABLE SatelliteDeployment (satellite_id INT, company VARCHAR(255), region VARCHAR(255));\n\nReasoning: Let's think step by step in order to find out the total number of satellites deployed by SpaceComm in the Middle East. We need to perform a count operation on the `SatelliteDeployment` table, but only for rows where the company column matches 'SpaceComm' and the region column is set to 'Middle East'. This will give us the exact number of satellite deployments that meet these criteria. The SQL query"
), 1), (Example({'sql_prompt': 'What is the total number of tickets sold for performances with a rating of 5?', 'sql_context': "CREATE TABLE performance (id INT PRIMARY KEY, name VARCHAR(255), date DATE, artist_id INT, rating INT); INSERT INTO performance (id, name, date, artist_id, rating) VALUES (1, 'Dance Recital', '2022-03-01', 1, 5);", 'sql': 'SELECT SUM(t.quantity) as total_tickets_sold FROM performance p INNER JOIN ticket t ON p.id = t.performance_id WHERE p.rating = 5;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the total number of tickets sold for performances with a rating of 5, we need to join the `performance` table with another table that contains ticket sales information. However, since there is no direct SQL context provided for ticket sales data, I will assume there exists a hypothetical `ticket_sales` table which records each ticket sold per performance.\n\nHere's an example of how you might structure the SQL query if such a table existed:\n\n```sql\n-- Hypothetical ticket_sales table creation and data insertion for context\nCREATE TABLE ticket_sales (id INT PRIMARY KEY, performance_id INT, tickets_sold INTEGER);\nINSERT INTO",
    sql="Assuming there is a `ticket_sales` table that records the number of tickets sold per performance, we can write an SQL query to find the total number of tickets sold for performances with a rating of 5. The reasoning behind this approach involves joining the `performance` table with the `ticket_sales` table on their respective performance IDs and then filtering the results where the performance rating is equal to 5. After that, we sum up all the ticket sales from these filtered records to get the total number of tickets sold for performances rated as 5 stars.\n\nHere's how you might structure the SQL query based on this reasoning:\n\n```sql\n-- Hypothetical SQL"
), 0), (Example({'sql_prompt': 'What is the average emergency response time by region for fire incidents?', 'sql_context': 'CREATE TABLE Regions (RegionID INT, RegionName VARCHAR(255)); CREATE TABLE Incidents (IncidentID INT, IncidentType VARCHAR(255), RegionID INT, ResponseTime INT);', 'sql': "SELECT AVG(ResponseTime) as AvgResponseTime, RegionName FROM Incidents i JOIN Regions r ON i.RegionID = r.RegionID WHERE IncidentType = 'Fire' GROUP BY RegionName;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To calculate the average emergency response time for fire incidents by region, we need to join the `Regions` and `Incidents` tables on their respective region identifiers. Then, we filter the results to include only fire incidents and group them by region name. Finally, we compute the average response time for each group.\n\nHere's the SQL query that accomplishes this:\n\n```sql\nSELECT r.RegionName, AVG(i.ResponseTime) AS Avg_Response_Time\nFROM Regions r\nJOIN Incidents i ON r.RegionID = i.RegionID\nWHERE i.IncidentType = 'Fire'\nGROUP BY r.RegionName;",
    sql="```sql\nSELECT \n    r.RegionName, \n    AVG(i.ResponseTime) AS Avg_Response_Time\nFROM \n    Regions r\nJOIN \n    Incidents i ON r.RegionID = i.RegionID\nWHERE \n    i.IncidentType = 'Fire'\nGROUP BY \n    r.RegionName;\n```"
), 1), (Example({'sql_prompt': "What is the average revenue of virtual tours in 'Spain'?", 'sql_context': "CREATE TABLE virtual_tours (id INT, name TEXT, country TEXT, revenue FLOAT); INSERT INTO virtual_tours (id, name, country, revenue) VALUES (1, 'Virtual Barcelona Tour', 'Spain', 2000);", 'sql': "SELECT AVG(revenue) FROM virtual_tours WHERE country = 'Spain';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the average revenue of virtual tours in Spain, we need to calculate the sum of revenues for all virtual tours located in Spain and then divide that sum by the number of such tours. The SQL query will filter the records based on the country being 'Spain' and then use the AVG() function to compute the average revenue.",
    sql="SELECT AVG(revenue) FROM virtual_tours WHERE country = 'Spain';"
), 1), (Example({'sql_prompt': 'What is the total number of students and staff with accommodations in the "disability_services" schema, excluding the "accessibility_parking" type?', 'sql_context': 'CREATE SCHEMA disability_services; CREATE TABLE staff (id INT, name VARCHAR(50), accommodation VARCHAR(50)); CREATE TABLE students (id INT, name VARCHAR(50), accommodation VARCHAR(50));', 'sql': "SELECT COUNT(*) FROM disability_services.staff WHERE accommodation != 'accessibility_parking' UNION SELECT COUNT(*) FROM disability_services.students WHERE accommodation != 'accessibility_parking';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the total number of students and staff with accommodations excluding "accessibility_parking" type, we need to count entries from both tables within the "disability_services" schema where the accommodation is not equal to "accessibility_parking". We can use a UNION ALL operation to combine results from both tables before counting.',
    sql="SELECT COUNT(*) FROM (SELECT id FROM disability_services.staff WHERE accommodation <> 'accessibility_parking' UNION ALL SELECT id FROM disability_services.students WHERE accommodation <> 'accessibility_parking') AS combined;"
), 1), (Example({'sql_prompt': 'What is the number of electric trams in service in Istanbul in 2021?', 'sql_context': "CREATE TABLE electric_trams (tram_id INT, service_date DATE, in_service INT); INSERT INTO electric_trams (tram_id, service_date, in_service) VALUES (1, '2021-01-01', 1), (2, '2021-01-02', 1), (3, '2021-01-03', 0);", 'sql': "SELECT COUNT(*) FROM electric_trams WHERE in_service = 1 AND service_date BETWEEN '2021-01-01' AND '2021-12-31';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the number of electric trams that were in service in Istanbul during the year 2021, we need to count all records where `in_service` is set to 1 (indicating they are in service) and the `service_date` falls within the year 2021.\n\nThe SQL query for this would be:\n\n```sql\nSELECT COUNT(*) AS NumberOfTramsInService\nFROM electric_trams\nWHERE in_service = 1 AND YEAR(service_date) = 2021;\n```',
    sql="Sql Prompt: What is the number of electric trams in service in Istanbul in 2021?\n\nSql Context: CREATE TABLE electric_trams (tram_id INT, service_date DATE, in_service INT); INSERT INTO electric_trams (tram_id, service_date, in_service) VALUES (1, '2021-01-01', 1), (2, '2021-01-02', 1), (3, '2021-01-03', 0);\n\nReasoning: To determine the number of electric trams that were in service in Istanbul"
), 1), (Example({'sql_prompt': "What is the total number of trips taken on accessible vehicles in the 'East' region for the current year?", 'sql_context': "CREATE TABLE Vehicles (VehicleID int, VehicleType varchar(255), Region varchar(255)); INSERT INTO Vehicles (VehicleID, VehicleType, Region) VALUES (1, 'Bus', 'East'), (2, 'Tram', 'West'), (3, 'Wheelchair Bus', 'South'), (4, 'Accessible Tram', 'East'); CREATE TABLE Trips (TripID int, VehicleID int, TripDateTime datetime);", 'sql': "SELECT COUNT(*) FROM Vehicles JOIN Trips ON Vehicles.VehicleID = Trips.VehicleID WHERE Vehicles.Region = 'East' AND Vehicles.VehicleType IN ('Wheelchair Bus', 'Accessible Tram') AND YEAR(Trips.TripDateTime) = YEAR(GETDATE());"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the total number of trips taken on accessible vehicles in the 'East' region for the current year, we need to join the `Vehicles` table with the `Trips` table based on the `VehicleID`. We then filter the results to include only those records where the vehicle type is considered accessible (e.g., 'Wheelchair Bus', 'Accessible Tram') and the region is 'East'. Finally, we group by the year of the trip date to get the total number for the current year.\n\nHere's how you can write the SQL query:\n\n```sql\nSELECT COUNT(TripID) AS TotalTrips\nFROM Trips\nIN",
    sql="Sql Prompt: What is the total number of trips taken on accessible vehicles in the 'East' region for the current year?\n\nSql Context: \n```sql\nCREATE TABLE Vehicles (VehicleID int, VehicleType varchar(255), Region varchar(255));\nINSERT INTO Vehicles (VehicleID, VehicleType, Region) VALUES \n    (1, 'Bus', 'East'), \n    (2, 'Tram', 'West'), \n    (3, 'Wheelchair Bus', 'South'), \n    (4, 'Accessible Tram', 'East');\nCREATE TABLE Tri"
), 0), (Example({'sql_prompt': 'Identify the suppliers with the highest and lowest sustainability ratings in the supplier_ratings table.', 'sql_context': 'CREATE TABLE supplier_ratings (supplier_id INT, sustainability_rating INT); INSERT INTO supplier_ratings (supplier_id, sustainability_rating) VALUES (100, 95), (101, 60), (102, 90);', 'sql': 'SELECT supplier_id, sustainability_rating FROM (SELECT supplier_id, sustainability_rating, RANK() OVER (ORDER BY sustainability_rating DESC) AS rank, RANK() OVER (ORDER BY sustainability_rating ASC) AS reverse_rank FROM supplier_ratings) WHERE rank = 1 OR reverse_rank = 1;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To identify the suppliers with the highest and lowest sustainability ratings from the `supplier_ratings` table, we need to find the maximum and minimum values of the `sustainability_rating` column. We can achieve this using two separate queries or a single query that retrieves both pieces of information at once. Here's how you could do it with a single SQL statement:\n\n```sql\nSELECT \n    (SELECT supplier_id FROM supplier_ratings ORDER BY sustainability_rating DESC LIMIT 1) AS highest_rated_supplier,\n    MAX(sustainability_rating) AS highest_rating,\n    (SELECT supplier_id FROM supp",
    sql='SELECT (SELECT supplier_id FROM supplier_ratings ORDER BY sustainability_rating DESC LIMIT 1) AS highest_rated_supplier, MAX(sustainability_rating) AS highest_rating, (SELECT supplier_id FROM supplier_ratings ORDER BY sustainability_rating ASC LIMIT 1) AS lowest_rated_supplier, MIN(sustainability_rating) AS lowest_rating FROM supplier_ratings;'
), 0), (Example({'sql_prompt': 'What is the total amount of socially responsible loans issued to women in 2021?', 'sql_context': 'CREATE TABLE socially_responsible_lending (id INT PRIMARY KEY, loan_amount DECIMAL(10, 2), borrower_gender TEXT, lending_date DATE);', 'sql': "SELECT SUM(loan_amount) FROM socially_responsible_lending WHERE borrower_gender = 'Female' AND lending_date BETWEEN '2021-01-01' AND '2021-12-31';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the total amount of socially responsible loans issued to women in 2021, we need to sum up all loan amounts where the `borrower_gender` is 'Female' and the `lending_date` falls within the year 2021.\n\nHere's the SQL query that accomplishes this:\n\n```sql\nSELECT SUM(loan_amount) AS total_loans_to_women\nFROM socially_responsible_lending\nWHERE borrower_gender = 'Female' AND YEAR(lending_date) = 2021;\n```",
    sql="Sql Prompt: What is the total amount of socially responsible loans issued to women in 2021?\n\nSql Context: CREATE TABLE socially_responsible_lending (id INT PRIMARY KEY, loan_amount DECIMAL(10, 2), borrower_gender TEXT, lending_date DATE);\n\nReasoning: Let's think step by step in order to find the total amount of socially responsible loans issued to women in 2021. We need to filter records based on two conditions: `borrower_gender` should be 'Female', and the year part of `lending_date` should match 20"
), 1), (Example({'sql_prompt': 'What is the maximum energy efficiency rating of hydroelectric dams in Canada?', 'sql_context': "CREATE TABLE hydro_dams (id INT, name TEXT, country TEXT, energy_efficiency_rating FLOAT); INSERT INTO hydro_dams (id, name, country, energy_efficiency_rating) VALUES (1, 'Robert-Bourassa', 'Canada', 0.94), (2, 'Churchill Falls', 'Canada', 0.92);", 'sql': "SELECT MAX(energy_efficiency_rating) FROM hydro_dams WHERE country = 'Canada';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the maximum energy efficiency rating of hydroelectric dams in Canada, we need to select the highest value from the `energy_efficiency_rating` column for all entries where the country is 'Canada'. We can achieve this using the SQL MAX() function.\n\nHere's the SQL query:\n\n```sql\nSELECT MAX(energy_efficiency_rating) AS max_efficiency FROM hydro_dams WHERE country = 'Canada';\n```",
    sql="Sql Prompt: What is the maximum energy efficiency rating of hydroelectric dams in Canada?\n\nSql Context: CREATE TABLE hydro_dams (id INT, name TEXT, country TEXT, energy_efficiency_rating FLOAT); INSERT INTO hydro_dams (id, name, country, energy_efficiency_rating) VALUES (1, 'Robert-Bourassa', 'Canada', 0.94), (2, 'Churchill Falls', 'Canada', 0.92);\n\nReasoning: Let's think step by step in order to find the maximum energy efficiency rating of hydroelectric dams in Canada. We need"
), 1), (Example({'sql_prompt': 'How many streams did each song by an artist get in a given month?', 'sql_context': "CREATE TABLE Songs (id INT, artist_id INT, title VARCHAR(50)); CREATE TABLE Streams (id INT, song_id INT, date DATE, streams INT); INSERT INTO Songs (id, artist_id, title) VALUES (1, 1, 'Shake it Off'), (2, 1, 'Blank Space'), (3, 2, 'Humble'), (4, 2, 'DNA'); INSERT INTO Streams (id, song_id, date, streams) VALUES (1, 1, '2022-01-01', 1000), (2, 1, '2022-01-02', 1500), (3, 2, '2022-01-01', 2000), (4, 2, '2022-01-02', 2500), (5, 3, '2022-01-01', 3000), (6, 3, '2022-01-02', 3500), (7, 4, '2022-01-01', 4000), (8, 4, '2022-01-02', 4500);", 'sql': "SELECT s.title, SUM(s.streams) as total_streams FROM Songs s JOIN Streams st ON s.id = st.song_id WHERE st.date BETWEEN '2022-01-01' AND '2022-01-31' GROUP BY s.title;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find out how many streams each song by an artist got in a given month, we need to join the Songs and Streams tables on their respective IDs. Then, we can group the results by both the artist_id and title of the songs, as well as filter them based on the date range for the given month.\n\nAssuming that the given month is January 2022 (as per the provided data), here's how you would write the SQL query:\n\n```sql\nSELECT s.artist_id, s.title, SUM(st.streams) AS total_streams\nFROM Songs s\nJOIN Streams st ON s.id = st.song_id\nWHERE",
    sql="st.date >= '2022-01-01' AND st.date <= '2022-01-31' GROUP BY s.artist_id, s.title;"
), 0), (Example({'sql_prompt': 'What is the total number of security incidents for each department in the organization?', 'sql_context': 'CREATE TABLE incident (incident_id INT, incident_date DATE, incident_description TEXT, department_id INT);CREATE TABLE department (department_id INT, department_name VARCHAR(255));', 'sql': 'SELECT d.department_name, COUNT(i.incident_id) AS incident_count FROM incident i JOIN department d ON i.department_id = d.department_id GROUP BY d.department_name;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the total number of security incidents for each department in the organization, we need to join the `incident` table with the `department` table on their respective department IDs. Then, we can group the results by department name and count the number of incidents per department.\n\nHere's the SQL query that accomplishes this:\n\n```sql\nSELECT d.department_name, COUNT(i.incident_id) AS total_incidents\nFROM incident i\nINNER JOIN department d ON i.department_id = d.department_id\nGROUP BY d.department_name;\n```",
    sql="Sql Prompt: What is the total number of security incidents for each department in the organization?\n\nSql Context: CREATE TABLE incident (incident_id INT, incident_date DATE, incident_description TEXT, department_id INT);CREATE TABLE department (department_id INT, department_name VARCHAR(255));\n\nReasoning: Let's think step by step in order to find the total number of security incidents for each department in the organization. We need to perform a join operation between the `incident` table and the `department` table using their common field, which is the `department_id`. After joining these tables, we will group the results by the name of"
), 1), (Example({'sql_prompt': 'What is the market spend on sustainable tourism initiatives in Japan between 2017 and 2019?', 'sql_context': "CREATE TABLE sustainable_tourism_initiatives(initiative_id INT, name TEXT, country TEXT, start_year INT, end_year INT, market_spend INT);INSERT INTO sustainable_tourism_initiatives (initiative_id, name, country, start_year, end_year, market_spend) VALUES (1, 'Eco-friendly hotels in Tokyo', 'Japan', 2017, 2019, 5000000), (2, 'Sustainable transport in Kyoto', 'Japan', 2018, 2019, 7000000), (3, 'Carbon offsetting in Osaka', 'Japan', 2017, 2018, 3000000);", 'sql': "SELECT SUM(market_spend) FROM sustainable_tourism_initiatives WHERE country = 'Japan' AND start_year BETWEEN 2017 AND 2019;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the market spend on sustainable tourism initiatives in Japan between 2017 and 2층 2019, we need to filter the records based on the country (Japan) and the years within which the initiative was active. Then, we will sum up the market_spend for these filtered records.\n\nHere's the SQL query:\n\n```sql\nSELECT SUM(market_spend) AS total_market_spend\nFROM sustainable_tourism_initiatives\nWHERE country = 'Japan' AND start_year <= 2019 AND end_year >= 2017;\n```",
    sql="Sql Prompt: What is the market spend on sustainable tourism initiatives in Japan between 2017 and 2019?\n\nSql Context: CREATE TABLE sustainable_tourism_initiatives(initiative_id INT, name TEXT, country TEXT, start_year INT, end_year INT, market_spend INT);INSERT INTO sustainable_tourism_initiatives (initiative_id, name, country, start_year, end_year, market_spend) VALUES (1, 'Eco-friendly hotels in Tokyo', 'Japan', 2017, 2019,"
), 1), (Example({'sql_prompt': 'What is the percentage of hotels in Europe that offer virtual tours?', 'sql_context': "CREATE TABLE hotel_features (hotel_id INT, hotel_name TEXT, virtual_tour INT, country TEXT); INSERT INTO hotel_features (hotel_id, hotel_name, virtual_tour, country) VALUES (1, 'Hotel A', 1, 'France'), (2, 'Hotel B', 0, 'Germany'), (3, 'Hotel C', 1, 'Italy'), (4, 'Hotel D', 0, 'France'), (5, 'Hotel E', 1, 'Spain');", 'sql': "SELECT (COUNT(*) FILTER (WHERE virtual_tour = 1) * 100.0 / COUNT(*)) AS percentage FROM hotel_features WHERE country = 'Europe';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the percentage of hotels in Europe that offer virtual tours, we need to calculate two things:\n\n1. The total number of hotels in Europe from our dataset.\n2. The number of those hotels which offer virtual tours (virtual_tour = 1).\n\nOnce we have these numbers, we can divide the second by the first and multiply by 100 to get the percentage. Here's how you would write this in SQL:\n\n```sql\nSELECT \n    ROUND(\n        (SUM(CASE WHEN virtual_tour = 1 THEN 1 ELSE 0 END) / COUNT(*)) * 100, 2\n    ) AS",
    sql='PercentageOfHotelsWithVirtualTours;\n```\n\nThis query uses a CASE statement to count the number of hotels with virtual tours (where `virtual_tour` is equal to 1) and divides it by the total number of hotels in Europe. The result is then multiplied by 100 to get the percentage, rounded to two decimal places for readability.'
), 0), (Example({'sql_prompt': 'What are the ethical AI principles for the technology projects in India?', 'sql_context': "CREATE TABLE EthicalAI (principle_id INT, principle_name VARCHAR(50), project_location VARCHAR(20)); INSERT INTO EthicalAI (principle_id, principle_name, project_location) VALUES (1, 'Fairness', 'India'), (2, 'Accountability', 'India'), (3, 'Transparency', 'India'), (4, 'Data Minimization', 'India'), (5, 'Explainability', 'India'), (6, 'Human Oversight', 'India');", 'sql': "SELECT principle_name FROM EthicalAI WHERE project_location = 'India';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the ethical AI principles for technology projects located in India, we need to select all principle names from the EthicalAI table where the project_location is set to 'India'. The SQL query will look like this:\n\n```sql\nSELECT principle_name FROM EthicalAI WHERE project_location = 'India';\n```",
    sql="Sql Prompt: What are the ethical AI principles for the technology projects in India?\n\nSql Context: CREATE TABLE EthicalAI (principle_id INT, principle_name VARCHAR(50), project_location VARCHAR(20)); INSERT INTO EthicalAI (principle_id, principle_name, project_location) VALUES (1, 'Fairness', 'India'), (2, 'Accountability', 'India'), (3, 'Transparency', 'India'), (4, 'Data Minimization', 'India'), (5, 'Explainability', 'India'), (6, 'Human Oversight', 'India');"
), 1), (Example({'sql_prompt': 'What is the total mass of all spacecraft manufactured by SpaceX?', 'sql_context': "CREATE TABLE Spacecraft (SpacecraftID INT, SpacecraftName VARCHAR(50), Manufacturer VARCHAR(50), Mass FLOAT); INSERT INTO Spacecraft (SpacecraftID, SpacecraftName, Manufacturer, Mass) VALUES (1, 'SpaceX Dragon', 'SpaceX', 10000), (2, 'Orion', 'Lockheed Martin', 20000), (3, 'Starliner', 'Boeing', 15000);", 'sql': "SELECT SUM(Mass) FROM Spacecraft WHERE Manufacturer = 'SpaceX';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the total mass of all spacecraft manufactured by SpaceX, we need to sum up the masses of those specific spacecraft entries where the Manufacturer is 'SpaceX'. The SQL query for this would be as follows:\n\n```sql\nSELECT SUM(Mass) AS Total_Mass FROM Spacecraft WHERE Manufacturer = 'SpaceX';\n```",
    sql="Sql Prompt: What is the total mass of all spacecraft manufactured by SpaceX?\n\nSql Context: CREATE TABLE Spacecraft (SpacecraftID INT, SpacecraftName VARCHAR(50), Manufacturer VARCHAR(50), Mass FLOAT); INSERT INTO Spacecraft (SpacecraftID, SpacecraftName, Manufacturer, Mass) VALUES (1, 'SpaceX Dragon', 'SpaceX', 10000), (2, 'Orion', 'Lockheed Martin', 20000), (3, 'Starliner', 'Boeing', 15000);\n\nReasoning: Let's think step by step in order to"
), 1), (Example({'sql_prompt': "What is the total age of 'stone' artifacts in 'american_archaeology'?", 'sql_context': 'CREATE TABLE american_archaeology (id INT, site_name VARCHAR(50), artifact_name VARCHAR(50), age INT, material VARCHAR(20));', 'sql': "SELECT SUM(age) FROM american_archaeology WHERE material = 'stone';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the total age of 'stone' artifacts in the 'american_archaeology' table, we need to sum up the ages of all artifacts where the material is 'stone'. Here's how you can write the SQL query for this:",
    sql="SELECT SUM(age) FROM american_archaeology WHERE material = 'stone';"
), 1), (Example({'sql_prompt': 'What is the average hotel price for beachfront hotels in Mexico?', 'sql_context': "CREATE TABLE hotels (hotel_id INT, name TEXT, country TEXT, has_beachfront BOOLEAN, price INT); INSERT INTO hotels (hotel_id, name, country, has_beachfront, price) VALUES (1, 'Beach Palace', 'Mexico', true, 200), (2, 'Green Valley', 'USA', false, 150);", 'sql': "SELECT AVG(price) FROM hotels WHERE has_beachfront = true AND country = 'Mexico';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the average hotel price for beachfront hotels in Mexico, we need to filter the records based on two conditions: the country should be "Mexico" and the `has_beachfront` column should be true. After filtering these records, we can calculate the average of their prices using the AVG() function.\n\nHere\'s the SQL query that accomplishes this task:\n\n```sql\nSELECT AVG(price) AS avg_price FROM hotels WHERE country = \'Mexico\' AND has_beachfront = TRUE;\n```',
    sql="Sql Prompt: What is the average hotel price for beachfront hotels in Mexico?\n\nSql Context: CREATE TABLE hotels (hotel_id INT, name TEXT, country TEXT, has_beachfront BOOLEAN, price INT); INSERT INTO hotels (hotel_id, name, country, has_beachfront, price) VALUES (1, 'Beach Palace', 'Mexico', true, 200), (2, 'Green Valley', 'USA', false, 150);\n\nReasoning: Let's think step by step in order to find the average hotel price for beachfront hotels in Mexico. We need to filter out only"
), 1), (Example({'sql_prompt': 'List all instructors and number of students they support with accommodations.', 'sql_context': 'CREATE TABLE Instructors (id INT, name VARCHAR(50), title VARCHAR(50));', 'sql': 'SELECT i.name, COUNT(a.student_id) as supported_students FROM Instructors i JOIN Accommodations a ON i.id = a.instructor_id GROUP BY i.name;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To list all instructors along with the number of students they support with accommodations, we need a table that associates instructors with their students and indicates which students require accommodations. Assuming there is such a table called `StudentAccommodations` with columns for student ID, instructor ID, and an indicator if the student requires accommodation (let's call it `has_accommodation`), we can write the following SQL query:\n\n```sql\nCREATE TABLE Instructors (id INT, name VARCHAR(50), title VARCHAR(50));\nINSERT INTO Instructors (id, name, title) VALUES \n    (1, 'Dr. Smith', 'Professor'),",
    sql='SELECT i.name, COUNT(sa.student_id) AS number_of_students_with_accommodations\nFROM Instructors i\nJOIN StudentAccommodations sa ON i.id = sa.instructor_id AND sa.has_accommodation = TRUE\nGROUP BY i.name;'
), 1), (Example({'sql_prompt': "What is the total fare collected from bus routes that start with the letter 'B'?", 'sql_context': "CREATE TABLE bus_trips (trip_id INT, route_id INT, fare FLOAT); INSERT INTO bus_trips (trip_id, route_id, fare) VALUES (1, 101, 2.5), (2, 202, 3.0), (3, 303, 1.5), (4, 404, 2.0), (5, 505, 2.5), (6, 106, 3.0); CREATE TABLE bus_routes (route_id INT, route_name TEXT, starting_letter TEXT); INSERT INTO bus_routes (route_id, route_name, starting_letter) VALUES (101, 'Broadway', 'B'), (202, 'Park Ave', 'P'), (303, 'Lakeshore', 'L'), (404, 'Sunset Blvd', 'S'), (505, 'Beverly Hills', 'B');", 'sql': "SELECT SUM(bt.fare) FROM bus_trips bt JOIN bus_routes br ON bt.route_id = br.route_id WHERE br.starting_letter = 'B';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the total fare collected from bus routes that start with the letter 'B', we need to join the `bus_trips` table and the `bus_routes` table on their common column, which is `route_id`. Then, we can filter for only those rows where the starting letter of the route name in the `bus_routes` table is 'B'. Finally, we will sum up all the fares from these filtered trips.\n\nHere's how you would write this SQL query:\n\n```sql\nSELECT SUM(b.fare) AS total_fare_collected\nFROM bus_trips bt\nINNER JOIN bus_routes br ON bt.route_id =",
    sql="SELECT SUM(bt.fare) AS total_fare_collected\nFROM bus_trips bt \nINNER JOIN bus_routes br ON bt.route_id = br.route_id\nWHERE br.starting_letter = 'B';"
), 1), (Example({'sql_prompt': 'What is the percentage of total revenue from streaming and concert ticket sales for Pop music in 2018?', 'sql_context': 'CREATE TABLE StreamingRevenue (id INT, year INT, genre VARCHAR(50), revenue FLOAT); CREATE TABLE ConcertTicketSales (id INT, year INT, genre VARCHAR(50), revenue FLOAT);', 'sql': "SELECT (SUM(sr.revenue) + SUM(cts.revenue)) / (SELECT SUM(revenue) FROM (SELECT revenue FROM StreamingRevenue WHERE year = 2018 UNION ALL SELECT revenue FROM ConcertTicketSales WHERE year = 2018) t) FROM StreamingRevenue sr JOIN ConcertTicketSales cts ON sr.genre = cts.genre WHERE sr.year = 2018 AND sr.genre = 'Pop';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To calculate the percentage of total revenue from streaming and concert ticket sales for Pop music in 2018, we need to follow these steps:\n\n1. Calculate the total revenue from streaming for Pop music in 2018.\n2. Calculate the total revenue from concert ticket sales for Pop music in 2018.\n3. Add both revenues together to get the combined revenue for Pop music in 2018.\n4. Calculate the total revenue (streaming + concert ticket sales) across all genres and years.\n5. Divide the combined revenue for Pop music by the total revenue, then multiply by 100 to',
    sql="SELECT ((SUM(sr.revenue) + SUM(cts.revenue)) / (SELECT SUM(revenue) FROM StreamingRevenue WHERE year = 2018 UNION ALL SELECT SUM(revenue) FROM ConcertTicketSales WHERE year = 2C8)) * 100 AS percentage_of_total_revenue\nFROM StreamingRevenue sr\nJOIN ConcertTicketSales cts ON sr.year = cts.year AND sr.genre = cts.genre\nWHERE sr.year = 2018 AND sr.genre = 'Pop';"
), 0), (Example({'sql_prompt': 'What is the total defense spending by countries in Oceania in 2018?', 'sql_context': "CREATE TABLE defense_spending (country VARCHAR(50), continent VARCHAR(50), year INT, amount FLOAT); INSERT INTO defense_spending (country, continent, year, amount) VALUES ('Australia', 'Oceania', 2018, 750.3), ('New Zealand', 'Oceania', 2018, 23.4), ('Papua New Guinea', 'Oceania', 2018, 6.7);", 'sql': "SELECT SUM(amount) FROM defense_spending WHERE continent = 'Oceania' AND year = 2018;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the total defense spending by countries in Oceania for the year 2018, we need to sum up the amounts spent on defense by each country within that continent and year. The SQL query will filter records based on the 'continent' column being equal to 'Oceania' and the 'year' column being equal to 2018. Then it will group the results by the 'country' column, although in this case grouping is not necessary since we want a total sum for all countries combined.\n\nHere is the SQL query:\n\n```sql\nSELECT SUM(amount) AS Total_Defense_Spending\nFROM defense_spending\nWHERE continent = 'Oceania",
    sql="Sql Prompt: What is the total defense spending by countries in Oceania in 2018?\n\nSql Context: CREATE TABLE defense_spending (country VARCHAR(50), continent VARCHAR(50), year INT, amount FLOAT); INSERT INTO defense_spending (country, continent, year, amount) VALUES ('Australia', 'Oceania', 2018, 750.3), ('New Zealand', 'Oceania', 2018, 23.4), ('Papua New Guinea', 'Oceania', 2018, 6.7);\n\nReasoning: Let's think step by"
), 1), (Example({'sql_prompt': 'What is the total number of refugee families supported by each NGO in the last 6 months?', 'sql_context': "CREATE TABLE NGOs (NGOID int, NGOName varchar(50)); INSERT INTO NGOs (NGOID, NGOName) VALUES (1, 'International Rescue Committee'), (2, 'Save the Children'); CREATE TABLE RefugeeSupport (SupportID int, NGOID int, FamilyID int, SupportDate date); INSERT INTO RefugeeSupport (SupportID, NGOID, FamilyID, SupportDate) VALUES (1, 1, 1, '2022-01-01'), (2, 1, 2, '2022-02-01'), (3, 2, 1, '2022-03-01');", 'sql': 'SELECT NGOName, COUNT(DISTINCT FamilyID) as SupportedFamilies FROM NGOs INNER JOIN RefugeeSupport ON NGOs.NGOID = RefugeeSupport.NGOID WHERE SupportDate >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY NGOName;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the total number of refugee families supported by each NGO in the last 6 months from today's date, we need to calculate the date range for the past 6 months and then count the distinct FamilyID entries grouped by NGOName.\n\nHere is the SQL query:\n\n```sql\nSELECT ngs.NGOName, COUNT(DISTINCT rs.FamilyID) AS TotalFamiliesSupported\nFROM RefugeeSupport rs\nJOIN NGOs ngs ON rs.NGOID = ngs.NGOID\nWHERE rs.SupportDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)\nGROUP BY ngs.NGON",
    sql="Sql Prompt: What is the total number of refugee families supported by each NGO in the last 6 months?\n\nSql Context: The context involves two tables, `NGOs` and `RefugeeSupport`. The `NGOs` table contains information about different non-governmental organizations (NGOs) with their IDs and names. The `RefugeeSupport` table records instances of support provided to refugee families by these NGOs, including the date when the support was given.\n\nReasoning: To answer this query, we need to perform a few steps:\n1. Calculate the date range for the last 6 months from today's date using `DATE_SUB("
), 1), (Example({'sql_prompt': "Which regulatory frameworks have been implemented in 'Country1'?", 'sql_context': "CREATE TABLE countries (id INT, name VARCHAR(255)); INSERT INTO countries (id, name) VALUES (1, 'Country1'); CREATE TABLE regulatory_frameworks (id INT, country_id INT, name VARCHAR(255)); INSERT INTO regulatory_frameworks (id, country_id, name) VALUES (1, 1, 'Framework1'); INSERT INTO regulatory_frameworks (id, country_id, name) VALUES (2, 1, 'Framework2'); INSERT INTO regulatory_frameworks (id, country_id, name) VALUES (3, 1, 'Framework3');", 'sql': "SELECT name FROM regulatory_frameworks WHERE country_id = (SELECT id FROM countries WHERE name = 'Country1');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find out which regulatory frameworks have been implemented in 'Country1', we need to join the `countries` table with the `regulatory_frameworks` table on their respective country identifiers. Then, we filter the results for 'Country1'. The SQL query will look like this:\n\n```sql\nSELECT rf.name AS FrameworkName\nFROM regulatory_frameworks rf\nJOIN countries c ON rf.country_id = c.id\nWHERE c.name = 'Country1';\n```",
    sql="Sql Prompt: Which regulatory frameworks have been implemented in 'Country1'?\n\nSql Context: CREATE TABLE countries (id INT, name VARCHAR(255)); INSERT INTO countries (id, name) VALUES (1, 'Country1'); CREATE TABLE regulatory_frameworks (id INT, country_id INT, name VARCHAR(255)); INSERT INTO regulatory_frameworks (id, country_id, name) VALUES (1, 1, 'Framework1'), (2, 1, 'Framework2'), (3, 1, 'Framework3');\n\nReasoning: To identify the regulatory frameworks implemented in 'Country1', we need to perform a join operation between the `"
), 1), (Example({'sql_prompt': 'What is the percentage of factories in each country that have implemented circular economy practices?', 'sql_context': "CREATE TABLE factory_circle (factory VARCHAR(255), country VARCHAR(255), practice VARCHAR(255)); INSERT INTO factory_circle (factory, country, practice) VALUES ('Factory1', 'Bangladesh', 'yes'), ('Factory2', 'Bangladesh', 'no'), ('Factory3', 'Bangladesh', 'yes'), ('Factory4', 'China', 'yes'), ('Factory5', 'China', 'no'), ('Factory6', 'India', 'no'), ('Factory7', 'India', 'yes'), ('Factory8', 'India', 'yes');", 'sql': "SELECT country, 100.0 * COUNT(*) FILTER (WHERE practice = 'yes') / COUNT(*) AS percentage FROM factory_circle GROUP BY country;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the percentage of factories in each country that have implemented circular economy practices, we need to calculate two things for each country:\n\n1. The total number of factories (regardless of whether they have implemented circular economy practices or not).\n2. The number of factories that have implemented circular economy practices.\n\nOnce we have these numbers, we can divide the second by the first and multiply by 100 to get the percentage. We will use a SQL query with conditional aggregation for this purpose:\n\n```sql\nSELECT country,\n       COUNT(*) AS total_factories,\n       SUM(CASE WHEN practice = 'yes' THEN 1 ELSE 0 END) AS factories_",
    sql="Sql Prompt: What is the percentage of factories in each country that have implemented circular economy practices?\n\nSql Context: CREATE TABLE factory_circle (factory VARCHAR(255), country VARCHAR(255), practice VARCHAR(255)); INSERT INTO factory_circle (factory, country, practice) VALUES ('Factory1', 'Bangladesh', 'yes'), ('Factory2', 'Bangladesh', 'no'), ('Factory3', 'Bangladesh', 'yes'), ('Factory4', 'China', 'yes'), ('Factory5', 'China', 'no'), ('Factory6', 'India', 'no'), ('Factory7', 'India', 'yes'), ('"
), 1)]