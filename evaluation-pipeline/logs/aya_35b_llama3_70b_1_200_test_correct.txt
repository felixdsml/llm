[(Example({'sql_prompt': 'Delete records with sales amount over $50,000 in the MilitaryEquipmentSales table', 'sql_context': "CREATE TABLE MilitaryEquipmentSales (id INT, equipment_name VARCHAR(50), sale_amount INT, sale_date DATE); INSERT INTO MilitaryEquipmentSales (id, equipment_name, sale_amount, sale_date) VALUES (1, 'Fighter Jet', 45000, '2021-01-01'), (2, 'Tank', 75000, '2021-02-01');", 'sql': 'DELETE FROM MilitaryEquipmentSales WHERE sale_amount > 50000;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Here is the SQL query based on the provided prompt and context:\n\n```sql\nDELETE FROM MilitaryEquipmentSales\nWHERE sale_amount > 50000;\n```\n\nThis query will delete all records from the "MilitaryEquipmentSales" table where the "sale_amount" is greater than $50,000.'
), 1), (Example({'sql_prompt': 'What is the average number of visitor reviews for heritage sites in each category?', 'sql_context': "CREATE TABLE HeritageSitesReviews (ID INT, SiteName VARCHAR(100), Category VARCHAR(50), Reviews INT); INSERT INTO HeritageSitesReviews (ID, SiteName, Category, Reviews) VALUES (1, 'Machu Picchu', 'Archaeological', 5000); INSERT INTO HeritageSitesReviews (ID, SiteName, Category, Reviews) VALUES (2, 'Taj Mahal', 'Architectural', 8000);", 'sql': 'SELECT Category, AVG(Reviews) OVER (PARTITION BY Category) AS AvgReviews FROM HeritageSitesReviews;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Here is the SQL query based on the provided prompt and context:\n```sql\nSELECT Category, AVG(Reviews) AS AverageReviews\nFROM HeritageSitesReviews\nGROUP BY Category;\n```\n\nThis query calculates the average number of visitor reviews for heritage sites in each category by using the `AVG` function and grouping the results by the "Category" column.'
), 1), (Example({'sql_prompt': 'What is the total revenue from ads targeting users interested in veganism in Q3 2022?', 'sql_context': 'CREATE TABLE ads (id INT, user INT, platform VARCHAR(50), target VARCHAR(50), start_date DATE, end_date DATE, revenue DECIMAL(10, 2));', 'sql': "SELECT SUM(revenue) FROM ads WHERE target = 'veganism' AND platform IN ('Facebook', 'Instagram') AND start_date BETWEEN '2022-07-01' AND '2022-09-30';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Here is the SQL query based on the provided prompt and context:\n\n```sql\nSELECT SUM(revenue) AS total_revenue\nFROM ads\nWHERE target = 'veganism'\n  AND start_date BETWEEN '2022-07-01' AND '2022-09-30';\n```\n\nThis query calculates the total revenue from ads targeting users interested in veganism during the third quarter of 2022. It does so by filtering the `ads` table based on the `target` column containing the keyword 'veganism' and the `start_date` falling within the Q3 2022 date range. The SUM function then aggregates"
), 1), (Example({'sql_prompt': 'What is the minimum duration of workouts for members who joined in 2019, grouped by gender?', 'sql_context': 'CREATE TABLE Workout (WorkoutID INT PRIMARY KEY, MemberID INT, Duration INT, Date DATE); CREATE TABLE Member (MemberID INT PRIMARY KEY, Age INT, Gender VARCHAR(10), MembershipStart DATE);', 'sql': "SELECT Member.Gender, MIN(Workout.Duration) FROM Workout INNER JOIN Member ON Workout.MemberID = Member.MemberID WHERE Member.MembershipStart BETWEEN '2019-01-01' AND '2019-12-31' GROUP BY Member.Gender;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="```sql\nSELECT m.Gender, MIN(w.Duration) AS MinDuration\nFROM Workout w\nJOIN Member m ON w.MemberID = m.MemberID\nWHERE YEAR(m.MembershipStart) = 2019\nGROUP BY m.Gender;\n```\n\nThis SQL query retrieves the minimum duration of workouts for members who joined in 2019, grouped by their gender. It achieves this by joining the 'Workout' and 'Member' tables on the 'MemberID' column, filtering members who joined in 2019, and then grouping the results by gender to calculate the minimum workout duration for each group."
), 1), (Example({'sql_prompt': 'How many employees were hired in each month of 2022?', 'sql_context': "CREATE TABLE Employees (EmployeeID INT, HireDate DATE); INSERT INTO Employees (EmployeeID, HireDate) VALUES (1, '2022-01-15'); INSERT INTO Employees (EmployeeID, HireDate) VALUES (2, '2022-02-01');", 'sql': "SELECT EXTRACT(MONTH FROM HireDate) AS Month, COUNT(*) AS NumberOfHires FROM Employees WHERE HireDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY Month;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='```sql\nSELECT \n    EXTRACT(MONTH FROM HireDate) AS Month,\n    COUNT(*) AS NumberOfEmployeesHired\nFROM \n    Employees\nWHERE \n    EXTRACT(YEAR FROM HireDate) = 2022\nGROUP BY \n    EXTRACT(MONTH FROM HireDate)\nORDER BY \n    Month;\n```'
), 1), (Example({'sql_prompt': 'What is the maximum quantity of a single organic product delivered in the DELIVERY_RECORDS table?', 'sql_context': 'CREATE TABLE DELIVERY_RECORDS (id INT, supplier_id INT, product_id INT, is_organic BOOLEAN, quantity INT); INSERT INTO DELIVERY_RECORDS (id, supplier_id, product_id, is_organic, quantity) VALUES (1, 1, 1, true, 50), (2, 2, 2, true, 30);', 'sql': 'SELECT MAX(quantity) FROM DELIVERY_RECORDS WHERE is_organic = true;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='```sql\nSELECT MAX(quantity) AS max_quantity\nFROM DELIVERY_RECORDS\nWHERE is_organic = TRUE;\n```'
), 1), (Example({'sql_prompt': 'Update the description of a sustainable urbanism initiative in the sustainable_urbanism_initiatives table', 'sql_context': "CREATE TABLE public.sustainable_urbanism_initiatives (id SERIAL PRIMARY KEY, initiative_name VARCHAR(255), initiative_description TEXT, city_name VARCHAR(255), state_name VARCHAR(255)); INSERT INTO public.sustainable_urbanism_initiatives (initiative_name, initiative_description, city_name, state_name) VALUES ('Green City Program', 'Promotes green spaces and sustainable transportation options in urban areas', 'Portland', 'Oregon'), ('EcoDistricts Initiative', 'Encourages sustainable community development in city neighborhoods', 'Vancouver', 'British Columbia');", 'sql': "WITH updated_initiative AS (UPDATE public.sustainable_urbanism_initiatives SET initiative_description = 'Promotes green spaces, sustainable transportation, and energy-efficient buildings in urban areas' WHERE initiative_name = 'Green City Program' RETURNING *) INSERT INTO public.sustainable_urbanism_initiatives (initiative_name, initiative_description, city_name, state_name) SELECT initiative_name, initiative_description, city_name, state_name FROM updated_initiative;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Here is the SQL query based on the provided prompt and context:\n\n```sql\nUPDATE sustainable_urbanism_initiatives\nSET initiative_description = \'Promotes green spaces, sustainable transportation options, and eco-friendly practices in urban areas to enhance livability and environmental sustainability.\'\nWHERE initiative_name = \'Green City Program\';\n```\n\nThis query updates the description of the "Green City Program" initiative in the `sustainable_urbanism_initiatives` table. It provides a more detailed explanation of the program\'s goals, including the promotion of eco-friendly practices, to better reflect its scope and impact.'
), 1), (Example({'sql_prompt': 'Calculate the year-over-year revenue growth for each restaurant.', 'sql_context': "CREATE TABLE restaurants (restaurant_id INT, restaurant_name VARCHAR(50), city VARCHAR(50), state VARCHAR(50), revenue FLOAT, year INT); INSERT INTO restaurants (restaurant_id, restaurant_name, city, state, revenue, year) VALUES (1, 'Restaurant A', 'City A', 'State A', 123456.78, 2021);", 'sql': 'SELECT restaurant_name, (revenue - LAG(revenue) OVER (PARTITION BY restaurant_name ORDER BY year)) / ABS(LAG(revenue) OVER (PARTITION BY restaurant_name ORDER BY year)) as revenue_growth FROM restaurants;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Here is the SQL query to calculate the year-over-year revenue growth for each restaurant:\n```sql\nSELECT\n    r.restaurant_name,\n    r.year,\n    r.revenue AS current_year_revenue,\n    LAG(r.revenue) OVER (PARTITION BY r.restaurant_id ORDER BY r.year) AS previous_year_revenue,\n    ((r.revenue - LAG(r.revenue) OVER (PARTITION BY r.restaurant_id ORDER BY r.year)) / LAG(r.revenue) OVER (PARTITION BY r.restaurant_id ORDER BY r.year)) * 100 AS revenue_growth_percentage\nFROM restaurants r;\n```\n\nThis query uses the `'
), 1), (Example({'sql_prompt': 'What is the percentage of users in Canada who have used the hashtag #travel?', 'sql_context': "CREATE TABLE posts (id INT, user_id INT, hashtags TEXT); INSERT INTO posts (id, user_id, hashtags) VALUES (1, 1, '#travel'), (2, 1, '#food'), (3, 2, '#travel'), (4, 3, '#art'), (5, 4, '#music'); CREATE TABLE users (id INT, country VARCHAR(2)); INSERT INTO users (id, country) VALUES (1, 'CA'), (2, 'US'), (3, 'CA'), (4, 'DE');", 'sql': "SELECT 100.0 * COUNT(DISTINCT user_id) / (SELECT COUNT(DISTINCT user_id) FROM posts JOIN users ON posts.user_id = users.id WHERE users.country = 'CA') as percentage_travel FROM posts JOIN users ON posts.user_id = users.id WHERE hashtags LIKE '%#travel%' AND users.country = 'CA';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Here is the SQL query based on the provided prompt and context:\n```sql\nSELECT\n    COUNT(*) AS total_users_with_hashtag,\n    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM users WHERE country = \'CA\')) AS percentage_of_users_in_canada\nFROM\n    posts\nWHERE\n    hashtags LIKE \'%#travel%\'\n    AND user_id IN (\n        SELECT user_id\n        FROM users\n        WHERE country = \'CA\'\n    );\n```\n\nThis query calculates the total number of users in Canada who have used the hashtag "#travel" and then computes the percentage of those users out of all users in Canada. The subquery `(SELECT COUNT(*) FROM users WHERE'
), 1), (Example({'sql_prompt': 'What is the total number of points scored by each team in the NBA this season?', 'sql_context': "CREATE TABLE nba_teams (team_name TEXT, points_scored INT); INSERT INTO nba_teams (team_name, points_scored) VALUES ('Cavaliers', 8000), ('Warriors', 8500), ('Celtics', 7500);", 'sql': 'SELECT team_name, SUM(points_scored) FROM nba_teams GROUP BY team_name;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Here is the SQL query based on the prompt and context provided:\n\n```sql\nSELECT team_name, points_scored\nFROM nba_teams;\n```\n\nThis query selects the team names and their corresponding points scored from the `nba_teams` table. The context provided includes a table creation and insertion of data for three NBA teams with their respective points scored. The query then retrieves the information from this table.'
), 1), (Example({'sql_prompt': 'What is the highest number of hat-tricks scored by a player in a single Bundesliga season?', 'sql_context': "CREATE TABLE german_teams (team_id INT, team_name VARCHAR(50)); INSERT INTO german_teams (team_id, team_name) VALUES (1, 'Bayern Munich'), (2, 'Borussia Dortmund'), (3, 'RB Leipzig'); CREATE TABLE german_matches (match_id INT, home_team_id INT, away_team_id INT, home_team_player_hat_tricks INT, away_team_player_hat_tricks INT); INSERT INTO german_matches (match_id, home_team_id, away_team_id, home_team_player_hat_tricks, away_team_player_hat_tricks) VALUES (1, 1, 2, 1, 0), (2, 2, 3, 0, 1), (3, 3, 1, 1, 0);", 'sql': 'SELECT MAX(home_team_player_hat_tricks + away_team_player_hat_tricks) AS max_hat_tricks FROM german_matches;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Here is the SQL query based on the provided prompt and context:\n```sql\nSELECT MAX(home_team_player_hat_tricks + away_team_player_hat_tricks) AS max_hat_tricks\nFROM german_matches;\n```\n\nThis query calculates the maximum number of hat-tricks scored by players in a single Bundesliga season. It adds up the hat-tricks for both the home and away teams and then finds the maximum value of this sum across all matches.'
), 1), (Example({'sql_prompt': "What is the average word count for articles published in the 'news' schema, grouped by author?", 'sql_context': "CREATE TABLE news.articles (article_id INT, title VARCHAR(100), author VARCHAR(100), word_count INT); INSERT INTO news.articles (article_id, title, author, word_count) VALUES (1, 'Article 1', 'John Doe', 500), (2, 'Article 2', 'Jane Doe', 600), (3, 'Article 3', 'John Doe', 700);", 'sql': 'SELECT author, AVG(word_count) FROM news.articles GROUP BY author;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Here is the SQL query based on the provided prompt and context:\n\n```sql\nSELECT author, AVG(word_count) AS average_word_count\nFROM news.articles\nGROUP BY author;\n```\n\nThis query calculates the average word count for articles published in the 'news' schema, grouped by author. The `AVG` function is used to calculate the average word count for each author, and the `GROUP BY` clause groups the results by author."
), 1), (Example({'sql_prompt': 'Show the total budget allocation for healthcare services in the top 5 states with the highest budget allocation', 'sql_context': 'CREATE TABLE healthcare_services (service_id INT, state_id INT, budget FLOAT);CREATE TABLE states (state_id INT, state_name TEXT);', 'sql': 'SELECT s.state_name, SUM(hs.budget)  FROM healthcare_services hs INNER JOIN states s ON hs.state_id = s.state_id GROUP BY s.state_name ORDER BY SUM(hs.budget) DESC LIMIT 5;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Here is the SQL query based on the prompt and context provided:\n\n```sql\nSELECT h.state_id, s.state_name, SUM(h.budget) AS total_budget\nFROM healthcare_services h\nJOIN states s ON h.state_id = s.state_id\nGROUP BY h.state_id, s.state_name\nORDER BY total_budget DESC\nLIMIT 5;\n```\n\nThis query joins the `healthcare_services` and `states` tables on the `state_id` column, calculates the sum of budget allocations for each state, groups the results by state, orders them by total budget in descending order, and finally limits the output to the top'
), 1), (Example({'sql_prompt': 'Find the total volume of timber sold in 2021', 'sql_context': "CREATE TABLE forests (id INT, name VARCHAR(50), hectares DECIMAL(5,2), year_planted INT, PRIMARY KEY (id)); INSERT INTO forests (id, name, hectares, year_planted) VALUES (1, 'Forest A', 123.45, 1990), (2, 'Forest B', 654.32, 1985); CREATE TABLE timber_sales (id INT, forest_id INT, year INT, volume DECIMAL(10,2), PRIMARY KEY (id)); INSERT INTO timber_sales (id, forest_id, year, volume) VALUES (1, 1, 2021, 120.50), (2, 1, 2022, 150.75), (3, 2, 2021, 450.23), (4, 2, 2022, 520.89);", 'sql': 'SELECT SUM(ts.volume) FROM timber_sales ts INNER JOIN forests f ON ts.forest_id = f.id WHERE ts.year = 2021;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Here is the SQL query to find the total volume of timber sold in 2021:\n```sql\nSELECT SUM(volume) AS total_volume_sold\nFROM timber_sales\nWHERE year = 2021;\n```\n\nThis query sums up the 'volume' column from the 'timber_sales' table where the 'year' is equal to 2021, giving you the total volume of timber sold in that year."
), 1), (Example({'sql_prompt': 'Who are the top 3 suppliers of recycled polyester?', 'sql_context': "CREATE TABLE suppliers (id INT, name VARCHAR(255), material VARCHAR(255)); INSERT INTO suppliers (id, name, material) VALUES (1, 'Supplier A', 'Recycled Polyester'), (2, 'Supplier B', 'Organic Cotton'), (3, 'Supplier C', 'Recycled Polyester'), (4, 'Supplier D', 'Hemp'), (5, 'Supplier E', 'Recycled Polyester');", 'sql': "SELECT name FROM suppliers WHERE material = 'Recycled Polyester' GROUP BY name ORDER BY COUNT(*) DESC LIMIT 3;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Here is the SQL query based on the provided prompt and context:\n\n```sql\nSELECT name\nFROM suppliers\nWHERE material = 'Recycled Polyester'\nORDER BY id DESC\nLIMIT 3;\n```\n\nThis query selects the names of the top 3 suppliers who supply recycled polyester, ordered by their ID in descending order."
), 1), (Example({'sql_prompt': "How many donors have donated more than $100 in the 'Donations' table?", 'sql_context': "CREATE TABLE Donations (DonorID INT, DonationDate DATE, Amount DECIMAL(10, 2)); INSERT INTO Donations (DonorID, DonationDate, Amount) VALUES (1, '2022-02-01', 120.00), (2, '2022-01-15', 75.00), (3, '2022-03-05', 150.00);", 'sql': 'SELECT COUNT(*) FROM Donations WHERE Amount > 100;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='```sql\nSELECT COUNT(*) AS DonorCount\nFROM Donations\nWHERE Amount > 100;\n```'
), 1), (Example({'sql_prompt': "Update the 'Angkor Wat' excavation to have a start date of 1300-01-01.", 'sql_context': "CREATE TABLE ExcavationSites (SiteID INT PRIMARY KEY, Name VARCHAR(255), Country VARCHAR(255), StartDate DATE, EndDate DATE); INSERT INTO ExcavationSites (SiteID, Name, Country, StartDate, EndDate) VALUES (5, 'Angkor Wat', 'Cambodia', '1860-01-01', '1860-05-01');", 'sql': "UPDATE ExcavationSites SET StartDate = '1300-01-01' WHERE Name = 'Angkor Wat';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SQL: UPDATE ExcavationSites SET StartDate = '1300-01-01' WHERE Name = 'Angkor Wat';"
), 1), (Example({'sql_prompt': 'Calculate the total CO2 emissions (in metric tons) per capita for each country in the population_data and carbon_emissions tables.', 'sql_context': 'CREATE TABLE population_data (country VARCHAR(50), year INT, population INT); CREATE TABLE carbon_emissions (country VARCHAR(50), year INT, co2_emissions FLOAT);', 'sql': 'SELECT p.country, AVG(co2_emissions/population*1000000) as co2_emissions_per_capita FROM population_data p JOIN carbon_emissions c ON p.country = c.country GROUP BY p.country;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='```sql\nSELECT p.country,\n       (ce.co2_emissions / NULLIF(p.population, 0)) * 1000 AS co2_emissions_per_capita\nFROM population_data p\nJOIN carbon_emissions ce ON p.country = ce.country AND p.year = ce.year;\n```'
), 1), (Example({'sql_prompt': "How many rural infrastructure projects were completed in '2022' in the 'Asia-Pacific' region?", 'sql_context': "CREATE TABLE rural_infrastructure(id INT, project TEXT, location TEXT, completion_year INT); INSERT INTO rural_infrastructure (id, project, location, completion_year) VALUES (1, 'Rural Road Project', 'Asia-Pacific', 2022);", 'sql': "SELECT COUNT(*) FROM rural_infrastructure WHERE location = 'Asia-Pacific' AND completion_year = 2022;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="```sql\nSELECT COUNT(*) AS completed_projects\nFROM rural_infrastructure\nWHERE completion_year = 2022 AND location = 'Asia-Pacific';\n```"
), 1), (Example({'sql_prompt': "What is the average horsepower of luxury vehicles in the 'GreenCar' database produced after 2017?", 'sql_context': 'CREATE TABLE LuxuryVehicles (Id INT, Make VARCHAR(50), Model VARCHAR(50), Year INT, Horsepower INT);', 'sql': 'SELECT AVG(Horsepower) FROM LuxuryVehicles WHERE Year > 2017;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Here is the SQL query based on the provided prompt and context:\n\n```sql\nSELECT AVG(Horsepower) AS AverageHorsepower\nFROM LuxuryVehicles\nWHERE Year > 2017;\n```\n\nThis query calculates the average horsepower of luxury vehicles produced after 2017 by using the `AVG` function on the "Horsepower" column and filtering the data based on the "Year" column being greater than 2017.'
), 1), (Example({'sql_prompt': 'What is the maximum response time for emergency calls in the city of Los Angeles?', 'sql_context': 'CREATE TABLE emergency_calls (id INT, city VARCHAR(20), response_time INT);', 'sql': "SELECT MAX(response_time) FROM emergency_calls WHERE city = 'Los Angeles';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="```sql\nSELECT MAX(response_time) AS max_response_time\nFROM emergency_calls\nWHERE city = 'Los Angeles';\n```"
), 1), (Example({'sql_prompt': 'What is the maximum loan amount for socially responsible loans in the Asia-Pacific region?', 'sql_context': "CREATE TABLE socially_responsible_loans (loan_id INT, region VARCHAR(20), loan_amount DECIMAL(10,2)); INSERT INTO socially_responsible_loans (loan_id, region, loan_amount) VALUES (101, 'Asia-Pacific', 50000), (102, 'Europe', 30000), (103, 'Asia-Pacific', 70000);", 'sql': "SELECT MAX(srl.loan_amount) FROM socially_responsible_loans srl WHERE srl.region = 'Asia-Pacific';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="```sql\nSELECT MAX(loan_amount) AS max_loan_amount\nFROM socially_responsible_loans\nWHERE region = 'Asia-Pacific';\n```"
), 1), (Example({'sql_prompt': 'What is the maximum number of years a traditional art form has been preserved in each country?', 'sql_context': "CREATE TABLE countries (id INT, name TEXT); INSERT INTO countries (id, name) VALUES (1, 'Nigeria'), (2, 'Brazil'); CREATE TABLE art_forms (id INT, country_id INT, name TEXT, year_preserved INT); INSERT INTO art_forms (id, country_id, name, year_preserved) VALUES (1, 1, 'Tie-dye', 500), (2, 1, 'Batik', 1000), (3, 2, 'Capoeira', 400);", 'sql': 'SELECT c.name, MAX(af.year_preserved) FROM countries c JOIN art_forms af ON c.id = af.country_id GROUP BY c.id;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Here is the SQL query based on the provided prompt and context:\n\n```sql\nSELECT a.country_id, c.name AS country_name, MAX(a.year_preserved) AS max_years_preserved\nFROM art_forms a\nJOIN countries c ON a.country_id = c.id\nGROUP BY a.country_id, c.name;\n```\n\nThis query joins the `art_forms` and `countries` tables on the `country_id` column, then groups the results by country and calculates the maximum number of years an art form has been preserved for each country using the `MAX` function.'
), 1), (Example({'sql_prompt': 'What is the maximum hourly wage for each labor category in the construction industry?', 'sql_context': 'CREATE TABLE labor_statistics (id INT, industry VARCHAR(255), category VARCHAR(255), title VARCHAR(255), hourly_wage DECIMAL(5,2));', 'sql': "SELECT industry, category, MAX(hourly_wage) as max_hourly_wage FROM labor_statistics WHERE industry = 'construction' GROUP BY industry, category;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='```sql\nSELECT MAX(hourly_wage) AS max_hourly_wage, category\nFROM labor_statistics\nWHERE industry = \'construction\'\nGROUP BY category;\n```\n\nThis SQL query retrieves the maximum hourly wage for each labor category within the construction industry. It uses the `MAX` function to find the highest hourly wage for each category and groups the results by the "category" column.'
), 1), (Example({'sql_prompt': 'List all the drought-impacted counties in Texas in 2018.', 'sql_context': "CREATE TABLE drought_impact(county VARCHAR(20), state VARCHAR(20), year INT, impacted BOOLEAN); INSERT INTO drought_impact(county, state, year, impacted) VALUES ('Harris', 'Texas', 2015, true), ('Harris', 'Texas', 2016, true), ('Harris', 'Texas', 2017, true), ('Harris', 'Texas', 2018, true), ('Bexar', 'Texas', 2015, false), ('Bexar', 'Texas', 2016, false), ('Bexar', 'Texas', 2017, false), ('Bexar', 'Texas', 2018, false);", 'sql': "SELECT county FROM drought_impact WHERE state = 'Texas' AND year = 2018 AND impacted = true;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Here is the SQL query based on the provided prompt and context:\n\n```sql\nSELECT county, state, year\nFROM drought_impact\nWHERE state = 'Texas' AND impacted = true AND year = 2018;\n```\n\nThis query selects the `county`, `state`, and `year` columns from the `drought_impact` table where the `state` is 'Texas', the `impacted` column is true, and the `year` is 2018. This will give you a list of counties in Texas that were impacted by drought in 2018."
), 1), (Example({'sql_prompt': 'Find the top 3 genres with the highest revenue in 2022 for streaming services in the USA.', 'sql_context': "CREATE TABLE streaming_services (service_id INT, service_name VARCHAR(255), revenue DECIMAL(10,2)); INSERT INTO streaming_services (service_id, service_name, revenue) VALUES (1, 'StreamingCo', 5000000.00); CREATE TABLE genre_sales (sale_id INT, service_id INT, genre VARCHAR(255), sales DECIMAL(10,2)); INSERT INTO genre_sales (sale_id, service_id, genre, sales) VALUES (1, 1, 'Rock', 150000.00);", 'sql': "SELECT genre, SUM(sales) as total_sales FROM genre_sales gs JOIN streaming_services s ON gs.service_id = s.service_id WHERE s.service_country = 'USA' AND s.service_year = 2022 GROUP BY genre ORDER BY total_sales DESC LIMIT 3;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Here is the SQL query based on the provided prompt and context:\n```sql\nSELECT g.genre, SUM(ss.revenue) AS total_revenue\nFROM streaming_services ss\nJOIN genre_sales gs ON ss.service_id = gs.service_id\nJOIN genres g ON gs.genre = g.genre\nWHERE ss.service_name = 'StreamingCo' AND EXTRACT(YEAR FROM gs.sale_date) = 2022\nGROUP BY g.genre\nORDER BY total_revenue DESC\nLIMIT 3;\n```\n\nThis query joins the `streaming_services`, `genre_sales`, and `genres` tables on their respective IDs, filters the data for 'Streaming"
), 0), (Example({'sql_prompt': "List all unique fields from the 'geology' and 'infrastructure' tables.", 'sql_context': 'CREATE TABLE geology (well_id INT, rock_type VARCHAR(50)); CREATE TABLE infrastructure (well_id INT, platform_type VARCHAR(50));', 'sql': "SELECT field FROM (SELECT 'geology' as table_name, column_name as field FROM information_schema.columns WHERE table_name = 'geology' UNION ALL SELECT 'infrastructure' as table_name, column_name as field FROM information_schema.columns WHERE table_name = 'infrastructure') as subquery;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Here is the SQL query based on the provided prompt and context:\n\n```sql\nSELECT DISTINCT g.rock_type, i.platform_type\nFROM geology g\nJOIN infrastructure i ON g.well_id = i.well_id;\n```\n\nThis query uses a `JOIN` operation to combine the 'geology' and 'infrastructure' tables based on the common 'well_id' field. The `DISTINCT` keyword ensures that only unique combinations of 'rock_type' and 'platform_type' are included in the result set."
), 1), (Example({'sql_prompt': 'Calculate the percentage of total Europium production for each country.', 'sql_context': 'CREATE TABLE europium_production (country VARCHAR(50), quantity INT);', 'sql': 'SELECT country, quantity * 100.0 / SUM(quantity) OVER (PARTITION BY NULL) AS percentage FROM europium_production;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='```sql\nSELECT country,\n       (quantity / SUM(quantity) OVER ()) * 100 AS percentage_of_total_production\nFROM europium_production;\n```'
), 1), (Example({'sql_prompt': 'Find the mobile subscribers with consecutive speed drops greater than 25% for the last 3 months, ordered by subscription IDs.', 'sql_context': 'CREATE TABLE mobile_usage_detailed (subscriber_id INT, month INT, speed FLOAT); INSERT INTO mobile_usage_detailed (subscriber_id, month, speed) VALUES (1, 1, 100), (1, 2, 80), (1, 3, 70), (2, 1, 200), (2, 2, 180), (2, 3, 160), (3, 1, 150), (3, 2, 130), (3, 3, 110);', 'sql': 'SELECT subscriber_id, speed, month FROM (SELECT subscriber_id, speed, month, LAG(speed, 1) OVER (PARTITION BY subscriber_id ORDER BY month) as prev_speed, LAG(speed, 2) OVER (PARTITION BY subscriber_id ORDER BY month) as prev_prev_speed FROM mobile_usage_detailed) t WHERE t.speed < 0.75 * t.prev_speed AND t.speed < 0.75 * t.prev_prev_speed ORDER BY subscriber_id;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Here is the SQL query based on the provided prompt and context:\n```sql\nSELECT subscriber_id, month, speed\nFROM mobile_usage_detailed ud1\nJOIN (\n    SELECT subscriber_id, month, speed,\n           LAG(speed, 1) OVER (PARTITION BY subscriber_id ORDER BY month) AS prev_speed\n    FROM mobile_usage_detailed\n) ud2 ON ud1.subscriber_id = ud2.subscriber_id AND ud1.month = ud2.month - 1\nWHERE ud2.prev_speed IS NOT NULL\n    AND (ud2.speed / ud2.prev_speed) * 100 < 75;\n```\n\nThis query'
), 0), (Example({'sql_prompt': 'What is the distribution of AI safety research topics by year?', 'sql_context': "CREATE TABLE if not exists ai_safety_research (year INT, topic VARCHAR(255)); INSERT INTO ai_safety_research (year, topic) VALUES (2018, 'Explainable AI'), (2019, 'Algorithmic fairness'), (2020, 'AI safety'), (2021, 'Robust AI'), (2022, 'AI ethics');", 'sql': 'SELECT year, topic, COUNT(*) OVER (PARTITION BY year) as research_count FROM ai_safety_research ORDER BY year;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='```sql\nSELECT year, COUNT(*) AS topic_count\nFROM ai_safety_research\nGROUP BY year\nORDER BY year;\n```\n\nThis SQL query retrieves the distribution of AI safety research topics by year from the `ai_safety_research` table. It groups the data by the "year" column and calculates the count of unique topics for each year, ordering the results in ascending order by year.'
), 1), (Example({'sql_prompt': "How many forest management practices are recorded in the 'tropical_forests'?", 'sql_context': "CREATE TABLE forest_management (id INT, forest_type VARCHAR(50), practice_count INT); INSERT INTO forest_management (id, forest_type, practice_count) VALUES (1, 'Tropical Forests', 45); INSERT INTO forest_management (id, forest_type, practice_count) VALUES (2, 'Temperate Forests', 34);", 'sql': "SELECT practice_count FROM forest_management WHERE forest_type = 'Tropical Forests';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Here is the SQL query based on the provided prompt and context:\n\n```sql\nSELECT practice_count FROM forest_management WHERE forest_type = 'Tropical Forests';\n```\n\nThis query selects the `practice_count` from the `forest_management` table where the `forest_type` is 'Tropical Forests'."
), 0), (Example({'sql_prompt': 'What is the distribution of lifelong learning course enrollments by age group, in total?', 'sql_context': 'CREATE TABLE lifelong_learning (student_id INT, age_group VARCHAR(255), course_id INT); CREATE TABLE courses (course_id INT, course_name VARCHAR(255));', 'sql': 'SELECT l.age_group, COUNT(l.course_id) FROM lifelong_learning l INNER JOIN courses c ON l.course_id = c.course_id GROUP BY l.age_group;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Here is the SQL query based on the provided prompt and context:\n\n```sql\nSELECT age_group, COUNT(*) AS enrollment_count\nFROM lifelong_learning\nJOIN courses ON lifelong_learning.course_id = courses.course_id\nGROUP BY age_group;\n```\n\nThis query joins the `lifelong_learning` table with the `courses` table on the `course_id` column and then groups the results by `age_group`, counting the number of enrollments in each age group for all courses.'
), 1), (Example({'sql_prompt': "Insert new records into the Employee table with the following data: EmployeeID 3, FirstName 'Mike', LastName 'Smith', Department 'Environment'.", 'sql_context': 'CREATE TABLE Employee (EmployeeID INT, FirstName VARCHAR(50), LastName VARCHAR(50), Department VARCHAR(50));', 'sql': "INSERT INTO Employee (EmployeeID, FirstName, LastName, Department) VALUES (3, 'Mike', 'Smith', 'Environment');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Here is the SQL query based on the provided prompt and context:\n```sql\nINSERT INTO Employee (EmployeeID, FirstName, LastName, Department)\nVALUES (3, \'Mike\', \'Smith\', \'Environment\');\n```\n\nThis query inserts a new record into the "Employee" table with the specified values for EmployeeID, FirstName, LastName, and Department.'
), 1), (Example({'sql_prompt': 'Which cosmetic brands have the highest average customer rating?', 'sql_context': "CREATE TABLE brand (id INT, name VARCHAR(255), avg_rating FLOAT); CREATE TABLE rating (brand_id INT, rating FLOAT); INSERT INTO brand (id, name, avg_rating) VALUES (1, 'Lush', 4.2), (2, 'The Body Shop', 4.1), (3, 'Sephora', 4.3); INSERT INTO rating (brand_id, rating) VALUES (1, 4.5), (1, 4.0), (2, 4.1), (2, 4.2), (3, 4.4), (3, 4.3);", 'sql': 'SELECT b.name, AVG(r.rating) as avg_rating FROM brand b JOIN rating r ON b.id = r.brand_id GROUP BY b.name ORDER BY avg_rating DESC;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Here is the SQL query based on the provided prompt and context:\n```sql\nSELECT b.name AS brand_name, AVG(r.rating) AS avg_rating\nFROM brand b\nJOIN rating r ON b.id = r.brand_id\nGROUP BY b.id, b.name\nORDER BY avg_rating DESC;\n```\n\nThis query joins the `brand` and `rating` tables on the `id` column, calculates the average rating for each brand using the `AVG` function, groups the results by brand name, and orders them in descending order of average rating.'
), 1), (Example({'sql_prompt': 'How many unique volunteers worked on projects in each cause area?', 'sql_context': "CREATE TABLE volunteers (id INT, name VARCHAR(30), cause_area VARCHAR(20)); INSERT INTO volunteers (id, name, cause_area) VALUES (1, 'Bob', 'children'), (2, 'Alice', 'children'), (3, 'Charlie', 'health');", 'sql': 'SELECT cause_area, COUNT(DISTINCT name) FROM volunteers GROUP BY cause_area;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='```sql\nSELECT cause_area, COUNT(DISTINCT id) AS unique_volunteers\nFROM volunteers\nGROUP BY cause_area;\n```\n\nThis SQL query retrieves the count of distinct volunteer IDs for each cause area from the "volunteers" table. The result will show the number of unique volunteers associated with each cause area.'
), 1), (Example({'sql_prompt': 'Who were the top 3 content creators in terms of likes received on their posts in January 2022?', 'sql_context': "CREATE SCHEMA content; CREATE TABLE creators(creator_id INT, name VARCHAR(255), total_likes INT); INSERT INTO creators (creator_id, name, total_likes) VALUES (1, 'Alice', 5000); INSERT INTO creators (creator_id, name, total_likes) VALUES (2, 'Bob', 7000);", 'sql': 'SELECT name, SUM(total_likes) AS total_likes_january FROM content.creators WHERE MONTH(created_date) = 1 GROUP BY name ORDER BY total_likes_january DESC LIMIT 3;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Here is the SQL query based on the provided prompt and context:\n\n```sql\nSELECT name, SUM(total_likes) AS total_likes\nFROM creators\nWHERE EXTRACT(MONTH FROM post_date) = 1 AND EXTRACT(YEAR FROM post_date) = 2022\nGROUP BY name\nORDER BY total_likes DESC\nLIMIT 3;\n```\n\nThis query calculates the total likes received by each creator in January 2022, groups the results by creator name, and orders them in descending order of total likes. The `LIMIT 3` clause ensures that only the top 3 creators are returned.'
), 0), (Example({'sql_prompt': "Update records in the 'Volunteers' table where the volunteer's skill level is 'Beginner' and change it to 'Intermediate'", 'sql_context': 'CREATE TABLE Volunteers (id INT PRIMARY KEY, volunteer_name VARCHAR(255), skill_level VARCHAR(255), last_volunteered DATE);', 'sql': "UPDATE Volunteers SET skill_level = 'Intermediate' WHERE skill_level = 'Beginner';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Here is the SQL query based on the provided prompt and context:\n```sql\nUPDATE Volunteers\nSET skill_level = 'Intermediate'\nWHERE skill_level = 'Beginner';\n```\n\nThis query updates the `skill_level` to 'Intermediate' for all records in the 'Volunteers' table where the current `skill_level` is 'Beginner'."
), 1), (Example({'sql_prompt': 'Identify the number of farmers involved in urban agriculture initiatives in California and New York in 2019.', 'sql_context': "CREATE TABLE Urban_Agriculture (Farmer_ID INT, State VARCHAR(20), Initiative VARCHAR(20), Year INT); INSERT INTO Urban_Agriculture (Farmer_ID, State, Initiative, Year) VALUES (101, 'California', 'Community_Garden', 2019), (102, 'California', 'Rooftop_Farming', 2019), (103, 'New_York', 'Community_Garden', 2019);", 'sql': "SELECT COUNT(DISTINCT Farmer_ID) FROM Urban_Agriculture WHERE State IN ('California', 'New York') AND Year = 2019 AND Initiative IN ('Community_Garden', 'Rooftop_Farming');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="```sql\nSELECT COUNT(DISTINCT Farmer_ID) AS NumberOfFarmers\nFROM Urban_Agriculture\nWHERE State IN ('California', 'New York') AND Year = 2019;\n```\n\nThis query counts the distinct number of farmers involved in urban agriculture initiatives in California and New York for the year 2019."
), 1), (Example({'sql_prompt': "Update the accommodation type for a student with a StudentID of 2 from 'Assistive Listening Devices' to 'Sign Language Interpretation'.", 'sql_context': "CREATE TABLE StudentAccommodations (StudentID INT, StudentName VARCHAR(255), DisabilityType VARCHAR(255), AccommodationType VARCHAR(255), GraduationYear INT); INSERT INTO StudentAccommodations (StudentID, StudentName, DisabilityType, AccommodationType, GraduationYear) VALUES (1, 'John Doe', 'Visual Impairment', 'Sign Language Interpretation', 2018), (2, 'Jane Smith', 'Hearing Impairment', 'Assistive Listening Devices', NULL), (3, 'Michael Johnson', 'Mobility Impairment', 'Assistive Technology', 2019), (4, 'Sara Johnson', 'Physical Disability', 'Mobility Assistance', 2022);", 'sql': "UPDATE StudentAccommodations SET AccommodationType = 'Sign Language Interpretation' WHERE StudentID = 2;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Here is the SQL query based on the provided prompt and context:\n```sql\nUPDATE StudentAccommodations\nSET AccommodationType = 'Sign Language Interpretation'\nWHERE StudentID = 2;\n```\n\nThis query updates the `AccommodationType` for the student with `StudentID` of 2 to 'Sign Language Interpretation'."
), 1), (Example({'sql_prompt': 'What is the minimum square footage of an inclusive housing unit in the city of Miami?', 'sql_context': "CREATE TABLE housing (id INT, city VARCHAR(20), size INT, inclusive BOOLEAN); INSERT INTO housing (id, city, size, inclusive) VALUES (1, 'Miami', 800, TRUE), (2, 'Miami', 1000, FALSE), (3, 'Miami', 1200, TRUE);", 'sql': "SELECT MIN(size) FROM housing WHERE city = 'Miami' AND inclusive = TRUE;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="```sql\nSELECT MIN(size) AS min_square_footage\nFROM housing\nWHERE city = 'Miami' AND inclusive = TRUE;\n```"
), 1), (Example({'sql_prompt': 'How many works were exhibited in the year 1950?', 'sql_context': "CREATE TABLE exhibitions (exhibition_id INT PRIMARY KEY, exhibition_name TEXT, year INT, location TEXT);CREATE TABLE exhibits (exhibit_id INT PRIMARY KEY, work_id INT, exhibition_id INT, FOREIGN KEY (work_id) REFERENCES works(work_id), FOREIGN KEY (exhibition_id) REFERENCES exhibitions(exhibition_id));INSERT INTO exhibitions (exhibition_id, exhibition_name, year, location) VALUES (1, 'Documenta', 1950, 'Kassel, Germany'); INSERT INTO exhibits (exhibit_id, work_id, exhibition_id) VALUES (1, 1, 1);", 'sql': 'SELECT COUNT(*) FROM exhibits e JOIN exhibitions ex ON e.exhibition_id = ex.exhibition_id WHERE ex.year = 1950;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='SELECT COUNT(DISTINCT e.work_id) AS num_works\nFROM exhibitions AS ex\nJOIN exhibits AS e ON ex.exhibition_id = e.exhibition_id\nWHERE ex.year = 1950;'
), 1), (Example({'sql_prompt': 'What is the total number of articles written by each author in each region?', 'sql_context': "CREATE TABLE authors (id INT, name TEXT); CREATE TABLE regions (id INT, name TEXT); CREATE TABLE articles (id INT, title TEXT, content TEXT, author_id INT, region_id INT); INSERT INTO authors (id, name) VALUES (1, 'John Doe'), (2, 'Jane Smith'); INSERT INTO regions (id, name) VALUES (1, 'North'), (2, 'South'), (3, 'East'), (4, 'West'); INSERT INTO articles (id, title, content, author_id, region_id) VALUES (1, 'Article 1', 'Content 1', 1, 1), (2, 'Article 2', 'Content 2', 2, 2), (3, 'Article 3', 'Content 3', 1, 3), (4, 'Article 4', 'Content 4', 2, 4);", 'sql': 'SELECT authors.name, regions.name, COUNT(articles.id) FROM authors INNER JOIN articles ON authors.id = articles.author_id INNER JOIN regions ON regions.id = articles.region_id GROUP BY authors.name, regions.name;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Here is the SQL query based on the provided prompt and context:\n```sql\nSELECT a.name AS author_name, r.name AS region_name, COUNT(art.id) AS article_count\nFROM authors a\nJOIN articles art ON a.id = art.author_id\nJOIN regions r ON art.region_id = r.id\nGROUP BY a.name, r.name;\n```\n\nThis query joins the `authors`, `articles`, and `regions` tables on their respective IDs and groups the results by author name and region name to calculate the count of articles written by each author in each region.'
), 1), (Example({'sql_prompt': 'How many tunnels in Washington state were constructed after 2010?', 'sql_context': "CREATE TABLE tunnels (id INT, name TEXT, state TEXT, build_year INT); INSERT INTO tunnels (id, name, state, build_year) VALUES (1, 'WA-1 Underpass', 'WA', 2012);", 'sql': "SELECT COUNT(*) FROM tunnels WHERE state = 'WA' AND build_year > 2010;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="```sql\nSELECT COUNT(*) FROM tunnels WHERE state = 'WA' AND build_year > 2010;\n```"
), 1), (Example({'sql_prompt': 'List the top 5 models with the highest explainability scores and their development team names.', 'sql_context': 'CREATE TABLE ModelExplainabilityScores (ModelID INT, ExplainabilityScore INT, TeamID INT); CREATE TABLE TeamNames (TeamID INT, TeamName VARCHAR(50));', 'sql': 'SELECT ModelExplainabilityScores.ModelID, MAX(ModelExplainabilityScores.ExplainabilityScore) AS MaxExplainabilityScore, TeamNames.TeamName FROM ModelExplainabilityScores INNER JOIN TeamNames ON ModelExplainabilityScores.TeamID = TeamNames.TeamID GROUP BY ModelExplainabilityScores.TeamID ORDER BY MaxExplainabilityScore DESC, TeamNames.TeamName DESC LIMIT 5;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Here is the SQL query based on the prompt and context provided:\n\n```sql\nSELECT m.ModelID, t.TeamName, m.ExplainabilityScore\nFROM ModelExplainabilityScores m\nJOIN TeamNames t ON m.TeamID = t.TeamID\nORDER BY m.ExplainabilityScore DESC\nLIMIT 5;\n```\n\nThis query joins the `ModelExplainabilityScores` and `TeamNames` tables on the `TeamID` column, orders the results by the explainability score in descending order, and limits the output to the top 5 rows.'
), 1), (Example({'sql_prompt': 'How many renewable energy power plants are there in Texas?', 'sql_context': "CREATE TABLE power_plants (state VARCHAR(255), source_type VARCHAR(255), count INT); INSERT INTO power_plants (state, source_type, count) VALUES ('Texas', 'Wind', 45), ('Texas', 'Solar', 25), ('Texas', 'Hydro', 10);", 'sql': "SELECT SUM(count) FROM power_plants WHERE state = 'Texas';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Here is the SQL query based on the provided prompt and context:\n\n```sql\nSELECT COUNT(*) AS renewable_plant_count\nFROM power_plants\nWHERE state = 'Texas';\n```\n\nThis query counts the number of rows in the `power_plants` table where the `state` is 'Texas', giving you the total number of renewable energy power plants in that state."
), 0), (Example({'sql_prompt': 'Find the top 5 countries with the lowest financial capability scores in Europe.', 'sql_context': 'CREATE TABLE financial_capability (id INT, country VARCHAR(255), score INT);', 'sql': "SELECT country, score FROM (SELECT country, score, ROW_NUMBER() OVER (ORDER BY score ASC) rn FROM financial_capability WHERE region = 'Europe') t WHERE rn <= 5;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="```sql\nSELECT country, score\nFROM financial_capability\nWHERE continent = 'Europe'\nORDER BY score ASC\nLIMIT 5;\n```"
), 0), (Example({'sql_prompt': 'What is the correlation between climate change and biodiversity in the Arctic?', 'sql_context': "CREATE TABLE Climate_Change (id INT PRIMARY KEY, year INT, temperature FLOAT, region VARCHAR(50)); CREATE TABLE Biodiversity (id INT, year INT, species_count INT, region VARCHAR(50), climate_id INT, FOREIGN KEY (climate_id) REFERENCES Climate_Change(id)); INSERT INTO Climate_Change (id, year, temperature, region) VALUES (1, 2000, -10.0, 'Arctic'), (2, 2010, -9.5, 'Arctic'); INSERT INTO Biodiversity (id, year, species_count, region, climate_id) VALUES (1, 2000, 100, 'Arctic', 1), (2, 2010, 105, 'Arctic', 2);", 'sql': "SELECT Climate_Change.year, Climate_Change.temperature, Biodiversity.species_count FROM Climate_Change INNER JOIN Biodiversity ON Climate_Change.id = Biodiversity.climate_id WHERE Climate_Change.region = 'Arctic';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Here is the SQL query based on the provided prompt and context:\n```sql\nSELECT c.year, b.year, c.temperature, b.species_count\nFROM Climate_Change c\nJOIN Biodiversity b ON c.id = b.climate_id\nWHERE c.region = 'Arctic' AND b.region = 'Arctic';\n```\n\nThis query joins the `Climate_Change` and `Biodiversity` tables on the `id` and `climate_id` fields, respectively, and filters the results to only include data from the Arctic region. It then selects the year, temperature, and species count for each entry, allowing you to analyze the correlation between climate change (temperature) and biodiversity"
), 1), (Example({'sql_prompt': 'What is the average budget allocated for ethical AI research by country?', 'sql_context': "CREATE TABLE Country (CountryID INT PRIMARY KEY, CountryName VARCHAR(100), Budget DECIMAL(10,2)); INSERT INTO Country (CountryID, CountryName, Budget) VALUES (1, 'USA', 5000000.00), (2, 'Canada', 3000000.00), (3, 'Mexico', 1000000.00);", 'sql': 'SELECT AVG(Budget) as AvgBudget, CountryName FROM Country GROUP BY CountryName;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Here is the SQL query based on the provided prompt and context:\n\n```sql\nSELECT CountryName, Budget / COUNT(*) AS AverageBudget\nFROM Country\nGROUP BY CountryName;\n```\n\nThis query calculates the average budget allocated for ethical AI research by each country. It divides the total budget by the number of records for each country to get the average.'
), 1), (Example({'sql_prompt': 'What is the total fare collected for each train line?', 'sql_context': "CREATE TABLE train_lines (line_id INT, line_name TEXT); CREATE TABLE fares (fare_id INT, line_id INT, fare DECIMAL); INSERT INTO train_lines VALUES (1, 'Line 1'), (2, 'Line 2'), (3, 'Line 3'); INSERT INTO fares VALUES (1, 1, 3.50), (2, 1, 3.50), (3, 2, 4.25), (4, 3, 5.00), (5, 3, 5.00);", 'sql': 'SELECT train_lines.line_name, SUM(fares.fare) AS total_fare FROM train_lines INNER JOIN fares ON train_lines.line_id = fares.line_id GROUP BY train_lines.line_id;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Here is the SQL query based on the provided prompt and context:\n\n```sql\nSELECT line_id, SUM(fare) AS total_fare_collected\nFROM fares\nGROUP BY line_id;\n```\n\nThis query calculates the total fare collected for each train line by grouping the data by `line_id` and summing up the fare values.'
), 1), (Example({'sql_prompt': 'What is the total revenue for cosmetics products that are not cruelty-free?', 'sql_context': 'CREATE TABLE product (product_id INT, name TEXT, price FLOAT, cruelty_free BOOLEAN); CREATE TABLE sales (sale_id INT, product_id INT, quantity INT);', 'sql': 'SELECT SUM(price * quantity) FROM product INNER JOIN sales ON product.product_id = sales.product_id WHERE cruelty_free = FALSE;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='```sql\nSELECT p.price * s.quantity AS revenue\nFROM product p\nJOIN sales s ON p.product_id = s.product_id\nWHERE p.cruelty_free = FALSE;\n```'
), 1), (Example({'sql_prompt': 'What is the total cost of permits for projects with permit numbers greater than 700?', 'sql_context': "CREATE TABLE permit_data (id INT, project VARCHAR(50), permit_number INT, start_date DATE, permit_cost DECIMAL(10,2)); INSERT INTO permit_data (id, project, permit_number, start_date, permit_cost) VALUES (1, 'Office Building', 450, '2019-12-20', 850.00), (2, 'Residential Apartments', 751, '2021-03-01', 1200.50), (3, 'School', 333, '2020-06-15', 500.25), (4, 'Mall', 780, '2020-12-01', 1500.75);", 'sql': 'SELECT SUM(permit_cost) FROM permit_data WHERE permit_number > 700;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Here is the SQL query based on the provided prompt and context:\n```sql\nSELECT SUM(permit_cost) AS total_cost\nFROM permit_data\nWHERE permit_number > 700;\n```\n\nThis query calculates the total cost of permits for projects with permit numbers greater than 700 by summing up the `permit_cost` values in the `permit_data` table where the `permit_number` is greater than 700.'
), 1), (Example({'sql_prompt': 'Find the total square footage of wheelchair-accessible properties in Boston.', 'sql_context': "CREATE TABLE properties (id INT, city VARCHAR(20), square_footage INT, wheelchair_accessible BOOLEAN); INSERT INTO properties (id, city, square_footage, wheelchair_accessible) VALUES (1, 'Boston', 1000, true); INSERT INTO properties (id, city, square_footage, wheelchair_accessible) VALUES (2, 'Boston', 1200, false);", 'sql': "SELECT SUM(square_footage) FROM properties WHERE city = 'Boston' AND wheelchair_accessible = true;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Here is the SQL query based on the provided prompt and context:\n```sql\nSELECT SUM(square_footage) AS total_square_footage\nFROM properties\nWHERE city = 'Boston' AND wheelchair_accessible = true;\n```\n\nThis query calculates the sum of the `square_footage` values for properties in Boston that are marked as wheelchair accessible."
), 1), (Example({'sql_prompt': 'Which operators have the highest average production quantity per well?', 'sql_context': "CREATE TABLE wells (well_id INT, well_name TEXT, production_qty FLOAT, operator_id INT); INSERT INTO wells (well_id, well_name, production_qty, operator_id) VALUES (1, 'Well A', 1000, 1), (2, 'Well B', 1500, 1), (3, 'Well C', 800, 2); CREATE TABLE operators (operator_id INT, operator_name TEXT); INSERT INTO operators (operator_id, operator_name) VALUES (1, 'ABC Inc.'), (2, 'DEF'), (3, 'GHI Inc.');", 'sql': 'SELECT o.operator_name, AVG(w.production_qty) as avg_production FROM wells w JOIN operators o ON w.operator_id = o.operator_id GROUP BY o.operator_name ORDER BY avg_production DESC;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Here is the SQL query based on the provided prompt and context:\n```sql\nSELECT o.operator_name, AVG(w.production_qty) AS avg_production\nFROM wells w\nJOIN operators o ON w.operator_id = o.operator_id\nGROUP BY o.operator_name\nORDER BY avg_production DESC;\n```\n\nThis query joins the `wells` and `operators` tables on the `operator_id`, calculates the average production quantity for each operator using the `AVG` function, groups the results by operator name, and orders them in descending order of average production.'
), 1), (Example({'sql_prompt': 'What was the average number of comments per post in Oceania in the last month?', 'sql_context': "CREATE TABLE comments_posts(region VARCHAR(20), post_date DATE, comments INT, posts INT); INSERT INTO comments_posts(region, post_date, comments, posts) VALUES('Oceania', '2021-09-01', 10, 10), ('Oceania', '2021-09-02', 12, 12), ('Oceania', '2021-09-03', 14, 14), ('Oceania', '2021-09-04', 16, 16), ('Oceania', '2021-09-05', 18, 18), ('Oceania', '2021-09-06', 20, 20), ('Oceania', '2021-09-07', 22, 22);", 'sql': "SELECT AVG(comments/posts) FROM comments_posts WHERE region = 'Oceania' AND post_date >= DATEADD(month, -1, CURRENT_DATE)"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Here is the SQL query based on the provided prompt and context:\n```sql\nSELECT AVG(comments) AS average_comments\nFROM comments_posts\nWHERE region = 'Oceania'\n  AND post_date BETWEEN '2023-08-01' AND '2023-08-31';\n```\n\nThis query calculates the average number of comments per post for the region 'Oceania' during the last month (August 2023). It uses the `AVG` function to compute the average value of the 'comments' column and filters the data using the `WHERE` clause to include only records from the specified region and date range."
), 0), (Example({'sql_prompt': 'What is the geopolitical risk assessment score for each country in 2020?', 'sql_context': "CREATE TABLE GeopoliticalRiskAssessments (assessment_id INT, assessment_name VARCHAR(50), score INT, assessment_date DATE, country VARCHAR(50)); INSERT INTO GeopoliticalRiskAssessments (assessment_id, assessment_name, score, assessment_date, country) VALUES (1, 'Assessment A', 7, '2020-01-01', 'USA'), (2, 'Assessment B', 5, '2020-02-15', 'Russia'), (3, 'Assessment C', 8, '2020-03-31', 'China');", 'sql': "SELECT country, score FROM GeopoliticalRiskAssessments WHERE assessment_date BETWEEN '2020-01-01' AND '2020-12-31';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Here is the SQL query based on the provided prompt and context:\n\n```sql\nSELECT country, score AS geopolitical_risk_assessment_score\nFROM GeopoliticalRiskAssessments\nWHERE assessment_date = '2020-01-01' OR assessment_date = '2020-02-15' OR assessment_date = '2020-03-31';\n```\n\nThis query selects the country and score columns from the GeopoliticalRiskAssessments table for assessments with dates in 2020, providing the geopolitical risk assessment scores for each country during that year."
), 0), (Example({'sql_prompt': 'Find the total revenue for events with an attendance over 200 in 2021.', 'sql_context': "CREATE TABLE events (event_id INT, event_name VARCHAR(50), attendance INT, revenue DECIMAL(10,2), event_date DATE); INSERT INTO events (event_id, event_name, attendance, revenue, event_date) VALUES (1, 'Art Exhibition', 250, 15000, '2021-06-01'); INSERT INTO events (event_id, event_name, attendance, revenue, event_date) VALUES (2, 'Theater Performance', 180, 12000, '2021-07-15');", 'sql': 'SELECT SUM(revenue) FROM events WHERE attendance > 200 AND YEAR(event_date) = 2021;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Here is the SQL query based on the provided prompt and context:\n```sql\nSELECT SUM(revenue) AS total_revenue\nFROM events\nWHERE attendance > 200 AND EXTRACT(YEAR FROM event_date) = 2021;\n```\n\nThis query calculates the total revenue by summing up the 'revenue' column for events that had an attendance of more than 200 in the year 2021."
), 1), (Example({'sql_prompt': "find the number of records in the CommunityHealthStatistics table where the State is 'TX' and the County is 'Harris'", 'sql_context': "CREATE TABLE CommunityHealthStatistics (ID INT, State TEXT, County TEXT, Population INT, AverageIncome FLOAT); INSERT INTO CommunityHealthStatistics (ID, State, County, Population, AverageIncome) VALUES (1, 'TX', 'Harris', 4500000, 60000), (2, 'CA', 'LA', 2500000, 70000);", 'sql': "SELECT * FROM CommunityHealthStatistics WHERE State = 'TX' AND County = 'Harris';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Here is the SQL query based on the provided prompt and context:\n\n```sql\nSELECT COUNT(*) AS RecordCount\nFROM CommunityHealthStatistics\nWHERE State = 'TX' AND County = 'Harris';\n```\n\nThis query counts the number of records in the `CommunityHealthStatistics` table where the `State` is 'TX' and the `County` is 'Harris'. The result will be a single column named `RecordCount` with the count of records that match the specified criteria."
), 1), (Example({'sql_prompt': "Insert a new record into the 'weapons' table with the following data: 'Javelin', 'USA', 'in-development'", 'sql_context': "CREATE TABLE weapons (id INT PRIMARY KEY, name VARCHAR(255), origin VARCHAR(255), status VARCHAR(255)); INSERT INTO weapons (id, name, origin) VALUES (1, 'AK-47', 'Russia'), (2, 'RPG-7', 'Russia');", 'sql': "INSERT INTO weapons (name, origin, status) VALUES ('Javelin', 'USA', 'in-development');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Here is the SQL query based on the provided prompt and context:\n\n```sql\nINSERT INTO weapons (name, origin, status)\nVALUES ('Javelin', 'USA', 'in-development');\n```\n\nThis query inserts a new record into the 'weapons' table with the specified data. The name of the weapon is 'Javelin', its origin is 'USA', and its status is 'in-development'."
), 1), (Example({'sql_prompt': 'Count the number of mining incidents per month in 2021.', 'sql_context': "CREATE TABLE incidents (id INT, date DATE, incident_type TEXT); INSERT INTO incidents (id, date, incident_type) VALUES (1, '2021-01-05', 'equipment_failure'); INSERT INTO incidents (id, date, incident_type) VALUES (2, '2021-03-12', 'safety_violation');", 'sql': "SELECT DATE_PART('month', date) AS month, COUNT(*) FROM incidents WHERE date >= '2021-01-01' AND date < '2022-01-01' GROUP BY month;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='```sql\nSELECT COUNT(*) AS incident_count,\n       EXTRACT(MONTH FROM date) AS month,\n       EXTRACT(YEAR FROM date) AS year\nFROM incidents\nWHERE EXTRACT(YEAR FROM date) = 2021\nGROUP BY year, month\nORDER BY year, month;\n```'
), 1), (Example({'sql_prompt': "How many workers are employed in 'renewable energy' sector?", 'sql_context': "CREATE TABLE workers (id INT, worker_name VARCHAR(255), department VARCHAR(255)); INSERT INTO workers (id, worker_name, department) VALUES (1, 'John Doe', 'renewable energy'), (2, 'Jane Smith', 'textiles'), (3, 'Michael Brown', 'renewable energy');", 'sql': "SELECT COUNT(*) FROM workers WHERE department = 'renewable energy';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Here is the SQL query based on the provided prompt and context:\n\n```sql\nSELECT COUNT(*) AS worker_count\nFROM workers\nWHERE department = 'renewable energy';\n```\n\nThis query counts the number of workers in the 'workers' table where the 'department' column is equal to 'renewable energy'. The result will be a single value representing the number of workers employed in the renewable energy sector."
), 1), (Example({'sql_prompt': 'What is the average performance score for each game genre?', 'sql_context': "CREATE TABLE game_genre_performance (game_id INT, game_genre VARCHAR(255), performance_score INT); INSERT INTO game_genre_performance (game_id, game_genre, performance_score) VALUES (1, 'RPG', 85), (2, 'Strategy', 90), (3, 'RPG', 80);", 'sql': 'SELECT game_genre, AVG(performance_score) as avg_score FROM game_genre_performance GROUP BY game_genre;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Here is the SQL query based on the provided prompt and context:\n```sql\nSELECT game_genre, AVG(performance_score) AS average_score\nFROM game_genre_performance\nGROUP BY game_genre;\n```\n\nThis query calculates the average performance score for each game genre by grouping the data by `game_genre` and then applying the `AVG` function to the `performance_score` column.'
), 1), (Example({'sql_prompt': 'How many Indigenous communities in the Arctic are experiencing negative socio-economic impacts due to climate change?', 'sql_context': "CREATE TABLE IndigenousCommunities(community TEXT, socio_economic_impact TEXT, climate_change_impact TEXT); INSERT INTO IndigenousCommunities(community, socio_economic_impact, climate_change_impact) VALUES ('Inuit', 'High', 'Very High'), ('Sami', 'Medium', 'High');", 'sql': "SELECT COUNT(*) FROM IndigenousCommunities WHERE socio_economic_impact = 'High' AND climate_change_impact = 'High' OR socio_economic_impact = 'Very High' AND climate_change_impact = 'Very High';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Here is the SQL query based on the provided prompt and context:\n```sql\nSELECT COUNT(*) AS affected_communities\nFROM IndigenousCommunities\nWHERE climate_change_impact = 'High' OR climate_change_impact = 'Very High';\n```\n\nThis query counts the number of Indigenous communities that are experiencing negative socio-economic impacts due to climate change, as indicated by the values 'High' and 'Very High' in the `climate_change_impact` column."
), 0), (Example({'sql_prompt': 'What is the minimum depth recorded in the Mariana Trench?', 'sql_context': "CREATE TABLE ocean_floor_mapping (location VARCHAR(255), depth FLOAT);   INSERT INTO ocean_floor_mapping (location, depth) VALUES ('Mariana Trench', 10994.0), ('Challenger Deep', 10972.8);", 'sql': "SELECT MIN(depth) FROM ocean_floor_mapping WHERE location = 'Mariana Trench';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="```sql\nSELECT MIN(depth) AS min_depth\nFROM ocean_floor_mapping\nWHERE location = 'Mariana Trench';\n```"
), 1), (Example({'sql_prompt': 'List all farmers who have not serviced their irrigation systems in the last 6 months.', 'sql_context': "CREATE TABLE farmer_irrigation (id INT, farmer_id INT, system_type VARCHAR(50), service_date DATE); INSERT INTO farmer_irrigation (id, farmer_id, system_type, service_date) VALUES (1, 1, 'Drip', '2021-08-01'), (2, 2, 'Sprinkler', '2021-10-15'), (3, 3, 'Drip', '2021-11-01'), (4, 4, 'Sprinkler', '2022-02-01'), (5, 5, 'Drip', '2022-03-01'), (6, 6, 'Sprinkler', '2022-01-15'), (7, 7, 'Drip', '2021-06-01'), (8, 8, 'Sprinkler', '2022-04-01'), (9, 9, 'Drip', '2021-12-01'), (10, 10, 'Sprinkler', '2022-05-15');", 'sql': 'SELECT farmers.name FROM farmers LEFT JOIN farmer_irrigation ON farmers.id = farmer_irrigation.farmer_id WHERE farmer_irrigation.service_date <= DATE_SUB(CURDATE(), INTERVAL 6 MONTH);'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Here is the SQL query based on the provided prompt and context:\n\n```sql\nSELECT DISTINCT fi.farmer_id\nFROM farmer_irrigation fi\nWHERE fi.service_date < DATEADD(MONTH, -6, GETDATE());\n```\n\nThis query selects distinct farmer IDs from the `farmer_irrigation` table where the service date is older than 6 months from the current date.'
), 1), (Example({'sql_prompt': 'What is the most common type of medical equipment across hospitals?', 'sql_context': "CREATE TABLE medical_equipment (id INT, hospital_name TEXT, location TEXT, equipment TEXT, quantity INT, last_updated_date DATE); INSERT INTO medical_equipment (id, hospital_name, location, equipment, quantity, last_updated_date) VALUES (1, 'NY Presbyterian', 'NYC', 'Ventilators', 80, '2021-03-31'); INSERT INTO medical_equipment (id, hospital_name, location, equipment, quantity, last_updated_date) VALUES (2, 'Stanford Hospital', 'Palo Alto', 'Ventilators', 90, '2021-03-31');", 'sql': 'SELECT equipment, MAX(quantity) as max_quantity FROM medical_equipment GROUP BY equipment ORDER BY max_quantity DESC LIMIT 1;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Here is the SQL query based on the provided prompt and context:\n```sql\nSELECT equipment, COUNT(*) AS quantity\nFROM medical_equipment\nGROUP BY equipment\nORDER BY quantity DESC\nLIMIT 1;\n```\n\nThis query calculates the most common type of medical equipment by counting the occurrences of each unique piece of equipment in the `medical_equipment` table and then ordering the results in descending order based on the quantity. The `LIMIT 1` clause ensures that only the most common type is returned.'
), 1), (Example({'sql_prompt': "What is the average rating for 'Gluten-Free' items?", 'sql_context': "CREATE TABLE ratings (item_name TEXT, is_gluten_free BOOLEAN, rating INTEGER); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Quinoa Salad', true, 4); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Chicken Stir Fry', false, 5);", 'sql': 'SELECT AVG(rating) FROM ratings WHERE is_gluten_free = true;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Here is the SQL query based on the provided prompt and context:\n\n```sql\nSELECT AVG(rating) AS average_rating\nFROM ratings\nWHERE is_gluten_free = true;\n```\n\nThis query calculates the average rating for items that are marked as 'Gluten-Free' in the `ratings` table."
), 1), (Example({'sql_prompt': 'How many water treatment facilities are there in each country, and what is their distribution by continent?', 'sql_context': "CREATE TABLE facilities (id INT, facility_name VARCHAR(50), country VARCHAR(50), total_employees INT); INSERT INTO facilities (id, facility_name, country, total_employees) VALUES (1, 'Water Treatment Plant 1', 'Brazil', 25); INSERT INTO facilities (id, facility_name, country, total_employees) VALUES (2, 'Water Treatment Plant 2', 'India', 30);", 'sql': 'SELECT country, COUNT(*) as facility_count, CONTINENT(location) as continent FROM facilities JOIN countries ON facilities.country = countries.country_name GROUP BY country, continent;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Here is the SQL query based on the provided prompt and context:\n```sql\nSELECT country, continent, COUNT(*) AS facility_count\nFROM facilities\nJOIN countries ON facilities.country = countries.country_name\nJOIN continents ON countries.continent = continents.continent_name\nGROUP BY country, continent;\n```\n\nThis query joins the `facilities` table with the `countries` and `continents` tables using their respective names. It then groups the data by country and continent to count the number of water treatment facilities in each country and their distribution across continents.'
), 0), (Example({'sql_prompt': "What is the maximum data usage in the 'urban' region?", 'sql_context': "CREATE TABLE subscribers (id INT, name VARCHAR(50), data_usage FLOAT, region VARCHAR(20)); INSERT INTO subscribers (id, name, data_usage, region) VALUES (1, 'John Doe', 20.0, 'urban'), (2, 'Jane Doe', 18.0, 'urban');", 'sql': "SELECT MAX(data_usage) FROM subscribers WHERE region = 'urban';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="```sql\nSELECT MAX(data_usage) AS max_data_usage\nFROM subscribers\nWHERE region = 'urban';\n```"
), 1), (Example({'sql_prompt': 'Find the average depth of all underwater volcanoes in the Atlantic Ocean.', 'sql_context': "CREATE TABLE underwater_volcanoes (id INT, name VARCHAR(50), depth FLOAT, ocean VARCHAR(20)); INSERT INTO underwater_volcanoes (id, name, depth, ocean) VALUES (1, 'Lost City', 800, 'Atlantic'); INSERT INTO underwater_volcanoes (id, name, depth, ocean) VALUES (2, 'Eyjafjallajokull', 1650, 'Atlantic');", 'sql': "SELECT AVG(depth) FROM underwater_volcanoes WHERE ocean = 'Atlantic';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Here is the SQL query based on the provided prompt and context:\n\n```sql\nSELECT AVG(depth) AS average_depth\nFROM underwater_volcanoes\nWHERE ocean = 'Atlantic';\n```\n\nThis query calculates the average depth of all underwater volcanoes in the Atlantic Ocean by filtering the data based on the 'ocean' column and then using the `AVG()` function to compute the average of the 'depth' column for those rows."
), 1), (Example({'sql_prompt': 'What is the total cost of Mars rover missions that have successfully landed?', 'sql_context': 'CREATE TABLE mars_rovers (id INT PRIMARY KEY, name VARCHAR(255), mission_type VARCHAR(255), agency VARCHAR(255), cost FLOAT, launched_date DATE, landed_date DATE);', 'sql': "SELECT SUM(cost) FROM mars_rovers WHERE mission_type = 'Lander' AND landed_date IS NOT NULL;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Here is the SQL query based on the provided prompt and context:\n\n```sql\nSELECT SUM(cost) AS total_cost\nFROM mars_rovers\nWHERE mission_type = 'lander' AND landed_date IS NOT NULL;\n```\n\nThis query calculates the total cost of all Mars rover missions that have successfully landed. It does so by summing up the `cost` column for rows where the `mission_type` is 'lander' and there is a value in the `landed_date` column (indicating a successful landing)."
), 1), (Example({'sql_prompt': "What is the earliest year a peacekeeping operation was conducted in 'Asia'?", 'sql_context': "CREATE TABLE Peacekeeping_Years (id INT, location VARCHAR(30), year INT); INSERT INTO Peacekeeping_Years (id, location, year) VALUES (1, 'Asia', 1990), (2, 'Asia', 2000);", 'sql': "SELECT MIN(year) FROM Peacekeeping_Years WHERE location = 'Asia';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="SELECT MIN(year) AS earliest_year\nFROM Peacekeeping_Years\nWHERE location = 'Asia';"
), 1), (Example({'sql_prompt': 'Identify the drug with the lowest sales amount in Europe in 2022.', 'sql_context': "CREATE TABLE sales (drug_name TEXT, continent TEXT, sales_amount INT, sale_date DATE); INSERT INTO sales (drug_name, continent, sales_amount, sale_date) VALUES ('Aspirin', 'Europe', 1000, '2022-01-01');", 'sql': "SELECT drug_name, MIN(sales_amount) FROM sales WHERE continent = 'Europe' AND sale_date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY drug_name;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Here is the SQL query based on the prompt and context provided:\n\n```sql\nSELECT drug_name, sales_amount\nFROM sales\nWHERE continent = 'Europe' AND sale_date = '2022-01-01'\nORDER BY sales_amount ASC\nLIMIT 1;\n```\n\nThis query selects the `drug_name` and `sales_amount` columns from the `sales` table where the `continent` is 'Europe' and the `sale_date` is '2022-01-01'. The results are then ordered in ascending order by `sales_amount`, and the `LIMIT 1` clause ensures that only the row with the lowest"
), 0), (Example({'sql_prompt': "Insert a new record into 'customer_preferences' for customer 101 and menu item 1 with a preference score of 90", 'sql_context': 'CREATE TABLE customer_preferences (customer_id INT, item_id INT, preference_score INT);', 'sql': 'INSERT INTO customer_preferences (customer_id, item_id, preference_score) VALUES (101, 1, 90);'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Here is the SQL query based on the provided prompt and context:\n```sql\nINSERT INTO customer_preferences (customer_id, item_id, preference_score)\nVALUES (101, 1, 90);\n```\n\nThis query inserts a new record into the 'customer_preferences' table with the specified values."
), 1), (Example({'sql_prompt': 'Who is the oldest donor from each city?', 'sql_context': "CREATE TABLE donors_2 (id INT PRIMARY KEY, name VARCHAR(50), age INT, city VARCHAR(50), state VARCHAR(50)); INSERT INTO donors_2 (id, name, age, city, state) VALUES (1, 'John Doe', 35, 'New York', 'NY'), (2, 'Jane Smith', 40, 'Buffalo', 'NY'), (3, 'Mike Johnson', 50, 'Boston', 'MA');", 'sql': 'SELECT city, MAX(age) as oldest_donor_age FROM donors_2 GROUP BY city;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Here is the SQL query based on the provided prompt and context:\n\n```sql\nSELECT name, city, age\nFROM donors_2\nWHERE age = (SELECT MAX(age) FROM donors_2 GROUP BY city);\n```\n\nThis query selects the name, city, and age of donors from the `donors_2` table where their age matches the maximum age within each city group. This will return the oldest donor from each unique city in the table.'
), 1), (Example({'sql_prompt': 'What are the union membership statistics for unions that have engaged in successful collective bargaining in the healthcare sector?', 'sql_context': "CREATE TABLE Membership (UnionName TEXT, Sector TEXT, MemberCount INT); INSERT INTO Membership (UnionName, Sector, MemberCount) VALUES ('UnionHealthA', 'Healthcare', 3000), ('UnionHealthB', 'Healthcare', 5000), ('UnionHealthC', 'Healthcare', 2000);", 'sql': "SELECT UnionName, MemberCount FROM Membership WHERE Sector = 'Healthcare' AND UnionName IN (SELECT UnionName FROM CBAs WHERE ExpirationDate > CURDATE());"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="```sql\nSELECT UnionName, Sector, MemberCount\nFROM Membership\nWHERE Sector = 'Healthcare' AND UnionName IN (\n    SELECT UnionName\n    FROM CollectiveBargaining\n    WHERE Outcome = 'Successful'\n);\n```\n\nThis query retrieves the union names, sectors, and member counts for unions in the healthcare sector that have successfully engaged in collective bargaining. It uses a subquery to filter the `Membership` table based on successful collective bargaining outcomes from the `CollectiveBargaining` table."
), 0), (Example({'sql_prompt': 'Calculate the total gas consumption for Nigeria in 2019', 'sql_context': "CREATE TABLE gas_consumption (country VARCHAR(50), consumption_year INT, gas_consumption FLOAT); INSERT INTO gas_consumption (country, consumption_year, gas_consumption) VALUES ('Nigeria', 2019, 12000), ('Nigeria', 2018, 10000), ('Ghana', 2019, 8000), ('Ghana', 2018, 6000), ('Ivory Coast', 2019, 10000), ('Ivory Coast', 2018, 8000);", 'sql': "SELECT gas_consumption FROM gas_consumption WHERE country = 'Nigeria' AND consumption_year = 2019;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Here is the SQL query to calculate the total gas consumption for Nigeria in 2019:\n\n```sql\nSELECT SUM(gas_consumption) AS total_gas_consumption\nFROM gas_consumption\nWHERE country = 'Nigeria' AND consumption_year = 2019;\n```\n\nThis query sums up the `gas_consumption` values for Nigeria in the year 2019 from the `gas_consumption` table and assigns the result to the alias `total_gas_consumption`."
), 1), (Example({'sql_prompt': 'What is the average socially responsible lending loan amount for microfinance institutions in Southeast Asia?', 'sql_context': "CREATE TABLE socially_responsible_lending(id INT, loan_number INT, institution_region VARCHAR(50), amount INT); INSERT INTO socially_responsible_lending VALUES (1, 701, 'Southeast Asia', 5000); INSERT INTO socially_responsible_lending VALUES (2, 702, 'South Asia', 7000); INSERT INTO socially_responsible_lending VALUES (3, 703, 'East Asia', 9000); INSERT INTO socially_responsible_lending VALUES (4, 704, 'Southeast Asia', 6000);", 'sql': "SELECT AVG(amount) FROM socially_responsible_lending WHERE institution_region = 'Southeast Asia' AND type = 'microfinance';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Here is the SQL query based on the provided prompt and context:\n\n```sql\nSELECT AVG(amount) AS average_loan_amount\nFROM socially_responsible_lending\nWHERE institution_region = 'Southeast Asia';\n```\n\nThis query calculates the average loan amount for microfinance institutions in Southeast Asia by filtering the data based on the `institution_region` and then computing the average of the `amount` column."
), 1), (Example({'sql_prompt': 'What is the average salary of employees who identify as Latinx in the Engineering department?', 'sql_context': "CREATE TABLE Employees (EmployeeID int, Name varchar(50), Gender varchar(10), Department varchar(50), Salary decimal(10,2), Ethnicity varchar(50)); INSERT INTO Employees (EmployeeID, Name, Gender, Department, Salary, Ethnicity) VALUES (1, 'Juan Garcia', 'Male', 'Engineering', 85000.00, 'Latinx'); INSERT INTO Employees (EmployeeID, Name, Gender, Department, Salary, Ethnicity) VALUES (2, 'Maria Rodriguez', 'Female', 'Engineering', 90000.00, 'Latinx');", 'sql': "SELECT AVG(Salary) FROM Employees WHERE Department = 'Engineering' AND Ethnicity = 'Latinx';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="Here is the SQL query based on the provided prompt and context:\n```sql\nSELECT AVG(Salary) AS AverageSalary\nFROM Employees\nWHERE Department = 'Engineering' AND Ethnicity = 'Latinx';\n```\n\nThis query calculates the average salary of employees in the Engineering department who identify as Latinx."
), 1), (Example({'sql_prompt': 'What is the name and type of the vessel with the highest average speed?', 'sql_context': "CREATE TABLE Vessels (ID VARCHAR(20), Name VARCHAR(20), Type VARCHAR(20), AverageSpeed FLOAT); INSERT INTO Vessels VALUES ('V012', 'Vessel L', 'Passenger', 35.0), ('V013', 'Vessel M', 'Cargo', 19.5), ('V014', 'Vessel N', 'Passenger', 32.0);", 'sql': 'SELECT Name, Type FROM Vessels WHERE AverageSpeed = (SELECT MAX(AverageSpeed) FROM Vessels);'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql='Here is the SQL query based on the prompt and context provided:\n\n```sql\nSELECT Name, Type\nFROM Vessels\nORDER BY AverageSpeed DESC\nLIMIT 1;\n```\n\nThis query selects the name and type of the vessel with the highest average speed by ordering the rows by `AverageSpeed` in descending order and then limiting the result to the first row.'
), 1), (Example({'sql_prompt': "List all the distinct producers of Gadolinium from the 'production' table, ordered alphabetically.", 'sql_context': 'CREATE TABLE production (element VARCHAR(10), year INT, month INT, producer VARCHAR(20), quantity INT);', 'sql': "SELECT DISTINCT producer FROM production WHERE element = 'Gadolinium' ORDER BY producer ASC;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    sql="```sql\nSELECT DISTINCT producer\nFROM production\nWHERE element = 'Gadolinium'\nORDER BY producer;\n```"
), 1)]