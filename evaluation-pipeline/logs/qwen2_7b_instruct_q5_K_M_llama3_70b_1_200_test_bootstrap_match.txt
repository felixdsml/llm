[(Example({'sql_prompt': 'Delete records with sales amount over $50,000 in the MilitaryEquipmentSales table', 'sql_context': "CREATE TABLE MilitaryEquipmentSales (id INT, equipment_name VARCHAR(50), sale_amount INT, sale_date DATE); INSERT INTO MilitaryEquipmentSales (id, equipment_name, sale_amount, sale_date) VALUES (1, 'Fighter Jet', 45000, '2021-01-01'), (2, 'Tank', 75000, '2021-02-01');", 'sql': 'DELETE FROM MilitaryEquipmentSales WHERE sale_amount > 50000;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Delete records with sales amount over $50,000 from the `MilitaryEquipmentSales` table. \n\nHere is how you can do it using SQL:\n\n```sql\nDELETE FROM MilitaryEquipmentSales \nWHERE sale_amount > 50000;\n```\n\nThis command will remove all rows from the `MilitaryEquipmentSales` table where the `sale_amount` column has a value greater than $50,000. \n\nPlease note that this operation is irreversible and you should always make sure to have backups of your data before performing such operations.\n\nAlso, if you want to check how many records will be deleted without actually deleting them, you can use the `DELETE` command with `LIMIT` clause:\n\n```sql\nDELETE',
    sql='DELETE FROM MilitaryEquipmentSales WHERE sale_amount > 50000;'
), 1), (Example({'sql_prompt': 'What is the average number of visitor reviews for heritage sites in each category?', 'sql_context': "CREATE TABLE HeritageSitesReviews (ID INT, SiteName VARCHAR(100), Category VARCHAR(50), Reviews INT); INSERT INTO HeritageSitesReviews (ID, SiteName, Category, Reviews) VALUES (1, 'Machu Picchu', 'Archaeological', 5000); INSERT INTO HeritageSitesReviews (ID, SiteName, Category, Reviews) VALUES (2, 'Taj Mahal', 'Architectural', 8000);", 'sql': 'SELECT Category, AVG(Reviews) OVER (PARTITION BY Category) AS AvgReviews FROM HeritageSitesReviews;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='1. **Identify the SQL Query**: We need to find the average number of visitor reviews for heritage sites in each category.\n\n2. **Understand the Data Structure**:\n   - `HeritageSitesReviews` table has columns `ID`, `SiteName`, `Category`, and `Reviews`.\n\n3. **Formulate the SQL Query**:\n   - To calculate the average, we use the AVG() function.\n   - We need to group by `Category` to find averages for each category.\n\n4. **Write the SQL Query**:\n\n```sql\nSELECT Category, AVG(Reviews) AS AverageReviews\nFROM HeritageSitesReviews\nGROUP BY Category;\n```\n\nThis query will return a result set with two columns: `Category`',
    sql='```sql\nSELECT Category, AVG(Reviews) AS AverageReviews FROM HeritageSitesReviews GROUP BY Category;\n```'
), 1), (Example({'sql_prompt': 'What is the total revenue from ads targeting users interested in veganism in Q3 2022?', 'sql_context': 'CREATE TABLE ads (id INT, user INT, platform VARCHAR(50), target VARCHAR(50), start_date DATE, end_date DATE, revenue DECIMAL(10, 2));', 'sql': "SELECT SUM(revenue) FROM ads WHERE target = 'veganism' AND platform IN ('Facebook', 'Instagram') AND start_date BETWEEN '2022-07-01' AND '2022-09-30';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Solve the SQL query for finding the total revenue from ads targeting users interested in veganism in Q3 2022. \n\nStep 1: Identify the relevant columns and rows.\n- We need the `revenue` column, which contains the revenue data.\n- The target should be 'veganism'.\n- The date range is for Q3 2022, so we're looking at dates between July 1st, 2022 to September 30th, 2022.\n\nStep 2: Write the SQL query using SELECT statement.\n- We select `revenue` from the table `ads`.\n  \nStep 3: Add WHERE clause for filtering conditions.\n- Filter by target",
    sql="SELECT SUM(revenue) AS TotalRevenue FROM ads \nWHERE target = 'veganism' AND start_date BETWEEN '2022-07-01' AND '2022-09-30';"
), 0), (Example({'sql_prompt': 'What is the minimum duration of workouts for members who joined in 2019, grouped by gender?', 'sql_context': 'CREATE TABLE Workout (WorkoutID INT PRIMARY KEY, MemberID INT, Duration INT, Date DATE); CREATE TABLE Member (MemberID INT PRIMARY KEY, Age INT, Gender VARCHAR(10), MembershipStart DATE);', 'sql': "SELECT Member.Gender, MIN(Workout.Duration) FROM Workout INNER JOIN Member ON Workout.MemberID = Member.MemberID WHERE Member.MembershipStart BETWEEN '2019-01-01' AND '2019-12-31' GROUP BY Member.Gender;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To answer the SQL prompt about finding the minimum duration of workouts for members who joined in 2019 and grouped by gender, we need to join two tables - `Workout` and `Member`. The `Workout` table contains workout details including duration and date, while the `Member` table has member information such as age, gender, and membership start date.\n\nHere's how you can write the SQL query:\n\n```sql\nSELECT \n    M.Gender,\n    MIN(W.Duration) AS MinDuration\nFROM \n    Workout W\nJOIN \n    Member M ON W.MemberID = M.MemberID\nWHERE \n    YEAR(M.MembershipStart) = 2019\nGROUP BY \n    M.Gender;\n``",
    sql='```sql\nSELECT M.Gender, MIN(W.Duration) AS MinDuration \nFROM Workout W \nJOIN Member M ON W.MemberID = M.MemberID \nWHERE YEAR(M.MembershipStart) = 2019 \nGROUP BY M.Gender;\n```'
), 1), (Example({'sql_prompt': 'How many employees were hired in each month of 2022?', 'sql_context': "CREATE TABLE Employees (EmployeeID INT, HireDate DATE); INSERT INTO Employees (EmployeeID, HireDate) VALUES (1, '2022-01-15'); INSERT INTO Employees (EmployeeID, HireDate) VALUES (2, '2022-02-01');", 'sql': "SELECT EXTRACT(MONTH FROM HireDate) AS Month, COUNT(*) AS NumberOfHires FROM Employees WHERE HireDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY Month;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To answer the SQL prompt about how many employees were hired in each month of 2022, we need to:\n\n1. Select all rows from the `Employees` table.\n2. Filter those rows where the `HireDate` is within the year 2022.\n3. Extract the month from the `HireDate`.\n4. Group the results by the extracted month and count the number of employees hired in each month.\n\nHere's how you can write that SQL query:\n\n```sql\nSELECT \n    EXTRACT(YEAR FROM HireDate) AS Year,\n    EXTRACT(MONTH FROM HireDate) AS Month,\n    COUNT(EmployeeID) AS NumberOfHires\nFROM Employees\nWHERE EXTRACT(YEAR FROM",
    sql='EXTRACT(YEAR FROM HireDate) = 2022 GROUP BY Year, Month;'
), 0), (Example({'sql_prompt': 'What is the maximum quantity of a single organic product delivered in the DELIVERY_RECORDS table?', 'sql_context': 'CREATE TABLE DELIVERY_RECORDS (id INT, supplier_id INT, product_id INT, is_organic BOOLEAN, quantity INT); INSERT INTO DELIVERY_RECORDS (id, supplier_id, product_id, is_organic, quantity) VALUES (1, 1, 1, true, 50), (2, 2, 2, true, 30);', 'sql': 'SELECT MAX(quantity) FROM DELIVERY_RECORDS WHERE is_organic = true;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Find the maximum quantity of a single organic product delivered:\n\n1. **Identify Organic Deliveries**: First, we need to filter out only those records where `is_organic` is `true`. This will give us all deliveries for organic products.\n\n2. **Group By Product ID**: Next, we group these records by `product_id`. This allows us to aggregate data related to each product separately.\n\n3. **Find Maximum Quantity Per Product**: For each group (i.e., per product), we find the maximum value of `quantity`. This will give us the highest quantity delivered for each organic product.\n\n4. **Select Relevant Columns**: Finally, we select the columns that are relevant: `product_id` and the calculated maximum `quantity`.',
    sql='SELECT product_id, MAX(quantity) AS max_quantity FROM DELIVERY_RECORDS WHERE is_organic = true GROUP BY product_id;'
), 0), (Example({'sql_prompt': 'Update the description of a sustainable urbanism initiative in the sustainable_urbanism_initiatives table', 'sql_context': "CREATE TABLE public.sustainable_urbanism_initiatives (id SERIAL PRIMARY KEY, initiative_name VARCHAR(255), initiative_description TEXT, city_name VARCHAR(255), state_name VARCHAR(255)); INSERT INTO public.sustainable_urbanism_initiatives (initiative_name, initiative_description, city_name, state_name) VALUES ('Green City Program', 'Promotes green spaces and sustainable transportation options in urban areas', 'Portland', 'Oregon'), ('EcoDistricts Initiative', 'Encourages sustainable community development in city neighborhoods', 'Vancouver', 'British Columbia');", 'sql': "WITH updated_initiative AS (UPDATE public.sustainable_urbanism_initiatives SET initiative_description = 'Promotes green spaces, sustainable transportation, and energy-efficient buildings in urban areas' WHERE initiative_name = 'Green City Program' RETURNING *) INSERT INTO public.sustainable_urbanism_initiatives (initiative_name, initiative_description, city_name, state_name) SELECT initiative_name, initiative_description, city_name, state_name FROM updated_initiative;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Update the description of a specific sustainable urbanism initiative. We need to identify which one we want to update first, then construct an SQL query that will modify its description.\n\n1. **Identify the Initiative**: First, you would typically have this information from your context or requirements. For example, let's say we want to update the 'EcoDistricts Initiative' in Vancouver, British Columbia.\n\n2. **Construct the Query**: Once identified, you can construct an SQL query that updates the description of the initiative with the given ID (assuming IDs are auto-incremented and unique). Here is a general template for such a query:\n\n```sql\nUPDATE public.sustainable_urbanism_initiatives \nSET initiative_description = 'New updated description",
    sql="UPDATE public.sustainable_urbanism_initiatives SET initiative_description = 'New updated description' WHERE initiative_name = 'EcoDistricts Initiative' AND city_name = 'Vancouver' AND state_name = 'British Columbia';"
), 0), (Example({'sql_prompt': 'Calculate the year-over-year revenue growth for each restaurant.', 'sql_context': "CREATE TABLE restaurants (restaurant_id INT, restaurant_name VARCHAR(50), city VARCHAR(50), state VARCHAR(50), revenue FLOAT, year INT); INSERT INTO restaurants (restaurant_id, restaurant_name, city, state, revenue, year) VALUES (1, 'Restaurant A', 'City A', 'State A', 123456.78, 2021);", 'sql': 'SELECT restaurant_name, (revenue - LAG(revenue) OVER (PARTITION BY restaurant_name ORDER BY year)) / ABS(LAG(revenue) OVER (PARTITION BY restaurant_name ORDER BY year)) as revenue_growth FROM restaurants;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Calculate the year-over-year revenue growth for each restaurant:\n\n**Step 1:** First, we need to calculate the previous year's revenue for each restaurant. We can do this by creating a derived table or subquery that selects the `revenue` from the same `restaurant_id` but in the previous year.\n\n**Step 2:** Next, we subtract the previous year's revenue from the current year's revenue to find the growth amount.\n\n**Step 3:** Then, we divide the growth amount by the previous year's revenue (to get the percentage increase) and multiply it by 100 to convert it into a percentage.\n\n**Step 4:** Finally, we join this derived table back with our original `restaurants` table on",
    sql='SELECT r.restaurant_id, r.restaurant_name, \n       ((r.revenue - p.revenue) / p.revenue) * 100 AS year_over_year_growth\nFROM restaurants r\nJOIN (\n    SELECT restaurant_id, revenue,\n           LEAD(year, 1, year) OVER (PARTITION BY restaurant_id ORDER BY year) as next_year\n    FROM restaurants\n) p ON r.restaurant_id = p.restaurant_id AND r.year = p.next_year - 1;'
), 0), (Example({'sql_prompt': 'What is the percentage of users in Canada who have used the hashtag #travel?', 'sql_context': "CREATE TABLE posts (id INT, user_id INT, hashtags TEXT); INSERT INTO posts (id, user_id, hashtags) VALUES (1, 1, '#travel'), (2, 1, '#food'), (3, 2, '#travel'), (4, 3, '#art'), (5, 4, '#music'); CREATE TABLE users (id INT, country VARCHAR(2)); INSERT INTO users (id, country) VALUES (1, 'CA'), (2, 'US'), (3, 'CA'), (4, 'DE');", 'sql': "SELECT 100.0 * COUNT(DISTINCT user_id) / (SELECT COUNT(DISTINCT user_id) FROM posts JOIN users ON posts.user_id = users.id WHERE users.country = 'CA') as percentage_travel FROM posts JOIN users ON posts.user_id = users.id WHERE hashtags LIKE '%#travel%' AND users.country = 'CA';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Find the percentage of users in Canada who have used the hashtag #travel:\n\n1. **Identify posts with the hashtag #travel**: We need to find all rows in the `posts` table where the hashtags column contains '#travel'. \n\n2. **Filter for Canadian users**: From those posts, we want only those that are made by users from Canada (indicated by 'CA' in their country column).\n\n3. **Count relevant posts and total posts with #travel**: We need to count how many of these filtered posts exist compared to the total number of posts containing '#travel'.\n\n4. **Calculate percentage**: Finally, we calculate this as a percentage.\n\nHere's how you can write SQL for that:\n\n```sql\n-- Step 1",
    sql="SELECT \n    (COUNT(CASE WHEN u.country = 'CA' THEN p.id END) * 100 / COUNT(p.id)) AS percentage_of_travel_users_in_Canada\nFROM \n    posts p\nJOIN \n    users u ON p.user_id = u.id\nWHERE \n    p.hashtags LIKE '%#travel%';"
), 0), (Example({'sql_prompt': 'What is the total number of points scored by each team in the NBA this season?', 'sql_context': "CREATE TABLE nba_teams (team_name TEXT, points_scored INT); INSERT INTO nba_teams (team_name, points_scored) VALUES ('Cavaliers', 8000), ('Warriors', 8500), ('Celtics', 7500);", 'sql': 'SELECT team_name, SUM(points_scored) FROM nba_teams GROUP BY team_name;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='1. **Total Number of Construction Permits Issued in Each State**\n\n   To find the total number of construction permits issued in each state, you can use a `SUM` function combined with a `GROUP BY` clause. The SQL query would look like this:\n\n   ```sql\n   SELECT State, SUM(PermitCount) AS TotalPermits \n   FROM PermitsByState \n   GROUP BY State;\n   ```\n\n   This will aggregate the permit counts for each state and provide you with the total number of permits issued per state.\n\n2. **Average Mental Health Score by District**\n\n   To calculate the average mental health score of students for each district, ordered by the average score, you can use a `GROUP BY` clause',
    sql='SELECT team_name, SUM(points_scored) AS total_points FROM nba_teams GROUP BY team_name ORDER BY total_points DESC;'
), 0), (Example({'sql_prompt': 'What is the highest number of hat-tricks scored by a player in a single Bundesliga season?', 'sql_context': "CREATE TABLE german_teams (team_id INT, team_name VARCHAR(50)); INSERT INTO german_teams (team_id, team_name) VALUES (1, 'Bayern Munich'), (2, 'Borussia Dortmund'), (3, 'RB Leipzig'); CREATE TABLE german_matches (match_id INT, home_team_id INT, away_team_id INT, home_team_player_hat_tricks INT, away_team_player_hat_tricks INT); INSERT INTO german_matches (match_id, home_team_id, away_team_id, home_team_player_hat_tricks, away_team_player_hat_tricks) VALUES (1, 1, 2, 1, 0), (2, 2, 3, 0, 1), (3, 3, 1, 1, 0);", 'sql': 'SELECT MAX(home_team_player_hat_tricks + away_team_player_hat_tricks) AS max_hat_tricks FROM german_matches;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Find the highest number of hat-tricks scored by a player in a single Bundesliga season:\n\n1. **Identify Hat-Tricks**: First, we need to identify all matches where at least one team had a player score a hat-trick (3 goals). This can be done using a WHERE clause that checks for `home_team_player_hat_tricks > 0` or `away_team_player_hat_tricks > 0`.\n\n2. **Count Hat-Tricks**: For each match, we need to count the total number of hat-tricks scored by players from both teams.\n\n3. **Aggregate Counts**: We then aggregate these counts for all matches in a season (which could be defined as one year or any other period depending on how seasons are',
    sql='SELECT MAX(Total_Hat_Tricks) AS Highest_Hat_Tricks FROM \n(SELECT SUM(home_team_player_hat_tricks + away_team_player_hat_tricks) AS Total_Hat_Tricks FROM german_matches) AS Hat_Trick_Counts;'
), 0), (Example({'sql_prompt': "What is the average word count for articles published in the 'news' schema, grouped by author?", 'sql_context': "CREATE TABLE news.articles (article_id INT, title VARCHAR(100), author VARCHAR(100), word_count INT); INSERT INTO news.articles (article_id, title, author, word_count) VALUES (1, 'Article 1', 'John Doe', 500), (2, 'Article 2', 'Jane Doe', 600), (3, 'Article 3', 'John Doe', 700);", 'sql': 'SELECT author, AVG(word_count) FROM news.articles GROUP BY author;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To answer the SQL prompt about finding the average word count for articles published in the 'news' schema grouped by author, we need to:\n\n1. **Select** the necessary columns from the `articles` table.\n2. **Group By** the `author` column to calculate averages per author.\n3. **Calculate** the average of the `word_count` column.\n\nHere's how you can write the SQL query step-by-step:\n\n```sql\n-- Step 1: Select the required columns\nSELECT \n    author,\n    AVG(word_count) AS average_word_count -- Calculate the average word count for each author\n\n-- Step 2: Group by the 'author' column to get averages per author\nFROM news.articles \n\n-- Step",
    sql='SELECT author, AVG(word_count) AS average_word_count FROM news.articles GROUP BY author;'
), 1), (Example({'sql_prompt': 'Show the total budget allocation for healthcare services in the top 5 states with the highest budget allocation', 'sql_context': 'CREATE TABLE healthcare_services (service_id INT, state_id INT, budget FLOAT);CREATE TABLE states (state_id INT, state_name TEXT);', 'sql': 'SELECT s.state_name, SUM(hs.budget)  FROM healthcare_services hs INNER JOIN states s ON hs.state_id = s.state_id GROUP BY s.state_name ORDER BY SUM(hs.budget) DESC LIMIT 5;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='1. **Identify Top 5 States**: First, we need to find the top 5 states with the highest budget allocation for healthcare services. This can be done using a `ORDER BY` clause followed by `LIMIT` to select only the top 5 rows.\n\n   SQL Query:\n   ```sql\n   SELECT state_id FROM healthcare_services \n   GROUP BY state_id \n   ORDER BY SUM(budget) DESC \n   LIMIT 5;\n   ```\n\n2. **Sum Budget for Top States**: Once we have identified these states, we need to sum up the total budget allocation for healthcare services in each of these top 5 states.\n\n   SQL Query:\n   ```sql\n   SELECT state_id, SUM(budget) as total',
    sql='SELECT total_budget_allocation FROM (\n    SELECT state_id, SUM(budget) as total_budget_allocation\n    FROM healthcare_services\n    WHERE state_id IN (SELECT state_id FROM (\n        SELECT state_id\n        FROM healthcare_services\n        GROUP BY state_id\n        ORDER BY SUM(budget) DESC\n        LIMIT 5\n    ))\n    GROUP BY state_id\n) AS top_states'
), 0), (Example({'sql_prompt': 'Find the total volume of timber sold in 2021', 'sql_context': "CREATE TABLE forests (id INT, name VARCHAR(50), hectares DECIMAL(5,2), year_planted INT, PRIMARY KEY (id)); INSERT INTO forests (id, name, hectares, year_planted) VALUES (1, 'Forest A', 123.45, 1990), (2, 'Forest B', 654.32, 1985); CREATE TABLE timber_sales (id INT, forest_id INT, year INT, volume DECIMAL(10,2), PRIMARY KEY (id)); INSERT INTO timber_sales (id, forest_id, year, volume) VALUES (1, 1, 2021, 120.50), (2, 1, 2022, 150.75), (3, 2, 2021, 450.23), (4, 2, 2022, 520.89);", 'sql': 'SELECT SUM(ts.volume) FROM timber_sales ts INNER JOIN forests f ON ts.forest_id = f.id WHERE ts.year = 2021;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Find the total volume of timber sold in 2021:\n\n1. **Identify relevant data**: We need information about timber sales (`timber_sales`) and which forests those sales came from (`forests`). The year is a key factor here, so we're interested in records where `year = 2021`.\n\n2. **Join tables**: To get the total volume of timber sold in 2021, we need to join the `timber_sales` table with the `forests` table on their common `forest_id`. This will allow us to match each sale record to its corresponding forest.\n\n3. **Filter by year**: After joining, we filter the results for only those records where the `year",
    sql='SELECT SUM(t.volume) AS TotalVolume FROM timber_sales t JOIN forests f ON t.forest_id = f.id WHERE t.year = 2021;'
), 1), (Example({'sql_prompt': 'Who are the top 3 suppliers of recycled polyester?', 'sql_context': "CREATE TABLE suppliers (id INT, name VARCHAR(255), material VARCHAR(255)); INSERT INTO suppliers (id, name, material) VALUES (1, 'Supplier A', 'Recycled Polyester'), (2, 'Supplier B', 'Organic Cotton'), (3, 'Supplier C', 'Recycled Polyester'), (4, 'Supplier D', 'Hemp'), (5, 'Supplier E', 'Recycled Polyester');", 'sql': "SELECT name FROM suppliers WHERE material = 'Recycled Polyester' GROUP BY name ORDER BY COUNT(*) DESC LIMIT 3;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="1. **Identify the relevant table and columns**: We need data from the `suppliers` table where the material is 'Recycled Polyester'.\n\n2. **Filter for suppliers of recycled polyester**: Use a WHERE clause with `material = 'Recycled Polyester'`.\n\n3. **Order by supplier name alphabetically**: This will help us easily identify the top 3 suppliers.\n\n4. **Limit to the top 3 results**: Use LIMIT 3 to get only the first three rows, which should be our top 3 suppliers based on alphabetical order of their names.\n\nThe SQL query would look like this:\n\n```sql\nSELECT name \nFROM suppliers \nWHERE material = 'Recycled Polyester' \nORDER BY name ASC \nLIMIT 3;",
    sql="SELECT name FROM suppliers WHERE material = 'Recycled Polyester' ORDER BY name ASC LIMIT 3;"
), 0), (Example({'sql_prompt': "How many donors have donated more than $100 in the 'Donations' table?", 'sql_context': "CREATE TABLE Donations (DonorID INT, DonationDate DATE, Amount DECIMAL(10, 2)); INSERT INTO Donations (DonorID, DonationDate, Amount) VALUES (1, '2022-02-01', 120.00), (2, '2022-01-15', 75.00), (3, '2022-03-05', 150.00);", 'sql': 'SELECT COUNT(*) FROM Donations WHERE Amount > 100;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Solve the SQL query for finding how many donors have donated more than $100.\n\n**Step 1:** Identify the table and columns needed.\nWe need data from the `Donations` table, specifically the `DonorID` and `Amount`.\n\n**Step 2:** Write a SELECT statement to retrieve necessary information.\nWe will select `COUNT(DonorID)` which counts the number of rows returned by the query.\n\n**Step 3:** Add a WHERE clause to filter donations greater than $100.\nThe condition is that `Amount > 100`.\n\n**Step 4:** Combine these elements into one SQL statement.\n\nHere's how you would write it:\n\n```sql\nSELECT COUNT(DonorID)\nFROM Don",
    sql='SELECT COUNT(DonorID) AS NumberOfDonors FROM Donations WHERE Amount > 100;'
), 0), (Example({'sql_prompt': "Update the 'Angkor Wat' excavation to have a start date of 1300-01-01.", 'sql_context': "CREATE TABLE ExcavationSites (SiteID INT PRIMARY KEY, Name VARCHAR(255), Country VARCHAR(255), StartDate DATE, EndDate DATE); INSERT INTO ExcavationSites (SiteID, Name, Country, StartDate, EndDate) VALUES (5, 'Angkor Wat', 'Cambodia', '1860-01-01', '1860-05-01');", 'sql': "UPDATE ExcavationSites SET StartDate = '1300-01-01' WHERE Name = 'Angkor Wat';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Update the record for 'Angkor Wat' excavation with a new start date of 1300-01-01. \n\nFirstly, we need to identify the ID of the row that corresponds to 'Angkor Wat'. This can be done using a SELECT statement with a WHERE clause:\n\n```sql\nSELECT * FROM ExcavationSites \nWHERE Name = 'Angkor Wat';\n```\n\nThis will return all columns for the row where `Name` is 'Angkor Wat'.\n\nNext, we need to update this specific row. We use an UPDATE statement and specify the new value for the `StartDate` column:\n\n```sql\nUPDATE ExcavationSites \nSET StartDate = '1300-01-",
    sql="UPDATE ExcavationSites SET StartDate = '1300-01-01' WHERE Name = 'Angkor Wat';"
), 1), (Example({'sql_prompt': 'Calculate the total CO2 emissions (in metric tons) per capita for each country in the population_data and carbon_emissions tables.', 'sql_context': 'CREATE TABLE population_data (country VARCHAR(50), year INT, population INT); CREATE TABLE carbon_emissions (country VARCHAR(50), year INT, co2_emissions FLOAT);', 'sql': 'SELECT p.country, AVG(co2_emissions/population*1000000) as co2_emissions_per_capita FROM population_data p JOIN carbon_emissions c ON p.country = c.country GROUP BY p.country;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="1. **Join the tables**: First, we need to join `population_data` and `carbon_emissions` tables on their common column (`country`) and `year`. This will allow us to match population data with corresponding CO2 emissions for each country.\n\n   SQL Query:\n   ```sql\n   SELECT pd.country,\n          ce.year,\n          (ce.co2_emissions / pd.population) * 1000 AS co2_per_capita_tons\n   FROM population_data pd\n   JOIN carbon_emissions ce ON pd.country = ce.country AND pd.year = ce.year;\n   ```\n\n2. **Calculate per capita emissions**: In the query above, we calculate CO2 emissions per capita by dividing each country's total CO",
    sql='```sql\nSELECT pd.country, ce.year, (ce.co2_emissions / pd.population) * 1000 AS co2_per_capita_tons \nFROM population_data pd \nJOIN carbon_emissions ce ON pd.country = ce.country AND pd.year = ce.year;\n```'
), 0), (Example({'sql_prompt': "How many rural infrastructure projects were completed in '2022' in the 'Asia-Pacific' region?", 'sql_context': "CREATE TABLE rural_infrastructure(id INT, project TEXT, location TEXT, completion_year INT); INSERT INTO rural_infrastructure (id, project, location, completion_year) VALUES (1, 'Rural Road Project', 'Asia-Pacific', 2022);", 'sql': "SELECT COUNT(*) FROM rural_infrastructure WHERE location = 'Asia-Pacific' AND completion_year = 2022;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To answer the SQL prompt about how many rural infrastructure projects were completed in '2022' in the 'Asia-Pacific' region, we need to:\n\n1. Identify the relevant columns from the `rural_infrastructure` table which are `id`, `project`, `location`, and `completion_year`.\n2. Filter for rows where `completion_year` is 2022.\n3. Further filter these results to only include projects located in 'Asia-Pacific'.\n4. Count the number of such records.\n\nHere's how you can write this SQL query:\n\n```sql\nSELECT COUNT(*) \nFROM rural_infrastructure \nWHERE completion_year = 2022 AND location = 'Asia-Pacific';\n```\n\nThis query will return a",
    sql="SELECT COUNT(*) FROM rural_infrastructure WHERE completion_year = 2022 AND location = 'Asia-Pacific';"
), 1), (Example({'sql_prompt': "What is the average horsepower of luxury vehicles in the 'GreenCar' database produced after 2017?", 'sql_context': 'CREATE TABLE LuxuryVehicles (Id INT, Make VARCHAR(50), Model VARCHAR(50), Year INT, Horsepower INT);', 'sql': 'SELECT AVG(Horsepower) FROM LuxuryVehicles WHERE Year > 2017;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Solve this SQL query:\n\n1. **Identify the relevant table**: The query is about luxury vehicles in the 'GreenCar' database produced after 2017. So we need to look at the `LuxuryVehicles` table.\n\n2. **Filter by year**: We want only those records where the `Year` column has values greater than 2017.\n\n3. **Calculate average horsepower**: After filtering, we calculate the average of the `Horsepower` column for these filtered records.\n\nThe SQL query would look like this:\n\n```sql\nSELECT AVG(Horsepower) AS AverageHorsepower \nFROM LuxuryVehicles \nWHERE Year > 2017;\n```\n\nThis query first filters out",
    sql='SELECT AVG(Horsepower) AS AverageHorsepower FROM LuxuryVehicles WHERE Year > 2017;'
), 1), (Example({'sql_prompt': 'What is the maximum response time for emergency calls in the city of Los Angeles?', 'sql_context': 'CREATE TABLE emergency_calls (id INT, city VARCHAR(20), response_time INT);', 'sql': "SELECT MAX(response_time) FROM emergency_calls WHERE city = 'Los Angeles';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="answer this SQL query. \n\n1. **Identify the relevant table**: The information we need is stored in the `emergency_calls` table.\n\n2. **Filter for Los Angeles**: We want only those records where the city is 'Los Angeles'. This can be done using a WHERE clause with the condition `city = 'Los Angeles'`.\n\n3. **Find maximum response time**: To find the highest (maximum) response time, we use the MAX function on the `response_time` column.\n\n4. **Construct the SQL query**: Combining these steps, our SQL query will look like this:\n\n```sql\nSELECT MAX(response_time)\nFROM emergency_calls\nWHERE city = 'Los Angeles';\n```\n\nThis query selects the maximum value of the",
    sql="SELECT MAX(response_time) AS MaxResponseTime FROM emergency_calls WHERE city = 'Los Angeles';"
), 1), (Example({'sql_prompt': 'What is the maximum loan amount for socially responsible loans in the Asia-Pacific region?', 'sql_context': "CREATE TABLE socially_responsible_loans (loan_id INT, region VARCHAR(20), loan_amount DECIMAL(10,2)); INSERT INTO socially_responsible_loans (loan_id, region, loan_amount) VALUES (101, 'Asia-Pacific', 50000), (102, 'Europe', 30000), (103, 'Asia-Pacific', 70000);", 'sql': "SELECT MAX(srl.loan_amount) FROM socially_responsible_loans srl WHERE srl.region = 'Asia-Pacific';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Find the maximum loan amount for socially responsible loans in the Asia-Pacific region:\n\n1. **Identify the relevant table**: We need data from the `socially_responsible_loans` table.\n\n2. **Filter by region**: The query should only consider rows where the `region` is 'Asia-Pacific'.\n\n3. **Find the maximum loan amount**: Use a MAX() function to find the highest `loan_amount`.\n\n4. **Execute the SQL query**:\n\n```sql\nSELECT MAX(loan_amount) AS max_loan_amount \nFROM socially_responsible_loans \nWHERE region = 'Asia-Pacific';\n```\n\nThis query will return the maximum loan amount for socially responsible loans in the Asia-Pacific region.",
    sql="SELECT MAX(loan_amount) AS max_loan_amount FROM socially_responsible_loans WHERE region = 'Asia-Pacific';"
), 1), (Example({'sql_prompt': 'What is the maximum number of years a traditional art form has been preserved in each country?', 'sql_context': "CREATE TABLE countries (id INT, name TEXT); INSERT INTO countries (id, name) VALUES (1, 'Nigeria'), (2, 'Brazil'); CREATE TABLE art_forms (id INT, country_id INT, name TEXT, year_preserved INT); INSERT INTO art_forms (id, country_id, name, year_preserved) VALUES (1, 1, 'Tie-dye', 500), (2, 1, 'Batik', 1000), (3, 2, 'Capoeira', 400);", 'sql': 'SELECT c.name, MAX(af.year_preserved) FROM countries c JOIN art_forms af ON c.id = af.country_id GROUP BY c.id;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the maximum number of years a traditional art form has been preserved in each country, we need to:\n\n1. Join the `art_forms` table with the `countries` table on their respective IDs.\n2. Group the results by the `country_id` and `name`.\n3. Use the MAX function on the `year_preserved` column to find the maximum number of years for each group.\n\nHere's how you can write this SQL query:\n\n```sql\nSELECT c.name AS Country, a.name AS ArtForm, MAX(a.year_preserved) AS MaxYearsPreserved\nFROM countries c\nJOIN art_forms a ON c.id = a.country_id\nGROUP BY c.name, a.name;\n```\n\nThis query will return the",
    sql='SELECT c.name AS Country, MAX(a.year_preserved) AS MaxYearsPreserved FROM countries c JOIN art_forms a ON c.id = a.country_id GROUP BY c.name;'
), 1), (Example({'sql_prompt': 'What is the maximum hourly wage for each labor category in the construction industry?', 'sql_context': 'CREATE TABLE labor_statistics (id INT, industry VARCHAR(255), category VARCHAR(255), title VARCHAR(255), hourly_wage DECIMAL(5,2));', 'sql': "SELECT industry, category, MAX(hourly_wage) as max_hourly_wage FROM labor_statistics WHERE industry = 'construction' GROUP BY industry, category;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="1. **Identify the relevant columns**: We need to find the maximum hourly wage for each labor category within the construction industry.\n\n2. **Filter the data**: First, we should filter our dataset to only include records where `industry` is 'construction'.\n\n3. **Group by category**: Next, we group the filtered data by `category` to calculate statistics per category.\n\n4. **Calculate maximum hourly wage**: For each group (category), we find the maximum value of `hourly_wage`.\n\n5. **Select the required columns**: Finally, we select the `category` and its corresponding `max(hourly_wage)` for our output.\n\nHere is how you can write this SQL query:\n\n```sql\nSELECT category, MAX(hour",
    sql="SELECT category, MAX(hourly_wage) AS max_hourly_wage FROM labor_statistics WHERE industry = 'construction' GROUP BY category;"
), 0), (Example({'sql_prompt': 'List all the drought-impacted counties in Texas in 2018.', 'sql_context': "CREATE TABLE drought_impact(county VARCHAR(20), state VARCHAR(20), year INT, impacted BOOLEAN); INSERT INTO drought_impact(county, state, year, impacted) VALUES ('Harris', 'Texas', 2015, true), ('Harris', 'Texas', 2016, true), ('Harris', 'Texas', 2017, true), ('Harris', 'Texas', 2018, true), ('Bexar', 'Texas', 2015, false), ('Bexar', 'Texas', 2016, false), ('Bexar', 'Texas', 2017, false), ('Bexar', 'Texas', 2018, false);", 'sql': "SELECT county FROM drought_impact WHERE state = 'Texas' AND year = 2018 AND impacted = true;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To list all the drought-impacted counties in Texas in 2018 from the provided SQL context, we can use a SELECT statement with conditions that filter for the specific year and state. Here is how you would write this query:\n\n```sql\nSELECT county \nFROM drought_impact \nWHERE state = 'Texas' AND year = 2018;\n```\n\n### Explanation:\n1. **`SELECT county`**: This part of the SQL statement specifies what data we want to retrieve from the table, which in this case is the `county` column.\n\n2. **`FROM drought_impact`**: This clause tells us that we are querying the `drought_impact` table for our data.\n\n3. **`",
    sql="SELECT county FROM drought_impact WHERE state = 'Texas' AND year = 2018;"
), 0), (Example({'sql_prompt': 'Find the top 3 genres with the highest revenue in 2022 for streaming services in the USA.', 'sql_context': "CREATE TABLE streaming_services (service_id INT, service_name VARCHAR(255), revenue DECIMAL(10,2)); INSERT INTO streaming_services (service_id, service_name, revenue) VALUES (1, 'StreamingCo', 5000000.00); CREATE TABLE genre_sales (sale_id INT, service_id INT, genre VARCHAR(255), sales DECIMAL(10,2)); INSERT INTO genre_sales (sale_id, service_id, genre, sales) VALUES (1, 1, 'Rock', 150000.00);", 'sql': "SELECT genre, SUM(sales) as total_sales FROM genre_sales gs JOIN streaming_services s ON gs.service_id = s.service_id WHERE s.service_country = 'USA' AND s.service_year = 2022 GROUP BY genre ORDER BY total_sales DESC LIMIT 3;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Find the top 3 genres with the highest revenue for streaming services in the USA in 2022:\n\n**Step 1:** Join `streaming_services` and `genre_sales` tables on their respective IDs.\n\n**Step 2:** Filter out only those rows where the service is located in the USA. \n\n**Step 3:** Group by genre to calculate total sales for each genre.\n\n**Step 4:** Order the results by total sales in descending order.\n\n**Step 5:** Limit the result set to top 3 genres with highest revenue.\n\nHere's how you can write this SQL query:\n\n```sql\nSELECT g.genre, SUM(gs.sales) as TotalSales\nFROM streaming_services ss \nJOIN genre_sales gs ON ss",
    sql="service_id = gs.service_id WHERE ss.service_name LIKE '%USA%' GROUP BY g.genre ORDER BY TotalSales DESC LIMIT 3;"
), 0), (Example({'sql_prompt': "List all unique fields from the 'geology' and 'infrastructure' tables.", 'sql_context': 'CREATE TABLE geology (well_id INT, rock_type VARCHAR(50)); CREATE TABLE infrastructure (well_id INT, platform_type VARCHAR(50));', 'sql': "SELECT field FROM (SELECT 'geology' as table_name, column_name as field FROM information_schema.columns WHERE table_name = 'geology' UNION ALL SELECT 'infrastructure' as table_name, column_name as field FROM information_schema.columns WHERE table_name = 'infrastructure') as subquery;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="1. **List all unique fields from the 'geology' table**: \n   - We need to select distinct values for each column in the `geology` table.\n   - SQL query:\n     ```sql\n     SELECT DISTINCT rock_type FROM geology;\n     ```\n\n2. **List all unique fields from the 'infrastructure' table**:\n   - Similarly, we will select distinct values for each column in the `infrastructure` table.\n   - SQL query:\n     ```sql\n     SELECT DISTINCT platform_type FROM infrastructure;\n     ```\n\n3. **Combine both queries to list all unique fields from both tables**:\n   - We can combine these two queries using UNION ALL (to avoid duplicate rows) and then select distinct values",
    sql='SELECT DISTINCT rock_type FROM geology\nUNION ALL\nSELECT DISTINCT platform_type FROM infrastructure;'
), 0), (Example({'sql_prompt': 'Calculate the percentage of total Europium production for each country.', 'sql_context': 'CREATE TABLE europium_production (country VARCHAR(50), quantity INT);', 'sql': 'SELECT country, quantity * 100.0 / SUM(quantity) OVER (PARTITION BY NULL) AS percentage FROM europium_production;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="1. **Calculate Total Production**: First, we need to find out the total amount of Europium produced across all countries.\n   - We can use a `SUM` function on the `quantity` column.\n\n2. **Find Individual Country's Production Percentage**: \n   - For each country, divide its production quantity by the total production and multiply by 100 to get the percentage.\n\n3. **SQL Query**:\n   ```sql\n   SELECT \n       country,\n       (SUM(quantity) / (SELECT SUM(quantity) FROM europium_production) * 100) AS 'Production_Percentage'\n   FROM \n       europium_production;\n   ```\n\nThis query will give us a list of countries with their respective percentages of total",
    sql="```sql\nSELECT \n    country,\n    (SUM(quantity) / (SELECT SUM(quantity) FROM europium_production) * 100) AS 'Production_Percentage'\nFROM \n    europium_production\nGROUP BY \n    country;\n```"
), 1), (Example({'sql_prompt': 'Find the mobile subscribers with consecutive speed drops greater than 25% for the last 3 months, ordered by subscription IDs.', 'sql_context': 'CREATE TABLE mobile_usage_detailed (subscriber_id INT, month INT, speed FLOAT); INSERT INTO mobile_usage_detailed (subscriber_id, month, speed) VALUES (1, 1, 100), (1, 2, 80), (1, 3, 70), (2, 1, 200), (2, 2, 180), (2, 3, 160), (3, 1, 150), (3, 2, 130), (3, 3, 110);', 'sql': 'SELECT subscriber_id, speed, month FROM (SELECT subscriber_id, speed, month, LAG(speed, 1) OVER (PARTITION BY subscriber_id ORDER BY month) as prev_speed, LAG(speed, 2) OVER (PARTITION BY subscriber_id ORDER BY month) as prev_prev_speed FROM mobile_usage_detailed) t WHERE t.speed < 0.75 * t.prev_speed AND t.speed < 0.75 * t.prev_prev_speed ORDER BY subscriber_id;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Solve the SQL query for finding mobile subscribers with consecutive speed drops greater than 25% over the last three months. \n\n**Step 1:** Calculate the percentage drop between each pair of consecutive months for a given subscriber.\n\n**Step 2:** Check if this percentage drop is more than 25%.\n\n**Step 3:** Order the results by subscription IDs.\n\nLet's break down these steps into SQL queries:\n\n### Step 1: Calculate Percentage Drop\n\nWe need to calculate the difference in speed between two consecutive months and then find out what percentage this change represents compared to the initial speed. \n\n```sql\nWITH SpeedDrops AS (\n    SELECT \n        subscriber_id,\n        month, \n        speed,\n        LAG(speed)",
    sql='SELECT subscriber_id, month, speed, \n       ((speed - LAG(speed) OVER (PARTITION BY subscriber_id ORDER BY month)) / LAG(speed) OVER (PARTITION BY subscriber_id ORDER BY month)) * 100 AS percentage_drop\nFROM mobile_usage_detailed\nWHERE month >= (SELECT MAX(month) - 3 FROM mobile_usage_detailed)\nORDER BY subscriber_id, month;'
), 0), (Example({'sql_prompt': 'What is the distribution of AI safety research topics by year?', 'sql_context': "CREATE TABLE if not exists ai_safety_research (year INT, topic VARCHAR(255)); INSERT INTO ai_safety_research (year, topic) VALUES (2018, 'Explainable AI'), (2019, 'Algorithmic fairness'), (2020, 'AI safety'), (2021, 'Robust AI'), (2022, 'AI ethics');", 'sql': 'SELECT year, topic, COUNT(*) OVER (PARTITION BY year) as research_count FROM ai_safety_research ORDER BY year;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To answer the SQL prompt about the distribution of AI safety research topics by year, we need to:\n\n1. **Identify the unique years** that have entries in our `ai_safety_research` table.\n2. **Count the number of occurrences** for each topic within those years.\n\nHere's how you can write an SQL query to achieve this:\n\n```sql\n-- First, find all unique years from the ai_safety_research table\nWITH UniqueYears AS (\n    SELECT DISTINCT year FROM ai_safety_research\n)\n\n-- Then, count the number of occurrences for each topic by year\nSELECT \n    U.year,\n    A.topic,\n    COUNT(*) AS occurrence_count\nFROM \n    UniqueYears U\nJOIN \n    ai",
    sql='ai_safety_research A ON U.year = A.year GROUP BY U.year, A.topic;'
), 0), (Example({'sql_prompt': "How many forest management practices are recorded in the 'tropical_forests'?", 'sql_context': "CREATE TABLE forest_management (id INT, forest_type VARCHAR(50), practice_count INT); INSERT INTO forest_management (id, forest_type, practice_count) VALUES (1, 'Tropical Forests', 45); INSERT INTO forest_management (id, forest_type, practice_count) VALUES (2, 'Temperate Forests', 34);", 'sql': "SELECT practice_count FROM forest_management WHERE forest_type = 'Tropical Forests';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To answer the SQL prompt about how many forest management practices are recorded for tropical forests, we need to:\n\n1. Identify the table that contains information on forest management.\n2. Look at the columns within this table to find which one holds the count of practices per type of forest.\n3. Use a SELECT statement to retrieve the count from the specific column.\n\nGiven the SQL context provided:\n\n```sql\nCREATE TABLE forest_management (id INT, forest_type VARCHAR(50), practice_count INT);\nINSERT INTO forest_management (id, forest_type, practice_count) VALUES (1, 'Tropical Forests', 45); \nINSERT INTO forest_management (id, forest_type, practice_count) VALUES (2, 'Temperate Forests',",
    sql="SELECT practice_count FROM forest_management WHERE forest_type = 'Tropical Forests';"
), 1), (Example({'sql_prompt': 'What is the distribution of lifelong learning course enrollments by age group, in total?', 'sql_context': 'CREATE TABLE lifelong_learning (student_id INT, age_group VARCHAR(255), course_id INT); CREATE TABLE courses (course_id INT, course_name VARCHAR(255));', 'sql': 'SELECT l.age_group, COUNT(l.course_id) FROM lifelong_learning l INNER JOIN courses c ON l.course_id = c.course_id GROUP BY l.age_group;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="1. **Identify the total number of enrollments for each age group**: We need to count the number of enrollments grouped by `age_group`. This will give us a distribution of enrollments across different age groups.\n\n2. **Join the lifelong_learning table with the courses table**: To get more context about the courses, we'll join the `lifelong_learning` table with the `courses` table on the common column `course_id`.\n\n3. **Summarize by age group and course name**: We will then summarize this data to count how many enrollments there are for each combination of `age_group` and `course_name`. This will give us a detailed breakdown.\n\n4. **Group by both `age_group` and",
    sql='SELECT \n    ll.age_group,\n    c.course_name,\n    COUNT(ll.student_id) AS total_enrollments\nFROM \n    lifelong_learning ll\nJOIN \n    courses c ON ll.course_id = c.course_id\nGROUP BY \n    ll.age_group, c.course_name;'
), 0), (Example({'sql_prompt': "Insert new records into the Employee table with the following data: EmployeeID 3, FirstName 'Mike', LastName 'Smith', Department 'Environment'.", 'sql_context': 'CREATE TABLE Employee (EmployeeID INT, FirstName VARCHAR(50), LastName VARCHAR(50), Department VARCHAR(50));', 'sql': "INSERT INTO Employee (EmployeeID, FirstName, LastName, Department) VALUES (3, 'Mike', 'Smith', 'Environment');"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Insert the new records into the `Employee` table:\n\n1. **Identify the SQL command for inserting data**: The SQL command used for inserting data into a table is `INSERT INTO`.\n\n2. **Specify the table name**: In this case, it's the `Employee` table.\n\n3. **List the columns to be populated**: We need to specify which columns we want to insert values into. These are `EmployeeID`, `FirstName`, `LastName`, and `Department`.\n\n4. **Provide the values for each column**:\n   - For `EmployeeID 3`: This will be inserted as `3`.\n   - For `FirstName 'Mike'`: This is a string value, so it's enclosed in single quotes.\n   -",
    sql="INSERT INTO Employee (EmployeeID, FirstName, LastName, Department) VALUES (3, 'Mike', 'Smith', 'Environment');"
), 1), (Example({'sql_prompt': 'Which cosmetic brands have the highest average customer rating?', 'sql_context': "CREATE TABLE brand (id INT, name VARCHAR(255), avg_rating FLOAT); CREATE TABLE rating (brand_id INT, rating FLOAT); INSERT INTO brand (id, name, avg_rating) VALUES (1, 'Lush', 4.2), (2, 'The Body Shop', 4.1), (3, 'Sephora', 4.3); INSERT INTO rating (brand_id, rating) VALUES (1, 4.5), (1, 4.0), (2, 4.1), (2, 4.2), (3, 4.4), (3, 4.3);", 'sql': 'SELECT b.name, AVG(r.rating) as avg_rating FROM brand b JOIN rating r ON b.id = r.brand_id GROUP BY b.name ORDER BY avg_rating DESC;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the cosmetic brands with the highest average customer rating, we need to:\n\n1. Join the `brand` table and the `rating` table on their respective IDs.\n2. Calculate the average of ratings for each brand using the AVG function.\n3. Order the results by this calculated average in descending order so that the brands with the highest averages are at the top.\n\nHere's how you can write the SQL query:\n\n```sql\nSELECT b.name, AVG(r.rating) as avg_rating \nFROM brand b \nJOIN rating r ON b.id = r.brand_id \nGROUP BY b.name \nORDER BY avg_rating DESC;\n```\n\nThis query first joins the `brand` and `rating` tables based on their IDs. Then it groups the",
    sql='SELECT b.name, AVG(r.rating) as avg_rating FROM brand b JOIN rating r ON b.id = r.brand_id GROUP BY b.name ORDER BY avg_rating DESC;'
), 1), (Example({'sql_prompt': 'How many unique volunteers worked on projects in each cause area?', 'sql_context': "CREATE TABLE volunteers (id INT, name VARCHAR(30), cause_area VARCHAR(20)); INSERT INTO volunteers (id, name, cause_area) VALUES (1, 'Bob', 'children'), (2, 'Alice', 'children'), (3, 'Charlie', 'health');", 'sql': 'SELECT cause_area, COUNT(DISTINCT name) FROM volunteers GROUP BY cause_area;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='To answer the SQL prompt about how many unique volunteers worked on projects in each cause area, we need to:\n\n1. Identify all distinct cause areas.\n2. Count the number of unique volunteers for each identified cause area.\n\nHere is a step-by-step breakdown and corresponding SQL query:\n\n### Step 1: Identify Distinct Cause Areas\nFirstly, we need to find out what are the different cause areas in our dataset. This can be done by using the `DISTINCT` keyword on the `cause_area` column from the `volunteers` table.\n\n```sql\nSELECT DISTINCT cause_area FROM volunteers;\n```\n\n### Step 2: Count Unique Volunteers for Each Cause Area\nNext, we need to count how many unique volunteers are associated with',
    sql='SELECT COUNT(DISTINCT id) AS unique_volunteers_per_cause_area FROM volunteers GROUP BY cause_area;'
), 0), (Example({'sql_prompt': 'Who were the top 3 content creators in terms of likes received on their posts in January 2022?', 'sql_context': "CREATE SCHEMA content; CREATE TABLE creators(creator_id INT, name VARCHAR(255), total_likes INT); INSERT INTO creators (creator_id, name, total_likes) VALUES (1, 'Alice', 5000); INSERT INTO creators (creator_id, name, total_likes) VALUES (2, 'Bob', 7000);", 'sql': 'SELECT name, SUM(total_likes) AS total_likes_january FROM content.creators WHERE MONTH(created_date) = 1 GROUP BY name ORDER BY total_likes_january DESC LIMIT 3;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='answer the SQL prompt. \n\nFirstly, we need a table that contains information about content creators and their likes received on posts. However, such a table is not provided in the given context. Therefore, I will assume there exists a `posts` table with columns like `creator_id`, `post_id`, `likes`, and `posting_date`.\n\nTo find out who were the top 3 content creators based on the total number of likes they received on their posts in January 2022, we need to:\n\n1. Filter for posts made in January 2022.\n2. Sum up the likes for each creator.\n3. Order the results by the total likes in descending order.\n4. Limit the output to only show',
    sql='SELECT c.name, SUM(p.likes) AS TotalLikes\nFROM creators c\nJOIN posts p ON c.creator_id = p.creator_id\nWHERE YEAR(p.posting_date) = 2022 AND MONTH(p.posting_date) = 1\nGROUP BY c.creator_id, c.name\nORDER BY TotalLikes DESC\nLIMIT 3;'
), 0), (Example({'sql_prompt': "Update records in the 'Volunteers' table where the volunteer's skill level is 'Beginner' and change it to 'Intermediate'", 'sql_context': 'CREATE TABLE Volunteers (id INT PRIMARY KEY, volunteer_name VARCHAR(255), skill_level VARCHAR(255), last_volunteered DATE);', 'sql': "UPDATE Volunteers SET skill_level = 'Intermediate' WHERE skill_level = 'Beginner';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Update the records in the 'Volunteers' table where the skill level is 'Beginner'. \n\n1. **Identify the condition**: We need to find all rows where `skill_level` equals 'Beginner'.\n2. **Execute the update**: Once we have identified these rows, we can use an SQL UPDATE statement to change their `skill_level` from 'Beginner' to 'Intermediate'.\n\nHere is how you would write this in SQL:\n\n```sql\nUPDATE Volunteers \nSET skill_level = 'Intermediate'\nWHERE skill_level = 'Beginner';\n```\n\nThis command will go through the table and update any row where the `skill_level` column has a value of 'Beginner', changing it to 'Intermediate'.",
    sql="UPDATE Volunteers SET skill_level = 'Intermediate' WHERE skill_level = 'Beginner';"
), 1), (Example({'sql_prompt': 'Identify the number of farmers involved in urban agriculture initiatives in California and New York in 2019.', 'sql_context': "CREATE TABLE Urban_Agriculture (Farmer_ID INT, State VARCHAR(20), Initiative VARCHAR(20), Year INT); INSERT INTO Urban_Agriculture (Farmer_ID, State, Initiative, Year) VALUES (101, 'California', 'Community_Garden', 2019), (102, 'California', 'Rooftop_Farming', 2019), (103, 'New_York', 'Community_Garden', 2019);", 'sql': "SELECT COUNT(DISTINCT Farmer_ID) FROM Urban_Agriculture WHERE State IN ('California', 'New York') AND Year = 2019 AND Initiative IN ('Community_Garden', 'Rooftop_Farming');"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Identify the number of farmers involved in urban agriculture initiatives in California and New York in 2019.\n\n**Step 1:** Understand the problem statement. We need to find out how many unique farmers were involved in urban agriculture initiatives specifically in California and New York during the year 2019.\n\n**Step 2:** Look at the SQL context provided, which contains a table named `Urban_Agriculture` with columns for `Farmer_ID`, `State`, `Initiative`, and `Year`.\n\n**Step 3:** Formulate an SQL query that filters records based on the conditions specified in the problem statement. This includes selecting rows where:\n- The state is either 'California' or 'New York',\n- The year",
    sql="SELECT COUNT(DISTINCT Farmer_ID) AS NumberOfFarmers FROM Urban_Agriculture WHERE State IN ('California', 'New_York') AND Year = 2019;"
), 0), (Example({'sql_prompt': "Update the accommodation type for a student with a StudentID of 2 from 'Assistive Listening Devices' to 'Sign Language Interpretation'.", 'sql_context': "CREATE TABLE StudentAccommodations (StudentID INT, StudentName VARCHAR(255), DisabilityType VARCHAR(255), AccommodationType VARCHAR(255), GraduationYear INT); INSERT INTO StudentAccommodations (StudentID, StudentName, DisabilityType, AccommodationType, GraduationYear) VALUES (1, 'John Doe', 'Visual Impairment', 'Sign Language Interpretation', 2018), (2, 'Jane Smith', 'Hearing Impairment', 'Assistive Listening Devices', NULL), (3, 'Michael Johnson', 'Mobility Impairment', 'Assistive Technology', 2019), (4, 'Sara Johnson', 'Physical Disability', 'Mobility Assistance', 2022);", 'sql': "UPDATE StudentAccommodations SET AccommodationType = 'Sign Language Interpretation' WHERE StudentID = 2;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Update the accommodation type for a student with StudentID of 2 from 'Assistive Listening Devices' to 'Sign Language Interpretation'. \n\n1. **Identify the table and column**: The relevant table is `StudentAccommodations` where we need to update the `AccommodationType`. \n   \n2. **Find the row to update**: We need to locate the row for StudentID 2, which has 'Assistive Listening Devices' as its current AccommodationType.\n\n3. **Execute the update query**: Use an UPDATE statement with SET clause to change the value of `AccommodationType` from 'Assistive Listening Devices' to 'Sign Language Interpretation'.\n\nHere is how you would write this SQL",
    sql="UPDATE StudentAccommodations\nSET AccommodationType = 'Sign Language Interpretation'\nWHERE StudentID = 2;"
), 1), (Example({'sql_prompt': 'What is the minimum square footage of an inclusive housing unit in the city of Miami?', 'sql_context': "CREATE TABLE housing (id INT, city VARCHAR(20), size INT, inclusive BOOLEAN); INSERT INTO housing (id, city, size, inclusive) VALUES (1, 'Miami', 800, TRUE), (2, 'Miami', 1000, FALSE), (3, 'Miami', 1200, TRUE);", 'sql': "SELECT MIN(size) FROM housing WHERE city = 'Miami' AND inclusive = TRUE;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Find the minimum square footage of an inclusive housing unit in Miami:\n\n1. **Identify the relevant table**: We need data from the `housing` table.\n   \n2. **Filter for Miami**: Since we're interested only in units located in Miami, we'll use a WHERE clause with `city = 'Miami'`.\n\n3. **Select size and filter for inclusive housing**: We want to look at the `size` column but only for rows where `inclusive` is TRUE.\n\n4. **Find minimum square footage**: To get the smallest value from our filtered results, we can use the MIN function on the `size` column.\n\nThe SQL query that accomplishes this would be:\n\n```sql\nSELECT MIN(size) AS min_inclusive_size",
    sql="SELECT MIN(size) AS min_inclusive_size FROM housing WHERE city = 'Miami' AND inclusive = TRUE;"
), 1), (Example({'sql_prompt': 'How many works were exhibited in the year 1950?', 'sql_context': "CREATE TABLE exhibitions (exhibition_id INT PRIMARY KEY, exhibition_name TEXT, year INT, location TEXT);CREATE TABLE exhibits (exhibit_id INT PRIMARY KEY, work_id INT, exhibition_id INT, FOREIGN KEY (work_id) REFERENCES works(work_id), FOREIGN KEY (exhibition_id) REFERENCES exhibitions(exhibition_id));INSERT INTO exhibitions (exhibition_id, exhibition_name, year, location) VALUES (1, 'Documenta', 1950, 'Kassel, Germany'); INSERT INTO exhibits (exhibit_id, work_id, exhibition_id) VALUES (1, 1, 1);", 'sql': 'SELECT COUNT(*) FROM exhibits e JOIN exhibitions ex ON e.exhibition_id = ex.exhibition_id WHERE ex.year = 1950;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find out how many works were exhibited in the year 1950, we need to join two tables - `exhibitions` and `exhibits`. The `exhibitions` table contains information about exhibitions including their ID, name, year, and location. The `exhibits` table links each exhibit (work) with an exhibition through the `exhibition_id` and `work_id`.\n\nHere's how we can write the SQL query:\n\n1. **Join Tables**: We need to join the `exhibitions` and `exhibits` tables on their common column, which is `exhibition_id`.\n2. **Filter Year**: From the joined table, select only those rows where the year in the",
    sql='SELECT COUNT(DISTINCT exhibits.work_id) AS number_of_works FROM exhibitions JOIN exhibits ON exhibitions.exhibition_id = exhibits.exhibition_id WHERE exhibitions.year = 1950;'
), 0), (Example({'sql_prompt': 'What is the total number of articles written by each author in each region?', 'sql_context': "CREATE TABLE authors (id INT, name TEXT); CREATE TABLE regions (id INT, name TEXT); CREATE TABLE articles (id INT, title TEXT, content TEXT, author_id INT, region_id INT); INSERT INTO authors (id, name) VALUES (1, 'John Doe'), (2, 'Jane Smith'); INSERT INTO regions (id, name) VALUES (1, 'North'), (2, 'South'), (3, 'East'), (4, 'West'); INSERT INTO articles (id, title, content, author_id, region_id) VALUES (1, 'Article 1', 'Content 1', 1, 1), (2, 'Article 2', 'Content 2', 2, 2), (3, 'Article 3', 'Content 3', 1, 3), (4, 'Article 4', 'Content 4', 2, 4);", 'sql': 'SELECT authors.name, regions.name, COUNT(articles.id) FROM authors INNER JOIN articles ON authors.id = articles.author_id INNER JOIN regions ON regions.id = articles.region_id GROUP BY authors.name, regions.name;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To answer the SQL prompt about finding the total number of articles written by each author in each region, we need to join tables `authors`, `regions`, and `articles` based on their relationships. The `author_id` column in table `articles` should match with the `id` column from table `authors`, while the `region_id` column in table `articles` should match with the `id` column from table `regions`. \n\nHere's how you can write the SQL query:\n\n```sql\nSELECT \n    a.name AS Author,\n    r.name AS Region,\n    COUNT(a.id) AS TotalArticles\nFROM \n    authors a\nJOIN \n    articles ar ON a.id = ar.author_id\nJOIN \n    regions r",
    sql='ON ar.region_id = r.id GROUP BY a.name, r.name;'
), 0), (Example({'sql_prompt': 'How many tunnels in Washington state were constructed after 2010?', 'sql_context': "CREATE TABLE tunnels (id INT, name TEXT, state TEXT, build_year INT); INSERT INTO tunnels (id, name, state, build_year) VALUES (1, 'WA-1 Underpass', 'WA', 2012);", 'sql': "SELECT COUNT(*) FROM tunnels WHERE state = 'WA' AND build_year > 2010;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To answer the SQL prompt about how many tunnels in Washington state were constructed after 2010, we need to:\n\n1. Identify the columns and data types in our `tunnels` table.\n2. Filter rows where both `state` is 'WA' (Washington) and `build_year` is greater than 2010.\n3. Count the number of filtered rows.\n\nHere's how you can write the SQL query:\n\n```sql\nSELECT COUNT(*) \nFROM tunnels \nWHERE state = 'WA' AND build_year > 2010;\n```\n\nThis query will return a single row with the count of tunnels in Washington that were built after 2010.",
    sql="SELECT COUNT(*) FROM tunnels WHERE state = 'WA' AND build_year > 2010;"
), 1), (Example({'sql_prompt': 'List the top 5 models with the highest explainability scores and their development team names.', 'sql_context': 'CREATE TABLE ModelExplainabilityScores (ModelID INT, ExplainabilityScore INT, TeamID INT); CREATE TABLE TeamNames (TeamID INT, TeamName VARCHAR(50));', 'sql': 'SELECT ModelExplainabilityScores.ModelID, MAX(ModelExplainabilityScores.ExplainabilityScore) AS MaxExplainabilityScore, TeamNames.TeamName FROM ModelExplainabilityScores INNER JOIN TeamNames ON ModelExplainabilityScores.TeamID = TeamNames.TeamID GROUP BY ModelExplainabilityScores.TeamID ORDER BY MaxExplainabilityScore DESC, TeamNames.TeamName DESC LIMIT 5;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='1. **Identify the SQL Query for "affected_by_acidification"**:\n   - The query you\'re looking for should select all columns from a table where `affected_by_acidification` is TRUE.\n   - Assuming the table name is `YourTable`, the SQL would look like this:\n\n     ```sql\n     SELECT * FROM YourTable WHERE affected_by_acidification = TRUE;\n     ```\n\n2. **Total Number of Construction Permits Issued in Each State**:\n   - The SQL query you need to use should sum up the permit counts for each state.\n   - Assuming your table is named `PermitsByState`, here\'s how you\'d write it:\n\n     ```sql\n     SELECT State, SUM(',
    sql='SELECT ModelID, ExplainabilityScore, TeamName FROM ModelExplainabilityScores \nJOIN TeamNames ON ModelExplainabilityScores.TeamID = TeamNames.TeamID \nORDER BY ExplainabilityScore DESC \nLIMIT 5;'
), 0), (Example({'sql_prompt': 'How many renewable energy power plants are there in Texas?', 'sql_context': "CREATE TABLE power_plants (state VARCHAR(255), source_type VARCHAR(255), count INT); INSERT INTO power_plants (state, source_type, count) VALUES ('Texas', 'Wind', 45), ('Texas', 'Solar', 25), ('Texas', 'Hydro', 10);", 'sql': "SELECT SUM(count) FROM power_plants WHERE state = 'Texas';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the total number of renewable energy power plants in Texas, we need to consider all types of renewable sources that are listed for Texas. The SQL query will sum up the counts for each type of source (Wind, Solar, Hydro) where the state is 'Texas'. \n\nHere's how you can write the SQL query:\n\n```sql\nSELECT SUM(count) AS total_renewable_power_plants_in_Texas \nFROM power_plants \nWHERE state = 'Texas';\n```\n\nThis query will return a single value representing the total number of renewable energy power plants in Texas.",
    sql="SELECT SUM(count) AS total_renewable_power_plants_in_Texas FROM power_plants WHERE state = 'Texas';"
), 1), (Example({'sql_prompt': 'Find the top 5 countries with the lowest financial capability scores in Europe.', 'sql_context': 'CREATE TABLE financial_capability (id INT, country VARCHAR(255), score INT);', 'sql': "SELECT country, score FROM (SELECT country, score, ROW_NUMBER() OVER (ORDER BY score ASC) rn FROM financial_capability WHERE region = 'Europe') t WHERE rn <= 5;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="1. **Identify the relevant data**: We need to look at the `financial_capability` table where countries are located in Europe and have a low financial capability score.\n\n2. **Filter for European countries**: Since we're interested only in European countries, we'll use a WHERE clause with a condition that checks if the country is in Europe.\n\n3. **Sort by financial capability scores**: We need to sort the results in ascending order because we want the countries with the lowest scores at the top.\n\n4. **Limit the output**: Finally, since we're only interested in the top 5 countries, we'll use a LIMIT clause to restrict our output to these records.\n\nHere's how you can write this SQL query:\n\n```sql\nSELECT country",
    sql="SELECT country, score FROM financial_capability WHERE continent = 'Europe' ORDER BY score ASC LIMIT 5;"
), 0), (Example({'sql_prompt': 'What is the correlation between climate change and biodiversity in the Arctic?', 'sql_context': "CREATE TABLE Climate_Change (id INT PRIMARY KEY, year INT, temperature FLOAT, region VARCHAR(50)); CREATE TABLE Biodiversity (id INT, year INT, species_count INT, region VARCHAR(50), climate_id INT, FOREIGN KEY (climate_id) REFERENCES Climate_Change(id)); INSERT INTO Climate_Change (id, year, temperature, region) VALUES (1, 2000, -10.0, 'Arctic'), (2, 2010, -9.5, 'Arctic'); INSERT INTO Biodiversity (id, year, species_count, region, climate_id) VALUES (1, 2000, 100, 'Arctic', 1), (2, 2010, 105, 'Arctic', 2);", 'sql': "SELECT Climate_Change.year, Climate_Change.temperature, Biodiversity.species_count FROM Climate_Change INNER JOIN Biodiversity ON Climate_Change.id = Biodiversity.climate_id WHERE Climate_Change.region = 'Arctic';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Understand the correlation between climate change and biodiversity in the Arctic. \n\nFirstly, we need to retrieve data about temperature changes over time in the Arctic region from the `Climate_Change` table.\n\n```sql\nSELECT year, temperature FROM Climate_Change WHERE region = 'Arctic';\n```\n\nThis will give us a list of years with corresponding average temperatures for the Arctic region.\n\nNext, we want to see how species count has changed over these same time periods in the Arctic. We can retrieve this data from the `Biodiversity` table:\n\n```sql\nSELECT year, species_count FROM Biodiversity WHERE region = 'Arctic';\n```\n\nNow that we have both temperature and species count data for the Arctic, let's combine them",
    sql="SELECT \n    Climate_Change.year,\n    Climate_Change.temperature,\n    Biodiversity.species_count,\n    (Biodiversity.species_count - (SELECT AVG(species_count) FROM Biodiversity WHERE region = 'Arctic')) / (SELECT STDDEV(species_count) FROM Biodiversity WHERE region = 'Arctic') AS z_score_species_count,\n    (Climate_Change.temperature - (SELECT AVG(temperature) FROM Climate_Change WHERE region = 'Arctic')) / (SELECT STDDEV(temperature) FROM Climate_Change WHERE region = 'Arctic') AS z_score_temperature\nFROM \n    Climate_Change\nJOIN \n    Biodiversity ON Climate_Change.id = Biodiversity.climate_id\nWHERE"
), 0), (Example({'sql_prompt': 'What is the average budget allocated for ethical AI research by country?', 'sql_context': "CREATE TABLE Country (CountryID INT PRIMARY KEY, CountryName VARCHAR(100), Budget DECIMAL(10,2)); INSERT INTO Country (CountryID, CountryName, Budget) VALUES (1, 'USA', 5000000.00), (2, 'Canada', 3000000.00), (3, 'Mexico', 1000000.00);", 'sql': 'SELECT AVG(Budget) as AvgBudget, CountryName FROM Country GROUP BY CountryName;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the average budget allocated for ethical AI research by country, we need to:\n\n1. Identify the columns that contain information about countries and their budgets.\n2. Filter or group this data based on the country name.\n3. Calculate the average of the budget column for each country.\n\nGiven the SQL context provided, here's how you would write the SQL query:\n\n```sql\nSELECT CountryName, AVG(Budget) AS AverageBudget\nFROM Country\nGROUP BY CountryName;\n```\n\nThis query does the following:\n- `SELECT CountryName`: Selects the name of the country.\n- `AVG(Budget) AS AverageBudget`: Calculates the average budget for each country and aliases it as 'AverageBudget'.\n- `FROM Country`: Specifies",
    sql='```sql\nSELECT CountryName, AVG(Budget) AS AverageBudget FROM Country GROUP BY CountryName;\n```'
), 1), (Example({'sql_prompt': 'What is the total fare collected for each train line?', 'sql_context': "CREATE TABLE train_lines (line_id INT, line_name TEXT); CREATE TABLE fares (fare_id INT, line_id INT, fare DECIMAL); INSERT INTO train_lines VALUES (1, 'Line 1'), (2, 'Line 2'), (3, 'Line 3'); INSERT INTO fares VALUES (1, 1, 3.50), (2, 1, 3.50), (3, 2, 4.25), (4, 3, 5.00), (5, 3, 5.00);", 'sql': 'SELECT train_lines.line_name, SUM(fares.fare) AS total_fare FROM train_lines INNER JOIN fares ON train_lines.line_id = fares.line_id GROUP BY train_lines.line_id;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='To find the total fare collected for each train line, we need to join the `train_lines` table with the `fares` table on their common column (`line_id`) and then sum up the fares grouped by the `line_name`. Here is how you can write the SQL query:\n\n```sql\nSELECT \n    tl.line_name,\n    SUM(f.fare) AS total_fare_collected\nFROM \n    train_lines tl\nJOIN \n    fares f ON tl.line_id = f.line_id\nGROUP BY \n    tl.line_name;\n```\n\nThis query works as follows:\n1. **Joining Tables**: The `JOIN` clause is used to combine rows from the `train_lines` and `fares` tables based on',
    sql='SELECT tl.line_name, SUM(f.fare) AS total_fare_collected FROM train_lines tl JOIN fares f ON tl.line_id = f.line_id GROUP BY tl.line_name;'
), 0), (Example({'sql_prompt': 'What is the total revenue for cosmetics products that are not cruelty-free?', 'sql_context': 'CREATE TABLE product (product_id INT, name TEXT, price FLOAT, cruelty_free BOOLEAN); CREATE TABLE sales (sale_id INT, product_id INT, quantity INT);', 'sql': 'SELECT SUM(price * quantity) FROM product INNER JOIN sales ON product.product_id = sales.product_id WHERE cruelty_free = FALSE;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="1. **Identify the relevant data**: We need to find cosmetics products that are not cruelty-free and then calculate their total revenue.\n\n2. **Join tables**: To do this, we will join the `product` table with the `sales` table on the product_id column since sales information is stored in the `sales` table.\n\n3. **Filter non-cruelty free products**: We need to filter out rows where the `cruelty_free` column is false (meaning not cruelty-free).\n\n4. **Calculate total revenue**: Once we have identified the relevant products, we will multiply each product's price by its quantity sold and sum these values up.\n\n5. **Execute SQL query**: Putting it all together in an SQL",
    sql="SELECT SUM(sales.quantity * product.price) AS TotalRevenue FROM product \nJOIN sales ON product.product_id = sales.product_id \nWHERE product.name LIKE '%cosmetics%' AND product.cruelty_free = FALSE;"
), 0), (Example({'sql_prompt': 'What is the total cost of permits for projects with permit numbers greater than 700?', 'sql_context': "CREATE TABLE permit_data (id INT, project VARCHAR(50), permit_number INT, start_date DATE, permit_cost DECIMAL(10,2)); INSERT INTO permit_data (id, project, permit_number, start_date, permit_cost) VALUES (1, 'Office Building', 450, '2019-12-20', 850.00), (2, 'Residential Apartments', 751, '2021-03-01', 1200.50), (3, 'School', 333, '2020-06-15', 500.25), (4, 'Mall', 780, '2020-12-01', 1500.75);", 'sql': 'SELECT SUM(permit_cost) FROM permit_data WHERE permit_number > 700;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the total cost of permits for projects with permit numbers greater than 700, we can follow these steps:\n\n1. **Filter the data**: First, we need to filter out only those rows where `permit_number` is greater than 700.\n2. **Summarize costs**: Then, we should sum up the `permit_cost` for all filtered rows.\n\nHere's how you could write this SQL query based on the provided context:\n\n```sql\nSELECT SUM(permit_cost) AS total_cost_of_permits\nFROM permit_data\nWHERE permit_number > 700;\n```\n\nThis query does the following:\n- **`SUM(permit_cost)`**: It calculates the sum of all `permit_cost`",
    sql='```sql\nSELECT SUM(permit_cost) AS total_cost_of_permits \nFROM permit_data \nWHERE permit_number > 700;\n```'
), 1), (Example({'sql_prompt': 'Find the total square footage of wheelchair-accessible properties in Boston.', 'sql_context': "CREATE TABLE properties (id INT, city VARCHAR(20), square_footage INT, wheelchair_accessible BOOLEAN); INSERT INTO properties (id, city, square_footage, wheelchair_accessible) VALUES (1, 'Boston', 1000, true); INSERT INTO properties (id, city, square_footage, wheelchair_accessible) VALUES (2, 'Boston', 1200, false);", 'sql': "SELECT SUM(square_footage) FROM properties WHERE city = 'Boston' AND wheelchair_accessible = true;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Find the total square footage of wheelchair-accessible properties in Boston:\n\n1. **Identify Relevant Data**: We need data from the `properties` table that includes columns for `id`, `city`, `square_footage`, and `wheelchair_accessible`. The query should filter this data based on the city being 'Boston' and the property being wheelchair accessible.\n\n2. **Filtering Criteria**: \n   - `city = 'Boston'`: This ensures we only consider properties in Boston.\n   - `wheelchair_accessible = true`: This filters for properties that are wheelchair accessible.\n\n3. **Aggregation**: We need to sum up the `square_footage` of all such properties to get the total square footage.\n\n4. **SQL Query Construction",
    sql="SELECT SUM(square_footage) AS TotalSquareFootage FROM properties WHERE city = 'Boston' AND wheelchair_accessible = true;"
), 1), (Example({'sql_prompt': 'Which operators have the highest average production quantity per well?', 'sql_context': "CREATE TABLE wells (well_id INT, well_name TEXT, production_qty FLOAT, operator_id INT); INSERT INTO wells (well_id, well_name, production_qty, operator_id) VALUES (1, 'Well A', 1000, 1), (2, 'Well B', 1500, 1), (3, 'Well C', 800, 2); CREATE TABLE operators (operator_id INT, operator_name TEXT); INSERT INTO operators (operator_id, operator_name) VALUES (1, 'ABC Inc.'), (2, 'DEF'), (3, 'GHI Inc.');", 'sql': 'SELECT o.operator_name, AVG(w.production_qty) as avg_production FROM wells w JOIN operators o ON w.operator_id = o.operator_id GROUP BY o.operator_name ORDER BY avg_production DESC;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the operators with the highest average production quantity per well, we need to:\n\n1. Join the `wells` table and the `operators` table on their common column (`operator_id`) so that each row of wells is associated with its operator.\n2. Calculate the average production quantity for each operator by grouping the data by `operator_name`.\n3. Order the results in descending order based on the average production quantity to find the operators with the highest averages.\n\nHere's how you can write the SQL query:\n\n```sql\nSELECT o.operator_name, AVG(w.production_qty) as avg_production_quantity\nFROM wells w\nJOIN operators o ON w.operator_id = o.operator_id\nGROUP BY o.operator_name\nORDER BY avg_production_quantity DESC",
    sql='SELECT o.operator_name, AVG(w.production_qty) as avg_production_quantity FROM wells w JOIN operators o ON w.operator_id = o.operator_id GROUP BY o.operator_name ORDER BY avg_production_quantity DESC;'
), 1), (Example({'sql_prompt': 'What was the average number of comments per post in Oceania in the last month?', 'sql_context': "CREATE TABLE comments_posts(region VARCHAR(20), post_date DATE, comments INT, posts INT); INSERT INTO comments_posts(region, post_date, comments, posts) VALUES('Oceania', '2021-09-01', 10, 10), ('Oceania', '2021-09-02', 12, 12), ('Oceania', '2021-09-03', 14, 14), ('Oceania', '2021-09-04', 16, 16), ('Oceania', '2021-09-05', 18, 18), ('Oceania', '2021-09-06', 20, 20), ('Oceania', '2021-09-07', 22, 22);", 'sql': "SELECT AVG(comments/posts) FROM comments_posts WHERE region = 'Oceania' AND post_date >= DATEADD(month, -1, CURRENT_DATE)"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the average number of comments per post in Oceania for the last month, we need to:\n\n1. Identify all records where `region` is 'Oceania'.\n2. Filter these records to only include those from the last month (assuming today's date as a reference point).\n3. Calculate the total number of comments and divide it by the total number of posts.\n\nHere's how you can write this SQL query:\n\n```sql\nSELECT AVG(comments) AS average_comments_per_post\nFROM comments_posts\nWHERE region = 'Oceania'\nAND post_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);\n```\n\nThis query first filters records where the `region` is 'Oceania' and the `",
    sql='post_date` is within the last month (using a date subtraction to calculate this). Then it calculates the average (`AVG`) of the `comments` column, which gives us the average number of comments per post in Oceania for the last month.'
), 1), (Example({'sql_prompt': 'What is the geopolitical risk assessment score for each country in 2020?', 'sql_context': "CREATE TABLE GeopoliticalRiskAssessments (assessment_id INT, assessment_name VARCHAR(50), score INT, assessment_date DATE, country VARCHAR(50)); INSERT INTO GeopoliticalRiskAssessments (assessment_id, assessment_name, score, assessment_date, country) VALUES (1, 'Assessment A', 7, '2020-01-01', 'USA'), (2, 'Assessment B', 5, '2020-02-15', 'Russia'), (3, 'Assessment C', 8, '2020-03-31', 'China');", 'sql': "SELECT country, score FROM GeopoliticalRiskAssessments WHERE assessment_date BETWEEN '2020-01-01' AND '2020-12-31';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='To answer the SQL prompts and queries, we need to understand each one individually:\n\n### Prompt 1:\n**Question:** What is the total number of construction permits issued in each state?\n\n**SQL Query:**\n```sql\nSELECT State, SUM(PermitCount) AS TotalPermits FROM PermitsByState GROUP BY State;\n```\n\n**Reasoning:**\n- The `SUM()` function aggregates all permit counts for each state.\n- `GROUP BY State` ensures that the sum is calculated per unique state.\n\n### Prompt 2:\n**Question:** What is the average mental health score of students for each district, ordered by the average score?\n\n**SQL Query:**\n```sql\nSELECT district_id, AVG(mental_health_score) as',
    sql="SELECT country, AVG(score) AS AverageRiskScore FROM GeopoliticalRiskAssessments WHERE assessment_date = '2020-12-31';"
), 0), (Example({'sql_prompt': 'Find the total revenue for events with an attendance over 200 in 2021.', 'sql_context': "CREATE TABLE events (event_id INT, event_name VARCHAR(50), attendance INT, revenue DECIMAL(10,2), event_date DATE); INSERT INTO events (event_id, event_name, attendance, revenue, event_date) VALUES (1, 'Art Exhibition', 250, 15000, '2021-06-01'); INSERT INTO events (event_id, event_name, attendance, revenue, event_date) VALUES (2, 'Theater Performance', 180, 12000, '2021-07-15');", 'sql': 'SELECT SUM(revenue) FROM events WHERE attendance > 200 AND YEAR(event_date) = 2021;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Find the total revenue for events with an attendance over 200 in 2021:\n\n**Step 1:** Identify the relevant columns and conditions.\n- We need `revenue` (the column representing event revenue) and `attendance` (the column indicating how many people attended each event).\n- The condition is that `attendance > 200`.\n- Additionally, we're only interested in events from the year 2021.\n\n**Step 2:** Write a SQL query to select these columns and filter by conditions.\n- Use an `INNER JOIN` if there's another table involved (not mentioned here), but since it's not necessary for this task, we'll directly use WHERE clause with conditions on our events",
    sql='SELECT SUM(revenue) AS TotalRevenue FROM events WHERE attendance > 200 AND YEAR(event_date) = 2021;'
), 1), (Example({'sql_prompt': "find the number of records in the CommunityHealthStatistics table where the State is 'TX' and the County is 'Harris'", 'sql_context': "CREATE TABLE CommunityHealthStatistics (ID INT, State TEXT, County TEXT, Population INT, AverageIncome FLOAT); INSERT INTO CommunityHealthStatistics (ID, State, County, Population, AverageIncome) VALUES (1, 'TX', 'Harris', 4500000, 60000), (2, 'CA', 'LA', 2500000, 70000);", 'sql': "SELECT * FROM CommunityHealthStatistics WHERE State = 'TX' AND County = 'Harris';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="1. **Identify the SQL Query**: The task is to find the number of records where `State` is 'TX' and `County` is 'Harris'. This means we need to filter rows based on these two conditions.\n\n2. **Understand the SQL Syntax**:\n   - `SELECT COUNT(*)`: Counts the total number of rows that match the specified condition.\n   - `FROM CommunityHealthStatistics`: Specifies the table from which data should be retrieved.\n   - `WHERE State = 'TX' AND County = 'Harris'`: Filters records based on conditions.\n\n3. **Construct the SQL Query**:\n   - Combine all parts to form a complete query that meets the requirements.\n\n4. **Execute and Verify**:",
    sql="SELECT COUNT(*) FROM CommunityHealthStatistics WHERE State = 'TX' AND County = 'Harris';"
), 0), (Example({'sql_prompt': "Insert a new record into the 'weapons' table with the following data: 'Javelin', 'USA', 'in-development'", 'sql_context': "CREATE TABLE weapons (id INT PRIMARY KEY, name VARCHAR(255), origin VARCHAR(255), status VARCHAR(255)); INSERT INTO weapons (id, name, origin) VALUES (1, 'AK-47', 'Russia'), (2, 'RPG-7', 'Russia');", 'sql': "INSERT INTO weapons (name, origin, status) VALUES ('Javelin', 'USA', 'in-development');"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Insert a new record into the `weapons` table with the details provided:\n\n1. **Identify the columns**: The columns are `id`, `name`, and `origin`. There is no column for `status` in this table, so we will only use `id`, `name`, and `origin`.\n\n2. **Determine values for each column**:\n   - `id`: Since there's no auto-incrementing ID or a clear rule to determine the next ID from existing records, you might need to assign an appropriate value manually. For this example, let's assume we're adding after record 2, so our `id` would be 3.\n   - `name`: 'Javelin'\n   - `origin",
    sql="INSERT INTO weapons (id, name, origin) VALUES (3, 'Javelin', 'USA');"
), 0), (Example({'sql_prompt': 'Count the number of mining incidents per month in 2021.', 'sql_context': "CREATE TABLE incidents (id INT, date DATE, incident_type TEXT); INSERT INTO incidents (id, date, incident_type) VALUES (1, '2021-01-05', 'equipment_failure'); INSERT INTO incidents (id, date, incident_type) VALUES (2, '2021-03-12', 'safety_violation');", 'sql': "SELECT DATE_PART('month', date) AS month, COUNT(*) FROM incidents WHERE date >= '2021-01-01' AND date < '2022-01-01' GROUP BY month;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='answer the SQL prompts:\n\n### Prompt 1:\n**Question**: What is the total number of construction permits issued in each state?\n\n**SQL Query**:\n```sql\nSELECT State, SUM(PermitCount) AS TotalPermits \nFROM PermitsByState \nGROUP BY State;\n```\n\n**Reasoning**:\n- The `SUM()` function aggregates the `PermitCount` for each distinct `State`.\n- `GROUP BY State` ensures that the sum is calculated per state.\n\n### Prompt 2:\n**Question**: What is the average mental health score of students for each district, ordered by the average score?\n\n**SQL Query**:\n```sql\nSELECT d.district_id, AVG(sm.mental_health_score) as avg_score',
    sql='SELECT COUNT(*) AS IncidentsPerMonth FROM incidents WHERE YEAR(date) = 2021 GROUP BY MONTH(date);'
), 0), (Example({'sql_prompt': "How many workers are employed in 'renewable energy' sector?", 'sql_context': "CREATE TABLE workers (id INT, worker_name VARCHAR(255), department VARCHAR(255)); INSERT INTO workers (id, worker_name, department) VALUES (1, 'John Doe', 'renewable energy'), (2, 'Jane Smith', 'textiles'), (3, 'Michael Brown', 'renewable energy');", 'sql': "SELECT COUNT(*) FROM workers WHERE department = 'renewable energy';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='To answer the SQL prompts and queries, we need to consider each one individually:\n\n### 1. Query for Affected by Acidification\n\n**Prompt**: What are all the species affected by acidification?\n\n**SQL Query**:\n```sql\nSELECT species_name FROM Species WHERE affected_by_acidification = TRUE;\n```\n\nThis query selects `species_name` from a table named `Species` where the `affected_by_acidification` column is set to `TRUE`.\n\n### 2. Total Number of Construction Permits Issued in Each State\n\n**Prompt**: What is the total number of construction permits issued in each state?\n\n**SQL Query**:\n```sql\nSELECT State, SUM(PermitCount) AS TotalPermits FROM Per',
    sql="SELECT COUNT(*) FROM workers WHERE department = 'renewable energy';"
), 1), (Example({'sql_prompt': 'What is the average performance score for each game genre?', 'sql_context': "CREATE TABLE game_genre_performance (game_id INT, game_genre VARCHAR(255), performance_score INT); INSERT INTO game_genre_performance (game_id, game_genre, performance_score) VALUES (1, 'RPG', 85), (2, 'Strategy', 90), (3, 'RPG', 80);", 'sql': 'SELECT game_genre, AVG(performance_score) as avg_score FROM game_genre_performance GROUP BY game_genre;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='To find the average performance score for each game genre, we need to:\n\n1. Group the data by `game_genre`.\n2. Calculate the average of `performance_score` within each group.\n\nHere is how you can write the SQL query:\n\n```sql\nSELECT \n    game_genre,\n    AVG(performance_score) AS avg_performance_score\nFROM \n    game_genre_performance\nGROUP BY \n    game_genre;\n```\n\nThis query will return a result set with two columns: `game_genre` and `avg_performance_score`. Each row represents an average performance score for each genre.',
    sql='SELECT game_genre, AVG(performance_score) AS avg_performance_score FROM game_genre_performance GROUP BY game_genre;'
), 1), (Example({'sql_prompt': 'How many Indigenous communities in the Arctic are experiencing negative socio-economic impacts due to climate change?', 'sql_context': "CREATE TABLE IndigenousCommunities(community TEXT, socio_economic_impact TEXT, climate_change_impact TEXT); INSERT INTO IndigenousCommunities(community, socio_economic_impact, climate_change_impact) VALUES ('Inuit', 'High', 'Very High'), ('Sami', 'Medium', 'High');", 'sql': "SELECT COUNT(*) FROM IndigenousCommunities WHERE socio_economic_impact = 'High' AND climate_change_impact = 'High' OR socio_economic_impact = 'Very High' AND climate_change_impact = 'Very High';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="1. **Identify the relevant data**: We need information on Indigenous communities in the Arctic that are experiencing negative socio-economic impacts due to climate change.\n\n2. **Filter the data**: From the `IndigenousCommunities` table, we want records where:\n   - The community is located in the Arctic.\n   - There's a 'High' or 'Very High' impact noted for both socio-economic and climate change aspects.\n\n3. **Count the records**: Once we have filtered the relevant data, we will count how many such communities exist.\n\nThe SQL query to achieve this would be:\n\n```sql\nSELECT COUNT(*) \nFROM IndigenousCommunities \nWHERE location = 'Arctic' AND (socio_economic_impact = 'High'",
    sql="SELECT COUNT(*) FROM IndigenousCommunities WHERE location = 'Arctic' AND (socio_economic_impact = 'High' OR socio_economic_impact = 'Very High') AND climate_change_impact IN ('High', 'Very High');"
), 0), (Example({'sql_prompt': 'What is the minimum depth recorded in the Mariana Trench?', 'sql_context': "CREATE TABLE ocean_floor_mapping (location VARCHAR(255), depth FLOAT);   INSERT INTO ocean_floor_mapping (location, depth) VALUES ('Mariana Trench', 10994.0), ('Challenger Deep', 10972.8);", 'sql': "SELECT MIN(depth) FROM ocean_floor_mapping WHERE location = 'Mariana Trench';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the minimum depth recorded in the Mariana Trench from the given SQL context, we can use a simple SELECT statement with a WHERE clause to filter for rows where `location` is 'Mariana Trench'. We then select the `depth` column. Here's how you would write this query:\n\n```sql\nSELECT depth \nFROM ocean_floor_mapping \nWHERE location = 'Mariana Trench';\n```\n\nThis SQL command will return the minimum depth recorded in the Mariana Trench from the data provided in the `ocean_floor_mapping` table.\n\nLet me know if there's anything else you'd like to explore or clarify!",
    sql="SELECT MIN(depth) AS MinDepth FROM ocean_floor_mapping WHERE location = 'Mariana Trench';"
), 1), (Example({'sql_prompt': 'List all farmers who have not serviced their irrigation systems in the last 6 months.', 'sql_context': "CREATE TABLE farmer_irrigation (id INT, farmer_id INT, system_type VARCHAR(50), service_date DATE); INSERT INTO farmer_irrigation (id, farmer_id, system_type, service_date) VALUES (1, 1, 'Drip', '2021-08-01'), (2, 2, 'Sprinkler', '2021-10-15'), (3, 3, 'Drip', '2021-11-01'), (4, 4, 'Sprinkler', '2022-02-01'), (5, 5, 'Drip', '2022-03-01'), (6, 6, 'Sprinkler', '2022-01-15'), (7, 7, 'Drip', '2021-06-01'), (8, 8, 'Sprinkler', '2022-04-01'), (9, 9, 'Drip', '2021-12-01'), (10, 10, 'Sprinkler', '2022-05-15');", 'sql': 'SELECT farmers.name FROM farmers LEFT JOIN farmer_irrigation ON farmers.id = farmer_irrigation.farmer_id WHERE farmer_irrigation.service_date <= DATE_SUB(CURDATE(), INTERVAL 6 MONTH);'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To list all farmers who have not serviced their irrigation systems in the last 6 months, we need to:\n\n1. Identify the service_date for each farmer.\n2. Calculate the date that is exactly 6 months ago from today (or the current date if no specific date is provided).\n3. Compare this calculated date with the service_date of each record.\n4. Select records where the service_date is less than or equal to the calculated date, indicating the system has not been serviced in the last 6 months.\n\nHere's how you can write the SQL query:\n\n```sql\nWITH six_months_ago AS (\n    SELECT CURRENT_DATE - INTERVAL '6 MONTH' AS date_six_months_ago\n),\nservice_dates AS (\n    SELECT farmer",
    sql="SELECT DISTINCT farmer_id FROM farmer_irrigation WHERE service_date <= (SELECT date_six_months_ago FROM six_months_ago) AND system_type IN ('Drip', 'Sprinkler');"
), 0), (Example({'sql_prompt': 'What is the most common type of medical equipment across hospitals?', 'sql_context': "CREATE TABLE medical_equipment (id INT, hospital_name TEXT, location TEXT, equipment TEXT, quantity INT, last_updated_date DATE); INSERT INTO medical_equipment (id, hospital_name, location, equipment, quantity, last_updated_date) VALUES (1, 'NY Presbyterian', 'NYC', 'Ventilators', 80, '2021-03-31'); INSERT INTO medical_equipment (id, hospital_name, location, equipment, quantity, last_updated_date) VALUES (2, 'Stanford Hospital', 'Palo Alto', 'Ventilators', 90, '2021-03-31');", 'sql': 'SELECT equipment, MAX(quantity) as max_quantity FROM medical_equipment GROUP BY equipment ORDER BY max_quantity DESC LIMIT 1;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='To find the most common type of medical equipment across hospitals, we need to:\n\n1. Identify all types of medical equipment.\n2. Count how many times each type appears in the dataset.\n\nHere is a SQL query that accomplishes this task:\n\n```sql\nSELECT equipment, COUNT(*) AS frequency \nFROM medical_equipment \nGROUP BY equipment \nORDER BY frequency DESC \nLIMIT 1;\n```\n\nThis query does the following:\n- `SELECT equipment, COUNT(*) AS frequency`: Selects each type of equipment and counts how many times it appears in the dataset.\n- `FROM medical_equipment`: Specifies the table from which to select data.\n- `GROUP BY equipment`: Groups the results by the type of equipment so that we can count occurrences for',
    sql='SELECT equipment, COUNT(*) AS frequency FROM medical_equipment GROUP BY equipment ORDER BY frequency DESC LIMIT 1;'
), 0), (Example({'sql_prompt': "What is the average rating for 'Gluten-Free' items?", 'sql_context': "CREATE TABLE ratings (item_name TEXT, is_gluten_free BOOLEAN, rating INTEGER); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Quinoa Salad', true, 4); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Chicken Stir Fry', false, 5);", 'sql': 'SELECT AVG(rating) FROM ratings WHERE is_gluten_free = true;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="1. **Identify the SQL Query**: The first step is to understand what we are trying to achieve with our query. In this case, we want to find the average rating for 'Gluten-Free' items.\n\n2. **Select Relevant Data**: We need to select data from the `ratings` table where the item is 'Gluten-Free'. This means we will use a WHERE clause with `is_gluten_free = true`.\n\n3. **Calculate Average Rating**: After selecting the relevant rows, we can calculate the average rating using the AVG() function.\n\n4. **Write the SQL Query**:\n   - Start by specifying the table name: `ratings`.\n   - Use the SELECT statement to specify what data we want (in this case",
    sql='SELECT AVG(rating) AS AverageRating FROM ratings WHERE is_gluten_free = true;'
), 1), (Example({'sql_prompt': 'How many water treatment facilities are there in each country, and what is their distribution by continent?', 'sql_context': "CREATE TABLE facilities (id INT, facility_name VARCHAR(50), country VARCHAR(50), total_employees INT); INSERT INTO facilities (id, facility_name, country, total_employees) VALUES (1, 'Water Treatment Plant 1', 'Brazil', 25); INSERT INTO facilities (id, facility_name, country, total_employees) VALUES (2, 'Water Treatment Plant 2', 'India', 30);", 'sql': 'SELECT country, COUNT(*) as facility_count, CONTINENT(location) as continent FROM facilities JOIN countries ON facilities.country = countries.country_name GROUP BY country, continent;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="1. **Identify the SQL Query**: We need a query that will count the number of water treatment facilities per country and then group these counts by continent.\n\n2. **Join with Continent Table (Assuming)**: Since we don't have a direct table for continents, let's assume there is an `continents` table linking countries to their respective continents. This join would be necessary to categorize the facilities by continent.\n\n3. **SQL Query Construction**:\n   - First, select the country and count of facilities from the `facilities` table.\n   - Join this with a `continents` table on the appropriate fields (country-continents).\n   - Group results by both country and continent to get counts per country within each",
    sql='SELECT f.country, c.continent, COUNT(f.id) AS num_facilities\nFROM facilities f\nJOIN continents c ON f.country = c.name\nGROUP BY f.country, c.continent;'
), 0), (Example({'sql_prompt': "What is the maximum data usage in the 'urban' region?", 'sql_context': "CREATE TABLE subscribers (id INT, name VARCHAR(50), data_usage FLOAT, region VARCHAR(20)); INSERT INTO subscribers (id, name, data_usage, region) VALUES (1, 'John Doe', 20.0, 'urban'), (2, 'Jane Doe', 18.0, 'urban');", 'sql': "SELECT MAX(data_usage) FROM subscribers WHERE region = 'urban';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the maximum data usage in the 'urban' region, we can use a SQL query that filters for records where the `region` is 'urban' and then selects the highest value of `data_usage`. Here's how you could write this query:\n\n```sql\nSELECT MAX(data_usage) AS max_data_usage\nFROM subscribers\nWHERE region = 'urban';\n```\n\nThis query does the following:\n1. Uses the `MAX()` function to find the maximum value in the `data_usage` column.\n2. Specifies that we are selecting from the `subscribers` table.\n3. Adds a `WHERE` clause to filter records where the `region` is 'urban'.\n\nThe result of this query will be the highest data usage found",
    sql="SELECT MAX(data_usage) AS max_data_usage FROM subscribers WHERE region = 'urban';"
), 1), (Example({'sql_prompt': 'Find the average depth of all underwater volcanoes in the Atlantic Ocean.', 'sql_context': "CREATE TABLE underwater_volcanoes (id INT, name VARCHAR(50), depth FLOAT, ocean VARCHAR(20)); INSERT INTO underwater_volcanoes (id, name, depth, ocean) VALUES (1, 'Lost City', 800, 'Atlantic'); INSERT INTO underwater_volcanoes (id, name, depth, ocean) VALUES (2, 'Eyjafjallajokull', 1650, 'Atlantic');", 'sql': "SELECT AVG(depth) FROM underwater_volcanoes WHERE ocean = 'Atlantic';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Find the average depth of all underwater volcanoes in the Atlantic Ocean:\n\n**Step 1:** Identify the relevant table and columns.\n- The relevant table is `underwater_volcanoes`.\n- We need the `depth` column.\n\n**Step 2:** Filter for records where the ocean is 'Atlantic'.\n- Use a WHERE clause to filter rows with an `ocean` value of 'Atlantic'.\n\n**Step 3:** Calculate the average depth.\n- Use the AVG() function on the `depth` column.\n\n**SQL Query:**\n```sql\nSELECT AVG(depth) AS average_depth\nFROM underwater_volcanoes\nWHERE ocean = 'Atlantic';\n```\n\nThis query will return the average depth of all underwater volcanoes located in the Atlantic",
    sql="SELECT AVG(depth) AS average_depth FROM underwater_volcanoes WHERE ocean = 'Atlantic';"
), 1), (Example({'sql_prompt': 'What is the total cost of Mars rover missions that have successfully landed?', 'sql_context': 'CREATE TABLE mars_rovers (id INT PRIMARY KEY, name VARCHAR(255), mission_type VARCHAR(255), agency VARCHAR(255), cost FLOAT, launched_date DATE, landed_date DATE);', 'sql': "SELECT SUM(cost) FROM mars_rovers WHERE mission_type = 'Lander' AND landed_date IS NOT NULL;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="1. **Identify the relevant table and column**: We need to look at the `mars_rovers` table where the `landed_date` is not null (meaning it has successfully landed) to filter out unsuccessful missions.\n\n2. **Filter successful landings**: Use a WHERE clause with `landed_date IS NOT NULL`.\n\n3. **Sum up costs**: After filtering, we need to sum up the cost column for all rows that meet our criteria.\n\n4. **Execute SQL query**: Combine these steps into an SQL query.\n\nHere's how you can write this in SQL:\n\n```sql\nSELECT SUM(cost) AS total_cost_of_successful_landings \nFROM mars_rovers \nWHERE landed_date IS NOT NULL;\n```\n\nThis query will",
    sql='SELECT SUM(cost) AS total_cost_of_successful_landings FROM mars_rovers WHERE landed_date IS NOT NULL;'
), 0), (Example({'sql_prompt': "What is the earliest year a peacekeeping operation was conducted in 'Asia'?", 'sql_context': "CREATE TABLE Peacekeeping_Years (id INT, location VARCHAR(30), year INT); INSERT INTO Peacekeeping_Years (id, location, year) VALUES (1, 'Asia', 1990), (2, 'Asia', 2000);", 'sql': "SELECT MIN(year) FROM Peacekeeping_Years WHERE location = 'Asia';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Find the earliest year a peacekeeping operation was conducted in 'Asia'. \n\nFirstly, we need to select all rows from the `Peacekeeping_Years` table where the location is 'Asia'.\nThen, among these rows, we are interested in finding the minimum value of the `year` column which represents the year when the peacekeeping operations were conducted.\n\nThe SQL query for this would be:\n\n```sql\nSELECT MIN(year) AS earliest_year \nFROM Peacekeeping_Years \nWHERE location = 'Asia';\n```\n\nThis query will return the earliest (minimum) year in which a peacekeeping operation was conducted in Asia.",
    sql="SELECT MIN(year) AS earliest_year FROM Peacekeeping_Years WHERE location = 'Asia';"
), 1), (Example({'sql_prompt': 'Identify the drug with the lowest sales amount in Europe in 2022.', 'sql_context': "CREATE TABLE sales (drug_name TEXT, continent TEXT, sales_amount INT, sale_date DATE); INSERT INTO sales (drug_name, continent, sales_amount, sale_date) VALUES ('Aspirin', 'Europe', 1000, '2022-01-01');", 'sql': "SELECT drug_name, MIN(sales_amount) FROM sales WHERE continent = 'Europe' AND sale_date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY drug_name;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To identify the drug with the lowest sales amount in Europe in 2022, we can follow these steps:\n\n1. **Filter for Europe**: We need to select only those rows where the continent is 'Europe'.\n2. **Filter for Year 2022**: Within the filtered data, we should further narrow down to only include records from the year 2022.\n3. **Sort by Sales Amount**: Once we have the relevant data, we sort it in ascending order based on sales amount so that the drug with the lowest sales amount is at the top of our list.\n4. **Select the Drug Name**: Finally, we select only the `drug_name` from this sorted list.\n\nHere's how you can",
    sql="SELECT drug_name FROM sales WHERE continent = 'Europe' AND sale_date BETWEEN '2022-01-01' AND '2022-12-31' ORDER BY sales_amount ASC LIMIT 1;"
), 0), (Example({'sql_prompt': "Insert a new record into 'customer_preferences' for customer 101 and menu item 1 with a preference score of 90", 'sql_context': 'CREATE TABLE customer_preferences (customer_id INT, item_id INT, preference_score INT);', 'sql': 'INSERT INTO customer_preferences (customer_id, item_id, preference_score) VALUES (101, 1, 90);'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="insert the new record into the 'customer_preferences' table. \n\nStep 1: Identify the columns that need to be populated.\n- `customer_id`: The ID of the customer for whom we are recording preferences. In this case, it is 101.\n- `item_id`: The ID of the menu item whose preference score we're recording. Here, it's 1.\n- `preference_score`: The score indicating how much the customer prefers the menu item. It's given as 90.\n\nStep 2: Use the SQL INSERT INTO statement to add a new row with these values into the 'customer_preferences' table.\n\nThe SQL query would look like this:\n\n```sql\nINSERT INTO customer_preferences (customer_id,",
    sql='INSERT INTO customer_preferences (customer_id, item_id, preference_score) VALUES (101, 1, 90);'
), 1), (Example({'sql_prompt': 'Who is the oldest donor from each city?', 'sql_context': "CREATE TABLE donors_2 (id INT PRIMARY KEY, name VARCHAR(50), age INT, city VARCHAR(50), state VARCHAR(50)); INSERT INTO donors_2 (id, name, age, city, state) VALUES (1, 'John Doe', 35, 'New York', 'NY'), (2, 'Jane Smith', 40, 'Buffalo', 'NY'), (3, 'Mike Johnson', 50, 'Boston', 'MA');", 'sql': 'SELECT city, MAX(age) as oldest_donor_age FROM donors_2 GROUP BY city;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="1. **Identify the oldest donor from each city**: We need to find the maximum age for donors from each unique city.\n\n2. **SQL Query**:\n   - Use `SELECT` statement to select the required columns.\n   - Use `FROM` clause to specify the table name, which is `donors_2`.\n   - Use `GROUP BY` clause to group records by `city` and `age`. This will allow us to find the maximum age for each city separately.\n   - Use `HAVING` clause instead of `WHERE` because we want to filter groups (cities) based on a condition applied to the entire group, not individual rows. In this case, we're interested in cities where there is at least",
    sql='SELECT city, MAX(age) AS oldest_age FROM donors_2 GROUP BY city HAVING COUNT(*) > 1;'
), 0), (Example({'sql_prompt': 'What are the union membership statistics for unions that have engaged in successful collective bargaining in the healthcare sector?', 'sql_context': "CREATE TABLE Membership (UnionName TEXT, Sector TEXT, MemberCount INT); INSERT INTO Membership (UnionName, Sector, MemberCount) VALUES ('UnionHealthA', 'Healthcare', 3000), ('UnionHealthB', 'Healthcare', 5000), ('UnionHealthC', 'Healthcare', 2000);", 'sql': "SELECT UnionName, MemberCount FROM Membership WHERE Sector = 'Healthcare' AND UnionName IN (SELECT UnionName FROM CBAs WHERE ExpirationDate > CURDATE());"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="1. **Identify the relevant data**: We need to find unions that have engaged in successful collective bargaining in the healthcare sector.\n   \n   - The `Sector` column indicates the industry of each union, and we're interested in those within the 'Healthcare' sector.\n\n2. **Filter for successful collective bargaining**: Although there's no specific column indicating whether a union has successfully bargained, let's assume that unions with high member counts are more likely to have engaged in successful negotiations due to their influence. We'll select unions with a `MemberCount` greater than 1000 as an indicator of potential success.\n\n3. **Extract the required information**: Once we've identified the relevant unions, we need to extract their names and member",
    sql="SELECT UnionName, MemberCount FROM Membership WHERE Sector = 'Healthcare' AND MemberCount > 1000;"
), 0), (Example({'sql_prompt': 'Calculate the total gas consumption for Nigeria in 2019', 'sql_context': "CREATE TABLE gas_consumption (country VARCHAR(50), consumption_year INT, gas_consumption FLOAT); INSERT INTO gas_consumption (country, consumption_year, gas_consumption) VALUES ('Nigeria', 2019, 12000), ('Nigeria', 2018, 10000), ('Ghana', 2019, 8000), ('Ghana', 2018, 6000), ('Ivory Coast', 2019, 10000), ('Ivory Coast', 2018, 8000);", 'sql': "SELECT gas_consumption FROM gas_consumption WHERE country = 'Nigeria' AND consumption_year = 2019;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Calculate the total gas consumption for Nigeria in 2019:\n\n1. **Identify the relevant data**: We need to find the row where `country` is 'Nigeria' and `consumption_year` is 2019.\n\n2. **Extract the consumption value**: Once we have identified the correct row, we can extract the `gas_consumption` value from that row.\n\n3. **Summarize the data**: Since there might be multiple rows for Nigeria in different years (as shown in the context), we need to sum up all the gas consumptions for 2019 specifically.\n\nHere is how you would write this SQL query:\n\n```sql\nSELECT SUM(gas_consumption) AS total_gas_consum",
    sql="SELECT SUM(gas_consumption) AS total_gas_consumption_2019 FROM gas_consumption WHERE country = 'Nigeria' AND consumption_year = 2019;"
), 0), (Example({'sql_prompt': 'What is the average socially responsible lending loan amount for microfinance institutions in Southeast Asia?', 'sql_context': "CREATE TABLE socially_responsible_lending(id INT, loan_number INT, institution_region VARCHAR(50), amount INT); INSERT INTO socially_responsible_lending VALUES (1, 701, 'Southeast Asia', 5000); INSERT INTO socially_responsible_lending VALUES (2, 702, 'South Asia', 7000); INSERT INTO socially_responsible_lending VALUES (3, 703, 'East Asia', 9000); INSERT INTO socially_responsible_lending VALUES (4, 704, 'Southeast Asia', 6000);", 'sql': "SELECT AVG(amount) FROM socially_responsible_lending WHERE institution_region = 'Southeast Asia' AND type = 'microfinance';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="1. **Identify the relevant data**: We need to find records of loans with a socially responsible lending status and where the institution is located in Southeast Asia.\n\n2. **Filter the data**: Use SQL to filter out only those rows that have 'Southeast Asia' as the `institution_region`.\n\n3. **Calculate the average loan amount**: Once we've filtered our dataset, calculate the average of the `amount` column for these records.\n\nThe SQL query would look something like this:\n\n```sql\nSELECT AVG(amount) AS avg_loan_amount \nFROM socially_responsible_lending \nWHERE institution_region = 'Southeast Asia';\n```\n\nThis query first filters out rows where the `institution_region` is 'Southeast Asia' and then calculates the",
    sql="SELECT AVG(amount) AS avg_loan_amount FROM socially_responsible_lending WHERE institution_region = 'Southeast Asia';"
), 0), (Example({'sql_prompt': 'What is the average salary of employees who identify as Latinx in the Engineering department?', 'sql_context': "CREATE TABLE Employees (EmployeeID int, Name varchar(50), Gender varchar(10), Department varchar(50), Salary decimal(10,2), Ethnicity varchar(50)); INSERT INTO Employees (EmployeeID, Name, Gender, Department, Salary, Ethnicity) VALUES (1, 'Juan Garcia', 'Male', 'Engineering', 85000.00, 'Latinx'); INSERT INTO Employees (EmployeeID, Name, Gender, Department, Salary, Ethnicity) VALUES (2, 'Maria Rodriguez', 'Female', 'Engineering', 90000.00, 'Latinx');", 'sql': "SELECT AVG(Salary) FROM Employees WHERE Department = 'Engineering' AND Ethnicity = 'Latinx';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="1. **Identify the SQL Query**: The first step is to understand what we need from our database. In this case, we're looking for the average salary of employees who identify as Latinx and work in the Engineering department.\n\n2. **Select Relevant Columns**: We'll select the `Salary` column since that's what we're interested in calculating the average of.\n\n3. **Filter by Department**: The query needs to filter out only those records where the `Department` is 'Engineering'.\n\n4. **Filter by Ethnicity**: Additionally, we need to filter for employees who identify as Latinx (`Ethnicity = 'Latinx'`).\n\n5. **Calculate Average Salary**: Finally, we'll use a SQL function (like AVG",
    sql="SELECT AVG(Salary) AS AverageSalary FROM Employees WHERE Department = 'Engineering' AND Ethnicity = 'Latinx';"
), 1), (Example({'sql_prompt': 'What is the name and type of the vessel with the highest average speed?', 'sql_context': "CREATE TABLE Vessels (ID VARCHAR(20), Name VARCHAR(20), Type VARCHAR(20), AverageSpeed FLOAT); INSERT INTO Vessels VALUES ('V012', 'Vessel L', 'Passenger', 35.0), ('V013', 'Vessel M', 'Cargo', 19.5), ('V014', 'Vessel N', 'Passenger', 32.0);", 'sql': 'SELECT Name, Type FROM Vessels WHERE AverageSpeed = (SELECT MAX(AverageSpeed) FROM Vessels);'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Find the name and type of the vessel with the highest average speed:\n\nStep 1: Identify the column that contains the average speed, which is `AverageSpeed` in this case.\n\nStep 2: Use the `MAX()` function to find the maximum value of `AverageSpeed`. This will give us the highest average speed among all vessels.\n\nStep 3: Select the columns `Name` and `Type` from the table `Vessels`.\n\nStep 4: Join these steps together in a SQL query. \n\nHere is how you would write this query:\n\n```sql\nSELECT Name, Type \nFROM Vessels \nWHERE AverageSpeed = (SELECT MAX(AverageSpeed) FROM Vessels);\n```\n\nThis query first finds the',
    sql='SELECT Name, Type FROM Vessels WHERE AverageSpeed = (SELECT MAX(AverageSpeed) FROM Vessels);'
), 1), (Example({'sql_prompt': "List all the distinct producers of Gadolinium from the 'production' table, ordered alphabetically.", 'sql_context': 'CREATE TABLE production (element VARCHAR(10), year INT, month INT, producer VARCHAR(20), quantity INT);', 'sql': "SELECT DISTINCT producer FROM production WHERE element = 'Gadolinium' ORDER BY producer ASC;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="solve this SQL query. \n\nFirstly, we need to select the distinct producers of Gadolinium from our 'production' table. This means that each producer should only appear once in the result set regardless of how many times they produce Gadolinium.\n\nSecondly, we want these results ordered alphabetically by the producer's name. This will ensure a clear and organized output.\n\nThe SQL query to achieve this would be:\n\n```sql\nSELECT DISTINCT producer \nFROM production \nWHERE element = 'Gadolinium'\nORDER BY producer ASC;\n```\n\nThis query first filters out rows where the `element` column is equal to 'Gadolinium'. Then, it selects distinct values from the `producer` column. Finally, it orders these",
    sql="SELECT DISTINCT producer FROM production WHERE element = 'Gadolinium' ORDER BY producer ASC;"
), 1)]