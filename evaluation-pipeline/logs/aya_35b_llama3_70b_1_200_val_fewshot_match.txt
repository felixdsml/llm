[(Example({'sql_prompt': "What are the top 3 autonomous vehicles with the highest safety ratings in the 'auto_show' table?", 'sql_context': 'CREATE TABLE auto_show (id INT, vehicle_name VARCHAR(50), safety_rating INT);', 'sql': "SELECT vehicle_name, safety_rating FROM (SELECT vehicle_name, safety_rating, ROW_NUMBER() OVER (ORDER BY safety_rating DESC) as safety_rank FROM auto_show WHERE vehicle_name LIKE '%Autonomous%') AS auton_ranks WHERE safety_rank <= 3;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to answer the prompt:\n```sql\nSELECT vehicle_name, safety_rating\nFROM auto_show\nORDER BY safety_rating DESC\nLIMIT 3;\n```\n\nSql Prompt: What are the top 3 autonomous vehicles with the highest safety ratings in the 'auto_show' table?\n\nSql Context: CREATE TABLE auto_show (id INT, vehicle_name VARCHAR(50), safety_rating INT);\n\nReasoning: To find the top 3 autonomous vehicles with the highest safety ratings, we need to select the vehicle names and their corresponding safety ratings from the 'auto_show' table. We can achieve this by using the SELECT statement along with the ORDER BY clause",
    sql="Here is the SQL query to answer the prompt:\n```sql\nSELECT vehicle_name, safety_rating\nFROM auto_show\nORDER BY safety_rating DESC\nLIMIT 3;\n```\n\nSql Prompt: What are the top 3 autonomous vehicles with the highest safety ratings in the 'auto_show' table?\n\nSql Context: CREATE TABLE auto_show (id INT, vehicle_name VARCHAR(50), safety_rating INT);\n\nReasoning: To find the top 3 autonomous vehicles with the highest safety ratings, we need to select the vehicle names and their corresponding safety ratings from the 'auto_show' table. We can achieve this by using the SELECT statement along with the ORDER BY clause"
), 1), (Example({'sql_prompt': 'Delete a record from the broadband_usage table', 'sql_context': 'CREATE TABLE broadband_usage (usage_id INT, subscriber_id INT, usage_start_time TIMESTAMP, usage_end_time TIMESTAMP, data_used DECIMAL(10,2));', 'sql': 'DELETE FROM broadband_usage WHERE usage_id = 11111;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: DELETE FROM broadband_usage WHERE usage_id = <specific_usage_id>;',
    sql="Sql Prompt: Delete a record from the 'broadband_usage' table based on a specific condition.\n\nSql Context: CREATE TABLE broadband_usage (usage_id INT, subscriber_id INT, usage_start_time TIMESTAMP, usage_end_time TIMESTAMP, data_used DECIMAL(10,2));\n\nReasoning: To delete a record from the 'broadband_usage' table, we can use the 'DELETE' statement followed by the 'WHERE' clause to specify the condition for deletion. Let's say we want to delete a record with a specific 'usage_id'.\n\nSql: DELETE FROM broadband_usage WHERE usage_id = <specific_usage_id>;"
), 1), (Example({'sql_prompt': 'How many recycling plants in Canada process exactly 5 types of waste?', 'sql_context': "CREATE TABLE recycling_plants (name TEXT, country TEXT, waste_types INTEGER); INSERT INTO recycling_plants (name, country, waste_types) VALUES ('Recycling Plant 1', 'Canada', 6), ('Recycling Plant 2', 'Canada', 4), ('Recycling Plant 3', 'Canada', 5), ('Recycling Plant 4', 'Canada', 5), ('Recycling Plant 5', 'Canada', 3);", 'sql': "SELECT COUNT(*) FROM recycling_plants WHERE country = 'Canada' AND waste_types = 5;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT COUNT(*) FROM recycling_plants WHERE country = 'Canada' AND waste_types = 5;",
    sql="SQL query:\n```sql\nSELECT COUNT(*) FROM recycling_plants\nWHERE country = 'Canada' AND waste_types = 5;\n```"
), 1), (Example({'sql_prompt': 'What is the total revenue for each game in the "Gaming" category?', 'sql_context': 'CREATE TABLE Games (GameID int, GameName varchar(50), Category varchar(50), Revenue decimal(10,2));', 'sql': 'SELECT Category, SUM(Revenue) OVER(PARTITION BY Category) as TotalRevenue FROM Games;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query based on the provided prompt and context:\n```sql\nSELECT SUM(Revenue) AS TotalRevenue\nFROM Games\nWHERE Category = \'Gaming\';\n```\n\n**Reasoning:** \nTo calculate the total revenue for each game in the "Gaming" category, we need to sum up the `Revenue` column for all rows where the `Category` is \'Gaming\'. This can be achieved using the `SUM` aggregate function along with a `WHERE` clause to filter the data by the specified category. The result will give us the total revenue generated by games in the "Gaming" category.',
    sql='Here is the SQL query based on the provided prompt and context:\n```sql\nSELECT SUM(Revenue) AS TotalRevenue\nFROM Games\nWHERE Category = \'Gaming\';\n```\n\n**Reasoning:** To calculate the total revenue for each game in the "Gaming" category, we need to sum up the `Revenue` column for all rows where the `Category` is \'Gaming\'. This can be achieved using the `SUM` aggregate function along with a `WHERE` clause to filter the data by the specified category. The result will give us the total revenue generated by games in the "Gaming" category.'
), 0), (Example({'sql_prompt': 'Delete all flight safety records for a specific aircraft', 'sql_context': "CREATE SCHEMA if not exists aerospace;CREATE TABLE if not exists aerospace.flight_safety (id INT, incident VARCHAR(255), incident_date DATE, aircraft_id INT);INSERT INTO aerospace.flight_safety (id, incident, incident_date, aircraft_id) VALUES (1, 'Inc1', '2017-01-01', 1), (2, 'Inc2', '2018-01-01', 1);", 'sql': 'DELETE FROM aerospace.flight_safety WHERE aircraft_id = 1;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: DELETE FROM aerospace.flight_safety WHERE aircraft_id = <specific_aircraft_id>;',
    sql="Sql Prompt: Delete all flight safety records for a specific aircraft\n\nSql Context: CREATE SCHEMA if not exists aerospace;CREATE TABLE if not exists aerospace.flight_safety (id INT, incident VARCHAR(255), incident_date DATE, aircraft_id INT);INSERT INTO aerospace.flight_safety (id, incident, incident_date, aircraft_id) VALUES (1, 'Inc1', '2017-01-01', 1), (2, 'Inc2', '2018-01-01', 1);\n\nReasoning: To delete all flight safety records for a specific aircraft, we need to use the DELETE statement in SQL. We will specify the"
), 0), (Example({'sql_prompt': 'What is the average hotel price in each city in Europe?', 'sql_context': "CREATE TABLE Hotels_Europe (id INT, name VARCHAR(50), price DECIMAL(5,2), city VARCHAR(50)); INSERT INTO Hotels_Europe (id, name, price, city) VALUES (1, 'Grand Hotel', 200.00, 'Paris'), (2, 'Hotel Colosseo', 350.00, 'Rome'), (3, 'Park Royal', 120.00, 'London'), (4, 'Hotel Versailles', 420.00, 'Paris');", 'sql': 'SELECT city, AVG(price) as avg_price FROM Hotels_Europe GROUP BY city;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT city, AVG(price) AS average_price FROM Hotels_Europe WHERE city IN (SELECT DISTINCT city FROM Hotels_Europe WHERE continent = 'Europe') GROUP BY city;",
    sql="Sql Prompt: What is the average hotel price in each city in Europe?\n\nSql Context: \n\n```sql\nCREATE TABLE Hotels_Europe (\n    id INT,\n    name VARCHAR(50),\n    price DECIMAL(5,2),\n    city VARCHAR(50)\n);\n\nINSERT INTO Hotels_Europe (id, name, price, city)\nVALUES (1, 'Grand Hotel', 200.00, 'Paris'),\n       (2, 'Hotel Colosseo', 350.00, 'Rome'),\n       (3, 'Park Royal', 120.00, 'London'),\n       (4, 'Hotel Versailles', 420.00"
), 1), (Example({'sql_prompt': 'Show companies with below average ESG scores in the education sector.', 'sql_context': "INSERT INTO companies (id, name, country, sector, ESG_score) VALUES (4, 'EdCo', 'US', 'Education', 70.0), (5, 'LearnCo', 'UK', 'Education', 80.0);", 'sql': "SELECT * FROM companies WHERE sector = 'Education' AND ESG_score < (SELECT AVG(ESG_score) FROM companies WHERE sector = 'Education');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT name, ESG_score FROM companies WHERE sector = 'Education' AND ESG_score < (SELECT AVG(ESG_score) FROM companies WHERE sector = 'Education');",
    sql="Here is the SQL query based on the given prompt and context:\n\n**SQL Prompt:** Show companies with below-average ESG scores in the education sector.\n**SQL Context:** \n```sql\nINSERT INTO companies (id, name, country, sector, ESG_score)\nVALUES (4, 'EdCo', 'US', 'Education', 70.0),\n       (5, 'LearnCo', 'UK', 'Education', 80.0);\n```\n**Reasoning:** We want to select companies from the 'companies' table where their sector is 'Education' and their ESG score is below the average ESG score of companies in the same sector. To achieve this, we use a subquery"
), 1), (Example({'sql_prompt': "Find the daily new user registrations in 'data_privacy' table for the last week?", 'sql_context': 'CREATE TABLE data_privacy (user_id INT, registration_date DATE);', 'sql': 'SELECT registration_date, COUNT(*) FROM data_privacy WHERE registration_date >= CURDATE() - INTERVAL 7 DAY GROUP BY registration_date;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to find the daily new user registrations in the 'data_privacy' table for the last week:\n```sql\nSELECT registration_date, COUNT(*) AS daily_new_users\nFROM data_privacy\nWHERE registration_date BETWEEN DATEADD(DAY, -7, CURRENT_DATE) AND CURRENT_DATE()\nGROUP BY registration_date\nORDER BY registration_date;\n```\n\nReasoning: To find the daily new user registrations for the last week, we need to filter the data based on the 'registration_date' within the last 7 days from the current date. We use the `DATEADD` function to calculate the date from 7 days ago and then use the `",
    sql="Here is the SQL query to find the daily new user registrations in the 'data_privacy' table for the last week:\n```sql\nSELECT registration_date, COUNT(*) AS daily_new_users\nFROM data_privacy\nWHERE registration_date BETWEEN DATEADD(DAY, -7, CURRENT_DATE) AND CURRENT_DATE()\nGROUP BY registration_date\nORDER BY registration_date;\n```\n\nReasoning: To find the daily new user registrations for the last week, we need to filter the data based on the 'registration_date' within the last 7 days from the current date. We use the `DATEADD` function to calculate the date from 7 days ago and then use the `"
), 0), (Example({'sql_prompt': 'Update the total number of employees in the mining industry who identify as Native Hawaiian or Pacific Islander to 350 in California.', 'sql_context': "CREATE TABLE MiningEmployees (State VARCHAR(50), EmployeeEthnicity VARCHAR(50), EmployeeCount INT); INSERT INTO MiningEmployees(State, EmployeeEthnicity, EmployeeCount) VALUES ('Texas', 'Native American or Alaska Native', 200), ('Texas', 'Hispanic', 500), ('Texas', 'Black', 300), ('California', 'Native American or Alaska Native', 100), ('California', 'Hispanic', 700), ('California', 'Black', 600);", 'sql': "UPDATE MiningEmployees SET EmployeeCount = 350 WHERE State = 'California' AND EmployeeEthnicity = 'Native Hawaiian or Pacific Islander';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: UPDATE MiningEmployees \nSET EmployeeCount = 350 \nWHERE State = 'California' AND EmployeeEthnicity = 'Native Hawaiian or Pacific Islander';",
    sql="SQL Prompt: Update the total number of employees in the mining industry who identify as Native Hawaiian or Pacific Islander to 350 in California.\n\nSQL Context: \n\n```sql\nCREATE TABLE MiningEmployees (\n    State VARCHAR(50),\n    EmployeeEthnicity VARCHAR(50),\n    EmployeeCount INT\n);\n\nINSERT INTO MiningEmployees(State, EmployeeEthnicity, EmployeeCount)\nVALUES ('Texas', 'Native American or Alaska Native', 200),\n       ('Texas', 'Hispanic', 500),\n       ('Texas', 'Black', 300),\n       ('California', 'Native American or Alaska Native', 100),\n       ('California', 'Hispanic', 700"
), 1), (Example({'sql_prompt': 'What is the maximum number of patients served by a rural health center in Europe?', 'sql_context': 'CREATE TABLE centers (id INT, name VARCHAR(50), location VARCHAR(50), patients_served INT);', 'sql': "SELECT MAX(patients_served) FROM centers WHERE location LIKE '%Europe%' AND location LIKE '%rural%';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query based on the provided SQL context and prompt:\n```sql\nSELECT MAX(patients_served) AS max_patients_served\nFROM centers\nWHERE location = 'Europe';\n```\n\n**Reasoning:** To find the maximum number of patients served by a rural health center in Europe, we need to select the maximum value of the `patients_served` column from the `centers` table where the location is 'Europe'. This can be achieved using the `MAX` aggregate function along with a `WHERE` clause to filter for centers located in Europe.",
    sql="Here is the SQL query based on the provided SQL context and prompt:\n```sql\nSELECT MAX(patients_served) AS max_patients_served\nFROM centers\nWHERE location = 'Europe';\n```\n\n**Reasoning:** To find the maximum number of patients served by a rural health center in Europe, we need to select the maximum value of the `patients_served` column from the `centers` table where the location is 'Europe'. This can be achieved using the `MAX` aggregate function along with a `WHERE` clause to filter for centers located in Europe."
), 0), (Example({'sql_prompt': 'Display the soldier names and branches from the view', 'sql_context': 'CREATE VIEW soldier_details AS SELECT id, name, branch FROM soldiers;', 'sql': 'SELECT name, branch FROM soldier_details;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query based on the provided context:\n\n```sql\nSELECT name, branch\nFROM soldier_details;\n```\n\n**Reasoning:**\n\nGiven the SQL context provided, we have a view named `soldier_details` that was created using data from the \'soldiers\' table. The view includes columns for the soldier\'s ID, name, and branch. To display the soldier names and branches, we simply need to select those columns from the view:\n\n```sql\nSELECT name, branch\nFROM soldier_details;\n```\n\nThis query will return a result set with two columns: "name" and "branch," containing the soldier\'s name and their respective branch of service.',
    sql='SELECT name, branch FROM soldier_details;'
), 1), (Example({'sql_prompt': "What is the average attendance for 'Jazz' concerts?", 'sql_context': "CREATE TABLE concerts(id INT, genre VARCHAR(255), avg_attendance FLOAT); INSERT INTO concerts (id, genre, avg_attendance) VALUES (1, 'Jazz', 200.0), (2, 'Classical', 300.0), (3, 'Rock', 500.0);", 'sql': "SELECT avg_attendance FROM concerts WHERE genre = 'Jazz';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT genre, AVG(avg_attendance) AS average_attendance FROM concerts WHERE genre = 'Jazz' GROUP BY genre;",
    sql="Sql Prompt: What is the average attendance for 'Jazz' concerts?\n\nSql Context: CREATE TABLE concerts (id INT, genre VARCHAR(255), avg_attendance FLOAT); INSERT INTO concerts (id, genre, avg_attendance) VALUES (1, 'Jazz', 200.0), (2, 'Classical', 300.0), (3, 'Rock', 500.0);\n\nReasoning: To find the average attendance for 'Jazz' concerts, we need to select the 'avg_attendance' column from the 'concerts' table where the 'genre' is 'Jazz'. We will then use the AVG() function to calculate the average of the 'avg_"
), 1), (Example({'sql_prompt': "How many astronauts are from 'Brazil'?", 'sql_context': "CREATE TABLE AstronautData (id INT, name VARCHAR(50), country VARCHAR(50), height FLOAT, weight FLOAT, blood_pressure FLOAT); INSERT INTO AstronautData (id, name, country, height, weight, blood_pressure) VALUES (1, 'John', 'USA', 180, 80, 120), (2, 'Jane', 'Canada', 170, 70, 110), (3, 'Alex', 'Brazil', 190, 90, 130), (4, 'Elena', 'Russia', 165, 60, 115);", 'sql': "SELECT COUNT(*) FROM AstronautData WHERE country = 'Brazil';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT COUNT(*) FROM AstronautData WHERE country = 'Brazil';",
    sql="Sql Prompt: How many astronauts are from 'Brazil'?\n\nSql Context: CREATE TABLE AstronautData (id INT, name VARCHAR(50), country VARCHAR(50), height FLOAT, weight FLOAT, blood_pressure FLOAT); INSERT INTO AstronautData (id, name, country, height, weight, blood_pressure) VALUES (1, 'John', 'USA', 180, 80, 120), (2, 'Jane', 'Canada', 170, 70, 110), (3, 'Alex', 'Brazil', 190, 90, 130), (4, 'Elena', 'Russia', 165,"
), 1), (Example({'sql_prompt': 'Delete all records in the "digital_divide_stats" table where the "country" is \'United States\'', 'sql_context': 'CREATE TABLE digital_divide_stats (id INT PRIMARY KEY, country VARCHAR(255), year INT, internet_users INT, total_population INT);', 'sql': "WITH deleted_data AS (DELETE FROM digital_divide_stats WHERE country = 'United States' RETURNING *) SELECT * FROM deleted_data;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: DELETE FROM digital_divide_stats WHERE country = 'United States';",
    sql='SQL Prompt: Delete all records in the "digital_divide_stats" table where the "country" is \'United States\'\n\nSQL Context: CREATE TABLE digital_divide_stats (id INT PRIMARY KEY, country VARCHAR(255), year INT, internet_users INT, total_population INT);\n\nReasoning: Let\'s think step by step in order to produce the SQL. We want to delete records where the country is \'United States\'. The correct SQL command for this is \'DELETE FROM\', followed by the table name and a condition in the WHERE clause. So, the SQL query would be:\n\nSQL: DELETE FROM digital_divide_stats WHERE country = \'United States\';'
), 1), (Example({'sql_prompt': "What is the maximum depth of marine species in the 'marine_species' table, grouped by their phylum?", 'sql_context': "CREATE TABLE marine_species (id INT, name VARCHAR(255), phylum VARCHAR(255), depth FLOAT); INSERT INTO marine_species (id, name, phylum, depth) VALUES (1, 'Pacific salmon', 'Chordata', 50.0), (2, 'Hawaiian monk seal', 'Chordata', 500.0), (3, 'Sea anemone', 'Cnidaria', 0.01);", 'sql': 'SELECT phylum, MAX(depth) AS max_depth FROM marine_species GROUP BY phylum;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT phylum, MAX(depth) AS max_depth FROM marine_species GROUP BY phylum;',
    sql="Here is the SQL query based on the provided prompt and context:\n\n```sql\nSELECT phylum, MAX(depth) AS max_depth\nFROM marine_species\nGROUP BY phylum;\n```\n\nThis query selects the maximum depth of marine species for each phylum from the 'marine_species' table. The `MAX` function is used to find the highest depth value within each group, and the `GROUP BY` clause groups the results by the 'phylum' column."
), 1), (Example({'sql_prompt': 'What is the percentage of autonomous vehicles sold in the US that are electric?', 'sql_context': 'CREATE TABLE AutonomousVehicles (Make VARCHAR(50), Model VARCHAR(50), Year INT, Country VARCHAR(50), Type VARCHAR(50), Sales INT);', 'sql': "SELECT 100.0 * SUM(CASE WHEN Type = 'Electric' THEN Sales ELSE 0 END) / SUM(Sales) AS Percentage FROM AutonomousVehicles WHERE Country = 'United States';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to answer the prompt:\n```sql\nSELECT (SUM(Sales) * 100 / (SELECT SUM(Sales) FROM AutonomousVehicles WHERE Country = 'US')) AS electric_vehicle_percentage\nFROM AutonomousVehicles\nWHERE Type = 'Electric' AND Country = 'US';\n```\n\nStep-by-step reasoning: \n1. We first filter the data to select only electric vehicles sold in the US using the `WHERE` clause. \n2. Then, we calculate the total sales of electric vehicles in the US using the `SUM` function. \n3. Next, we retrieve the total sales of all autonomous vehicles sold in the US, regardless of type, using a sub",
    sql="```sql\nSELECT (SUM(Sales) * 100 / (SELECT SUM(Sales) FROM AutonomousVehicles WHERE Country = 'US')) AS electric_vehicle_percentage\nFROM AutonomousVehicles\nWHERE Type = 'Electric' AND Country = 'US';\n```\n\nStep-by-step reasoning:\n\n1. We first filter the data to select only electric vehicles sold in the US using the `WHERE` clause.\n2. Then, we calculate the total sales of electric vehicles in the US using the `SUM` function.\n3. Next, we retrieve the total sales of all autonomous vehicles sold in the US, regardless of type, using a subquery and divide it by the total sales of electric vehicles"
), 0), (Example({'sql_prompt': 'Show the average number of streams per day for artists who have held concerts in the USA and Canada.', 'sql_context': 'CREATE TABLE music_streaming (artist_id INT, artist_name VARCHAR(100), genre VARCHAR(50), total_streams BIGINT, stream_date DATE); CREATE TABLE concert_ticket_sales (concert_id INT, artist_id INT, concert_date DATE, venue VARCHAR(100), country VARCHAR(50));', 'sql': "SELECT AVG(ms.total_streams / COUNT(DISTINCT ms.stream_date)) AS avg_daily_streams FROM music_streaming ms INNER JOIN concert_ticket_sales cts ON ms.artist_id = cts.artist_id WHERE cts.country IN ('USA', 'Canada');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query based on the provided prompt and context:\n```sql\nWITH ConcertData AS (\n    SELECT m.artist_id, COUNT(DISTINCT c.concert_id) AS concert_count\n    FROM music_streaming m\n    JOIN concert_ticket_sales c ON m.artist_id = c.artist_id\n    WHERE c.country IN ('USA', 'Canada')\n    GROUP BY m.artist_id\n),\nStreamData AS (\n    SELECT m.artist_id, SUM(m.total_streams) / COUNT(DISTINCT m.stream_date) AS avg_streams_per_day\n    FROM music_streaming m\n    JOIN ConcertData cd ON m.artist_id =",
    sql="```sql\nWITH ConcertData AS (\n    SELECT m.artist_id, COUNT(DISTINCT c.concert_id) AS concert_count\n    FROM music_streaming m\n    JOIN concert_ticket_sales c ON m.artist_id = c.artist_id\n    WHERE c.country IN ('USA', 'Canada')\n    GROUP BY m.artist_id\n),\nStreamData AS (\n    SELECT m.artist_id, SUM(m.total_streams) / COUNT(DISTINCT m.stream_date) AS avg_streams_per_day\n    FROM music_streaming m\n    JOIN ConcertData cd ON m.artist_id = cd.artist_id\n    GROUP BY m.artist_id"
), 0), (Example({'sql_prompt': 'What is the minimum number of crimes committed in each type for the past year?', 'sql_context': "CREATE TABLE crimes (crime_id INT, crime_type VARCHAR(255), committed_date DATE); INSERT INTO crimes (crime_id, crime_type, committed_date) VALUES (1, 'Theft', '2022-01-01'), (2, 'Assault', '2022-01-02'), (3, 'Theft', '2022-01-03');", 'sql': 'SELECT c.crime_type, MIN(COUNT(c.crime_id)) FROM crimes c WHERE c.committed_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY c.crime_type;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT crime_type, MIN(crime_id) AS min_crime_id FROM crimes WHERE EXTRACT(YEAR FROM committed_date) = EXTRACT(YEAR FROM CURRENT_DATE()) - 1 GROUP BY crime_type;',
    sql='Here is the SQL query based on the provided prompt and context:\n\n```sql\nSELECT crime_type, MIN(crime_id) AS min_crime_id\nFROM crimes\nWHERE EXTRACT(YEAR FROM committed_date) = EXTRACT(YEAR FROM CURRENT_DATE()) - 1\nGROUP BY crime_type;\n```\n\nReasoning: To answer the question, we need to find the minimum number of crimes committed in each type for the past year. We can achieve this by using the `MIN` function to find the minimum `crime_id` for each `crime_type`. The `WHERE` clause filters the data to only include crimes from the previous year, which is calculated by subtracting'
), 0), (Example({'sql_prompt': "Delete all marine species in the 'marine_species' table that belong to the 'Mollusca' phylum.", 'sql_context': "CREATE TABLE marine_species (id INT, name VARCHAR(255), phylum VARCHAR(255)); INSERT INTO marine_species (id, name, phylum) VALUES (1, 'Pacific salmon', 'Chordata'), (2, 'Blue whale', 'Chordata'), (3, 'Sea anemone', 'Cnidaria');", 'sql': "DELETE FROM marine_species WHERE phylum = 'Mollusca';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: DELETE FROM marine_species WHERE phylum = 'Mollusca';",
    sql="SQL Prompt: Delete all marine species in the 'marine_species' table that belong to the 'Mollusca' phylum.\n\nSQL Context: \n\n```sql\nCREATE TABLE marine_species (\n    id INT,\n    name VARCHAR(255),\n    phylum VARCHAR(255)\n);\n\nINSERT INTO marine_species (id, name, phylum)\nVALUES (1, 'Pacific salmon', 'Chordata'),\n       (2, 'Blue whale', 'Chordata'),\n       (3, 'Sea anemone', 'Cnidaria');\n```\n\nReasoning: Let's think step by step in order to produce the SQL: \n\nWe want to delete records from the 'marine_species'"
), 0), (Example({'sql_prompt': 'What is the average price of vegan menu items in the database?', 'sql_context': "CREATE TABLE menus (menu_id INT, menu_name TEXT, type TEXT, price DECIMAL); INSERT INTO menus (menu_id, menu_name, type, price) VALUES (1, 'Quinoa Salad', 'Vegetarian', 12.99), (2, 'Chicken Caesar Wrap', 'Gluten-free', 10.99), (3, 'Vegan Burger', 'Vegan', 14.99), (4, 'Falafel Wrap', 'Vegan', 9.99);", 'sql': "SELECT AVG(price) FROM menus WHERE type = 'Vegan';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT type, AVG(price) FROM menus WHERE type = 'Vegan' GROUP BY type;",
    sql="Let's think step by step in order to produce the SQL query:\n\n**Step 1:** We start by understanding the prompt. The prompt asks for the average price of vegan menu items.\n\n**Step 2:** Next, we look at the given SQL context. The 'menus' table has columns for menu ID, menu name, type (vegetarian, gluten-free, or vegan), and price.\n\n**Step 3:** To find the average price of vegan menu items, we need to filter the data by the 'Vegan' type and then calculate the average of the 'price' column.\n\n**Step 4:** Here's the SQL query that accomplishes this:\n```sql\nSELECT"
), 1), (Example({'sql_prompt': "What is the total number of military vehicles produced by company 'XYZ'?", 'sql_context': "CREATE TABLE military_vehicles (company TEXT, quantity INT, production_date DATE); INSERT INTO military_vehicles (company, quantity, production_date) VALUES ('ABC', 100, '2023-01-01'); INSERT INTO military_vehicles (company, quantity, production_date) VALUES ('XYZ', 200, '2023-02-01');", 'sql': "SELECT SUM(quantity) FROM military_vehicles WHERE company = 'XYZ';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT SUM(quantity) AS total_vehicles FROM military_vehicles WHERE company = 'XYZ';",
    sql="Sql Prompt: What is the total number of military vehicles produced by company 'XYZ'?\n\nSql Context: CREATE TABLE military_vehicles (company TEXT, quantity INT, production_date DATE); INSERT INTO military_vehicles (company, quantity, production_date) VALUES ('ABC', 100, '2023-01-01'); INSERT INTO military_vehicles (company, quantity, production_date) VALUES ('XYZ', 200, '2023-02-01');\n\nReasoning: To answer this query, we need to sum up the 'quantity' of military vehicles produced by company 'XYZ'. We can achieve this by using the SUM() function"
), 1), (Example({'sql_prompt': 'Find the supplier with the lowest average delivery time for orders in the last month.', 'sql_context': "CREATE TABLE Suppliers (SupplierID int, SupplierName varchar(50)); CREATE TABLE Products (ProductID int, ProductName varchar(50), SupplierID int); CREATE TABLE Orders (OrderID int, ProductID int, OrderDate date, DeliveryTime int); INSERT INTO Suppliers VALUES (1, 'SupplierA'), (2, 'SupplierB'); INSERT INTO Products VALUES (1, 'Organic Apples', 1), (2, 'Bananas', 2); INSERT INTO Orders VALUES (1, 1, '2022-01-01', 2), (2, 2, '2022-01-03', 3);", 'sql': 'SELECT SupplierName, AVG(DeliveryTime) as AvgDeliveryTime FROM Orders o JOIN Products p ON o.ProductID = p.ProductID JOIN Suppliers sp ON p.SupplierID = sp.SupplierID WHERE OrderDate >= DATEADD(month, -1, GETDATE()) GROUP BY SupplierName ORDER BY AvgDeliveryTime ASC;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT s.SupplierName, AVG(o.DeliveryTime) AS AvgDeliveryTime\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nJOIN Orders o ON p.ProductID = o.ProductID\nWHERE o.OrderDate >= DATEADD(MONTH, -1, GETDATE())\nGROUP BY s.SupplierName\nORDER BY AvgDeliveryTime ASC\nLIMIT 1;',
    sql='Let\'s think step by step in order to produce the SQL query:\n\n**Step 1:** We need to join the "Suppliers," "Products," and "Orders" tables based on their relationships.\n**Step 2:** Filter orders placed in the last month using the `WHERE` clause.\n**Step 3:** Group the results by supplier name to calculate the average delivery time for each supplier.\n**Step 4:** Order the results in ascending order of average delivery time to find the supplier with the lowest average delivery time.\n**Step 5:** Use the `LIMIT 1` clause to retrieve only the supplier with the lowest average delivery time.\n\nHere\'s the SQL query:\n```sql'
), 1), (Example({'sql_prompt': 'What is the maximum number of games played concurrently by a player, for each platform?', 'sql_context': "CREATE TABLE PlayerGames (PlayerID INT, Platform VARCHAR(10), MaxGames INT); INSERT INTO PlayerGames (PlayerID, Platform, MaxGames) VALUES (1, 'PC', 3);", 'sql': 'SELECT Platform, MAX(MaxGames) as MaxConcurrentGames FROM PlayerGames GROUP BY Platform;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT Platform, MAX(MaxGames) AS MaxConcurrentGames FROM PlayerGames GROUP BY Platform;',
    sql='Here is the SQL query based on the provided SQL prompt and context:\n\n```sql\nSELECT Platform, MAX(MaxGames) AS MaxConcurrentGames\nFROM PlayerGames\nGROUP BY Platform;\n```\n\nThis query selects the maximum number of games played concurrently (`MaxGames`) for each platform from the `PlayerGames` table. The `MAX` function is used to find the highest value of `MaxGames` for each group, and the `GROUP BY` clause groups the results by the `Platform` column.'
), 1), (Example({'sql_prompt': 'Which broadband subscribers have a download speed greater than 300 Mbps?', 'sql_context': 'CREATE TABLE broadband_subscribers (subscriber_id INT, download_speed FLOAT); INSERT INTO broadband_subscribers (subscriber_id, download_speed) VALUES (1, 250.6), (2, 350.8), (3, 120.9);', 'sql': 'SELECT subscriber_id FROM broadband_subscribers WHERE download_speed > 300;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT * FROM broadband_subscribers WHERE download_speed > 300;',
    sql='Sql Prompt: Which broadband subscribers have a download speed greater than 300 Mbps?\n\nSql Context: CREATE TABLE broadband_subscribers (subscriber_id INT, download_speed FLOAT); INSERT INTO broadband_subscribers (subscriber_id, download_speed) VALUES (1, 250.6), (2, 350.8), (3, 120.9);\n\nReasoning: To find the subscribers with a download speed greater than 300 Mbps, we can use a simple SQL query with a WHERE clause to filter the results based on the download_speed column.\n\nSql: SELECT * FROM broadband_subscribers WHERE download_speed > 300'
), 0), (Example({'sql_prompt': 'Which cities have a higher average temperature in the "Finance" scheme than in the "Mitigation" scheme?', 'sql_context': "CREATE TABLE Mitigation (city VARCHAR(255), avg_temp FLOAT); INSERT INTO Mitigation VALUES ('CityA', 20.5), ('CityB', 22.3); CREATE TABLE Finance (city VARCHAR(255), avg_temp FLOAT); INSERT INTO Finance VALUES ('CityA', 23.0), ('CityX', 23.5);", 'sql': 'SELECT Finance.city FROM Finance, Mitigation WHERE Finance.city = Mitigation.city AND Finance.avg_temp > Mitigation.avg_temp'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT m.city, f.avg_temp\nFROM Mitigation m\nJOIN Finance f ON m.city = f.city\nWHERE f.avg_temp > m.avg_temp;',
    sql='Sql Prompt: Which cities have a higher average temperature in the "Finance" scheme than in the "Mitigation" scheme?\n\nSql Context: \n\n```sql\nCREATE TABLE Mitigation (\n    city VARCHAR(255),\n    avg_temp FLOAT\n);\n\nINSERT INTO Mitigation VALUES (\'CityA\', 20.5), (\'CityB\', 22.3);\n\nCREATE TABLE Finance (\n    city VARCHAR(255),\n    avg_temp FLOAT\n);\n\nINSERT INTO Finance VALUES (\'CityA\', 23.0), (\'CityX\', 23.5);\n```\n\nReasoning: To answer this query, we need to compare the average temperatures of cities'
), 1), (Example({'sql_prompt': "What is the average playtime, in hours, for players from Germany, for games in the 'Simulation' genre?", 'sql_context': 'CREATE TABLE games (game_id INT, game_genre VARCHAR(255), player_id INT, playtime_mins INT); CREATE TABLE players (player_id INT, player_country VARCHAR(255));', 'sql': "SELECT AVG(playtime_mins / 60) FROM games JOIN players ON games.player_id = players.player_id WHERE players.player_country = 'Germany' AND game_genre = 'Simulation';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT AVG(playtime_mins / 60) AS avg_playtime_hours FROM games JOIN players ON games.player_id = players.player_id WHERE players.player_country = 'Germany' AND games.game_genre = 'Simulation';",
    sql="Let's think step by step in order to produce the SQL query:\n\n1. We need to join the `games` and `players` tables on the `player_id` column to link game playtime data with player country information.\n2. We then filter the data to include only players from Germany (`player_country = 'Germany'`).\n3. We further filter the data to include only games of the 'Simulation' genre (`game_genre = 'Simulation'`).\n4. To calculate the average playtime in hours, we divide the `playtime_mins` column by 60 to convert minutes to hours and use the `AVG` function to find the average.\n\nSql: ```sql\nSELECT"
), 1), (Example({'sql_prompt': 'Show the sum of investments by year and industry', 'sql_context': "CREATE TABLE investments (id INT, investment_year INT, industry VARCHAR(255), investment_amount DECIMAL(10,2)); INSERT INTO investments (id, investment_year, industry, investment_amount) VALUES (1, 2020, 'Tech', 50000.00), (2, 2019, 'Biotech', 20000.00), (3, 2020, 'Tech', 75000.00);", 'sql': 'SELECT investment_year, industry, SUM(investment_amount) as total_investments FROM investments GROUP BY investment_year, industry;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT investment_year, industry, SUM(investment_amount) AS total_investment FROM investments GROUP BY investment_year, industry;',
    sql="Sql Prompt: Show the sum of investments by year and industry\n\nSql Context: CREATE TABLE investments (id INT, investment_year INT, industry VARCHAR(255), investment_amount DECIMAL(10,2)); INSERT INTO investments (id, investment_year, industry, investment_amount) VALUES (1, 2020, 'Tech', 50000.00), (2, 2019, 'Biotech', 20000.00), (3, 2020, 'Tech', 75000.00);\n\nReasoning: To answer this query, we need to group the data by both investment"
), 1), (Example({'sql_prompt': 'What is the total amount of funds allocated for each type of disaster?', 'sql_context': "CREATE TABLE DisasterFunds (DisasterType VARCHAR(20), FundID INT, AllocatedAmount DECIMAL(10,2)); INSERT INTO DisasterFunds (DisasterType, FundID, AllocatedAmount) VALUES ('Earthquake', 1, 5000.00), ('Flood', 2, 7500.00), ('Hurricane', 3, 10000.00), ('Tornado', 4, 12500.00), ('Volcano', 5, 15000.00);", 'sql': 'SELECT DisasterType, SUM(AllocatedAmount) as TotalFunds FROM DisasterFunds GROUP BY DisasterType;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT DisasterType, SUM(AllocatedAmount) AS TotalFunds from DisasterFunds GROUP BY DisasterType;',
    sql='Here is the SQL query based on the provided SQL prompt and context:\n\n```sql\nSELECT DisasterType, SUM(AllocatedAmount) AS TotalFunds\nFROM DisasterFunds\nGROUP BY DisasterType;\n```\n\nThis query selects the `DisasterType` column and calculates the sum of the `AllocatedAmount` for each unique disaster type using the `SUM` function. The `GROUP BY` clause groups the results by `DisasterType`, so you get the total amount of funds allocated for each type of disaster.'
), 1), (Example({'sql_prompt': 'What is the market share of Hotel X in terms of revenue generated by hotels in New York City?', 'sql_context': "CREATE TABLE hotels (hotel_id INT, hotel_name TEXT, city TEXT, revenue FLOAT); INSERT INTO hotels (hotel_id, hotel_name, city, revenue) VALUES (1, 'Hotel X', 'New York City', 1000000), (2, 'Hotel Y', 'New York City', 800000), (3, 'Hotel Z', 'New York City', 700000);", 'sql': "SELECT (hotels.revenue / (SELECT SUM(revenue) FROM hotels WHERE city = 'New York City') * 100) as market_share FROM hotels WHERE hotel_name = 'Hotel X';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT hotel_name, city, revenue, (revenue / SUM(revenue) OVER (WHERE city = 'New York City')) * 100 AS market_share FROM hotels WHERE city = 'New York City';",
    sql="Here is the SQL query based on the provided prompt and context:\n\n**SQL Prompt:** What is the market share of Hotel X in terms of revenue generated by hotels in New York City?\n**SQL Context:** \n```sql\nCREATE TABLE hotels (\n    hotel_id INT,\n    hotel_name TEXT,\n    city TEXT,\n    revenue FLOAT\n);\nINSERT INTO hotels (hotel_id, hotel_name, city, revenue)\nVALUES (1, 'Hotel X', 'New York City', 1000000),\n       (2, 'Hotel Y', 'New York City', 800000),\n       (3, 'Hotel Z', 'New York City', 7"
), 1), (Example({'sql_prompt': "How many vehicles of type 'Trolleybus' are due for maintenance in the next 30 days?", 'sql_context': "CREATE TABLE vehicles (id INT, vehicle_type VARCHAR(255), model_year INT, last_maintenance_date DATE, next_maintenance_date DATE); INSERT INTO vehicles (id, vehicle_type, model_year, last_maintenance_date, next_maintenance_date) VALUES (2004, 'Trolleybus', 2020, '2022-04-20', '2022-07-20'), (2005, 'Tram', 2019, '2022-05-15', '2022-11-15');", 'sql': "SELECT vehicle_type, TIMESTAMPDIFF(DAY, CURDATE(), next_maintenance_date) as days_until_next_maintenance FROM vehicles WHERE vehicle_type = 'Trolleybus' HAVING days_until_next_maintenance <= 30;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT COUNT(*) FROM vehicles WHERE vehicle_type = 'Trolleybus' AND next_maintenance_date BETWEEN DATEADD(DAY, 1, GETDATE()) AND DATEADD(DAY, 30, GETDATE());",
    sql="Let's think step by step in order to produce the SQL query.\n\n1. We need to select the count of vehicles that are due for maintenance in the next 30 days.\n2. We should filter the data based on the `vehicle_type` 'Trolleybus'.\n3. We calculate the date range for the next 30 days from the current date using the `DATEADD` function.\n4. We use the `BETWEEN` clause to filter rows where the `next_maintenance_date` falls within this date range.\n\nSql: ```sql\nSELECT COUNT(*)\nFROM vehicles\nWHERE vehicle_type = 'Trolleybus'\n  AND next_maintenance_date BETWEEN DATEADD"
), 0), (Example({'sql_prompt': "Insert a new row into the 'startups' table for 'Health Startup 5', founded in '2022-03-15' by 'Middle Eastern' founder, with a funding amount of $7,500,000", 'sql_context': 'CREATE TABLE startups (id INT, name TEXT, industry TEXT, founding_date DATE, raised_funding FLOAT, founder_race TEXT);', 'sql': "INSERT INTO startups (name, industry, founding_date, raised_funding, founder_race) VALUES ('Health Startup 5', 'Healthcare', '2022-03-15', 7500000.00, 'Middle Eastern');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: INSERT INTO startups (name, industry, founding_date, raised_funding, founder_race) VALUES ('Health Startup 5', 'Healthcare', '2022-03-15', 7500000.0, 'Middle Eastern');",
    sql="Sql Prompt: Insert a new row into the 'startups' table for 'Health Startup 5', founded on '2022-03-15' by a 'Middle Eastern' founder, with a funding amount of $7,500,000.\n\nSql Context: CREATE TABLE startups (id INT, name TEXT, industry TEXT, founding_date DATE, raised_funding FLOAT, founder_race TEXT);\n\nReasoning: We need to insert a new row into the 'startups' table with the provided details. The SQL INSERT INTO statement is used to add new records to a table. The values for each column are specified in the VALUES clause.\n\nSql: INSERT INTO startups"
), 0), (Example({'sql_prompt': 'How many mental health parity complaints were filed in the last 12 months by state?', 'sql_context': "CREATE TABLE mental_health_parity_complaints (complaint_id INT, complaint_date DATE, state VARCHAR(20)); INSERT INTO mental_health_parity_complaints (complaint_id, complaint_date, state) VALUES (1, '2021-01-01', 'California'), (2, '2021-03-15', 'New York'), (3, '2020-12-31', 'Texas');", 'sql': 'SELECT state, COUNT(*) as num_complaints FROM mental_health_parity_complaints WHERE complaint_date >= DATE_SUB(CURRENT_DATE, INTERVAL 12 MONTH) GROUP BY state;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT state, COUNT(*) AS complaint_count\nFROM mental_health_parity_complaints\nWHERE complaint_date >= DATEADD(MONTH, -12, CURRENT_DATE)\nGROUP BY state;',
    sql='Here is the SQL query based on the provided SQL prompt and context:\n\n```sql\nSELECT state, COUNT(*) AS complaint_count\nFROM mental_health_parity_complaints\nWHERE complaint_date >= DATEADD(MONTH, -12, CURRENT_DATE())\nGROUP BY state;\n```\n\nThis query selects the `state` column and calculates the count of complaints (`complaint_count`) from the `mental_health_parity_complaints` table where the `complaint_date` is within the last 12 months from the current date. The results are then grouped by state.'
), 1), (Example({'sql_prompt': 'Which chemical plants have exceeded the maximum allowed emission limit in the last year?', 'sql_context': "CREATE TABLE plants (plant_id INT, plant_name VARCHAR(50)); CREATE TABLE emissions (plant_id INT, emission_level INT, emission_date DATE); INSERT INTO plants (plant_id, plant_name) VALUES (1, 'Plant A'), (2, 'Plant B'); INSERT INTO emissions (plant_id, emission_level, emission_date) VALUES (1, 500, '2022-01-01'), (2, 450, '2022-01-01');", 'sql': 'SELECT plants.plant_name FROM plants INNER JOIN emissions ON plants.plant_id = emissions.plant_id WHERE emissions.emission_level > (SELECT MAX(emission_limit) FROM allowed_emissions) AND emissions.emission_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT p.plant_name, MAX(e.emission_level) AS max_emission\nFROM plants p\nJOIN emissions e ON p.plant_id = e.plant_id\nWHERE e.emission_date BETWEEN '2023-01-01' AND '2023-12-31'\nGROUP BY p.plant_name\nHAVING max_emission > 500;",
    sql="Here is the SQL query based on the provided prompt and context:\n\n**SQL Prompt:** Which chemical plants have exceeded the maximum allowed emission limit in the last year?\n**SQL Context:** \n```sql\nCREATE TABLE plants (\n    plant_id INT,\n    plant_name VARCHAR(50)\n);\n\nCREATE TABLE emissions (\n    plant_id INT,\n    emission_level INT,\n    emission_date DATE\n);\n\nINSERT INTO plants (plant_id, plant_name) VALUES\n    (1, 'Plant A'),\n    (2, 'Plant B');\n\nINSERT INTO emissions (plant_id, emission_level, emission_date) VALUES\n    (1, 500, '"
), 1), (Example({'sql_prompt': 'What is the total duration played for each player?', 'sql_context': "CREATE TABLE PlayerGame (PlayerID INT, GameID INT, Played DATE, StartTime TIMESTAMP, EndTime TIMESTAMP); INSERT INTO PlayerGame (PlayerID, GameID, Played, StartTime, EndTime) VALUES (1, 1, '2022-01-01', '2022-01-01 10:00:00', '2022-01-01 12:00:00'), (2, 2, '2022-01-02', '2022-01-02 14:00:00', '2022-01-02 16:00:00'), (3, 1, '2022-01-03', '2022-01-03 10:00:00', '2022-01-03 11:00:00'), (4, 3, '2022-01-04', '2022-01-04 18:00:00', '2022-01-04 19:00:00');", 'sql': 'SELECT PlayerID, SUM(TIMESTAMPDIFF(MINUTE, StartTime, EndTime)) FROM PlayerGame GROUP BY PlayerID;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT PlayerID, SUM(EXTRACT(EPOCH FROM (EndTime - StartTime))) as total_duration_played FROM PlayerGame GROUP BY PlayerID;',
    sql="Let's think step by step in order to produce the SQL query.\n\nGiven the prompt and context:\n\n**Sql Prompt:** What is the total duration played for each player?\n\n**Sql Context:** The provided SQL context includes a table named `PlayerGame` with columns for PlayerID, GameID, Played date, StartTime, and EndTime. The goal is to calculate the total duration played by each player.\n\n**Reasoning:** To calculate the total duration played for each player, we need to find the time difference between the `EndTime` and `StartTime` for each game played by a player and then sum these durations. We can use the `EXTRACT` function to get the time difference in epochs,"
), 1), (Example({'sql_prompt': 'What is the percentage of legal technology patents granted to applicants in California since 2010?', 'sql_context': 'CREATE TABLE legal_technology_patents (patent_id INT, grant_date DATE, state VARCHAR(20));', 'sql': "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM legal_technology_patents WHERE grant_date >= '2010-01-01')) AS percentage FROM legal_technology_patents WHERE state = 'California';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to answer the prompt:\n```sql\nSELECT state, COUNT(*) AS total_patents\nFROM legal_technology_patents\nWHERE EXTRACT(YEAR FROM grant_date) >= 2010 AND state = 'California'\nGROUP BY state;\n```\n\nThis query filters the `legal_technology_patents` table to include only those patents granted since 2010 and with the state set to 'California'. It then groups the results by state and calculates the count of patents for California. \n\nTo calculate the percentage, we can use the following formula:\n```sql\n(total_california_patents / total_all_patents) *",
    sql="Here is the SQL query to answer the prompt: \n\n```sql\nSELECT state,\n       COUNT(*) AS total_patents\nFROM legal_technology_patents\nWHERE EXTRACT(YEAR FROM grant_date) >= 2010\n  AND state = 'California'\nGROUP BY state;\n```\n\nThis query filters the `legal_technology_patents` table to include only those patents granted since 2010 and with the state set to 'California'. It then groups the results by state and calculates the count of patents for California. \n\nTo calculate the percentage, we can use the following formula: \n\n```sql\n(total_california_patents / total_all_"
), 0), (Example({'sql_prompt': "What is the total quantity of menu items sold in the 'Appetizers' category from the 'Asian' cuisine type?", 'sql_context': "CREATE TABLE menu (menu_id INT, menu_name VARCHAR(50), category VARCHAR(50), cuisine VARCHAR(50), quantity_sold INT, price DECIMAL(5,2), month_sold INT); INSERT INTO menu (menu_id, menu_name, category, cuisine, quantity_sold, price, month_sold) VALUES (12, 'Spring Rolls', 'Appetizers', 'Asian', 30, 4.99, 1), (13, 'Edamame', 'Appetizers', 'Asian', 40, 3.99, 1);", 'sql': "SELECT SUM(quantity_sold) FROM menu WHERE category = 'Appetizers' AND cuisine = 'Asian';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT SUM(quantity_sold) AS total_quantity_sold FROM menu WHERE category = 'Appetizers' AND cuisine = 'Asian';",
    sql="Sql Prompt: What is the total quantity of menu items sold in the 'Appetizers' category from the 'Asian' cuisine type?\n\nSql Context: CREATE TABLE menu (menu_id INT, menu_name VARCHAR(50), category VARCHAR(50), cuisine VARCHAR(50), quantity_sold INT, price DECIMAL(5,2), month_sold INT); INSERT INTO menu (menu_id, menu_name, category, cuisine, quantity_sold, price, month_sold) VALUES (12, 'Spring Rolls', 'Appetizers', 'Asian', 30, 4.99, 1), (13, 'Edamame', 'Appetizers',"
), 1), (Example({'sql_prompt': 'How many volunteers signed up in each region in 2021?', 'sql_context': "CREATE TABLE volunteers (id INT, name TEXT, region TEXT, signup_date DATE); INSERT INTO volunteers (id, name, region, signup_date) VALUES (1, 'Alice', 'North', '2021-02-03'), (2, 'Bob', 'South', '2021-05-05'), (3, 'Charlie', 'East', '2020-12-12');", 'sql': 'SELECT region, COUNT(*) FROM volunteers WHERE YEAR(signup_date) = 2021 GROUP BY region;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT region, COUNT(*) AS volunteer_count FROM volunteers WHERE EXTRACT(YEAR FROM signup_date) = 2021 GROUP BY region;',
    sql="Let's think step by step in order to produce the SQL query.\n\nGiven the prompt and context:\n\n**Sql Prompt:** How many volunteers signed up in each region in 2021?\n**Sql Context:** CREATE TABLE volunteers (id INT, name TEXT, region TEXT, signup_date DATE); INSERT INTO volunteers (id, name, region, signup_date) VALUES (1, 'Alice', 'North', '2021-02-03'), (2, 'Bob', 'South', '2021-05-05'), (3, 'Charlie', 'East', '2020-12-12');\n\n**Reasoning:**"
), 1), (Example({'sql_prompt': 'What is the total distance traveled for all buses in the London transit system in the past week?', 'sql_context': 'CREATE TABLE london_buses (bus_id INT, daily_distance FLOAT, date DATE);', 'sql': 'SELECT SUM(daily_distance) FROM london_buses WHERE date >= DATE_SUB(NOW(), INTERVAL 1 WEEK);'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query based on the provided prompt and context:\n```sql\nSELECT SUM(daily_distance) AS total_distance\nFROM london_buses\nWHERE date BETWEEN DATEADD(DAY, -7, CURRENT_DATE) AND CURRENT_DATE;\n```\n\n**Reasoning:**\nTo calculate the total distance traveled by all buses in the London transit system for the past week, we need to sum up the `daily_distance` values from the `london_buses` table. We use the `DATEADD` function to subtract 7 days from the current date to find the starting date of the past week. Then, we use a `BETWEEN` clause to select rows with dates within that',
    sql='```sql\nSELECT SUM(daily_distance) AS total_distance\nFROM london_buses\nWHERE date BETWEEN DATEADD(DAY, -7, CURRENT_DATE()) AND CURRENT_DATE();\n```\n\n**Reasoning:** To calculate the total distance traveled by all buses in the London transit system for the past week, we need to sum up the `daily_distance` values from the `london_buses` table. We use the `DATEADD` function to subtract 7 days from the current date to find the starting date of the past week. Then, we use a `BETWEEN` clause to select rows with dates within that range, ensuring we cover the entire past week. The `SUM` function'
), 1), (Example({'sql_prompt': "List all suppliers who provide products to 'Organic Foods' store in the 'StoreSuppliers' table", 'sql_context': "CREATE TABLE StoreSuppliers (store VARCHAR(255), supplier VARCHAR(255)); INSERT INTO StoreSuppliers (store, supplier) VALUES ('Organic Foods', 'Supplier A'), ('Organic Foods', 'Supplier B'), ('Health Foods', 'Supplier C');", 'sql': "SELECT supplier FROM StoreSuppliers WHERE store = 'Organic Foods';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT DISTINCT supplier FROM StoreSuppliers WHERE store = 'Organic Foods';",
    sql="Sql Prompt: List all suppliers who provide products to 'Organic Foods' store in the 'StoreSuppliers' table.\n\nSql Context: CREATE TABLE StoreSuppliers (store VARCHAR(255), supplier VARCHAR(255)); INSERT INTO StoreSuppliers (store, supplier) VALUES ('Organic Foods', 'Supplier A'), ('Organic Foods', 'Supplier B'), ('Health Foods', 'Supplier C');\n\nReasoning: We want to find all distinct suppliers that are associated with the store 'Organic Foods'. To do this, we can use a simple SELECT query with the DISTINCT keyword to remove any duplicate supplier entries. The WHERE clause is used to filter the results and only include rows where the store name is"
), 0), (Example({'sql_prompt': 'What is the percentage of total humanitarian aid spent on education in each world region?', 'sql_context': "CREATE TABLE humanitarian_aid (id INT, region TEXT, category TEXT, amount FLOAT); INSERT INTO humanitarian_aid (id, region, category, amount) VALUES (1, 'Africa', 'Education', 500), (2, 'Asia', 'Health', 750), (3, 'Africa', 'Health', 250);", 'sql': "SELECT region, (SUM(case when category = 'Education' then amount else 0 end) / SUM(amount)) * 100 as education_percentage FROM humanitarian_aid GROUP BY region;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT region, \n           SUM(amount) OVER (PARTITION BY region) AS total_aid, \n           SUM(CASE WHEN category = 'Education' THEN amount ELSE 0 END) OVER (PARTITION BY region) AS education_aid, \n           (SUM(CASE WHEN category = 'Education' THEN amount ELSE 0 END) OVER (PARTITION BY region)) / (SUM(amount) OVER (PARTITION BY region)) * 100 AS percentage_education_aid\n      FROM humanitarian_aid;",
    sql="Sql Prompt: What is the percentage of total humanitarian aid spent on education in each world region?\n\nSql Context: CREATE TABLE humanitarian_aid (id INT, region TEXT, category TEXT, amount FLOAT); INSERT INTO humanitarian_aid (id, region, category, amount) VALUES (1, 'Africa', 'Education', 500), (2, 'Asia', 'Health', 750), (3, 'Africa', 'Health', 250);\n\nReasoning: Let's think step by step in order to produce the SQL query. The goal is to calculate the percentage of humanitarian aid spent on education for each region. Here are the steps:\n\n1. We need to sum up the total"
), 1)]