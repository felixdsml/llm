[(Example({'sql_prompt': 'Delete records with sales amount over $50,000 in the MilitaryEquipmentSales table', 'sql_context': "CREATE TABLE MilitaryEquipmentSales (id INT, equipment_name VARCHAR(50), sale_amount INT, sale_date DATE); INSERT INTO MilitaryEquipmentSales (id, equipment_name, sale_amount, sale_date) VALUES (1, 'Fighter Jet', 45000, '2021-01-01'), (2, 'Tank', 75000, '2021-02-01');", 'sql': 'DELETE FROM MilitaryEquipmentSales WHERE sale_amount > 50000;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Write the SQL query to delete records with sales amount over $50,000 from the MilitaryEquipmentSales table.\n\n```sql\nDELETE FROM MilitaryEquipmentSales WHERE sale_amount > 50000;\n```\n\nThis query will remove all rows in the MilitaryEquipmentSales table where the sale_amount column value is greater than 50,000.',
    sql="Here is the completed signature:\n\nSql Prompt: Delete records with sales amount over $50,000 in the MilitaryEquipmentSales table.\n\nSql Context: CREATE TABLE MilitaryEquipmentSales (id INT, equipment_name VARCHAR(50), sale_amount INT, sale_date DATE); INSERT INTO MilitaryEquipmentSales (id, equipment_name, sale_amount, sale_date) VALUES (1, 'Fighter Jet', 45000, '2021-01-01'), (2, 'Tank', 75000, '2021-0"
), 1), (Example({'sql_prompt': 'What is the average number of visitor reviews for heritage sites in each category?', 'sql_context': "CREATE TABLE HeritageSitesReviews (ID INT, SiteName VARCHAR(100), Category VARCHAR(50), Reviews INT); INSERT INTO HeritageSitesReviews (ID, SiteName, Category, Reviews) VALUES (1, 'Machu Picchu', 'Archaeological', 5000); INSERT INTO HeritageSitesReviews (ID, SiteName, Category, Reviews) VALUES (2, 'Taj Mahal', 'Architectural', 8000);", 'sql': 'SELECT Category, AVG(Reviews) OVER (PARTITION BY Category) AS AvgReviews FROM HeritageSitesReviews;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the average number of visitor reviews for heritage sites in each category, we can use the SQL `GROUP BY` and `AVG()` functions. Here's how you could write the query:\n\n```sql\nSELECT Category, AVG(Reviews) AS Average_Reviews\nFROM HeritageSitesReviews\nGROUP BY Category;\n```\n\nThis query will group all the records by their category and then calculate the average number of reviews for each category. The result will be a list of categories along with their corresponding average review count.",
    sql="Here is the completed signature:\n\nSql Prompt: What is the average number of visitor reviews for heritage sites in each category?\n\nSql Context: CREATE TABLE HeritageSitesReviews (ID INT, SiteName VARCHAR(100), Category VARCHAR(50), Reviews INT); INSERT INTO HeritageSitesReviews (ID, SiteName, Category, Reviews) VALUES (1, 'Machu Picchu', 'Archaeological', 5000); INSERT INTO HeritageSitesReviews (ID, SiteName, Category, Reviews) VALUES (2, 'Taj Mahal', 'Architectural', 8000);"
), 1), (Example({'sql_prompt': 'What is the total revenue from ads targeting users interested in veganism in Q3 2022?', 'sql_context': 'CREATE TABLE ads (id INT, user INT, platform VARCHAR(50), target VARCHAR(50), start_date DATE, end_date DATE, revenue DECIMAL(10, 2));', 'sql': "SELECT SUM(revenue) FROM ads WHERE target = 'veganism' AND platform IN ('Facebook', 'Instagram') AND start_date BETWEEN '2022-07-01' AND '2022-09-30';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="answer the question. First, we need to filter the ads that are targeted towards users interested in veganism and fall within Q3 of 2022. Q3 spans from July 1st to September 30th, so we can use these dates as a range for the start_date and end_date columns.\n\nNext, we need to sum up the revenue for these ads to get the total revenue. Here's the SQL query that accomplishes this:\n\n```sql\nSELECT SUM(revenue) AS total_revenue\nFROM ads\nWHERE target = 'veganism' AND start_date BETWEEN '2022-07-0",
    sql="Here is the completed signature for the second question:\n\nSql Prompt: What is the total revenue from ads targeting users interested in veganism in Q3 2022?\n\nSql Context: CREATE TABLE ads (id INT, user INT, platform VARCHAR(50), target VARCHAR(50), start_date DATE, end_date DATE, revenue DECIMAL(10, 2));\n\nReasoning: Let's think step by step in order to answer the question. First, we need to filter the ads that are targeted towards users interested in veganism and fall within Q3 of 2022. Q3 spans from July"
), 1), (Example({'sql_prompt': 'What is the minimum duration of workouts for members who joined in 2019, grouped by gender?', 'sql_context': 'CREATE TABLE Workout (WorkoutID INT PRIMARY KEY, MemberID INT, Duration INT, Date DATE); CREATE TABLE Member (MemberID INT PRIMARY KEY, Age INT, Gender VARCHAR(10), MembershipStart DATE);', 'sql': "SELECT Member.Gender, MIN(Workout.Duration) FROM Workout INNER JOIN Member ON Workout.MemberID = Member.MemberID WHERE Member.MembershipStart BETWEEN '2019-01-01' AND '2019-12-31' GROUP BY Member.Gender;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To answer the question, we first need to join the `Workout` and `Member` tables on the `MemberID`. Then, we filter for members who joined in 2019. After that, we group by gender and find the minimum workout duration for each gender. Here's the SQL query:\n\n```sql\nSELECT Gender, MIN(Duration) AS Min_Workout_Duration\nFROM Workout\nJOIN Member ON Workout.MemberID = Member.MemberID\nWHERE MembershipStart BETWEEN '2019-01-01' AND '2019-12-31'\nGROUP BY Gender;\n```",
    sql="Here is the completed signature for the second question:\n\nSql Prompt: What is the minimum duration of workouts for members who joined in 2019, grouped by gender?\n\nSql Context: CREATE TABLE Workout (WorkoutID INT PRIMARY KEY, MemberID INT, Duration INT, Date DATE); CREATE TABLE Member (MemberID INT PRIMARY KEY, Age INT, Gender VARCHAR(10), MembershipStart DATE);\n\nReasoning: Let's think step by step in order to To answer the question, we first need to join the `Workout` and `Member` tables on the `MemberID`. Then, we filter for"
), 1), (Example({'sql_prompt': 'How many employees were hired in each month of 2022?', 'sql_context': "CREATE TABLE Employees (EmployeeID INT, HireDate DATE); INSERT INTO Employees (EmployeeID, HireDate) VALUES (1, '2022-01-15'); INSERT INTO Employees (EmployeeID, HireDate) VALUES (2, '2022-02-01');", 'sql': "SELECT EXTRACT(MONTH FROM HireDate) AS Month, COUNT(*) AS NumberOfHires FROM Employees WHERE HireDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY Month;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='answer the given SQL prompts:\n\n1. The provided SQL query is calculating the rank of policies based on the number of incidents they have had in the Asia region, ordered from highest to lowest. It does this by creating a subquery that counts the number of incidents for each policy type in the \'incidents\' table, joining it with the \'policies\' table on the date and type fields, and then ordering the results by incident count.\n\n2. The SQL query provided answers the question about how many students in the "Lifelong Learning" program have submitted an assignment in the past week. It does this by selecting the count of rows from the \'lifelong_learning_students\' table where the',
    sql="Here is the signature for the Text-to-SQL generation task:\n\n**Sql Prompt:** List the number of employees hired each month in 2022.\n\n**Sql Context:** CREATE TABLE Employees (EmployeeID INT, HireDate DATE); INSERT INTO Employees (EmployeeID, HireDate) VALUES (1, '2022-01-15'); INSERT INTO Employees (EmployeeID, HireDate) VALUES (2, '2022-02-01');\n\n**Reasoning:** Let's think step by step in order to answer the given SQL prompt"
), 1), (Example({'sql_prompt': 'What is the maximum quantity of a single organic product delivered in the DELIVERY_RECORDS table?', 'sql_context': 'CREATE TABLE DELIVERY_RECORDS (id INT, supplier_id INT, product_id INT, is_organic BOOLEAN, quantity INT); INSERT INTO DELIVERY_RECORDS (id, supplier_id, product_id, is_organic, quantity) VALUES (1, 1, 1, true, 50), (2, 2, 2, true, 30);', 'sql': 'SELECT MAX(quantity) FROM DELIVERY_RECORDS WHERE is_organic = true;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="find the maximum quantity of a single organic product delivered. First, we need to filter out only the organic products from the DELIVERY_RECORDS table. Then, we can use the MAX function to find the maximum quantity for each product_id and finally select the maximum value from those results. Here's the SQL query:\n\n```sql\nSELECT MAX(quantity) AS max_quantity\nFROM (\n    SELECT product_id, MAX(quantity) as max_quantity\n    FROM DELIVERY_RECORDS\n    WHERE is_organic = true\n    GROUP BY product_id\n) AS subquery;\n```\n\nThis query first",
    sql="Here's the completed signature for the Text-to-SQL generation task:\n\nSql Prompt: What is the maximum quantity of a single organic product delivered in the DELIVERY_RECORDS table?\n\nSql Context: CREATE TABLE DELIVERY_RECORDS (id INT, supplier_id INT, product_id INT, is_organic BOOLEAN, quantity INT); INSERT INTO DELIVERY_RECORDS (id, supplier_id, product_id, is_organic, quantity) VALUES (1, 1, 1, true, 50), (2, 2, 2, true, 30);"
), 1), (Example({'sql_prompt': 'Update the description of a sustainable urbanism initiative in the sustainable_urbanism_initiatives table', 'sql_context': "CREATE TABLE public.sustainable_urbanism_initiatives (id SERIAL PRIMARY KEY, initiative_name VARCHAR(255), initiative_description TEXT, city_name VARCHAR(255), state_name VARCHAR(255)); INSERT INTO public.sustainable_urbanism_initiatives (initiative_name, initiative_description, city_name, state_name) VALUES ('Green City Program', 'Promotes green spaces and sustainable transportation options in urban areas', 'Portland', 'Oregon'), ('EcoDistricts Initiative', 'Encourages sustainable community development in city neighborhoods', 'Vancouver', 'British Columbia');", 'sql': "WITH updated_initiative AS (UPDATE public.sustainable_urbanism_initiatives SET initiative_description = 'Promotes green spaces, sustainable transportation, and energy-efficient buildings in urban areas' WHERE initiative_name = 'Green City Program' RETURNING *) INSERT INTO public.sustainable_urbanism_initiatives (initiative_name, initiative_description, city_name, state_name) SELECT initiative_name, initiative_description, city_name, state_name FROM updated_initiative;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Update the description of a sustainable urbanism initiative in the `sustainable_urbanism_initiatives` table.\n\nTo update the description of a specific sustainable urbanism initiative, we first need to identify the ID of that initiative. For this example, let's assume we want to update the description for the 'Green City Program'.\n\nHere is the SQL command to update the description:\n\n```sql\nUPDATE public.sustainable_urbanism_initiatives\nSET initiative_description = 'New Description of Green City Program'\nWHERE initiative_name = 'Green City Program';\n```\n\nThis command will search for the row with `initiative_name` equal",
    sql="Here is the completed signature:\n\nSql Prompt: Update the description of a sustainable urbanism initiative in the sustainable_urbanism_initiatives table.\n\nSql Context: CREATE TABLE public.sustainable_urbanism_initiatives (id SERIAL PRIMARY KEY, initiative_name VARCHAR(255), initiative_description TEXT, city_name VARCHAR(255), state_name VARCHAR(255));\nINSERT INTO public.sustainable_urbanism_initiatives (initiative_name, initiative_description, city_name, state_name) VALUES ('Green City Program', 'Promotes green spaces and sustainable transportation"
), 0), (Example({'sql_prompt': 'Calculate the year-over-year revenue growth for each restaurant.', 'sql_context': "CREATE TABLE restaurants (restaurant_id INT, restaurant_name VARCHAR(50), city VARCHAR(50), state VARCHAR(50), revenue FLOAT, year INT); INSERT INTO restaurants (restaurant_id, restaurant_name, city, state, revenue, year) VALUES (1, 'Restaurant A', 'City A', 'State A', 123456.78, 2021);", 'sql': 'SELECT restaurant_name, (revenue - LAG(revenue) OVER (PARTITION BY restaurant_name ORDER BY year)) / ABS(LAG(revenue) OVER (PARTITION BY restaurant_name ORDER BY year)) as revenue_growth FROM restaurants;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Calculate the year-over-year revenue growth for each restaurant by comparing the current year's revenue with the previous year's revenue and calculating the percentage difference. Here is the SQL query:\n\n```sql\nWITH previous_year_revenue AS (\n    SELECT restaurant_id, year as prev_year, revenue\n    FROM restaurants\n    WHERE year = 2020\n)\n\nSELECT\n    r.restaurant_id,\n    r.restaurant_name,\n    r.city,\n    r.state,\n    r.revenue AS current_revenue,\n    pr.revenue AS prev_year_revenue,",
    sql='Here is the completed SQL query for calculating the year-over-year revenue growth for each restaurant:\n\n```sql\nWITH previous_year_revenue AS (\n    SELECT restaurant_id, year as prev_year, revenue FROM restaurants WHERE year = 2020\n)\nSELECT\n    r.restaurant_id,\n    r.restaurant_name,\n    r.city,\n    r.state,\n    r.revenue AS current_revenue,\n    pr.revenue AS prev_year_revenue,\n    (r.revenue - pr.revenue) / pr.revenue * 100 AS revenue_grow'
), 0), (Example({'sql_prompt': 'What is the percentage of users in Canada who have used the hashtag #travel?', 'sql_context': "CREATE TABLE posts (id INT, user_id INT, hashtags TEXT); INSERT INTO posts (id, user_id, hashtags) VALUES (1, 1, '#travel'), (2, 1, '#food'), (3, 2, '#travel'), (4, 3, '#art'), (5, 4, '#music'); CREATE TABLE users (id INT, country VARCHAR(2)); INSERT INTO users (id, country) VALUES (1, 'CA'), (2, 'US'), (3, 'CA'), (4, 'DE');", 'sql': "SELECT 100.0 * COUNT(DISTINCT user_id) / (SELECT COUNT(DISTINCT user_id) FROM posts JOIN users ON posts.user_id = users.id WHERE users.country = 'CA') as percentage_travel FROM posts JOIN users ON posts.user_id = users.id WHERE hashtags LIKE '%#travel%' AND users.country = 'CA';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="answer the question. First, we need to find out which users are from Canada and have used the hashtag #travel. Then, we count those users and calculate the percentage of all users in Canada.\n\nHere is the SQL query that accomplishes this:\n\n```sql\nSELECT COUNT(DISTINCT user_id) AS travelers_count, COUNT(DISTINCT user_id) * 100.0 / (SELECT COUNT(*) FROM users WHERE country = 'CA') AS percentage\nFROM posts\nWHERE hashtags LIKE '%#travel%' AND EXISTS (\n    SELECT 1 FROM users WHERE users.id = posts",
    sql="Here is the completed SQL query for the given context:\n\n```sql\nSELECT COUNT(DISTINCT user_id) AS travelers_count,\n       COUNT(DISTINCT user_id) * 100.0 / (SELECT COUNT(*) FROM users WHERE country = 'CA') AS percentage\nFROM posts\nWHERE hashtags LIKE '%#travel%' AND EXISTS (\n    SELECT 1 FROM users\n    WHERE users.id = posts.user_id AND users.country = 'CA'\n);\n```\n\nThis query calculates the number of unique users from Canada who have used the hashtag #travel"
), 0), (Example({'sql_prompt': 'What is the total number of points scored by each team in the NBA this season?', 'sql_context': "CREATE TABLE nba_teams (team_name TEXT, points_scored INT); INSERT INTO nba_teams (team_name, points_scored) VALUES ('Cavaliers', 8000), ('Warriors', 8500), ('Celtics', 7500);", 'sql': 'SELECT team_name, SUM(points_scored) FROM nba_teams GROUP BY team_name;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='To find the total number of points scored by each team in the NBA this season, we can use a SQL query that groups the data by team and sums the points scored for each group. Here is the SQL query:\n\n```sql\nSELECT team_name, SUM(points_scored) AS total_points_scored FROM nba_teams GROUP BY team_name;\n```\n\nThis query will return a table with two columns: `team_name` and `total_points_scored`. The `team_name` column will list the names of each team, and the `total_points_scored` column will show the total number of points scored by each',
    sql="Here is the completed signature for the Text-to-SQL generation task:\n\nSql Prompt: What is the total number of points scored by each team in the NBA this season?\n\nSql Context: CREATE TABLE nba_teams (team_name TEXT, points_scored INT); INSERT INTO nba_teams (team_name, points_scored) VALUES ('Cavaliers', 8000), ('Warriors', 8500), ('Celtics', 7500);\n\nReasoning: To find the total number of points scored by each team in the NBA this season, we can use a SQL query that groups the data"
), 1), (Example({'sql_prompt': 'What is the highest number of hat-tricks scored by a player in a single Bundesliga season?', 'sql_context': "CREATE TABLE german_teams (team_id INT, team_name VARCHAR(50)); INSERT INTO german_teams (team_id, team_name) VALUES (1, 'Bayern Munich'), (2, 'Borussia Dortmund'), (3, 'RB Leipzig'); CREATE TABLE german_matches (match_id INT, home_team_id INT, away_team_id INT, home_team_player_hat_tricks INT, away_team_player_hat_tricks INT); INSERT INTO german_matches (match_id, home_team_id, away_team_id, home_team_player_hat_tricks, away_team_player_hat_tricks) VALUES (1, 1, 2, 1, 0), (2, 2, 3, 0, 1), (3, 3, 1, 1, 0);", 'sql': 'SELECT MAX(home_team_player_hat_tricks + away_team_player_hat_tricks) AS max_hat_tricks FROM german_matches;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='find the highest number of hat-tricks scored by a player in a single Bundesliga season.\n\nFirst, we need to identify the players who have scored hat-tricks (3 or more goals in a single match). We can do this by querying the `german_matches` table and filtering for matches where `home_team_player_hat_tricks` or `away_team_player_hat_tricks` is greater than or equal to 3.\n\n```sql\nSELECT home_team_id AS team_id, home_team_player_hat_tricks AS hat_tricks\nFROM german_matches\nWHERE home_team_player_hat',
    sql="Here's the completed SQL query for finding the highest number of hat-tricks scored by a player in a single Bundesliga season:\n\n```sql\nSELECT home_team_id AS team_id, home_team_player_hat_tricks AS hat_tricks\nFROM german_matches\nWHERE home_team_player_hat_tricks >= 3 OR away_team_player_hat_tricks >= 3;\n```\n\nThis query will return a list of teams and the number of hat-tricks scored by their players. To find the highest number of hat-tricks in a single season, you can use another SQL statement to group the results by the"
), 1), (Example({'sql_prompt': "What is the average word count for articles published in the 'news' schema, grouped by author?", 'sql_context': "CREATE TABLE news.articles (article_id INT, title VARCHAR(100), author VARCHAR(100), word_count INT); INSERT INTO news.articles (article_id, title, author, word_count) VALUES (1, 'Article 1', 'John Doe', 500), (2, 'Article 2', 'Jane Doe', 600), (3, 'Article 3', 'John Doe', 700);", 'sql': 'SELECT author, AVG(word_count) FROM news.articles GROUP BY author;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='answer the given SQL prompts:\n\n1. The provided SQL statement is calculating the rank of policies based on the number of incidents associated with each policy type in the \'Asia\' region, ordered from highest to lowest incident count. To achieve this, it first creates a subquery that counts the number of incidents for each policy type in the \'Asia\' region and then joins this subquery with the \'policies\' table on the matching policy types.\n\n2. The second SQL prompt asks for the number of students in the "Lifelong Learning" program who have submitted an assignment in the past week. To answer this, we can use a simple SQL query that filters the \'lifelong_learning_',
    sql="Here is the signature for the Text-to-SQL generation task:\n\n**Sql Prompt:** Find the average word count for articles published in the 'news' schema, grouped by author.\n\n**Sql Context:** CREATE TABLE news.articles (article_id INT, title VARCHAR(100), author VARCHAR(100), word_count INT); INSERT INTO news.articles (article_id, title, author, word_count) VALUES (1, 'Article 1', 'John Doe', 500), (2, 'Article 2', 'Jane Doe', 600), (3, 'Art"
), 1), (Example({'sql_prompt': 'Show the total budget allocation for healthcare services in the top 5 states with the highest budget allocation', 'sql_context': 'CREATE TABLE healthcare_services (service_id INT, state_id INT, budget FLOAT);CREATE TABLE states (state_id INT, state_name TEXT);', 'sql': 'SELECT s.state_name, SUM(hs.budget)  FROM healthcare_services hs INNER JOIN states s ON hs.state_id = s.state_id GROUP BY s.state_name ORDER BY SUM(hs.budget) DESC LIMIT 5;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='First, we need to find the top 5 states with the highest budget allocation for healthcare services. To do this, we can use a subquery to get the total budget for each state and then sort them in descending order. After that, we can limit the results to the top 5.\n\n```sql\nSELECT state_id, SUM(budget) as total_budget FROM healthcare_services GROUP BY state_id ORDER BY total_budget DESC LIMIT 5;\n```\n\nNext, we will use the identified state_ids to find the total budget allocation for each of these states.\n\n```sql\nSELECT hs.state_id, SUM',
    sql="Here is the completed signature:\n\nSql Prompt: Show the top 5 states with the highest budget allocation for healthcare services and their respective total budget allocations.\n\nSql Context:\n```sql\nCREATE TABLE healthcare_services (service_id INT, state_id INT, budget FLOAT);\nCREATE TABLE states (state_id INT, state_name TEXT);\n```\n\nReasoning: Let's think step by step in order to\n\n1. First, we need to find the top 5 states with the highest budget allocation for healthcare services. To do this, we can use a subquery to get the total budget for each state and then sort them in descending order. After"
), 1), (Example({'sql_prompt': 'Find the total volume of timber sold in 2021', 'sql_context': "CREATE TABLE forests (id INT, name VARCHAR(50), hectares DECIMAL(5,2), year_planted INT, PRIMARY KEY (id)); INSERT INTO forests (id, name, hectares, year_planted) VALUES (1, 'Forest A', 123.45, 1990), (2, 'Forest B', 654.32, 1985); CREATE TABLE timber_sales (id INT, forest_id INT, year INT, volume DECIMAL(10,2), PRIMARY KEY (id)); INSERT INTO timber_sales (id, forest_id, year, volume) VALUES (1, 1, 2021, 120.50), (2, 1, 2022, 150.75), (3, 2, 2021, 450.23), (4, 2, 2022, 520.89);", 'sql': 'SELECT SUM(ts.volume) FROM timber_sales ts INNER JOIN forests f ON ts.forest_id = f.id WHERE ts.year = 2021;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Find the total volume of timber sold in 2021 from each forest separately and then sum them up.\n\nFirst, we need to find the total volume of timber sold in 2021 for each forest. For this, we can use a subquery that filters the `timber_sales` table by the year 2021 and groups the results by the `forest_id`. Then, we can select the sum of the `volume` column for each group.\n\n```sql\nSELECT forest_id, SUM(volume) as total_volume_2021 FROM timber_sales WHERE year = 2021 GROUP BY forest',
    sql="Here is the completed signature:\n\nSql Prompt: Find the total volume of timber sold in 2021 for each forest separately and then sum them up.\n\nSql Context:\n```sql\nCREATE TABLE forests (id INT, name VARCHAR(50), hectares DECIMAL(5,2), year_planted INT, PRIMARY KEY (id));\nINSERT INTO forests (id, name, hectares, year_planted) VALUES (1, 'Forest A', 123.45, 1990), (2, 'Forest B', 654.32, 1985);"
), 1), (Example({'sql_prompt': 'Who are the top 3 suppliers of recycled polyester?', 'sql_context': "CREATE TABLE suppliers (id INT, name VARCHAR(255), material VARCHAR(255)); INSERT INTO suppliers (id, name, material) VALUES (1, 'Supplier A', 'Recycled Polyester'), (2, 'Supplier B', 'Organic Cotton'), (3, 'Supplier C', 'Recycled Polyester'), (4, 'Supplier D', 'Hemp'), (5, 'Supplier E', 'Recycled Polyester');", 'sql': "SELECT name FROM suppliers WHERE material = 'Recycled Polyester' GROUP BY name ORDER BY COUNT(*) DESC LIMIT 3;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the top 3 suppliers of recycled polyester, we can use a SQL query that groups the data by supplier name and counts the number of times each name appears (incident_count), then orders the results in descending order based on this count. Here's the SQL query:\n\n```sql\nSELECT name AS supplier, COUNT(*) as incident_count FROM suppliers WHERE material = 'Recycled Polyester' GROUP BY name ORDER BY incident_count DESC LIMIT 3;\n```\n\nThis query will return the names of the top 3 suppliers that provide recycled polyester, along with the number of times they appear in the table (incident_count).",
    sql="Here is the completed signature for the Text-to-SQL generation task:\n\nSql Prompt: Who are the top 3 suppliers of recycled polyester?\n\nSql Context: CREATE TABLE suppliers (id INT, name VARCHAR(255), material VARCHAR(255)); INSERT INTO suppliers (id, name, material) VALUES (1, 'Supplier A', 'Recycled Polyester'), (2, 'Supplier B', 'Organic Cotton'), (3, 'Supplier C', 'Recycled Polyester'), (4, 'Supplier D', 'Hemp'), (5, 'Supplier E', 'Recycled Polyester');"
), 1), (Example({'sql_prompt': "How many donors have donated more than $100 in the 'Donations' table?", 'sql_context': "CREATE TABLE Donations (DonorID INT, DonationDate DATE, Amount DECIMAL(10, 2)); INSERT INTO Donations (DonorID, DonationDate, Amount) VALUES (1, '2022-02-01', 120.00), (2, '2022-01-15', 75.00), (3, '2022-03-05', 150.00);", 'sql': 'SELECT COUNT(*) FROM Donations WHERE Amount > 100;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='answer the SQL prompts:\n\n1. The given SQL query is calculating the rank of policies based on the number of incidents they have in the \'Asia\' region, ordered by the highest incident count first. It does this by creating a subquery that counts the number of incidents for each policy type in the \'incidents\' table for the specified region and then joining this subquery with the \'policies\' table on the policy type.\n\n2. The SQL query provided to find the number of students in the "Lifelong Learning" program who have submitted an assignment in the past week is correct. It filters the \'lifelong_learning_students\' table based on the condition that the \'last_',
    sql="Here is the completed signature for the second SQL prompt:\n\nSql Prompt: How many donors have donated more than $100 in the 'Donations' table?\n\nSql Context: CREATE TABLE Donations (DonorID INT, DonationDate DATE, Amount DECIMAL(10, 2)); INSERT INTO Donations (DonorID, DonationDate, Amount) VALUES (1, '2022-02-01', 120.00), (2, '2022-01-15', 75.00), (3, '2022-0"
), 1), (Example({'sql_prompt': "Update the 'Angkor Wat' excavation to have a start date of 1300-01-01.", 'sql_context': "CREATE TABLE ExcavationSites (SiteID INT PRIMARY KEY, Name VARCHAR(255), Country VARCHAR(255), StartDate DATE, EndDate DATE); INSERT INTO ExcavationSites (SiteID, Name, Country, StartDate, EndDate) VALUES (5, 'Angkor Wat', 'Cambodia', '1860-01-01', '1860-05-01');", 'sql': "UPDATE ExcavationSites SET StartDate = '1300-01-01' WHERE Name = 'Angkor Wat';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Update the 'Angkor Wat' excavation to have a start date of 1300-01-01.\n\nSql Context: CREATE TABLE ExcavationSites (SiteID INT PRIMARY KEY, Name VARCHAR(255), Country VARCHAR(255), StartDate DATE, EndDate DATE);",
    sql="UPDATE ExcavationSites SET StartDate = '1300-01-01' WHERE Name = 'Angkor Wat';\n\nThis SQL statement updates the start date of the Angkor Wat excavation to 1300-01-01."
), 1), (Example({'sql_prompt': 'Calculate the total CO2 emissions (in metric tons) per capita for each country in the population_data and carbon_emissions tables.', 'sql_context': 'CREATE TABLE population_data (country VARCHAR(50), year INT, population INT); CREATE TABLE carbon_emissions (country VARCHAR(50), year INT, co2_emissions FLOAT);', 'sql': 'SELECT p.country, AVG(co2_emissions/population*1000000) as co2_emissions_per_capita FROM population_data p JOIN carbon_emissions c ON p.country = c.country GROUP BY p.country;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Calculate the total CO2 emissions per capita for each country in the `population_data` and `carbon_emissions` tables.\n\nFirst, we need to join the two tables on the 'country' and 'year' columns to get the emissions data for each year and population count for each country.\n\n```sql\nSELECT a.country, SUM(a.co2_emissions) AS total_emissions, b.population AS population\nFROM carbon_emissions AS a\nJOIN population_data AS b ON a.country = b.country AND a.year = b.year\nGROUP BY a.country;\n```\n\nNext, we need to",
    sql="Here is the completed signature for calculating total CO2 emissions per capita for each country in the `population_data` and `carbon_emissions` tables:\n\nSql Prompt: Calculate the total CO2 emissions (in metric tons) per capita for each country in the population_data and carbon_emissions tables.\n\nSql Context: CREATE TABLE population_data (country VARCHAR(50), year INT, population INT);\nCREATE TABLE carbon_emissions (country VARCHAR(50), year INT, co2_emissions FLOAT);\n\nReasoning: Let's think step by step in order to Calculate the total CO2 emissions per capita"
), 1), (Example({'sql_prompt': "How many rural infrastructure projects were completed in '2022' in the 'Asia-Pacific' region?", 'sql_context': "CREATE TABLE rural_infrastructure(id INT, project TEXT, location TEXT, completion_year INT); INSERT INTO rural_infrastructure (id, project, location, completion_year) VALUES (1, 'Rural Road Project', 'Asia-Pacific', 2022);", 'sql': "SELECT COUNT(*) FROM rural_infrastructure WHERE location = 'Asia-Pacific' AND completion_year = 2022;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To answer the question, we first need to add more data to the `rural_infrastructure` table. Since there is only one row of data provided, we can't calculate the number of completed projects in a specific region and year without additional information.\n\nHere's an example of how you could extend the table with more data:\n\n```sql\nINSERT INTO rural_infrastructure (id, project, location, completion_year)\nVALUES (2, 'Rural Bridge Project', 'Asia-Pacific', 2022),\n       (3, 'Rural Water Supply Project', 'Asia-Pacific', 2022),",
    sql="To answer the question, we first need to add more data to the `rural_infrastructure` table. Since there is only one row of data provided, we can't calculate the number of completed projects in a specific region and year without additional information. Here's an example of how you could extend the table with more data:\n\n```sql\nINSERT INTO rural_infrastructure (id, project, location, completion_year)\nVALUES (2, 'Rural Road Project', 'Asia-Pacific', 2022),\n       (3, 'Rural Bridge Project', 'Asia-Pacific', 2022),\n       (4, '"
), 0), (Example({'sql_prompt': "What is the average horsepower of luxury vehicles in the 'GreenCar' database produced after 2017?", 'sql_context': 'CREATE TABLE LuxuryVehicles (Id INT, Make VARCHAR(50), Model VARCHAR(50), Year INT, Horsepower INT);', 'sql': 'SELECT AVG(Horsepower) FROM LuxuryVehicles WHERE Year > 2017;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="answer the question. First, we need to filter out luxury vehicles and those produced after 2017 from the 'LuxuryVehicles' table. Then, we calculate the average horsepower for these filtered vehicles. Here's the SQL query:\n\n```sql\nSELECT AVG(Horsepower) AS Average_Horsepower\nFROM LuxuryVehicles\nWHERE Year > 2017 AND Make IN (\n    SELECT Make FROM LuxuryVehicles\n    WHERE Type = 'Luxury'\n);\n```\n\nIn this query, we first create a subquery to get the makes of luxury vehicles. Then, we use that subquery in the",
    sql="Here is the completed signature for the second question:\n\nSql Prompt: What is the average horsepower of luxury vehicles in the 'GreenCar' database produced after 2017?\n\nSql Context: CREATE TABLE LuxuryVehicles (Id INT, Make VARCHAR(50), Model VARCHAR(50), Year INT, Horsepower INT);\n\nReasoning: Let's think step by step in order to answer the question. First, we need to filter out luxury vehicles and those produced after 2017 from the 'LuxuryVehicles' table. Then, we calculate the average horsepower for these filtered vehicles. Here's the SQL query:"
), 1), (Example({'sql_prompt': 'What is the maximum response time for emergency calls in the city of Los Angeles?', 'sql_context': 'CREATE TABLE emergency_calls (id INT, city VARCHAR(20), response_time INT);', 'sql': "SELECT MAX(response_time) FROM emergency_calls WHERE city = 'Los Angeles';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the maximum response time for emergency calls in the city of Los Angeles, we can use the SQL `MAX()` function. Here is the SQL query:\n\n```sql\nSELECT MAX(response_time) AS max_response_time FROM emergency_calls WHERE city = 'Los Angeles';\n```\n\nThis query will return the maximum response time for emergency calls in the city of Los Angeles from the `emergency_calls` table.",
    sql="Here is the completed signature:\n\nSql Prompt: What is the maximum response time for emergency calls in the city of Los Angeles?\n\nSql Context: CREATE TABLE emergency_calls (id INT, city VARCHAR(20), response_time INT);\n\nReasoning: Let's think step by step in order to To find the maximum response time for emergency calls in the city of Los Angeles, we can use the SQL `MAX()` function. Here is the SQL query:\n```sql\nSELECT MAX(response_time) AS max_response_time\nFROM emergency_calls\nWHERE city = 'Los Angeles';\n```\nThis query will return the maximum response time for emergency"
), 1), (Example({'sql_prompt': 'What is the maximum loan amount for socially responsible loans in the Asia-Pacific region?', 'sql_context': "CREATE TABLE socially_responsible_loans (loan_id INT, region VARCHAR(20), loan_amount DECIMAL(10,2)); INSERT INTO socially_responsible_loans (loan_id, region, loan_amount) VALUES (101, 'Asia-Pacific', 50000), (102, 'Europe', 30000), (103, 'Asia-Pacific', 70000);", 'sql': "SELECT MAX(srl.loan_amount) FROM socially_responsible_loans srl WHERE srl.region = 'Asia-Pacific';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='To answer the question "What is the maximum loan amount for socially responsible loans in the Asia-Pacific region?", we can use a SQL query to select and filter the data from the `socially_responsible_loans` table. Here\'s the SQL query:\n\n```sql\nSELECT MAX(loan_amount) AS max_loan_amount FROM socially_responsible_loans WHERE region = \'Asia-Pacific\';\n```\n\nThis query will return the maximum loan amount for all loans in the Asia-Pacific region. The `MAX()` function is used to find the highest value in a column, and the `WHERE` clause is',
    sql="Here's the completed SQL prompt:\n\nSql Prompt: What is the maximum loan amount for socially responsible loans in the Asia-Pacific region?\n\nSql Context: CREATE TABLE socially_responsible_loans (loan_id INT, region VARCHAR(20), loan_amount DECIMAL(10,2));\nINSERT INTO socially_responsible_loans (loan_id, region, loan_amount) VALUES (101, 'Asia-Pacific', 50000), (102, 'Europe', 30000), (103, 'Asia-Pac"
), 1), (Example({'sql_prompt': 'What is the maximum number of years a traditional art form has been preserved in each country?', 'sql_context': "CREATE TABLE countries (id INT, name TEXT); INSERT INTO countries (id, name) VALUES (1, 'Nigeria'), (2, 'Brazil'); CREATE TABLE art_forms (id INT, country_id INT, name TEXT, year_preserved INT); INSERT INTO art_forms (id, country_id, name, year_preserved) VALUES (1, 1, 'Tie-dye', 500), (2, 1, 'Batik', 1000), (3, 2, 'Capoeira', 400);", 'sql': 'SELECT c.name, MAX(af.year_preserved) FROM countries c JOIN art_forms af ON c.id = af.country_id GROUP BY c.id;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='To find the maximum number of years a traditional art form has been preserved in each country, we first need to group the data by country and year_preserved, then find the maximum value for each group. Here is the SQL query that accomplishes this:\n\n```sql\nSELECT countries.name AS country, MAX(art_forms.year_preserved) AS max_years_preserved\nFROM countries\nJOIN art_forms ON countries.id = art_forms.country_id\nGROUP BY countries.name;\n```\n\nThis query will return a result set with each country and the maximum number of years that a traditional art form has been preserved in that country.',
    sql="Here is the completed signature for the Text-to-SQL generation task:\n\nSql Prompt: Find the maximum number of years a traditional art form has been preserved in each country.\n\nSql Context: CREATE TABLE countries (id INT, name TEXT); INSERT INTO countries (id, name) VALUES (1, 'Nigeria'), (2, 'Brazil'); CREATE TABLE art_forms (id INT, country_id INT, name TEXT, year_preserved INT); INSERT INTO art_forms (id, country_id, name, year_preserved) VALUES (1, 1, 'Tie-dye', 500"
), 1), (Example({'sql_prompt': 'What is the maximum hourly wage for each labor category in the construction industry?', 'sql_context': 'CREATE TABLE labor_statistics (id INT, industry VARCHAR(255), category VARCHAR(255), title VARCHAR(255), hourly_wage DECIMAL(5,2));', 'sql': "SELECT industry, category, MAX(hourly_wage) as max_hourly_wage FROM labor_statistics WHERE industry = 'construction' GROUP BY industry, category;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the maximum hourly wage for each labor category in the construction industry, we can use the SQL `MAX()` function along with a `GROUP BY` clause. Here's how you can write the query:\n\n```sql\nSELECT industry, category, MAX(hourly_wage) AS max_hourly_wage\nFROM labor_statistics\nWHERE industry = 'Construction'\nGROUP BY industry, category;\n```\n\nThis query will return a result set with each unique combination of `industry` and `category`, along with the maximum hourly wage for that specific combination.",
    sql="Here is the completed signature:\n\nSql Prompt: What is the maximum hourly wage for each labor category in the construction industry?\n\nSql Context: CREATE TABLE labor_statistics (id INT, industry VARCHAR(255), category VARCHAR(255), title VARCHAR(255), hourly_wage DECIMAL(5,2));\n\nReasoning: Let's think step by step in order to To find the maximum hourly wage for each labor category in the construction industry, we can use the SQL `MAX()` function along with a `GROUP BY` clause. Here's how you can write the query:\n```sql\nSELECT industry"
), 1), (Example({'sql_prompt': 'List all the drought-impacted counties in Texas in 2018.', 'sql_context': "CREATE TABLE drought_impact(county VARCHAR(20), state VARCHAR(20), year INT, impacted BOOLEAN); INSERT INTO drought_impact(county, state, year, impacted) VALUES ('Harris', 'Texas', 2015, true), ('Harris', 'Texas', 2016, true), ('Harris', 'Texas', 2017, true), ('Harris', 'Texas', 2018, true), ('Bexar', 'Texas', 2015, false), ('Bexar', 'Texas', 2016, false), ('Bexar', 'Texas', 2017, false), ('Bexar', 'Texas', 2018, false);", 'sql': "SELECT county FROM drought_impact WHERE state = 'Texas' AND year = 2018 AND impacted = true;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='answer the given SQL prompts:\n\n1. The provided SQL statement is calculating the rank of policies based on the number of incidents they have had in Asia, ordered from highest to lowest. It does this by creating a subquery that counts the number of incidents for each policy type in the \'incidents\' table, where the date matches the date of the corresponding policy in the \'policies\' table and the region is \'Asia\'. Then it joins this subquery with the \'policies\' table on the policy type match.\n\n2. The SQL statement provided for the second prompt counts the number of students in the "Lifelong Learning" program who have submitted an assignment in the past week. It does this',
    sql="Here is the signature for the Text-to-SQL generation task:\n\n**Signature** `SELECT county FROM drought_impact WHERE state = 'Texas' AND year = 2018 AND impacted = true;`\n\nLet me know if you need any further assistance!\n\nSql Prompt: List all the drought-impacted counties in Texas in 2018.\n\nSql Context: CREATE TABLE drought_impact(county VARCHAR(20), state VARCHAR(20), year INT, impacted BOOLEAN); INSERT INTO drought_impact(county, state, year, impacted) VALUES"
), 1), (Example({'sql_prompt': 'Find the top 3 genres with the highest revenue in 2022 for streaming services in the USA.', 'sql_context': "CREATE TABLE streaming_services (service_id INT, service_name VARCHAR(255), revenue DECIMAL(10,2)); INSERT INTO streaming_services (service_id, service_name, revenue) VALUES (1, 'StreamingCo', 5000000.00); CREATE TABLE genre_sales (sale_id INT, service_id INT, genre VARCHAR(255), sales DECIMAL(10,2)); INSERT INTO genre_sales (sale_id, service_id, genre, sales) VALUES (1, 1, 'Rock', 150000.00);", 'sql': "SELECT genre, SUM(sales) as total_sales FROM genre_sales gs JOIN streaming_services s ON gs.service_id = s.service_id WHERE s.service_country = 'USA' AND s.service_year = 2022 GROUP BY genre ORDER BY total_sales DESC LIMIT 3;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="1. To find the policies with the highest number of incidents in Asia, we first count the number of incidents for each policy type within the specified region and then join this count back to the policies table. The resulting query ranks the policies based on the incident count in descending order.\n\n```sql\nSELECT policy_rank FROM (\n    SELECT policy.type AS policy, COUNT(*) as incident_count\n    FROM incidents\n    JOIN policies ON incidents.date = policies.date\n    WHERE policies.region = 'Asia'\n    GROUP BY policy.type\n) as subquery\nJOIN policies ON policies.type = subquery.policy\nORDER BY incident_count DES",
    sql="Here is the completed signature for the Text-to-SQL generation task:\n\nSql Prompt: Find the top 3 genres with the highest revenue in 2022 for streaming services in the USA.\n\nSql Context: CREATE TABLE streaming_services (service_id INT, service_name VARCHAR(255), revenue DECIMAL(10,2)); INSERT INTO streaming_services (service_id, service_name, revenue) VALUES (1, 'StreamingCo', 5000000.00); CREATE TABLE genre_sales (sale_id INT, service_id INT, genre VARCHAR(2"
), 1), (Example({'sql_prompt': "List all unique fields from the 'geology' and 'infrastructure' tables.", 'sql_context': 'CREATE TABLE geology (well_id INT, rock_type VARCHAR(50)); CREATE TABLE infrastructure (well_id INT, platform_type VARCHAR(50));', 'sql': "SELECT field FROM (SELECT 'geology' as table_name, column_name as field FROM information_schema.columns WHERE table_name = 'geology' UNION ALL SELECT 'infrastructure' as table_name, column_name as field FROM information_schema.columns WHERE table_name = 'infrastructure') as subquery;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='answer the given SQL prompts.\n\n1. The first SQL query is a request for the policies with the highest number of incidents in the \'Asia\' region, ordered by incident count in descending order. It uses a subquery to calculate the incident count for each policy type and then joins it back to the policies table based on the type.\n\n2. The second SQL query is asking for the number of students in the "Lifelong Learning" program who have submitted an assignment in the past week. It filters the \'lifelong_learning_students\' table by last_assignment date, which should be within one week of the current date (CURDATE()).\n\n3. The third SQL query',
    sql="Here is the signature for the Text-to-SQL generation task:\n\n**Sql Prompt:** List all unique fields from the 'geology' and 'infrastructure' tables.\n\n**Sql Context:** CREATE TABLE geology (well_id INT, rock_type VARCHAR(50));\nCREATE TABLE infrastructure (well_id INT, platform_type VARCHAR(50));\n\n**Reasoning:** Let's think step by step in order to answer the given SQL prompts.\n1. The first SQL query is a request for the unique fields from both 'geology' and 'infrastructure' tables. We can use the DISTINCT keyword to return only unique values for each"
), 1), (Example({'sql_prompt': 'Calculate the percentage of total Europium production for each country.', 'sql_context': 'CREATE TABLE europium_production (country VARCHAR(50), quantity INT);', 'sql': 'SELECT country, quantity * 100.0 / SUM(quantity) OVER (PARTITION BY NULL) AS percentage FROM europium_production;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To calculate the percentage of total Europium production for each country, we first need to find the total production and then divide each country's production by the total. Here's how you can do it:\n\n1. First, let's find the total Europium production:\n\n```sql\nSELECT SUM(quantity) AS total_production FROM europium_production;\n```\n\n2. Next, let's calculate the production percentage for each country:\n\n```sql\nSELECT country, quantity, (quantity * 100.0 / (SELECT SUM(quantity) FROM europium_production)) AS percentage FROM europium_production;\n```",
    sql="Here is the completed signature:\n\nSql Prompt: Calculate the percentage of total Europium production for each country.\n\nSql Context: CREATE TABLE europium_production (country VARCHAR(50), quantity INT);\n\nReasoning: Let's think step by step in order to To calculate the percentage of total Europium production for each country, we first need to find the total production and then divide each country's production by the total. Here's how you can do it:\n\n1. First, let's find the total Europium production:\n```sql\nSELECT SUM(quantity) AS total_production FROM europium_production;\n```\n\n2"
), 1), (Example({'sql_prompt': 'Find the mobile subscribers with consecutive speed drops greater than 25% for the last 3 months, ordered by subscription IDs.', 'sql_context': 'CREATE TABLE mobile_usage_detailed (subscriber_id INT, month INT, speed FLOAT); INSERT INTO mobile_usage_detailed (subscriber_id, month, speed) VALUES (1, 1, 100), (1, 2, 80), (1, 3, 70), (2, 1, 200), (2, 2, 180), (2, 3, 160), (3, 1, 150), (3, 2, 130), (3, 3, 110);', 'sql': 'SELECT subscriber_id, speed, month FROM (SELECT subscriber_id, speed, month, LAG(speed, 1) OVER (PARTITION BY subscriber_id ORDER BY month) as prev_speed, LAG(speed, 2) OVER (PARTITION BY subscriber_id ORDER BY month) as prev_prev_speed FROM mobile_usage_detailed) t WHERE t.speed < 0.75 * t.prev_speed AND t.speed < 0.75 * t.prev_prev_speed ORDER BY subscriber_id;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="find the mobile subscribers with consecutive speed drops greater than 25% for the last 3 months, ordered by subscription IDs.\n\nFirst, we need to calculate the percentage change in speed between consecutive months for each subscriber. Then, filter out those subscribers who have a drop of more than 25% in three consecutive months. Finally, order the results by subscription IDs.\n\nHere's the SQL query:\n\n```sql\nSELECT subscriber_id, month\nFROM (\n    SELECT\n        subscriber_id,\n        month,\n        speed,\n        ((speed - LAG(speed) OVER (PARTITION BY subscriber_id ORDER",
    sql='Here is the completed signature for the Text-to-SQL generation task:\n\nSql Prompt: Find the mobile subscribers with consecutive speed drops greater than 25% for the last 3 months, ordered by subscription IDs.\n\nSql Context: CREATE TABLE mobile_usage_detailed (subscriber_id INT, month INT, speed FLOAT); INSERT INTO mobile_usage_detailed (subscriber_id, month, speed) VALUES (1, 1, 100), (1, 2, 80), (1, 3, 70), (2, 1, 200), (2, 2'
), 1), (Example({'sql_prompt': 'What is the distribution of AI safety research topics by year?', 'sql_context': "CREATE TABLE if not exists ai_safety_research (year INT, topic VARCHAR(255)); INSERT INTO ai_safety_research (year, topic) VALUES (2018, 'Explainable AI'), (2019, 'Algorithmic fairness'), (2020, 'AI safety'), (2021, 'Robust AI'), (2022, 'AI ethics');", 'sql': 'SELECT year, topic, COUNT(*) OVER (PARTITION BY year) as research_count FROM ai_safety_research ORDER BY year;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='To answer the question "What is the distribution of AI safety research topics by year?", we can use a SQL query to count and group the data by both year and topic. Here\'s an example of how the SQL query might look like:\n\n```sql\nSELECT year, topic, COUNT(*) as occurrences\nFROM ai_safety_research\nGROUP BY year, topic;\n```\n\nThis query will return a table with three columns: `year`, `topic`, and `occurrences`. The `occurrences` column shows the number of times each combination of year and topic appears in the `ai_safety_research` table.',
    sql="Here is the completed signature for the Text-to-SQL generation task:\n\nSql Prompt: Show the distribution of AI safety research topics by year.\n\nSql Context: CREATE TABLE if not exists ai_safety_research (year INT, topic VARCHAR(255)); INSERT INTO ai_safety_research (year, topic) VALUES (2018, 'Explainable AI'), (2019, 'Algorithmic fairness'), (2020, 'AI safety'), (2021, 'Robust AI'), (2022, 'AI ethics');\n\nReasoning: Let's think step"
), 0), (Example({'sql_prompt': "How many forest management practices are recorded in the 'tropical_forests'?", 'sql_context': "CREATE TABLE forest_management (id INT, forest_type VARCHAR(50), practice_count INT); INSERT INTO forest_management (id, forest_type, practice_count) VALUES (1, 'Tropical Forests', 45); INSERT INTO forest_management (id, forest_type, practice_count) VALUES (2, 'Temperate Forests', 34);", 'sql': "SELECT practice_count FROM forest_management WHERE forest_type = 'Tropical Forests';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='answer the given SQL prompts:\n\n1. The provided SQL statement is calculating the rank of policies based on the number of incidents they have had in the Asia region, ordered from highest to lowest. It does this by first creating a subquery that counts the number of incidents for each policy type in the \'Asia\' region and then joining this subquery with the \'policies\' table on the policy type.\n\n2. The SQL statement provided for the "Lifelong Learning" program counts the number of students who have submitted an assignment in the past week by filtering the \'lifelong_learning_students\' table based on the \'last_assignment\' column being greater than or equal to one week',
    sql="Sql Prompt: To find out how many forest management practices are recorded in the 'tropical_forests', we can use the following SQL statement:\n\n```sql\nSELECT practice_count FROM forest_management WHERE forest_type = 'Tropical Forests';\n```\n\nThis query will return the number of practices recorded for tropical forests from the `forest_management` table."
), 1), (Example({'sql_prompt': 'What is the distribution of lifelong learning course enrollments by age group, in total?', 'sql_context': 'CREATE TABLE lifelong_learning (student_id INT, age_group VARCHAR(255), course_id INT); CREATE TABLE courses (course_id INT, course_name VARCHAR(255));', 'sql': 'SELECT l.age_group, COUNT(l.course_id) FROM lifelong_learning l INNER JOIN courses c ON l.course_id = c.course_id GROUP BY l.age_group;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="answer the question. First, we need to join the `lifelong_learning` table with the `courses` table to get the course names associated with each enrollment. Then, we group the results by both age group and course name to count the number of enrollments for each combination. Finally, we sum up the counts across all courses to get the total distribution of enrollments by age group.\n\nHere's the SQL query:\n\n```sql\nSELECT age_group, SUM(COUNT(*)) as total_enrollments\nFROM (\n    SELECT ll.age_group, c.course_name, COUNT(*) as enrollment_count\n    FROM lifel",
    sql="Here is the completed signature for the Text-to-SQL generation task:\n\nSql Prompt: What is the distribution of lifelong learning course enrollments by age group, in total?\n\nSql Context: CREATE TABLE lifelong_learning (student_id INT, age_group VARCHAR(255), course_id INT); CREATE TABLE courses (course_id INT, course_name VARCHAR(255));\n\nReasoning: Let's think step by step in order to answer the question. First, we need to join the `lifelong_learning` table with the `courses` table to get the course names associated with each enrollment. Then"
), 1), (Example({'sql_prompt': "Insert new records into the Employee table with the following data: EmployeeID 3, FirstName 'Mike', LastName 'Smith', Department 'Environment'.", 'sql_context': 'CREATE TABLE Employee (EmployeeID INT, FirstName VARCHAR(50), LastName VARCHAR(50), Department VARCHAR(50));', 'sql': "INSERT INTO Employee (EmployeeID, FirstName, LastName, Department) VALUES (3, 'Mike', 'Smith', 'Environment');"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Insert new records into the `Employee` table with the following data: `EmployeeID` 3, `FirstName` 'Mike', `LastName` 'Smith', `Department` 'Environment'.",
    sql="```sql\nINSERT INTO Employee (EmployeeID, FirstName, LastName, Department)\nVALUES (3, 'Mike', 'Smith', 'Environment');\n```\n\nThis SQL statement will insert a new record into the `Employee` table with the specified values for each column. The `INSERT INTO` clause specifies the target table, and the `VALUES` clause provides the data to be inserted."
), 1), (Example({'sql_prompt': 'Which cosmetic brands have the highest average customer rating?', 'sql_context': "CREATE TABLE brand (id INT, name VARCHAR(255), avg_rating FLOAT); CREATE TABLE rating (brand_id INT, rating FLOAT); INSERT INTO brand (id, name, avg_rating) VALUES (1, 'Lush', 4.2), (2, 'The Body Shop', 4.1), (3, 'Sephora', 4.3); INSERT INTO rating (brand_id, rating) VALUES (1, 4.5), (1, 4.0), (2, 4.1), (2, 4.2), (3, 4.4), (3, 4.3);", 'sql': 'SELECT b.name, AVG(r.rating) as avg_rating FROM brand b JOIN rating r ON b.id = r.brand_id GROUP BY b.name ORDER BY avg_rating DESC;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="find the cosmetic brands with the highest average customer rating.\n\nFirst, we need to join the `brand` and `rating` tables on their respective `id` columns. This will allow us to associate each brand with its corresponding ratings.\n\nSecond, we'll calculate the total number of ratings for each brand by using the COUNT(*) function in a subquery.\n\nThird, we'll calculate the sum of all ratings for each brand in another subquery.\n\nFinally, we'll divide the sum of ratings by the number of ratings to find the average rating for each brand.\n\nHere is the SQL query:\n\n```sql\nSELECT b.name, SUM(",
    sql="Here is the completed signature: Sql Prompt: Which cosmetic brands have the highest average customer rating?\n\nSql Context: CREATE TABLE brand (id INT, name VARCHAR(255), avg_rating FLOAT); CREATE TABLE rating (brand_id INT, rating FLOAT); INSERT INTO brand (id, name, avg_rating) VALUES (1, 'Lush', 4.2), (2, 'The Body Shop', 4.1), (3, 'Sephora', 4.3); INSERT INTO rating (brand_id, rating) VALUES (1, 4.5), (1, 4"
), 1), (Example({'sql_prompt': 'How many unique volunteers worked on projects in each cause area?', 'sql_context': "CREATE TABLE volunteers (id INT, name VARCHAR(30), cause_area VARCHAR(20)); INSERT INTO volunteers (id, name, cause_area) VALUES (1, 'Bob', 'children'), (2, 'Alice', 'children'), (3, 'Charlie', 'health');", 'sql': 'SELECT cause_area, COUNT(DISTINCT name) FROM volunteers GROUP BY cause_area;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='To find the number of unique volunteers who worked on projects in each cause area, we can use a SQL query that groups the volunteers by their cause_area and counts the distinct id values. Here is the SQL query for this task:\n\n```sql\nSELECT cause_area, COUNT(DISTINCT id) AS num_volunteers\nFROM volunteers\nGROUP BY cause_area;\n```\n\nThis query will return a table with two columns: `cause_area` and `num_volunteers`. The `cause_area` column shows the different cause areas, and the `num_volunteers` column shows the number of unique volunteers who worked on projects in each cause area',
    sql="Here is the completed signature:\n\nSql Prompt: How many unique volunteers worked on projects in each cause area?\n\nSql Context: CREATE TABLE volunteers (id INT, name VARCHAR(30), cause_area VARCHAR(20)); INSERT INTO volunteers (id, name, cause_area) VALUES (1, 'Bob', 'children'), (2, 'Alice', 'children'), (3, 'Charlie', 'health');\n\nReasoning: Let's think step by step in order to To find the number of unique volunteers who worked on projects in each cause area, we can use a SQL query that groups the volunteers by their cause_area and counts"
), 1), (Example({'sql_prompt': 'Who were the top 3 content creators in terms of likes received on their posts in January 2022?', 'sql_context': "CREATE SCHEMA content; CREATE TABLE creators(creator_id INT, name VARCHAR(255), total_likes INT); INSERT INTO creators (creator_id, name, total_likes) VALUES (1, 'Alice', 5000); INSERT INTO creators (creator_id, name, total_likes) VALUES (2, 'Bob', 7000);", 'sql': 'SELECT name, SUM(total_likes) AS total_likes_january FROM content.creators WHERE MONTH(created_date) = 1 GROUP BY name ORDER BY total_likes_january DESC LIMIT 3;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='answer the given SQL prompts:\n\n1. The provided SQL query is calculating the rank of policies based on the number of incidents they have had in Asia, ordered from highest to lowest. It does this by creating a subquery that counts the number of incidents for each policy type in the \'incidents\' table, where the date matches the date of the corresponding policy in the \'policies\' table and the region is \'Asia\'. Then it joins this subquery with the \'policies\' table on the policy type match.\n\n2. The provided SQL query counts the number of students in the "Lifelong Learning" program who have submitted an assignment in the past week by filtering the \'lifelong',
    sql="Here is the completed signature for the second SQL prompt:\n\nSql Prompt: Who were the top 3 content creators in terms of likes received on their posts in January 2022?\n\nSql Context: CREATE SCHEMA content;\nCREATE TABLE creators(creator_id INT, name VARCHAR(255), total_likes INT);\nINSERT INTO creators (creator_id, name, total_likes) VALUES (1, 'Alice', 5000);\nINSERT INTO creators (creator_id, name, total_likes) VALUES (2, 'Bob', 7000);"
), 1), (Example({'sql_prompt': "Update records in the 'Volunteers' table where the volunteer's skill level is 'Beginner' and change it to 'Intermediate'", 'sql_context': 'CREATE TABLE Volunteers (id INT PRIMARY KEY, volunteer_name VARCHAR(255), skill_level VARCHAR(255), last_volunteered DATE);', 'sql': "UPDATE Volunteers SET skill_level = 'Intermediate' WHERE skill_level = 'Beginner';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="construct the SQL query for updating the 'Volunteers' table.\n\n1. Identify the table we want to update: In this case, it's the 'Volunteers' table.\n2. Determine the condition for selecting the records to be updated: We are looking for volunteers with a skill level of 'Beginner'.\n3. Decide on the new value to set for the selected records: In this case, we want to change the skill level from 'Beginner' to 'Intermediate'.\n4. Construct the UPDATE statement:\n\n```sql\nUPDATE Volunteers\nSET skill_level = 'Intermediate'\nWHERE skill_level = 'Beginner';",
    sql="Here is the completed signature:\n\nSql Prompt: Update records in the 'Volunteers' table where the volunteer's skill level is 'Beginner' and change it to 'Intermediate'.\n\nSql Context: CREATE TABLE Volunteers (id INT PRIMARY KEY, volunteer_name VARCHAR(255), skill_level VARCHAR(255), last_volunteered DATE);\n\nReasoning: Let's think step by step in order to construct the SQL query for updating the 'Volunteers' table.\n1. Identify the table we want to update: In this case, it's the 'Volunteers' table.\n2. Det"
), 1), (Example({'sql_prompt': 'Identify the number of farmers involved in urban agriculture initiatives in California and New York in 2019.', 'sql_context': "CREATE TABLE Urban_Agriculture (Farmer_ID INT, State VARCHAR(20), Initiative VARCHAR(20), Year INT); INSERT INTO Urban_Agriculture (Farmer_ID, State, Initiative, Year) VALUES (101, 'California', 'Community_Garden', 2019), (102, 'California', 'Rooftop_Farming', 2019), (103, 'New_York', 'Community_Garden', 2019);", 'sql': "SELECT COUNT(DISTINCT Farmer_ID) FROM Urban_Agriculture WHERE State IN ('California', 'New York') AND Year = 2019 AND Initiative IN ('Community_Garden', 'Rooftop_Farming');"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='answer the given SQL prompts:\n\n1. The provided SQL statement is calculating the rank of policies based on the number of incidents associated with each policy type in the \'Asia\' region, ordered from highest to lowest incident count. It does this by first creating a subquery that counts the number of incidents for each policy type and then joining this subquery with the policies table on the policy type match.\n\n2. The SQL statement provided for the second prompt counts the number of students in the "Lifelong Learning" program who have submitted an assignment in the past week by filtering the \'lifelong_learning_students\' table based on the last_assignment date being within the past week (1 week',
    sql="Here are the signatures for the given SQL prompts:\n\n1. To identify the number of farmers involved in urban agriculture initiatives in California and New York in 2019, use the following SQL statement:\n\n```sql\nSELECT COUNT(Farmer_ID) AS Number_of_Farmers\nFROM Urban_Agriculture\nWHERE State IN ('California', 'New York') AND Year = 2019;\n```\n\n2. To list all materials used in the manufacturing sector in Brazil and South Africa, use the following SQL statement:\n\n```sql\nSELECT material_name\nFROM material_data\nWHERE country IN ('Braz"
), 0), (Example({'sql_prompt': "Update the accommodation type for a student with a StudentID of 2 from 'Assistive Listening Devices' to 'Sign Language Interpretation'.", 'sql_context': "CREATE TABLE StudentAccommodations (StudentID INT, StudentName VARCHAR(255), DisabilityType VARCHAR(255), AccommodationType VARCHAR(255), GraduationYear INT); INSERT INTO StudentAccommodations (StudentID, StudentName, DisabilityType, AccommodationType, GraduationYear) VALUES (1, 'John Doe', 'Visual Impairment', 'Sign Language Interpretation', 2018), (2, 'Jane Smith', 'Hearing Impairment', 'Assistive Listening Devices', NULL), (3, 'Michael Johnson', 'Mobility Impairment', 'Assistive Technology', 2019), (4, 'Sara Johnson', 'Physical Disability', 'Mobility Assistance', 2022);", 'sql': "UPDATE StudentAccommodations SET AccommodationType = 'Sign Language Interpretation' WHERE StudentID = 2;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Update the `AccommodationType` for a student with a `StudentID` of 2 from 'Assistive Listening Devices' to 'Sign Language Interpretation'.",
    sql="```sql\nUPDATE StudentAccommodations\nSET AccommodationType = 'Sign Language Interpretation'\nWHERE StudentID = 2;\n```\nThis query will update the `AccommodationType` column in the `StudentAccommodations` table for the row where the `StudentID` is equal to 2. The new value of the `AccommodationType` will be 'Sign Language Interpretation'."
), 1), (Example({'sql_prompt': 'What is the minimum square footage of an inclusive housing unit in the city of Miami?', 'sql_context': "CREATE TABLE housing (id INT, city VARCHAR(20), size INT, inclusive BOOLEAN); INSERT INTO housing (id, city, size, inclusive) VALUES (1, 'Miami', 800, TRUE), (2, 'Miami', 1000, FALSE), (3, 'Miami', 1200, TRUE);", 'sql': "SELECT MIN(size) FROM housing WHERE city = 'Miami' AND inclusive = TRUE;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="answer the question. First, we need to filter out only the inclusive housing units in Miami from the `housing` table. Then, we need to find the minimum square footage among these units. Here is the SQL query for that:\n\n```sql\nSELECT MIN(size) AS min_square_footage FROM housing WHERE city = 'Miami' AND inclusive = TRUE;\n```\n\nThis query will return the minimum square footage of an inclusive housing unit in the city of Miami.",
    sql="Sql Prompt: What is the minimum square footage of an inclusive housing unit in the city of Miami?\n\nSql Context: CREATE TABLE housing (id INT, city VARCHAR(20), size INT, inclusive BOOLEAN); INSERT INTO housing (id, city, size, inclusive) VALUES (1, 'Miami', 800, TRUE), (2, 'Miami', 1000, FALSE), (3, 'Miami', 1200, TRUE);\n\nReasoning: Let's think step by step in order to answer the question. First, we need to filter out only the inclusive housing units in Miami from the `housing`"
), 1), (Example({'sql_prompt': 'How many works were exhibited in the year 1950?', 'sql_context': "CREATE TABLE exhibitions (exhibition_id INT PRIMARY KEY, exhibition_name TEXT, year INT, location TEXT);CREATE TABLE exhibits (exhibit_id INT PRIMARY KEY, work_id INT, exhibition_id INT, FOREIGN KEY (work_id) REFERENCES works(work_id), FOREIGN KEY (exhibition_id) REFERENCES exhibitions(exhibition_id));INSERT INTO exhibitions (exhibition_id, exhibition_name, year, location) VALUES (1, 'Documenta', 1950, 'Kassel, Germany'); INSERT INTO exhibits (exhibit_id, work_id, exhibition_id) VALUES (1, 1, 1);", 'sql': 'SELECT COUNT(*) FROM exhibits e JOIN exhibitions ex ON e.exhibition_id = ex.exhibition_id WHERE ex.year = 1950;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='answer the question. First, we need to find out how many works were exhibited in the year 1950. Since there is only one exhibition in the year 1950 (Documenta), we can count the number of exhibits for this exhibition to get the number of works exhibited.\n\nIn SQL, we can use a subquery to find the number of exhibits for the Documenta exhibition and then count them:\n\n```sql\nSELECT COUNT(*) FROM exhibits WHERE exhibition_id = (SELECT exhibition_id FROM exhibitions WHERE year = 1950);\n```\n\nThis query first finds the `exhibition_id` of the Documenta exhibition',
    sql='Here is the completed signature: Sql Prompt: How many works were exhibited in the year 1950? Sql Context: CREATE TABLE exhibitions (exhibition_id INT PRIMARY KEY, exhibition_name TEXT, year INT, location TEXT);CREATE TABLE exhibits (exhibit_id INT PRIMARY KEY, work_id INT, exhibition_id INT, FOREIGN KEY (work_id) REFERENCES works(work_id), FOREIGN KEY (exhibition_id) REFERENCES exhibitions(exhibition_id));INSERT INTO exhibitions (exhibition_id, exhibition_name, year, location) VALUES (1'
), 1), (Example({'sql_prompt': 'What is the total number of articles written by each author in each region?', 'sql_context': "CREATE TABLE authors (id INT, name TEXT); CREATE TABLE regions (id INT, name TEXT); CREATE TABLE articles (id INT, title TEXT, content TEXT, author_id INT, region_id INT); INSERT INTO authors (id, name) VALUES (1, 'John Doe'), (2, 'Jane Smith'); INSERT INTO regions (id, name) VALUES (1, 'North'), (2, 'South'), (3, 'East'), (4, 'West'); INSERT INTO articles (id, title, content, author_id, region_id) VALUES (1, 'Article 1', 'Content 1', 1, 1), (2, 'Article 2', 'Content 2', 2, 2), (3, 'Article 3', 'Content 3', 1, 3), (4, 'Article 4', 'Content 4', 2, 4);", 'sql': 'SELECT authors.name, regions.name, COUNT(articles.id) FROM authors INNER JOIN articles ON authors.id = articles.author_id INNER JOIN regions ON regions.id = articles.region_id GROUP BY authors.name, regions.name;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='answer the given SQL prompts:\n\n1. The provided SQL statement is counting the number of incidents for each policy type in the Asia region and ordering them by incident count in descending order. To find out how many students in the "Lifelong Learning" program have submitted an assignment in the past week, we can use a similar approach but with the appropriate table and column names:\n\n```sql\nSELECT COUNT(*) FROM lifelong_learning_students WHERE program = \'Lifelong Learning\' AND last_assignment >= DATE_SUB(CURDATE(), INTERVAL 1 WEEK);\n```\n\n2. To find the change in co-ownership cost per property',
    sql='Here is the signature for the Text-to-SQL generation task: **Signature** `SELECT author_id, region_id, COUNT(*) as total_articles FROM articles GROUP BY author_id, region_id;` Let me know if you need any further assistance!\n\nSql Prompt: What is the total number of articles written by each author in each region?\n\nSql Context: CREATE TABLE authors (id INT, name TEXT); CREATE TABLE regions (id INT, name TEXT); CREATE TABLE articles (id INT, title TEXT, content TEXT, author_id INT, region_id INT); INSERT INTO authors (id, name) VALUES ('
), 0), (Example({'sql_prompt': 'How many tunnels in Washington state were constructed after 2010?', 'sql_context': "CREATE TABLE tunnels (id INT, name TEXT, state TEXT, build_year INT); INSERT INTO tunnels (id, name, state, build_year) VALUES (1, 'WA-1 Underpass', 'WA', 2012);", 'sql': "SELECT COUNT(*) FROM tunnels WHERE state = 'WA' AND build_year > 2010;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="construct a SQL query for this problem. First, we need to filter the tunnels table to only include rows where the state is Washington and the build_year is greater than or equal to 2010. Then, we can count the number of resulting rows to find out how many tunnels were constructed after 2010 in Washington state.\n\nHere's the SQL query:\n\n```sql\nSELECT COUNT(*) FROM tunnels WHERE state = 'WA' AND build_year >= 2010;\n```\n\nThis query will return the number of tunnels constructed after 2010 in Washington state.",
    sql="Sql Prompt: How many tunnels in Washington state were constructed after 2010?\n\nSql Context: CREATE TABLE tunnels (id INT, name TEXT, state TEXT, build_year INT); INSERT INTO tunnels (id, name, state, build_year) VALUES (1, 'WA-1 Underpass', 'WA', 2012);\n\nReasoning: Let's think step by step in order to construct a SQL query for this problem. First, we need to filter the tunnels table to only include rows where the state is Washington and the build_year is greater than or equal to 2010. Then, we can count the"
), 1), (Example({'sql_prompt': 'List the top 5 models with the highest explainability scores and their development team names.', 'sql_context': 'CREATE TABLE ModelExplainabilityScores (ModelID INT, ExplainabilityScore INT, TeamID INT); CREATE TABLE TeamNames (TeamID INT, TeamName VARCHAR(50));', 'sql': 'SELECT ModelExplainabilityScores.ModelID, MAX(ModelExplainabilityScores.ExplainabilityScore) AS MaxExplainabilityScore, TeamNames.TeamName FROM ModelExplainabilityScores INNER JOIN TeamNames ON ModelExplainabilityScores.TeamID = TeamNames.TeamID GROUP BY ModelExplainabilityScores.TeamID ORDER BY MaxExplainabilityScore DESC, TeamNames.TeamName DESC LIMIT 5;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='To answer the question, we first need to join the two tables `ModelExplainabilityScores` and `TeamNames`, then sort the combined table by the explainability score in descending order, and finally select the top 5 rows. Here is the SQL query:\n\n```sql\nSELECT ModelID, TeamName\nFROM ModelExplainabilityScores\nJOIN TeamNames ON ModelExplainabilityScores.TeamID = TeamNames.TeamID\nORDER BY ExplainabilityScore DESC\nLIMIT 5;\n```\n\nThis query will return the top 5 models with the highest explainability scores and their development team names.',
    sql="Here is the completed signature:\n\nSql Prompt: List the top 5 models with the highest explainability scores and their development team names.\n\nSql Context: CREATE TABLE ModelExplainabilityScores (ModelID INT, ExplainabilityScore INT, TeamID INT); CREATE TABLE TeamNames (TeamID INT, TeamName VARCHAR(50));\n\nReasoning: Let's think step by step in order to To answer the question, we first need to join the two tables `ModelExplainabilityScores` and `TeamNames`, then sort the combined table by the explainability score in descending order, and finally select the top 5 rows. Here is the SQL"
), 1), (Example({'sql_prompt': 'How many renewable energy power plants are there in Texas?', 'sql_context': "CREATE TABLE power_plants (state VARCHAR(255), source_type VARCHAR(255), count INT); INSERT INTO power_plants (state, source_type, count) VALUES ('Texas', 'Wind', 45), ('Texas', 'Solar', 25), ('Texas', 'Hydro', 10);", 'sql': "SELECT SUM(count) FROM power_plants WHERE state = 'Texas';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="answer the question. The table `power_plants` contains information about power plants, including their state and source type (Wind, Solar, Hydro, etc.). To find out how many renewable energy power plants there are in Texas, we need to count the rows where both the state is 'Texas' and the source type is either 'Wind' or 'Solar'. Here's the SQL query:\n\n```sql\nSELECT COUNT(*) FROM power_plants WHERE state = 'Texas' AND source_type IN ('Wind', 'Solar');\n```\n\nThis query will return the number of renewable energy power plants in Texas.",
    sql="Sql Prompt: How many renewable energy power plants are there in Texas?\n\nSql Context: CREATE TABLE power_plants (state VARCHAR(255), source_type VARCHAR(255), count INT); INSERT INTO power_plants (state, source_type, count) VALUES ('Texas', 'Wind', 45), ('Texas', 'Solar', 25), ('Texas', 'Hydro', 10);\n\nReasoning: Let's think step by step in order to answer the question. The table `power_plants` contains information about power plants, including their state and source type (Wind,"
), 1), (Example({'sql_prompt': 'Find the top 5 countries with the lowest financial capability scores in Europe.', 'sql_context': 'CREATE TABLE financial_capability (id INT, country VARCHAR(255), score INT);', 'sql': "SELECT country, score FROM (SELECT country, score, ROW_NUMBER() OVER (ORDER BY score ASC) rn FROM financial_capability WHERE region = 'Europe') t WHERE rn <= 5;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the top 5 countries with the lowest financial capability scores in Europe, we can use SQL to query the `financial_capability` table and sort the results in ascending order for the 'score' column. We will then limit the results to only those rows where the 'country' is from Europe. Finally, we will select the top 5 rows with the lowest scores.\n\nHere's the SQL query:\n\n```sql\nSELECT country\nFROM financial_capability\nWHERE country LIKE '%Europe%'\nORDER BY score ASC\nLIMIT 5;\n```\n\nThis query filters the results to only include countries that contain 'Europe', sorts them in ascending order by",
    sql="Here is the completed signature for the given prompt:\n\nSql Prompt: Find the top 5 countries with the lowest financial capability scores in Europe.\n\nSql Context: CREATE TABLE financial_capability (id INT, country VARCHAR(255), score INT);\n\nReasoning: Let's think step by step in order to To find the top 5 countries with the lowest financial capability scores in Europe, we can use SQL to query the `financial_capability` table and sort the results in ascending order for the 'score' column. We will then limit the results to only those rows where the 'country' is from Europe. Finally, we will select the top 5 rows with"
), 1), (Example({'sql_prompt': 'What is the correlation between climate change and biodiversity in the Arctic?', 'sql_context': "CREATE TABLE Climate_Change (id INT PRIMARY KEY, year INT, temperature FLOAT, region VARCHAR(50)); CREATE TABLE Biodiversity (id INT, year INT, species_count INT, region VARCHAR(50), climate_id INT, FOREIGN KEY (climate_id) REFERENCES Climate_Change(id)); INSERT INTO Climate_Change (id, year, temperature, region) VALUES (1, 2000, -10.0, 'Arctic'), (2, 2010, -9.5, 'Arctic'); INSERT INTO Biodiversity (id, year, species_count, region, climate_id) VALUES (1, 2000, 100, 'Arctic', 1), (2, 2010, 105, 'Arctic', 2);", 'sql': "SELECT Climate_Change.year, Climate_Change.temperature, Biodiversity.species_count FROM Climate_Change INNER JOIN Biodiversity ON Climate_Change.id = Biodiversity.climate_id WHERE Climate_Change.region = 'Arctic';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='To answer the question "What is the correlation between climate change and biodiversity in the Arctic?", we first need to calculate some metrics that can help us understand this relationship. However, SQL alone cannot directly calculate correlations or perform complex statistical analysis. We can instead prepare the data for further analysis by calculating relevant variables such as temperature changes over time and species count changes over time.\n\nHere\'s a SQL query that will help you get started:\n\n```sql\nSELECT\n    climate_change.year AS climate_year,\n    biodiversity.year AS biodiversity_year,\n    climate_change.temperature - LAG(climate_change.temperature)',
    sql='Here is the completed signature for the Text-to-SQL generation task:\n\nSql Prompt: Calculate the temperature change and species count change in the Arctic over time.\n\nSql Context:\n```sql\nCREATE TABLE Climate_Change (id INT PRIMARY KEY, year INT, temperature FLOAT, region VARCHAR(50));\nCREATE TABLE Biodiversity (id INT, year INT, species_count INT, region VARCHAR(50), climate_id INT, FOREIGN KEY (climate_id) REFERENCES Climate_Change(id));\nINSERT INTO Climate_Change (id, year, temperature, region) VALUES (1,'
), 1), (Example({'sql_prompt': 'What is the average budget allocated for ethical AI research by country?', 'sql_context': "CREATE TABLE Country (CountryID INT PRIMARY KEY, CountryName VARCHAR(100), Budget DECIMAL(10,2)); INSERT INTO Country (CountryID, CountryName, Budget) VALUES (1, 'USA', 5000000.00), (2, 'Canada', 3000000.00), (3, 'Mexico', 1000000.00);", 'sql': 'SELECT AVG(Budget) as AvgBudget, CountryName FROM Country GROUP BY CountryName;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='To find the average budget allocated for ethical AI research by country, we first need to calculate the total budget for each country and then divide it by the number of countries. Here is the SQL query:\n\n```sql\nSELECT CountryName, (SUM(Budget) / COUNT(*)) as Average_Budget\nFROM Country\nGROUP BY CountryName;\n```\n\nThis query groups the data by country and calculates the average budget for each group. The result will show the average budget allocated for ethical AI research by country.',
    sql="Here is the completed signature:\n\nSql Prompt: What is the average budget allocated for ethical AI research by country?\n\nSql Context: CREATE TABLE Country (CountryID INT PRIMARY KEY, CountryName VARCHAR(100), Budget DECIMAL(10,2)); INSERT INTO Country (CountryID, CountryName, Budget) VALUES (1, 'USA', 5000000.00), (2, 'Canada', 3000000.00), (3, 'Mexico', 1000000.00);\n\nReasoning: Let's think step"
), 1), (Example({'sql_prompt': 'What is the total fare collected for each train line?', 'sql_context': "CREATE TABLE train_lines (line_id INT, line_name TEXT); CREATE TABLE fares (fare_id INT, line_id INT, fare DECIMAL); INSERT INTO train_lines VALUES (1, 'Line 1'), (2, 'Line 2'), (3, 'Line 3'); INSERT INTO fares VALUES (1, 1, 3.50), (2, 1, 3.50), (3, 2, 4.25), (4, 3, 5.00), (5, 3, 5.00);", 'sql': 'SELECT train_lines.line_name, SUM(fares.fare) AS total_fare FROM train_lines INNER JOIN fares ON train_lines.line_id = fares.line_id GROUP BY train_lines.line_id;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='answer the given SQL prompts:\n\n1. The provided SQL query is calculating the rank of policies based on the number of incidents they have in the \'Asia\' region, ordered by the highest incident count first. It does this by creating a subquery that counts the number of incidents for each policy type in the \'Asia\' region and then joining this subquery with the policies table to get the rank.\n\n2. The SQL query provided for the "Lifelong Learning" program counts the number of students who have submitted an assignment in the past week by filtering the lifelong_learning_students table based on the last_assignment column being greater than or equal to one week ago (DATE_',
    sql="Here is the signature for the Text-to-SQL generation task:\n\n**Sql Prompt:** What is the total fare collected for each train line?\n\n**Sql Context:** CREATE TABLE train_lines (line_id INT, line_name TEXT); CREATE TABLE fares (fare_id INT, line_id INT, fare DECIMAL); INSERT INTO train_lines VALUES (1, 'Line 1'), (2, 'Line 2'), (3, 'Line 3'); INSERT INTO fares VALUES (1, 1, 3.50), (2, 1, 3.50), (3,"
), 1), (Example({'sql_prompt': 'What is the total revenue for cosmetics products that are not cruelty-free?', 'sql_context': 'CREATE TABLE product (product_id INT, name TEXT, price FLOAT, cruelty_free BOOLEAN); CREATE TABLE sales (sale_id INT, product_id INT, quantity INT);', 'sql': 'SELECT SUM(price * quantity) FROM product INNER JOIN sales ON product.product_id = sales.product_id WHERE cruelty_free = FALSE;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="First, we need to find the non-cruelty-free cosmetics products. We can do this by filtering out the cruelty-free products from the `product` table.\n\nNext, we need to calculate the total revenue for each of these non-cruelty-free products. To do this, we'll join the `sales` table with the filtered `product` table on the `product_id` column and sum up the `quantity` multiplied by the `price`.\n\nHere is the SQL query:\n\n```sql\nSELECT SUM(s.quantity * p.price) AS total_revenue\nFROM product AS p\nJOIN",
    sql="Here is the completed signature for the Text-to-SQL generation task:\n\nSql Prompt: What is the total revenue for cosmetics products that are not cruelty-free?\n\nSql Context: CREATE TABLE product (product_id INT, name TEXT, price FLOAT, cruelty_free BOOLEAN); CREATE TABLE sales (sale_id INT, product_id INT, quantity INT);\n\nReasoning: Let's think step by step in order to First, we need to find the non-cruelty-free cosmetics products. We can do this by filtering out the cruelty-free products from the `product` table. Next, we"
), 1), (Example({'sql_prompt': 'What is the total cost of permits for projects with permit numbers greater than 700?', 'sql_context': "CREATE TABLE permit_data (id INT, project VARCHAR(50), permit_number INT, start_date DATE, permit_cost DECIMAL(10,2)); INSERT INTO permit_data (id, project, permit_number, start_date, permit_cost) VALUES (1, 'Office Building', 450, '2019-12-20', 850.00), (2, 'Residential Apartments', 751, '2021-03-01', 1200.50), (3, 'School', 333, '2020-06-15', 500.25), (4, 'Mall', 780, '2020-12-01', 1500.75);", 'sql': 'SELECT SUM(permit_cost) FROM permit_data WHERE permit_number > 700;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='construct the SQL query for this problem. First, we need to filter out the projects with permit numbers greater than 700. Then, we sum up the permit costs for these filtered projects. Here is the SQL query:\n\n```sql\nSELECT SUM(permit_cost) AS total_permit_cost FROM permit_data WHERE permit_number > 700;\n```\n\nThis query will return the total cost of permits for projects with permit numbers greater than 700.',
    sql="Here is the completed signature: Sql Prompt: What is the total cost of permits for projects with permit numbers greater than 700? Sql Context: CREATE TABLE permit_data (id INT, project VARCHAR(50), permit_number INT, start_date DATE, permit_cost DECIMAL(10,2)); INSERT INTO permit_data (id, project, permit_number, start_date, permit_cost) VALUES (1, 'Office Building', 450, '2019-12-20', 850.00), (2, 'Residential Apartments', 751, '"
), 1), (Example({'sql_prompt': 'Find the total square footage of wheelchair-accessible properties in Boston.', 'sql_context': "CREATE TABLE properties (id INT, city VARCHAR(20), square_footage INT, wheelchair_accessible BOOLEAN); INSERT INTO properties (id, city, square_footage, wheelchair_accessible) VALUES (1, 'Boston', 1000, true); INSERT INTO properties (id, city, square_footage, wheelchair_accessible) VALUES (2, 'Boston', 1200, false);", 'sql': "SELECT SUM(square_footage) FROM properties WHERE city = 'Boston' AND wheelchair_accessible = true;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Sql Prompt: To find the total square footage of wheelchair-accessible properties in Boston, we first need to filter out only the wheelchair-accessible properties located in Boston. Then, we sum up their square footage. Here is the SQL query:\n\n```sql\nSELECT SUM(square_footage) AS total_square_footage\nFROM properties\nWHERE city = 'Boston' AND wheelchair_accessible = true;\n```\n\nThis query will return the total square footage of wheelchair-accessible properties in Boston.",
    sql="Here is the completed signature:\n\nSql Prompt: Find the total square footage of wheelchair-accessible properties in Boston.\n\nSql Context: CREATE TABLE properties (id INT, city VARCHAR(20), square_footage INT, wheelchair_accessible BOOLEAN);\nINSERT INTO properties (id, city, square_footage, wheelchair_accessible) VALUES (1, 'Boston', 1000, true);\nINSERT INTO properties (id, city, square_footage, wheelchair_accessible) VALUES (2, 'Boston', 1200, false);\n\nReasoning: Let's think step by"
), 1), (Example({'sql_prompt': 'Which operators have the highest average production quantity per well?', 'sql_context': "CREATE TABLE wells (well_id INT, well_name TEXT, production_qty FLOAT, operator_id INT); INSERT INTO wells (well_id, well_name, production_qty, operator_id) VALUES (1, 'Well A', 1000, 1), (2, 'Well B', 1500, 1), (3, 'Well C', 800, 2); CREATE TABLE operators (operator_id INT, operator_name TEXT); INSERT INTO operators (operator_id, operator_name) VALUES (1, 'ABC Inc.'), (2, 'DEF'), (3, 'GHI Inc.');", 'sql': 'SELECT o.operator_name, AVG(w.production_qty) as avg_production FROM wells w JOIN operators o ON w.operator_id = o.operator_id GROUP BY o.operator_name ORDER BY avg_production DESC;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='answer the given SQL prompts.\n\n1. The provided SQL statement is calculating the rank of policies based on the number of incidents associated with each policy type in the Asia region, ordered from highest to lowest incident count. It does this by creating a subquery that counts the number of incidents for each policy type and then joining that subquery back to the policies table on the policy type.\n\n2. The SQL statement provided for the "Lifelong Learning" program counts the number of students who have submitted an assignment in the past week. It does this by filtering the lifelong_learning_students table based on the last_assignment column being greater than or equal to one week ago (DATE_SUB(',
    sql="Here is the signature for the Text-to-SQL generation task: **Sql Prompt: Which operators have the highest average production quantity per well?**\n\nSql Context: CREATE TABLE wells (well_id INT, well_name TEXT, production_qty FLOAT, operator_id INT); INSERT INTO wells (well_id, well_name, production_qty, operator_id) VALUES (1, 'Well A', 1000, 1), (2, 'Well B', 1500, 1), (3, 'Well C', 800, 2); CREATE TABLE operators (operator_id INT"
), 1), (Example({'sql_prompt': 'What was the average number of comments per post in Oceania in the last month?', 'sql_context': "CREATE TABLE comments_posts(region VARCHAR(20), post_date DATE, comments INT, posts INT); INSERT INTO comments_posts(region, post_date, comments, posts) VALUES('Oceania', '2021-09-01', 10, 10), ('Oceania', '2021-09-02', 12, 12), ('Oceania', '2021-09-03', 14, 14), ('Oceania', '2021-09-04', 16, 16), ('Oceania', '2021-09-05', 18, 18), ('Oceania', '2021-09-06', 20, 20), ('Oceania', '2021-09-07', 22, 22);", 'sql': "SELECT AVG(comments/posts) FROM comments_posts WHERE region = 'Oceania' AND post_date >= DATEADD(month, -1, CURRENT_DATE)"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='answer the given SQL prompts:\n\n1. The provided SQL statement is calculating the rank of policies based on the number of incidents they have had in the \'Asia\' region, ordered from highest to lowest. It does this by first creating a subquery that counts the number of incidents for each policy type in the \'Asia\' region and then joining this subquery with the original policies table to get the rank.\n\n2. The SQL statement provided for the "Lifelong Learning" program counts the number of students who have submitted an assignment in the past week by filtering the lifelong_learning_students table based on the last_assignment column being greater than or equal to one week ago (DATE',
    sql="Here is the completed signature for the second SQL prompt:\n\nSql Prompt: What was the average number of comments per post in Oceania in the last month?\n\nSql Context: CREATE TABLE comments_posts(region VARCHAR(20), post_date DATE, comments INT, posts INT);\nINSERT INTO comments_posts(region, post_date, comments, posts) VALUES('Oceania', '2021-09-01', 10, 10), ('Oceania', '2021-09-02', 12, 12), ('Oceania', '2021-09"
), 1), (Example({'sql_prompt': 'What is the geopolitical risk assessment score for each country in 2020?', 'sql_context': "CREATE TABLE GeopoliticalRiskAssessments (assessment_id INT, assessment_name VARCHAR(50), score INT, assessment_date DATE, country VARCHAR(50)); INSERT INTO GeopoliticalRiskAssessments (assessment_id, assessment_name, score, assessment_date, country) VALUES (1, 'Assessment A', 7, '2020-01-01', 'USA'), (2, 'Assessment B', 5, '2020-02-15', 'Russia'), (3, 'Assessment C', 8, '2020-03-31', 'China');", 'sql': "SELECT country, score FROM GeopoliticalRiskAssessments WHERE assessment_date BETWEEN '2020-01-01' AND '2020-12-31';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='answer the given SQL prompts:\n\n1. The provided SQL statement is calculating the rank of policies based on the number of incidents they have had in the Asia region, ordered from highest to lowest. It does this by first creating a subquery that counts the number of incidents for each policy type in the \'incidents\' table, where the date matches the date of the corresponding policy in the \'policies\' table and the region is \'Asia\'. Then it joins this subquery with the \'policies\' table on the policy type match.\n\n2. The SQL statement provided for the "Lifelong Learning" program counts the number of students who have submitted an assignment in the past week by filtering the \'',
    sql="Here are the signatures for the given SQL prompts:\n\n1. **SQL Prompt:** What is the geopolitical risk assessment score for each country in 2020?\n   **SQL Context:** CREATE TABLE GeopoliticalRiskAssessments (assessment_id INT, assessment_name VARCHAR(50), score INT, assessment_date DATE, country VARCHAR(50)); INSERT INTO GeopoliticalRiskAssessments (assessment_id, assessment_name, score, assessment_date, country) VALUES (1, 'Assessment A', 7, '2020-01-01', '"
), 1), (Example({'sql_prompt': 'Find the total revenue for events with an attendance over 200 in 2021.', 'sql_context': "CREATE TABLE events (event_id INT, event_name VARCHAR(50), attendance INT, revenue DECIMAL(10,2), event_date DATE); INSERT INTO events (event_id, event_name, attendance, revenue, event_date) VALUES (1, 'Art Exhibition', 250, 15000, '2021-06-01'); INSERT INTO events (event_id, event_name, attendance, revenue, event_date) VALUES (2, 'Theater Performance', 180, 12000, '2021-07-15');", 'sql': 'SELECT SUM(revenue) FROM events WHERE attendance > 200 AND YEAR(event_date) = 2021;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="find the total revenue for events with an attendance over 200 in 2021.\n\nFirst, we need to filter out the events that have an attendance greater than 200 and are held in the year 2021. We can do this by using a WHERE clause:\n\n```sql\nSELECT revenue FROM events WHERE attendance > 200 AND event_date >= '2021-01-01' AND event_date < '2022-01-01';\n```\n\nThis query will return the revenue for all events that meet the specified criteria. To get the total revenue, we can use the SUM() function:",
    sql="Sql Prompt: Find the total revenue for events with an attendance over 200 in 2021.\n\nSql Context: CREATE TABLE events (event_id INT, event_name VARCHAR(50), attendance INT, revenue DECIMAL(10,2), event_date DATE); INSERT INTO events (event_id, event_name, attendance, revenue, event_date) VALUES (1, 'Art Exhibition', 250, 15000, '2021-06-01'); INSERT INTO events (event_id, event_name, attendance, revenue, event_date)"
), 1), (Example({'sql_prompt': "find the number of records in the CommunityHealthStatistics table where the State is 'TX' and the County is 'Harris'", 'sql_context': "CREATE TABLE CommunityHealthStatistics (ID INT, State TEXT, County TEXT, Population INT, AverageIncome FLOAT); INSERT INTO CommunityHealthStatistics (ID, State, County, Population, AverageIncome) VALUES (1, 'TX', 'Harris', 4500000, 60000), (2, 'CA', 'LA', 2500000, 70000);", 'sql': "SELECT * FROM CommunityHealthStatistics WHERE State = 'TX' AND County = 'Harris';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="write the SQL query for the given prompt. The table `CommunityHealthStatistics` has columns `ID`, `State`, `County`, `Population`, and `AverageIncome`. We need to find the number of records where the `State` is 'TX' and the `County` is 'Harris'.\n\nThe SQL query would be:\n\n```sql\nSELECT COUNT(*) FROM CommunityHealthStatistics WHERE State = 'TX' AND County = 'Harris';\n```\n\nThis query selects all records from the `CommunityHealthStatistics` table where both the `State` and `County` match the given values, then counts the number of selected records.",
    sql="Here is the completed signature: Sql Prompt: find the number of records in the CommunityHealthStatistics table where the State is 'TX' and the County is 'Harris'.\n\nSql Context: CREATE TABLE CommunityHealthStatistics (ID INT, State TEXT, County TEXT, Population INT, AverageIncome FLOAT); INSERT INTO CommunityHealthStatistics (ID, State, County, Population, AverageIncome) VALUES (1, 'TX', 'Harris', 4500000, 60000), (2, 'CA', 'LA', 2500000, 70000);\n\nReasoning"
), 1), (Example({'sql_prompt': "Insert a new record into the 'weapons' table with the following data: 'Javelin', 'USA', 'in-development'", 'sql_context': "CREATE TABLE weapons (id INT PRIMARY KEY, name VARCHAR(255), origin VARCHAR(255), status VARCHAR(255)); INSERT INTO weapons (id, name, origin) VALUES (1, 'AK-47', 'Russia'), (2, 'RPG-7', 'Russia');", 'sql': "INSERT INTO weapons (name, origin, status) VALUES ('Javelin', 'USA', 'in-development');"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Insert a new record into the 'weapons' table with the following data: 'Javelin', 'USA', 'in-development'.\n\nSql Context: CREATE TABLE weapons (id INT PRIMARY KEY, name VARCHAR(255), origin VARCHAR(255), status VARCHAR(255)); INSERT INTO weapons (id, name, origin) VALUES (1, 'AK-47', 'Russia'), (2, 'RPG-7', 'Russia');\n\nIn this case, we don't have an existing id for the new record. Since the id column is set as a primary key and auto-incrementing in",
    sql="Here is the completed signature: Sql Prompt: Insert a new record into the 'weapons' table with the following data: 'Javelin', 'USA', 'in-development'. Sql Context: CREATE TABLE weapons (id INT PRIMARY KEY, name VARCHAR(255), origin VARCHAR(255), status VARCHAR(255)); INSERT INTO weapons (name, origin, status) VALUES ('Javelin', 'USA', 'in-development');\n\nReasoning: Let's think step by step in order to Insert a new record into the 'weapons' table with the following data: 'Javelin', 'USA',"
), 1), (Example({'sql_prompt': 'Count the number of mining incidents per month in 2021.', 'sql_context': "CREATE TABLE incidents (id INT, date DATE, incident_type TEXT); INSERT INTO incidents (id, date, incident_type) VALUES (1, '2021-01-05', 'equipment_failure'); INSERT INTO incidents (id, date, incident_type) VALUES (2, '2021-03-12', 'safety_violation');", 'sql': "SELECT DATE_PART('month', date) AS month, COUNT(*) FROM incidents WHERE date >= '2021-01-01' AND date < '2022-01-01' GROUP BY month;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="count the number of mining incidents per month in 2021.\n\nFirst, we need to extract the year and month from the date column. SQL provides built-in functions for this purpose: YEAR() and MONTH().\n\nNext, we group the incidents by these two columns (year and month) to count the number of incidents per combination of year and month.\n\nFinally, we want to filter the results to only include the year 2021.\n\nHere's the SQL query that accomplishes this:\n\n```sql\nSELECT YEAR(date) AS year, MONTH(date) AS month, COUNT(*) as incident_count\nFROM incidents\nW",
    sql="Here is the completed signature for the Text-to-SQL generation task:\n\nSql Prompt: Count the number of mining incidents per month in 2021.\n\nSql Context: CREATE TABLE incidents (id INT, date DATE, incident_type TEXT); INSERT INTO incidents (id, date, incident_type) VALUES (1, '2021-01-05', 'equipment_failure'); INSERT INTO incidents (id, date, incident_type) VALUES (2, '2021-03-12', 'safety_violation');\n\nReasoning: Let's think step by step"
), 1), (Example({'sql_prompt': "How many workers are employed in 'renewable energy' sector?", 'sql_context': "CREATE TABLE workers (id INT, worker_name VARCHAR(255), department VARCHAR(255)); INSERT INTO workers (id, worker_name, department) VALUES (1, 'John Doe', 'renewable energy'), (2, 'Jane Smith', 'textiles'), (3, 'Michael Brown', 'renewable energy');", 'sql': "SELECT COUNT(*) FROM workers WHERE department = 'renewable energy';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="answer the question. First, we need to filter the workers table to only include rows where the department is 'renewable energy'. Then, we count the number of rows (workers) that match this condition. Here's the SQL query for that:\n\n```sql\nSELECT COUNT(*) FROM workers WHERE department = 'renewable energy';\n```\n\nThis query will return the number of workers employed in the 'renewable energy' sector.",
    sql="Sql Prompt: To find out how many workers are employed in the 'renewable energy' sector, use this SQL query:\n\nSql Context: CREATE TABLE workers (id INT, worker_name VARCHAR(255), department VARCHAR(255)); INSERT INTO workers (id, worker_name, department) VALUES (1, 'John Doe', 'renewable energy'), (2, 'Jane Smith', 'textiles'), (3, 'Michael Brown', 'renewable energy');\n\nReasoning: Let's think step by step in order to answer the question. First, we need to filter the workers table to only include rows where the"
), 1), (Example({'sql_prompt': 'What is the average performance score for each game genre?', 'sql_context': "CREATE TABLE game_genre_performance (game_id INT, game_genre VARCHAR(255), performance_score INT); INSERT INTO game_genre_performance (game_id, game_genre, performance_score) VALUES (1, 'RPG', 85), (2, 'Strategy', 90), (3, 'RPG', 80);", 'sql': 'SELECT game_genre, AVG(performance_score) as avg_score FROM game_genre_performance GROUP BY game_genre;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="find the average performance score for each game genre. First, we need to group the data by game genre and calculate the sum of performance scores for each group. Then, we will count the number of records in each group to find the total count of games for each genre. Finally, we'll divide the sum of performance scores by the total count of games to get the average performance score for each game genre.\n\nHere is the SQL query:\n\n```sql\nSELECT game_genre, AVG(performance_score) AS avg_performance_score\nFROM game_genre_performance\nGROUP BY game_genre;\n```\n\nThis query will return a result set with two",
    sql="Here's the completed SQL query for finding the average performance score for each game genre:\n\n```sql\nSELECT game_genre, AVG(performance_score) AS avg_performance_score\nFROM game_genre_performance\nGROUP BY game_genre;\n```\n\nThis query will return a result set with two columns: `game_genre` and `avg_performance_score`. The `game_genre` column will list the different genres, while the `avg_performance_score` column will show the average performance score for each genre."
), 1), (Example({'sql_prompt': 'How many Indigenous communities in the Arctic are experiencing negative socio-economic impacts due to climate change?', 'sql_context': "CREATE TABLE IndigenousCommunities(community TEXT, socio_economic_impact TEXT, climate_change_impact TEXT); INSERT INTO IndigenousCommunities(community, socio_economic_impact, climate_change_impact) VALUES ('Inuit', 'High', 'Very High'), ('Sami', 'Medium', 'High');", 'sql': "SELECT COUNT(*) FROM IndigenousCommunities WHERE socio_economic_impact = 'High' AND climate_change_impact = 'High' OR socio_economic_impact = 'Very High' AND climate_change_impact = 'Very High';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To answer the question, we first need to filter out the Indigenous communities that are experiencing high or very high climate change impacts. Then, we count the number of communities with a corresponding high or medium socio-economic impact. Here's the SQL query:\n\n```sql\nSELECT COUNT(*) AS num_communities\nFROM IndigenousCommunities\nWHERE climate_change_impact IN ('High', 'Very High') AND socio_economic_impact IN ('High', 'Medium');\n```\n\nThis query will return the number of Indigenous communities in the Arctic experiencing negative socio-economic impacts due to climate change.",
    sql="Here is the completed SQL prompt for the given context:\n\nSql Prompt: How many Indigenous communities in the Arctic are experiencing negative socio-economic impacts due to climate change?\n\nSql Context: CREATE TABLE IndigenousCommunities(community TEXT, socio_economic_impact TEXT, climate_change_impact TEXT);\nINSERT INTO IndigenousCommunities(community, socio_economic_impact, climate_change_impact) VALUES ('Inuit', 'High', 'Very High'), ('Sami', 'Medium', 'High');\n\nReasoning: Let's think step by step in order to To answer the question,"
), 1), (Example({'sql_prompt': 'What is the minimum depth recorded in the Mariana Trench?', 'sql_context': "CREATE TABLE ocean_floor_mapping (location VARCHAR(255), depth FLOAT);   INSERT INTO ocean_floor_mapping (location, depth) VALUES ('Mariana Trench', 10994.0), ('Challenger Deep', 10972.8);", 'sql': "SELECT MIN(depth) FROM ocean_floor_mapping WHERE location = 'Mariana Trench';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="find the minimum depth recorded in the Mariana Trench.\n\nFirst, we need to identify the table that contains the data about the ocean floor mapping. In this case, it is `ocean_floor_mapping`.\n\nNext, we need to filter the records for the location of the Mariana Trench.\n\nFinally, since we are looking for the minimum depth, we can use the SQL `MIN()` function.\n\nHere's the SQL query:\n\n```sql\nSELECT MIN(depth) FROM ocean_floor_mapping WHERE location = 'Mariana Trench';\n```\n\nThis query will return the minimum depth recorded in the Mariana Trench.",
    sql="Sql Prompt: What is the minimum depth recorded in the Mariana Trench?\n\nSql Context: CREATE TABLE ocean_floor_mapping (location VARCHAR(255), depth FLOAT); INSERT INTO ocean_floor_mapping (location, depth) VALUES ('Mariana Trench', 10994.0), ('Challenger Deep', 10972.8);\n\nReasoning: Let's think step by step in order to find the minimum depth recorded in the Mariana Trench. First, we need to identify the table that contains the data about the ocean floor mapping. In this case, it is `ocean_floor_mapping"
), 1), (Example({'sql_prompt': 'List all farmers who have not serviced their irrigation systems in the last 6 months.', 'sql_context': "CREATE TABLE farmer_irrigation (id INT, farmer_id INT, system_type VARCHAR(50), service_date DATE); INSERT INTO farmer_irrigation (id, farmer_id, system_type, service_date) VALUES (1, 1, 'Drip', '2021-08-01'), (2, 2, 'Sprinkler', '2021-10-15'), (3, 3, 'Drip', '2021-11-01'), (4, 4, 'Sprinkler', '2022-02-01'), (5, 5, 'Drip', '2022-03-01'), (6, 6, 'Sprinkler', '2022-01-15'), (7, 7, 'Drip', '2021-06-01'), (8, 8, 'Sprinkler', '2022-04-01'), (9, 9, 'Drip', '2021-12-01'), (10, 10, 'Sprinkler', '2022-05-15');", 'sql': 'SELECT farmers.name FROM farmers LEFT JOIN farmer_irrigation ON farmers.id = farmer_irrigation.farmer_id WHERE farmer_irrigation.service_date <= DATE_SUB(CURDATE(), INTERVAL 6 MONTH);'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='answer the given SQL prompts:\n\n1. The provided SQL statement is calculating the rank of policies based on the number of incidents they have had in the Asia region, ordered from highest to lowest. It does this by first creating a subquery that counts the number of incidents for each policy type in the \'incidents\' table, where the date matches the date of the corresponding policy in the \'policies\' table and the region is \'Asia\'. Then it joins this subquery with the \'policies\' table on the policy type match.\n\n2. The SQL statement provided for the "Lifelong Learning" program counts the number of students who have submitted an assignment in the past week by filtering the \'',
    sql="Here is the completed signature for the second SQL prompt:\n\nSql Prompt: List all farmers who have not serviced their irrigation systems in the last 6 months.\n\nSql Context: CREATE TABLE farmer_irrigation (id INT, farmer_id INT, system_type VARCHAR(50), service_date DATE);\nINSERT INTO farmer_irrigation (id, farmer_id, system_type, service_date) VALUES (1, 1, 'Drip', '2021-08-01'), (2, 2, 'Sprinkler', '2021-10-15'), (3,"
), 1), (Example({'sql_prompt': 'What is the most common type of medical equipment across hospitals?', 'sql_context': "CREATE TABLE medical_equipment (id INT, hospital_name TEXT, location TEXT, equipment TEXT, quantity INT, last_updated_date DATE); INSERT INTO medical_equipment (id, hospital_name, location, equipment, quantity, last_updated_date) VALUES (1, 'NY Presbyterian', 'NYC', 'Ventilators', 80, '2021-03-31'); INSERT INTO medical_equipment (id, hospital_name, location, equipment, quantity, last_updated_date) VALUES (2, 'Stanford Hospital', 'Palo Alto', 'Ventilators', 90, '2021-03-31');", 'sql': 'SELECT equipment, MAX(quantity) as max_quantity FROM medical_equipment GROUP BY equipment ORDER BY max_quantity DESC LIMIT 1;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='find the most common type of medical equipment across hospitals. First, we need to count the number of each type of equipment for each hospital and then find the total count for each equipment type across all hospitals. Here is the SQL query that accomplishes this:\n\n```sql\nSELECT equipment, COUNT(*) as total_quantity\nFROM medical_equipment\nGROUP BY equipment\nORDER BY total_quantity DESC\nLIMIT 1;\n```\n\nThis query groups the data by equipment type and counts the number of each type. It then orders the results in descending order based on the count, so the most common type will be at the top. Finally, it limits the result set to only show',
    sql="Here is the completed signature: Sql Prompt: Find the most common type of medical equipment across hospitals. Sql Context: CREATE TABLE medical_equipment (id INT, hospital_name TEXT, location TEXT, equipment TEXT, quantity INT, last_updated_date DATE); INSERT INTO medical_equipment (id, hospital_name, location, equipment, quantity, last_updated_date) VALUES (1, 'NY Presbyterian', 'NYC', 'Ventilators', 80, '2021-03-31'), (2, 'Stanford Hospital', 'Palo Alto', 'Ventilators', 90"
), 1), (Example({'sql_prompt': "What is the average rating for 'Gluten-Free' items?", 'sql_context': "CREATE TABLE ratings (item_name TEXT, is_gluten_free BOOLEAN, rating INTEGER); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Quinoa Salad', true, 4); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Chicken Stir Fry', false, 5);", 'sql': 'SELECT AVG(rating) FROM ratings WHERE is_gluten_free = true;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='answer the given SQL prompts:\n\n1. The provided SQL query calculates the rank of policies based on the number of incidents they have in the \'Asia\' region, ordered from highest to lowest. To adapt this query for a different context, you would need to replace the table and column names with those that match your database schema. For example:\n\n```sql\nSELECT program, COUNT(*) as student_count FROM lifelong_learning_students GROUP BY program ORDER BY student_count DESC;\n```\n\nThis query calculates the number of students in each program within the "Lifelong Learning" program.\n\n2. The provided SQL query counts the number',
    sql="Here is the completed signature for the second SQL prompt: Sql Prompt: What is the average rating for 'Gluten-Free' items? Sql Context: CREATE TABLE ratings (item_name TEXT, is_gluten_free BOOLEAN, rating INTEGER); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Quinoa Salad', true, 4); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Chicken Stir Fry', false, 5); Reasoning: Let's think step by step in order to answer the given SQL prompts:\n1"
), 1), (Example({'sql_prompt': 'How many water treatment facilities are there in each country, and what is their distribution by continent?', 'sql_context': "CREATE TABLE facilities (id INT, facility_name VARCHAR(50), country VARCHAR(50), total_employees INT); INSERT INTO facilities (id, facility_name, country, total_employees) VALUES (1, 'Water Treatment Plant 1', 'Brazil', 25); INSERT INTO facilities (id, facility_name, country, total_employees) VALUES (2, 'Water Treatment Plant 2', 'India', 30);", 'sql': 'SELECT country, COUNT(*) as facility_count, CONTINENT(location) as continent FROM facilities JOIN countries ON facilities.country = countries.country_name GROUP BY country, continent;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To answer the question, we first need to group the water treatment facilities by their respective countries and then count them. After that, we can use subqueries or joins to further group these counts by continent. Here's a SQL query that achieves this:\n\n```sql\nSELECT continent, COUNT(*) as facility_count\nFROM (\n    SELECT country, continent FROM facilities\n    JOIN continents ON facilities.country = continents.country\n) AS subquery\nGROUP BY continent;\n```\n\nIn the above query, we first create a subquery that joins the `facilities` table with a hypothetical `continents` table (assuming it exists and",
    sql="Here is the completed signature for the given SQL prompt:\n\nSql Prompt: How many water treatment facilities are there in each country, and what is their distribution by continent?\n\nSql Context: CREATE TABLE facilities (id INT, facility_name VARCHAR(50), country VARCHAR(50), total_employees INT); INSERT INTO facilities (id, facility_name, country, total_employees) VALUES (1, 'Water Treatment Plant 1', 'Brazil', 25); INSERT INTO facilities (id, facility_name, country, total_employees) VALUES (2, 'Water Treatment Plant 2',"
), 0), (Example({'sql_prompt': "What is the maximum data usage in the 'urban' region?", 'sql_context': "CREATE TABLE subscribers (id INT, name VARCHAR(50), data_usage FLOAT, region VARCHAR(20)); INSERT INTO subscribers (id, name, data_usage, region) VALUES (1, 'John Doe', 20.0, 'urban'), (2, 'Jane Doe', 18.0, 'urban');", 'sql': "SELECT MAX(data_usage) FROM subscribers WHERE region = 'urban';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="find the maximum data usage in the 'urban' region from the given SQL context and table `subscribers`.\n\nFirst, we need to query the `subscribers` table for all records where the region is 'urban'. To do this, we can use a simple SELECT statement:\n\n```sql\nSELECT data_usage FROM subscribers WHERE region = 'urban';\n```\n\nThis will return a list of data usage values for all subscribers in the urban region. However, to find the maximum value, we need to apply an aggregate function like `MAX()`. So, the final query would be:\n\n```sql\nSELECT MAX(data_usage) FROM",
    sql="Here is the completed signature: Sql Prompt: What is the maximum data usage in the 'urban' region? Sql Context: CREATE TABLE subscribers (id INT, name VARCHAR(50), data_usage FLOAT, region VARCHAR(20)); INSERT INTO subscribers (id, name, data_usage, region) VALUES (1, 'John Doe', 20.0, 'urban'), (2, 'Jane Doe', 18.0, 'urban'); Reasoning: Let's think step by step in order to find the maximum data usage in the 'urban' region from the given SQL context and table"
), 1), (Example({'sql_prompt': 'Find the average depth of all underwater volcanoes in the Atlantic Ocean.', 'sql_context': "CREATE TABLE underwater_volcanoes (id INT, name VARCHAR(50), depth FLOAT, ocean VARCHAR(20)); INSERT INTO underwater_volcanoes (id, name, depth, ocean) VALUES (1, 'Lost City', 800, 'Atlantic'); INSERT INTO underwater_volcanoes (id, name, depth, ocean) VALUES (2, 'Eyjafjallajokull', 1650, 'Atlantic');", 'sql': "SELECT AVG(depth) FROM underwater_volcanoes WHERE ocean = 'Atlantic';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the average depth of all underwater volcanoes in the Atlantic Ocean, we first need to filter the data for only those volcanoes located in the Atlantic Ocean. Then, we calculate the average depth using the `AVG()` function. Here's the SQL query:\n\n```sql\nSELECT AVG(depth) AS avg_depth FROM underwater_volcanoes WHERE ocean = 'Atlantic';\n```\n\nThis query will return the average depth of all underwater volcanoes located in the Atlantic Ocean.",
    sql="Here is the completed signature:\n\nSql Prompt: Find the average depth of all underwater volcanoes in the Atlantic Ocean.\n\nSql Context: CREATE TABLE underwater_volcanoes (id INT, name VARCHAR(50), depth FLOAT, ocean VARCHAR(20));\nINSERT INTO underwater_volcanoes (id, name, depth, ocean) VALUES (1, 'Lost City', 800, 'Atlantic');\nINSERT INTO underwater_volcanoes (id, name, depth, ocean) VALUES (2, 'Eyjafjallajokull', 1650,"
), 1), (Example({'sql_prompt': 'What is the total cost of Mars rover missions that have successfully landed?', 'sql_context': 'CREATE TABLE mars_rovers (id INT PRIMARY KEY, name VARCHAR(255), mission_type VARCHAR(255), agency VARCHAR(255), cost FLOAT, launched_date DATE, landed_date DATE);', 'sql': "SELECT SUM(cost) FROM mars_rovers WHERE mission_type = 'Lander' AND landed_date IS NOT NULL;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='To find the total cost of Mars rover missions that have successfully landed, we first need to filter out the successful landings from the `mars_rovers` table. Then, we sum up the costs of these successful missions. Here is the SQL query:\n\n```sql\nSELECT SUM(cost) as total_cost FROM mars_rovers WHERE landed_date IS NOT NULL;\n```\n\nThis query selects all rows where `landed_date` is not null (meaning the rover has successfully landed on Mars), and then sums up their costs. The result will be the total cost of successful Mars rover missions.',
    sql="Here's the completed SQL prompt for your question:\n\nSql Prompt: What is the total cost of Mars rover missions that have successfully landed?\n\nSql Context: CREATE TABLE mars_rovers (id INT PRIMARY KEY, name VARCHAR(255), mission_type VARCHAR(255), agency VARCHAR(255), cost FLOAT, launched_date DATE, landed_date DATE);\n\nReasoning: To find the total cost of Mars rover missions that have successfully landed, we first need to filter out the successful landings from the `mars_rovers` table. Then, we sum up the costs of these successful missions. Here"
), 1), (Example({'sql_prompt': "What is the earliest year a peacekeeping operation was conducted in 'Asia'?", 'sql_context': "CREATE TABLE Peacekeeping_Years (id INT, location VARCHAR(30), year INT); INSERT INTO Peacekeeping_Years (id, location, year) VALUES (1, 'Asia', 1990), (2, 'Asia', 2000);", 'sql': "SELECT MIN(year) FROM Peacekeeping_Years WHERE location = 'Asia';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To find the earliest year a peacekeeping operation was conducted in 'Asia', we can simply query the Peacekeeping_Years table and filter for the location 'Asia'. Here is the SQL command:\n\n```sql\nSELECT MIN(year) FROM Peacekeeping_Years WHERE location = 'Asia';\n```\n\nThis command will return the minimum year (earliest year) a peacekeeping operation was conducted in Asia.",
    sql="Sql Prompt: What is the earliest year a peacekeeping operation was conducted in 'Asia'?\n\nSql Context: CREATE TABLE Peacekeeping_Years (id INT, location VARCHAR(30), year INT); INSERT INTO Peacekeeping_Years (id, location, year) VALUES (1, 'Asia', 1990), (2, 'Asia', 2000);\n\nReasoning: Let's think step by step in order to To find the earliest year a peacekeeping operation was conducted in 'Asia', we can simply query the Peacekeeping_Years table and filter for the location 'Asia'. Here is the SQL command"
), 1), (Example({'sql_prompt': 'Identify the drug with the lowest sales amount in Europe in 2022.', 'sql_context': "CREATE TABLE sales (drug_name TEXT, continent TEXT, sales_amount INT, sale_date DATE); INSERT INTO sales (drug_name, continent, sales_amount, sale_date) VALUES ('Aspirin', 'Europe', 1000, '2022-01-01');", 'sql': "SELECT drug_name, MIN(sales_amount) FROM sales WHERE continent = 'Europe' AND sale_date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY drug_name;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To identify the drug with the lowest sales amount in Europe in 2022, we can use a SQL query that filters the data based on the required conditions and sorts it to find the minimum value. Here is the SQL query for this task:\n\n```sql\nSELECT drug_name\nFROM sales\nWHERE continent = 'Europe' AND sale_date = '2022-01-01'\nORDER BY sales_amount ASC\nLIMIT 1;\n```\n\nThis query filters the `sales` table for rows where the continent is Europe and the sale date is in 2022. It then sorts the results by sales amount in ascending order (smallest",
    sql="Here is the completed signature:\n\nSql Prompt: Identify the drug with the lowest sales amount in Europe in 2022.\n\nSql Context: CREATE TABLE sales (drug_name TEXT, continent TEXT, sales_amount INT, sale_date DATE); INSERT INTO sales (drug_name, continent, sales_amount, sale_date) VALUES ('Aspirin', 'Europe', 1000, '2022-01-01');\n\nReasoning: Let's think step by step in order to To identify the drug with the lowest sales amount in Europe in 2022, we can use a SQL query"
), 1), (Example({'sql_prompt': "Insert a new record into 'customer_preferences' for customer 101 and menu item 1 with a preference score of 90", 'sql_context': 'CREATE TABLE customer_preferences (customer_id INT, item_id INT, preference_score INT);', 'sql': 'INSERT INTO customer_preferences (customer_id, item_id, preference_score) VALUES (101, 1, 90);'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Insert the new record into the 'customer_preferences' table for customer 101 and menu item 1 with a preference score of 90.",
    sql="INSERT INTO customer_preferences (customer_id, item_id, preference_score) VALUES (101, 1, 90);\n\nThis SQL statement will create a new row in the 'customer_preferences' table with the specified values for customer_id, item_id, and preference_score."
), 1), (Example({'sql_prompt': 'Who is the oldest donor from each city?', 'sql_context': "CREATE TABLE donors_2 (id INT PRIMARY KEY, name VARCHAR(50), age INT, city VARCHAR(50), state VARCHAR(50)); INSERT INTO donors_2 (id, name, age, city, state) VALUES (1, 'John Doe', 35, 'New York', 'NY'), (2, 'Jane Smith', 40, 'Buffalo', 'NY'), (3, 'Mike Johnson', 50, 'Boston', 'MA');", 'sql': 'SELECT city, MAX(age) as oldest_donor_age FROM donors_2 GROUP BY city;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='find the oldest donor from each city. First, we need to group the data by city and select the maximum age for each city. Then, we can join this result back with the original table to get the names of the donors. Here is the SQL query:\n\n```sql\nSELECT d1.name, d1.city, d1.age AS oldest_age, d2.age AS current_age\nFROM donors_2 AS d1\nJOIN (\n    SELECT city, MAX(age) AS max_age\n    FROM donors_2\n    GROUP BY city\n) AS d2 ON d1.city = d2.city AND d1.age',
    sql="Here is the completed signature for the Text-to-SQL generation task:\n\nSql Prompt: Who is the oldest donor from each city?\n\nSql Context: CREATE TABLE donors_2 (id INT PRIMARY KEY, name VARCHAR(50), age INT, city VARCHAR(50), state VARCHAR(50)); INSERT INTO donors_2 (id, name, age, city, state) VALUES (1, 'John Doe', 35, 'New York', 'NY'), (2, 'Jane Smith', 40, 'Buffalo', 'NY'), (3, 'Mike Johnson', 50, 'B"
), 1), (Example({'sql_prompt': 'What are the union membership statistics for unions that have engaged in successful collective bargaining in the healthcare sector?', 'sql_context': "CREATE TABLE Membership (UnionName TEXT, Sector TEXT, MemberCount INT); INSERT INTO Membership (UnionName, Sector, MemberCount) VALUES ('UnionHealthA', 'Healthcare', 3000), ('UnionHealthB', 'Healthcare', 5000), ('UnionHealthC', 'Healthcare', 2000);", 'sql': "SELECT UnionName, MemberCount FROM Membership WHERE Sector = 'Healthcare' AND UnionName IN (SELECT UnionName FROM CBAs WHERE ExpirationDate > CURDATE());"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="find the union membership statistics for unions that have engaged in successful collective bargaining in the healthcare sector. First, we need to identify which unions have successfully engaged in collective bargaining in the healthcare sector. Since there is no information about successful collective bargaining in the provided context, let's assume that all unions in the 'Healthcare' sector have been successful.\n\nNext, we can use the SQL `SELECT` statement to retrieve the union membership statistics for these unions. Here's an example query:\n\n```sql\nSELECT UnionName, Sector, MemberCount FROM Membership WHERE Sector = 'Healthcare';\n```\n\nThis query will return the union name, sector, and member",
    sql="Here is the completed signature: Sql Prompt: What are the union membership statistics for unions that have engaged in successful collective bargaining in the healthcare sector? Sql Context: CREATE TABLE Membership (UnionName TEXT, Sector TEXT, MemberCount INT); INSERT INTO Membership (UnionName, Sector, MemberCount) VALUES ('UnionHealthA', 'Healthcare', 3000), ('UnionHealthB', 'Healthcare', 5000), ('UnionHealthC', 'Healthcare', 2000); Reasoning: Let's think step by step in order to find the union membership statistics for unions that have engaged in successful collective bargaining in the"
), 1), (Example({'sql_prompt': 'Calculate the total gas consumption for Nigeria in 2019', 'sql_context': "CREATE TABLE gas_consumption (country VARCHAR(50), consumption_year INT, gas_consumption FLOAT); INSERT INTO gas_consumption (country, consumption_year, gas_consumption) VALUES ('Nigeria', 2019, 12000), ('Nigeria', 2018, 10000), ('Ghana', 2019, 8000), ('Ghana', 2018, 6000), ('Ivory Coast', 2019, 10000), ('Ivory Coast', 2018, 8000);", 'sql': "SELECT gas_consumption FROM gas_consumption WHERE country = 'Nigeria' AND consumption_year = 2019;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="To calculate the total gas consumption for Nigeria in 2019, we can use a SQL query that filters the data based on the country and year. Here is the SQL query:\n\n```sql\nSELECT SUM(gas_consumption) AS total_gas_consumption FROM gas_consumption WHERE country = 'Nigeria' AND consumption_year = 2019;\n```\n\nThis query will sum up all the gas consumption values for Nigeria in the year 2019, giving us the total gas consumption for that specific region and time period.",
    sql="Here is the completed signature:\n\nSql Prompt: Calculate the total gas consumption for Nigeria in 2019\n\nSql Context: CREATE TABLE gas_consumption (country VARCHAR(50), consumption_year INT, gas_consumption FLOAT); INSERT INTO gas_consumption (country, consumption_year, gas_consumption) VALUES ('Nigeria', 2019, 12000), ('Nigeria', 2018, 10000), ('Ghana', 2019, 8000), ('Ghana', 2018, 60"
), 1), (Example({'sql_prompt': 'What is the average socially responsible lending loan amount for microfinance institutions in Southeast Asia?', 'sql_context': "CREATE TABLE socially_responsible_lending(id INT, loan_number INT, institution_region VARCHAR(50), amount INT); INSERT INTO socially_responsible_lending VALUES (1, 701, 'Southeast Asia', 5000); INSERT INTO socially_responsible_lending VALUES (2, 702, 'South Asia', 7000); INSERT INTO socially_responsible_lending VALUES (3, 703, 'East Asia', 9000); INSERT INTO socially_responsible_lending VALUES (4, 704, 'Southeast Asia', 6000);", 'sql': "SELECT AVG(amount) FROM socially_responsible_lending WHERE institution_region = 'Southeast Asia' AND type = 'microfinance';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='To answer the question "What is the average socially responsible lending loan amount for microfinance institutions in Southeast Asia?", we first need to calculate the total loan amount and the count of loans for microfinance institutions in Southeast Asia. Then, we can find the average by dividing the total amount by the count.\n\nHere\'s the SQL query:\n\n```sql\nSELECT AVG(amount) AS average_loan_amount\nFROM socially_responsible_lending\nWHERE institution_region = \'Southeast Asia\';\n```\n\nThis query will return the average loan amount for microfinance institutions in Southeast Asia.',
    sql="Here is the completed signature:\n\nSql Prompt: What is the average socially responsible lending loan amount for microfinance institutions in Southeast Asia?\n\nSql Context: CREATE TABLE socially_responsible_lending(id INT, loan_number INT, institution_region VARCHAR(50), amount INT); INSERT INTO socially_responsible_lending VALUES (1, 701, 'Southeast Asia', 5000); INSERT INTO socially_responsible_lending VALUES (2, 702, 'South Asia', 7000); INSERT INTO socially_responsible_"
), 1), (Example({'sql_prompt': 'What is the average salary of employees who identify as Latinx in the Engineering department?', 'sql_context': "CREATE TABLE Employees (EmployeeID int, Name varchar(50), Gender varchar(10), Department varchar(50), Salary decimal(10,2), Ethnicity varchar(50)); INSERT INTO Employees (EmployeeID, Name, Gender, Department, Salary, Ethnicity) VALUES (1, 'Juan Garcia', 'Male', 'Engineering', 85000.00, 'Latinx'); INSERT INTO Employees (EmployeeID, Name, Gender, Department, Salary, Ethnicity) VALUES (2, 'Maria Rodriguez', 'Female', 'Engineering', 90000.00, 'Latinx');", 'sql': "SELECT AVG(Salary) FROM Employees WHERE Department = 'Engineering' AND Ethnicity = 'Latinx';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='To answer the question "What is the average salary of employees who identify as Latinx in the Engineering department?", we can use the SQL `SELECT` statement with an aggregate function (in this case, `AVG()`) and a `WHERE` clause to filter the results. Here\'s how you can write the query:\n\n```sql\nSELECT AVG(Salary) AS average_salary\nFROM Employees\nWHERE Ethnicity = \'Latinx\' AND Department = \'Engineering\';\n```\n\nThis query calculates the average salary of employees who identify as Latinx and work in the Engineering department by filtering the `Employees` table based on the specified conditions',
    sql="Here is the completed signature:\n\nSql Prompt: What is the average salary of employees who identify as Latinx in the Engineering department?\n\nSql Context: CREATE TABLE Employees (EmployeeID int, Name varchar(50), Gender varchar(10), Department varchar(50), Salary decimal(10,2), Ethnicity varchar(50));\nINSERT INTO Employees (EmployeeID, Name, Gender, Department, Salary, Ethnicity) VALUES (1, 'Juan Garcia', 'Male', 'Engineering', 85000.00, 'Latinx');\nINSERT IN"
), 1), (Example({'sql_prompt': 'What is the name and type of the vessel with the highest average speed?', 'sql_context': "CREATE TABLE Vessels (ID VARCHAR(20), Name VARCHAR(20), Type VARCHAR(20), AverageSpeed FLOAT); INSERT INTO Vessels VALUES ('V012', 'Vessel L', 'Passenger', 35.0), ('V013', 'Vessel M', 'Cargo', 19.5), ('V014', 'Vessel N', 'Passenger', 32.0);", 'sql': 'SELECT Name, Type FROM Vessels WHERE AverageSpeed = (SELECT MAX(AverageSpeed) FROM Vessels);'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='To find the name and type of the vessel with the highest average speed, we can use SQL to query the `Vessels` table and sort the results based on the average speed in descending order. Here is the SQL command for that:\n\n```sql\nSELECT Name, Type FROM Vessels ORDER BY AverageSpeed DESC LIMIT 1;\n```\n\nThis command will return the name and type of the vessel with the highest average speed from the `Vessels` table. If there are multiple vessels tied for the highest average speed, it will only return one of them. To get all of them, you can use the `LIMIT 1 OFFSET 0` syntax to skip zero rows and',
    sql="Here is the completed signature: Sql Prompt: What is the name and type of the vessel with the highest average speed? Sql Context: CREATE TABLE Vessels (ID VARCHAR(20), Name VARCHAR(20), Type VARCHAR(20), AverageSpeed FLOAT); INSERT INTO Vessels VALUES ('V012', 'Vessel L', 'Passenger', 35.0), ('V013', 'Vessel M', 'Cargo', 19.5), ('V014', 'Vessel N', 'Passenger', 32.0); Reasoning: Let's think step by step"
), 1), (Example({'sql_prompt': "List all the distinct producers of Gadolinium from the 'production' table, ordered alphabetically.", 'sql_context': 'CREATE TABLE production (element VARCHAR(10), year INT, month INT, producer VARCHAR(20), quantity INT);', 'sql': "SELECT DISTINCT producer FROM production WHERE element = 'Gadolinium' ORDER BY producer ASC;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Sql: SELECT DISTINCT producer FROM production WHERE element = 'Gadolinium' ORDER BY producer ASC;\n\nThis SQL query will list all the distinct producers of Gadolinium from the 'production' table, ordered alphabetically. The reasoning behind this is that we are filtering the 'production' table to only include rows where the element is 'Gadolinium'. Then, we use the DISTINCT keyword to remove any duplicate producers and finally order the results alphabetically using the ORDER BY clause with the ASC (ascending) sort order.",
    sql="Here is the completed signature for the given prompt:\n\nSql Prompt: List all the distinct producers of Gadolinium from the 'production' table, ordered alphabetically.\n\nSql Context: CREATE TABLE production (element VARCHAR(10), year INT, month INT, producer VARCHAR(20), quantity INT);\n\nReasoning: Let's think step by step in order to\n\n---\n\nSql Prompt: Find the total quantity of Gadolinium produced in 2020.\n\nSql Context: CREATE TABLE production (element VARCHAR(10), year INT, month INT, producer VARCHAR(20), quantity INT);\n\nReason"
), 1)]