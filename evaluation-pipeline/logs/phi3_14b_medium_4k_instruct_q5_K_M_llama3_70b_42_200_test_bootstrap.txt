[(Example({'sql_prompt': 'What are the names and descriptions of violations for food trucks in Los Angeles that serve vegan food?', 'sql_context': 'CREATE TABLE FoodTruck (id INT PRIMARY KEY, name VARCHAR(255), type VARCHAR(255), location VARCHAR(255)); CREATE TABLE Violation (id INT PRIMARY KEY, food_truck_id INT, date DATE, description VARCHAR(255)); CREATE TABLE Menu (id INT PRIMARY KEY, food_truck_id INT, name VARCHAR(255), vegan BOOLEAN);', 'sql': "SELECT f.name, v.description FROM FoodTruck f INNER JOIN Violation v ON f.id = v.food_truck_id INNER JOIN Menu m ON f.id = m.food_truck_id WHERE m.vegan = TRUE AND f.location = 'Los Angeles';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the names and descriptions of violations for food trucks in Los Angeles that serve vegan food, we need to join the three tables (FoodTruck, Violation, Menu) based on their relationships. We will filter the results to include only those entries where the location is 'Los Angeles' and the menu item is marked as vegan.\n\nHere's the SQL query:\n\n```sql\nSELECT ft.name AS food_truck_name, v.description AS violation_description\nFROM FoodTruck ft\nJOIN Violation v ON ft.id = v.food_truck_id\nJOIN Menu m ON ft.id = m.food_",
    sql="SELECT ft.name AS food_truck_name, v.description AS violation_description \nFROM FoodTruck ft \nJOIN Violation v ON ft.id = v.food_truck_id \nJOIN Menu m ON ft.id = m.food_truck_id \nWHERE ft.location = 'Los Angeles' AND m.vegan = TRUE;"
), 0), (Example({'sql_prompt': 'How many Kilograms of Neodymium were produced in each country between 2012 and 2014?', 'sql_context': "CREATE TABLE neodymium_production (country VARCHAR(255), year INT, kilograms_produced INT); INSERT INTO neodymium_production (country, year, kilograms_produced) VALUES ('China', 2012, 60000), ('China', 2013, 65000), ('China', 2014, 70000), ('Australia', 2012, 3000), ('Australia', 2013, 3500), ('Australia', 2014, 4000), ('Brazil', 2012, 2000), ('Brazil', 2013, 2500), ('Brazil', 2014, 3000);", 'sql': 'SELECT country, year, SUM(kilograms_produced) FROM neodymium_production WHERE year BETWEEN 2012 AND 2014 GROUP BY ROLLUP(country, year);'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find out how many kilograms of Neodymium were produced in each country between the years 2012 and 2014, we need to write an SQL query that selects the relevant data from the neodymium_production table. We will group the results by country and sum up the kilograms_produced for the specified time period.\n\nHere's the SQL query:\n\n```sql\nSELECT \n    country,\n    SUM(kilograms_produced) AS total_kg_produced\nFROM \n    neodymium_production\nWHERE \n    year BETWEEN 2012 AND 2014\nGROUP",
    sql='SELECT country, SUM(kilograms_produced) AS total_kg_produced FROM neodymium_production WHERE year BETWEEN 2012 AND 2014 GROUP BY country;'
), 1), (Example({'sql_prompt': 'How many crime incidents were reported in each borough of New York City in the year 2020?', 'sql_context': "CREATE TABLE crime_incidents (id INT, incident_type VARCHAR(255), borough VARCHAR(255), report_date DATE); INSERT INTO crime_incidents (id, incident_type, borough, report_date) VALUES (1, 'Theft', 'Manhattan', '2020-01-01'), (2, 'Assault', 'Brooklyn', '2020-01-02');", 'sql': 'SELECT borough, YEAR(report_date) AS year, COUNT(*) AS incident_count FROM crime_incidents GROUP BY borough, year;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the number of crime incidents reported in each borough of New York City for the year 2020, we need to count the rows grouped by the 'borough' column while filtering the data based on the 'report_date'.",
    sql='SELECT borough, COUNT(*) as incident_count FROM crime_incidents WHERE YEAR(report_date) = 2020 GROUP BY borough;'
), 1), (Example({'sql_prompt': 'What is the total number of mobile and broadband subscribers for each technology, ranked in descending order?', 'sql_context': "CREATE TABLE mobile_subscribers (subscriber_id INT, technology VARCHAR(20), region VARCHAR(50)); INSERT INTO mobile_subscribers (subscriber_id, technology, region) VALUES (1, '4G', 'North'), (2, '5G', 'North'), (3, '3G', 'South'), (4, '5G', 'East'); CREATE TABLE broadband_subscribers (subscriber_id INT, technology VARCHAR(20), region VARCHAR(50)); INSERT INTO broadband_subscribers (subscriber_id, technology, region) VALUES (5, 'Fiber', 'North'), (6, 'Cable', 'North'), (7, 'Fiber', 'West'), (8, 'DSL', 'East');", 'sql': "SELECT 'Mobile' AS source, technology, COUNT(*) AS total FROM mobile_subscribers GROUP BY technology UNION ALL SELECT 'Broadband' AS source, technology, COUNT(*) AS total FROM broadband_subscribers GROUP BY technology ORDER BY total DESC;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the total number of mobile and broadband subscribers for each technology, ranked in descending order, we need to combine data from both `mobile_subscribers` and `broadband_subscribers` tables. We can do this using a UNION ALL query to merge the two sets of data into one result set, then group by technology and count the number of subscribers for each technology. Finally, we'll order the results in descending order based on the total number of subscribers.\n\nHere is the SQL query:\n\n```sql\nSELECT technology, COUNT(*) AS total_subscribers\nFROM (\n    SELECT technology FROM mobile_subscribers\n    UNION ALL\n    SELECT technology",
    sql='SELECT technology, COUNT(*) AS total_subscribers \nFROM (\n    SELECT technology FROM mobile_subscribers\n    UNION ALL\n    SELECT technology FROM broadband_subscribers\n) AS combined_technologies\nGROUP BY technology\nORDER BY total_subscribers DESC;'
), 1), (Example({'sql_prompt': 'What is the total number of hospital beds in each country in the Asia continent?', 'sql_context': "CREATE TABLE Countries (Country VARCHAR(50), Continent VARCHAR(50), Hospital_Beds INT); INSERT INTO Countries (Country, Continent, Hospital_Beds) VALUES ('India', 'Asia', 500000), ('China', 'Asia', 700000), ('Japan', 'Asia', 300000);", 'sql': "SELECT Country, SUM(Hospital_Beds) FROM Countries WHERE Continent = 'Asia' GROUP BY Country WITH ROLLUP;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the total number of hospital beds in each country within the Asia continent, we need to filter the data based on the "Continent" column and then group the results by the "Country" column. The SQL query will sum up the "Hospital_Beds" for each country that belongs to the \'Asia\' continent.\n\nHere is the SQL query:\n\n```sql\nSELECT Country, SUM(Hospital_Beds) as Total_Hospital_Beds\nFROM Countries\nWHERE Continent = \'Asia\'\nGROUP BY Country;\n```',
    sql="SELECT Country, SUM(Hospital_Beds) AS Total_Hospital_Beds FROM Countries WHERE Continent = 'Asia' GROUP BY Country;"
), 1), (Example({'sql_prompt': 'What was the average production cost per gram for each strain grown in Colorado in 2020?', 'sql_context': "CREATE TABLE Production (id INT, strain TEXT, state TEXT, cost_per_gram FLOAT); INSERT INTO Production (id, strain, state, cost_per_gram) VALUES (1, 'Strain X', 'CO', 5.00), (2, 'Strain Y', 'CO', 7.00), (3, 'Strain Z', 'CO', 3.00);", 'sql': "SELECT strain, AVG(cost_per_gram) FROM Production WHERE state = 'CO' GROUP BY strain;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the average production cost per gram for each strain grown in Colorado in 2CY, we need to filter the Production table based on the state and year of growth (assuming that the 'id' column represents the year). Then, we can calculate the average cost_per_gram for each strain.\n\nHowever, since there is no direct way to determine the year from the given SQL context, I will assume that the id column corresponds to the year 2020 (as per your prompt) and proceed with the query accordingly:\n\n```sql\nSELECT strain, AVG(cost_per_gram) AS avg_production_cost_per_gram\nFROM Production\nWHERE state",
    sql="SELECT strain, AVG(cost_per_gram) AS avg_production_cost_per_gram FROM Production WHERE state = 'CO' AND id = 2020 GROUP BY strain;"
), 0), (Example({'sql_prompt': 'What is the total number of packages shipped from each warehouse in the province of Ontario, Canada in the month of June?', 'sql_context': "CREATE TABLE warehouses (id INT, city VARCHAR(255), state VARCHAR(255), country VARCHAR(255)); CREATE TABLE packages (id INT, warehouse_id INT, weight INT, shipped_date DATE); INSERT INTO packages (id, warehouse_id, weight, shipped_date) VALUES (1, 1, 50, '2022-06-01'), (2, 2, 30, '2022-06-02'), (3, 3, 40, '2022-06-03'); INSERT INTO warehouses (id, city, state, country) VALUES (1, 'Toronto', 'Ontario', 'Canada'), (2, 'Montreal', 'Quebec', 'Canada'), (3, 'Vancouver', 'British Columbia', 'Canada');", 'sql': "SELECT warehouses.city, COUNT(*) FROM packages JOIN warehouses ON packages.warehouse_id = warehouses.id WHERE warehouses.state = 'Ontario' AND warehouses.country = 'Canada' AND MONTH(packages.shipped_date) = 6 GROUP BY warehouses.city;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the total number of packages shipped from each warehouse in the province of Ontario, Canada in the month of June, we need to join the `warehouses` and `packages` tables on their respective IDs. Then, filter for warehouses located in Ontario, Canada, and package shipments that occurred in June 2022. Finally, group by the warehouse ID or name (if needed) and count the number of packages shipped from each warehouse.\n\nHere's the SQL query to achieve this:\n\n```sql\nSELECT\n    w.id AS warehouse_id,\n    w.city,\n    COUNT(p.id) AS total",
    sql="SELECT w.id AS warehouse_id, w.city, COUNT(p.id) AS total_packages_shipped\nFROM warehouses w\nJOIN packages p ON w.id = p.warehouse_id\nWHERE w.state = 'Ontario' AND w.country = 'Canada'\nAND EXTRACT(MONTH FROM p.shipped_date) = 6 AND EXTRACT(YEAR FROM p.shipped_date) = 2022\nGROUP BY w.id, w.city;"
), 1), (Example({'sql_prompt': 'List the top 5 aircraft models with the most flight hours in the Southwest region.', 'sql_context': "CREATE TABLE Flight_Hours (aircraft_model VARCHAR(255), region VARCHAR(255), flight_hours INT); INSERT INTO Flight_Hours (aircraft_model, region, flight_hours) VALUES ('B737', 'Southwest', 5000), ('A320', 'Northeast', 6000), ('B737', 'Southwest', 5500);", 'sql': "SELECT aircraft_model, SUM(flight_hours) FROM Flight_Hours WHERE region = 'Southwest' GROUP BY aircraft_model ORDER BY SUM(flight_hours) DESC LIMIT 5;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To list the top 5 aircraft models with the most flight hours in the Southwest region, we need to filter records for the "Southwest" region and then group them by the aircraft model. After grouping, we will sum up the flight hours for each model and sort the results in descending order based on the total flight hours. Finally, we\'ll limit our result set to the top 5 models with the most flight hours.\n\nHere is the SQL query that accomplishes this:\n\n```sql\nSELECT aircraft_model, SUM(flight_hours) AS total_flight_hours\nFROM Flight_Hours\nWHERE region = \'Southwest\'\nGROUP BY aircraft_model',
    sql='ORDER BY total_flight_hours DESC LIMIT 5;'
), 0), (Example({'sql_prompt': "Insert a new record into the 'FireDepartments' table with the following data: '890', 'Eastside Fire Department', 2000", 'sql_context': 'CREATE TABLE FireDepartments (DepartmentID INT PRIMARY KEY, DepartmentName VARCHAR(50), EstablishedYear INT);', 'sql': "INSERT INTO FireDepartments (DepartmentID, DepartmentName, EstablishedYear) VALUES (890, 'Eastside Fire Department', 2000);"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To insert a new record into the 'FireDepartments' table with the provided data ('890', 'Eastside Fire Department', 2000), we need to use an INSERT INTO statement. The SQL command will look like this:\n\n```sql\nINSERT INTO FireDepartments (DepartmentID, DepartmentName, EstablishedYear) VALUES (890, 'Eastside Fire Department', 2000);\n```\n\nThis statement adds a new row to the `FireDepartments` table with the specified values for each column.",
    sql="INSERT INTO FireDepartments (DepartmentID, DepartmentName, EstablishedYear) VALUES (890, 'Eastside Fire Department', 2000);"
), 1), (Example({'sql_prompt': 'What is the total number of marine species in each region?', 'sql_context': "CREATE TABLE marine_species (name VARCHAR, region VARCHAR); INSERT INTO marine_species (name, region) VALUES ('Dolphin', 'Atlantic'), ('Shark', 'Pacific'), ('Clownfish', 'Indian');", 'sql': 'SELECT region, COUNT(*) FROM marine_species GROUP BY region;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the total number of marine species in each region, we need to count the occurrences of regions within the `marine_species` table. This will give us an idea of how many different species are found in each geographical area.\n\nHere is the SQL query that accomplishes this:\n\n```sql\nSELECT region, COUNT(*) as total_species FROM marine_species GROUP BY region;\n```\n\nThis query groups the records by `region` and counts the number of rows (i.e., species) in each group using the `COUNT(*)` function. The result will show us the total number of marine species found in each region, as represented in our sample data.',
    sql='SELECT region, COUNT(*) AS total_species FROM marine_species GROUP BY region;'
), 1), (Example({'sql_prompt': 'List the number of public parks in New York state and their respective areas in square meters.', 'sql_context': "CREATE TABLE parks (name VARCHAR(255), state VARCHAR(255), area_sqm INT); INSERT INTO parks (name, state, area_sqm) VALUES ('Central Park', 'New York', 341160000), ('Prospect Park', 'New York', 58500000);", 'sql': "SELECT name, state, area_sqm FROM parks WHERE state = 'New York';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To list the number of public parks in New York state and their respective areas in square meters, we need to select from the `parks` table where the state is 'New York'. We will also count the total number of parks and sum up their areas.",
    sql="SELECT COUNT(*) as num_of_parks, SUM(area_sqm) as total_area_sqm FROM parks WHERE state = 'New York';"
), 0), (Example({'sql_prompt': 'Who are the top 3 goal scorers in the FIFA World Cup?', 'sql_context': "CREATE TABLE world_cup_goals (player_name TEXT, goals INT); INSERT INTO world_cup_goals (player_name, goals) VALUES ('Miroslav Klose', 16), ('Ronaldo', 15), ('Gerd Muller', 14);", 'sql': 'SELECT player_name, goals FROM world_cup_goals ORDER BY goals DESC LIMIT 3;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the top 3 goal scorers in the FIFA World Cup, we need to sort the players based on their goals scored and limit the result set to only include the top 3. Here is the SQL query that accomplishes this task:',
    sql='SELECT player_name, goals FROM world_cup_goals ORDER BY goals DESC LIMIT 3;'
), 1), (Example({'sql_prompt': 'Who are the top content creators in terms of representation?', 'sql_context': "CREATE TABLE content_creators (id INT, name VARCHAR, country VARCHAR, views INT, represents_group BOOLEAN); INSERT INTO content_creators (id, name, country, views, represents_group) VALUES (1, 'CreatorA', 'USA', 100000, true); INSERT INTO content_creators (id, name, country, views, represents_group) VALUES (2, 'CreatorB', 'Canada', 150000, false);", 'sql': 'SELECT name, views FROM content_creators WHERE represents_group = true ORDER BY views DESC LIMIT 5;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To identify the top content creators in terms of representation, we need to focus on those who represent a group and have high view counts. We can use the `content_creators` table for this purpose. The SQL query should filter out only those creators who represent a group (i.e., where `represents_group` is true) and then order them by their views in descending order to get the top content creators at the top of the list.\n\nHere's how you can write the SQL query:\n\n```sql\nSELECT id, name, country, views \nFROM content_creators \nWHERE represents_group = TRUE \nORDER BY views DESC;\n```",
    sql='SELECT id, name, country, views FROM content_creators WHERE represents_group = TRUE ORDER BY views DESC;'
), 0), (Example({'sql_prompt': "Which station on the 'Red' line has the lowest fare collection?", 'sql_context': "CREATE TABLE routes (line VARCHAR(10), station VARCHAR(20)); INSERT INTO routes (line, station) VALUES ('Red', 'Station X'), ('Red', 'Station Y'), ('Red', 'Station Z'); CREATE TABLE fares (station VARCHAR(20), revenue DECIMAL(10, 2)); INSERT INTO fares (station, revenue) VALUES ('Station X', 3000), ('Station X', 3500), ('Station Y', 2000), ('Station Z', 1500), ('Station Z', 1800);", 'sql': "SELECT station, MIN(revenue) FROM fares WHERE station IN (SELECT station FROM routes WHERE line = 'Red') GROUP BY station;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the station on the 'Red' line with the lowest fare collection, we need to sum up the revenue for each station and then select the one with the minimum total. Here is how you can write the SQL query:",
    sql="SELECT r.station, SUM(f.revenue) as total_revenue FROM routes r JOIN fares f ON r.station = f.station WHERE r.line = 'Red' GROUP BY r.station ORDER BY total_revenue ASC LIMIT 1;"
), 0), (Example({'sql_prompt': 'What is the minimum number of public participations in any initiative?', 'sql_context': 'CREATE TABLE participations (initiative_id INT, num_participants INT); INSERT INTO participations (initiative_id, num_participants) VALUES (1, 500), (2, 700), (3, 300), (4, 800), (5, 100);', 'sql': 'SELECT MIN(num_participants) FROM participations;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the minimum number of public participations in any initiative, we need to select the smallest value from the num_participants column in the participations table. We can achieve this using the MIN() aggregate function. Here is the SQL query:',
    sql='SELECT MIN(num_participants) FROM participations;'
), 1), (Example({'sql_prompt': "Update the customer_sizes table to change the size to 'Small' for the customer_id 1002", 'sql_context': "CREATE TABLE customer_sizes (customer_id INT PRIMARY KEY, size VARCHAR(255)); INSERT INTO customer_sizes (customer_id, size) VALUES (1001, 'Medium'), (1002, 'Large'), (1003, 'Small');", 'sql': "UPDATE customer_sizes SET size = 'Small' WHERE customer_id = 1002;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To update the `size` column for a specific `customer_id`, we need to use an UPDATE statement. The SQL query should target only the row where `customer_id` is 1002 and set its size value to 'Small'.\n\nHere's how you can write this SQL command:\n\n```sql\nUPDATE customer_sizes\nSET size = 'Small'\nWHERE customer_id = 1002;\n```\n\nThis query will change the `size` of the customer with ID 1002 to 'Small'.",
    sql="UPDATE customer_sizes SET size = 'Small' WHERE customer_id = 1002;"
), 0), (Example({'sql_prompt': 'What is the total number of veteran job applications in Texas in the last year?', 'sql_context': "CREATE TABLE veteran_jobs (id INT, state VARCHAR(50), application_date DATE); INSERT INTO veteran_jobs (id, state, application_date) VALUES (1, 'Texas', '2021-02-15'), (2, 'California', '2021-04-10'), (3, 'Texas', '2022-01-05');", 'sql': "SELECT COUNT(*) FROM veteran_jobs WHERE state = 'Texas' AND application_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the total number of veteran job applications in Texas for the last year, we need to count all entries from the `veteran_jobs` table where the state is 'Texas' and the application date falls within the previous 12 months.\n\nHere's how you can write the SQL query:\n\n```sql\nSELECT COUNT(*) AS total_applications\nFROM veteran_jobs\nWHERE state = 'Texas' AND application_date >= CURDATE() - INTERVAL 1 YEAR;\n```\n\nThis query will return a single row with the column `total_applications` containing the count of all job applications from Texas in the last year.",
    sql="SELECT COUNT(*) AS total_applications FROM veteran_jobs WHERE state = 'Texas' AND application_date >= CURDATE() - INTERVAL 1 YEAR;"
), 0), (Example({'sql_prompt': 'What are the advertising impressions for posts in a specific time range?', 'sql_context': "CREATE TABLE ads (id INT PRIMARY KEY, post_id INT, impressions INT, timestamp TIMESTAMP); INSERT INTO ads (id, post_id, impressions, timestamp) VALUES (1, 1, 500, '2022-01-01 10:00:00'); INSERT INTO ads (id, post_id, impressions, timestamp) VALUES (2, 2, 750, '2022-01-02 11:00:00');", 'sql': "SELECT p.content, a.impressions FROM posts p INNER JOIN ads a ON p.id = a.post_id WHERE a.timestamp BETWEEN '2022-01-01 00:00:00' AND '2022-01-07 23:59:59';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the advertising impressions for posts within a specific time range, we need to filter the data based on the timestamp column. We can use the BETWEEN operator or specify the start and end dates directly in the WHERE clause.\n\nAssuming you want to get the total number of impressions between January 1st, 2022, and January 31st, 2022:',
    sql="SELECT SUM(impressions) FROM ads WHERE timestamp BETWEEN '2022-01-01 00:00:00' AND '2022-01-31 23:59:59"
), 1), (Example({'sql_prompt': 'What was the number of volunteers who contributed more than 10 hours to the "Music Outreach" program?', 'sql_context': "CREATE TABLE volunteers_2 (program VARCHAR(255), hours INT); INSERT INTO volunteers_2 (program, hours) VALUES ('Music Outreach', 12), ('Music Outreach', 8), ('Theater Education', 15);", 'sql': "SELECT COUNT(*) FROM volunteers_2 WHERE program = 'Music Outreach' AND hours > 10;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the number of volunteers who contributed more than 10 hours to the "Music Outreach" program, we need to filter the records based on both the program name and the number of hours. The SQL query should select only those entries where the `program` column matches \'Music Outreach\' and the `hours` column is greater than 10.\n\nHere\'s how you can write the SQL statement:\n\n```sql\nSELECT COUNT(*) AS volunteers_count FROM volunteers_2 WHERE program = \'Music Outreach\' AND hours > 10;\n```\n\nThis query will return a single row with the count of all such volunteers.',
    sql="SELECT COUNT(*) AS volunteers_count FROM volunteers_2 WHERE program = 'Music Outreach' AND hours > 10;"
), 1), (Example({'sql_prompt': 'What are the user privacy settings related to data sharing?', 'sql_context': 'CREATE TABLE privacy_settings (id INT PRIMARY KEY, user_id INT, data_sharing BOOLEAN, sharing_preferences TEXT); INSERT INTO privacy_settings (id, user_id, data_sharing, sharing_preferences) VALUES (1, 1, FALSE, \'{"location": false, "purchase_history": true}\'); INSERT INTO privacy_settings (id, user_id, data_sharing, sharing_preferences) VALUES (2, 2, TRUE, \'{"location": true, "purchase_history": false}\');', 'sql': "SELECT u.name, ps.data_sharing, JSON_EXTRACT(ps.sharing_preferences, '$.location') as location_sharing FROM users u INNER JOIN privacy_settings ps ON u.id = ps.user_id WHERE JSON_EXTRACT(ps.sharing_preferences, '$.location') = 'true';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the user privacy settings related to data sharing, we need to query the `privacy_settings` table and extract information about whether users have opted for data sharing (`data_sharing`) and what their specific preferences are (`sharing_preferences`).\n\nWe can use a SQL SELECT statement with JSON functions (assuming that the database system supports them, such as PostgreSQL or MySQL 5.7+), to extract and display this information in an organized manner:\n\n```sql\nSELECT user_id, data_sharing, sharing_preferences ->> 'location' AS location_sharing, sharing_preferences ->> 'purchase_history' AS purchase_history_sh",
    sql="```sql\nSELECT \n    user_id, \n    data_sharing, \n    CASE WHEN JSON_EXTRACT(sharing_preferences, '$.location') = 'true' THEN TRUE ELSE FALSE END AS location_sharing,\n    CASE WHEN JSON_EXTRACT(sharing_preferences, '$.purchase_history') = 'true' THEN TRUE ELSE FALSE END AS purchase_history_sharing\nFROM \n    privacy_settings;\n```"
), 0), (Example({'sql_prompt': 'How many vessels have not had an inspection in the past year?', 'sql_context': "CREATE TABLE safety_records(id INT, vessel_name VARCHAR(50), inspection_date DATE); CREATE TABLE vessels(id INT, name VARCHAR(50), country VARCHAR(50)); INSERT INTO vessels(id, name, country) VALUES (1, 'Vessel A', 'Philippines'), (2, 'Vessel B', 'Philippines'); INSERT INTO safety_records(id, vessel_name, inspection_date) VALUES (1, 'Vessel A', '2022-01-01');", 'sql': 'SELECT COUNT(*) FROM vessels WHERE name NOT IN (SELECT vessel_name FROM safety_records WHERE inspection_date BETWEEN DATE_SUB(NOW(), INTERVAL 1 YEAR) AND NOW());'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find out how many vessels have not had an inspection in the past year, we need to identify all vessels and then exclude those that have been inspected within the last 365 days. We can achieve this using a LEFT JOIN between the `vessels` table and the `safety_records` table on vessel name/id (assuming there's an ID column in both tables for joining), filtering out records with recent inspections, and counting the remaining vessels.\n\nHere is the SQL query:\n\n```sql\nSELECT COUNT(DISTINCT v.name) AS uninspected_vessels\nFROM vessels v\nLEFT JOIN safety_records sr ON v.id",
    sql='SELECT COUNT(DISTINCT v.name) AS uninspected_vessels \nFROM vessels v \nLEFT JOIN safety_records sr ON v.id = sr.id AND v.name = sr.vessel_name \nWHERE sr.inspection_date < CURDATE() - INTERVAL 1 YEAR OR sr.inspection_date IS NULL;'
), 0), (Example({'sql_prompt': 'What are the names and research interests of all faculty members who have published in the Journal of Computer Science?', 'sql_context': "CREATE TABLE Faculty (FacultyID INT, Name VARCHAR(50), ResearchInterest VARCHAR(50)); INSERT INTO Faculty VALUES (1, 'John Doe', 'Machine Learning'); CREATE TABLE Publications (PublicationID INT, Title VARCHAR(50), FacultyID INT); INSERT INTO Publications VALUES (1, 'Journal of Computer Science', 1);", 'sql': "SELECT Faculty.Name, Faculty.ResearchInterest FROM Faculty INNER JOIN Publications ON Faculty.FacultyID = Publications.FacultyID WHERE Publications.Title = 'Journal of Computer Science';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the names and research interests of all faculty members who have published in the Journal of Computer Science, we need to join the Faculty table with the Publications table based on the FacultyID. Then, filter the results for publications that are specifically from the Journal of Computer Science.',
    sql="SELECT f.Name, f.ResearchInterest FROM Faculty AS f JOIN Publications AS p ON f.FacultyID = p.FacultyID WHERE p.Title LIKE '%Journal of Computer Science%';"
), 1), (Example({'sql_prompt': 'Identify the top 3 rural counties with the highest percentage of residents who have been vaccinated against influenza.', 'sql_context': "CREATE TABLE county (name VARCHAR(50), population INT, flu_vaccinations INT); INSERT INTO county (name, population, flu_vaccinations) VALUES ('Woodland', 5000, 3000); INSERT INTO county (name, population, flu_vaccinations) VALUES ('Prairie', 6000, 4500); INSERT INTO county (name, population, flu_vaccinations) VALUES ('Mountain', 7000, 5500); INSERT INTO county (name, population, flu_vaccinations) VALUES ('Seaside', 8000, 6500);", 'sql': 'SELECT name, (flu_vaccinations * 100.0 / population) AS percentage FROM county ORDER BY percentage DESC LIMIT 3;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To identify the top 3 rural counties with the highest percentage of residents who have been vaccinated against influenza, we need to calculate the vaccination rate for each county and then sort them in descending order. After that, we can select the top 3 counties based on their vaccination rates.\n\nHere's the SQL query:\n\n```sql\nSELECT name, (flu_vaccinations * 100.0 / population) AS vaccination_rate\nFROM county\nORDER BY vaccination_rate DESC\nLIMIT 3;\n```\n\nThis query calculates the percentage of residents who have been vaccinated against influenza for each county",
    sql='SELECT name, (flu_vaccinations * 100.0 / population) AS vaccination_rate FROM county ORDER BY vaccination_rate DESC LIMIT 3;'
), 1), (Example({'sql_prompt': 'For the technology_accessibility table, return the device_type and user_count for the rows with the 50th, 75th, and 90th percentile user_count values, in ascending order.', 'sql_context': 'CREATE TABLE technology_accessibility (device_type VARCHAR(255), user_count INT);', 'sql': 'SELECT device_type, user_count FROM (SELECT device_type, user_count, NTILE(4) OVER (ORDER BY user_count) as percentile FROM technology_accessibility) tmp WHERE percentile IN (2, 3, 4) ORDER BY user_count ASC;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the device types corresponding to the 50th, 75th, and 90th percentile values of `user_count`, we can use window functions like NTILE() or PERCENTILE_CONT(). However, since SQL does not directly support selecting rows based on percentiles without a specific row number, we'll need to calculate the approximate positions for these percentiles and then select the corresponding device types.\n\nHere is an example using the `PERCENTILE_CONT` function within a Common Table Expression (CTE) to find the 50th, 75th, and 90th percentile values of user counts:\n\n```sql",
    sql='WITH Percentiles AS (\n    SELECT device_type,\n           PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY user_count) OVER () AS p50,\n           PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY user_count) OVER () AS p75,\n           PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY user_count) OVER () AS p90\n    FROM technology_accessibility\n), RankedDevices AS (\n    SELECT device_type,\n           user_count,\n           NTILE(4) OVER'
), 0), (Example({'sql_prompt': "What is the code name and launch date of the most recent military satellite in the 'satellite_data' table?", 'sql_context': "CREATE TABLE satellite_data (id INT PRIMARY KEY, sat_name VARCHAR(100), launch_date DATE, country VARCHAR(50), purpose VARCHAR(50)); INSERT INTO satellite_data (id, sat_name, launch_date, country, purpose) VALUES (1, 'KH-11', '2021-04-01', 'USA', 'Reconnaissance'), (2, 'Yaogan-34', '2020-10-10', 'China', 'Remote Sensing');", 'sql': 'SELECT sat_name, launch_date FROM satellite_data ORDER BY launch_date DESC LIMIT 1;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the code name and launch date of the most recent military satellite from the `satellite_data` table, we need to filter for satellites with a purpose related to military operations. Then, we can sort these records by their launch dates in descending order and select the topmost record which will be the most recent one.\n\nHere's how you could write this SQL query:\n\n```sql\nSELECT sat_name, launch_date \nFROM satellite_data \nWHERE purpose LIKE '%Military%' \nORDER BY launch_date DESC \nLIMIT 1;\n```\n\nThis query will return the code name and launch date of the most recent military satellite.",
    sql="SELECT sat_name, launch_date FROM satellite_data WHERE purpose LIKE '%Military%' ORDER BY launch_date DESC LIMIT 1;"
), 0), (Example({'sql_prompt': "Delete fare information for rider 'John Smith'", 'sql_context': "CREATE TABLE riders (rider_id INT, name VARCHAR(255)); INSERT INTO riders (rider_id, name) VALUES (1, 'John Smith'); CREATE TABLE fares (fare_id INT, rider_id INT, fare_amount DECIMAL(5,2));", 'sql': "DELETE FROM fares WHERE rider_id = (SELECT rider_id FROM riders WHERE name = 'John Smith');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To delete fare information for the rider named 'John Smith', we first need to identify his `rider_id` from the `riders` table. Once we have that ID, we can use it to delete the corresponding entries in the `fares` table.\n\nHere's how you would do this:\n\n1. Find John Smith's rider_id by executing a SELECT query on the riders table where name is 'John Smith':\n```sql\nSELECT rider_id FROM riders WHERE name = 'John Smith';\n```\n2. Assuming that the above query returns 1 as the `rider_id` for John Smith, we can now delete fare information related to him",
    sql="DELETE FROM fares WHERE rider_id = (SELECT rider_id FROM riders WHERE name = 'John Smith');"
), 0), (Example({'sql_prompt': 'Get the number of unique genres represented by artists from the United Kingdom.', 'sql_context': "CREATE TABLE artists (id INT, name TEXT, genre TEXT, country TEXT); INSERT INTO artists (id, name, genre, country) VALUES (1, 'Adele', 'Pop', 'United Kingdom');", 'sql': "SELECT COUNT(DISTINCT genre) FROM artists WHERE country = 'United Kingdom';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To get the number of unique genres represented by artists from the United Kingdom, we need to select distinct genres where the artist\'s country is "United Kingdom". The SQL query for this would be as follows:',
    sql="SELECT COUNT(DISTINCT genre) FROM artists WHERE country = 'United Kingdom';"
), 1), (Example({'sql_prompt': 'List chemicals manufactured in 2021 and 2022.', 'sql_context': "CREATE TABLE Chemicals (Id INT, Name VARCHAR(50), Type VARCHAR(50), ManufacturingDate DATE); INSERT INTO Chemicals (Id, Name, Type, ManufacturingDate) VALUES (1, 'Acetone', 'Solvent', '2021-01-01'), (2, 'Ammonia', 'Gas', '2022-02-01');", 'sql': 'SELECT * FROM Chemicals WHERE YEAR(ManufacturingDate) IN (2021, 2022);'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To list the chemicals manufactured in 2021 and 2022 from the Chemicals table, we need to filter records based on their ManufacturingDate falling within these two years. We can use the YEAR() function to extract the year part of the date and then compare it with the desired years (2021 and 2022).\n\nHere's the SQL query:\n\n```sql\nSELECT Id, Name, Type, ManufacturingDate\nFROM Chemicals\nWHERE YEAR(ManufacturingDate) IN (2021, 2022);\n```\n\nThis query selects all columns from the Chemicals table and filters",
    sql='SELECT Id, Name, Type, ManufacturingDate FROM Chemicals WHERE YEAR(ManufacturingDate) IN (2021, 2022);'
), 1), (Example({'sql_prompt': 'What is the total construction labor cost for plumbers in Georgia?', 'sql_context': "CREATE TABLE construction_labor (state VARCHAR(20), job VARCHAR(50), cost FLOAT); INSERT INTO construction_labor VALUES ('Georgia', 'Plumber', 58.0), ('Georgia', 'Plumber', 59.0), ('Georgia', 'Carpenter', 52.0);", 'sql': "SELECT SUM(cost) FROM construction_labor WHERE state = 'Georgia' AND job = 'Plumber';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the total construction labor cost for plumbers in Georgia, we need to sum up all the costs associated with plumbing jobs within the state of Georgia from the `construction_labor` table. We can achieve this using a SQL query that filters records based on the job type (Plumber) and the state (Georgia), then sums up the cost column for those filtered records.\n\nHere's the SQL query to accomplish this:\n\n```sql\nSELECT SUM(cost) AS total_plumbing_labor_cost\nFROM construction_labor\nWHERE job = 'Plumber' AND state = 'Georgia';\n```",
    sql="SELECT SUM(cost) AS total_plumbing_labor_cost FROM construction_labor WHERE job = 'Plumber' AND state = 'Georgia';"
), 1), (Example({'sql_prompt': 'What is the total fare revenue of buses in New York on a given day?', 'sql_context': "CREATE TABLE bus_rides (id INT, route_id INT, timestamp TIMESTAMP, fare DECIMAL);  CREATE VIEW daily_bus_revenue AS SELECT route_id, SUM(fare) as daily_revenue FROM bus_rides WHERE DATE(timestamp) = '2023-03-16' GROUP BY route_id;", 'sql': " SELECT SUM(daily_revenue) as total_daily_revenue FROM daily_bus_revenue JOIN bus_stops ON daily_bus_revenue.route_id = bus_stops.id WHERE location LIKE 'New York%';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the total fare revenue of buses in New York on a given day, we can use the `daily_bus_revenue` view that has already been created. This view aggregates the sum of fares for each route based on the date provided.\n\nSince you\'ve mentioned "a given day," let\'s assume you want to find out the total fare revenue for March 16, 2023 (as an example). You can use the following SQL query:\n\n```sql\nSELECT SUM(daily_revenue) AS total_fare_revenue FROM daily_bus_revenue;\n```\n\nThis query will give you the sum of all fare reven',
    sql='SELECT SUM(daily_revenue) AS total_fare_revenue FROM daily_bus_revenue;'
), 0), (Example({'sql_prompt': 'List all autonomous bus routes and their operating companies in Tokyo, Japan.', 'sql_context': 'CREATE TABLE autonomous_buses (bus_id INT, route VARCHAR(100), company VARCHAR(100), city VARCHAR(50));', 'sql': "SELECT route, company FROM autonomous_buses WHERE city = 'Tokyo';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To list all autonomous bus routes and their operating companies in Tokyo, Japan, we need to filter the data based on the \'city\' column for "Tokyo" and then select the relevant columns such as \'route\' and \'company\'. The SQL query would be:',
    sql="SELECT route, company FROM autonomous_buses WHERE city = 'Tokyo';"
), 1), (Example({'sql_prompt': "Update the name of the government program in the state of California with the ID of 3 to 'Program X'.", 'sql_context': "CREATE TABLE programs (id INT, name VARCHAR(255), budget FLOAT, state VARCHAR(255)); INSERT INTO programs (id, name, budget, state) VALUES (1, 'Program A', 2.5, 'Florida'), (2, 'Program B', 1.2, 'Florida'), (3, 'Program C', 1.8, 'California');", 'sql': "UPDATE programs SET name = 'Program X' WHERE id = 3 AND state = 'California';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To update the name of the government program with ID 3 for the state of California, we need to use an UPDATE statement that targets the specific row based on its unique identifier (ID). The SQL command should set the new name 'Program X' where the id is equal to 3 and the state is 'California'.\n\nHere's how you can write the SQL query:\n\n```sql\nUPDATE programs\nSET name = 'Program X'\nWHERE id = 3 AND state = 'California';\n```\n\nThis command will change the program name to 'Program X' for the row with ID 3 in the state of California.",
    sql="UPDATE programs SET name = 'Program X' WHERE id = 3 AND state = 'California';"
), 1), (Example({'sql_prompt': "Who are the suppliers for the 'metal' department in factory 2?", 'sql_context': "CREATE TABLE factories (factory_id INT, department VARCHAR(20)); INSERT INTO factories (factory_id, department) VALUES (1, 'textile'), (2, 'metal'), (3, 'textile'); CREATE TABLE suppliers (supplier_id INT, factory_id INT, supplier_name VARCHAR(30)); INSERT INTO suppliers (supplier_id, factory_id, supplier_name) VALUES (1, 1, 'Supplier A'), (2, 2, 'Supplier B'), (3, 2, 'Supplier C'), (4, 3, 'Supplier D');", 'sql': "SELECT supplier_name FROM suppliers WHERE factory_id = 2 AND department = 'metal';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the suppliers for the 'metal' department in factory 2, we need to join the factories and suppliers tables based on the factory_id. Then, filter the results to only include rows where the department is 'metal' and the factory_id corresponds to factory 2.",
    sql="SELECT s.supplier_name FROM suppliers AS s JOIN factories AS f ON s.factory_id = f.factory_id WHERE f.department = 'metal' AND f.factory_id = 2;"
), 0), (Example({'sql_prompt': 'What is the average price of organic skincare products sold in the US?', 'sql_context': 'CREATE TABLE products (product_id INT, product_name VARCHAR(255), price DECIMAL(5,2), is_organic BOOLEAN, country VARCHAR(255));', 'sql': "SELECT AVG(price) FROM products WHERE is_organic = TRUE AND country = 'US';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the average price of organic skincare products sold in the US, we need to filter the `products` table for rows where `is_organic` is true (indicating that the product is an organic skincare product) and `country` is 'US' (indicating that the product was sold in the United States). Then, we can calculate the average price of these filtered products.\n\nHere's the SQL query to achieve this:\n\n```sql\nSELECT AVG(price) AS avg_organic_skincare_price\nFROM products\nWHERE is_organic = TRUE AND country = 'US';\n```",
    sql="SELECT AVG(price) AS avg_organic_skincare_price FROM products WHERE is_organic = TRUE AND country = 'US';"
), 1), (Example({'sql_prompt': 'What is the maximum rent for sustainable buildings in San Francisco?', 'sql_context': "CREATE TABLE Rents (RentID int, BuildingID int, Rent int, City varchar(20), Sustainable varchar(5)); CREATE TABLE Buildings (BuildingID int, Certification varchar(20)); INSERT INTO Rents (RentID, BuildingID, Rent, City, Sustainable) VALUES (1, 1, 2000, 'San Francisco', 'Yes'); INSERT INTO Buildings (BuildingID, Certification) VALUES (1, 'Green');", 'sql': "SELECT MAX(Rent) FROM Rents INNER JOIN Buildings ON Rents.BuildingID = Buildings.BuildingID WHERE Rents.City = 'San Francisco' AND Buildings.Certification IS NOT NULL;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the maximum rent for sustainable buildings in San Francisco, we need to join the Rents table with the Buildings table on BuildingID. Then, filter the results based on the city being "San Francisco" and the building being marked as sustainable ("Yes"). Finally, select the maximum rent value from these filtered records.',
    sql="SELECT MAX(Rent) FROM Rents INNER JOIN Buildings ON Rents.BuildingID = Buildings.BuildingID WHERE City = 'San Francisco' AND Sustainable = 'Yes';"
), 1), (Example({'sql_prompt': 'What is the total quantity of sustainable raw materials consumed by factories in Africa?', 'sql_context': "CREATE TABLE SustainableRawMaterials (id INT, material VARCHAR(50), quantity INT); INSERT INTO SustainableRawMaterials (id, material, quantity) VALUES (1, 'Organic Cotton', 5000), (2, 'Reclaimed Wood', 2000), (3, 'Regenerated Leather', 3000); CREATE TABLE AfricanFactories (id INT, factory_name VARCHAR(50), material VARCHAR(50), quantity INT); INSERT INTO AfricanFactories (id, factory_name, material, quantity) VALUES (1, 'GreenFactory', 'Organic Cotton', 2000), (2, 'EcoTextiles', 'Reclaimed Wood', 1000), (3, 'SustainableWeaves', 'Regenerated Leather', 1500);", 'sql': 'SELECT SUM(AfricanFactories.quantity) FROM SustainableRawMaterials INNER JOIN AfricanFactories ON SustainableRawMaterials.material = AfricanFactories.material;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the total quantity of sustainable raw materials consumed by factories in Africa, we need to join the `SustainableRawMaterials` table with the `AfricanFactories` table on the material column. Then, we can sum up the quantities for each material and group them accordingly.',
    sql='SELECT srm.material, SUM(af.quantity) as total_consumed FROM SustainableRawMaterials srm JOIN AfricanFactories af ON srm.material = af.material GROUP BY srm.material;'
), 0), (Example({'sql_prompt': 'Get the number of bridges built in each decade since 1950', 'sql_context': 'CREATE TABLE Bridges (bridge_id int, bridge_name varchar(255), year int, location varchar(255));', 'sql': 'SELECT (year - 1900) / 10 AS decade, COUNT(*) FROM Bridges WHERE year >= 1950 GROUP BY decade;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To get the number of bridges built in each decade since 1950, we need to group the data by decades and count the number of bridges within those groups. We can achieve this by using integer division to round down the years to their respective decades and then grouping by that result.',
    sql='SELECT (year / 10) * 10 as decade, COUNT(*) as num_bridges FROM Bridges WHERE year >= 1950 GROUP BY decade ORDER BY decade;'
), 0), (Example({'sql_prompt': 'What is the total number of accidents in the platinum mines in the last year?', 'sql_context': 'CREATE TABLE AccidentsInMines (AccidentID INT, MineID INT, AccidentDate DATE);', 'sql': "SELECT COUNT(*) FROM AccidentsInMines WHERE (SELECT MineType FROM Mines WHERE Mines.MineID = AccidentsInMines.MineID) = 'Platinum' AND AccidentDate >= DATEADD(year, -1, GETDATE());"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the total number of accidents in platinum mines in the last year, we need additional information about which mines are platinum mines. Assuming there is another table called `Mines` that contains this information, let's create a hypothetical SQL context for it:\n\n```sql\nCREATE TABLE Mines (mine_id INT PRIMARY KEY, mine_type VARCHAR(50));\nINSERT INTO Mines (mine_id, mine_type) VALUES \n    (1, 'platinum'),\n    (2, 'gold'),\n    (3, 'diamond');\n```\n\nNow we can write the SQL query to find the total number of accidents in plat",
    sql='Assuming there is a table called `Mines` that contains information about mine types and their IDs, as shown above. We also need to know the date range for "the last year." Let\'s assume today\'s date is 2023-04-01, so "the last year" would be from 2022-04-01 to 2023-04-01. Here\'s the SQL query that finds the total number of accidents in platinum mines during this period:\n\n```sql\nSELECT COUNT(*) AS total_accidents_last_year\nFROM AccidentsInMines AIM\nJOIN Mines M ON AIM'
), 0), (Example({'sql_prompt': 'List the names and organizations of all volunteers who have provided support in Syria and Yemen, sorted by organization.', 'sql_context': "CREATE TABLE support_provision (id INT, name VARCHAR(255), organization VARCHAR(255), country VARCHAR(255)); INSERT INTO support_provision (id, name, organization, country) VALUES ('1', 'Ahmad', 'Doctors Without Borders', 'Syria'), ('2', 'Bana', 'UNHCR', 'Yemen'), ('3', 'Cemal', 'World Food Programme', 'Syria'), ('4', 'Dalia', 'Red Cross', 'Yemen'), ('5', 'Elias', 'Doctors Without Borders', 'Yemen'), ('6', 'Farah', 'UNHCR', 'Syria');", 'sql': "SELECT name, organization FROM support_provision WHERE country IN ('Syria', 'Yemen') ORDER BY organization ASC;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To list the names and organizations of all volunteers who have provided support in Syria and Yemen, sorted by organization, we need to select the relevant columns from the `support_provision` table. We will filter the results for only those records where the country is either 'Syria' or 'Yemen'. Then, we will sort the output based on the organization column.\n\nHere is the SQL query that accomplishes this:\n\n```sql\nSELECT name, organization \nFROM support_provision \nWHERE country IN ('Syria', 'Yemen')\nORDER BY organization;\n```",
    sql="SELECT name, organization FROM support_provision WHERE country IN ('Syria', 'Yemen') ORDER BY organization;"
), 1), (Example({'sql_prompt': 'List all the public health policies for California and Texas.', 'sql_context': "CREATE TABLE HealthPolicies (id INT, name VARCHAR(50), state VARCHAR(50), description TEXT); INSERT INTO HealthPolicies VALUES (1, 'Policy A', 'California', 'Description A'); INSERT INTO HealthPolicies VALUES (2, 'Policy B', 'California', 'Description B'); INSERT INTO HealthPolicies VALUES (3, 'Policy C', 'Texas', 'Description C');", 'sql': "SELECT * FROM HealthPolicies WHERE state IN ('California', 'Texas');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To list all the public health policies for California and Texas, we need to select records from the `HealthPolicies` table where the state is either 'California' or 'Texas'. We can use a WHERE clause with an IN operator to filter the results based on these two states.\n\nHere's the SQL query:\n\n```sql\nSELECT * FROM HealthPolicies WHERE state IN ('California', 'Texas');\n```",
    sql="SELECT * FROM HealthPolicies WHERE state IN ('California', 'Texas');"
), 1), (Example({'sql_prompt': "Calculate the average weight of adult seals in the 'Antarctic Ocean' sanctuary.", 'sql_context': "CREATE TABLE seals (seal_id INT, seal_name VARCHAR(50), age INT, weight FLOAT, sanctuary VARCHAR(50)); INSERT INTO seals (seal_id, seal_name, age, weight, sanctuary) VALUES (1, 'Seal_1', 12, 200, 'Antarctic Ocean'); INSERT INTO seals (seal_id, seal_name, age, weight, sanctuary) VALUES (2, 'Seal_2', 8, 180, 'Antarctic Ocean');", 'sql': "SELECT AVG(weight) FROM seals WHERE sanctuary = 'Antarctic Ocean' AND age >= 18;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To calculate the average weight of adult seals in the 'Antarctic Ocean' sanctuary, we need to consider only those seals that are classified as adult. Typically, an adult seal is considered to be one that has reached a certain age threshold, which can vary depending on the species. For this example, let's assume that an adult seal is defined as being at least 5 years old.\n\nGiven this information, we will write an SQL query that selects only those records where the sanctuary is 'Antarctic Ocean' and the age of the seal is greater than or equal to 5. Then, we will calculate the average weight for these selected records.\n\nHere",
    sql="SELECT AVG(weight) AS average_adult_seal_weight FROM seals WHERE sanctuary = 'Antarctic Ocean' AND age >= 5;"
), 1), (Example({'sql_prompt': "Insert a new student with a unique student_id, district_id, and mental_health_score, and update the district's average mental health score accordingly.", 'sql_context': 'CREATE TABLE school_districts (district_id INT, district_name TEXT, average_mental_health_score DECIMAL(5,2)); CREATE TABLE students (student_id INT, district_id INT, mental_health_score INT);', 'sql': 'INSERT INTO students (student_id, district_id, mental_health_score) VALUES (12345, 6789, 75); UPDATE school_districts sd SET sd.average_mental_health_score = (SELECT AVG(s.mental_health_score) FROM students s WHERE s.district_id = sd.district_id) WHERE sd.district_id = 6789;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To insert a new student with a unique `student_id`, assign them to an existing `district_id`, and update the corresponding district's average mental health score accordingly, we need to perform two SQL operations. First, we will insert the new student into the `students` table. Then, we will calculate the updated average mental health score for that district in the `school_districts` table using an UPDATE statement with a subquery.\n\nHere's how you can do it:\n\n1. Insert the new student record (assuming unique IDs and scores are provided):\n```sql\nINSERT INTO students (student_id, district_id, mental_health_score) VALUES (NEW",
    sql='-- Assuming NEW_STUDENT_ID, DISTRICT_ID, and MENTAL_HEALTH_SCORE are given values.\nINSERT INTO students (student_id, district_id, mental_health_score) \nVALUES (NEW_STUDENT_ID, DISTRICT_ID, MENTAL_HEALTH_SCORE);\n\n-- Calculate the new average mental health score for the given district.\nUPDATE school_districts AS sd\nSET average_mental_health_score = (\n    SELECT AVG(mental_health_score) \n    FROM students \n    WHERE district_id ='
), 0), (Example({'sql_prompt': 'What is the total revenue generated by retail stores located in New York that sell sustainable products?', 'sql_context': "CREATE TABLE RetailStores (StoreID INT, StoreName VARCHAR(50), State VARCHAR(50)); INSERT INTO RetailStores (StoreID, StoreName, State) VALUES (1, 'RetailStoreA', 'New York'); CREATE TABLE Sales (SaleID INT, StoreID INT, ProductID INT, Quantity INT, Price DECIMAL(5,2)); INSERT INTO Sales (SaleID, StoreID, ProductID, Quantity, Price) VALUES (1, 1, 1, 10, 15.99), (2, 1, 2, 5, 12.49); CREATE TABLE Products (ProductID INT, ProductName VARCHAR(50), IsSustainable BOOLEAN); INSERT INTO Products (ProductID, ProductName, IsSustainable) VALUES (1, 'Product1', true), (2, 'Product2', false);", 'sql': "SELECT SUM(Quantity * Price) FROM Sales JOIN RetailStores ON Sales.StoreID = RetailStores.StoreID JOIN Products ON Sales.ProductID = Products.ProductID WHERE RetailStores.State = 'New York' AND Products.IsSustainable = true;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To calculate the total revenue generated by retail stores located in New York that sell sustainable products, we need to join the three tables (`RetailStores`, `Sales`, and `Products`) based on their respective IDs. Then, filter the results for stores in New York selling only sustainable products (where `IsSustainable` is true). Finally, calculate the total revenue by multiplying the quantity of each sale with its price and summing up these values.\n\nHere's the SQL query to achieve this:\n\n```sql\nSELECT SUM(s.Quantity * s.Price) AS TotalRevenue\nFROM RetailStores r\nJOIN Sales s ON r",
    sql="SELECT SUM(s.Quantity * s.Price) AS TotalRevenue \nFROM RetailStores r \nJOIN Sales s ON r.StoreID = s.StoreID \nJOIN Products p ON s.ProductID = p.ProductID \nWHERE r.State = 'New York' AND p.IsSustainable = TRUE;"
), 1), (Example({'sql_prompt': 'What are the recycling rates in Oceania for the year 2021, grouped by country?', 'sql_context': "CREATE TABLE RecyclingRatesOceania (country VARCHAR(50), year INT, recycling_rate DECIMAL(5,2)); INSERT INTO RecyclingRatesOceania (country, year, recycling_rate) VALUES ('Australia', 2021, 0.58), ('New Zealand', 2021, 0.52);", 'sql': 'SELECT country, AVG(recycling_rate) FROM RecyclingRatesOceania WHERE year = 2021 GROUP BY country;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the recycling rates in Oceania for the year 2021, grouped by country, we need to select the relevant data from the RecyclingRatesOceania table where the year is equal to 2021. We will then group the results by country to get the recycling rate for each country in Oceania for that specific year.\n\nThe SQL query would be:\n\n```sql\nSELECT country, recycling_rate FROM RecyclingRatesOceania WHERE year = 2021 GROUP BY country;\n```',
    sql='SELECT country, recycling_rate FROM RecyclingRatesOceania WHERE year = 2021 GROUP BY country;'
), 1), (Example({'sql_prompt': 'What is the total quantity of sustainable fabric used by each supplier?', 'sql_context': "CREATE TABLE FabricSuppliers (SupplierID INT, SupplierName TEXT, FabricType TEXT, Quantity INT, IsSustainable BOOLEAN); INSERT INTO FabricSuppliers (SupplierID, SupplierName, FabricType, Quantity, IsSustainable) VALUES (1, 'SupplierA', 'Cotton', 500, true), (2, 'SupplierB', 'Polyester', 300, false), (3, 'SupplierC', 'Wool', 150, true);", 'sql': 'SELECT SupplierName, SUM(Quantity) as TotalQuantity FROM FabricSuppliers WHERE IsSustainable = true GROUP BY SupplierName;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the total quantity of sustainable fabric used by each supplier, we need to filter out only those records where `IsSustainable` is set to `true`. Then, we will group the results by `SupplierName` and sum up the quantities.\n\nHere's the SQL query that accomplishes this:\n\n```sql\nSELECT SupplierName, SUM(Quantity) AS Total_Sustainable_Fabric_Used\nFROM FabricSuppliers\nWHERE IsSustainable = true\nGROUP BY SupplierName;\n```",
    sql='SELECT SupplierName, SUM(Quantity) AS Total_Sustainable_Fabric_Used FROM FabricSuppliers WHERE IsSustainable = TRUE GROUP BY SupplierName;'
), 1), (Example({'sql_prompt': 'What is the maximum salary of a professor in the Physics department?', 'sql_context': 'CREATE TABLE if NOT EXISTS faculty (id INT, name VARCHAR(50), department VARCHAR(20), rank VARCHAR(20), salary INT);', 'sql': "SELECT MAX(salary) FROM faculty WHERE department='Physics' AND rank='Professor';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the maximum salary of a professor in the Physics department, we need to filter the faculty table for professors who belong to the Physics department and then determine the highest salary among them. Here is the SQL query that accomplishes this task:',
    sql="SELECT MAX(salary) FROM faculty WHERE department = 'Physics' AND rank = 'Professor';"
), 1), (Example({'sql_prompt': "How many cases were opened in 'july' 2019 and closed in 'october' 2019?", 'sql_context': 'CREATE TABLE cases (case_id INT, case_open_date DATE, case_close_date DATE);', 'sql': "SELECT COUNT(*) FROM cases WHERE case_open_date BETWEEN '2019-07-01' AND '2019-07-31' AND case_close_date BETWEEN '2019-10-01' AND '2019-10-31';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the number of cases opened in July 2019 and closed in October 2019, we need to filter the records based on the open date being within July 2019 and the close date being within October 2019. We can use the BETWEEN operator for this purpose since it allows us to specify a range of dates inclusive of both endpoints.\n\nHere's the SQL query that accomplishes this:\n\n```sql\nSELECT COUNT(*) AS cases_count\nFROM cases\nWHERE case_open_date BETWEEN '2019-07-01' AND '2019-07-31'",
    sql="And case_close_date BETWEEN '2019-10-01' AND '2019-10-31';"
), 0), (Example({'sql_prompt': 'What is the total number of defense diplomacy events in which each country has participated, ranked from highest to lowest?', 'sql_context': "CREATE TABLE defense_diplomacy_4 (id INT, year INT, country VARCHAR(255), event VARCHAR(255)); INSERT INTO defense_diplomacy_4 (id, year, country, event) VALUES (1, 2015, 'USA', 'Event1'), (2, 2016, 'China', 'Event2'), (3, 2017, 'Russia', 'Event3'), (4, 2018, 'India', 'Event4'), (5, 2019, 'Germany', 'Event5'), (6, 2015, 'Brazil', 'Event6'), (7, 2016, 'South Africa', 'Event7'), (8, 2017, 'Canada', 'Event8'), (9, 2018, 'Japan', 'Event9'), (10, 2019, 'France', 'Event10');", 'sql': 'SELECT country, COUNT(event) AS total_events FROM defense_diplomacy_4 GROUP BY country ORDER BY total_events DESC;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the total number of defense diplomacy events each country has participated in and rank them from highest to lowest, we can use a SQL query that groups the data by country and counts the number of events for each. Then, we will sort the results in descending order based on this count.\n\nHere's the SQL query:\n\n```sql\nSELECT \n    country, \n    COUNT(event) AS total_events\nFROM \n    defense_diplomacy_4\nGROUP BY \n    country\nORDER BY \n    total_events DESC;\n```\n\nThis query will give us the desired result: a list of countries along with their respective counts of participation in defense diplomacy events",
    sql='SELECT country, COUNT(event) AS total_events \nFROM defense_diplomacy_4 \nGROUP BY country \nORDER BY total_events DESC;'
), 1), (Example({'sql_prompt': 'What was the average number of construction laborers employed in the state of Illinois in 2019?', 'sql_context': "CREATE TABLE Labor_Statistics (id INT, employee_count INT, year INT, state VARCHAR(20)); INSERT INTO Labor_Statistics (id, employee_count, year, state) VALUES (1, 12000, 2019, 'Illinois');", 'sql': "SELECT AVG(employee_count) FROM Labor_Statistics WHERE year = 2019 AND state = 'Illinois';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the average number of construction laborers employed in Illinois for the year 2019, we need to filter the Labor_Statistics table based on the state and year. Since there is only one entry provided for Illinois in 2019, the average will be equal to the employee count for that specific row.',
    sql="SELECT AVG(employee_count) FROM Labor_Statistics WHERE state = 'Illinois' AND year = 2019;"
), 1), (Example({'sql_prompt': 'Show the number of unique students who have enrolled in the Data Science program in the last 3 years, by year.', 'sql_context': 'CREATE TABLE students (id INT, name VARCHAR(100), enrollment_date DATE);', 'sql': "SELECT YEAR(enrollment_date) AS enrollment_year, COUNT(DISTINCT id) AS unique_students FROM students WHERE enrollment_date >= DATE_SUB(CURDATE(), INTERVAL 3 YEAR) AND program = 'Data Science' GROUP BY YEAR(enrollment_date);"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To answer this prompt, we need to count the number of unique students who have enrolled in the Data Science program over the last 3 years. However, there is no direct information about the "Data Science" program in the provided SQL context. We will assume that there\'s a column named `program` in the `students` table which indicates the program each student has enrolled in.\n\nFirstly, we need to determine the current date and then calculate the date 3 years ago from it. Afterward, we can filter out students who have enrolled within this time frame and are part of the Data Science program. Finally, we will group by year to get the number of unique students per year.\n\nHere',
    sql="Assuming there is a `program` column in the `students` table that indicates the student's program, here's how you can write the SQL query for this task:\n\n```sql\nSELECT YEAR(enrollment_date) AS enrollment_year, COUNT(DISTINCT id) AS number_of_unique_students\nFROM students\nWHERE program = 'Data Science' AND enrollment_date >= DATE_SUB(CURDATE(), INTERVAL 3 YEAR)\nGROUP BY enrollment_year;\n```\n\nThis query will show the number of unique students who have enrolled in the Data Science program by year for the last 3 years."
), 0), (Example({'sql_prompt': 'Delete records with sales amount over $50,000 in the MilitaryEquipmentSales table', 'sql_context': "CREATE TABLE MilitaryEquipmentSales (id INT, equipment_name VARCHAR(50), sale_amount INT, sale_date DATE); INSERT INTO MilitaryEquipmentSales (id, equipment_name, sale_amount, sale_date) VALUES (1, 'Fighter Jet', 45000, '2021-01-01'), (2, 'Tank', 75000, '2021-02-01');", 'sql': 'DELETE FROM MilitaryEquipmentSales WHERE sale_amount > 50000;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To delete records with a sales amount over $50,000 from the MilitaryEquipmentSales table, we need to write an SQL DELETE statement that specifies this condition. Here is how you can do it:\n\n```sql\nDELETE FROM MilitaryEquipmentSales WHERE sale_amount > 50000;\n```\n\nThis query will remove all rows from the MilitaryEquipmentSales table where the sale_amount column has a value greater than $50,000.',
    sql='DELETE FROM MilitaryEquipmentSales WHERE sale_amount > 50000;'
), 1), (Example({'sql_prompt': 'What are the total views for all open education resources in each language and format, ordered by views?', 'sql_context': "CREATE TABLE open_education_resources (id INT, title VARCHAR(50), format VARCHAR(10), language VARCHAR(20), views INT); INSERT INTO open_education_resources (id, title, format, language, views) VALUES (1, 'Introduction to SQL', 'Video', 'English', 1000);", 'sql': 'SELECT language, format, SUM(views) as total_views FROM open_education_resources GROUP BY language, format ORDER BY total_views DESC;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the total views for all open education resources in each language and format, ordered by views, we need to group the data by both language and format. Then, we will sum up the views within these groups and finally sort the results based on the total views in descending order (to get them from highest to lowest).\n\nHere's the SQL query that accomplishes this:\n\n```sql\nSELECT \n    language, \n    format, \n    SUM(views) AS total_views\nFROM \n    open_education_resources\nGROUP BY \n    language, \n    format\nORDER BY \n    total_views DESC;\n```\n\nThis query will give us",
    sql='SELECT language, format, SUM(views) AS total_views \nFROM open_education_resources \nGROUP BY language, format \nORDER BY total_views DESC;'
), 0), (Example({'sql_prompt': "Create a view to display all therapists with the specialization of 'CBT'", 'sql_context': "CREATE VIEW cbt_therapists AS SELECT therapist_id, name, specialization, experience FROM therapists WHERE specialization = 'CBT';", 'sql': "CREATE VIEW cbt_therapists AS SELECT therapist_id, name, specialization, experience FROM therapists WHERE specialization = 'CBT';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To create a view that displays all therapists with the specialization of 'Cognitive Behavioral Therapy (CBT)', we need to follow these steps:\n\n1. Identify the relevant table and columns from the given context, which is the `therapists` table in this case. The important columns are `therapist_id`, `name`, `specialization`, and `experience`.\n2. Define a view that selects only those rows where the specialization column matches 'CBT'.\n3. Use the SQL CREATE VIEW statement to create the new view, which we'll call `cbt_therapists`.\n4. The SELECT query within the CREATE VI",
    sql="CREATE VIEW cbt_therapists AS SELECT therapist_id, name, specialization, experience FROM therapists WHERE specialization = 'CBT';"
), 1), (Example({'sql_prompt': 'Identify the top 3 countries with the highest number of social impact projects in 2019.', 'sql_context': "CREATE TABLE countries (id INT, name VARCHAR(255), total_projects INT); INSERT INTO countries (id, name, total_projects) VALUES (1, 'Brazil', 500), (2, 'India', 700), (3, 'South Africa', 350); CREATE TABLE projects_by_country (country VARCHAR(255), project_count INT); INSERT INTO projects_by_country (country, project_count) SELECT country, COUNT(*) FROM projects GROUP BY country;", 'sql': 'SELECT c.name, p.project_count FROM countries c JOIN (SELECT country, COUNT(*) AS project_count FROM projects GROUP BY country ORDER BY project_count DESC LIMIT 3) p ON c.name = p.country;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To identify the top 3 countries with the highest number of social impact projects in 2019, we need to join the `countries` table and the `projects_by_country` table on their respective country names. Then, filter the results for the year 2019 (assuming there's a column named `year` in the `projects_by_country` table that indicates when each project was initiated). Finally, we order the results by the number of projects in descending order and limit the output to the top 3 countries.\n\nAssuming the existence of a `year` column in the `projects_by_country` table:\n\n```sql\nSELECT c.name",
    sql="Assuming there's an additional 'year' column in the 'projects_by_country' table, here is how you can write the SQL query to identify the top 3 countries with the highest number of social impact projects in 2019:\n\n```sql\nSELECT c.name AS country_name, pbc.project_count\nFROM countries c\nJOIN (\n    SELECT country, project_count\n    FROM projects_by_country\n    WHERE year = 2019\n) pbc ON c.name = pbc.country\nORDER BY pbc.project_count DESC\nLIMIT 3;\n```"
), 1), (Example({'sql_prompt': 'Largest renewable energy project per location', 'sql_context': "CREATE TABLE renewable_energy_projects (id INT, name VARCHAR(255), location VARCHAR(255), capacity FLOAT); INSERT INTO renewable_energy_projects (id, name, location, capacity) VALUES (1, 'SolarFarm1', 'CityA', 1000), (2, 'WindFarm1', 'CityB', 2000), (3, 'SolarFarm2', 'CityA', 1500);", 'sql': 'SELECT name, location, capacity FROM (SELECT name, location, capacity, ROW_NUMBER() OVER (PARTITION BY location ORDER BY capacity DESC) as rn FROM renewable_energy_projects) AS subquery WHERE rn = 1;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the largest renewable energy project per location based on capacity, we need to group the projects by their locations and then select the one with the highest capacity for each location. We can achieve this using a combination of GROUP BY and MAX functions along with a subquery or window function (like ROW_NUMBER() in conjunction with PARTITION BY).\n\nHere's an SQL query that uses a common table expression (CTE) with the ROW_NUMBER() window function to solve this problem:\n\n```sql\nWITH RankedProjects AS (\n  SELECT\n    id,\n    name,\n    location,\n    capacity,\n    ROW_NUMBER() OVER(PARTITION BY location",
    sql='WINDOW ORDER BY capacity DESC) AS rank FROM renewable_energy_projects;\n\nSELECT id, name, location, capacity FROM RankedProjects WHERE rank = 1;'
), 0), (Example({'sql_prompt': 'Update the item name of the warehouse management record with ID 1', 'sql_context': "CREATE TABLE warehouse_management (id INT, aisle VARCHAR(255), item_name VARCHAR(255)); INSERT INTO warehouse_management (id, aisle, item_name) VALUES (1, 'Aisle 3', 'Widget'), (2, 'Aisle 8', 'Thingamajig'), (3, 'Aisle 8', 'Gizmo');", 'sql': "UPDATE warehouse_management SET item_name = 'Super Widget' WHERE id = 1;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To update the item name of the warehouse management record with ID 1, we need to write an SQL UPDATE statement that targets the specific row where `id` is equal to 1 and sets a new value for the `item_name` column.\n\nHere\'s how you can do it:\n\n```sql\nUPDATE warehouse_management\nSET item_name = \'NewItemName\' -- Replace with the desired new name\nWHERE id = 1;\n```\n\nThis SQL statement will change the `item_name` to "NewItemName" for the record where the `id` is equal to 1. Make sure to replace `\'NewItemName\'` with the actual new item name',
    sql="UPDATE warehouse_management SET item_name = 'UpdatedItemName' WHERE id = 1;"
), 1), (Example({'sql_prompt': 'What is the total budget for movies released before 2010?', 'sql_context': "CREATE TABLE Movies_Release_Year (id INT, title VARCHAR(100), release_year INT, budget DECIMAL(10,2)); INSERT INTO Movies_Release_Year (id, title, release_year, budget) VALUES (1, 'The Matrix', 1999, 63000000.00), (2, 'Titanic', 1997, 200000000.00), (3, 'The Lord of the Rings: The Fellowship of the Ring', 2001, 93000000.00);", 'sql': 'SELECT SUM(budget) FROM Movies_Release_Year WHERE release_year < 2010;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the total budget for movies released before 2010, we need to sum up the budgets of all movies that have a release_year less than 2010. We can achieve this using the following SQL query:',
    sql='SELECT SUM(budget) FROM Movies_Release_Year WHERE release_year < 2010;'
), 0), (Example({'sql_prompt': 'What is the revenue generated from the sale of organic dishes in the last month?', 'sql_context': "CREATE TABLE inventory (item_id INT, quantity INT, unit_price DECIMAL(5,2), is_organic BOOLEAN); INSERT INTO inventory (item_id, quantity, unit_price, is_organic) VALUES (1, 10, 12.99, true), (2, 20, 7.50, false), (3, 30, 9.99, true), (4, 40, 15.49, false), (5, 50, 8.99, true); CREATE TABLE orders (order_id INT, item_id INT, order_date DATE); INSERT INTO orders (order_id, item_id, order_date) VALUES (1, 1, '2022-01-01'), (2, 3, '2022-01-02'), (3, 2, '2022-01-03'), (4, 4, '2022-01-04'), (5, 5, '2022-01-05'); CREATE TABLE menu_items (item_id INT, name TEXT, is_organic BOOLEAN); INSERT INTO menu_items (item_id, name, is_organic) VALUES (1, 'Quinoa Salad', true), (2, 'Beef Burger', false), (3, 'Chickpea Curry', true), (4, 'Cheesecake', false), (5, 'Veggie Pizza', true);", 'sql': "SELECT SUM(i.unit_price * o.quantity) as revenue FROM inventory i JOIN orders o ON i.item_id = o.item_id JOIN menu_items m ON i.item_id = m.item_id WHERE m.is_organic = true AND o.order_date BETWEEN '2022-02-01' AND '2022-02-28';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To calculate the revenue generated from the sale of organic dishes in the last month, we need to join the `inventory`, `orders`, and `menu_items` tables. We will filter for items that are marked as organic (`is_organic = true`) both in the inventory and menu_items table. Then, we'll sum up the revenue generated from these sales by multiplying the quantity sold (from orders) with the unit price (from inventory).\n\nHere is the SQL query to achieve this:\n\n```sql\nSELECT SUM(i.quantity * i.unit_price) AS total_revenue\nFROM inventory i\nJOIN orders o ON i.item",
    sql='```sql\nJOIN menu_items m ON i.item_id = m.item_id\nWHERE \n    i.is_organic = true AND \n    m.is_organic = true AND \n    o.order_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)\n```'
), 0), (Example({'sql_prompt': 'Find the drugs and their respective total sales for rare diseases indication with sales greater than the average sales for infectious diseases.', 'sql_context': "CREATE TABLE sales (id INT, drug_id INT, quarter INT, year INT, revenue FLOAT); INSERT INTO sales (id, drug_id, quarter, year, revenue) VALUES (1, 1, 1, 2022, 1500000); CREATE TABLE drugs (id INT, name VARCHAR(50), company VARCHAR(50), indication VARCHAR(50)); INSERT INTO drugs (id, name, company, indication) VALUES (1, 'DrugA', 'ABC Corp', 'Rare_Diseases');", 'sql': "SELECT s.drug_id, d.name, SUM(s.revenue) as total_sales FROM sales s JOIN drugs d ON s.drug_id = d.id WHERE d.indication = 'Rare_Diseases' GROUP BY s.drug_id HAVING total_sales > (SELECT AVG(s2.revenue) FROM sales s2 JOIN drugs d2 ON s2.drug_id = d2.id WHERE d2.indication = 'Infectious_Diseases')"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the drugs and their respective total sales for rare diseases indication with sales greater than the average sales for infectious diseases, we need to perform a series of steps. Here is how you can approach this problem using SQL:\n\n1. Calculate the average revenue for infectious diseases.\n2. Find all drugs that have an indication for rare diseases and their total sales.\n3. Filter out those drugs whose total sales are greater than the calculated average revenue from step 1.\n\nHere's how you can write the SQL query:\n\n```sql\nWITH infectious_avg AS (\n    SELECT AVG(revenue) as",
    sql="avg_infectious_revenue FROM sales JOIN drugs ON sales.drug_id = drugs.id WHERE indication = 'Infectious_Diseases'), rare_sales AS (SELECT drugs.name, SUM(sales.revenue) as total_revenue FROM sales JOIN drugs ON sales.drug_id = drugs.id WHERE indication = 'Rare_Diseases' GROUP BY drugs.name) SELECT name, total_revenue FROM rare_sales WHERE total_revenue > (SELECT avg_infectious_revenue FROM infectious_avg);"
), 0), (Example({'sql_prompt': 'What is the total number of hospitals that offer mental health services in each state?', 'sql_context': "CREATE TABLE Hospitals (HospitalID INT, Name TEXT, City TEXT, State TEXT, MentalHealth BOOLEAN); INSERT INTO Hospitals (HospitalID, Name, City, State, MentalHealth) VALUES (1, 'Jackson Memorial Hospital', 'Miami', 'Florida', TRUE);", 'sql': 'SELECT State, COUNT(*) FROM Hospitals WHERE MentalHealth = TRUE GROUP BY State;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the total number of hospitals that offer mental health services in each state, we need to count the number of rows where `MentalHealth` is set to `TRUE`, grouped by the `State`. The SQL query for this would be:\n\n```sql\nSELECT State, COUNT(*) AS Total_Hospitals_Offering_Mental_Health\nFROM Hospitals\nWHERE MentalHealth = TRUE\nGROUP BY State;\n```',
    sql='SELECT State, COUNT(*) AS Total_Hospitals_Offering_Mental_Health FROM Hospitals WHERE MentalHealth = TRUE GROUP BY State;'
), 1), (Example({'sql_prompt': 'Count the number of properties in Austin with a listing price below $400,000 and sustainable features.', 'sql_context': "CREATE TABLE properties (id INT, city VARCHAR(20), listing_price INT, sustainable BOOLEAN); INSERT INTO properties (id, city, listing_price, sustainable) VALUES (1, 'Austin', 350000, true); INSERT INTO properties (id, city, listing_price, sustainable) VALUES (2, 'Austin', 450000, false);", 'sql': "SELECT COUNT(*) FROM properties WHERE city = 'Austin' AND listing_price < 400000 AND sustainable = true;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To count the number of properties in Austin with a listing price below $400,000 and sustainable features, we need to filter the data based on these criteria. We can use the WHERE clause to specify our conditions for city, listing_price, and sustainable attributes.\n\nHere's the SQL query that accomplishes this:\n\n```sql\nSELECT COUNT(*) AS num_properties\nFROM properties\nWHERE city = 'Austin' AND listing_price < 400000 AND sustainable = true;\n```\n\nThis query will return the total count of properties in Austin with a listing price below $400,000 and that have sustain",
    sql="SELECT COUNT(*) AS num_properties FROM properties WHERE city = 'Austin' AND listing_price < 400000 AND sustainable = true;"
), 1), (Example({'sql_prompt': "List the names and publication years of Middle Eastern authors who have published books in the 'Non-fiction' genre.", 'sql_context': "CREATE TABLE authors (id INT PRIMARY KEY, name VARCHAR(255), ethnicity VARCHAR(255)); INSERT INTO authors (id, name, ethnicity) VALUES (1, 'Rania Abouzeid', 'Middle Eastern'); INSERT INTO authors (id, name, ethnicity) VALUES (2, 'Khaled Hosseini', 'Middle Eastern'); CREATE TABLE books (id INT PRIMARY KEY, title VARCHAR(255), author_id INT, publication_year INT, genre VARCHAR(255)); INSERT INTO books (id, title, author_id, publication_year, genre) VALUES (1, 'No Turning Back', 1, 2018, 'Non-fiction'); INSERT INTO books (id, title, author_id, publication_year, genre) VALUES (2, 'The Kite Runner', 2, 2003, 'Fiction'); INSERT INTO books (id, title, author_id, publication_year, genre) VALUES (3, 'A Thousand Splendid Suns', 2, 2007, 'Fiction'); CREATE TABLE genres (id INT PRIMARY KEY, genre VARCHAR(255)); INSERT INTO genres (id, genre) VALUES (1, 'Fiction'); INSERT INTO genres (id, genre) VALUES (2, 'Non-fiction');", 'sql': "SELECT a.name, b.publication_year FROM authors a INNER JOIN books b ON a.id = b.author_id INNER JOIN genres g ON b.genre = g.genre WHERE a.ethnicity = 'Middle Eastern' AND g.genre = 'Non-fiction';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To list the names and publication years of Middle Eastern authors who have published books in the 'Non-fiction' genre, we need to join the `authors`, `books`, and `genres` tables. We will filter based on the author's ethnicity being 'Middle Eastern', the book's genre being 'Non-fiction', and then select the relevant information from these joined tables.\n\nHere is the SQL query that accomplishes this:\n\n```sql\nSELECT a.name, b.publication_year\nFROM authors AS a\nJOIN books AS b ON a.id = b.author_id\nJOIN genres AS g ON b.genre = g.genre",
    sql="WHERE a.ethnicity = 'Middle Eastern' AND g.genre = 'Non-fiction';"
), 0), (Example({'sql_prompt': 'Get the names of all solar farms in Arizona', 'sql_context': "CREATE TABLE Infrastructure (id INT, name VARCHAR(100), type VARCHAR(50), location VARCHAR(100), state VARCHAR(50)); INSERT INTO Infrastructure (id, name, type, location, state) VALUES (10, 'Arizona Solar One', 'Solar Farm', 'Buckeye', 'Arizona');", 'sql': "SELECT name FROM Infrastructure WHERE type = 'Solar Farm' AND state = 'Arizona';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To get the names of all solar farms located in Arizona from the Infrastructure table, we need to filter records based on the type being "Solar Farm" and the state being "Arizona". The SQL query for this would be as follows:',
    sql="SELECT name FROM Infrastructure WHERE type = 'Solar Farm' AND state = 'Arizona';"
), 1), (Example({'sql_prompt': "How many properties in the table 'sustainable_developments' are located in low-income areas?", 'sql_context': "CREATE TABLE sustainable_developments (id INT, property_name VARCHAR(50), low_income_area BOOLEAN); INSERT INTO sustainable_developments (id, property_name, low_income_area) VALUES (1, 'Green Heights', true), (2, 'Eco Estates', false), (3, 'Solar Vista', true);", 'sql': 'SELECT COUNT(*) FROM sustainable_developments WHERE low_income_area = true;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find out how many properties are located in low-income areas from the table `sustainable_developments`, we need to count the number of rows where the column `low_income_area` is set to true.\n\nThe SQL query for this would be:\n\n```sql\nSELECT COUNT(*) AS num_properties_in_low_income_areas FROM sustainable_developments WHERE low_income_area = TRUE;\n```',
    sql='Sql: SELECT COUNT(*) AS num_properties_in_low_income_areas FROM sustainable_developments WHERE low_income_area = TRUE;'
), 1), (Example({'sql_prompt': 'What is the number of travel advisories issued for each country in the last 3 months?', 'sql_context': 'CREATE TABLE TravelAdvisories (Country VARCHAR(255), Advisory INT, IssueDate DATE);', 'sql': "SELECT Country, COUNT(Advisory) OVER (PARTITION BY Country) AS NumAdvisories, TO_CHAR(IssueDate, 'YYYY-MM') AS Month FROM TravelAdvisories WHERE IssueDate >= ADD_MONTHS(CURRENT_DATE, -3) GROUP BY Country, Month;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the number of travel advisories issued for each country in the last 3 months, we need to filter records based on the `IssueDate` being within the last 3 months and then group them by `Country`. We can use the SQL function `CURDATE()` to get the current date and subtract an interval of 3 months from it.\n\nHere's the SQL query:\n\n```sql\nSELECT Country, COUNT(Advisory) AS NumberOfAdvisories\nFROM TravelAdvisories\nWHERE IssueDate >= CURDATE() - INTERVAL 3 MONTH\nGROUP BY Country;\n```",
    sql='SELECT Country, COUNT(Advisory) AS NumberOfAdvisories FROM TravelAdvisories WHERE IssueDate >= CURDATE() - INTERVAL 3 MONTH GROUP BY Country;'
), 0), (Example({'sql_prompt': 'Delete all records with a best-before date earlier than tomorrow from the FoodSafetyRecords.PerishableGoods table.', 'sql_context': 'CREATE TABLE FoodSafetyRecords.PerishableGoods (itemName TEXT, bestBeforeDate DATE);', 'sql': 'DELETE FROM FoodSafetyRecords.PerishableGoods WHERE bestBeforeDate < DATEADD(day, 1, CURDATE());'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To delete all records with a `bestBeforeDate` earlier than tomorrow from the `FoodSafetyRecords.PerishableGoods` table, we need to construct an SQL statement that identifies those records and removes them. The key steps are:\n\n1. Determine today's date using the current system date function (e.g., CURDATE() in MySQL).\n2. Calculate tomorrow's date by adding one day to today's date.\n3. Compare each `bestBeforeDate` with tomorrow's date and delete records where `bestBeforeDate` is earlier than that value.\n\nHere's the SQL statement based on these steps:",
    sql='DELETE FROM FoodSafetyRecords.PerishableGoods WHERE bestBeforeDate < DATE_ADD(CURDATE(), INTERVAL 1 DAY);'
), 0), (Example({'sql_prompt': 'List the number of properties co-owned by women and men in each city in the database.', 'sql_context': 'CREATE TABLE city_properties (city VARCHAR(50), co_owned BOOLEAN, owner_gender VARCHAR(10), property_id INT);', 'sql': 'SELECT city, owner_gender, COUNT(*) AS count FROM city_properties WHERE co_owned = TRUE GROUP BY city, owner_gender;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To list the number of properties co-owned by women and men in each city, we need to count the occurrences where `co_owned` is true for both genders. Since a single record can only have one value for `owner_gender`, we cannot directly filter for records that are owned by both women and men. However, if there's an assumption or additional data indicating co-ownership (e.g., multiple entries per property with different owners), then the query could be adjusted accordingly.\n\nAssuming each record represents a unique owner of a property, we can count the number of properties in each city where at least one woman and one man are listed as co-owners by using subqueries",
    sql="To address this scenario accurately, we need to make an assumption that there's a way to identify properties with both male and female owners. If such data exists (e.g., through multiple entries for each property indicating different owners), the SQL query would involve joining or aggregating these records based on `property_id` and filtering by cities where at least one record per property has an owner of each gender who co-owns it. However, without explicit details on how to identify properties with both male and female co-owners in your provided schema, we'll proceed under a hypothetical scenario that assumes such data is available or can be inferred from the existing structure.\n\nGiven these constraints, here"
), 0), (Example({'sql_prompt': 'Find the number of brands that adhere to fair labor practices in each country.', 'sql_context': 'CREATE TABLE brands (brand_id INT, country VARCHAR(20), adheres_to_fair_labor_practices BOOLEAN);', 'sql': 'SELECT country, COUNT(*) FROM brands WHERE adheres_to_fair_labor_practices = TRUE GROUP BY country;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the number of brands that adhere to fair labor practices in each country, we need to count the rows where `adheres_to_fair_labor_practices` is true for each country.',
    sql='SELECT country, COUNT(*) as num_brands FROM brands WHERE adheres_to_fair_labor_practices = TRUE GROUP BY country;'
), 1), (Example({'sql_prompt': 'What is the average policy duration for policyholders in the West region with a risk score between 600 and 800?', 'sql_context': "CREATE TABLE Policyholders (PolicyID INT, RiskScore INT, Region VARCHAR(10), PolicyDuration INT); INSERT INTO Policyholders VALUES (1, 700, 'West', 36); INSERT INTO Policyholders VALUES (2, 400, 'East', 24);", 'sql': "SELECT AVG(p.PolicyDuration) as AvgPolicyDuration FROM Policyholders p WHERE p.Region = 'West' AND p.RiskScore BETWEEN 600 AND 800;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the average policy duration for policyholders in the West region with a risk score between 600 and 800, we need to filter the data based on the specified conditions (region = 'West' and risk score between 600 and 800) and then calculate the average of the policy durations.\n\nHere is the SQL query that accomplishes this:\n\n```sql\nSELECT AVG(PolicyDuration) AS Average_Policy_Duration\nFROM Policyholders\nWHERE Region = 'West' AND RiskScore BETWEEN 600 AND 800;\n```",
    sql="SELECT AVG(PolicyDuration) AS Average_Policy_Duration FROM Policyholders WHERE Region = 'West' AND RiskScore BETWEEN 600 AND 800;"
), 0), (Example({'sql_prompt': 'How many autonomous buses were operational in Mexico City as of January 1, 2022?', 'sql_context': 'CREATE TABLE autonomous_buses( bus_id INT, operational_status VARCHAR(50), status_date DATE, city VARCHAR(50));', 'sql': "SELECT COUNT(*) FROM autonomous_buses WHERE operational_status = 'operational' AND status_date <= '2022-01-01' AND city = 'Mexico City';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find out how many autonomous buses were operational in Mexico City as of January 1, 2022, we need to filter the data based on the `city` and `status_date`, and then count the number of rows that match these criteria.',
    sql="SELECT COUNT(*) FROM autonomous_buses WHERE city = 'Mexico City' AND operational_status = 'Operational' AND status_date <= '2022-01-01';"
), 1), (Example({'sql_prompt': 'What is the total revenue generated from the sales of products made from recycled materials in the North American market?', 'sql_context': "CREATE TABLE products (product_id INT, material VARCHAR(20), price DECIMAL(5,2), market VARCHAR(20)); INSERT INTO products (product_id, material, price, market) VALUES (1, 'recycled polyester', 70.00, 'North America'), (2, 'recycled cotton', 80.00, 'North America'), (3, 'recycled nylon', 90.00, 'Europe'), (4, 'recycled polyester', 75.00, 'North America'), (5, 'recycled wool', 100.00, 'North America');", 'sql': "SELECT SUM(sales.quantity * products.price) FROM sales JOIN products ON sales.product_id = products.product_id WHERE products.market = 'North America' AND products.material LIKE '%recycled%';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To calculate the total revenue generated from sales of products made from recycled materials in the North American market, we need to sum up the prices of all such products sold in that specific region. The SQL query for this would be as follows:',
    sql="SELECT SUM(price) FROM products WHERE material LIKE '%recycled%' AND market = 'North America';"
), 1), (Example({'sql_prompt': 'List the top 5 mines with the highest environmental impact in the past year?', 'sql_context': "CREATE TABLE mine_environmental_impact (mine_name VARCHAR(255), impact NUMERIC, measurement_date DATE); INSERT INTO mine_environmental_impact (mine_name, impact, measurement_date) VALUES ('Mine A', 1000, '2021-08-01'), ('Mine B', 2000, '2021-08-01'), ('Mine C', 1500, '2021-08-01'), ('Mine A', 1200, '2020-08-01'), ('Mine B', 1800, '2020-08-01');", 'sql': 'SELECT mine_name, impact FROM (SELECT mine_name, impact, measurement_date, RANK() OVER (ORDER BY impact DESC) as rnk FROM mine_environmental_impact WHERE measurement_date >= DATEADD(year, -1, CURRENT_DATE)) t WHERE rnk <= 5;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To list the top 5 mines with the highest environmental impact in the past year, we need to consider only the data from the last year and then sort them based on their total environmental impact. We can use a subquery or a common table expression (CTE) to filter out records for the past year first, sum up the impacts by mine name, and finally select the top 5 mines with the highest cumulative impact.\n\nHere's an SQL query using a CTE:\n\n```sql\nWITH PastYearImpact AS (\n    SELECT mine_name, SUM(impact) as total_impact\n    FROM mine_environmental_impact\n    WHERE measurement_date >= DATEADD",
    sql="WITH PastYearImpact AS (\n    SELECT \n        mine_name, \n        SUM(impact) as total_impact \n    FROM \n        mine_environmental_impact \n    WHERE \n        measurement_date >= CURRENT_DATE - INTERVAL '1 year'\n    GROUP BY \n        mine_name\n)\nSELECT \n    mine_name, \n    total_impact \nFROM \n    PastYearImpact \nORDER BY \n    total_impact DESC \nLIMIT 5;"
), 0), (Example({'sql_prompt': 'What is the maximum and minimum population of animals for each species?', 'sql_context': "CREATE TABLE animal_population (species VARCHAR(50), population INT); INSERT INTO animal_population (species, population) VALUES ('Tiger', 300), ('Lion', 250), ('Elephant', 500), ('Giraffe', 200);", 'sql': 'SELECT species, MIN(population) OVER (PARTITION BY species) as min_population, MAX(population) OVER (PARTITION BY species) as max_population FROM animal_population ORDER BY species;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the maximum and minimum population of animals for each species, we need to use SQL aggregate functions MAX() and MIN(). These functions will help us determine the highest and lowest values within a group. In this case, our groups are based on animal species.\n\nHere's the SQL query that accomplishes this:\n\n```sql\nSELECT \n    species,\n    MAX(population) AS max_population,\n    MIN(population) AS min_population\nFROM \n    animal_population\nGROUP BY \n    species;\n```\n\nThis query selects the species column and calculates the maximum and minimum population values for each species using the MAX() and MIN()",
    sql='SELECT species, MAX(population) AS max_population, MIN(population) AS min_population FROM animal_population GROUP BY species;'
), 0), (Example({'sql_prompt': 'What is the total assets of clients who have invested in both stocks and bonds?', 'sql_context': "CREATE TABLE clients (client_id INT, name TEXT, age INT, gender TEXT, total_assets DECIMAL(10,2)); INSERT INTO clients VALUES (1, 'John Doe', 35, 'Male', 250000.00), (2, 'Jane Smith', 45, 'Female', 500000.00); CREATE TABLE investments (client_id INT, investment_type TEXT); INSERT INTO investments VALUES (1, 'Stocks'), (1, 'Bonds'), (2, 'Stocks');", 'sql': "SELECT c.total_assets FROM clients c INNER JOIN investments i ON c.client_id = i.client_id WHERE i.investment_type IN ('Stocks', 'Bonds') GROUP BY c.client_id HAVING COUNT(DISTINCT i.investment_type) = 2;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the total assets of clients who have invested in both stocks and bonds, we need to identify those clients first. We can do this by joining the `clients` table with the `investments` table on `client_id`, then filtering for clients that have investment types 'Stocks' and 'Bonds'. After identifying these clients, we sum up their total assets.\n\nHere is the SQL query to achieve this:\n\n```sql\nSELECT SUM(c.total_assets) AS total_combined_assets\nFROM clients c\nJOIN (\n    SELECT i1.client_id\n    FROM investments i1\n    JOIN investments i2 ON i1",
    sql="WITH invested_in_both AS (\n    SELECT i1.client_id\n    FROM investments i1\n    INNER JOIN investments i2 ON i1.client_id = i2.client_id AND i1.investment_type <> i2.investment_type\n    WHERE i1.investment_type IN ('Stocks', 'Bonds') AND i2.investment_type IN ('Stocks', 'Bonds')\n    GROUP BY i1.client_id\n    HAVING COUNT(DISTINCT i1.investment_type) = 2\n)\nSELECT SUM(c.total_assets) AS total_"
), 0), (Example({'sql_prompt': 'What is the market share of Hotel Chain C in South America?', 'sql_context': "CREATE TABLE market_share_2 (hotel_chain VARCHAR(255), region VARCHAR(255), market_share FLOAT); INSERT INTO market_share_2 (hotel_chain, region, market_share) VALUES ('Hotel Chain A', 'South America', 0.35), ('Hotel Chain B', 'South America', 0.42), ('Hotel Chain C', 'South America', 0.23);", 'sql': "SELECT market_share * 100 FROM market_share_2 WHERE hotel_chain = 'Hotel Chain C';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the market share of Hotel Chain C in South America, we need to query the `market_share_2` table and filter for entries where the hotel chain is 'Hotel Chain C' and the region is 'South America'. Then, we can retrieve the corresponding market share value.\n\nHere's the SQL statement:\n\n```sql\nSELECT market_share FROM market_share_2 WHERE hotel_chain = 'Hotel Chain C' AND region = 'South America';\n```",
    sql="SELECT market_share FROM market_share_2 WHERE hotel_chain = 'Hotel Chain C' AND region = 'South America';"
), 1), (Example({'sql_prompt': 'Calculate the percentage of renewable energy projects in each state of the United States', 'sql_context': 'CREATE TABLE projects (project_id INT, project_name VARCHAR(255), project_type VARCHAR(255), state VARCHAR(255), installed_capacity FLOAT);', 'sql': "SELECT state, (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM projects WHERE state IN (SELECT state FROM (SELECT DISTINCT state FROM projects WHERE state = 'United States') as temp))) as percentage FROM projects WHERE project_type IN ('Solar', 'Wind', 'Geothermal', 'Hydroelectric') GROUP BY state;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To calculate the percentage of renewable energy projects in each state of the United States, we need to follow these steps:\n\n1. Determine the total number of projects per state.\n2. Calculate the number of renewable energy projects per state.\n3. Compute the percentage by dividing the number of renewable energy projects by the total number of projects in each state and multiplying by 100.\n\nHere's the SQL query to achieve this:\n\n```sql\nWITH project_count AS (\n    SELECT\n        state,\n        COUNT(*) as total_projects\n    FROM\n        projects\n    GROUP BY\n        state\n),\nrenewable_project_",
    sql="WITH renewable_projects AS (\n    SELECT\n        state,\n        COUNT(*) AS renewable_project_count\n    FROM\n        projects\n    WHERE\n        project_type = 'Renewable Energy'\n    GROUP BY\n        state\n), total_projects AS (\n    SELECT\n        state,\n        COUNT(*) AS total_project_count\n    FROM\n        projects\n    GROUP BY\n        state\n)\nSELECT\n    tp.state,\n    COALESCE(rp.renewable_project_count, 0) AS renewable_projects,\n    tp.total_project_count,\n    (COALESCE(rp.ren"
), 0), (Example({'sql_prompt': 'List the names and departments of all mental health parity officers in the mental_health schema.', 'sql_context': "CREATE TABLE mental_health_parity_officers (officer_id INT, name VARCHAR(50), department VARCHAR(50)); INSERT INTO mental_health_parity_officers (officer_id, name, department) VALUES (1, 'Alice Johnson', 'Compliance'); INSERT INTO mental_health_parity_officers (officer_id, name, department) VALUES (2, 'Bob Brown', 'Legal');", 'sql': 'SELECT name, department FROM mental_health.mental_health_parity_officers;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To list the names and departments of all mental health parity officers from the `mental_health` schema, we need to perform a simple SELECT query on the `mental_health_parity_officers` table. The SQL statement will retrieve both the name and department columns for each officer in that table.\n\nHere is the SQL command:\n\n```sql\nSELECT name, department FROM mental_health_parity_officers;\n```',
    sql='Sql: SELECT name, department FROM mental_health_parity_officers;'
), 0), (Example({'sql_prompt': 'Which community health workers have served the most patients from underrepresented communities in the last year?', 'sql_context': "CREATE TABLE community_workers (worker_id INT, worker_name VARCHAR(50), community_type VARCHAR(50), patients_served INT, year INT); INSERT INTO community_workers (worker_id, worker_name, community_type, patients_served, year) VALUES (1, 'John Doe', 'African American', 50, 2021), (2, 'Jane Smith', 'Hispanic', 75, 2021), (3, 'Alice Johnson', 'LGBTQ+', 60, 2021), (4, 'Bob Brown', 'Rural', 40, 2021), (5, 'Maria Garcia', 'Asian', 45, 2021), (6, 'David Kim', 'Native American', 35, 2021);", 'sql': "SELECT community_type, worker_name, SUM(patients_served) as total_patients_served FROM community_workers WHERE year = 2021 AND community_type IN ('African American', 'Hispanic', 'LGBTQ+') GROUP BY community_type, worker_name ORDER BY total_patients_served DESC;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the community health workers who have served the most patients from underrepresented communities in the last year, we need to filter out those workers based on their service to specific community types and then sort them according to the number of patients they have served.\n\nFirstly, let\'s define what constitutes an "underrepresented community" for this context: African American, Hispanic, LGBTQ+, Rural, Asian, and Native American communities are considered underrepresented in this scenario.\n\nNext, we need to filter the data based on the year (last year) and then sort it by the number of patients served in descending order. The SQL query for this would be:',
    sql="SELECT worker_name, community_type, patients_served FROM community_workers WHERE community_type IN ('African American', 'Hispanic', 'LGBTQ+', 'Rural', 'Asian', 'Native American') AND year = YEAR(CURDATE()) - 1 ORDER BY patients_served DESC;"
), 0), (Example({'sql_prompt': "Insert new records into the 'aircraft_manufacturing' table for 'SpaceX' manufacturing the 'Starship' model in 'Boca Chica', 'USA' in 2025", 'sql_context': 'CREATE TABLE aircraft_manufacturing (id INT PRIMARY KEY, manufacturer VARCHAR(50), model VARCHAR(50), city VARCHAR(50), country VARCHAR(50), manufacturing_year INT);', 'sql': "INSERT INTO aircraft_manufacturing (id, manufacturer, model, city, country, manufacturing_year) VALUES (1, 'SpaceX', 'Starship', 'Boca Chica', 'USA', 2025);"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To insert new records into the 'aircraft_manufacturing' table for SpaceX, we need to generate a unique id for each record. Assuming that the highest current id is 10 and incrementing it by one will give us the next available id:\n\n```sql\nINSERT INTO aircraft_manufacturing (id, manufacturer, model, city, country, manufacturing_year) VALUES (11, 'SpaceX', 'Starship', 'Boca Chica', 'USA', 2025);\n```",
    sql="INSERT INTO aircraft_manufacturing (id, manufacturer, model, city, country, manufacturing_year) VALUES (11, 'SpaceX', 'Starship', 'Boca Chica', 'USA', 2025);"
), 0), (Example({'sql_prompt': 'What is the name of each military innovation and the year it was developed by countries in the BRICS?', 'sql_context': "CREATE TABLE military_innovation (name VARCHAR(50), country VARCHAR(50), year INT); INSERT INTO military_innovation (name, country, year) VALUES ('Stealth Fighter', 'China', 2010), ('Cyber Warfare Unit', 'Russia', 2012), ('Stealth Frigate', 'India', 2014), ('Robot Soldier', 'Brazil', 2015), ('Smart Rifle', 'South Africa', 2016);", 'sql': 'SELECT mi.name, mi.year FROM military_innovation mi INNER JOIN (SELECT DISTINCT country FROM military_innovation) mic ON mi.country = mic.country;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the name of each military innovation and the year it was developed by countries in the BRICS (Brazil, Russia, India, China, South Africa), we need to select rows from the `military_innovation` table where the country is one of the BRICS nations.',
    sql="SELECT name, year FROM military_innovation WHERE country IN ('Brazil', 'Russia', 'India', 'China', 'South Africa');"
), 1)]