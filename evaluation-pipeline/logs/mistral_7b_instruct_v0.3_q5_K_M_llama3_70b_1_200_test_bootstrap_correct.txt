[(Example({'sql_prompt': 'Delete records with sales amount over $50,000 in the MilitaryEquipmentSales table', 'sql_context': "CREATE TABLE MilitaryEquipmentSales (id INT, equipment_name VARCHAR(50), sale_amount INT, sale_date DATE); INSERT INTO MilitaryEquipmentSales (id, equipment_name, sale_amount, sale_date) VALUES (1, 'Fighter Jet', 45000, '2021-01-01'), (2, 'Tank', 75000, '2021-02-01');", 'sql': 'DELETE FROM MilitaryEquipmentSales WHERE sale_amount > 50000;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Delete from MilitaryEquipmentSales where sale_amount > 50000;\n\nThis SQL query will delete records with sales amount over $50,000 from the MilitaryEquipmentSales table.',
    sql='DELETE FROM MilitaryEquipmentSales WHERE sale_amount > 50000;'
), 1), (Example({'sql_prompt': 'What is the average number of visitor reviews for heritage sites in each category?', 'sql_context': "CREATE TABLE HeritageSitesReviews (ID INT, SiteName VARCHAR(100), Category VARCHAR(50), Reviews INT); INSERT INTO HeritageSitesReviews (ID, SiteName, Category, Reviews) VALUES (1, 'Machu Picchu', 'Archaeological', 5000); INSERT INTO HeritageSitesReviews (ID, SiteName, Category, Reviews) VALUES (2, 'Taj Mahal', 'Architectural', 8000);", 'sql': 'SELECT Category, AVG(Reviews) OVER (PARTITION BY Category) AS AvgReviews FROM HeritageSitesReviews;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='`Sql:`\n```sql\nSELECT Category, AVG(Reviews) as Average_Reviews\nFROM HeritageSitesReviews\nGROUP BY Category;\n```\nThis query groups the data by category and calculates the average number of reviews for each category from the provided table.',
    sql='```sql\nSELECT Category, AVG(Reviews) as Average_Reviews\nFROM HeritageSitesReviews\nGROUP BY Category;\n```'
), 1), (Example({'sql_prompt': 'What is the total revenue from ads targeting users interested in veganism in Q3 2022?', 'sql_context': 'CREATE TABLE ads (id INT, user INT, platform VARCHAR(50), target VARCHAR(50), start_date DATE, end_date DATE, revenue DECIMAL(10, 2));', 'sql': "SELECT SUM(revenue) FROM ads WHERE target = 'veganism' AND platform IN ('Facebook', 'Instagram') AND start_date BETWEEN '2022-07-01' AND '2022-09-30';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="`SELECT SUM(revenue) as total_revenue FROM ads WHERE platform IS NOT NULL AND target = 'veganism' AND start_date <= '2022-07-01' AND end_date >= '2022-09-30';`\n\nThis SQL query calculates the total revenue from ads that targeted users interested in veganism during Q3 2022. It filters the `ads` table based on the specified conditions and sums up the `revenue` column to get the total revenue for the desired time period and interest category.",
    sql="SELECT SUM(revenue) as total_revenue FROM ads WHERE platform IS NOT NULL AND target = 'veganism' AND start_date <= '2022-07-01' AND end_date >= '2022-09-30';"
), 1), (Example({'sql_prompt': 'What is the minimum duration of workouts for members who joined in 2019, grouped by gender?', 'sql_context': 'CREATE TABLE Workout (WorkoutID INT PRIMARY KEY, MemberID INT, Duration INT, Date DATE); CREATE TABLE Member (MemberID INT PRIMARY KEY, Age INT, Gender VARCHAR(10), MembershipStart DATE);', 'sql': "SELECT Member.Gender, MIN(Workout.Duration) FROM Workout INNER JOIN Member ON Workout.MemberID = Member.MemberID WHERE Member.MembershipStart BETWEEN '2019-01-01' AND '2019-12-31' GROUP BY Member.Gender;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="`What is the minimum duration of workouts for members who joined in 2019, grouped by gender?`\n\n`Sql Context:` `CREATE TABLE Workout (WorkoutID INT PRIMARY KEY, MemberID INT, Duration INT, Date DATE); CREATE TABLE Member (MemberID INT PRIMARY KEY, Age INT, Gender VARCHAR(10), MembershipStart DATE);`\n\n`Reasoning:` Let's think step by step in order to produce the SQL. We need to join the `Workout` and `Member` tables on the `MemberID`, filter for members who joined in 2019, group by gender, and find the",
    sql="SELECT Gender, MIN(Duration) as Min_Duration\nFROM Workout\nJOIN Member ON Workout.MemberID = Member.MemberID\nWHERE MembershipStart = '2019-01-01' OR MembershipStart = '2019-02-01' ... (for all months of 2019)\nGROUP BY Gender;"
), 0), (Example({'sql_prompt': 'How many employees were hired in each month of 2022?', 'sql_context': "CREATE TABLE Employees (EmployeeID INT, HireDate DATE); INSERT INTO Employees (EmployeeID, HireDate) VALUES (1, '2022-01-15'); INSERT INTO Employees (EmployeeID, HireDate) VALUES (2, '2022-02-01');", 'sql': "SELECT EXTRACT(MONTH FROM HireDate) AS Month, COUNT(*) AS NumberOfHires FROM Employees WHERE HireDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY Month;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='produce the SQL. We first need to extract the hire dates from the `Employees` table and group them by month. Then, we count the number of unique hires for each month. Here is the SQL query:\n\n```sql\nSELECT EXTRACT(MONTH FROM HireDate) AS Month, COUNT(DISTINCT EmployeeID) AS NumberOfHires\nFROM Employees\nWHERE YEAR(HireDate) = 2022\nGROUP BY Month;\n```\n\nThis query will return a table with two columns: `Month` (representing the month of hire) and `NumberOfHires` (representing the number of',
    sql='SELECT EXTRACT(MONTH FROM HireDate) AS Month, COUNT(DISTINCT EmployeeID) AS NumberOfHires\nFROM Employees\nWHERE YEAR(HireDate) = 2022\nGROUP BY Month;'
), 1), (Example({'sql_prompt': 'What is the maximum quantity of a single organic product delivered in the DELIVERY_RECORDS table?', 'sql_context': 'CREATE TABLE DELIVERY_RECORDS (id INT, supplier_id INT, product_id INT, is_organic BOOLEAN, quantity INT); INSERT INTO DELIVERY_RECORDS (id, supplier_id, product_id, is_organic, quantity) VALUES (1, 1, 1, true, 50), (2, 2, 2, true, 30);', 'sql': 'SELECT MAX(quantity) FROM DELIVERY_RECORDS WHERE is_organic = true;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="find the maximum quantity of a single organic product delivered in the `DELIVERY_RECORDS` table. We first need to filter out only the organic products from the table using the `is_organic` column, then find the maximum quantity for those records.\n\nHere's the SQL query:\n\n```sql\nSELECT MAX(quantity) AS max_quantity\nFROM DELIVERY_RECORDS\nWHERE is_organic = true;\n```\n\nThis query will return the maximum quantity of organic products delivered in the `DELIVERY_RECORDS` table.",
    sql='```sql\nSELECT MAX(quantity) AS max_quantity\nFROM DELIVERY_RECORDS\nWHERE is_organic = true;\n```'
), 1), (Example({'sql_prompt': 'Update the description of a sustainable urbanism initiative in the sustainable_urbanism_initiatives table', 'sql_context': "CREATE TABLE public.sustainable_urbanism_initiatives (id SERIAL PRIMARY KEY, initiative_name VARCHAR(255), initiative_description TEXT, city_name VARCHAR(255), state_name VARCHAR(255)); INSERT INTO public.sustainable_urbanism_initiatives (initiative_name, initiative_description, city_name, state_name) VALUES ('Green City Program', 'Promotes green spaces and sustainable transportation options in urban areas', 'Portland', 'Oregon'), ('EcoDistricts Initiative', 'Encourages sustainable community development in city neighborhoods', 'Vancouver', 'British Columbia');", 'sql': "WITH updated_initiative AS (UPDATE public.sustainable_urbanism_initiatives SET initiative_description = 'Promotes green spaces, sustainable transportation, and energy-efficient buildings in urban areas' WHERE initiative_name = 'Green City Program' RETURNING *) INSERT INTO public.sustainable_urbanism_initiatives (initiative_name, initiative_description, city_name, state_name) SELECT initiative_name, initiative_description, city_name, state_name FROM updated_initiative;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Update the `initiative_description` field for a specific initiative in the `sustainable_urbanism_initiatives` table. To do this, we need to identify the id of the initiative we want to update and construct an SQL query with the new description.\n\nSince we don't have the id of the specific initiative in the prompt, let's assume that we want to update the description for the 'EcoDistricts Initiative'.",
    sql="```sql\nUPDATE public.sustainable_urbanism_initiatives\nSET initiative_description = 'Encourages sustainable community development and green spaces in city neighborhoods'\nWHERE initiative_name = 'E"
), 1), (Example({'sql_prompt': 'Calculate the year-over-year revenue growth for each restaurant.', 'sql_context': "CREATE TABLE restaurants (restaurant_id INT, restaurant_name VARCHAR(50), city VARCHAR(50), state VARCHAR(50), revenue FLOAT, year INT); INSERT INTO restaurants (restaurant_id, restaurant_name, city, state, revenue, year) VALUES (1, 'Restaurant A', 'City A', 'State A', 123456.78, 2021);", 'sql': 'SELECT restaurant_name, (revenue - LAG(revenue) OVER (PARTITION BY restaurant_name ORDER BY year)) / ABS(LAG(revenue) OVER (PARTITION BY restaurant_name ORDER BY year)) as revenue_growth FROM restaurants;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Calculate the year-over-year revenue growth for each restaurant.\n\nSql Context: CREATE TABLE restaurants (restaurant_id INT, restaurant_name VARCHAR(50), city VARCHAR(50), state VARCHAR(50), revenue FLOAT, year INT); INSERT INTO restaurants (restaurant_id, restaurant_name, city, state, revenue, year) VALUES (1, 'Restaurant A', 'City A', 'State A', 123456.78, 2021);\n\nReasoning: Let's think step by step in order to calculate the year-over-year revenue growth for each",
    sql="SELECT restaurant_id, restaurant_name, city, state, (revenue - LAG(revenue) OVER (ORDER BY year)) / LAG(revenue) OVER (ORDER BY year) AS yoy_growth, year\nFROM restaurants\nWHERE year > 2021;\n\nThis SQL query calculates the year-over-year revenue growth for each restaurant by using a window function to compare the current year's revenue with the previous year's revenue. The `LAG` function is used to access the previous row's value in the same column, and the calculation is done by subtracting the previous year's revenue from the current year's revenue,"
), 1), (Example({'sql_prompt': 'What is the percentage of users in Canada who have used the hashtag #travel?', 'sql_context': "CREATE TABLE posts (id INT, user_id INT, hashtags TEXT); INSERT INTO posts (id, user_id, hashtags) VALUES (1, 1, '#travel'), (2, 1, '#food'), (3, 2, '#travel'), (4, 3, '#art'), (5, 4, '#music'); CREATE TABLE users (id INT, country VARCHAR(2)); INSERT INTO users (id, country) VALUES (1, 'CA'), (2, 'US'), (3, 'CA'), (4, 'DE');", 'sql': "SELECT 100.0 * COUNT(DISTINCT user_id) / (SELECT COUNT(DISTINCT user_id) FROM posts JOIN users ON posts.user_id = users.id WHERE users.country = 'CA') as percentage_travel FROM posts JOIN users ON posts.user_id = users.id WHERE hashtags LIKE '%#travel%' AND users.country = 'CA';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='find the percentage of users in Canada who have used the hashtag #travel.\n\nFirst, we need to identify the users from Canada and then count how many of them have used the hashtag #travel. Finally, we will calculate the percentage.',
    sql="```sql\nSELECT COUNT(DISTINCT posts.user_id) AS num_users_with_hashtag, COUNT(DISTINCT users.id) AS total_canadian_users\nFROM posts\nJOIN users ON posts.user_id = users.id\nWHERE users.country = 'CA' AND hashtags LIKE '%#travel%';\n\nSELECT"
), 0), (Example({'sql_prompt': 'What is the total number of points scored by each team in the NBA this season?', 'sql_context': "CREATE TABLE nba_teams (team_name TEXT, points_scored INT); INSERT INTO nba_teams (team_name, points_scored) VALUES ('Cavaliers', 8000), ('Warriors', 8500), ('Celtics', 7500);", 'sql': 'SELECT team_name, SUM(points_scored) FROM nba_teams GROUP BY team_name;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='`Sql:`\n```sql\nSELECT team_name, SUM(points_scored) as total_points\nFROM nba_teams\nGROUP BY team_name;\n```\nThis query will group the data by team name and sum up the points scored for each team. The result will be a list of teams with their respective total points scored this season.',
    sql='```sql\nSELECT team_name, SUM(points_scored) as total_points FROM nba_teams GROUP BY team_name;\n```'
), 1), (Example({'sql_prompt': 'What is the highest number of hat-tricks scored by a player in a single Bundesliga season?', 'sql_context': "CREATE TABLE german_teams (team_id INT, team_name VARCHAR(50)); INSERT INTO german_teams (team_id, team_name) VALUES (1, 'Bayern Munich'), (2, 'Borussia Dortmund'), (3, 'RB Leipzig'); CREATE TABLE german_matches (match_id INT, home_team_id INT, away_team_id INT, home_team_player_hat_tricks INT, away_team_player_hat_tricks INT); INSERT INTO german_matches (match_id, home_team_id, away_team_id, home_team_player_hat_tricks, away_team_player_hat_tricks) VALUES (1, 1, 2, 1, 0), (2, 2, 3, 0, 1), (3, 3, 1, 1, 0);", 'sql': 'SELECT MAX(home_team_player_hat_tricks + away_team_player_hat_tricks) AS max_hat_tricks FROM german_matches;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='find the highest number of hat-tricks scored by a player in a single Bundesliga season. We first need to identify the players and their hat-trick counts for each match. Then, we will group these data by the players and find the maximum count.',
    sql='```sql\nSELECT MAX(home_team_player_hat_tricks) AS max_hat_tricks\nFROM german_matches\nWHERE home_team_id IN (1, 2, 3) -- Assuming only players from these teams can score hat-tricks in the Bundesliga\nGROUP BY home_team_id;\n```\nThis query will return the maximum number of hat-tr'
), 0), (Example({'sql_prompt': "What is the average word count for articles published in the 'news' schema, grouped by author?", 'sql_context': "CREATE TABLE news.articles (article_id INT, title VARCHAR(100), author VARCHAR(100), word_count INT); INSERT INTO news.articles (article_id, title, author, word_count) VALUES (1, 'Article 1', 'John Doe', 500), (2, 'Article 2', 'Jane Doe', 600), (3, 'Article 3', 'John Doe', 700);", 'sql': 'SELECT author, AVG(word_count) FROM news.articles GROUP BY author;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the SQL. We first need to select the `word_count` field for each row where the `author` matches our grouping criteria (in this case, authors from the 'news' schema). Then we group these results by the author and calculate the average word count for each group.\n\nHere is the SQL query:\n\n```sql\nSELECT author, AVG(word_count) as avg_word_count\nFROM news.articles\nGROUP BY author;\n```\n\nThis query will return a table with authors and their respective average word count for articles published in the 'news' schema.",
    sql='```sql\nSELECT author, AVG(word_count) as avg_word_count\nFROM news.articles\nGROUP BY author;\n```'
), 1), (Example({'sql_prompt': 'Show the total budget allocation for healthcare services in the top 5 states with the highest budget allocation', 'sql_context': 'CREATE TABLE healthcare_services (service_id INT, state_id INT, budget FLOAT);CREATE TABLE states (state_id INT, state_name TEXT);', 'sql': 'SELECT s.state_name, SUM(hs.budget)  FROM healthcare_services hs INNER JOIN states s ON hs.state_id = s.state_id GROUP BY s.state_name ORDER BY SUM(hs.budget) DESC LIMIT 5;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Show the total budget allocation for healthcare services in the top 5 states with the highest budget allocation. We will first join the `healthcare_services` and `states` tables on the `state_id`, then group by the state names, sum the budget allocations, sort the results in descending order of budget allocation, and limit the output to the top 5 states.\n\n```sql\nSELECT state_name, SUM(budget) as total_budget\nFROM healthcare_services\nJOIN states ON healthcare_services.state_id = states.state_id\nGROUP BY state_name\nORDER BY total_budget DESC\nLIMIT 5;\n```',
    sql='SELECT state_name, SUM(budget) as total_budget FROM healthcare_services JOIN states ON healthcare_services.state_id = states.state_id GROUP BY state_name ORDER BY total_budget DESC LIMIT 5;'
), 1), (Example({'sql_prompt': 'Find the total volume of timber sold in 2021', 'sql_context': "CREATE TABLE forests (id INT, name VARCHAR(50), hectares DECIMAL(5,2), year_planted INT, PRIMARY KEY (id)); INSERT INTO forests (id, name, hectares, year_planted) VALUES (1, 'Forest A', 123.45, 1990), (2, 'Forest B', 654.32, 1985); CREATE TABLE timber_sales (id INT, forest_id INT, year INT, volume DECIMAL(10,2), PRIMARY KEY (id)); INSERT INTO timber_sales (id, forest_id, year, volume) VALUES (1, 1, 2021, 120.50), (2, 1, 2022, 150.75), (3, 2, 2021, 450.23), (4, 2, 2022, 520.89);", 'sql': 'SELECT SUM(ts.volume) FROM timber_sales ts INNER JOIN forests f ON ts.forest_id = f.id WHERE ts.year = 2021;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Find the total volume of timber sold in 2021.\n\nFirst, we need to identify the tables that contain the necessary data. In this case, we have `forests` and `timber_sales`. The `forests` table contains information about the forests, while the `timber_sales` table contains information about timber sales.\n\nNext, we need to find the records for the year 2021 in the `timber_sales` table. We can do this by filtering the records where the `year` column equals 2021.\n\nFinally, we need to sum up the `volume` column for the filtered records to get',
    sql='SELECT SUM(volume) FROM timber_sales WHERE year = 2021;'
), 1), (Example({'sql_prompt': 'Who are the top 3 suppliers of recycled polyester?', 'sql_context': "CREATE TABLE suppliers (id INT, name VARCHAR(255), material VARCHAR(255)); INSERT INTO suppliers (id, name, material) VALUES (1, 'Supplier A', 'Recycled Polyester'), (2, 'Supplier B', 'Organic Cotton'), (3, 'Supplier C', 'Recycled Polyester'), (4, 'Supplier D', 'Hemp'), (5, 'Supplier E', 'Recycled Polyester');", 'sql': "SELECT name FROM suppliers WHERE material = 'Recycled Polyester' GROUP BY name ORDER BY COUNT(*) DESC LIMIT 3;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='produce the SQL. We first need to find the suppliers who provide recycled polyester and then sort them in descending order based on the number of items they supply. Here is the SQL query:\n\n```sql',
    sql="SELECT name, COUNT(id) as quantity FROM suppliers WHERE material = 'Recycled Polyester' GROUP BY name ORDER BY quantity DESC LIMIT 3;\n```\n\nThis query will return the names of the top 3 suppliers of recycled polyester along with the number of items they supply."
), 1), (Example({'sql_prompt': "How many donors have donated more than $100 in the 'Donations' table?", 'sql_context': "CREATE TABLE Donations (DonorID INT, DonationDate DATE, Amount DECIMAL(10, 2)); INSERT INTO Donations (DonorID, DonationDate, Amount) VALUES (1, '2022-02-01', 120.00), (2, '2022-01-15', 75.00), (3, '2022-03-05', 150.00);", 'sql': 'SELECT COUNT(*) FROM Donations WHERE Amount > 100;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the SQL query. We first need to identify the table where the donation data is stored, which in this case is the 'Donations' table. Next, we want to find rows where the Amount column exceeds $100. Here's the SQL query:\n\n```sql\nSELECT COUNT(*) FROM Donations WHERE Amount > 100;\n```\n\nThis query will return the number of donors who have donated more than $100.",
    sql='```sql\nSELECT COUNT(*) FROM Donations WHERE Amount > 100;\n```'
), 1), (Example({'sql_prompt': "Update the 'Angkor Wat' excavation to have a start date of 1300-01-01.", 'sql_context': "CREATE TABLE ExcavationSites (SiteID INT PRIMARY KEY, Name VARCHAR(255), Country VARCHAR(255), StartDate DATE, EndDate DATE); INSERT INTO ExcavationSites (SiteID, Name, Country, StartDate, EndDate) VALUES (5, 'Angkor Wat', 'Cambodia', '1860-01-01', '1860-05-01');", 'sql': "UPDATE ExcavationSites SET StartDate = '1300-01-01' WHERE Name = 'Angkor Wat';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Update ExcavationSites\nSET StartDate = '1300-01-01'\nWHERE Name = 'Angkor Wat';\n\nThis SQL query updates the start date of the Angkor Wat excavation site to 1300-01-01. The WHERE clause ensures that only the row with the name 'Angkor Wat' is updated.",
    sql="UPDATE ExcavationSites SET StartDate = '1300-01-01' WHERE Name = 'Angkor Wat';"
), 1), (Example({'sql_prompt': 'Calculate the total CO2 emissions (in metric tons) per capita for each country in the population_data and carbon_emissions tables.', 'sql_context': 'CREATE TABLE population_data (country VARCHAR(50), year INT, population INT); CREATE TABLE carbon_emissions (country VARCHAR(50), year INT, co2_emissions FLOAT);', 'sql': 'SELECT p.country, AVG(co2_emissions/population*1000000) as co2_emissions_per_capita FROM population_data p JOIN carbon_emissions c ON p.country = c.country GROUP BY p.country;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Calculate the total CO2 emissions per capita for each country. First, we need to join the `population_data` and `carbon_emissions` tables on the common field of `country` and `year`. Then, we calculate the population density (population per metric ton of CO2 emissions) by dividing the population by the CO2 emissions. Finally, we transpose the result to get the total CO2 emissions per capita for each country.\n\nHere's the SQL query:\n\n```sql\nWITH emissions_density AS (\n    SELECT\n        country,\n        year,\n        population / co2_emissions AS emissions_density\n    FROM\n        population",
    sql='WITH emissions_density AS (\n    SELECT country, year, population / co2_emissions AS emissions_density\n    FROM population_data\n    JOIN carbon_emissions\n    ON population_data.country = carbon_emissions.country AND population_data.year = carbon_emissions.year\n), total_emissions_per_capita AS (\n    SELECT country, AVG(emissions_density) as avg_emissions_per_capita\n    FROM emissions_density\n    GROUP BY country\n);\n\nSELECT country, avg_emissions_per_capita * 1000000 AS total_emissions_'
), 0), (Example({'sql_prompt': "How many rural infrastructure projects were completed in '2022' in the 'Asia-Pacific' region?", 'sql_context': "CREATE TABLE rural_infrastructure(id INT, project TEXT, location TEXT, completion_year INT); INSERT INTO rural_infrastructure (id, project, location, completion_year) VALUES (1, 'Rural Road Project', 'Asia-Pacific', 2022);", 'sql': "SELECT COUNT(*) FROM rural_infrastructure WHERE location = 'Asia-Pacific' AND completion_year = 2022;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the SQL query. We first identify the table where the data resides (rural_infrastructure). Then we filter the records based on the location and completion year specified in the question ('Asia-Pacific' and '2022'). Finally, we count the number of filtered records to get the total number of rural infrastructure projects completed in '2022' in the 'Asia-Pacific' region.",
    sql="```\nSELECT COUNT(*) FROM rural_infrastructure WHERE location = 'Asia-Pacific' AND completion_year = 2022;\n```"
), 1), (Example({'sql_prompt': "What is the average horsepower of luxury vehicles in the 'GreenCar' database produced after 2017?", 'sql_context': 'CREATE TABLE LuxuryVehicles (Id INT, Make VARCHAR(50), Model VARCHAR(50), Year INT, Horsepower INT);', 'sql': 'SELECT AVG(Horsepower) FROM LuxuryVehicles WHERE Year > 2017;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="`SELECT AVG(Horsepower) FROM LuxuryVehicles WHERE Year > 2017;`\n\nThis SQL query calculates the average horsepower of luxury vehicles produced after 2017 from the provided table 'LuxuryVehicles'.",
    sql='SELECT AVG(Horsepower) FROM LuxuryVehicles WHERE Year > 2017;'
), 1), (Example({'sql_prompt': 'What is the maximum response time for emergency calls in the city of Los Angeles?', 'sql_context': 'CREATE TABLE emergency_calls (id INT, city VARCHAR(20), response_time INT);', 'sql': "SELECT MAX(response_time) FROM emergency_calls WHERE city = 'Los Angeles';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="find the maximum response time for emergency calls in the city of Los Angeles. We first need to identify the table that contains the data, which is `emergency_calls`. Then, we want to find the maximum value for the `response_time` column where the `city` is 'Los Angeles'.",
    sql="```sql\nSELECT MAX(response_time) FROM emergency_calls WHERE city = 'Los Angeles';\n```"
), 1), (Example({'sql_prompt': 'What is the maximum loan amount for socially responsible loans in the Asia-Pacific region?', 'sql_context': "CREATE TABLE socially_responsible_loans (loan_id INT, region VARCHAR(20), loan_amount DECIMAL(10,2)); INSERT INTO socially_responsible_loans (loan_id, region, loan_amount) VALUES (101, 'Asia-Pacific', 50000), (102, 'Europe', 30000), (103, 'Asia-Pacific', 70000);", 'sql': "SELECT MAX(srl.loan_amount) FROM socially_responsible_loans srl WHERE srl.region = 'Asia-Pacific';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='find the maximum loan amount for socially responsible loans in the Asia-Pacific region. We first need to identify the table containing the data and then write a SQL query to filter the records for the specified region and select the maximum loan amount.',
    sql="```sql\nSELECT MAX(loan_amount) AS max_loan_amount\nFROM socially_responsible_loans\nWHERE region = 'Asia-Pacific';\n```"
), 1), (Example({'sql_prompt': 'What is the maximum number of years a traditional art form has been preserved in each country?', 'sql_context': "CREATE TABLE countries (id INT, name TEXT); INSERT INTO countries (id, name) VALUES (1, 'Nigeria'), (2, 'Brazil'); CREATE TABLE art_forms (id INT, country_id INT, name TEXT, year_preserved INT); INSERT INTO art_forms (id, country_id, name, year_preserved) VALUES (1, 1, 'Tie-dye', 500), (2, 1, 'Batik', 1000), (3, 2, 'Capoeira', 400);", 'sql': 'SELECT c.name, MAX(af.year_preserved) FROM countries c JOIN art_forms af ON c.id = af.country_id GROUP BY c.id;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='produce the SQL. We first need to group the data by country and find the maximum year of preservation for each art form. Here is the SQL query:\n\n```sql\nSELECT countries.name, MAX(art_forms.year_preserved) AS max_year_preserved\nFROM countries\nJOIN art_forms ON countries.id = art_forms.country_id\nGROUP BY countries.name;\n```\n\nThis query will return a table with the name of each country and the maximum year that an art form has been preserved in that country.',
    sql='SELECT countries.name, MAX(art_forms.year_preserved) AS max_year_preserved\nFROM countries\nJOIN art_forms ON countries.id = art_forms.country_id\nGROUP BY countries.name;'
), 1), (Example({'sql_prompt': 'What is the maximum hourly wage for each labor category in the construction industry?', 'sql_context': 'CREATE TABLE labor_statistics (id INT, industry VARCHAR(255), category VARCHAR(255), title VARCHAR(255), hourly_wage DECIMAL(5,2));', 'sql': "SELECT industry, category, MAX(hourly_wage) as max_hourly_wage FROM labor_statistics WHERE industry = 'construction' GROUP BY industry, category;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="`SELECT category, MAX(hourly_wage) as max_hourly_wage FROM labor_statistics WHERE industry = 'construction' GROUP BY category;`\n\nThis SQL query groups the data by labor category from the `labor_statistics` table where the industry is 'construction', and then selects the maximum hourly wage for each group.",
    sql="SELECT category, MAX(hourly_wage) as max_hourly_wage\nFROM labor_statistics\nWHERE industry = 'construction'\nGROUP BY category;"
), 1), (Example({'sql_prompt': 'List all the drought-impacted counties in Texas in 2018.', 'sql_context': "CREATE TABLE drought_impact(county VARCHAR(20), state VARCHAR(20), year INT, impacted BOOLEAN); INSERT INTO drought_impact(county, state, year, impacted) VALUES ('Harris', 'Texas', 2015, true), ('Harris', 'Texas', 2016, true), ('Harris', 'Texas', 2017, true), ('Harris', 'Texas', 2018, true), ('Bexar', 'Texas', 2015, false), ('Bexar', 'Texas', 2016, false), ('Bexar', 'Texas', 2017, false), ('Bexar', 'Texas', 2018, false);", 'sql': "SELECT county FROM drought_impact WHERE state = 'Texas' AND year = 2018 AND impacted = true;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='List all the drought-impacted counties in Texas in 2018. To achieve this, we need to filter the `drought_impact` table for rows where the county is from Texas and the year is 2018, and the impacted field is true.',
    sql="```sql\nSELECT county FROM drought_impact WHERE state = 'Texas' AND year = 2018 AND impacted = true;\n```"
), 1), (Example({'sql_prompt': 'Find the top 3 genres with the highest revenue in 2022 for streaming services in the USA.', 'sql_context': "CREATE TABLE streaming_services (service_id INT, service_name VARCHAR(255), revenue DECIMAL(10,2)); INSERT INTO streaming_services (service_id, service_name, revenue) VALUES (1, 'StreamingCo', 5000000.00); CREATE TABLE genre_sales (sale_id INT, service_id INT, genre VARCHAR(255), sales DECIMAL(10,2)); INSERT INTO genre_sales (sale_id, service_id, genre, sales) VALUES (1, 1, 'Rock', 150000.00);", 'sql': "SELECT genre, SUM(sales) as total_sales FROM genre_sales gs JOIN streaming_services s ON gs.service_id = s.service_id WHERE s.service_country = 'USA' AND s.service_year = 2022 GROUP BY genre ORDER BY total_sales DESC LIMIT 3;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Find the top 3 genres with the highest revenue in 2022 for streaming services in the USA. To achieve this, we first need to join the `streaming_services` and `genre_sales` tables on the `service_id`. Then, we filter the data for the year 2022 and group by genre to calculate the total sales for each genre. Finally, we order the results in descending order of sales and limit the output to the top 3 genres.\n\nHere's the SQL query:\n\n```sql\nSELECT genre, SUM(sales) as total_revenue\nFROM streaming_services s\nJOIN genre_sales g",
    sql='```sql\nSELECT genre, SUM(sales) as total_revenue\nFROM streaming_services s\nJOIN genre_sales g ON s.service_id = g.service_id\nWHERE YEAR(g.sale_date) = 2022\nGROUP BY genre\nORDER BY total_revenue DESC\nLIMIT 3;\n```'
), 0), (Example({'sql_prompt': "List all unique fields from the 'geology' and 'infrastructure' tables.", 'sql_context': 'CREATE TABLE geology (well_id INT, rock_type VARCHAR(50)); CREATE TABLE infrastructure (well_id INT, platform_type VARCHAR(50));', 'sql': "SELECT field FROM (SELECT 'geology' as table_name, column_name as field FROM information_schema.columns WHERE table_name = 'geology' UNION ALL SELECT 'infrastructure' as table_name, column_name as field FROM information_schema.columns WHERE table_name = 'infrastructure') as subquery;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="List all unique fields from the 'geology' and 'infrastructure' tables.\n\nSql Context: CREATE TABLE geology (well_id INT, rock_type VARCHAR(50)); CREATE TABLE infrastructure (well_id INT, platform_type VARCHAR(50));\n\nReasoning: To achieve this, we will use the DISTINCT keyword to remove duplicates and the UNION operator to combine the results from both tables. Here's the SQL query:",
    sql='SELECT DISTINCT column_name FROM geology UNION ALL SELECT DISTINCT column_name FROM infrastructure;'
), 1), (Example({'sql_prompt': 'Calculate the percentage of total Europium production for each country.', 'sql_context': 'CREATE TABLE europium_production (country VARCHAR(50), quantity INT);', 'sql': 'SELECT country, quantity * 100.0 / SUM(quantity) OVER (PARTITION BY NULL) AS percentage FROM europium_production;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Calculate the percentage of total Europium production for each country. We first need to find the total production and then calculate the percentage for each country. Here is the SQL query:\n\n```sql\nSELECT country, quantity, (quantity / SUM(quantity) OVER()) * 100 AS percentage\nFROM europium_production;\n```\n\nThis query calculates the total production using the `SUM()` function with an analytic function `OVER()`. Then it calculates the percentage for each country by dividing the quantity of Europium produced by the total production and multiplying by 100.',
    sql='SELECT country, quantity, (quantity / SUM(quantity) OVER()) * 100 AS percentage FROM europium_production;'
), 1), (Example({'sql_prompt': 'Find the mobile subscribers with consecutive speed drops greater than 25% for the last 3 months, ordered by subscription IDs.', 'sql_context': 'CREATE TABLE mobile_usage_detailed (subscriber_id INT, month INT, speed FLOAT); INSERT INTO mobile_usage_detailed (subscriber_id, month, speed) VALUES (1, 1, 100), (1, 2, 80), (1, 3, 70), (2, 1, 200), (2, 2, 180), (2, 3, 160), (3, 1, 150), (3, 2, 130), (3, 3, 110);', 'sql': 'SELECT subscriber_id, speed, month FROM (SELECT subscriber_id, speed, month, LAG(speed, 1) OVER (PARTITION BY subscriber_id ORDER BY month) as prev_speed, LAG(speed, 2) OVER (PARTITION BY subscriber_id ORDER BY month) as prev_prev_speed FROM mobile_usage_detailed) t WHERE t.speed < 0.75 * t.prev_speed AND t.speed < 0.75 * t.prev_prev_speed ORDER BY subscriber_id;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Find the mobile subscribers with consecutive speed drops greater than 25% for the last 3 months, ordered by subscription IDs.\n\nSql Context: CREATE TABLE mobile_usage_detailed (subscriber_id INT, month INT, speed FLOAT); INSERT INTO mobile_usage_detailed (subscriber_id, month, speed) VALUES (1, 1, 100), (1, 2, 80), (1, 3, 70), (2, 1, 200), (2, 2, 180), (2, 3, 160), (3,',
    sql="SELECT subscriber_id\nFROM mobile_usage_detailed\nWHERE speed * 0.75 < (SELECT speed FROM mobile_usage_detailed WHERE subscriber_id = a.subscriber_id AND month = a.month - 1)\nAND month >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)\nORDER BY subscriber_id;\n\nThis SQL query finds the subscribers who have consecutive speed drops greater than 25% for the last 3 months, ordered by subscription IDs. It checks if the current month's speed is less than 75% of the previous month's speed and ensures that the considered months are within"
), 1), (Example({'sql_prompt': 'What is the distribution of AI safety research topics by year?', 'sql_context': "CREATE TABLE if not exists ai_safety_research (year INT, topic VARCHAR(255)); INSERT INTO ai_safety_research (year, topic) VALUES (2018, 'Explainable AI'), (2019, 'Algorithmic fairness'), (2020, 'AI safety'), (2021, 'Robust AI'), (2022, 'AI ethics');", 'sql': 'SELECT year, topic, COUNT(*) OVER (PARTITION BY year) as research_count FROM ai_safety_research ORDER BY year;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='produce the SQL. We first need to count the number of occurrences for each year and group them by the year. Here is the SQL query:\n\n```sql\nSELECT year, COUNT(*) as frequency\nFROM ai_safety_research\nGROUP BY year;\n```\n\nThis query will return a table with two columns: `year` and `frequency`. The `year` column shows the years for which research topics were recorded, and the `frequency` column shows the number of occurrences (i.e., the number of unique research topics) for each year.',
    sql='```sql\nSELECT year, COUNT(*) as frequency FROM ai_safety_research GROUP BY year;\n```'
), 1), (Example({'sql_prompt': "How many forest management practices are recorded in the 'tropical_forests'?", 'sql_context': "CREATE TABLE forest_management (id INT, forest_type VARCHAR(50), practice_count INT); INSERT INTO forest_management (id, forest_type, practice_count) VALUES (1, 'Tropical Forests', 45); INSERT INTO forest_management (id, forest_type, practice_count) VALUES (2, 'Temperate Forests', 34);", 'sql': "SELECT practice_count FROM forest_management WHERE forest_type = 'Tropical Forests';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="`SELECT practice_count FROM forest_management WHERE forest_type = 'Tropical Forests';`\n\nThis SQL query will select the practice count from the 'forest_management' table where the forest type is 'Tropical Forests'.",
    sql="SELECT practice_count FROM forest_management WHERE forest_type = 'Tropical Forests';"
), 1), (Example({'sql_prompt': 'What is the distribution of lifelong learning course enrollments by age group, in total?', 'sql_context': 'CREATE TABLE lifelong_learning (student_id INT, age_group VARCHAR(255), course_id INT); CREATE TABLE courses (course_id INT, course_name VARCHAR(255));', 'sql': 'SELECT l.age_group, COUNT(l.course_id) FROM lifelong_learning l INNER JOIN courses c ON l.course_id = c.course_id GROUP BY l.age_group;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="get the distribution of lifelong learning course enrollments by age group, in total. We first need to join the `lifelong_learning` and `courses` tables on the `course_id`. Then, we will group the data by `age_group` and count the number of unique student IDs for each age group. Finally, we will select the age group and the corresponding count.\n\nHere's the SQL query:\n\n```sql\nSELECT age_group, COUNT(DISTINCT student_id) as enrollment_count\nFROM lifelong_learning\nJOIN courses ON lifelong_learning.course_id = courses.course_id\nGROUP",
    sql='```sql\nSELECT age_group, COUNT(DISTINCT student_id) as enrollment_count\nFROM lifelong_learning\nJOIN courses ON lifelong_learning.course_id = courses.course_id\nGROUP BY age_group;\n```'
), 1), (Example({'sql_prompt': "Insert new records into the Employee table with the following data: EmployeeID 3, FirstName 'Mike', LastName 'Smith', Department 'Environment'.", 'sql_context': 'CREATE TABLE Employee (EmployeeID INT, FirstName VARCHAR(50), LastName VARCHAR(50), Department VARCHAR(50));', 'sql': "INSERT INTO Employee (EmployeeID, FirstName, LastName, Department) VALUES (3, 'Mike', 'Smith', 'Environment');"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Insert the following data into the `Employee` table:\n\n```sql\nINSERT INTO Employee (EmployeeID, FirstName, LastName, Department)\nVALUES (3, 'Mike', 'Smith', 'Environment');\n```",
    sql="INSERT INTO Employee (EmployeeID, FirstName, LastName, Department) VALUES (3, 'Mike', 'Smith', 'Environment');"
), 1), (Example({'sql_prompt': 'Which cosmetic brands have the highest average customer rating?', 'sql_context': "CREATE TABLE brand (id INT, name VARCHAR(255), avg_rating FLOAT); CREATE TABLE rating (brand_id INT, rating FLOAT); INSERT INTO brand (id, name, avg_rating) VALUES (1, 'Lush', 4.2), (2, 'The Body Shop', 4.1), (3, 'Sephora', 4.3); INSERT INTO rating (brand_id, rating) VALUES (1, 4.5), (1, 4.0), (2, 4.1), (2, 4.2), (3, 4.4), (3, 4.3);", 'sql': 'SELECT b.name, AVG(r.rating) as avg_rating FROM brand b JOIN rating r ON b.id = r.brand_id GROUP BY b.name ORDER BY avg_rating DESC;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='produce the SQL query for finding the cosmetic brands with the highest average customer rating. We first need to calculate the average rating for each brand and then find the maximum value among them. Here is the SQL query:\n\n```sql\nSELECT name AS brand_name, AVG(rating) AS avg_rating\nFROM rating\nJOIN brand ON rating.brand_id = brand.id\nGROUP BY brand.id\nORDER BY avg_rating DESC\nLIMIT 1;\n```\n\nThis query calculates the average rating for each brand by joining the `rating` and `brand` tables, groups them by brand id, orders the results in descending order of average ratings, and finally returns',
    sql='SELECT name AS brand_name, AVG(rating) AS avg_rating FROM rating JOIN brand ON rating.brand_id = brand.id GROUP BY brand.id ORDER BY avg_rating DESC LIMIT 1;'
), 0), (Example({'sql_prompt': 'How many unique volunteers worked on projects in each cause area?', 'sql_context': "CREATE TABLE volunteers (id INT, name VARCHAR(30), cause_area VARCHAR(20)); INSERT INTO volunteers (id, name, cause_area) VALUES (1, 'Bob', 'children'), (2, 'Alice', 'children'), (3, 'Charlie', 'health');", 'sql': 'SELECT cause_area, COUNT(DISTINCT name) FROM volunteers GROUP BY cause_area;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='find the number of unique volunteers working on projects in each cause area. We first need to group the data by `cause_area` and then count the distinct `id` values within each group. Here is the SQL query:\n\n```sql\nSELECT cause_area, COUNT(DISTINCT id) AS num_volunteers\nFROM volunteers\nGROUP BY cause_area;\n```\n\nThis query will return a table with two columns: `cause_area` and `num_volunteers`, where each row represents the number of unique volunteers working on projects in a specific cause area.',
    sql='SELECT cause_area, COUNT(DISTINCT id) AS num_volunteers FROM volunteers GROUP BY cause_area;'
), 1), (Example({'sql_prompt': 'Who were the top 3 content creators in terms of likes received on their posts in January 2022?', 'sql_context': "CREATE SCHEMA content; CREATE TABLE creators(creator_id INT, name VARCHAR(255), total_likes INT); INSERT INTO creators (creator_id, name, total_likes) VALUES (1, 'Alice', 5000); INSERT INTO creators (creator_id, name, total_likes) VALUES (2, 'Bob', 7000);", 'sql': 'SELECT name, SUM(total_likes) AS total_likes_january FROM content.creators WHERE MONTH(created_date) = 1 GROUP BY name ORDER BY total_likes_january DESC LIMIT 3;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='produce the SQL query. We first need to filter the data for January 2022 and then sort it by the number of likes received in descending order to find the top 3 content creators. Here is the SQL query:\n\n```sql\nSELECT name, total_likes FROM creators WHERE MONTH(created_at) = 1 AND YEAR(created_at) = 2022 ORDER BY total_likes DESC LIMIT 3;\n```\n\nAssuming that the table `creators` has a column named `created_at` which stores the date when each post was created. This query will return the names and total likes of the top 3',
    sql='SELECT name, total_likes FROM creators WHERE MONTH(created_at) = 1 AND YEAR(created_at) = 2022 ORDER BY total_likes DESC LIMIT 3;'
), 0), (Example({'sql_prompt': "Update records in the 'Volunteers' table where the volunteer's skill level is 'Beginner' and change it to 'Intermediate'", 'sql_context': 'CREATE TABLE Volunteers (id INT PRIMARY KEY, volunteer_name VARCHAR(255), skill_level VARCHAR(255), last_volunteered DATE);', 'sql': "UPDATE Volunteers SET skill_level = 'Intermediate' WHERE skill_level = 'Beginner';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Update the `Volunteers` table where the `skill_level` is 'Beginner'. Set the new `skill_level` to 'Intermediate'.",
    sql="```sql\nUPDATE Volunteers\nSET skill_level = 'Intermediate'\nWHERE skill_level = 'Beginner';\n```"
), 1), (Example({'sql_prompt': 'Identify the number of farmers involved in urban agriculture initiatives in California and New York in 2019.', 'sql_context': "CREATE TABLE Urban_Agriculture (Farmer_ID INT, State VARCHAR(20), Initiative VARCHAR(20), Year INT); INSERT INTO Urban_Agriculture (Farmer_ID, State, Initiative, Year) VALUES (101, 'California', 'Community_Garden', 2019), (102, 'California', 'Rooftop_Farming', 2019), (103, 'New_York', 'Community_Garden', 2019);", 'sql': "SELECT COUNT(DISTINCT Farmer_ID) FROM Urban_Agriculture WHERE State IN ('California', 'New York') AND Year = 2019 AND Initiative IN ('Community_Garden', 'Rooftop_Farming');"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Identify the number of farmers involved in urban agriculture initiatives in California and New York in 2019. We will use a SQL query that selects distinct states (California and New York) and the year (2019), then count the number of unique farmer IDs for each state.\n\n```sql\nSELECT State, COUNT(DISTINCT Farmer_ID) as Number_of_Farmers\nFROM Urban_Agriculture\nWHERE Year = 2019 AND State IN ('California', 'New York')\nGROUP BY State;\n```",
    sql="```sql SELECT State, COUNT(DISTINCT Farmer_ID) as Number_of_Farmers FROM Urban_Agriculture WHERE Year = 2019 AND State IN ('California', 'New York') GROUP BY State;\n```"
), 1), (Example({'sql_prompt': "Update the accommodation type for a student with a StudentID of 2 from 'Assistive Listening Devices' to 'Sign Language Interpretation'.", 'sql_context': "CREATE TABLE StudentAccommodations (StudentID INT, StudentName VARCHAR(255), DisabilityType VARCHAR(255), AccommodationType VARCHAR(255), GraduationYear INT); INSERT INTO StudentAccommodations (StudentID, StudentName, DisabilityType, AccommodationType, GraduationYear) VALUES (1, 'John Doe', 'Visual Impairment', 'Sign Language Interpretation', 2018), (2, 'Jane Smith', 'Hearing Impairment', 'Assistive Listening Devices', NULL), (3, 'Michael Johnson', 'Mobility Impairment', 'Assistive Technology', 2019), (4, 'Sara Johnson', 'Physical Disability', 'Mobility Assistance', 2022);", 'sql': "UPDATE StudentAccommodations SET AccommodationType = 'Sign Language Interpretation' WHERE StudentID = 2;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Update `StudentAccommodations` table, set the `AccommodationType` for a student with a `StudentID` of 2 to 'Sign Language Interpretation'.",
    sql="```\nUPDATE StudentAccommodations SET AccommodationType = 'Sign Language Interpretation' WHERE StudentID = 2;\n```"
), 1), (Example({'sql_prompt': 'What is the minimum square footage of an inclusive housing unit in the city of Miami?', 'sql_context': "CREATE TABLE housing (id INT, city VARCHAR(20), size INT, inclusive BOOLEAN); INSERT INTO housing (id, city, size, inclusive) VALUES (1, 'Miami', 800, TRUE), (2, 'Miami', 1000, FALSE), (3, 'Miami', 1200, TRUE);", 'sql': "SELECT MIN(size) FROM housing WHERE city = 'Miami' AND inclusive = TRUE;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="find the minimum square footage of an inclusive housing unit in the city of Miami. We first need to filter the data for inclusive units in Miami and then find the minimum size. Here is the SQL query:\n\n```sql\nSELECT MIN(size) FROM housing WHERE city = 'Miami' AND inclusive = TRUE;\n```",
    sql="```sql\nSELECT MIN(size) FROM housing WHERE city = 'Miami' AND inclusive = TRUE;\n```"
), 1), (Example({'sql_prompt': 'How many works were exhibited in the year 1950?', 'sql_context': "CREATE TABLE exhibitions (exhibition_id INT PRIMARY KEY, exhibition_name TEXT, year INT, location TEXT);CREATE TABLE exhibits (exhibit_id INT PRIMARY KEY, work_id INT, exhibition_id INT, FOREIGN KEY (work_id) REFERENCES works(work_id), FOREIGN KEY (exhibition_id) REFERENCES exhibitions(exhibition_id));INSERT INTO exhibitions (exhibition_id, exhibition_name, year, location) VALUES (1, 'Documenta', 1950, 'Kassel, Germany'); INSERT INTO exhibits (exhibit_id, work_id, exhibition_id) VALUES (1, 1, 1);", 'sql': 'SELECT COUNT(*) FROM exhibits e JOIN exhibitions ex ON e.exhibition_id = ex.exhibition_id WHERE ex.year = 1950;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='`Sql:`\n```sql\nSELECT COUNT(*) FROM exhibits WHERE year = 1950;\n```\nThis query counts the number of rows in the `exhibits` table where the year is 1950, which represents the number of works that were exhibited in the year 1950.',
    sql='SELECT COUNT(*) FROM exhibits WHERE year = 1950;'
), 0), (Example({'sql_prompt': 'What is the total number of articles written by each author in each region?', 'sql_context': "CREATE TABLE authors (id INT, name TEXT); CREATE TABLE regions (id INT, name TEXT); CREATE TABLE articles (id INT, title TEXT, content TEXT, author_id INT, region_id INT); INSERT INTO authors (id, name) VALUES (1, 'John Doe'), (2, 'Jane Smith'); INSERT INTO regions (id, name) VALUES (1, 'North'), (2, 'South'), (3, 'East'), (4, 'West'); INSERT INTO articles (id, title, content, author_id, region_id) VALUES (1, 'Article 1', 'Content 1', 1, 1), (2, 'Article 2', 'Content 2', 2, 2), (3, 'Article 3', 'Content 3', 1, 3), (4, 'Article 4', 'Content 4', 2, 4);", 'sql': 'SELECT authors.name, regions.name, COUNT(articles.id) FROM authors INNER JOIN articles ON authors.id = articles.author_id INNER JOIN regions ON regions.id = articles.region_id GROUP BY authors.name, regions.name;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the SQL. We will first group the articles by author and region, then we will use a subquery to count the number of articles for each group. Here is the SQL query:\n\n```sql\nSELECT authors.name AS Author, regions.name AS Region, COUNT(articles.id) AS Total_Articles\nFROM authors\nJOIN articles ON authors.id = articles.author_id\nJOIN regions ON articles.region_id = regions.id\nGROUP BY authors.name, regions.name;\n```\n\nThis query will return a table with the author's name, region name, and the total number of articles written by each author in each region.",
    sql='SELECT authors.name AS Author, regions.name AS Region, COUNT(articles.id) AS Total_Articles\nFROM authors\nJOIN articles ON authors.id = articles.author_id\nJOIN regions ON articles.region_id = regions.id\nGROUP BY authors.name, regions.name;'
), 1), (Example({'sql_prompt': 'How many tunnels in Washington state were constructed after 2010?', 'sql_context': "CREATE TABLE tunnels (id INT, name TEXT, state TEXT, build_year INT); INSERT INTO tunnels (id, name, state, build_year) VALUES (1, 'WA-1 Underpass', 'WA', 2012);", 'sql': "SELECT COUNT(*) FROM tunnels WHERE state = 'WA' AND build_year > 2010;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='find the number of tunnels constructed after 2010. We first need to filter the `tunnels` table for rows where the `build_year` is greater than 2010, and then count those rows.',
    sql='```sql\nSELECT COUNT(*) FROM tunnels WHERE build_year > 2010;\n```'
), 1), (Example({'sql_prompt': 'List the top 5 models with the highest explainability scores and their development team names.', 'sql_context': 'CREATE TABLE ModelExplainabilityScores (ModelID INT, ExplainabilityScore INT, TeamID INT); CREATE TABLE TeamNames (TeamID INT, TeamName VARCHAR(50));', 'sql': 'SELECT ModelExplainabilityScores.ModelID, MAX(ModelExplainabilityScores.ExplainabilityScore) AS MaxExplainabilityScore, TeamNames.TeamName FROM ModelExplainabilityScores INNER JOIN TeamNames ON ModelExplainabilityScores.TeamID = TeamNames.TeamID GROUP BY ModelExplainabilityScores.TeamID ORDER BY MaxExplainabilityScore DESC, TeamNames.TeamName DESC LIMIT 5;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="List the top 5 models with the highest explainability scores and their development team names. To achieve this, we first need to join the two tables `ModelExplainabilityScores` and `TeamNames` based on the common column `TeamID`. Then, we sort the combined table by the `ExplainabilityScore` in descending order and limit the results to the top 5. Finally, we select the `ModelID` and `TeamName` columns from the sorted results.\n\nHere's the SQL query:\n\n```sql\nSELECT ModelExplainabilityScores.ModelID, TeamNames.TeamName\nFROM ModelExplainabilityScores\nJOIN TeamNames ON Model",
    sql='SELECT ModelExplainabilityScores.ModelID, TeamNames.TeamName\nFROM ModelExplainabilityScores\nJOIN TeamNames ON ModelExplainabilityScores.TeamID = TeamNames.TeamID\nORDER BY ModelExplainabilityScores.ExplainabilityScore DESC\nLIMIT 5;'
), 1), (Example({'sql_prompt': 'How many renewable energy power plants are there in Texas?', 'sql_context': "CREATE TABLE power_plants (state VARCHAR(255), source_type VARCHAR(255), count INT); INSERT INTO power_plants (state, source_type, count) VALUES ('Texas', 'Wind', 45), ('Texas', 'Solar', 25), ('Texas', 'Hydro', 10);", 'sql': "SELECT SUM(count) FROM power_plants WHERE state = 'Texas';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='produce the SQL query. We first identify the table where the data resides (power_plants). Then, we filter the records for the state of Texas and sum up the count of renewable energy power plants (Wind and Solar).',
    sql="```\nSELECT SUM(count) AS total_renewable_plants\nFROM power_plants\nWHERE state = 'Texas' AND source_type IN ('Wind', 'Solar');\n```"
), 1), (Example({'sql_prompt': 'Find the top 5 countries with the lowest financial capability scores in Europe.', 'sql_context': 'CREATE TABLE financial_capability (id INT, country VARCHAR(255), score INT);', 'sql': "SELECT country, score FROM (SELECT country, score, ROW_NUMBER() OVER (ORDER BY score ASC) rn FROM financial_capability WHERE region = 'Europe') t WHERE rn <= 5;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Find the top 5 countries with the lowest financial capability scores in Europe. We first need to filter the data for European countries and then sort them based on the score in ascending order (lowest first). Here is the SQL query:\n\n```sql\nSELECT country\nFROM financial_capability\nWHERE country LIKE 'Europe%'\nORDER BY score ASC\nLIMIT 5;\n```",
    sql="```sql\nSELECT country\nFROM financial_capability\nWHERE country LIKE 'Europe%'\nORDER BY score ASC\nLIMIT 5;\n```"
), 0), (Example({'sql_prompt': 'What is the correlation between climate change and biodiversity in the Arctic?', 'sql_context': "CREATE TABLE Climate_Change (id INT PRIMARY KEY, year INT, temperature FLOAT, region VARCHAR(50)); CREATE TABLE Biodiversity (id INT, year INT, species_count INT, region VARCHAR(50), climate_id INT, FOREIGN KEY (climate_id) REFERENCES Climate_Change(id)); INSERT INTO Climate_Change (id, year, temperature, region) VALUES (1, 2000, -10.0, 'Arctic'), (2, 2010, -9.5, 'Arctic'); INSERT INTO Biodiversity (id, year, species_count, region, climate_id) VALUES (1, 2000, 100, 'Arctic', 1), (2, 2010, 105, 'Arctic', 2);", 'sql': "SELECT Climate_Change.year, Climate_Change.temperature, Biodiversity.species_count FROM Climate_Change INNER JOIN Biodiversity ON Climate_Change.id = Biodiversity.climate_id WHERE Climate_Change.region = 'Arctic';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the SQL. We want to find the correlation between temperature and species count in the Arctic over time. Since we have two tables (Climate_Change and Biodiversity) related through a foreign key, we can join them on the climate_id field and then calculate the correlation using the Pearson correlation coefficient function.\n\nHere's the SQL query:\n\n```sql\nSELECT Pearson(temperature, species_count) AS Correlation\nFROM (\n    SELECT climate_id, temperature, species_count, year\n    FROM Climate_Change\n    JOIN Biodiversity ON Climate_Change.id = Biodiversity.climate_id\n) AS Data",
    sql='```sql\nSELECT Pearson(temperature, species_count) AS Correlation\nFROM (\n    SELECT climate_id, temperature, species_count, year\n    FROM Climate_Change\n    JOIN Biodiversity ON Climate_Change.id = Biodiversity.climate_id\n) AS Data\n```'
), 1), (Example({'sql_prompt': 'What is the average budget allocated for ethical AI research by country?', 'sql_context': "CREATE TABLE Country (CountryID INT PRIMARY KEY, CountryName VARCHAR(100), Budget DECIMAL(10,2)); INSERT INTO Country (CountryID, CountryName, Budget) VALUES (1, 'USA', 5000000.00), (2, 'Canada', 3000000.00), (3, 'Mexico', 1000000.00);", 'sql': 'SELECT AVG(Budget) as AvgBudget, CountryName FROM Country GROUP BY CountryName;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='`SELECT AVG(Budget) as Average_Budget, CountryName FROM Country GROUP BY CountryName;`\n\nThis SQL query calculates the average budget for ethical AI research by country from the provided table. It groups the data by country and then calculates the average budget for each group. The result is presented with the average budget and the corresponding country name.',
    sql='SELECT AVG(Budget) as Average_Budget, CountryName FROM Country GROUP BY CountryName;'
), 1), (Example({'sql_prompt': 'What is the total fare collected for each train line?', 'sql_context': "CREATE TABLE train_lines (line_id INT, line_name TEXT); CREATE TABLE fares (fare_id INT, line_id INT, fare DECIMAL); INSERT INTO train_lines VALUES (1, 'Line 1'), (2, 'Line 2'), (3, 'Line 3'); INSERT INTO fares VALUES (1, 1, 3.50), (2, 1, 3.50), (3, 2, 4.25), (4, 3, 5.00), (5, 3, 5.00);", 'sql': 'SELECT train_lines.line_name, SUM(fares.fare) AS total_fare FROM train_lines INNER JOIN fares ON train_lines.line_id = fares.line_id GROUP BY train_lines.line_id;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='produce the SQL query for getting the total fare collected for each train line. We first need to group the fares by their respective train lines and then sum up the fares for each group. Here is the SQL query:\n\n```sql\nSELECT line_id, SUM(fare) AS total_fare\nFROM fares\nGROUP BY line_id;\n```\n\nThis query will return a table with two columns: `line_id` and `total_fare`. The `line_id` column will contain the IDs of the train lines, and the `total_fare` column will contain the total fare collected for each train line.',
    sql='SELECT line_id, SUM(fare) AS total_fare FROM fares GROUP BY line_id;'
), 1), (Example({'sql_prompt': 'What is the total revenue for cosmetics products that are not cruelty-free?', 'sql_context': 'CREATE TABLE product (product_id INT, name TEXT, price FLOAT, cruelty_free BOOLEAN); CREATE TABLE sales (sale_id INT, product_id INT, quantity INT);', 'sql': 'SELECT SUM(price * quantity) FROM product INNER JOIN sales ON product.product_id = sales.product_id WHERE cruelty_free = FALSE;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="find the total revenue for cosmetics products that are not cruelty-free.\n\nFirst, we need to identify the cosmetics products and filter out those that are cruelty-free. Then, we will join this filtered product table with the sales table to calculate the total revenue.\n\nHere's the SQL query:\n\n```sql\nSELECT SUM(sales.quantity * product.price) AS TotalRevenue\nFROM product\nJOIN sales ON product.product_id = sales.product_id\nWHERE product.cruelty_free = FALSE AND product.name LIKE '%cosmetics%';\n```\n\nThis query calculates the total revenue",
    sql="SELECT SUM(sales.quantity * product.price) AS TotalRevenue\nFROM product\nJOIN sales ON product.product_id = sales.product_id\nWHERE product.cruelty_free = FALSE AND product.name LIKE '%cosmetics%';"
), 1), (Example({'sql_prompt': 'What is the total cost of permits for projects with permit numbers greater than 700?', 'sql_context': "CREATE TABLE permit_data (id INT, project VARCHAR(50), permit_number INT, start_date DATE, permit_cost DECIMAL(10,2)); INSERT INTO permit_data (id, project, permit_number, start_date, permit_cost) VALUES (1, 'Office Building', 450, '2019-12-20', 850.00), (2, 'Residential Apartments', 751, '2021-03-01', 1200.50), (3, 'School', 333, '2020-06-15', 500.25), (4, 'Mall', 780, '2020-12-01', 1500.75);", 'sql': 'SELECT SUM(permit_cost) FROM permit_data WHERE permit_number > 700;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='`SELECT SUM(permit_cost) as total_cost FROM permit_data WHERE permit_number > 700;`\n\nThis SQL query calculates the sum of the `permit_cost` for all rows where the `permit_number` is greater than 700 from the `permit_data` table.',
    sql='SELECT SUM(permit_cost) as total_cost FROM permit_data WHERE permit_number > 700;'
), 1), (Example({'sql_prompt': 'Find the total square footage of wheelchair-accessible properties in Boston.', 'sql_context': "CREATE TABLE properties (id INT, city VARCHAR(20), square_footage INT, wheelchair_accessible BOOLEAN); INSERT INTO properties (id, city, square_footage, wheelchair_accessible) VALUES (1, 'Boston', 1000, true); INSERT INTO properties (id, city, square_footage, wheelchair_accessible) VALUES (2, 'Boston', 1200, false);", 'sql': "SELECT SUM(square_footage) FROM properties WHERE city = 'Boston' AND wheelchair_accessible = true;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Find the total square footage of wheelchair-accessible properties in Boston.\n\nSql Context: CREATE TABLE properties (id INT, city VARCHAR(20), square_footage INT, wheelchair_accessible BOOLEAN); INSERT INTO properties (id, city, square_footage, wheelchair_accessible) VALUES (1, 'Boston', 1000, true); INSERT INTO properties (id, city, square_footage, wheelchair_accessible) VALUES (2, 'Boston', 1200, false);\n\nReasoning: Let's think step by step in order to find the total square footage of",
    sql="SELECT SUM(square_footage) FROM properties WHERE city = 'Boston' AND wheelchair_accessible = true;"
), 1), (Example({'sql_prompt': 'Which operators have the highest average production quantity per well?', 'sql_context': "CREATE TABLE wells (well_id INT, well_name TEXT, production_qty FLOAT, operator_id INT); INSERT INTO wells (well_id, well_name, production_qty, operator_id) VALUES (1, 'Well A', 1000, 1), (2, 'Well B', 1500, 1), (3, 'Well C', 800, 2); CREATE TABLE operators (operator_id INT, operator_name TEXT); INSERT INTO operators (operator_id, operator_name) VALUES (1, 'ABC Inc.'), (2, 'DEF'), (3, 'GHI Inc.');", 'sql': 'SELECT o.operator_name, AVG(w.production_qty) as avg_production FROM wells w JOIN operators o ON w.operator_id = o.operator_id GROUP BY o.operator_name ORDER BY avg_production DESC;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the SQL. We first need to join the `wells` and `operators` tables on the `operator_id`. Then, we group the data by operator and calculate the average production quantity per well for each operator. Finally, we sort the results and select the operators with the highest averages.\n\nHere's the SQL query:\n\n```sql\nSELECT operator_name, AVG(production_qty) as avg_production_qty\nFROM wells\nJOIN operators ON wells.operator_id = operators.operator_id\nGROUP BY operator_name\nORDER BY avg_production_qty DESC\nLIMIT 1;\n```\n\nThis query",
    sql='SELECT operator_name, AVG(production_qty) as avg_production_qty\nFROM wells\nJOIN operators ON wells.operator_id = operators.operator_id\nGROUP BY operator_name\nORDER BY avg_production_qty DESC\nLIMIT 1;'
), 1), (Example({'sql_prompt': 'What was the average number of comments per post in Oceania in the last month?', 'sql_context': "CREATE TABLE comments_posts(region VARCHAR(20), post_date DATE, comments INT, posts INT); INSERT INTO comments_posts(region, post_date, comments, posts) VALUES('Oceania', '2021-09-01', 10, 10), ('Oceania', '2021-09-02', 12, 12), ('Oceania', '2021-09-03', 14, 14), ('Oceania', '2021-09-04', 16, 16), ('Oceania', '2021-09-05', 18, 18), ('Oceania', '2021-09-06', 20, 20), ('Oceania', '2021-09-07', 22, 22);", 'sql': "SELECT AVG(comments/posts) FROM comments_posts WHERE region = 'Oceania' AND post_date >= DATEADD(month, -1, CURRENT_DATE)"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="calculate the average number of comments per post in Oceania in the last month. We first need to filter the data for the region 'Oceania' and the date range representing the last month. Then, we calculate the average number of comments per post.\n\nHere is the SQL query:\n\n```sql\nSELECT AVG(comments) AS avg_comments_per_post\nFROM comments_posts\nWHERE region = 'Oceania' AND post_date >= DATE('now', '1 month ago');\n```",
    sql="```sql\nSELECT AVG(comments) AS avg_comments_per_post\nFROM comments_posts\nWHERE region = 'Oceania' AND post_date >= DATE('now', '1 month ago');\n```"
), 1), (Example({'sql_prompt': 'What is the geopolitical risk assessment score for each country in 2020?', 'sql_context': "CREATE TABLE GeopoliticalRiskAssessments (assessment_id INT, assessment_name VARCHAR(50), score INT, assessment_date DATE, country VARCHAR(50)); INSERT INTO GeopoliticalRiskAssessments (assessment_id, assessment_name, score, assessment_date, country) VALUES (1, 'Assessment A', 7, '2020-01-01', 'USA'), (2, 'Assessment B', 5, '2020-02-15', 'Russia'), (3, 'Assessment C', 8, '2020-03-31', 'China');", 'sql': "SELECT country, score FROM GeopoliticalRiskAssessments WHERE assessment_date BETWEEN '2020-01-01' AND '2020-12-31';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='produce the SQL. We need to extract the geopolitical risk assessment score for each country in 2020 from the provided table `GeopoliticalRiskAssessments`. To do this, we will use a SELECT statement with appropriate filters on the `assessment_date` and `country` columns.',
    sql="```sql\nSELECT country, score\nFROM GeopoliticalRiskAssessments\nWHERE assessment_date = '2020-01-01' OR assessment_date LIKE '2020-%';\n```\nThis query will return the `country` and corresponding `score` for all assessments that occurred in 2"
), 0), (Example({'sql_prompt': 'Find the total revenue for events with an attendance over 200 in 2021.', 'sql_context': "CREATE TABLE events (event_id INT, event_name VARCHAR(50), attendance INT, revenue DECIMAL(10,2), event_date DATE); INSERT INTO events (event_id, event_name, attendance, revenue, event_date) VALUES (1, 'Art Exhibition', 250, 15000, '2021-06-01'); INSERT INTO events (event_id, event_name, attendance, revenue, event_date) VALUES (2, 'Theater Performance', 180, 12000, '2021-07-15');", 'sql': 'SELECT SUM(revenue) FROM events WHERE attendance > 200 AND YEAR(event_date) = 2021;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Find the total revenue for events with an attendance over 200 in 2021.\n\nSql Context: CREATE TABLE events (event_id INT, event_name VARCHAR(50), attendance INT, revenue DECIMAL(10,2), event_date DATE); INSERT INTO events (event_id, event_name, attendance, revenue, event_date) VALUES (1, 'Art Exhibition', 250, 15000, '2021-06-01'); INSERT INTO events (event_id, event_name, attendance, revenue, event_date) VALUES (2",
    sql='SELECT SUM(revenue) FROM events WHERE attendance > 200 AND YEAR(event_date) = 2021;'
), 1), (Example({'sql_prompt': "find the number of records in the CommunityHealthStatistics table where the State is 'TX' and the County is 'Harris'", 'sql_context': "CREATE TABLE CommunityHealthStatistics (ID INT, State TEXT, County TEXT, Population INT, AverageIncome FLOAT); INSERT INTO CommunityHealthStatistics (ID, State, County, Population, AverageIncome) VALUES (1, 'TX', 'Harris', 4500000, 60000), (2, 'CA', 'LA', 2500000, 70000);", 'sql': "SELECT * FROM CommunityHealthStatistics WHERE State = 'TX' AND County = 'Harris';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="find the number of records in the CommunityHealthStatistics table where the State is 'TX' and the County is 'Harris'. We first need to write a SQL query that selects rows from the CommunityHealthStatistics table where both the State and County match our criteria. Then, we count the number of selected rows.",
    sql="```sql\nSELECT COUNT(*) FROM CommunityHealthStatistics WHERE State = 'TX' AND County = 'Harris';\n```"
), 1), (Example({'sql_prompt': "Insert a new record into the 'weapons' table with the following data: 'Javelin', 'USA', 'in-development'", 'sql_context': "CREATE TABLE weapons (id INT PRIMARY KEY, name VARCHAR(255), origin VARCHAR(255), status VARCHAR(255)); INSERT INTO weapons (id, name, origin) VALUES (1, 'AK-47', 'Russia'), (2, 'RPG-7', 'Russia');", 'sql': "INSERT INTO weapons (name, origin, status) VALUES ('Javelin', 'USA', 'in-development');"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Insert a new record into the 'weapons' table with the following data: 'Javelin', 'USA', 'in-development'. Since there is no `id` provided, we will assume it auto-increments.",
    sql="INSERT INTO weapons (name, origin, status) VALUES ('Javelin', 'USA', 'in-development');"
), 1), (Example({'sql_prompt': 'Count the number of mining incidents per month in 2021.', 'sql_context': "CREATE TABLE incidents (id INT, date DATE, incident_type TEXT); INSERT INTO incidents (id, date, incident_type) VALUES (1, '2021-01-05', 'equipment_failure'); INSERT INTO incidents (id, date, incident_type) VALUES (2, '2021-03-12', 'safety_violation');", 'sql': "SELECT DATE_PART('month', date) AS month, COUNT(*) FROM incidents WHERE date >= '2021-01-01' AND date < '2022-01-01' GROUP BY month;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Count the number of mining incidents per month in 2021. We need to group the incidents by their date and count them for each month. Here is the SQL query:\n\n```sql\nSELECT EXTRACT(MONTH FROM date) AS Month, COUNT(*) AS Incident_Count\nFROM incidents\nWHERE YEAR(date) = 2021\nGROUP BY Month;\n```\n\nThis query will return a table with two columns: `Month` and `Incident_Count`. The `Month` column contains the month number (from 1 to 12), and the `Incident_Count` column contains the number of incidents that occurred in each',
    sql='```sql\nSELECT EXTRACT(MONTH FROM date) AS Month, COUNT(*) AS Incident_Count\nFROM incidents\nWHERE YEAR(date) = 2021\nGROUP BY Month;\n```'
), 1), (Example({'sql_prompt': "How many workers are employed in 'renewable energy' sector?", 'sql_context': "CREATE TABLE workers (id INT, worker_name VARCHAR(255), department VARCHAR(255)); INSERT INTO workers (id, worker_name, department) VALUES (1, 'John Doe', 'renewable energy'), (2, 'Jane Smith', 'textiles'), (3, 'Michael Brown', 'renewable energy');", 'sql': "SELECT COUNT(*) FROM workers WHERE department = 'renewable energy';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="`SELECT COUNT(*) FROM workers WHERE department = 'renewable energy';`\n\nThis SQL query counts the number of rows where the department is 'renewable energy'.",
    sql="SELECT COUNT(*) FROM workers WHERE department = 'renewable energy';"
), 1), (Example({'sql_prompt': 'What is the average performance score for each game genre?', 'sql_context': "CREATE TABLE game_genre_performance (game_id INT, game_genre VARCHAR(255), performance_score INT); INSERT INTO game_genre_performance (game_id, game_genre, performance_score) VALUES (1, 'RPG', 85), (2, 'Strategy', 90), (3, 'RPG', 80);", 'sql': 'SELECT game_genre, AVG(performance_score) as avg_score FROM game_genre_performance GROUP BY game_genre;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='`Sql:`\n```sql\nSELECT game_genre, AVG(performance_score) as average_score\nFROM game_genre_performance\nGROUP BY game_genre;\n```\nThis query groups the data by game genre and calculates the average performance score for each group.',
    sql='```sql\nSELECT game_genre, AVG(performance_score) as average_score\nFROM game_genre_performance\nGROUP BY game_genre;\n```'
), 1), (Example({'sql_prompt': 'How many Indigenous communities in the Arctic are experiencing negative socio-economic impacts due to climate change?', 'sql_context': "CREATE TABLE IndigenousCommunities(community TEXT, socio_economic_impact TEXT, climate_change_impact TEXT); INSERT INTO IndigenousCommunities(community, socio_economic_impact, climate_change_impact) VALUES ('Inuit', 'High', 'Very High'), ('Sami', 'Medium', 'High');", 'sql': "SELECT COUNT(*) FROM IndigenousCommunities WHERE socio_economic_impact = 'High' AND climate_change_impact = 'High' OR socio_economic_impact = 'Very High' AND climate_change_impact = 'Very High';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the SQL query. We first need to find the communities that have a socio-economic impact and a high or very high climate change impact. Here is the SQL query:\n\n```sql\nSELECT COUNT(*) FROM IndigenousCommunities\nWHERE socio_economic_impact IN ('High', 'Very High') AND climate_change_impact IN ('High', 'Very High');\n```\n\nThis query will return the number of Indigenous communities in the Arctic that are experiencing negative socio-economic impacts due to climate change.",
    sql="SELECT COUNT(*) FROM IndigenousCommunities WHERE socio_economic_impact IN ('High', 'Very High') AND climate_change_impact IN ('High', 'Very High');"
), 1), (Example({'sql_prompt': 'What is the minimum depth recorded in the Mariana Trench?', 'sql_context': "CREATE TABLE ocean_floor_mapping (location VARCHAR(255), depth FLOAT);   INSERT INTO ocean_floor_mapping (location, depth) VALUES ('Mariana Trench', 10994.0), ('Challenger Deep', 10972.8);", 'sql': "SELECT MIN(depth) FROM ocean_floor_mapping WHERE location = 'Mariana Trench';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="find the minimum depth recorded in the Mariana Trench. We first need to identify the column containing the depth values and then use a SQL query to find the minimum value for that column where the location is 'Mariana Trench'.",
    sql="```sql\nSELECT MIN(depth) FROM ocean_floor_mapping WHERE location = 'Mariana Trench';\n```"
), 1), (Example({'sql_prompt': 'List all farmers who have not serviced their irrigation systems in the last 6 months.', 'sql_context': "CREATE TABLE farmer_irrigation (id INT, farmer_id INT, system_type VARCHAR(50), service_date DATE); INSERT INTO farmer_irrigation (id, farmer_id, system_type, service_date) VALUES (1, 1, 'Drip', '2021-08-01'), (2, 2, 'Sprinkler', '2021-10-15'), (3, 3, 'Drip', '2021-11-01'), (4, 4, 'Sprinkler', '2022-02-01'), (5, 5, 'Drip', '2022-03-01'), (6, 6, 'Sprinkler', '2022-01-15'), (7, 7, 'Drip', '2021-06-01'), (8, 8, 'Sprinkler', '2022-04-01'), (9, 9, 'Drip', '2021-12-01'), (10, 10, 'Sprinkler', '2022-05-15');", 'sql': 'SELECT farmers.name FROM farmers LEFT JOIN farmer_irrigation ON farmers.id = farmer_irrigation.farmer_id WHERE farmer_irrigation.service_date <= DATE_SUB(CURDATE(), INTERVAL 6 MONTH);'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="List all farmers who have not serviced their irrigation systems in the last 6 months. To achieve this, we first need to identify the farmers who haven't had any service record within the specified time frame. We can do this by using a subquery that selects only the service dates from the `farmer_irrigation` table and then filtering out those records that are older than 6 months (i.e., before '2021-12-01'). After that, we can join the resulting set with the original `farmer_irrigation` table to get the farmer IDs.\n\nFinally, we'll use a `LEFT JOIN` operation to ensure that",
    sql="SELECT f.farmer_id\nFROM farmer_irrigation f\nLEFT JOIN (\n    SELECT system_date\n    FROM farmer_irrigation\n    WHERE system_date > '2021-12-01'\n) s ON f.farmer_id = s.farmer_id\nWHERE s.system_date IS NULL;\n\nThis SQL query will return the IDs of farmers who have not serviced their irrigation systems in the last 6 months, based on the provided context and prompt."
), 1), (Example({'sql_prompt': 'What is the most common type of medical equipment across hospitals?', 'sql_context': "CREATE TABLE medical_equipment (id INT, hospital_name TEXT, location TEXT, equipment TEXT, quantity INT, last_updated_date DATE); INSERT INTO medical_equipment (id, hospital_name, location, equipment, quantity, last_updated_date) VALUES (1, 'NY Presbyterian', 'NYC', 'Ventilators', 80, '2021-03-31'); INSERT INTO medical_equipment (id, hospital_name, location, equipment, quantity, last_updated_date) VALUES (2, 'Stanford Hospital', 'Palo Alto', 'Ventilators', 90, '2021-03-31');", 'sql': 'SELECT equipment, MAX(quantity) as max_quantity FROM medical_equipment GROUP BY equipment ORDER BY max_quantity DESC LIMIT 1;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='find the most common type of medical equipment across hospitals. We will first group the data by the `equipment` field and then count the number of occurrences for each equipment type. Finally, we will find the equipment with the maximum count.',
    sql='```sql\nSELECT equipment, COUNT(*) as total_quantity\nFROM medical_equipment\nGROUP BY equipment\nORDER BY total_quantity DESC\nLIMIT 1;\n```\nThis query groups all the rows in the `medical_equipment` table by the `equipment` field, counts the number of occurrences for each group (i.e., each type of medical equipment), orders the'
), 1), (Example({'sql_prompt': "What is the average rating for 'Gluten-Free' items?", 'sql_context': "CREATE TABLE ratings (item_name TEXT, is_gluten_free BOOLEAN, rating INTEGER); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Quinoa Salad', true, 4); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Chicken Stir Fry', false, 5);", 'sql': 'SELECT AVG(rating) FROM ratings WHERE is_gluten_free = true;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="find the average rating for 'Gluten-Free' items. We first need to filter out the rows where `is_gluten_free` is true, and then calculate the average of the `rating` column.",
    sql='```sql\nSELECT AVG(rating) FROM ratings WHERE is_gluten_free = true;\n```'
), 1), (Example({'sql_prompt': 'How many water treatment facilities are there in each country, and what is their distribution by continent?', 'sql_context': "CREATE TABLE facilities (id INT, facility_name VARCHAR(50), country VARCHAR(50), total_employees INT); INSERT INTO facilities (id, facility_name, country, total_employees) VALUES (1, 'Water Treatment Plant 1', 'Brazil', 25); INSERT INTO facilities (id, facility_name, country, total_employees) VALUES (2, 'Water Treatment Plant 2', 'India', 30);", 'sql': 'SELECT country, COUNT(*) as facility_count, CONTINENT(location) as continent FROM facilities JOIN countries ON facilities.country = countries.country_name GROUP BY country, continent;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="find the number of water treatment facilities and their distribution by continent. We first need to identify the continent for each country. Since the context does not provide a table mapping countries to continents, we will assume that the continents are fixed (North America, South America, Europe, Asia, Africa, Oceania).\n\nNext, we group the facilities by their respective continents and count the number of facilities in each group. We also need to aggregate the total number of facilities per country within each continent.\n\nHere's the SQL query:\n\n```sql\nSELECT continent, COUNT(*) as num_facilities, COUNT(DISTINCT country) as num_countries\nFROM (",
    sql="SELECT continent, COUNT(*) as num_facilities, COUNT(DISTINCT country) as num_countries\nFROM (\n    SELECT\n        CASE\n            WHEN country LIKE '%America%' THEN 'North America'\n            WHEN country = 'Brazil' THEN 'South America'\n            WHEN country LIKE '%a%' THEN 'Europe'\n            WHEN country LIKE '%India%' THEN 'Asia'\n            WHEN country LIKE '%frica%' THEN 'Africa'\n            WHEN country LIKE '%ania%' THEN 'Oceania'\n        ELSE 'Unknown'"
), 1), (Example({'sql_prompt': "What is the maximum data usage in the 'urban' region?", 'sql_context': "CREATE TABLE subscribers (id INT, name VARCHAR(50), data_usage FLOAT, region VARCHAR(20)); INSERT INTO subscribers (id, name, data_usage, region) VALUES (1, 'John Doe', 20.0, 'urban'), (2, 'Jane Doe', 18.0, 'urban');", 'sql': "SELECT MAX(data_usage) FROM subscribers WHERE region = 'urban';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="find the maximum data usage in the 'urban' region. We first need to filter the subscribers based on their region and then find the maximum data usage.",
    sql="```sql\nSELECT MAX(data_usage) AS max_data_usage\nFROM subscribers\nWHERE region = 'urban';\n```"
), 1), (Example({'sql_prompt': 'Find the average depth of all underwater volcanoes in the Atlantic Ocean.', 'sql_context': "CREATE TABLE underwater_volcanoes (id INT, name VARCHAR(50), depth FLOAT, ocean VARCHAR(20)); INSERT INTO underwater_volcanoes (id, name, depth, ocean) VALUES (1, 'Lost City', 800, 'Atlantic'); INSERT INTO underwater_volcanoes (id, name, depth, ocean) VALUES (2, 'Eyjafjallajokull', 1650, 'Atlantic');", 'sql': "SELECT AVG(depth) FROM underwater_volcanoes WHERE ocean = 'Atlantic';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Find the average depth of all underwater volcanoes in the Atlantic Ocean. We first need to filter the data for underwater volcanoes located in the Atlantic Ocean, and then calculate the average depth.',
    sql="```sql\nSELECT AVG(depth) AS Average_Depth\nFROM underwater_volcanoes\nWHERE ocean = 'Atlantic';\n```"
), 1), (Example({'sql_prompt': 'What is the total cost of Mars rover missions that have successfully landed?', 'sql_context': 'CREATE TABLE mars_rovers (id INT PRIMARY KEY, name VARCHAR(255), mission_type VARCHAR(255), agency VARCHAR(255), cost FLOAT, launched_date DATE, landed_date DATE);', 'sql': "SELECT SUM(cost) FROM mars_rovers WHERE mission_type = 'Lander' AND landed_date IS NOT NULL;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='`SELECT SUM(cost) as total_cost FROM mars_rovers WHERE landed_date IS NOT NULL;`\n\nThis SQL query sums up the cost of all Mars rover missions that have successfully landed, by filtering rows where the `landed_date` is not null.',
    sql='SELECT SUM(cost) as total_cost FROM mars_rovers WHERE landed_date IS NOT NULL;'
), 1), (Example({'sql_prompt': "What is the earliest year a peacekeeping operation was conducted in 'Asia'?", 'sql_context': "CREATE TABLE Peacekeeping_Years (id INT, location VARCHAR(30), year INT); INSERT INTO Peacekeeping_Years (id, location, year) VALUES (1, 'Asia', 1990), (2, 'Asia', 2000);", 'sql': "SELECT MIN(year) FROM Peacekeeping_Years WHERE location = 'Asia';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="find the earliest year a peacekeeping operation was conducted in 'Asia'. We first need to filter the data for Asia and then sort it by year to find the minimum value.",
    sql="```sql\nSELECT MIN(year) FROM Peacekeeping_Years WHERE location = 'Asia';\n```\nThis query will return `1990`, which is the earliest year a peacekeeping operation was conducted in Asia according to the provided context."
), 1), (Example({'sql_prompt': 'Identify the drug with the lowest sales amount in Europe in 2022.', 'sql_context': "CREATE TABLE sales (drug_name TEXT, continent TEXT, sales_amount INT, sale_date DATE); INSERT INTO sales (drug_name, continent, sales_amount, sale_date) VALUES ('Aspirin', 'Europe', 1000, '2022-01-01');", 'sql': "SELECT drug_name, MIN(sales_amount) FROM sales WHERE continent = 'Europe' AND sale_date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY drug_name;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Identify the drug with the lowest sales amount in Europe in 2022.\n\nSql Context: CREATE TABLE sales (drug_name TEXT, continent TEXT, sales_amount INT, sale_date DATE); INSERT INTO sales (drug_name, continent, sales_amount, sale_date) VALUES ('Aspirin', 'Europe', 1000, '2022-01-01');\n\nReasoning: To find the drug with the lowest sales amount in Europe in 2022, we need to filter the sales table for rows where the continent is 'Europe' and the sale_date is in 2022",
    sql="SELECT `drug_name`, MIN(`sales_amount`) AS min_sales_amount\nFROM `sales`\nWHERE `continent` = 'Europe' AND `sale_date` >= '2022-01-01' AND `sale_date` <= '2022-12-31';"
), 1), (Example({'sql_prompt': "Insert a new record into 'customer_preferences' for customer 101 and menu item 1 with a preference score of 90", 'sql_context': 'CREATE TABLE customer_preferences (customer_id INT, item_id INT, preference_score INT);', 'sql': 'INSERT INTO customer_preferences (customer_id, item_id, preference_score) VALUES (101, 1, 90);'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="Insert a new record into 'customer_preferences'. We need an SQL query that inserts a new row with the specified values for `customer_id`, `item_id`, and `preference_score`. Here is the SQL query:\n\n```sql\nINSERT INTO customer_preferences (customer_id, item_id, preference_score)\nVALUES (101, 1, 90);\n```",
    sql='INSERT INTO customer_preferences (customer_id, item_id, preference_score) VALUES (101, 1, 90);'
), 1), (Example({'sql_prompt': 'Who is the oldest donor from each city?', 'sql_context': "CREATE TABLE donors_2 (id INT PRIMARY KEY, name VARCHAR(50), age INT, city VARCHAR(50), state VARCHAR(50)); INSERT INTO donors_2 (id, name, age, city, state) VALUES (1, 'John Doe', 35, 'New York', 'NY'), (2, 'Jane Smith', 40, 'Buffalo', 'NY'), (3, 'Mike Johnson', 50, 'Boston', 'MA');", 'sql': 'SELECT city, MAX(age) as oldest_donor_age FROM donors_2 GROUP BY city;'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='find the oldest donor from each city. We first need to group the data by city and age, then select the maximum age for each group (which corresponds to the oldest donor), and finally select the corresponding name. Here is the SQL query:\n\n```sql\nSELECT city, name, MAX(age) AS oldest_age\nFROM donors_2\nGROUP BY city, name\nORDER BY city;\n```\n\nThis query will return a table with each city, the name of the oldest donor in that city, and their age.',
    sql='```sql\nSELECT city, name, MAX(age) AS oldest_donor_age\nFROM donors_2\nGROUP BY city, name\nORDER BY city;\n```'
), 0), (Example({'sql_prompt': 'What are the union membership statistics for unions that have engaged in successful collective bargaining in the healthcare sector?', 'sql_context': "CREATE TABLE Membership (UnionName TEXT, Sector TEXT, MemberCount INT); INSERT INTO Membership (UnionName, Sector, MemberCount) VALUES ('UnionHealthA', 'Healthcare', 3000), ('UnionHealthB', 'Healthcare', 5000), ('UnionHealthC', 'Healthcare', 2000);", 'sql': "SELECT UnionName, MemberCount FROM Membership WHERE Sector = 'Healthcare' AND UnionName IN (SELECT UnionName FROM CBAs WHERE ExpirationDate > CURDATE());"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the SQL query. We first need to filter the unions that have engaged in successful collective bargaining, which is not explicitly provided in the context. However, assuming we have another table `Bargaining` with columns `UnionName`, `Sector`, and `Successful` (1 for success, 0 for failure), we can join this table with the `Membership` table to get the desired result.\n\nHere's the SQL query:\n\n```sql\nSELECT UnionName, Sector, MemberCount\nFROM Membership\nJOIN Bargaining ON Membership.UnionName = Bargaining.UnionName AND Bargaining.Successful = 1\nWHERE Sector = '",
    sql="SELECT UnionName, Sector, MemberCount FROM Membership JOIN Bargaining ON Membership.UnionName = Bargaining.UnionName AND Bargaining.Successful = 1 WHERE Sector = 'Healthcare'"
), 0), (Example({'sql_prompt': 'Calculate the total gas consumption for Nigeria in 2019', 'sql_context': "CREATE TABLE gas_consumption (country VARCHAR(50), consumption_year INT, gas_consumption FLOAT); INSERT INTO gas_consumption (country, consumption_year, gas_consumption) VALUES ('Nigeria', 2019, 12000), ('Nigeria', 2018, 10000), ('Ghana', 2019, 8000), ('Ghana', 2018, 6000), ('Ivory Coast', 2019, 10000), ('Ivory Coast', 2018, 8000);", 'sql': "SELECT gas_consumption FROM gas_consumption WHERE country = 'Nigeria' AND consumption_year = 2019;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='Calculate the total gas consumption for Nigeria in 2019. We need to filter the data based on the country and year, then sum up the gas_consumption.',
    sql="```sql\nSELECT SUM(gas_consumption) as TotalGasConsumption\nFROM gas_consumption\nWHERE country = 'Nigeria' AND consumption_year = 2019;\n```"
), 1), (Example({'sql_prompt': 'What is the average socially responsible lending loan amount for microfinance institutions in Southeast Asia?', 'sql_context': "CREATE TABLE socially_responsible_lending(id INT, loan_number INT, institution_region VARCHAR(50), amount INT); INSERT INTO socially_responsible_lending VALUES (1, 701, 'Southeast Asia', 5000); INSERT INTO socially_responsible_lending VALUES (2, 702, 'South Asia', 7000); INSERT INTO socially_responsible_lending VALUES (3, 703, 'East Asia', 9000); INSERT INTO socially_responsible_lending VALUES (4, 704, 'Southeast Asia', 6000);", 'sql': "SELECT AVG(amount) FROM socially_responsible_lending WHERE institution_region = 'Southeast Asia' AND type = 'microfinance';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the SQL query. We first need to filter the data for microfinance institutions in Southeast Asia and then calculate the average loan amount. Here is the SQL query:\n\n```sql\nSELECT AVG(amount) as average_loan_amount\nFROM socially_responsible_lending\nWHERE institution_region = 'Southeast Asia';\n```\n\nThis query will return the average socially responsible lending loan amount for microfinance institutions in Southeast Asia.",
    sql="```sql SELECT AVG(amount) as average_loan_amount FROM socially_responsible_lending WHERE institution_region = 'Southeast Asia';\n```"
), 1), (Example({'sql_prompt': 'What is the average salary of employees who identify as Latinx in the Engineering department?', 'sql_context': "CREATE TABLE Employees (EmployeeID int, Name varchar(50), Gender varchar(10), Department varchar(50), Salary decimal(10,2), Ethnicity varchar(50)); INSERT INTO Employees (EmployeeID, Name, Gender, Department, Salary, Ethnicity) VALUES (1, 'Juan Garcia', 'Male', 'Engineering', 85000.00, 'Latinx'); INSERT INTO Employees (EmployeeID, Name, Gender, Department, Salary, Ethnicity) VALUES (2, 'Maria Rodriguez', 'Female', 'Engineering', 90000.00, 'Latinx');", 'sql': "SELECT AVG(Salary) FROM Employees WHERE Department = 'Engineering' AND Ethnicity = 'Latinx';"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="produce the SQL query. We first need to filter the records for employees who identify as Latinx and work in the Engineering department. Then, we calculate the average salary of these filtered records. Here is the SQL query:\n\n```sql\nSELECT AVG(Salary) AS Average_Salary\nFROM Employees\nWHERE Department = 'Engineering' AND Ethnicity = 'Latinx';\n```\n\nThis query will return the average salary of employees who identify as Latinx and work in the Engineering department.",
    sql="```sql\nSELECT AVG(Salary) AS Average_Salary\nFROM Employees\nWHERE Department = 'Engineering' AND Ethnicity = 'Latinx';\n```"
), 1), (Example({'sql_prompt': 'What is the name and type of the vessel with the highest average speed?', 'sql_context': "CREATE TABLE Vessels (ID VARCHAR(20), Name VARCHAR(20), Type VARCHAR(20), AverageSpeed FLOAT); INSERT INTO Vessels VALUES ('V012', 'Vessel L', 'Passenger', 35.0), ('V013', 'Vessel M', 'Cargo', 19.5), ('V014', 'Vessel N', 'Passenger', 32.0);", 'sql': 'SELECT Name, Type FROM Vessels WHERE AverageSpeed = (SELECT MAX(AverageSpeed) FROM Vessels);'}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale='find the name and type of the vessel with the highest average speed. We first need to identify the vessel with the maximum average speed, then extract its name and type from the table.',
    sql='```sql\nSELECT Name, Type FROM Vessels WHERE AverageSpeed = (SELECT MAX(AverageSpeed) FROM Vessels);\n```'
), 1), (Example({'sql_prompt': "List all the distinct producers of Gadolinium from the 'production' table, ordered alphabetically.", 'sql_context': 'CREATE TABLE production (element VARCHAR(10), year INT, month INT, producer VARCHAR(20), quantity INT);', 'sql': "SELECT DISTINCT producer FROM production WHERE element = 'Gadolinium' ORDER BY producer ASC;"}) (input_keys={'sql_prompt', 'sql_context'}), Prediction(
    rationale="List all the distinct producers of Gadolinium from the 'production' table, ordered alphabetically. To achieve this, we need to write a SQL query that selects the `producer` column where the `element` is 'Gadolinium', and then groups the results by `producer`, ordering them in ascending order.\n\nHere's the SQL query:\n\n```sql\nSELECT DISTINCT producer FROM production WHERE element = 'Gadolinium' ORDER BY producer ASC;\n```",
    sql="```sql\nSELECT DISTINCT producer\nFROM production\nWHERE element = 'Gadolinium'\nORDER BY producer ASC;\n```"
), 1)]