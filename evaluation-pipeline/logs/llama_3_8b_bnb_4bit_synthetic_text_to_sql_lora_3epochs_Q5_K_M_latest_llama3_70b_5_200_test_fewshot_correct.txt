[(Example({'sql_prompt': "Update the name of the passenger with the id 3 to 'Emily Lee'.", 'sql_context': "CREATE TABLE PASSENGERS (id INT, name VARCHAR(50)); INSERT INTO PASSENGERS VALUES (3, 'James Brown');", 'sql': "UPDATE PASSENGERS SET name = 'Emily Lee' WHERE id = 3;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${update the name}. We ...',
    sql="UPDATE PASSENGERS SET NAME = 'Emily Lee' WHERE ID = 3;"
), 1), (Example({'sql_prompt': "What is the number of women-led agricultural businesses in the 'business_data' table?", 'sql_context': "CREATE TABLE business_data (business_id INT, business_name VARCHAR(50), gender VARCHAR(10)); INSERT INTO business_data (business_id, business_name, gender) VALUES (1, 'Green Acres', 'female'), (2, 'Brown Farms', 'male'), (3, 'Eco Harvest', 'non-binary');", 'sql': "SELECT COUNT(business_id) FROM business_data WHERE gender = 'female';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${count the number of women-led agricultural businesses}. We first need to find the total number of businesses in the 'business_data' table. Then we can filter out the non-women-led businesses using a CASE statement.\n### Sql: SELECT COUNT(*) FROM business_data WHERE gender = 'female';",
    sql="SELECT SUM(investment) FROM climate_investments WHERE category = 'Climate Communication' AND (region = 'Europe' OR region = 'Central Asia') AND year = 2019;\n\n\n### Sql Context: CREATE TABLE Exhibitions (id INT, name VARCHAR(255), type VARCHAR(255)); CREATE TABLE Tickets (id INT, visitor_id INT, exhibition_id INT); INSERT INTO Exhibitions (id, name, type) VALUES (1, 'Impressionist Art', 'Painting'), (2, 'Contemporary Art', 'Sculpture'); INSERT INTO Tickets (id, visitor_id, exhibition_id) VALUES (1, 1001, 1), (2, 1002, 1), (3,"
), 0), (Example({'sql_prompt': "What is the average rating for 'Gluten-Free' items?", 'sql_context': "CREATE TABLE ratings (item_name TEXT, is_gluten_free BOOLEAN, rating INTEGER); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Quinoa Salad', true, 4); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Chicken Stir Fry', false, 5);", 'sql': 'SELECT AVG(rating) FROM ratings WHERE is_gluten_free = true;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${produce the sql}. We first find all items that are 'Gluten-Free' and their corresponding ratings. Then we calculate the average rating for those items.",
    sql='SELECT AVG(rating) FROM (SELECT item_name, rating FROM ratings WHERE is_gluten_free = true) AS gluten_free_ratings;'
), 1), (Example({'sql_prompt': 'What is the maximum amount of dissolved oxygen (DO) in the ocean_health table for each month in 2021?', 'sql_context': "CREATE TABLE ocean_health (date DATE, do_value INT); INSERT INTO ocean_health (date, do_value) VALUES ('2021-01-01', 8), ('2021-01-02', 7), ('2021-02-01', 6), ('2021-02-02', 9);", 'sql': "SELECT EXTRACT(MONTH FROM date) as month, MAX(do_value) as max_do_value FROM ocean_health WHERE date BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY EXTRACT(MONTH FROM date);"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${find the maximum amount of dissolved oxygen (DO) in the ocean_health table for each month in 2021}. We ...',
    sql="SELECT EXTRACT(MONTH FROM date) AS month, MAX(do_value) AS max_do_value FROM ocean_health WHERE date BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY month;"
), 1), (Example({'sql_prompt': 'What are the total sales and quantity of goods sold by each salesperson, grouped by city?', 'sql_context': 'CREATE TABLE salesperson (id INT, name TEXT, city TEXT); CREATE TABLE sales (id INT, salesperson_id INT, product TEXT, quantity INT, total_sales FLOAT);', 'sql': 'SELECT s.name, s.city, SUM(s.total_sales) as total_sales, SUM(s.quantity) as total_quantity FROM sales s JOIN salesperson sp ON s.salesperson_id = sp.id GROUP BY s.city, s.name;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We first group the sales data by salesperson and city. Then we join this data with the salesperson table to get the salesperson names.',
    sql='SELECT s.city, sp.name, SUM(s.total_sales) as total_sales, SUM(s.quantity) as quantity_sold FROM sales s JOIN salesperson sp ON s.salesperson_id = sp.id GROUP BY s.city, sp.name;'
), 1), (Example({'sql_prompt': 'What is the total funding received by startups in the technology sector that were founded by women?', 'sql_context': "CREATE TABLE startups(id INT, name TEXT, sector TEXT, founder_gender TEXT, funding FLOAT); INSERT INTO startups VALUES (1, 'Acme Inc', 'Technology', 'Female', 2000000); INSERT INTO startups VALUES (2, 'Beta Corp', 'Retail', 'Male', 3000000); INSERT INTO startups VALUES (3, 'Gamma Start', 'Technology', 'Female', 5000000);", 'sql': "SELECT SUM(funding) FROM startups WHERE sector = 'Technology' AND founder_gender = 'Female';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We ...',
    sql="SELECT SUM(funding) FROM startups WHERE sector = 'Technology' AND founder_gender = 'Female';"
), 1), (Example({'sql_prompt': 'What is the recycling rate of plastic in the residential sector in the state of New York?', 'sql_context': "CREATE TABLE recycling_rates_city (sector VARCHAR(20), city VARCHAR(20), material VARCHAR(20), recycling_rate DECIMAL(5,2)); INSERT INTO recycling_rates_city (sector, city, material, recycling_rate) VALUES ('residential', 'New York City', 'plastic', 0.25), ('commercial', 'New York City', 'plastic', 0.30), ('residential', 'New York City', 'paper', 0.45), ('commercial', 'New York City', 'paper', 0.50), ('residential', 'Los Angeles', 'plastic', 0.20), ('commercial', 'Los Angeles', 'plastic', 0.35), ('residential', 'Los Angeles', 'paper', 0.40), ('commercial', 'Los Angeles', 'paper', 0.50);", 'sql': "SELECT recycling_rate FROM recycling_rates_city WHERE sector = 'residential' AND material = 'plastic' AND city = 'New York City';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We ...',
    sql='SQL query'
), 0), (Example({'sql_prompt': "Which startups in the 'StartupFunding' table received funding in 2020 or later and have a budget greater than $500,000?", 'sql_context': "CREATE SCHEMA BiotechStartups; CREATE TABLE StartupFunding (startup_name VARCHAR(50), funding_year INT, funding DECIMAL(10, 2)); INSERT INTO StartupFunding VALUES ('StartupA', 2019, 500000), ('StartupB', 2020, 750000);", 'sql': 'SELECT startup_name FROM BiotechStartups.StartupFunding WHERE funding_year >= 2020 AND funding > 500000;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${find the startups that received funding in 2020 or later and have a budget greater than $500,000}. We first create a new table 'BiotechStartups.StartupFunding' with the same columns as 'StartupFunding'. Then we insert data into it for startups funded after 2019. Finally, we filter out startups with a budget less than 500000.\n\n### Sql: SELECT startup_name FROM BiotechStartups.StartupFunding WHERE funding_year >= 2020 AND budget > 500000;",
    sql='SQL query'
), 1), (Example({'sql_prompt': "How many female engineers are there in 'australian_mines'?", 'sql_context': "CREATE SCHEMA if not exists australia_schema;CREATE TABLE australia_schema.australian_mines (id INT, name VARCHAR, gender VARCHAR, role VARCHAR);INSERT INTO australia_schema.australian_mines (id, name, gender, role) VALUES (1, 'S worker', 'Female', 'Engineer'), (2, 'T engineer', 'Male', 'Engineer');", 'sql': "SELECT COUNT(*) FROM australia_schema.australian_mines WHERE gender = 'Female' AND role = 'Engineer';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${find the number of female engineers}. We first need to find the total number of engineers. SELECT COUNT(*) FROM australia_schema.australian_mines WHERE role = 'Engineer'; Then we need to find the number of female engineers. SELECT COUNT(*) FROM australia_schema.australian_mines WHERE gender = 'Female' AND role = 'Engineer';",
    sql="SELECT COUNT(*) FROM australia_schema.australian_mines WHERE gender = 'Female' AND role = 'Engineer';"
), 1), (Example({'sql_prompt': 'What is the average salary of employees in each position?', 'sql_context': "CREATE TABLE Employees (EmployeeID INT, Name VARCHAR(50), Department VARCHAR(50), Position VARCHAR(50), Salary FLOAT); INSERT INTO Employees (EmployeeID, Name, Department, Position, Salary) VALUES (1, 'John Doe', 'IT', 'Developer', 75000.00), (2, 'Jane Smith', 'IT', 'Developer', 80000.00), (3, 'Alice Johnson', 'Marketing', 'Marketing Specialist', 60000.00), (4, 'Bob Brown', 'HR', 'HR Specialist', 65000.00);", 'sql': 'SELECT Position, AVG(Salary) FROM Employees GROUP BY Position;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${find the average salary of employees in each position}. We first need to find the number of employees in each position.\n\n### Sql Prompt: How many employees are there in total?\n\n### Sql Context: CREATE TABLE Employees (EmployeeID INT, Name VARCHAR(50), Department VARCHAR(50), Position VARCHAR(50), Salary FLOAT); INSERT INTO Employees (EmployeeID, Name, Department, Position, Salary) VALUES (1, 'John Doe', 'IT', 'Developer', 75000.00), (2, 'Jane Smith', 'IT', 'Developer', 80000.00), (3, 'Alice Johnson', 'Marketing', 'Marketing Specialist', 60000.00), (4, 'Bob Brown', 'HR',",
    sql='SELECT Position, AVG(Salary) FROM Employees GROUP BY Position;'
), 1), (Example({'sql_prompt': 'What are the names and ranks of all military personnel in country W who were demoted in the year 2019?', 'sql_context': "CREATE TABLE military_demotions (id INT, name TEXT, country TEXT, rank TEXT, demotion_year INT);INSERT INTO military_demotions (id, name, country, rank, demotion_year) VALUES (1, 'John Doe', 'Country W', 'Colonel', 2019);", 'sql': "SELECT name, rank FROM military_demotions WHERE country = 'Country W' AND demotion_year = 2019;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${produce the sql}. We ...\n\n\n### Sql Prompt: What is the total number of military personnel in each branch for Country Z?\n\n### Sql Context: CREATE TABLE MilitaryPersonnel (id INT, name TEXT, country TEXT, branch TEXT); INSERT INTO MilitaryPersonnel (id, name, country, branch) VALUES (1, 'John Doe', 'Country W', 'Army'), (2, 'Jane Smith', 'Country X', 'Navy');\n\n\n### Sql: SELECT branch, COUNT(*) FROM MilitaryPersonnel WHERE country = 'Country Z' GROUP BY branch;",
    sql='What is the total number of military personnel in each branch for Country Z?'
), 0), (Example({'sql_prompt': "List the top 2 sectors with the highest donation amounts in the 'Asia' region for the year 2018, ordered by the donation amount in descending order.", 'sql_context': "CREATE TABLE Donors (donor_id INT, donor_name VARCHAR(255), donation_amount INT, sector VARCHAR(255), region VARCHAR(255), donation_date DATE); INSERT INTO Donors (donor_id, donor_name, donation_amount, sector, region, donation_date) VALUES (1, 'DonorA', 100000, 'Health', 'Asia', '2018-01-01');", 'sql': "SELECT sector, SUM(donation_amount) AS total_donation FROM Donors WHERE region = 'Asia' AND donation_date >= '2018-01-01' AND donation_date < '2019-01-01' GROUP BY sector ORDER BY total_donation DESC LIMIT 2;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We ...',
    sql="SELECT * FROM (SELECT Donors.sector, SUM(Donors.donation_amount) AS total_donation FROM Donors WHERE Donors.region = 'Asia' AND YEAR(Donors.donation_date) = 2018 GROUP BY Donors.sector ORDER BY total_donation DESC LIMIT 2) AS top_2_sectors;"
), 1), (Example({'sql_prompt': "Display the vendor with the highest average price for 'Salmon' in the 'sales' table.", 'sql_context': "CREATE TABLE sales (id INT PRIMARY KEY, vendor VARCHAR(50), quantity INT, species VARCHAR(50), price DECIMAL(5,2)); INSERT INTO sales (id, vendor, quantity, species, price) VALUES (1, 'Seafood Haven', 20, 'Salmon', 15.99), (2, 'Sea Bounty', 30, 'Tilapia', 9.49), (3, 'Sea Bounty', 15, 'Cod', 14.50), (4, 'Fresh Catch', 25, 'Salmon', 17.99);", 'sql': "SELECT vendor, AVG(price) FROM sales WHERE species = 'Salmon' GROUP BY vendor ORDER BY AVG(price) DESC LIMIT 1;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${display the vendor with the highest average price for 'Salmon' in the 'sales' table}. We first need to find the maximum price of 'Salmon' sold by each vendor.\n\n### Sql: SQL\nSELECT vendor, MAX(price) FROM sales WHERE species = 'Salmon' GROUP BY vendor;\n\n\n### Sql: SQL\nSELECT vendor, AVG(price) AS avg_price FROM (SELECT vendor, MAX(price) AS price FROM sales WHERE species = 'Salmon' GROUP BY vendor) AS subquery;",
    sql="SQL SELECT vendor, AVG(price) AS avg_price FROM (SELECT vendor, MAX(price) AS price FROM sales WHERE species = 'Salmon' GROUP BY vendor) AS subquery;"
), 0), (Example({'sql_prompt': "Add new military equipment to 'military_equipment' table", 'sql_context': "CREATE TABLE military_equipment (id INT PRIMARY KEY, name VARCHAR(255), type VARCHAR(255), country VARCHAR(255)); INSERT INTO military_equipment (id, name, type, country) VALUES (1, 'M1 Abrams', 'Tank', 'USA');", 'sql': "INSERT INTO military_equipment (id, name, type, country) VALUES (2, 'Leopard 2', 'Tank', 'Germany');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${insert a new record into the 'military_equipment' table}. We ...",
    sql="INSERT INTO military_equipment (id, name, type, country) VALUES (2, 'F-35 Lightning II', 'Fighter Jet', 'USA');"
), 1), (Example({'sql_prompt': 'Show total number of union members by state', 'sql_context': "CREATE TABLE union_members (id INT, name VARCHAR(50), state VARCHAR(2), city VARCHAR(20), occupation VARCHAR(20)); INSERT INTO union_members (id, name, state, city, occupation) VALUES (1, 'John Doe', 'NY', 'New York', 'Engineer'); INSERT INTO union_members (id, name, state, city, occupation) VALUES (2, 'Jane Smith', 'CA', 'Los Angeles', 'Teacher'); INSERT INTO union_members (id, name, state, city, occupation) VALUES (3, 'Alice Johnson', 'NY', 'Buffalo', 'Nurse');", 'sql': 'SELECT state, COUNT(*) as total_members FROM union_members GROUP BY state;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${produce the sql}. We ...\n\n\n### Sql Prompt: What is the total number of members in unions that have a focus on labor rights advocacy and are based in Canada?\n\n### Sql Context: CREATE TABLE union_details (id INT, union_name VARCHAR(50), focus VARCHAR(50), country VARCHAR(50)); INSERT INTO union_details (id, union_name, focus, country) VALUES (1, 'United Steelworkers', 'Labor Rights', 'USA'); INSERT INTO union_details (id, union_name, focus, country) VALUES (2, 'UNITE HERE', 'Labor Rights', 'Canada');\n\n\n### Sql: SELECT COUNT(*) FROM union_details WHERE focus = 'Labor Rights' AND country = 'Canada';",
    sql="SQL query\n\n### Sql Prompt: What is the total number of members in unions that have a focus on labor rights advocacy and are based in Canada?\n\n### Sql Context: CREATE TABLE union_details (id INT, union_name VARCHAR(50), focus VARCHAR(50), country VARCHAR(50)); INSERT INTO union_details (id, union_name, focus, country) VALUES (1, 'United Steelworkers', 'Labor Rights', 'USA'); INSERT INTO union_details (id, union_name, focus, country) VALUES (2, 'UNITE HERE', 'Labor Rights', 'Canada');\n\n\n### Sql: SQL query\nSELECT COUNT(*) FROM union_details WHERE focus = 'Labor Rights' AND country = 'Canada';"
), 0), (Example({'sql_prompt': 'What is the total value of military equipment sales to all countries?', 'sql_context': "CREATE TABLE military_sales (id INT, country VARCHAR, value FLOAT); INSERT INTO military_sales (id, country, value) VALUES (1, 'Canada', 5000000), (2, 'Mexico', 3000000), (3, 'Canada', 7000000);", 'sql': 'SELECT SUM(value) FROM military_sales;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We ...',
    sql='SELECT SUM(value) FROM military_sales;'
), 1), (Example({'sql_prompt': 'Identify the top 3 countries with the highest number of social impact projects in 2019.', 'sql_context': "CREATE TABLE countries (id INT, name VARCHAR(255), total_projects INT); INSERT INTO countries (id, name, total_projects) VALUES (1, 'Brazil', 500), (2, 'India', 700), (3, 'South Africa', 350); CREATE TABLE projects_by_country (country VARCHAR(255), project_count INT); INSERT INTO projects_by_country (country, project_count) SELECT country, COUNT(*) FROM projects GROUP BY country;", 'sql': 'SELECT c.name, p.project_count FROM countries c JOIN (SELECT country, COUNT(*) AS project_count FROM projects GROUP BY country ORDER BY project_count DESC LIMIT 3) p ON c.name = p.country;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We first find the total number of social impact projects for each country in 2019. Then we join this result with the countries table and group by name to show the top 3 countries.',
    sql='SELECT c.name, SUM(p.project_count) as total_projects FROM countries c JOIN projects_by_country p ON c.name = p.country WHERE YEAR(projects.date) = 2019 GROUP BY c.name ORDER BY total_projects DESC LIMIT 3;'
), 1), (Example({'sql_prompt': 'What is the maximum market price of Terbium in China for 2017?', 'sql_context': 'CREATE TABLE Terbium_Market_Prices (id INT, year INT, country VARCHAR(255), market_price FLOAT);', 'sql': "SELECT MAX(market_price) FROM Terbium_Market_Prices WHERE year = 2017 AND country = 'China';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${find the max market price}. We first find the maximum year of Terbium production in China, which is 2017. Then we find the maximum market price for each year.\n\n### Sql: SQL query\nSELECT MAX(market_price) FROM Terbium_Market_Prices WHERE country = 'China' AND year = 2017;",
    sql='SQL query'
), 1), (Example({'sql_prompt': 'What is the maximum amount of research grant received by a faculty member in the Arts and Humanities department?', 'sql_context': "CREATE TABLE grants_faculty (id INT, department VARCHAR(50), faculty_name VARCHAR(50), amount DECIMAL(10,2), grant_date DATE); INSERT INTO grants_faculty (id, department, faculty_name, amount, grant_date) VALUES (1, 'Arts and Humanities', 'Grace', 12000.00, '2018-06-10'), (2, 'Arts and Humanities', 'Harry', 18000.00, '2019-12-20'), (3, 'Arts and Humanities', 'Ida', 20000.00, '2020-08-05');", 'sql': "SELECT MAX(amount) FROM grants_faculty WHERE department = 'Arts and Humanities';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${produce the sql}. We first find the maximum amount of grant received by a faculty member in the Arts and Humanities department.\n\n### Sql: SQL query\nSELECT MAX(amount) FROM grants_faculty WHERE department = 'Arts and Humanities';",
    sql='SQL query'
), 0), (Example({'sql_prompt': 'What is the total mass of all space debris in orbit?', 'sql_context': "CREATE TABLE Space_Debris (ID INT, Object_Type VARCHAR(50), Mass FLOAT); INSERT INTO Space_Debris (ID, Object_Type, Mass) VALUES (1, 'Defunct Satellite', 1500.0), (2, 'Rocket Body', 2000.0), (3, 'Fuel Tank', 500.0), (4, 'Nuts and Bolts', 100.0), (5, 'Spent Rocket Stage', 3000.0);", 'sql': 'SELECT SUM(Mass) FROM Space_Debris;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We ...',
    sql='SELECT SUM(Mass) FROM Space_Debris;'
), 1), (Example({'sql_prompt': 'What is the average age of players who play "Racing Simulator 2022"?', 'sql_context': "CREATE TABLE Players (PlayerID INT, PlayerName VARCHAR(50), Game VARCHAR(50), Age INT); INSERT INTO Players (PlayerID, PlayerName, Game, Age) VALUES (1, 'John Doe', 'Racing Simulator 2022', 25), (2, 'Jane Smith', 'Racing Simulator 2022', 30), (3, 'Alice Johnson', 'Shooter Game 2022', 22);", 'sql': "SELECT AVG(Age) FROM Players WHERE Game = 'Racing Simulator 2022';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${find the average age of players who play "Racing Simulator 2022"}. We first need to find the number of players who play that game. Then we can calculate the average age for those players.',
    sql="SELECT AVG(Age) FROM Players WHERE Game = 'Racing Simulator 2022';"
), 1), (Example({'sql_prompt': 'What is the total revenue generated by concert ticket sales in the US?', 'sql_context': "CREATE TABLE concert_tickets (ticket_id int, venue_id int, ticket_price decimal, timestamp datetime, country varchar(255)); INSERT INTO concert_tickets (ticket_id, venue_id, ticket_price, timestamp, country) VALUES (1, 789, 50.00, '2022-06-01 12:00:00', 'United States');", 'sql': "SELECT SUM(ticket_price) as total_revenue FROM concert_tickets WHERE timestamp BETWEEN '2022-01-01' AND '2022-12-31' AND country = 'United States';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${produce the sql}. We ...\n\n\n### Sql Prompt: What is the total revenue generated by concert ticket sales in the US?\n\n### Sql Context: CREATE TABLE concert_tickets (ticket_id int, venue_id int, ticket_price decimal, timestamp datetime, country varchar(255)); INSERT INTO concert_tickets (ticket_id, venue_id, ticket_price, timestamp, country) VALUES (1, 789, 50.00, '2022-06-01 12:00:00', 'United States');\n\n\n### Sql: SELECT SUM(ticket_price) FROM concert_tickets WHERE country = 'United States';",
    sql="SQL query\n\n### Sql Prompt: What is the total number of visitors to museums in Spain?\n\n### Sql Context: CREATE TABLE museum_visitors (visitor_id int, museum_id int, timestamp datetime); INSERT INTO museum_visitors (visitor_id, museum_id, timestamp) VALUES (1, 123, '2022-06-01 10:00:00'); INSERT INTO museum_visitors (visitor_id, museum_id, timestamp) VALUES (2, 456, '2022-06-02 14:30:00');\n\n\n### Sql: SQL query\nSELECT COUNT(DISTINCT visitor_id) FROM museum_visitors WHERE museum_id IN (SELECT museum_id FROM museums WHERE country = 'Spain');"
), 0), (Example({'sql_prompt': "How many cases did attorney 'Jane Doe' handle in total?", 'sql_context': "CREATE TABLE Attorneys (AttorneyID int, Name varchar(50), Specialty varchar(50)); INSERT INTO Attorneys (AttorneyID, Name, Specialty) VALUES (2, 'Jane Doe', 'Civil'); CREATE TABLE Cases (CaseID int, ClientID int, Category varchar(50), AttorneyID int); INSERT INTO Cases (CaseID, ClientID, Category, AttorneyID) VALUES (301, 3, 'Civil', 2);", 'sql': "SELECT COUNT(*) as TotalCases FROM Cases WHERE AttorneyID = (SELECT AttorneyID FROM Attorneys WHERE Name = 'Jane Doe');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We ...',
    sql="SELECT COUNT(*) FROM Cases WHERE AttorneyID = (SELECT AttorneyID FROM Attorneys WHERE Name = 'Jane Doe');"
), 1), (Example({'sql_prompt': 'Show the top 3 content categories in Japan with the most posts.', 'sql_context': "CREATE TABLE content_categories (id INT, content_category VARCHAR(255)); CREATE TABLE posts_extended (id INT, content_category_id INT, content TEXT, country VARCHAR(255)); INSERT INTO content_categories (id, content_category) VALUES (1, 'AI'), (2, 'Data Science'), (3, 'Machine Learning'); INSERT INTO posts_extended (id, content_category_id, content, country) VALUES (1, 1, 'Hello', 'Japan'), (2, 1, 'World', 'Japan'), (3, 2, 'AI', 'Japan');", 'sql': "SELECT content_categories.content_category, COUNT(posts_extended.id) AS post_count FROM content_categories JOIN posts_extended ON posts_extended.content_category_id = content_categories.id WHERE posts_extended.country = 'Japan' GROUP BY content_categories.content_category ORDER BY post_count DESC LIMIT 3;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${find the top 3 content categories in Japan with the most posts}. We first find the number of posts for each content category in Japan.\n\n### Sql: SELECT content_categories.content_category, COUNT(posts_extended.id) AS post_count FROM content_categories JOIN posts_extended ON content_categories.id = posts_extended.content_category_id WHERE posts_extended.country = 'Japan' GROUP BY content_categories.content_category ORDER BY post_count DESC LIMIT 3;\n\n\n### Sql: SELECT content_categories.content_category, COUNT(posts_extended.id) AS post_count FROM content_categories JOIN posts_extended ON content_categories.id = posts_extended.content_category_id WHERE posts_extended.country = 'Japan' GROUP BY content_categories.content_category ORDER BY post_count DESC;",
    sql="SELECT content_categories.content_category, COUNT(posts_extended.id) AS post_count FROM content_categories JOIN posts_extended ON content_categories.id = posts_extended.content_category_id WHERE posts_extended.country = 'Japan' GROUP BY content_categories.content_category ORDER BY post_count DESC LIMIT 3;"
), 1), (Example({'sql_prompt': 'How many defense contracts were signed in each quarter of 2020?', 'sql_context': "CREATE TABLE defense_contracts (contract_id INT, contract_date DATE); INSERT INTO defense_contracts VALUES (1, '2020-03-15'), (2, '2020-06-01'), (3, '2020-09-15');", 'sql': "SELECT TO_CHAR(contract_date, 'YYYY-Q') AS quarter, COUNT(*) FROM defense_contracts WHERE contract_date >= DATE '2020-01-01' AND contract_date < DATE '2021-01-01' GROUP BY quarter;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${find the number of contracts signed in each quarter of 2020}. We first need to find the year and quarter for each contract_date. Then we can group by year-quarter and count the number of contracts.\n\n\n### Sql: Natural language query\nSELECT EXTRACT(YEAR_QUARTER FROM defense_contracts.contract_date) AS year_quarter, COUNT(*) AS num_contracts FROM defense_contracts GROUP BY year_quarter;',
    sql='SQL query SELECT EXTRACT(YEAR_QUARTER FROM defense_contracts.contract_date) AS year_quarter, COUNT(*) AS num_contracts FROM defense_contracts GROUP BY year_quarter;'
), 1), (Example({'sql_prompt': 'What is the total duration played for each player?', 'sql_context': "CREATE TABLE PlayerGame (PlayerID INT, GameID INT, Played DATE, StartTime TIMESTAMP, EndTime TIMESTAMP); INSERT INTO PlayerGame (PlayerID, GameID, Played, StartTime, EndTime) VALUES (1, 1, '2022-01-01', '2022-01-01 10:00:00', '2022-01-01 12:00:00'), (2, 2, '2022-01-02', '2022-01-02 14:00:00', '2022-01-02 16:00:00'), (3, 1, '2022-01-03', '2022-01-03 10:00:00', '2022-01-03 11:00:00'), (4, 3, '2022-01-04', '2022-01-04 18:00:00', '2022-01-04 19:00:00');", 'sql': 'SELECT PlayerID, SUM(TIMESTAMPDIFF(MINUTE, StartTime, EndTime)) FROM PlayerGame GROUP BY PlayerID;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${find the total duration played for each player}. We first need to find the difference between EndTime and StartTime for each PlayerGame, then sum those differences.',
    sql='SELECT PlayerID, SUM(TIMESTAMPDIFF(MINUTE, StartTime, EndTime)) as TotalDuration FROM PlayerGame GROUP BY PlayerID;'
), 1), (Example({'sql_prompt': 'Find the percentage change in tourism to Thailand between 2019 and 2021.', 'sql_context': 'CREATE TABLE thailand_tourism (year INT, total_visitors INT); INSERT INTO thailand_tourism (year, total_visitors) VALUES (2019, 40000), (2021, 30000);', 'sql': 'SELECT (30000 - 40000) * 100.0 / 40000 AS change_percentage FROM thailand_tourism WHERE year = 2021;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${calculate the percentage change}. We know that the number of visitors decreased from 40,000 to 30,000 between 2019 and 2021. So, we can calculate the percentage change as follows: ((40,000 - 30,000) / 40,000) * 100 = (10,000 / 40,000) * 100 = 25%.\n\n\n### Sql: SELECT ((total_visitors_2019 - total_visitors_2021) / total_visitors_2019) * 100 AS percentage_change FROM thailand_tourism WHERE year IN (2019, 2021);',
    sql='SELECT ((total_visitors_2019 - total_visitors_2021) / total_visitors_2019) * 100 AS percentage_change FROM thailand_tourism WHERE year IN (2019, 2021);'
), 0), (Example({'sql_prompt': 'How many students with physical disabilities have not received any accommodations in the last year?', 'sql_context': 'CREATE TABLE Accommodations (id INT, student VARCHAR(255), date DATE); CREATE TABLE Students (id INT, name VARCHAR(255), age INT, disability VARCHAR(255));', 'sql': "SELECT COUNT(*) FROM Students LEFT JOIN Accommodations ON Students.id = Accommodations.student WHERE disability = 'physical disability' AND date IS NULL;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${find the number of students with physical disabilities who have not received any accommodations in the last year}. We first need to find all students with physical disabilities who have received any accommodations. Then we can subtract those from the total number of students with physical disabilities.\n\n\n### Sql: SQL query\nSELECT COUNT(*) FROM Students WHERE disability = 'physical disability' AND id NOT IN (SELECT student FROM Accommodations WHERE date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR));",
    sql='SQL query'
), 1), (Example({'sql_prompt': 'What is the maximum property price in neighborhoods with inclusive housing policies, and the minimum size of properties in those neighborhoods?', 'sql_context': "CREATE TABLE property (id INT, price INT, size_sqft INT, area VARCHAR(255), has_inclusive_policy BOOLEAN); INSERT INTO property (id, price, size_sqft, area, has_inclusive_policy) VALUES (1, 500000, 1500, 'urban', true), (2, 400000, 1200, 'urban', false);", 'sql': "SELECT MAX(price), MIN(size_sqft) FROM property WHERE area = 'urban' AND has_inclusive_policy = true;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${find the maximum property price and minimum size of properties in neighborhoods with inclusive housing policies}. We first find the neighborhoods with inclusive housing policies using a UNION.\n\n### Sql: SQL query\n\nSELECT area, MAX(price) as max_price FROM property WHERE has_inclusive_policy = true GROUP BY area UNION SELECT area, MIN(size_sqft) as min_size FROM property WHERE has_inclusive_policy = true GROUP BY area;',
    sql='SQL query'
), 1), (Example({'sql_prompt': "Add a new safety incident to the safety_incidents table (id: 4, aircraft: 'Space Shuttle Challenger', date: '1986-01-28', description: 'O-ring failure')", 'sql_context': 'CREATE TABLE safety_incidents (id INT, aircraft VARCHAR(255), date DATE, description VARCHAR(255));', 'sql': "INSERT INTO safety_incidents (id, aircraft, date, description) VALUES (4, 'Space Shuttle Challenger', '1986-01-28', 'O-ring failure');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${add the new record}. We ...',
    sql="INSERT INTO safety_incidents (id, aircraft, date, description) VALUES (4, 'Space Shuttle Challenger', '1986-01-28', 'O-ring failure');"
), 1), (Example({'sql_prompt': "What is the average age of players who prefer the 'FPS' genre in the 'player_preferences' and 'player_demographics' tables?", 'sql_context': "CREATE TABLE player_preferences (player_id INT, genre VARCHAR(50)); CREATE TABLE player_demographics (player_id INT, age INT); INSERT INTO player_preferences (player_id, genre) VALUES (1, 'FPS'), (2, 'RPG'), (3, 'FPS'), (4, 'Simulation'); INSERT INTO player_demographics (player_id, age) VALUES (1, 25), (2, 30), (3, 35), (4, 40);", 'sql': "SELECT AVG(age) as avg_fps_age FROM player_demographics JOIN player_preferences ON player_preferences.player_id = player_demographics.player_id WHERE genre = 'FPS';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${find the average age of FPS players}. We first need to find the number of FPS players using the 'player_preferences' table. Then we can use this count and the 'player_demographics' table to calculate the average age.\n\n### Sql: SQL query\nSELECT AVG(player_demographics.age) FROM player_preferences JOIN player_demographics ON player_preferences.player_id = player_demographics.player_id WHERE genre = 'FPS';",
    sql='SQL query'
), 0), (Example({'sql_prompt': 'What is the diversity ratio (percentage of non-male employees) in each department?', 'sql_context': "CREATE TABLE Employees (EmployeeID int, Department varchar(20), Gender varchar(10)); INSERT INTO Employees (EmployeeID, Department, Gender) VALUES (1, 'Marketing', 'Male'); INSERT INTO Employees (EmployeeID, Department, Gender) VALUES (2, 'Marketing', 'Female'); INSERT INTO Employees (EmployeeID, Department, Gender) VALUES (3, 'IT', 'Male'); INSERT INTO Employees (EmployeeID, Department, Gender) VALUES (4, 'IT', 'Non-binary');", 'sql': "SELECT Department, (COUNT(CASE WHEN Gender <> 'Male' THEN 1 END) / COUNT(*)) * 100 AS DiversityRatio FROM Employees GROUP BY Department;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${calculate the diversity ratio}. We first need to find the total number of employees in each department and the number of non-male employees. Then we can calculate the diversity ratio as the percentage of non-male employees in each department.\n\n\n### Sql: Diversity Ratio\nSELECT Department, COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Employees WHERE Gender = 'Male') AS DiversityRatio FROM Employees WHERE Gender != 'Male' GROUP BY Department;",
    sql="Diversity Ratio per Department and Gender SELECT Department, Gender, COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Employees WHERE Gender = 'Male') AS DiversityRatio FROM Employees WHERE Gender != 'Male' GROUP BY Department, Gender;"
), 0), (Example({'sql_prompt': 'What is the average donation per donor in India?', 'sql_context': "CREATE TABLE donations (donor_id INT, donation_amount DECIMAL(10, 2), donation_date DATE, country TEXT); INSERT INTO donations VALUES (1, 50.00, '2021-05-15', 'India'), (2, 100.00, '2021-06-10', 'India'), (3, 25.00, '2021-04-01', 'India');", 'sql': "SELECT AVG(donation_amount) FROM donations WHERE country = 'India';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${find the average donation per donor}. We first need to find the total donations for each donor and then divide it by the number of donations.\n\n### Sql: SQL query\nSELECT AVG(donation_amount / COUNT(*)) FROM (SELECT donor_id, SUM(donation_amount) AS donation_amount FROM donations WHERE country = 'India' GROUP BY donor_id) AS subquery;",
    sql='What is the average donation per donor in India?'
), 1), (Example({'sql_prompt': 'How many wildlife habitats in South Africa have a total area greater than 50000 hectares?', 'sql_context': 'CREATE TABLE wildlife_habitats (id INT, name TEXT, area REAL, country TEXT);', 'sql': "SELECT COUNT(*) FROM wildlife_habitats WHERE country = 'South Africa' GROUP BY country HAVING SUM(area) > 50000;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${find the answer}. We ...',
    sql="SELECT COUNT(*) FROM wildlife_habitats WHERE country = 'South Africa' GROUP BY country HAVING SUM(area) > 50000;"
), 0), (Example({'sql_prompt': 'What is the percentage of faculty members who identify as AAPI in the School of Business?', 'sql_context': "CREATE TABLE faculty_members (id INT, faculty_name VARCHAR(50), faculty_department VARCHAR(50), faculty_race VARCHAR(20)); INSERT INTO faculty_members (id, faculty_name, faculty_department, faculty_race) VALUES (1, 'Taylor Smith', 'Business Administration', 'AAPI'), (2, 'James Johnson', 'Marketing', 'White'), (3, 'Avery Brown', 'Finance', 'Black'), (4, 'Katie Davis', 'Management', 'White'), (5, 'Jamie Wilson', 'Accounting', 'Latinx'), (6, 'Leah Kim', 'Business Analytics', 'AAPI');", 'sql': "SELECT (COUNT(*) FILTER (WHERE faculty_race = 'AAPI')) * 100.0 / COUNT(*) FROM faculty_members WHERE faculty_department LIKE '%Business%';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${find the percentage of faculty members who identify as AAPI in the School of Business}. We first need to find the total number of faculty members in the School of Business. SELECT COUNT(*) FROM faculty_members WHERE faculty_department LIKE '%Business%'; Next, we need to find the number of faculty members who identify as AAPI in the School of Business. SELECT COUNT(*) FROM faculty_members WHERE faculty_race = 'AAPI' AND faculty_department LIKE '%Business%';",
    sql="SELECT (SELECT COUNT(*) FROM faculty_members WHERE faculty_race = 'AAPI' AND faculty_department LIKE '%Business%') * 100.0 / (SELECT COUNT(*) FROM faculty_members WHERE faculty_department LIKE '%Business%') AS percentage;"
), 1), (Example({'sql_prompt': 'How many water treatment plants are there in the province of Ontario, Canada?', 'sql_context': "CREATE TABLE water_treatment_plants_ontario (id INT, province VARCHAR); INSERT INTO water_treatment_plants_ontario (id, province) VALUES (1, 'Ontario'), (2, 'Quebec'), (3, 'Ontario'), (4, 'British Columbia');", 'sql': "SELECT COUNT(*) FROM water_treatment_plants_ontario WHERE province = 'Ontario';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${count the plants}. We ...',
    sql="SELECT COUNT(*) FROM water_treatment_plants_ontario WHERE province = 'Ontario';"
), 1), (Example({'sql_prompt': 'Delete vessels that have not been inspected in the last 12 months', 'sql_context': "CREATE TABLE vessel_inspection (vessel_id INT, inspection_date DATE); INSERT INTO vessel_inspection (vessel_id, inspection_date) VALUES (1, '2020-01-01'), (2, '2021-06-15'), (3, '2019-12-20');", 'sql': 'DELETE FROM vessel_inspection WHERE vessel_id IN (SELECT vessel_id FROM vessel_inspection WHERE inspection_date < DATE_SUB(CURDATE(), INTERVAL 12 MONTH));'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${delete the vessels}. We ...',
    sql='DELETE FROM vessel_details WHERE vessel_id NOT IN (SELECT vessel_id FROM vessel_inspection WHERE inspection_date >= DATE_SUB(CURRENT_DATE, INTERVAL 12 MONTH));'
), 0), (Example({'sql_prompt': "Which materials in the 'inventory' table have a quantity of at least 100 and are not used in the production of any product in the 'products' table?", 'sql_context': "CREATE TABLE inventory(id INT, material VARCHAR(255), quantity INT); CREATE TABLE products(id INT, material VARCHAR(255), quantity INT); INSERT INTO inventory(id, material, quantity) VALUES (1, 'organic cotton', 75), (2, 'conventional cotton', 100), (3, 'organic cotton', 30), (4, 'hemp', 60); INSERT INTO products(id, material, quantity) VALUES (1, 'organic cotton', 150), (2, 'conventional cotton', 200), (3, 'hemp', 100);", 'sql': 'SELECT material FROM inventory i WHERE quantity >= 100 AND NOT EXISTS (SELECT * FROM products p WHERE i.material = p.material);'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${find the materials with a quantity of at least 100 and not used in any product}. We first find all materials that are present in both the inventory and products tables. Then we remove those materials from the inventory table. Finally, we return only the materials with a quantity greater than or equal to 100.\n\n### Sql: SQL query\nSELECT material FROM (SELECT material FROM inventory EXCEPT SELECT material FROM products) AS temp WHERE quantity >= 100;',
    sql='SQL query'
), 0), (Example({'sql_prompt': "What is the minimum billing amount for cases in the region 'South'?", 'sql_context': 'CREATE TABLE cases (case_id INT, region TEXT, billing_amount INT);', 'sql': "SELECT MIN(billing_amount) FROM cases WHERE region = 'South';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${find the minimum billing amount}. We first need to find the total billing amount for each case. Then we can select the minimum billing amount from that result.\n\n\n### Sql: SQL query\nSELECT MIN(billing_amount) FROM (SELECT SUM(billing_amount) AS billing_amount FROM cases WHERE region = 'South' GROUP BY case_id) AS subquery;",
    sql="What is the average billing amount for cases in the region 'North'?\n\n### Sql Context: CREATE TABLE cases (case_id INT, region TEXT, billing_amount INT);\n\n\n### Sql: SQL query SELECT AVG(billing_amount) FROM cases WHERE region = 'North';"
), 0), (Example({'sql_prompt': 'What is the total number of postpaid and prepaid mobile subscribers in each region?', 'sql_context': "CREATE TABLE mobile_subscribers (subscriber_id INT, subscriber_type VARCHAR(10), region VARCHAR(20)); INSERT INTO mobile_subscribers (subscriber_id, subscriber_type, region) VALUES (1, 'postpaid', 'West'), (2, 'prepaid', 'East'), (3, 'postpaid', 'North'), (4, 'prepaid', 'South'), (5, 'postpaid', 'East');", 'sql': 'SELECT region, COUNT(*) as total_subscribers FROM mobile_subscribers GROUP BY region;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${find the total number of postpaid and prepaid mobile subscribers in each region}. We first need to find the number of postpaid and prepaid mobile subscribers in each region separately. For this, we can use a UNION operator.\n\n### Sql: Total number of postpaid and prepaid mobile subscribers in each region\nSELECT region, COUNT(*) FROM (SELECT region FROM mobile_subscribers WHERE subscriber_type = 'postpaid' GROUP BY region UNION SELECT region FROM mobile_subscribers WHERE subscriber_type = 'prepaid' GROUP BY region) AS total_regions;\n\n\n### Sql: Number of postpaid mobile subscribers in each region\nSELECT region, COUNT(*) FROM mobile_subscribers WHERE subscriber_type = 'postpaid' GROUP BY region;\n\n\n### Sql: Number of prepaid mobile subscribers",
    sql='Total number of postpaid and prepaid mobile subscribers in each region'
), 0), (Example({'sql_prompt': 'Identify the top 3 mining companies with the highest total production of Praseodymium in 2021 and their respective production amounts.', 'sql_context': "CREATE TABLE Company (Name TEXT, Location TEXT, Established INT); INSERT INTO Company (Name, Location, Established) VALUES ('Delta Minerals', 'Brazil', 2000), ('Epsilon Ore', 'South Africa', 2010), ('Zeta Extraction', 'Canada', 2005), ('Eta Mines', 'Russia', 2008); CREATE TABLE ProductionCompany (Year INT, Company TEXT, Element TEXT, Quantity INT); INSERT INTO ProductionCompany (Year, Company, Element, Quantity) VALUES (2021, 'Delta Minerals', 'Praseodymium', 1000), (2021, 'Epsilon Ore', 'Praseodymium', 1400), (2021, 'Zeta Extraction', 'Praseodymium', 1800), (2021, 'Eta Mines', 'Praseodymium', 1100);", 'sql': "SELECT Company, SUM(Quantity) FROM ProductionCompany WHERE Element = 'Praseodymium' AND Year = 2021 GROUP BY Company ORDER BY SUM(Quantity) DESC FETCH FIRST 3 ROWS ONLY;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We first find the total production of Praseodymium for each company in 2021. Then we select the top 3 companies with the highest total production and their respective production amounts.',
    sql="SELECT Company, SUM(Quantity) AS Total_Production FROM ProductionCompany WHERE Element = 'Praseodymium' AND Year = 2021 GROUP BY Company ORDER BY Total_Production DESC LIMIT 3;"
), 1), (Example({'sql_prompt': 'How many volunteer hours were recorded for each program in Q2 2021?', 'sql_context': "CREATE TABLE VolunteerHours (VolunteerID INT, ProgramID INT, Hours DECIMAL(5,2), HourDate DATE); INSERT INTO VolunteerHours (VolunteerID, ProgramID, Hours, HourDate) VALUES (1, 1, 5, '2021-04-15'), (2, 2, 3, '2021-06-02'), (1, 1, 4, '2021-05-31'), (3, 3, 2, '2021-04-01'); CREATE TABLE Programs (ProgramID INT, ProgramName TEXT); INSERT INTO Programs (ProgramID, ProgramName) VALUES (1, 'Arts & Culture'), (2, 'Health & Wellness'), (3, 'Environment');", 'sql': "SELECT ProgramID, SUM(Hours) as TotalHours FROM VolunteerHours WHERE HourDate BETWEEN '2021-04-01' AND '2021-06-30' GROUP BY ProgramID;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We first find the total hours contributed by each volunteer in Q2 2021 and then join this result with the Programs table.',
    sql='SELECT Volunteers.Name, SUM(VolunteerHours.Hours) as TotalHours FROM VolunteerHours JOIN Volunteers ON VolunteerHours.VolunteerID = Volunteers.VolunteerID WHERE YEAR(HourDate) = 2021 AND QUARTER(HourDate) = 2 GROUP BY Volunteers.VolunteerID; SELECT Programs.ProgramName, SUM(TotalHours) as TotalProgramHours FROM (SELECT Volunteers.Name, SUM(VolunteerHours.Hours) as TotalHours FROM VolunteerHours JOIN Volunteers ON VolunteerHours.VolunteerID = Volunteers.VolunteerID WHERE YEAR(HourDate) = 2021 AND QUARTER(HourDate) = 2 GROUP BY Volunteers.VolunteerID) as Subquery JOIN Programs ON Subquery.ProgramID'
), 0), (Example({'sql_prompt': 'What is the maximum production capacity of the chemical manufacturing plants located in Canada?', 'sql_context': "CREATE TABLE chemical_plants (id INT, plant_name VARCHAR(100), country VARCHAR(50), production_capacity INT); INSERT INTO chemical_plants (id, plant_name, country, production_capacity) VALUES (1, 'Canada Plant 1', 'Canada', 5000), (2, 'Canada Plant 2', 'Canada', 7000);", 'sql': "SELECT MAX(production_capacity) FROM chemical_plants WHERE country = 'Canada';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${find the maximum production capacity}. We first find the total production capacity for all chemical plants located in Canada. Then we select the maximum value from this result set.',
    sql="SELECT MAX(production_capacity) FROM (SELECT SUM(production_capacity) FROM chemical_plants WHERE country = 'Canada') AS subquery;"
), 0), (Example({'sql_prompt': 'Who is the oldest artist from the United States?', 'sql_context': "CREATE TABLE artists (id INT, name VARCHAR(255), age INT, country VARCHAR(255)); INSERT INTO artists (id, name, age, country) VALUES (1, 'Bruce Springsteen', 72, 'United States'), (2, 'Beyoncé', 40, 'United States');", 'sql': "SELECT name, MAX(age) FROM artists WHERE country = 'United States';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${find the oldest artist}. We first need to find the maximum age among all artists from the United States. Then we can select the artist with that age.',
    sql="SELECT name FROM artists WHERE country = 'United States' AND age = (SELECT MAX(age) FROM artists WHERE country = 'United States');"
), 1), (Example({'sql_prompt': 'Find the average height of basketball players in the NBA, categorized by their position.', 'sql_context': 'CREATE TABLE nba_players_height (id INT, player_id INT, height_feet INT, height_inches INT); CREATE TABLE nba_players (id INT, name VARCHAR(100), team VARCHAR(50), position VARCHAR(50));', 'sql': 'SELECT position, AVG(height_feet + height_inches / 12) as avg_height FROM nba_players_height JOIN nba_players ON nba_players_height.player_id = nba_players.id GROUP BY position;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${find the average height of basketball players in the NBA, categorized by their position}. We first need to join the two tables on player_id. Then we can calculate the average height for each position.',
    sql='SELECT nba_players.position, AVG(nba_players_height.height_feet * 12 + nba_players_height.height_inches / 60) AS avg_height FROM nba_players JOIN nba_players_height ON nba_players.id = nba_players_height.player_id GROUP BY nba_players.position;'
), 1), (Example({'sql_prompt': 'Identify all suppliers who provide non-GMO ingredients to restaurants with Michelin stars.', 'sql_context': 'CREATE TABLE Suppliers (id INT, name VARCHAR(50), isNonGMO BOOLEAN); CREATE TABLE Restaurants (id INT, name VARCHAR(50), numStars INT); CREATE TABLE Ingredients (supplierId INT, restaurantId INT, isNonGMO BOOLEAN);', 'sql': 'SELECT Suppliers.name FROM Suppliers INNER JOIN Ingredients ON Suppliers.id = Ingredients.supplierId INNER JOIN Restaurants ON Ingredients.restaurantId = Restaurants.id WHERE Restaurants.numStars > 2 AND Ingredients.isNonGMO = TRUE;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${identify all suppliers who provide non-GMO ingredients to restaurants with Michelin stars}. We first need to find the intersection of Suppliers and Restaurants based on the Ingredients table. Then we can filter out the GMO suppliers using the Suppliers table.',
    sql='SELECT s.name FROM Suppliers s JOIN (SELECT supplierId FROM Ingredients WHERE isNonGMO = TRUE INTERSECT SELECT restaurantId FROM Restaurants WHERE numStars > 0) r ON s.id = r.supplierId;'
), 1), (Example({'sql_prompt': 'How many licenses were issued in each state as of 2022-01-01?', 'sql_context': "CREATE TABLE Licenses (id INT, state TEXT, issued_date DATE); INSERT INTO Licenses (id, state, issued_date) VALUES (1, 'California', '2021-01-01'), (2, 'Oregon', '2021-01-01'), (3, 'Washington', '2021-01-01');", 'sql': "SELECT state, COUNT(*) AS num_licenses FROM Licenses WHERE issued_date <= '2022-01-01' GROUP BY state;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We ...',
    sql='SQL query'
), 1), (Example({'sql_prompt': 'What is the number of smart city initiatives implemented in each country?', 'sql_context': "CREATE TABLE smart_city_initiatives (initiative_id INT, country VARCHAR(50), city VARCHAR(100), status VARCHAR(50)); INSERT INTO smart_city_initiatives (initiative_id, country, city, status) VALUES (1, 'France', 'Paris', 'Implemented');", 'sql': "SELECT country, COUNT(*) as implemented_initiatives FROM smart_city_initiatives WHERE status = 'Implemented' GROUP BY country;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We ...',
    sql="SELECT country, COUNT(*) FROM smart_city_initiatives WHERE status = 'Implemented' GROUP BY country;"
), 1), (Example({'sql_prompt': "How many tickets were sold for each team's away games in Q2 of 2022?", 'sql_context': "CREATE TABLE teams (id INT, name VARCHAR(255)); INSERT INTO teams (id, name) VALUES (1, 'TeamA'), (2, 'TeamB'), (3, 'TeamC'); CREATE TABLE games (id INT, home_team_id INT, away_team_id INT, home_team_score INT, away_team_score INT, price DECIMAL(5,2), game_date DATE); CREATE VIEW away_games AS SELECT id, away_team_id, price, game_date FROM games;", 'sql': "SELECT t.name, COUNT(*) as tickets_sold FROM away_games h JOIN teams t ON h.away_team_id = t.id WHERE h.game_date BETWEEN '2022-04-01' AND '2022-06-30' GROUP BY t.name;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We ...',
    sql='SELECT teams.name, COUNT(*) as tickets_sold FROM away_games JOIN teams ON away_games.away_team_id = teams.id WHERE QUARTER(games.game_date) = 2 GROUP BY teams.name;'
), 1), (Example({'sql_prompt': 'Show the names of companies that produced any Rare Earth elements in both 2015 and 2020.', 'sql_context': 'CREATE TABLE Producers (ProducerID INT PRIMARY KEY, Name TEXT, ProductionYear INT, RareEarth TEXT, Quantity INT);', 'sql': 'SELECT DISTINCT Name FROM Producers p1 JOIN Producers p2 ON p1.Name = p2.Name WHERE p1.ProductionYear = 2015 AND p2.ProductionYear = 2020;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${produce the sql}. We ...\n\n\n### Sql: SQL query\nSELECT DISTINCT p1.Name FROM Producers p1 INNER JOIN Producers p2 ON p1.Name = p2.Name WHERE p1.ProductionYear = 2015 AND p2.ProductionYear = 2020 AND p1.RareEarth IN ('Neodymium', 'Praseodymium', 'Dysprosium') AND p2.RareEarth IN ('Neodymium', 'Praseodymium', 'Dysprosium');",
    sql='SQL query'
), 1), (Example({'sql_prompt': 'What is the total CO2 emissions of silk production in China?', 'sql_context': 'CREATE TABLE SilkProduction (id INT, country VARCHAR, co2_emissions INT);', 'sql': "SELECT SUM(co2_emissions) FROM SilkProduction WHERE country = 'China';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We ...',
    sql="SELECT SUM(co2_emissions) FROM SilkProduction WHERE country = 'China';"
), 1), (Example({'sql_prompt': 'What is the total number of AI models developed in North America with an explainability score below 70?', 'sql_context': "CREATE TABLE na_models (model_name TEXT, region TEXT, explainability_score INTEGER); INSERT INTO na_models (model_name, region, explainability_score) VALUES ('Model1', 'North America', 75), ('Model2', 'North America', 65), ('Model3', 'North America', 80);", 'sql': "SELECT SUM(incident_count) FROM na_models WHERE region = 'North America' AND explainability_score < 70;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We ...',
    sql="SELECT COUNT(*) FROM na_models WHERE region = 'North America' AND explainability_score < 70;"
), 1), (Example({'sql_prompt': 'Which mobile and broadband subscribers have not used their services in the last 30 days?', 'sql_context': "CREATE TABLE mobile_usage (customer_id INT, last_usage DATE); CREATE TABLE broadband_usage (customer_id INT, last_usage DATE); INSERT INTO mobile_usage (customer_id, last_usage) VALUES (1, '2022-01-01'), (2, '2022-02-01'); INSERT INTO broadband_usage (customer_id, last_usage) VALUES (1, '2022-01-15'), (3, '2022-02-10');", 'sql': 'SELECT customer_id FROM mobile_usage WHERE last_usage < NOW() - INTERVAL 30 DAY UNION SELECT customer_id FROM broadband_usage WHERE last_usage < NOW() - INTERVAL 30 DAY;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${find the customers who have not used their services in the last 30 days}. We first find the minimum usage date for mobile subscribers. Then we find the minimum usage date for broadband subscribers. Finally, we compare the two dates and return the customers who haven't used their services in the last 30 days.\n\n### Sql: Which mobile and broadband subscribers have not used their services in the last 30 days?\nSELECT customer_id FROM (SELECT customer_id, MIN(last_usage) AS min_date FROM mobile_usage GROUP BY customer_id) AS mobile_min_dates JOIN (SELECT customer_id, MIN(last_usage) AS min_date FROM broadband_usage GROUP BY customer_id) AS broadband_min_dates ON mobile_min_dates.customer_id = broadband_min_dates.customer_id WHERE D",
    sql='SQL query'
), 0), (Example({'sql_prompt': 'What is the total number of grants given per city?', 'sql_context': 'CREATE TABLE Nonprofits (NonprofitID INT, Name VARCHAR(50), City VARCHAR(50), State VARCHAR(2), Zip VARCHAR(10), MissionStatement TEXT); CREATE TABLE Grants (GrantID INT, DonorID INT, NonprofitID INT, GrantAmount DECIMAL(10,2), Date DATE); CREATE TABLE Donors (DonorID INT, Name VARCHAR(50), City VARCHAR(50), State VARCHAR(2), Zip VARCHAR(10), DonationAmount DECIMAL(10,2));', 'sql': 'SELECT City, COUNT(*) FROM Grants G INNER JOIN Nonprofits N ON G.NonprofitID = N.NonprofitID GROUP BY City;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We ...',
    sql='SELECT Nonprofits.City, COUNT(DISTINCT Grants.GrantID) FROM Nonprofits JOIN Grants ON Nonprofits.NonprofitID = Grants.NonprofitID GROUP BY Nonprofits.City;'
), 1), (Example({'sql_prompt': 'Show the average soil moisture level for each field in the past week', 'sql_context': 'CREATE TABLE field (id INT, name VARCHAR(255), farm_id INT);CREATE TABLE soil_moisture (id INT, field_id INT, measurement DATE, level INT);', 'sql': 'SELECT field_id, AVG(level) FROM soil_moisture WHERE measurement >= DATEADD(day, -7, GETDATE()) GROUP BY field_id;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${show the average soil moisture level for each field in the past week}. We ...',
    sql='SELECT f.name, AVG(sm.level) FROM field f JOIN soil_moisture sm ON f.id = sm.field_id WHERE sm.measurement >= DATEADD(day, -7, GETDATE()) GROUP BY f.name;'
), 1), (Example({'sql_prompt': 'What is the total number of satellites deployed by SpaceComm in the Middle East?', 'sql_context': 'CREATE TABLE SatelliteDeployment (satellite_id INT, company VARCHAR(255), region VARCHAR(255));', 'sql': "SELECT COUNT(*) FROM SatelliteDeployment WHERE company = 'SpaceComm' AND region = 'Middle East';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We ...',
    sql="SELECT COUNT(satellite_id) FROM SatelliteDeployment WHERE company = 'SpaceComm' AND region = 'Middle East';\n\n\n### Sql Prompt: What is the total number of satellites deployed by SpaceComm in the Middle East?\n\n### Sql Context: CREATE TABLE SatelliteDeployment (satellite_id INT, company VARCHAR(255), region VARCHAR(255));\n\n\n### Sql: SELECT COUNT(satellite_id) FROM SatelliteDeployment WHERE company = 'SpaceComm' AND region = 'Middle East';"
), 1), (Example({'sql_prompt': 'What is the total number of tickets sold for performances with a rating of 5?', 'sql_context': "CREATE TABLE performance (id INT PRIMARY KEY, name VARCHAR(255), date DATE, artist_id INT, rating INT); INSERT INTO performance (id, name, date, artist_id, rating) VALUES (1, 'Dance Recital', '2022-03-01', 1, 5);", 'sql': 'SELECT SUM(t.quantity) as total_tickets_sold FROM performance p INNER JOIN ticket t ON p.id = t.performance_id WHERE p.rating = 5;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We ...',
    sql='SELECT SUM(tickets_sold) FROM ticket_sales JOIN performance ON ticket_sales.performance_id = performance.id WHERE performance.rating = 5;'
), 0), (Example({'sql_prompt': 'What is the average emergency response time by region for fire incidents?', 'sql_context': 'CREATE TABLE Regions (RegionID INT, RegionName VARCHAR(255)); CREATE TABLE Incidents (IncidentID INT, IncidentType VARCHAR(255), RegionID INT, ResponseTime INT);', 'sql': "SELECT AVG(ResponseTime) as AvgResponseTime, RegionName FROM Incidents i JOIN Regions r ON i.RegionID = r.RegionID WHERE IncidentType = 'Fire' GROUP BY RegionName;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${find the average response time}. We first need to find the total number of fire incidents and their corresponding regions. Then we can calculate the average response time for each region.\n\n\n### Sql: SQL query\nSELECT R.RegionName, AVG(I.ResponseTime) as AvgResponseTime FROM Regions R INNER JOIN Incidents I ON R.RegionID = I.RegionID WHERE I.IncidentType = 'Fire' GROUP BY R.RegionName;",
    sql="What is the total number of visitors who attended exhibitions in Tokyo or Paris?\n\n### Sql: Natural language query\n\nCREATE TABLE Exhibitions (id INT, name VARCHAR(255), city VARCHAR(255)); INSERT INTO Exhibitions (id, name, city) VALUES (1, 'Art Show', 'Tokyo'), (2, 'Science Fair', 'Paris'); CREATE TABLE Visitors (visitor_id INT, exhibition_id INT); INSERT INTO Visitors (visitor_id, exhibition_id) VALUES (1, 1), (2, 1), (3, 2);\n\n\n### Sql: SQL query\nSELECT COUNT(DISTINCT Visitors.visitor_id) FROM Visitors INNER JOIN Exhibitions ON Visitors.exhibition_id = Exhibitions.id WHERE Exhibitions.city IN"
), 0), (Example({'sql_prompt': "What is the average revenue of virtual tours in 'Spain'?", 'sql_context': "CREATE TABLE virtual_tours (id INT, name TEXT, country TEXT, revenue FLOAT); INSERT INTO virtual_tours (id, name, country, revenue) VALUES (1, 'Virtual Barcelona Tour', 'Spain', 2000);", 'sql': "SELECT AVG(revenue) FROM virtual_tours WHERE country = 'Spain';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We ...',
    sql="SELECT AVG(revenue) FROM virtual_tours WHERE country = 'Spain';"
), 1), (Example({'sql_prompt': 'What is the total number of students and staff with accommodations in the "disability_services" schema, excluding the "accessibility_parking" type?', 'sql_context': 'CREATE SCHEMA disability_services; CREATE TABLE staff (id INT, name VARCHAR(50), accommodation VARCHAR(50)); CREATE TABLE students (id INT, name VARCHAR(50), accommodation VARCHAR(50));', 'sql': "SELECT COUNT(*) FROM disability_services.staff WHERE accommodation != 'accessibility_parking' UNION SELECT COUNT(*) FROM disability_services.students WHERE accommodation != 'accessibility_parking';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We ...\n\n\n### Sql Prompt: What is the total number of students and staff with accommodations in the "disability_services" schema, excluding the "accessibility_parking" type?\n\n### Sql Context: CREATE SCHEMA disability_services; CREATE TABLE staff (id INT, name VARCHAR(50), accommodation VARCHAR(50)); CREATE TABLE students (id INT, name VARCHAR(50), accommodation VARCHAR(50));\n\n\n### Sql: SELECT COUNT(*) FROM disability_services.staff WHERE accommodation != \'accessibility_parking\' UNION ALL SELECT COUNT(*) FROM disability_services.students WHERE accommodation != \'accessibility_parking\';',
    sql='SQL query'
), 1), (Example({'sql_prompt': 'What is the number of electric trams in service in Istanbul in 2021?', 'sql_context': "CREATE TABLE electric_trams (tram_id INT, service_date DATE, in_service INT); INSERT INTO electric_trams (tram_id, service_date, in_service) VALUES (1, '2021-01-01', 1), (2, '2021-01-02', 1), (3, '2021-01-03', 0);", 'sql': "SELECT COUNT(*) FROM electric_trams WHERE in_service = 1 AND service_date BETWEEN '2021-01-01' AND '2021-12-31';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${find the number of electric trams in service in Istanbul in 2021}. We first need to find the total number of electric trams in Istanbul. Then we can calculate the average number of trams in service per day and find the total days they were in service.\n\n\n### Sql: Number of electric trams in Istanbul\nSELECT COUNT(*) FROM electric_trams WHERE region = 'Istanbul';\n\n### Sql: Average number of trams in service per day\nSELECT AVG(in_service) FROM (SELECT tram_id, COUNT(*) AS in_service FROM electric_trams WHERE region = 'Istanbul' GROUP BY tram_id) AS daily_tram_service;\n\n### Sql: Total days they were in service\nSELECT COUNT(DISTINCT service_date)",
    sql='Natural language query\n\n### Sql: Context for the query\n\nCREATE TABLE Exhibitions (id INT, name VARCHAR(255), type VARCHAR(255)); CREATE TABLE Tickets (id INT, visitor_id INT, exhibition_id INT);\n\n\n### Sql: SQL query\nSELECT Exhibitions.type, COUNT(Tickets.visitor_id) FROM Exhibitions INNER JOIN Tickets ON Exhibitions.id = Tickets.exhibition_id GROUP BY Exhibitions.type;'
), 0), (Example({'sql_prompt': "What is the total number of trips taken on accessible vehicles in the 'East' region for the current year?", 'sql_context': "CREATE TABLE Vehicles (VehicleID int, VehicleType varchar(255), Region varchar(255)); INSERT INTO Vehicles (VehicleID, VehicleType, Region) VALUES (1, 'Bus', 'East'), (2, 'Tram', 'West'), (3, 'Wheelchair Bus', 'South'), (4, 'Accessible Tram', 'East'); CREATE TABLE Trips (TripID int, VehicleID int, TripDateTime datetime);", 'sql': "SELECT COUNT(*) FROM Vehicles JOIN Trips ON Vehicles.VehicleID = Trips.VehicleID WHERE Vehicles.Region = 'East' AND Vehicles.VehicleType IN ('Wheelchair Bus', 'Accessible Tram') AND YEAR(Trips.TripDateTime) = YEAR(GETDATE());"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We ...',
    sql="SELECT COUNT(Trips.TripID) FROM Trips JOIN Vehicles ON Trips.VehicleID = Vehicles.VehicleID WHERE Vehicles.Region = 'East' AND YEAR(Trips.TripDateTime) = YEAR(GETDATE());"
), 1), (Example({'sql_prompt': 'Identify the suppliers with the highest and lowest sustainability ratings in the supplier_ratings table.', 'sql_context': 'CREATE TABLE supplier_ratings (supplier_id INT, sustainability_rating INT); INSERT INTO supplier_ratings (supplier_id, sustainability_rating) VALUES (100, 95), (101, 60), (102, 90);', 'sql': 'SELECT supplier_id, sustainability_rating FROM (SELECT supplier_id, sustainability_rating, RANK() OVER (ORDER BY sustainability_rating DESC) AS rank, RANK() OVER (ORDER BY sustainability_rating ASC) AS reverse_rank FROM supplier_ratings) WHERE rank = 1 OR reverse_rank = 1;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${find the suppliers with the highest and lowest sustainability ratings}. We first find the maximum and minimum sustainability ratings using a subquery. Then we use these values as thresholds to identify the suppliers with the highest and lowest sustainability ratings.\n\n### Sql: Find the suppliers with the highest and lowest sustainability ratings\nSELECT supplier_id, sustainability_rating FROM (SELECT supplier_id, sustainability_rating, MAX(sustainability_rating) OVER () AS max_sustainability_rating, MIN(sustainability_rating) OVER () AS min_sustainability_rating FROM supplier_ratings) subquery WHERE sustainability_rating >= max_sustainability_rating OR sustainability_rating <= min_sustainability_rating;\n\n\n### Sql: Find the suppliers with the highest and lowest sustainability ratings\nSELECT supplier_id, sustainability_rating FROM (SELECT supplier_id, sustainability_rating',
    sql='Natural language query\n\n### Sql: Context for the query\n\nCREATE TABLE supplier_ratings (supplier_id INT, sustainability_rating INT); INSERT INTO supplier_ratings (supplier_id, sustainability_rating) VALUES (100, 95), (101, 60), (102, 90);\n\n\n### Sql: Find the suppliers with the highest and lowest sustainability ratings\nSELECT supplier_id, sustainability_rating FROM (SELECT supplier_id, sustainability_rating, MAX(sustainability_rating) OVER () AS max_sustainability_rating, MIN(sustainability_rating) OVER () AS min_sustainability_rating FROM supplier_ratings) subquery WHERE sustainability_rating >= max_sustainability_rating OR sustainability_rating <= min_sustainability_rating;'
), 1), (Example({'sql_prompt': 'What is the total amount of socially responsible loans issued to women in 2021?', 'sql_context': 'CREATE TABLE socially_responsible_lending (id INT PRIMARY KEY, loan_amount DECIMAL(10, 2), borrower_gender TEXT, lending_date DATE);', 'sql': "SELECT SUM(loan_amount) FROM socially_responsible_lending WHERE borrower_gender = 'Female' AND lending_date BETWEEN '2021-01-01' AND '2021-12-31';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We ...',
    sql="SELECT SUM(loan_amount) FROM socially_responsible_lending WHERE borrower_gender = 'woman' AND lending_date BETWEEN '2021-01-01' AND '2021-12-31';"
), 1), (Example({'sql_prompt': 'What is the maximum energy efficiency rating of hydroelectric dams in Canada?', 'sql_context': "CREATE TABLE hydro_dams (id INT, name TEXT, country TEXT, energy_efficiency_rating FLOAT); INSERT INTO hydro_dams (id, name, country, energy_efficiency_rating) VALUES (1, 'Robert-Bourassa', 'Canada', 0.94), (2, 'Churchill Falls', 'Canada', 0.92);", 'sql': "SELECT MAX(energy_efficiency_rating) FROM hydro_dams WHERE country = 'Canada';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${find the maximum energy efficiency rating of hydroelectric dams in Canada}. We ...',
    sql="SELECT MAX(energy_efficiency_rating) FROM hydro_dams WHERE country = 'Canada';"
), 1), (Example({'sql_prompt': 'How many streams did each song by an artist get in a given month?', 'sql_context': "CREATE TABLE Songs (id INT, artist_id INT, title VARCHAR(50)); CREATE TABLE Streams (id INT, song_id INT, date DATE, streams INT); INSERT INTO Songs (id, artist_id, title) VALUES (1, 1, 'Shake it Off'), (2, 1, 'Blank Space'), (3, 2, 'Humble'), (4, 2, 'DNA'); INSERT INTO Streams (id, song_id, date, streams) VALUES (1, 1, '2022-01-01', 1000), (2, 1, '2022-01-02', 1500), (3, 2, '2022-01-01', 2000), (4, 2, '2022-01-02', 2500), (5, 3, '2022-01-01', 3000), (6, 3, '2022-01-02', 3500), (7, 4, '2022-01-01', 4000), (8, 4, '2022-01-02', 4500);", 'sql': "SELECT s.title, SUM(s.streams) as total_streams FROM Songs s JOIN Streams st ON s.id = st.song_id WHERE st.date BETWEEN '2022-01-01' AND '2022-01-31' GROUP BY s.title;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${find the total streams for each song}. We first need to find the songs that were streamed in a given month. Then we can group those songs by their artist and calculate the total streams.\n\n\n### Sql Prompt: How many streams did each song by an artist get in a given month?\n\n### Sql Context: CREATE TABLE Songs (id INT, artist_id INT, title VARCHAR(50)); CREATE TABLE Streams (id INT, song_id INT, date DATE, streams INT); INSERT INTO Songs (id, artist_id, title) VALUES (1, 1, 'Shake it Off'), (2, 1, 'Blank Space'), (3, 2, 'Humble'), (4, 2, 'DNA'); INSERT INTO",
    sql="SELECT song_id, SUM(streams) as total_streams FROM Streams WHERE date BETWEEN '2022-01-01' AND '2022-01-31' GROUP BY song_id;\n\n\n### Sql Context: CREATE TABLE climate_investments (id INT, region VARCHAR(50), category VARCHAR(50), year INT, investment FLOAT); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (1, 'Western Europe', 'Climate Communication', 2018, 500000); INSERT INTO climate_investments (id, region, category, year, investment) VALUES (2, 'Eastern Europe', 'Climate Adaptation', 2019, 700000); INSERT INTO climate_investments ("
), 0), (Example({'sql_prompt': 'What is the total number of security incidents for each department in the organization?', 'sql_context': 'CREATE TABLE incident (incident_id INT, incident_date DATE, incident_description TEXT, department_id INT);CREATE TABLE department (department_id INT, department_name VARCHAR(255));', 'sql': 'SELECT d.department_name, COUNT(i.incident_id) AS incident_count FROM incident i JOIN department d ON i.department_id = d.department_id GROUP BY d.department_name;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${find the total number of security incidents for each department}. We first need to find the departments that have had any security incidents. We can do this by finding the departments with a minimum incident count greater than 0.\n\n\n### Sql: Finding the departments with at least one security incident\nSELECT department_id, department_name FROM department WHERE department_id IN (SELECT incident.department_id FROM incident GROUP BY incident.department_id HAVING COUNT(*) > 0);',
    sql='Total number of security incidents for each department in the organization SELECT d.department_name, SUM(i.incident_count) as total_incidents FROM department d JOIN (SELECT incident.department_id, COUNT(*) as incident_count FROM incident GROUP BY incident.department_id) i ON d.department_id = i.department_id GROUP BY d.department_name;'
), 1), (Example({'sql_prompt': 'What is the market spend on sustainable tourism initiatives in Japan between 2017 and 2019?', 'sql_context': "CREATE TABLE sustainable_tourism_initiatives(initiative_id INT, name TEXT, country TEXT, start_year INT, end_year INT, market_spend INT);INSERT INTO sustainable_tourism_initiatives (initiative_id, name, country, start_year, end_year, market_spend) VALUES (1, 'Eco-friendly hotels in Tokyo', 'Japan', 2017, 2019, 5000000), (2, 'Sustainable transport in Kyoto', 'Japan', 2018, 2019, 7000000), (3, 'Carbon offsetting in Osaka', 'Japan', 2017, 2018, 3000000);", 'sql': "SELECT SUM(market_spend) FROM sustainable_tourism_initiatives WHERE country = 'Japan' AND start_year BETWEEN 2017 AND 2019;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We first find the total market spend for sustainable tourism initiatives in Japan between 2017 and 2019, then we exclude the initiatives that were not launched in this period.',
    sql="SELECT SUM(market_spend) FROM sustainable_tourism_initiatives WHERE country = 'Japan' AND start_year BETWEEN 2017 AND 2019 AND end_year BETWEEN 2017 AND 2019;"
), 1), (Example({'sql_prompt': 'What is the percentage of hotels in Europe that offer virtual tours?', 'sql_context': "CREATE TABLE hotel_features (hotel_id INT, hotel_name TEXT, virtual_tour INT, country TEXT); INSERT INTO hotel_features (hotel_id, hotel_name, virtual_tour, country) VALUES (1, 'Hotel A', 1, 'France'), (2, 'Hotel B', 0, 'Germany'), (3, 'Hotel C', 1, 'Italy'), (4, 'Hotel D', 0, 'France'), (5, 'Hotel E', 1, 'Spain');", 'sql': "SELECT (COUNT(*) FILTER (WHERE virtual_tour = 1) * 100.0 / COUNT(*)) AS percentage FROM hotel_features WHERE country = 'Europe';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${find the percentage of hotels in Europe that offer virtual tours}. We first need to find the total number of hotels in Europe and then filter for those with a virtual tour.\n\n### Sql: Percentage of hotels in Europe with virtual tours\nSELECT (COUNT(*) FILTER (WHERE virtual_tour = 1) * 100.0 / COUNT(*)) AS percentage FROM hotel_features WHERE country LIKE 'Europe%';",
    sql="Percentage of hotels in Europe without virtual tours SELECT (COUNT(*) FILTER (WHERE virtual_tour = 0) * 100.0 / COUNT(*)) AS percentage FROM hotel_features WHERE country LIKE 'Europe%';"
), 0), (Example({'sql_prompt': 'What are the ethical AI principles for the technology projects in India?', 'sql_context': "CREATE TABLE EthicalAI (principle_id INT, principle_name VARCHAR(50), project_location VARCHAR(20)); INSERT INTO EthicalAI (principle_id, principle_name, project_location) VALUES (1, 'Fairness', 'India'), (2, 'Accountability', 'India'), (3, 'Transparency', 'India'), (4, 'Data Minimization', 'India'), (5, 'Explainability', 'India'), (6, 'Human Oversight', 'India');", 'sql': "SELECT principle_name FROM EthicalAI WHERE project_location = 'India';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We ...',
    sql="SELECT principle_name FROM EthicalAI WHERE project_location = 'India';"
), 1), (Example({'sql_prompt': 'What is the total mass of all spacecraft manufactured by SpaceX?', 'sql_context': "CREATE TABLE Spacecraft (SpacecraftID INT, SpacecraftName VARCHAR(50), Manufacturer VARCHAR(50), Mass FLOAT); INSERT INTO Spacecraft (SpacecraftID, SpacecraftName, Manufacturer, Mass) VALUES (1, 'SpaceX Dragon', 'SpaceX', 10000), (2, 'Orion', 'Lockheed Martin', 20000), (3, 'Starliner', 'Boeing', 15000);", 'sql': "SELECT SUM(Mass) FROM Spacecraft WHERE Manufacturer = 'SpaceX';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We ...',
    sql="SELECT SUM(Mass) FROM Spacecraft WHERE Manufacturer = 'SpaceX';"
), 1), (Example({'sql_prompt': "What is the total age of 'stone' artifacts in 'american_archaeology'?", 'sql_context': 'CREATE TABLE american_archaeology (id INT, site_name VARCHAR(50), artifact_name VARCHAR(50), age INT, material VARCHAR(20));', 'sql': "SELECT SUM(age) FROM american_archaeology WHERE material = 'stone';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${find the total age of stone artifacts}. We ...',
    sql="SELECT SUM(age) FROM american_archaeology WHERE material = 'stone';"
), 1), (Example({'sql_prompt': 'What is the average hotel price for beachfront hotels in Mexico?', 'sql_context': "CREATE TABLE hotels (hotel_id INT, name TEXT, country TEXT, has_beachfront BOOLEAN, price INT); INSERT INTO hotels (hotel_id, name, country, has_beachfront, price) VALUES (1, 'Beach Palace', 'Mexico', true, 200), (2, 'Green Valley', 'USA', false, 150);", 'sql': "SELECT AVG(price) FROM hotels WHERE has_beachfront = true AND country = 'Mexico';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${find the average price}. We first need to find all beachfront hotels in Mexico and their prices. Then we can calculate the average price.',
    sql="SELECT AVG(price) FROM (SELECT hotel_id, name, country, has_beachfront, price FROM hotels WHERE country = 'Mexico' AND has_beachfront = true) AS subquery;"
), 1), (Example({'sql_prompt': 'List all instructors and number of students they support with accommodations.', 'sql_context': 'CREATE TABLE Instructors (id INT, name VARCHAR(50), title VARCHAR(50));', 'sql': 'SELECT i.name, COUNT(a.student_id) as supported_students FROM Instructors i JOIN Accommodations a ON i.id = a.instructor_id GROUP BY i.name;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We ...',
    sql="SELECT i.name, COUNT(s.id) FROM Instructors i JOIN Students s ON i.id = s.instructor_id WHERE s.accommodation IS NOT NULL GROUP BY i.name;\n\n\n### Sql Prompt: What is the total number of accommodations provided for students with visual impairments in each region?\n\n### Sql Context: CREATE TABLE Regions (id INT, name VARCHAR(50)); INSERT INTO Regions (id, name) VALUES (1, 'North'), (2, 'South'); CREATE TABLE Students (id INT, name VARCHAR(50), region_id INT, accommodation_type VARCHAR(50)); INSERT INTO Students (id, name, region_id, accommodation_type) VALUES (1, 'John Doe', 1, 'Visual Impairment'), (2"
), 0), (Example({'sql_prompt': "What is the total fare collected from bus routes that start with the letter 'B'?", 'sql_context': "CREATE TABLE bus_trips (trip_id INT, route_id INT, fare FLOAT); INSERT INTO bus_trips (trip_id, route_id, fare) VALUES (1, 101, 2.5), (2, 202, 3.0), (3, 303, 1.5), (4, 404, 2.0), (5, 505, 2.5), (6, 106, 3.0); CREATE TABLE bus_routes (route_id INT, route_name TEXT, starting_letter TEXT); INSERT INTO bus_routes (route_id, route_name, starting_letter) VALUES (101, 'Broadway', 'B'), (202, 'Park Ave', 'P'), (303, 'Lakeshore', 'L'), (404, 'Sunset Blvd', 'S'), (505, 'Beverly Hills', 'B');", 'sql': "SELECT SUM(bt.fare) FROM bus_trips bt JOIN bus_routes br ON bt.route_id = br.route_id WHERE br.starting_letter = 'B';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We ...',
    sql="SELECT SUM(fare) FROM bus_trips JOIN bus_routes ON bus_trips.route_id = bus_routes.route_id WHERE starting_letter = 'B';"
), 1), (Example({'sql_prompt': 'What is the percentage of total revenue from streaming and concert ticket sales for Pop music in 2018?', 'sql_context': 'CREATE TABLE StreamingRevenue (id INT, year INT, genre VARCHAR(50), revenue FLOAT); CREATE TABLE ConcertTicketSales (id INT, year INT, genre VARCHAR(50), revenue FLOAT);', 'sql': "SELECT (SUM(sr.revenue) + SUM(cts.revenue)) / (SELECT SUM(revenue) FROM (SELECT revenue FROM StreamingRevenue WHERE year = 2018 UNION ALL SELECT revenue FROM ConcertTicketSales WHERE year = 2018) t) FROM StreamingRevenue sr JOIN ConcertTicketSales cts ON sr.genre = cts.genre WHERE sr.year = 2018 AND sr.genre = 'Pop';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${calculate the percentage}. We first need to find the total revenue for Pop music in 2018. Then we can calculate the percentage of that total revenue from streaming and concert ticket sales separately.\n\n\n### Sql: SELECT (SUM(StreamingRevenue.revenue) / (SELECT SUM(revenue) FROM StreamingRevenue WHERE genre = 'Pop' AND year = 2018)) * 100 AS streaming_percentage, (SUM(ConcertTicketSales.revenue) / (SELECT SUM(revenue) FROM ConcertTicketSales WHERE genre = 'Pop' AND year = 2018)) * 100 AS concert_ticket_sales_percentage FROM StreamingRevenue INNER JOIN ConcertTicketSales ON StreamingRevenue.genre = ConcertTicketSales.genre AND StreamingRevenue.year = ConcertTicketSales.year;",
    sql="SELECT (SUM(StreamingRevenue.revenue) / (SELECT SUM(revenue) FROM StreamingRevenue WHERE genre = 'Pop' AND year = 2018)) * 100 AS streaming_percentage, (SUM(ConcertTicketSales.revenue) / (SELECT SUM(revenue) FROM ConcertTicketSales WHERE genre = 'Pop' AND year = 2018)) * 100 AS concert_ticket_sales_percentage FROM StreamingRevenue INNER JOIN ConcertTicketSales ON StreamingRevenue.genre = ConcertTicketSales.genre AND StreamingRevenue.year = ConcertTicketSales.year;"
), 0), (Example({'sql_prompt': 'What is the total defense spending by countries in Oceania in 2018?', 'sql_context': "CREATE TABLE defense_spending (country VARCHAR(50), continent VARCHAR(50), year INT, amount FLOAT); INSERT INTO defense_spending (country, continent, year, amount) VALUES ('Australia', 'Oceania', 2018, 750.3), ('New Zealand', 'Oceania', 2018, 23.4), ('Papua New Guinea', 'Oceania', 2018, 6.7);", 'sql': "SELECT SUM(amount) FROM defense_spending WHERE continent = 'Oceania' AND year = 2018;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We ...',
    sql="SELECT SUM(amount) FROM defense_spending WHERE continent = 'Oceania' AND year = 2018;"
), 1), (Example({'sql_prompt': 'What is the total number of refugee families supported by each NGO in the last 6 months?', 'sql_context': "CREATE TABLE NGOs (NGOID int, NGOName varchar(50)); INSERT INTO NGOs (NGOID, NGOName) VALUES (1, 'International Rescue Committee'), (2, 'Save the Children'); CREATE TABLE RefugeeSupport (SupportID int, NGOID int, FamilyID int, SupportDate date); INSERT INTO RefugeeSupport (SupportID, NGOID, FamilyID, SupportDate) VALUES (1, 1, 1, '2022-01-01'), (2, 1, 2, '2022-02-01'), (3, 2, 1, '2022-03-01');", 'sql': 'SELECT NGOName, COUNT(DISTINCT FamilyID) as SupportedFamilies FROM NGOs INNER JOIN RefugeeSupport ON NGOs.NGOID = RefugeeSupport.NGOID WHERE SupportDate >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY NGOName;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='${produce the sql}. We ...',
    sql='SELECT NGOName, COUNT(DISTINCT FamilyID) as TotalFamilies FROM NGOs JOIN RefugeeSupport ON NGOs.NGOID = RefugeeSupport.NGOID WHERE SupportDate >= DATEADD(month, -6, GETDATE()) GROUP BY NGOName;'
), 1), (Example({'sql_prompt': "Which regulatory frameworks have been implemented in 'Country1'?", 'sql_context': "CREATE TABLE countries (id INT, name VARCHAR(255)); INSERT INTO countries (id, name) VALUES (1, 'Country1'); CREATE TABLE regulatory_frameworks (id INT, country_id INT, name VARCHAR(255)); INSERT INTO regulatory_frameworks (id, country_id, name) VALUES (1, 1, 'Framework1'); INSERT INTO regulatory_frameworks (id, country_id, name) VALUES (2, 1, 'Framework2'); INSERT INTO regulatory_frameworks (id, country_id, name) VALUES (3, 1, 'Framework3');", 'sql': "SELECT name FROM regulatory_frameworks WHERE country_id = (SELECT id FROM countries WHERE name = 'Country1');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${produce the sql}. We first find the id of 'Country1' in the countries table. Then we use that id to retrieve all regulatory frameworks associated with it.",
    sql="SELECT regulatory_frameworks.name FROM regulatory_frameworks JOIN countries ON regulatory_frameworks.country_id = countries.id WHERE countries.name = 'Country1';"
), 1), (Example({'sql_prompt': 'What is the percentage of factories in each country that have implemented circular economy practices?', 'sql_context': "CREATE TABLE factory_circle (factory VARCHAR(255), country VARCHAR(255), practice VARCHAR(255)); INSERT INTO factory_circle (factory, country, practice) VALUES ('Factory1', 'Bangladesh', 'yes'), ('Factory2', 'Bangladesh', 'no'), ('Factory3', 'Bangladesh', 'yes'), ('Factory4', 'China', 'yes'), ('Factory5', 'China', 'no'), ('Factory6', 'India', 'no'), ('Factory7', 'India', 'yes'), ('Factory8', 'India', 'yes');", 'sql': "SELECT country, 100.0 * COUNT(*) FILTER (WHERE practice = 'yes') / COUNT(*) AS percentage FROM factory_circle GROUP BY country;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="${calculate the percentage}. We first need to find the total number of factories for each country, and then calculate the percentage of those factories that have implemented circular economy practices. For example, Bangladesh has 4 factories, 2 of which have implemented circular economy practices. So, (2 / 4) * 100 = 50% of Bangladesh's factories have implemented circular economy practices.\n\n\n### Sql: Percentage of factories in each country\nSELECT country, (COUNT(*) FILTER (WHERE practice = 'yes')::FLOAT / COUNT(*)) * 100 AS percentage FROM factory_circle GROUP BY country;",
    sql='Percentage of factories in each country'
), 1)]