[(Example({'sql_prompt': 'Delete records with sales amount over $50,000 in the MilitaryEquipmentSales table', 'sql_context': "CREATE TABLE MilitaryEquipmentSales (id INT, equipment_name VARCHAR(50), sale_amount INT, sale_date DATE); INSERT INTO MilitaryEquipmentSales (id, equipment_name, sale_amount, sale_date) VALUES (1, 'Fighter Jet', 45000, '2021-01-01'), (2, 'Tank', 75000, '2021-02-01');", 'sql': 'DELETE FROM MilitaryEquipmentSales WHERE sale_amount > 50000;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To delete records with a sales amount over $50,000 from the MilitaryEquipmentSales table, we need to write an SQL DELETE statement that specifies this condition. Here is how you can do it:',
    sql='DELETE FROM MilitaryEquipmentSales WHERE sale_amount > 50000;'
), 1), (Example({'sql_prompt': 'What is the average number of visitor reviews for heritage sites in each category?', 'sql_context': "CREATE TABLE HeritageSitesReviews (ID INT, SiteName VARCHAR(100), Category VARCHAR(50), Reviews INT); INSERT INTO HeritageSitesReviews (ID, SiteName, Category, Reviews) VALUES (1, 'Machu Picchu', 'Archaeological', 5000); INSERT INTO HeritageSitesReviews (ID, SiteName, Category, Reviews) VALUES (2, 'Taj Mahal', 'Architectural', 8000);", 'sql': 'SELECT Category, AVG(Reviews) OVER (PARTITION BY Category) AS AvgReviews FROM HeritageSitesReviews;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the average number of visitor reviews for heritage sites in each category, we need to group the data by the "Category" column and then calculate the average value of the "Reviews" column within each group. The SQL query will look like this:',
    sql='SELECT Category, AVG(Reviews) AS avg_reviews FROM HeritageSitesReviews GROUP BY Category;'
), 1), (Example({'sql_prompt': 'What is the total revenue from ads targeting users interested in veganism in Q3 2022?', 'sql_context': 'CREATE TABLE ads (id INT, user INT, platform VARCHAR(50), target VARCHAR(50), start_date DATE, end_date DATE, revenue DECIMAL(10, 2));', 'sql': "SELECT SUM(revenue) FROM ads WHERE target = 'veganism' AND platform IN ('Facebook', 'Instagram') AND start_date BETWEEN '2022-07-01' AND '2022-09-30';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the total revenue from ads targeting users interested in veganism during Q3 (July, August, September) of 2022, we need to filter the records based on the `target` column for "veganism", and then further filter by the date range that corresponds to Q3. After filtering, we can sum up the revenue from these ads.\n\nHere\'s how you would write the SQL query:\n\n```sql\nSELECT SUM(revenue) AS total_revenue\nFROM ads\nWHERE target = \'veganism\'\nAND start_date >= \'2022-07-01\' AND end_date <= \'2',
    sql="```sql\nSELECT SUM(revenue) AS total_revenue\nFROM ads\nWHERE target = 'veganism'\nAND start_date >= '2022-07-01'\nAND end_date <= '2022-09-30';\n```"
), 0), (Example({'sql_prompt': 'What is the minimum duration of workouts for members who joined in 2019, grouped by gender?', 'sql_context': 'CREATE TABLE Workout (WorkoutID INT PRIMARY KEY, MemberID INT, Duration INT, Date DATE); CREATE TABLE Member (MemberID INT PRIMARY KEY, Age INT, Gender VARCHAR(10), MembershipStart DATE);', 'sql': "SELECT Member.Gender, MIN(Workout.Duration) FROM Workout INNER JOIN Member ON Workout.MemberID = Member.MemberID WHERE Member.MembershipStart BETWEEN '2019-01-01' AND '2019-12-31' GROUP BY Member.Gender;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the minimum duration of workouts for members who joined in 2019, grouped by gender, we need to join the `Workout` and `Member` tables on their common column (`MemberID`), filter the results to include only those members who started their membership in 2019, then group the remaining records by gender and calculate the minimum workout duration for each group.\n\nHere's how you can write the SQL query:\n\n```sql\nSELECT m.Gender, MIN(w.Duration) AS MinWorkoutDuration\nFROM Workout w\nJOIN Member m ON w.MemberID = m.MemberID\nWHERE YEAR(m.MembershipStart)",
    sql='= 2019 GROUP BY m.Gender;'
), 0), (Example({'sql_prompt': 'How many employees were hired in each month of 2022?', 'sql_context': "CREATE TABLE Employees (EmployeeID INT, HireDate DATE); INSERT INTO Employees (EmployeeID, HireDate) VALUES (1, '2022-01-15'); INSERT INTO Employees (EmployeeID, HireDate) VALUES (2, '2022-02-01');", 'sql': "SELECT EXTRACT(MONTH FROM HireDate) AS Month, COUNT(*) AS NumberOfHires FROM Employees WHERE HireDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY Month;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the number of employees hired in each month of 2022, we need to extract the year and month from the HireDate column. Then, group the results by these extracted values (year and month) and count the number of employees for each group.\n\nHere's the SQL query that accomplishes this:\n\n```sql\nSELECT\n  EXTRACT(YEAR FROM HireDate) AS hire_year,\n  EXTRACT(MONTH FROM HireDate) AS hire_month,\n  COUNT(*) AS num_employees_hired\nFROM Employees\nWHERE EXTRACT(YEAR FROM HireDate) =",
    sql='```sql\nSELECT \n    EXTRACT(YEAR FROM HireDate) AS hire_year, \n    EXTRACT(MONTH FROM HireDate) AS hire_month, \n    COUNT(*) AS num_employees_hired \nFROM \n    Employees \nWHERE \n    EXTRACT(YEAR FROM HireDate) = 2022\nGROUP BY \n    hire_year, \n    hire_month\nORDER BY \n    hire_year, \n    hire_month;\n```'
), 1), (Example({'sql_prompt': 'What is the maximum quantity of a single organic product delivered in the DELIVERY_RECORDS table?', 'sql_context': 'CREATE TABLE DELIVERY_RECORDS (id INT, supplier_id INT, product_id INT, is_organic BOOLEAN, quantity INT); INSERT INTO DELIVERY_RECORDS (id, supplier_id, product_id, is_organic, quantity) VALUES (1, 1, 1, true, 50), (2, 2, 2, true, 30);', 'sql': 'SELECT MAX(quantity) FROM DELIVERY_RECORDS WHERE is_organic = true;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the maximum quantity of a single organic product delivered in the DELIVERY_RECORDS table, we need to filter out only the records where is_organic is true and then determine the highest value among those quantities.\n\nHere's the SQL query that accomplishes this:\n\n```sql\nSELECT MAX(quantity) AS max_organic_product_quantity FROM DELIVERY_RECORDS WHERE is_organic = TRUE;\n```",
    sql="Sql Prompt: What is the maximum quantity of a single organic product delivered in the DELIVERY_RECORDS table?\n\nSql Context: CREATE TABLE DELIVERY_RECORDS (id INT, supplier_id INT, product_id INT, is_organic BOOLEAN, quantity INT); INSERT INTO DELIVERY_RECORDS (id, supplier_id, product_id, is_organic, quantity) VALUES (1, 1, 1, true, 50), (2, 2, 2, true, 30);\n\nReasoning: Let's think step by step in order to find"
), 1), (Example({'sql_prompt': 'Update the description of a sustainable urbanism initiative in the sustainable_urbanism_initiatives table', 'sql_context': "CREATE TABLE public.sustainable_urbanism_initiatives (id SERIAL PRIMARY KEY, initiative_name VARCHAR(255), initiative_description TEXT, city_name VARCHAR(255), state_name VARCHAR(255)); INSERT INTO public.sustainable_urbanism_initiatives (initiative_name, initiative_description, city_name, state_name) VALUES ('Green City Program', 'Promotes green spaces and sustainable transportation options in urban areas', 'Portland', 'Oregon'), ('EcoDistricts Initiative', 'Encourages sustainable community development in city neighborhoods', 'Vancouver', 'British Columbia');", 'sql': "WITH updated_initiative AS (UPDATE public.sustainable_urbanism_initiatives SET initiative_description = 'Promotes green spaces, sustainable transportation, and energy-efficient buildings in urban areas' WHERE initiative_name = 'Green City Program' RETURNING *) INSERT INTO public.sustainable_urbanism_initiatives (initiative_name, initiative_description, city_name, state_name) SELECT initiative_name, initiative_description, city_name, state_name FROM updated_initiative;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To update the description of a specific initiative, we need to identify which initiative we want to update. For this example, let\'s assume we want to update the "Green City Program" initiative located in Portland, Oregon.\n\nFirst, we will write an SQL query that updates the `initiative_description` for the specified initiative:\n\n```sql\nUPDATE public.sustainable_urbanism_initiatives\nSET initiative_description = \'Promotes green spaces and sustainable transportation options in urban areas with a focus on renewable energy sources.\'\nWHERE initiative_name = \'Green City Program\' AND city_name = \'Portland\' AND state_name',
    sql="UPDATE public.sustainable_urbanism_initiatives SET initiative_description = 'Promotes green spaces and sustainable transportation options in urban areas with a focus on renewable energy sources.' WHERE initiative_name = 'Green City Program' AND city_name = 'Portland' AND state_name = 'Oregon';"
), 0), (Example({'sql_prompt': 'Calculate the year-over-year revenue growth for each restaurant.', 'sql_context': "CREATE TABLE restaurants (restaurant_id INT, restaurant_name VARCHAR(50), city VARCHAR(50), state VARCHAR(50), revenue FLOAT, year INT); INSERT INTO restaurants (restaurant_id, restaurant_name, city, state, revenue, year) VALUES (1, 'Restaurant A', 'City A', 'State A', 123456.78, 2021);", 'sql': 'SELECT restaurant_name, (revenue - LAG(revenue) OVER (PARTITION BY restaurant_name ORDER BY year)) / ABS(LAG(revenue) OVER (PARTITION BY restaurant_name ORDER BY year)) as revenue_growth FROM restaurants;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To calculate the year-over-year revenue growth for each restaurant, we need to compare the revenues of consecutive years and compute the percentage change. We can achieve this using a self-join on the restaurants table based on the restaurant_id while matching the years appropriately (current year with previous year).\n\nHere's an example SQL query that calculates the revenue growth for each restaurant:\n\n```sql\nWITH RevenueGrowth AS (\n  SELECT\n    r1.restaurant_id,\n    r1.year AS current_year,\n    r2.year AS previous_year,\n    r1.revenue AS current_revenue,\n    r",
    sql='WIDTH(r2) AS previous_revenue, ((r1.revenue - r2.revenue) / r2.revenue * 100) AS growth_percentage FROM restaurants r1 INNER JOIN restaurants r2 ON r1.restaurant_id = r2.restaurant_id AND r1.year = r2.year + 1);'
), 0), (Example({'sql_prompt': 'What is the percentage of users in Canada who have used the hashtag #travel?', 'sql_context': "CREATE TABLE posts (id INT, user_id INT, hashtags TEXT); INSERT INTO posts (id, user_id, hashtags) VALUES (1, 1, '#travel'), (2, 1, '#food'), (3, 2, '#travel'), (4, 3, '#art'), (5, 4, '#music'); CREATE TABLE users (id INT, country VARCHAR(2)); INSERT INTO users (id, country) VALUES (1, 'CA'), (2, 'US'), (3, 'CA'), (4, 'DE');", 'sql': "SELECT 100.0 * COUNT(DISTINCT user_id) / (SELECT COUNT(DISTINCT user_id) FROM posts JOIN users ON posts.user_id = users.id WHERE users.country = 'CA') as percentage_travel FROM posts JOIN users ON posts.user_id = users.id WHERE hashtags LIKE '%#travel%' AND users.country = 'CA';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the percentage of users in Canada who have used the hashtag #travel, we need to perform several steps. First, we will join the `posts` and `users` tables on user_id and id respectively. Then, we filter for posts containing the hashtag '#travel' and where the country is 'CA'. After that, we count the distinct users who have used this hashtag in Canada. Finally, we calculate the percentage by dividing it with the total number of Canadian users.\n\nHere's the SQL query to achieve this:\n\n```sql\nWITH canadian_users AS (\n  SELECT COUNT(DISTINCT id) as total_canadian_users",
    sql="FROM users WHERE country = 'CA'), hashtag_usage AS (\n  SELECT DISTINCT p.user_id\n  FROM posts p\n  JOIN users u ON p.user_id = u.id\n  WHERE p.hashtags LIKE '%#travel%' AND u.country = 'CA'\n)\nSELECT ROUND((COUNT(DISTINCT h.user_id) * 100.0) / c.total_canadian_users, 2) AS percentage_of_users_using_hashtag\nFROM hashtag_usage h, canadian_users c;"
), 0), (Example({'sql_prompt': 'What is the total number of points scored by each team in the NBA this season?', 'sql_context': "CREATE TABLE nba_teams (team_name TEXT, points_scored INT); INSERT INTO nba_teams (team_name, points_scored) VALUES ('Cavaliers', 8000), ('Warriors', 8500), ('Celtics', 7500);", 'sql': 'SELECT team_name, SUM(points_scored) FROM nba_teams GROUP BY team_name;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the total number of points scored by each team in the NBA this season, we can use a simple SELECT statement with GROUP BY clause. Since there is no need for aggregation or joining tables, and all required information is already present in the nba_teams table, our SQL query will be straightforward:',
    sql='SELECT team_name, points_scored FROM nba_teams ORDER BY points_scored DESC;'
), 0), (Example({'sql_prompt': 'What is the highest number of hat-tricks scored by a player in a single Bundesliga season?', 'sql_context': "CREATE TABLE german_teams (team_id INT, team_name VARCHAR(50)); INSERT INTO german_teams (team_id, team_name) VALUES (1, 'Bayern Munich'), (2, 'Borussia Dortmund'), (3, 'RB Leipzig'); CREATE TABLE german_matches (match_id INT, home_team_id INT, away_team_id INT, home_team_player_hat_tricks INT, away_team_player_hat_tricks INT); INSERT INTO german_matches (match_id, home_team_id, away_team_id, home_team_player_hat_tricks, away_team_player_hat_tricks) VALUES (1, 1, 2, 1, 0), (2, 2, 3, 0, 1), (3, 3, 1, 1, 0);", 'sql': 'SELECT MAX(home_team_player_hat_tricks + away_team_player_hat_tricks) AS max_hat_tricks FROM german_matches;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the highest number of hat-tricks scored by a player in a single Bundesliga season, we need to consider both home and away team players. We can do this by unpivoting the data using UNION ALL to combine home_team_player_hat_tricks and away_team_player_hat_tricks into one column. Then, we'll group by match_id (assuming each row represents a single season) and find the maximum number of hat-tricks scored in that season.",
    sql='```sql\nWITH unpivoted AS (\n    SELECT match_id, home_team_player_hat_tricks AS player_hat_tricks FROM'
), 0), (Example({'sql_prompt': "What is the average word count for articles published in the 'news' schema, grouped by author?", 'sql_context': "CREATE TABLE news.articles (article_id INT, title VARCHAR(100), author VARCHAR(100), word_count INT); INSERT INTO news.articles (article_id, title, author, word_count) VALUES (1, 'Article 1', 'John Doe', 500), (2, 'Article 2', 'Jane Doe', 600), (3, 'Article 3', 'John Doe', 700);", 'sql': 'SELECT author, AVG(word_count) FROM news.articles GROUP BY author;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the average word count for articles published in the 'news' schema, grouped by author, we need to perform an aggregation on the `word_count` column while grouping the results by the `author`. The SQL query will look like this:\n\n```sql\nSELECT \n    author, \n    AVG(word_count) AS avg_word_count\nFROM \n    news.articles\nGROUP BY \n    author;\n```\n\nThis query selects the `author` column and calculates the average word count (`AVG(word_count)`) for each author's articles in the 'news' schema, grouping the results by the `author`.",
    sql='SELECT author, AVG(word_count) AS avg_word_count FROM news.articles GROUP BY author;'
), 1), (Example({'sql_prompt': 'Show the total budget allocation for healthcare services in the top 5 states with the highest budget allocation', 'sql_context': 'CREATE TABLE healthcare_services (service_id INT, state_id INT, budget FLOAT);CREATE TABLE states (state_id INT, state_name TEXT);', 'sql': 'SELECT s.state_name, SUM(hs.budget)  FROM healthcare_services hs INNER JOIN states s ON hs.state_id = s.state_id GROUP BY s.state_name ORDER BY SUM(hs.budget) DESC LIMIT 5;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To show the total budget allocation for healthcare services in the top 5 states with the highest budget allocation, we need to follow these steps:\n\n1. Calculate the sum of budgets allocated to each state.\n2. Rank the states based on their total budget allocations.\n3. Select only the top 5 states with the highest budget allocations and display their names along with the corresponding total budget allocation for healthcare services.\n\nHere's the SQL query that accomplishes this:\n\n```sql\nWITH state_budgets AS (\n    SELECT\n        s.state_name,\n        SUM(hs.budget) as total_budget\n    FROM\n        healthcare_",
    sql="CREATE TABLE states (state_id INT, state_name TEXT);\nCREATE TABLE healthcare_services (service_id INT, state_id INT, budget FLOAT);\n\nReasoning: Let's think step by step in order to produce the SQL. We need to aggregate the total budgets for each state from the `healthcare_services` table and then join it with the `states` table to get the corresponding state names. After that, we will rank these states based on their total budget allocations using a window function or an ORDER BY clause within a subquery. Finally, we'll limit our results to only include the top 5 states with the highest budgets by using a LIMIT"
), 0), (Example({'sql_prompt': 'Find the total volume of timber sold in 2021', 'sql_context': "CREATE TABLE forests (id INT, name VARCHAR(50), hectares DECIMAL(5,2), year_planted INT, PRIMARY KEY (id)); INSERT INTO forests (id, name, hectares, year_planted) VALUES (1, 'Forest A', 123.45, 1990), (2, 'Forest B', 654.32, 1985); CREATE TABLE timber_sales (id INT, forest_id INT, year INT, volume DECIMAL(10,2), PRIMARY KEY (id)); INSERT INTO timber_sales (id, forest_id, year, volume) VALUES (1, 1, 2021, 120.50), (2, 1, 2022, 150.75), (3, 2, 2021, 450.23), (4, 2, 2022, 520.89);", 'sql': 'SELECT SUM(ts.volume) FROM timber_sales ts INNER JOIN forests f ON ts.forest_id = f.id WHERE ts.year = 2021;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the total volume of timber sold in 2021, we need to sum up the volumes from the `timber_sales` table where the year is equal to 2021. We can achieve this using a simple SQL query with a WHERE clause to filter for the desired year and an aggregate function (SUM) to calculate the total volume:',
    sql='SELECT SUM(volume) AS total_volume FROM timber_sales WHERE year = 2021;'
), 0), (Example({'sql_prompt': 'Who are the top 3 suppliers of recycled polyester?', 'sql_context': "CREATE TABLE suppliers (id INT, name VARCHAR(255), material VARCHAR(255)); INSERT INTO suppliers (id, name, material) VALUES (1, 'Supplier A', 'Recycled Polyester'), (2, 'Supplier B', 'Organic Cotton'), (3, 'Supplier C', 'Recycled Polyester'), (4, 'Supplier D', 'Hemp'), (5, 'Supplier E', 'Recycled Polyester');", 'sql': "SELECT name FROM suppliers WHERE material = 'Recycled Polyester' GROUP BY name ORDER BY COUNT(*) DESC LIMIT 3;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the top 3 suppliers of recycled polyester, we need to count how many times each supplier provides this material and then sort them based on that count. We can achieve this using a combination of GROUP BY, COUNT(), and ORDER BY clauses.',
    sql="SELECT name, COUNT(*) as num_of_recycled_polyester FROM suppliers WHERE material = 'Recycled Polyester' GROUP BY name ORDER BY num_of_recycled_polyester DESC LIMIT 3;"
), 1), (Example({'sql_prompt': "How many donors have donated more than $100 in the 'Donations' table?", 'sql_context': "CREATE TABLE Donations (DonorID INT, DonationDate DATE, Amount DECIMAL(10, 2)); INSERT INTO Donations (DonorID, DonationDate, Amount) VALUES (1, '2022-02-01', 120.00), (2, '2022-01-15', 75.00), (3, '2022-03-05', 150.00);", 'sql': 'SELECT COUNT(*) FROM Donations WHERE Amount > 100;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the number of donors who have donated more than $100, we need to filter out the rows where the Amount is greater than 100 and then count the distinct DonorID values. Here's how you can write the SQL query:",
    sql='SELECT COUNT(DISTINCT DonorID) AS NumberOfDonors FROM Donations WHERE Amount > 100;'
), 0), (Example({'sql_prompt': "Update the 'Angkor Wat' excavation to have a start date of 1300-01-01.", 'sql_context': "CREATE TABLE ExcavationSites (SiteID INT PRIMARY KEY, Name VARCHAR(255), Country VARCHAR(255), StartDate DATE, EndDate DATE); INSERT INTO ExcavationSites (SiteID, Name, Country, StartDate, EndDate) VALUES (5, 'Angkor Wat', 'Cambodia', '1860-01-01', '1860-05-01');", 'sql': "UPDATE ExcavationSites SET StartDate = '1300-01-01' WHERE Name = 'Angkor Wat';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To update the start date of the excavation site named "Angkor Wat" to January 1, 300, we need to execute an UPDATE statement on the ExcavationSites table. However, there is a discrepancy between the given context and the prompt\'s request:\n\n- The provided SQL context has Angkor Wat with a start date of \'1860-01-01\'.\n- The prompt asks to update it to \'300-01-01\', which is not possible since there was no year 0 in the Gregorian calendar. Assuming this is an error and you meant to set the start date to a more reasonable historical period,',
    sql='UPDATE ExcavationSites SET StartDate = \'300-01-01\' WHERE Name = \'Angkor Wat\';\n\n---\n\nHowever, if we strictly follow the prompt as given and ignore the calendar discrepancy, the SQL would be:\n\nSql Prompt: Natural language query\n\nSql Context: ExcavationSites table with SiteID, Name, Country, StartDate, EndDate columns. Angkor Wat has a start date of \'1860-01-01\'.\n\nReasoning: Let\'s think step by step in order to update the record for "Angkor Wat" excavation site to have a new start date'
), 0), (Example({'sql_prompt': 'Calculate the total CO2 emissions (in metric tons) per capita for each country in the population_data and carbon_emissions tables.', 'sql_context': 'CREATE TABLE population_data (country VARCHAR(50), year INT, population INT); CREATE TABLE carbon_emissions (country VARCHAR(50), year INT, co2_emissions FLOAT);', 'sql': 'SELECT p.country, AVG(co2_emissions/population*1000000) as co2_emissions_per_capita FROM population_data p JOIN carbon_emissions c ON p.country = c.country GROUP BY p.country;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To calculate the total CO2 emissions per capita for each country, we need to join the `population_data` and `carbon_emissions` tables on both `country` and `year`. Then, divide the sum of CO2 emissions by the population for each country.\n\nHere's the SQL query:\n\n```sql\nSELECT \n    p.country,\n    p.year,\n    (SUM(c.co2_emissions) / SUM(p.population)) AS co2_per_capita\nFROM \n    population_data p\nINNER JOIN \n    carbon_emissions c ON p.country = c.country AND p.",
    sql='year = c.year GROUP BY p.country, p.year;'
), 0), (Example({'sql_prompt': "How many rural infrastructure projects were completed in '2022' in the 'Asia-Pacific' region?", 'sql_context': "CREATE TABLE rural_infrastructure(id INT, project TEXT, location TEXT, completion_year INT); INSERT INTO rural_infrastructure (id, project, location, completion_year) VALUES (1, 'Rural Road Project', 'Asia-Pacific', 2022);", 'sql': "SELECT COUNT(*) FROM rural_infrastructure WHERE location = 'Asia-Pacific' AND completion_year = 2022;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the number of completed rural infrastructure projects in the Asia-Pacific region for the year 2022, we need to filter the data based on the location and completion_year columns. We can use a simple SELECT statement with a WHERE clause to achieve this:',
    sql="SELECT COUNT(*) FROM rural_infrastructure WHERE location = 'Asia-Pacific' AND completion_year = 2022;"
), 1), (Example({'sql_prompt': "What is the average horsepower of luxury vehicles in the 'GreenCar' database produced after 2017?", 'sql_context': 'CREATE TABLE LuxuryVehicles (Id INT, Make VARCHAR(50), Model VARCHAR(50), Year INT, Horsepower INT);', 'sql': 'SELECT AVG(Horsepower) FROM LuxuryVehicles WHERE Year > 2017;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the average horsepower of luxury vehicles produced after 2017 from the 'GreenCar' database, we need to perform a SELECT query on the LuxuryVehicles table. We will filter the results based on the Year column (to consider only those produced after 2017) and then calculate the average horsepower for these filtered records.\n\nHere is the SQL statement that accomplishes this:\n\n```sql\nSELECT AVG(Horsepower) AS avg_horsepower\nFROM LuxuryVehicles\nWHERE Year > 2017;\n```",
    sql='SELECT AVG(Horsepower) AS avg_horsepower\nFROM LuxuryVehicles\nWHERE Year > 2017;'
), 1), (Example({'sql_prompt': 'What is the maximum response time for emergency calls in the city of Los Angeles?', 'sql_context': 'CREATE TABLE emergency_calls (id INT, city VARCHAR(20), response_time INT);', 'sql': "SELECT MAX(response_time) FROM emergency_calls WHERE city = 'Los Angeles';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the maximum response time for emergency calls in the city of Los Angeles, we need to filter the data based on the city name and then calculate the maximum value from the response times. Here is the SQL query that accomplishes this task:',
    sql="SELECT MAX(response_time) AS max_response_time FROM emergency_calls WHERE city = 'Los Angeles';"
), 1), (Example({'sql_prompt': 'What is the maximum loan amount for socially responsible loans in the Asia-Pacific region?', 'sql_context': "CREATE TABLE socially_responsible_loans (loan_id INT, region VARCHAR(20), loan_amount DECIMAL(10,2)); INSERT INTO socially_responsible_loans (loan_id, region, loan_amount) VALUES (101, 'Asia-Pacific', 50000), (102, 'Europe', 30000), (103, 'Asia-Pacific', 70000);", 'sql': "SELECT MAX(srl.loan_amount) FROM socially_responsible_loans srl WHERE srl.region = 'Asia-Pacific';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the maximum loan amount for socially responsible loans in the Asia-Pacific region, we need to filter the records based on the specified region and then determine the highest loan_amount value. Here is the SQL query that accomplishes this task:',
    sql="SELECT MAX(loan_amount) AS max_loan_amount FROM socially_responsible_loans WHERE region = 'Asia-Pacific';"
), 1), (Example({'sql_prompt': 'What is the maximum number of years a traditional art form has been preserved in each country?', 'sql_context': "CREATE TABLE countries (id INT, name TEXT); INSERT INTO countries (id, name) VALUES (1, 'Nigeria'), (2, 'Brazil'); CREATE TABLE art_forms (id INT, country_id INT, name TEXT, year_preserved INT); INSERT INTO art_forms (id, country_id, name, year_preserved) VALUES (1, 1, 'Tie-dye', 500), (2, 1, 'Batik', 1000), (3, 2, 'Capoeira', 400);", 'sql': 'SELECT c.name, MAX(af.year_preserved) FROM countries c JOIN art_forms af ON c.id = af.country_id GROUP BY c.id;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the maximum number of years a traditional art form has been preserved in each country, we need to calculate the difference between the current year and the year_preserved for each art form. Then, we can group these results by country and select the maximum value from this calculation.\n\nAssuming that the current year is 2023:\n\n1. Calculate the number of years preserved for each art form using `year_preserved` column and subtracting it from the current year (2023).\n2. Group the results by country, selecting the maximum value of years preserved in each group.\n\nHere's the SQL query to achieve this:\n\n```sql\nSELECT c.name",
    sql='FROM countries AS c\nJOIN art_forms AS a ON c.id = a.country_id\nCROSS JOIN (SELECT 2023 - MIN(year_preserved) AS current_year) AS yr\nGROUP BY c.name\nORDER BY MAX((yr.current_year - a.year_preserved)) DESC;'
), 0), (Example({'sql_prompt': 'What is the maximum hourly wage for each labor category in the construction industry?', 'sql_context': 'CREATE TABLE labor_statistics (id INT, industry VARCHAR(255), category VARCHAR(255), title VARCHAR(255), hourly_wage DECIMAL(5,2));', 'sql': "SELECT industry, category, MAX(hourly_wage) as max_hourly_wage FROM labor_statistics WHERE industry = 'construction' GROUP BY industry, category;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the maximum hourly wage for each labor category within the construction industry, we need to filter records based on the 'industry' column and then group them by the 'category' column. After grouping, we can use the MAX() function to get the highest hourly wage for each category.\n\nHere is the SQL query that accomplishes this:\n\n```sql\nSELECT \n    category,\n    MAX(hourly_wage) AS max_hourly_wage\nFROM \n    labor_statistics\nWHERE \n    industry = 'Construction'\nGROUP BY \n    category;\n```\n\nThis query selects the maximum hourly wage for each labor category in",
    sql="SELECT category, MAX(hourly_wage) AS max_hourly_wage \nFROM labor_statistics \nWHERE industry = 'Construction' \nGROUP BY category;"
), 0), (Example({'sql_prompt': 'List all the drought-impacted counties in Texas in 2018.', 'sql_context': "CREATE TABLE drought_impact(county VARCHAR(20), state VARCHAR(20), year INT, impacted BOOLEAN); INSERT INTO drought_impact(county, state, year, impacted) VALUES ('Harris', 'Texas', 2015, true), ('Harris', 'Texas', 2016, true), ('Harris', 'Texas', 2017, true), ('Harris', 'Texas', 2018, true), ('Bexar', 'Texas', 2015, false), ('Bexar', 'Texas', 2016, false), ('Bexar', 'Texas', 2017, false), ('Bexar', 'Texas', 2018, false);", 'sql': "SELECT county FROM drought_impact WHERE state = 'Texas' AND year = 2018 AND impacted = true;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To list all the drought-impacted counties in Texas for the year 2018, we need to filter the data based on the state (Texas) and the year (2018), as well as ensure that the impacted column is true. Here's how you can write the SQL query:",
    sql="SELECT county FROM drought_impact WHERE state = 'Texas' AND year = 2018 AND impacted = true;"
), 1), (Example({'sql_prompt': 'Find the top 3 genres with the highest revenue in 2022 for streaming services in the USA.', 'sql_context': "CREATE TABLE streaming_services (service_id INT, service_name VARCHAR(255), revenue DECIMAL(10,2)); INSERT INTO streaming_services (service_id, service_name, revenue) VALUES (1, 'StreamingCo', 5000000.00); CREATE TABLE genre_sales (sale_id INT, service_id INT, genre VARCHAR(255), sales DECIMAL(10,2)); INSERT INTO genre_sales (sale_id, service_id, genre, sales) VALUES (1, 1, 'Rock', 150000.00);", 'sql': "SELECT genre, SUM(sales) as total_sales FROM genre_sales gs JOIN streaming_services s ON gs.service_id = s.service_id WHERE s.service_country = 'USA' AND s.service_year = 2022 GROUP BY genre ORDER BY total_sales DESC LIMIT 3;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the top 3 genres with the highest revenue for streaming services in the USA in 2022, we need to join the `streaming_services` and `genre_sales` tables on their respective service IDs. Then, we'll filter by the year (assuming there is a column or way to determine the sales are from 2022), group by genre, sum up the revenue for each genre, and finally order the results in descending order of total revenue while limiting the output to the top 3 genres.\n\nHowever, since we don't have a column indicating the year directly within the provided context, I will assume that all sales data available",
    sql='```sql\nSELECT gs.genre, SUM(gs.sales) AS total_revenue\nFROM genre_sales gs\nJOIN streaming_services ss ON gs.service_id = ss.service_id\nGROUP BY gs.genre\nORDER BY total_revenue DESC\nLIMIT 3;\n```'
), 0), (Example({'sql_prompt': "List all unique fields from the 'geology' and 'infrastructure' tables.", 'sql_context': 'CREATE TABLE geology (well_id INT, rock_type VARCHAR(50)); CREATE TABLE infrastructure (well_id INT, platform_type VARCHAR(50));', 'sql': "SELECT field FROM (SELECT 'geology' as table_name, column_name as field FROM information_schema.columns WHERE table_name = 'geology' UNION ALL SELECT 'infrastructure' as table_name, column_name as field FROM information_schema.columns WHERE table_name = 'infrastructure') as subquery;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To list all unique fields from the 'geology' and 'infrastructure' tables, we need to combine the distinct values of each column from both tables. Since these are two separate tables with different columns (one for rock types and one for platform types), we can use a UNION ALL operation to concatenate the results into a single list without duplicates.\n\nHere is the SQL query that accomplishes this:\n\n```sql\nSELECT DISTINCT 'rock_type' AS field, rock_type AS value FROM geology\nUNION ALL\nSELECT DISTINCT 'platform_type', platform_type FROM infrastructure;\n```\n\nThis query selects all distinct values from the `rock_type` column in the",
    sql="```sql\nSELECT DISTINCT 'field_name', field_value \nFROM (\n    SELECT 'rock_type' AS field_name, rock_type AS field_value FROM geology\n    UNION ALL\n    SELECT 'platform_type', platform_type FROM infrastructure\n) AS combined_fields;\n```"
), 0), (Example({'sql_prompt': 'Calculate the percentage of total Europium production for each country.', 'sql_context': 'CREATE TABLE europium_production (country VARCHAR(50), quantity INT);', 'sql': 'SELECT country, quantity * 100.0 / SUM(quantity) OVER (PARTITION BY NULL) AS percentage FROM europium_production;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To calculate the percentage of total Europium production for each country, we need to follow these steps:\n\n1. Calculate the total Europium production across all countries.\n2. For each country, divide its Europium production quantity by the total Europium production and multiply by 100 to get the percentage.\n3. Display the results with the country name and its corresponding Europium production percentage.\n\nHere's the SQL query that accomplishes this:\n\n```sql\nWITH TotalProduction AS (\n    SELECT SUM(quantity) as total_quantity FROM europium_production\n),\nCountryPercentage AS (\n    SELECT \n        country,\n        quantity,\n        ROUND((",
    sql='```sql\nWITH TotalProduction AS (\n    SELECT SUM(quantity) as total_quantity\n    FROM europium_production\n),\nCountryPercentage AS (\n    SELECT \n        country, \n        quantity, \n        ROUND((quantity * 100.0 / total_quantity), 2) AS production_percentage\n    FROM \n        europium_production,\n        TotalProduction\n)\nSELECT \n    country, \n    production_percentage\nFROM \n    CountryPercentage;\n```'
), 0), (Example({'sql_prompt': 'Find the mobile subscribers with consecutive speed drops greater than 25% for the last 3 months, ordered by subscription IDs.', 'sql_context': 'CREATE TABLE mobile_usage_detailed (subscriber_id INT, month INT, speed FLOAT); INSERT INTO mobile_usage_detailed (subscriber_id, month, speed) VALUES (1, 1, 100), (1, 2, 80), (1, 3, 70), (2, 1, 200), (2, 2, 180), (2, 3, 160), (3, 1, 150), (3, 2, 130), (3, 3, 110);', 'sql': 'SELECT subscriber_id, speed, month FROM (SELECT subscriber_id, speed, month, LAG(speed, 1) OVER (PARTITION BY subscriber_id ORDER BY month) as prev_speed, LAG(speed, 2) OVER (PARTITION BY subscriber_id ORDER BY month) as prev_prev_speed FROM mobile_usage_detailed) t WHERE t.speed < 0.75 * t.prev_speed AND t.speed < 0.75 * t.prev_prev_speed ORDER BY subscriber_id;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the mobile subscribers with consecutive speed drops greater than 25% for the last 3 months, we need to compare each month's speed with the previous month and check if there is a drop of more than 25%. We can use the LAG() window function to access the previous row's data.\n\nHere's the SQL query:\n\n```sql\nWITH SpeedDrops AS (\n    SELECT\n        subscriber_id,\n        month,\n        speed,\n        LAG(speed) OVER (PARTITION BY subscriber_id ORDER BY month) as prev_month_speed\n    FROM mobile_usage_detailed\n),\nConsec",
    sql="Reasoning: Let's think step by step in order to produce the SQL. We need to identify consecutive months where there is a speed drop greater than 25% for each subscriber. To do this, we will use the LAG() window function to get the previous month's speed and calculate the percentage drop. Then, we will filter out records with drops less than or equal to 25%. Finally, we need to ensure that these drops are consecutive over the last three months for each subscriber. We can achieve this by using a CASE statement within our CTE (Common Table Expression) and then filtering based on the results of that case statement.\n\nSql: ```sql\nWITH SpeedD"
), 0), (Example({'sql_prompt': 'What is the distribution of AI safety research topics by year?', 'sql_context': "CREATE TABLE if not exists ai_safety_research (year INT, topic VARCHAR(255)); INSERT INTO ai_safety_research (year, topic) VALUES (2018, 'Explainable AI'), (2019, 'Algorithmic fairness'), (2020, 'AI safety'), (2021, 'Robust AI'), (2022, 'AI ethics');", 'sql': 'SELECT year, topic, COUNT(*) OVER (PARTITION BY year) as research_count FROM ai_safety_research ORDER BY year;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the distribution of AI safety research topics by year, we need to count how many times each topic appears per year. This will give us an idea of which topics were more prevalent or focused on during specific years. We can achieve this using a GROUP BY clause with both 'year' and 'topic'.",
    sql='SELECT year, topic, COUNT(*) as topic_count FROM ai_safety_research GROUP BY year, topic ORDER BY year, topic;'
), 0), (Example({'sql_prompt': "How many forest management practices are recorded in the 'tropical_forests'?", 'sql_context': "CREATE TABLE forest_management (id INT, forest_type VARCHAR(50), practice_count INT); INSERT INTO forest_management (id, forest_type, practice_count) VALUES (1, 'Tropical Forests', 45); INSERT INTO forest_management (id, forest_type, practice_count) VALUES (2, 'Temperate Forests', 34);", 'sql': "SELECT practice_count FROM forest_management WHERE forest_type = 'Tropical Forests';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find out how many forest management practices are recorded for tropical forests, we need to query the `forest_management` table and count the number of entries where the `forest_type` is 'Tropical Forests'.\n\nHere's the SQL statement that accomplishes this:\n\n```sql\nSELECT COUNT(*) AS num_practices FROM forest_management WHERE forest_type = 'Tropical Forests';\n```",
    sql="Sql Prompt: How many forest management practices are recorded in the 'tropical_forests'?\n\nSql Context: CREATE TABLE forest_management (id INT, forest_type VARCHAR(50), practice_count INT); INSERT INTO forest_management (id, forest_type, practice_count) VALUES (1, 'Tropical Forests', 45); INSERT INTO forest_management (id, forest_type, practice_count) VALUES (2, 'Temperate Forests', 34);\n\nReasoning: Let's think step by step in order to find out how many forest management practices are recorded for tropical forests. We need to query the `forest_management"
), 1), (Example({'sql_prompt': 'What is the distribution of lifelong learning course enrollments by age group, in total?', 'sql_context': 'CREATE TABLE lifelong_learning (student_id INT, age_group VARCHAR(255), course_id INT); CREATE TABLE courses (course_id INT, course_name VARCHAR(255));', 'sql': 'SELECT l.age_group, COUNT(l.course_id) FROM lifelong_learning l INNER JOIN courses c ON l.course_id = c.course_id GROUP BY l.age_group;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the distribution of lifelong learning course enrollments by age group in total, we need to count the number of enrollments for each age group. We can achieve this by using a GROUP BY clause on the `age_group` column from the `lifelong_learning` table and then counting the rows for each group.\n\nHere's the SQL query that accomplishes this:\n\n```sql\nSELECT \n    ll.age_group, \n    COUNT(*) AS total_enrollments\nFROM \n    lifelong_learning ll\nGROUP BY \n    ll.age_group\nORDER BY \n    ll.age_group;\n```\n\nThis",
    sql='SELECT ll.age_group, COUNT(*) AS total_enrollments \nFROM lifelong_learning ll \nGROUP BY ll.age_group \nORDER BY ll.age_group;'
), 0), (Example({'sql_prompt': "Insert new records into the Employee table with the following data: EmployeeID 3, FirstName 'Mike', LastName 'Smith', Department 'Environment'.", 'sql_context': 'CREATE TABLE Employee (EmployeeID INT, FirstName VARCHAR(50), LastName VARCHAR(50), Department VARCHAR(50));', 'sql': "INSERT INTO Employee (EmployeeID, FirstName, LastName, Department) VALUES (3, 'Mike', 'Smith', 'Environment');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To insert new records into the `Employee` table with the provided data for an employee named Mike Smith who works in the Environment department, we can use the following SQL statement:\n\n```sql\nINSERT INTO Employee (EmployeeID, FirstName, LastName, Department) VALUES (3, 'Mike', 'Smith', 'Environment');\n```\n\nThis statement inserts a new row into the `Employee` table with an `EmployeeID` of 3, and sets the `FirstName`, `LastName`, and `Department` columns to 'Mike', 'Smith', and 'Environment' respectively.",
    sql="INSERT INTO Employee (EmployeeID, FirstName, LastName, Department) VALUES (3, 'Mike', 'Smith', 'Environment');"
), 1), (Example({'sql_prompt': 'Which cosmetic brands have the highest average customer rating?', 'sql_context': "CREATE TABLE brand (id INT, name VARCHAR(255), avg_rating FLOAT); CREATE TABLE rating (brand_id INT, rating FLOAT); INSERT INTO brand (id, name, avg_rating) VALUES (1, 'Lush', 4.2), (2, 'The Body Shop', 4.1), (3, 'Sephora', 4.3); INSERT INTO rating (brand_id, rating) VALUES (1, 4.5), (1, 4.0), (2, 4.1), (2, 4.2), (3, 4.4), (3, 4.3);", 'sql': 'SELECT b.name, AVG(r.rating) as avg_rating FROM brand b JOIN rating r ON b.id = r.brand_id GROUP BY b.name ORDER BY avg_rating DESC;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the cosmetic brands with the highest average customer rating, we need to calculate the average rating for each brand based on individual ratings and then sort them in descending order of their average ratings. Here is the SQL query that accomplishes this task:\n\n```sql\nSELECT b.name, AVG(r.rating) AS avg_customer_rating\nFROM brand b\nJOIN rating r ON b.id = r.brand_id\nGROUP BY b.id, b.name\nORDER BY avg_customer_rating DESC;\n```\n\nThis query joins the `brand` and `rating` tables on their respective IDs to get all ratings for each brand. Then it groups the results',
    sql='SELECT b.name, AVG(r.rating) AS avg_customer_rating \nFROM brand b \nJOIN rating r ON b.id = r.brand_id \nGROUP BY b.id, b.name \nORDER BY avg_customer_rating DESC;'
), 0), (Example({'sql_prompt': 'How many unique volunteers worked on projects in each cause area?', 'sql_context': "CREATE TABLE volunteers (id INT, name VARCHAR(30), cause_area VARCHAR(20)); INSERT INTO volunteers (id, name, cause_area) VALUES (1, 'Bob', 'children'), (2, 'Alice', 'children'), (3, 'Charlie', 'health');", 'sql': 'SELECT cause_area, COUNT(DISTINCT name) FROM volunteers GROUP BY cause_area;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the number of unique volunteers who worked on projects in each cause area, we need to group the data by `cause_area` and count the distinct `id` values for each group. This will give us the total number of unique volunteers per cause area.\n\nHere's the SQL query that accomplishes this:\n\n```sql\nSELECT \n    cause_area, \n    COUNT(DISTINCT id) AS unique_volunteers\nFROM \n    volunteers\nGROUP BY \n    cause_area;\n```",
    sql="Sql Prompt: How many unique volunteers worked on projects in each cause area?\n\nSql Context: CREATE TABLE volunteers (id INT, name VARCHAR(30), cause_area VARCHAR(20)); INSERT INTO volunteers (id, name, cause_area) VALUES (1, 'Bob', 'children'), (2, 'Alice', 'children'), (3, 'Charlie', 'health');\n\nReasoning: Let's think step by step in order to find the number of unique volunteers who worked on projects in each cause area. We need to group the data based on `cause_area` and then count the distinct `id` values for each group, which represents the"
), 1), (Example({'sql_prompt': 'Who were the top 3 content creators in terms of likes received on their posts in January 2022?', 'sql_context': "CREATE SCHEMA content; CREATE TABLE creators(creator_id INT, name VARCHAR(255), total_likes INT); INSERT INTO creators (creator_id, name, total_likes) VALUES (1, 'Alice', 5000); INSERT INTO creators (creator_id, name, total_likes) VALUES (2, 'Bob', 7000);", 'sql': 'SELECT name, SUM(total_likes) AS total_likes_january FROM content.creators WHERE MONTH(created_date) = 1 GROUP BY name ORDER BY total_likes_january DESC LIMIT 3;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the top 3 content creators based on likes received on their posts in January 2022, we need a table that contains information about each post made by the creators and the number of likes they received. Since this data is not provided directly within the given SQL context, let's assume there exists another table named `posts` with relevant columns such as `creator_id`, `post_date`, and `likes`.\n\nHere's how you can create a hypothetical structure for the `posts` table:\n\n```sql\nCREATE TABLE content.posts (\n    post_id INT,\n    creator_id INT,\n    post_date DATE,",
    sql="SQL Prompt: Who were the top 3 content creators in terms of likes received on their posts in January 2022?\n\nSQL Context: We have a `creators` table with information about each creator and their total number of likes. However, to find out who got the most likes specifically in January 2022, we need data from another table that records individual posts made by these creators along with the date they were posted and the number of likes received for each post. Let's assume there is a `posts` table structured as follows:\n\n```sql\nCREATE TABLE content.posts (\n    post_id INT,\n    creator_id"
), 0), (Example({'sql_prompt': "Update records in the 'Volunteers' table where the volunteer's skill level is 'Beginner' and change it to 'Intermediate'", 'sql_context': 'CREATE TABLE Volunteers (id INT PRIMARY KEY, volunteer_name VARCHAR(255), skill_level VARCHAR(255), last_volunteered DATE);', 'sql': "UPDATE Volunteers SET skill_level = 'Intermediate' WHERE skill_level = 'Beginner';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To update the records in the 'Volunteers' table where the volunteer's skill level is 'Beginner', we need to use an UPDATE statement. The SQL command will look for rows with a `skill_level` of 'Beginner' and change it to 'Intermediate'. Here's how you can do that:\n\n```sql\nUPDATE Volunteers\nSET skill_level = 'Intermediate'\nWHERE skill_level = 'Beginner';\n```\n\nThis SQL statement will update the `skill_level` column for all rows in the 'Volunteers' table where the current value is 'Beginner', setting it to 'Intermediate'.",
    sql="UPDATE Volunteers SET skill_level = 'Intermediate' WHERE skill_level = 'Beginner';"
), 1), (Example({'sql_prompt': 'Identify the number of farmers involved in urban agriculture initiatives in California and New York in 2019.', 'sql_context': "CREATE TABLE Urban_Agriculture (Farmer_ID INT, State VARCHAR(20), Initiative VARCHAR(20), Year INT); INSERT INTO Urban_Agriculture (Farmer_ID, State, Initiative, Year) VALUES (101, 'California', 'Community_Garden', 2019), (102, 'California', 'Rooftop_Farming', 2019), (103, 'New_York', 'Community_Garden', 2019);", 'sql': "SELECT COUNT(DISTINCT Farmer_ID) FROM Urban_Agriculture WHERE State IN ('California', 'New York') AND Year = 2019 AND Initiative IN ('Community_Garden', 'Rooftop_Farming');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To identify the number of farmers involved in urban agriculture initiatives in California and New York for the year 2019, we need to count the distinct Farmer IDs from the Urban_Agriculture table where the State is either 'California' or 'New York', and the Year is 2019.\n\nHere's the SQL query that accomplishes this:\n\n```sql\nSELECT COUNT(DISTINCT Farmer_ID) AS NumberOfFarmersInvolved\nFROM Urban_Agriculture\nWHERE State IN ('California', 'New York') AND Year = 2019;\n```",
    sql="Sql Prompt: Identify the number of farmers involved in urban agriculture initiatives in California and New York in 2019.\n\nSql Context: CREATE TABLE Urban_Agriculture (Farmer_ID INT, State VARCHAR(20), Initiative VARCHAR(20), Year INT); INSERT INTO Urban_Agriculture (Farmer_ID, State, Initiative, Year) VALUES (101, 'California', 'Community_Garden', 2019), (102, 'California', 'Rooftop_Farming', 2019), (103, 'New_Y"
), 1), (Example({'sql_prompt': "Update the accommodation type for a student with a StudentID of 2 from 'Assistive Listening Devices' to 'Sign Language Interpretation'.", 'sql_context': "CREATE TABLE StudentAccommodations (StudentID INT, StudentName VARCHAR(255), DisabilityType VARCHAR(255), AccommodationType VARCHAR(255), GraduationYear INT); INSERT INTO StudentAccommodations (StudentID, StudentName, DisabilityType, AccommodationType, GraduationYear) VALUES (1, 'John Doe', 'Visual Impairment', 'Sign Language Interpretation', 2018), (2, 'Jane Smith', 'Hearing Impairment', 'Assistive Listening Devices', NULL), (3, 'Michael Johnson', 'Mobility Impairment', 'Assistive Technology', 2019), (4, 'Sara Johnson', 'Physical Disability', 'Mobility Assistance', 2022);", 'sql': "UPDATE StudentAccommodations SET AccommodationType = 'Sign Language Interpretation' WHERE StudentID = 2;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To update the accommodation type for a student with StudentID of 2 from 'Assistive Listening Devices' to 'Sign Language Interpretation', we need to use an UPDATE statement. The SQL query will be as follows:",
    sql="```sql\nUPDATE StudentAccommodations\nSET AccommodationType = 'Sign Language Interpretation'\nWHERE StudentID = 2 AND DisabilityType = 'Hearing Impairment';\n```\n\nThis query updates the `AccommodationType` column to 'Sign Language Interpretation' for the row where `StudentID` is equal to 2 and `DisabilityType` is equal to 'Hearing Impair"
), 0), (Example({'sql_prompt': 'What is the minimum square footage of an inclusive housing unit in the city of Miami?', 'sql_context': "CREATE TABLE housing (id INT, city VARCHAR(20), size INT, inclusive BOOLEAN); INSERT INTO housing (id, city, size, inclusive) VALUES (1, 'Miami', 800, TRUE), (2, 'Miami', 1000, FALSE), (3, 'Miami', 1200, TRUE);", 'sql': "SELECT MIN(size) FROM housing WHERE city = 'Miami' AND inclusive = TRUE;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the minimum square footage of an inclusive housing unit in Miami, we need to filter the records for those that are both located in Miami and have the "inclusive" attribute set to true. Then, from this filtered subset, we can determine the smallest size value.\n\nHere\'s the SQL query:',
    sql="SELECT MIN(size) AS min_inclusive_housing_size FROM housing WHERE city = 'Miami' AND inclusive = TRUE;"
), 1), (Example({'sql_prompt': 'How many works were exhibited in the year 1950?', 'sql_context': "CREATE TABLE exhibitions (exhibition_id INT PRIMARY KEY, exhibition_name TEXT, year INT, location TEXT);CREATE TABLE exhibits (exhibit_id INT PRIMARY KEY, work_id INT, exhibition_id INT, FOREIGN KEY (work_id) REFERENCES works(work_id), FOREIGN KEY (exhibition_id) REFERENCES exhibitions(exhibition_id));INSERT INTO exhibitions (exhibition_id, exhibition_name, year, location) VALUES (1, 'Documenta', 1950, 'Kassel, Germany'); INSERT INTO exhibits (exhibit_id, work_id, exhibition_id) VALUES (1, 1, 1);", 'sql': 'SELECT COUNT(*) FROM exhibits e JOIN exhibitions ex ON e.exhibition_id = ex.exhibition_id WHERE ex.year = 1950;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find out how many works were exhibited in the year 1950, we need to join the `exhibitions` and `exhibits` tables on their common column (`exhibition_id`), filter for the year 1950, and then count the number of unique work IDs.',
    sql='SELECT COUNT(DISTINCT e.work_id) AS works_exhibited FROM exhibitions ex JOIN exhibits e ON ex.exhibition_id = e.exhibition_id WHERE ex.year = 1950;'
), 0), (Example({'sql_prompt': 'What is the total number of articles written by each author in each region?', 'sql_context': "CREATE TABLE authors (id INT, name TEXT); CREATE TABLE regions (id INT, name TEXT); CREATE TABLE articles (id INT, title TEXT, content TEXT, author_id INT, region_id INT); INSERT INTO authors (id, name) VALUES (1, 'John Doe'), (2, 'Jane Smith'); INSERT INTO regions (id, name) VALUES (1, 'North'), (2, 'South'), (3, 'East'), (4, 'West'); INSERT INTO articles (id, title, content, author_id, region_id) VALUES (1, 'Article 1', 'Content 1', 1, 1), (2, 'Article 2', 'Content 2', 2, 2), (3, 'Article 3', 'Content 3', 1, 3), (4, 'Article 4', 'Content 4', 2, 4);", 'sql': 'SELECT authors.name, regions.name, COUNT(articles.id) FROM authors INNER JOIN articles ON authors.id = articles.author_id INNER JOIN regions ON regions.id = articles.region_id GROUP BY authors.name, regions.name;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the total number of articles written by each author in each region, we need to join the `authors`, `regions`, and `articles` tables. Then, group the results by both the author's name and the region's name while counting the number of articles for each combination.",
    sql='SELECT a.name AS author_name, r.name AS region_name, COUNT(ar.id) AS total_articles FROM authors a INNER JOIN articles ar ON a.id = ar.author_id INNER JOIN regions r ON ar.region_id = r.id GROUP BY a.name, r.name ORDER BY a.name, r.name;'
), 1), (Example({'sql_prompt': 'How many tunnels in Washington state were constructed after 2010?', 'sql_context': "CREATE TABLE tunnels (id INT, name TEXT, state TEXT, build_year INT); INSERT INTO tunnels (id, name, state, build_year) VALUES (1, 'WA-1 Underpass', 'WA', 2012);", 'sql': "SELECT COUNT(*) FROM tunnels WHERE state = 'WA' AND build_year > 2010;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the number of tunnels constructed after 2010 in Washington state, we need to filter the data based on both the `state` and `build_year` columns. We can use a simple SQL query with a WHERE clause for this purpose:',
    sql="SELECT COUNT(*) FROM tunnels WHERE state = 'WA' AND build_year > 2010;"
), 1), (Example({'sql_prompt': 'List the top 5 models with the highest explainability scores and their development team names.', 'sql_context': 'CREATE TABLE ModelExplainabilityScores (ModelID INT, ExplainabilityScore INT, TeamID INT); CREATE TABLE TeamNames (TeamID INT, TeamName VARCHAR(50));', 'sql': 'SELECT ModelExplainabilityScores.ModelID, MAX(ModelExplainabilityScores.ExplainabilityScore) AS MaxExplainabilityScore, TeamNames.TeamName FROM ModelExplainabilityScores INNER JOIN TeamNames ON ModelExplainabilityScores.TeamID = TeamNames.TeamID GROUP BY ModelExplainabilityScores.TeamID ORDER BY MaxExplainabilityScore DESC, TeamNames.TeamName DESC LIMIT 5;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To list the top 5 models with the highest explainability scores and their development team names, we need to join the `ModelExplainabilityScores` table with the `TeamNames` table on the `TeamID`, then sort the results by the `ExplainabilityScore` in descending order. We will limit the output to 5 rows using the `LIMIT` clause.\n\nHere's how you can write the SQL query:\n\n```sql\nSELECT mes.ModelID, tn.TeamName, mes.ExplainabilityScore\nFROM ModelExplainabilityScores mes\nJOIN TeamNames tn ON mes.TeamID = tn.TeamID\nORDER BY mes.Explain",
    sql='```sql\nSELECT mes.ModelID, tn.TeamName, mes.ExplainabilityScore \nFROM ModelExplainabilityScores mes \nJOIN TeamNames tn ON mes.TeamID = tn.TeamID \nORDER BY mes.ExplainabilityScore DESC \nLIMIT 5;\n```'
), 0), (Example({'sql_prompt': 'How many renewable energy power plants are there in Texas?', 'sql_context': "CREATE TABLE power_plants (state VARCHAR(255), source_type VARCHAR(255), count INT); INSERT INTO power_plants (state, source_type, count) VALUES ('Texas', 'Wind', 45), ('Texas', 'Solar', 25), ('Texas', 'Hydro', 10);", 'sql': "SELECT SUM(count) FROM power_plants WHERE state = 'Texas';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the total number of renewable energy power plants in Texas, we need to sum up the counts for all types of renewable sources (Wind, Solar, and Hydro) within the state. We can achieve this using a SQL query that groups the data by state and source_type, then sums up the count values where the state is 'Texas'.",
    sql="SELECT SUM(count) as total_renewable_plants FROM power_plants WHERE state = 'Texas';"
), 0), (Example({'sql_prompt': 'Find the top 5 countries with the lowest financial capability scores in Europe.', 'sql_context': 'CREATE TABLE financial_capability (id INT, country VARCHAR(255), score INT);', 'sql': "SELECT country, score FROM (SELECT country, score, ROW_NUMBER() OVER (ORDER BY score ASC) rn FROM financial_capability WHERE region = 'Europe') t WHERE rn <= 5;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the top 5 countries with the lowest financial capability scores in Europe, we need to follow these steps:\n\n1. Filter out the records for European countries from the `financial_capability` table.\n2. Sort the filtered data based on the score in ascending order (lowest scores first).\n3. Limit the result set to 5 rows to get the top 5 lowest scoring countries.\n\nAssuming we have a list of European countries, let\'s say it includes "France", "Germany", "Italy", etc., and that this information is stored in another table called `countries` with columns `country_name` and `continent`. We can',
    sql="```sql\nSELECT fc.country, MIN(fc.score) AS lowest_score\nFROM financial_capability fc\nJOIN countries c ON fc.country = c.country_name\nWHERE c.continent = 'Europe'\nGROUP BY fc.country\nORDER BY lowest_score ASC\nLIMIT 5;\n```"
), 0), (Example({'sql_prompt': 'What is the correlation between climate change and biodiversity in the Arctic?', 'sql_context': "CREATE TABLE Climate_Change (id INT PRIMARY KEY, year INT, temperature FLOAT, region VARCHAR(50)); CREATE TABLE Biodiversity (id INT, year INT, species_count INT, region VARCHAR(50), climate_id INT, FOREIGN KEY (climate_id) REFERENCES Climate_Change(id)); INSERT INTO Climate_Change (id, year, temperature, region) VALUES (1, 2000, -10.0, 'Arctic'), (2, 2010, -9.5, 'Arctic'); INSERT INTO Biodiversity (id, year, species_count, region, climate_id) VALUES (1, 2000, 100, 'Arctic', 1), (2, 2010, 105, 'Arctic', 2);", 'sql': "SELECT Climate_Change.year, Climate_Change.temperature, Biodiversity.species_count FROM Climate_Change INNER JOIN Biodiversity ON Climate_Change.id = Biodiversity.climate_id WHERE Climate_Change.region = 'Arctic';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the correlation between climate change and biodiversity in the Arctic region, we need to join both tables on their common columns (year and region) and then calculate the Pearson correlation coefficient for temperature and species_count. However, SQL does not have a built-in function to directly compute the Pearson correlation coefficient. Instead, we can use some mathematical formulas involving averages and standard deviations of the two variables.\n\nHere's an example query that calculates the necessary components (mean, variance, covariance) for computing the Pearson correlation coefficient:\n\n```sql\nWITH Arctic_Climate AS (\n  SELECT year, temperature FROM Climate_Change WHERE region = 'Arctic",
    sql="WITH Arctic_Climate AS (\n    SELECT year, AVG(temperature) as avg_temp, VARIANCE(temperature) as var_temp\n    FROM Climate_Change\n    WHERE region = 'Arctic'\n    GROUP BY year\n),\n\nArctic_Biodiversity AS (\n    SELECT b.year, AVG(b.species_count) as avg_species_count, VARIANCE(b.species_count) as var_species_count\n    FROM Biodiversity b\n    JOIN Climate_Change c ON b.climate_id = c.id AND b.year = c.year\n    WHERE b"
), 0), (Example({'sql_prompt': 'What is the average budget allocated for ethical AI research by country?', 'sql_context': "CREATE TABLE Country (CountryID INT PRIMARY KEY, CountryName VARCHAR(100), Budget DECIMAL(10,2)); INSERT INTO Country (CountryID, CountryName, Budget) VALUES (1, 'USA', 5000000.00), (2, 'Canada', 3000000.00), (3, 'Mexico', 1000000.00);", 'sql': 'SELECT AVG(Budget) as AvgBudget, CountryName FROM Country GROUP BY CountryName;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the average budget allocated for ethical AI research by country, we need to calculate the total budget and then divide it by the number of countries involved in ethical AI research. However, based on the provided SQL context, there is no direct information about which countries are specifically allocating their budgets towards ethical AI research.\n\nAssuming that all listed countries allocate a portion of their budget to ethical AI research and we want to find the average budget allocated by these countries for this purpose, we can proceed with the following SQL query:\n\n```sql\nSELECT AVG(Budget) AS avg_ethical_ai_research_budget FROM Country;\n```\n\nThis',
    sql='```sql\nSELECT AVG(Budget) AS avg_ethical_ai_research_budget \nFROM Country;\n```'
), 0), (Example({'sql_prompt': 'What is the total fare collected for each train line?', 'sql_context': "CREATE TABLE train_lines (line_id INT, line_name TEXT); CREATE TABLE fares (fare_id INT, line_id INT, fare DECIMAL); INSERT INTO train_lines VALUES (1, 'Line 1'), (2, 'Line 2'), (3, 'Line 3'); INSERT INTO fares VALUES (1, 1, 3.50), (2, 1, 3.50), (3, 2, 4.25), (4, 3, 5.00), (5, 3, 5.00);", 'sql': 'SELECT train_lines.line_name, SUM(fares.fare) AS total_fare FROM train_lines INNER JOIN fares ON train_lines.line_id = fares.line_id GROUP BY train_lines.line_id;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the total fare collected for each train line, we need to join the `train_lines` table with the `fares` table on their common column (`line_id`), then group the results by the train line and sum up the fares.\n\nHere's the SQL query that accomplishes this:\n\n```sql\nSELECT tl.line_name, SUM(f.fare) AS total_fare_collected\nFROM train_lines tl\nJOIN fares f ON tl.line_id = f.line_id\nGROUP BY tl.line_name;\n```",
    sql="SQL Prompt: What is the total fare collected for each train line?\n\nSQL Context: \n```sql\nCREATE TABLE train_lines (line_id INT, line_name TEXT);\nCREATE TABLE fares (fare_id INT, line_id INT, fare DECIMAL);\nINSERT INTO train_lines VALUES (1, 'Line 1'), (2, 'Line 2'), (3, 'Line 3');\nINSERT INTO fares VALUES (1, 1, 3.50), (2, 1, 3.50), (3, 2, 4.25), (4, 3, 5.00), ("
), 1), (Example({'sql_prompt': 'What is the total revenue for cosmetics products that are not cruelty-free?', 'sql_context': 'CREATE TABLE product (product_id INT, name TEXT, price FLOAT, cruelty_free BOOLEAN); CREATE TABLE sales (sale_id INT, product_id INT, quantity INT);', 'sql': 'SELECT SUM(price * quantity) FROM product INNER JOIN sales ON product.product_id = sales.product_id WHERE cruelty_free = FALSE;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the total revenue for cosmetics products that are not cruelty-free, we need to join the `product` and `sales` tables on their respective `product_id` columns. Then, filter out only those products which are not cruelty-free (i.e., where `cruelty_free` is false). Finally, calculate the total revenue by multiplying each product's price with its sold quantity and summing up these values for all non-cruelty-free cosmetics products.\n\nHere's the SQL query to achieve this:\n\n```sql\nSELECT SUM(p.price * s.quantity) AS total_revenue\nFROM product",
    sql='p JOIN sales s ON p.product_id = s.product_id WHERE p.cruelty_free = FALSE;'
), 0), (Example({'sql_prompt': 'What is the total cost of permits for projects with permit numbers greater than 700?', 'sql_context': "CREATE TABLE permit_data (id INT, project VARCHAR(50), permit_number INT, start_date DATE, permit_cost DECIMAL(10,2)); INSERT INTO permit_data (id, project, permit_number, start_date, permit_cost) VALUES (1, 'Office Building', 450, '2019-12-20', 850.00), (2, 'Residential Apartments', 751, '2021-03-01', 1200.50), (3, 'School', 333, '2020-06-15', 500.25), (4, 'Mall', 780, '2020-12-01', 1500.75);", 'sql': 'SELECT SUM(permit_cost) FROM permit_data WHERE permit_number > 700;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the total cost of permits for projects with permit numbers greater than 700, we need to filter out the rows where the permit_number is less than or equal to 700 and then sum up the costs of the remaining rows.\n\nHere's the SQL query that accomplishes this:\n\n```sql\nSELECT SUM(permit_cost) AS total_cost\nFROM permit_data\nWHERE permit_number > 700;\n```",
    sql="Sql Prompt: What is the total cost of permits for projects with permit numbers greater than 700?\n\nSql Context: CREATE TABLE permit_data (id INT, project VARCHAR(50), permit_number INT, start_date DATE, permit_cost DECIMAL(10,2)); INSERT INTO permit_data (id, project, permit_number, start_date, permit_cost) VALUES (1, 'Office Building', 450, '2019-12-20', 850.00), (2, 'Residential Apartments', 751, '2021-03-01',"
), 1), (Example({'sql_prompt': 'Find the total square footage of wheelchair-accessible properties in Boston.', 'sql_context': "CREATE TABLE properties (id INT, city VARCHAR(20), square_footage INT, wheelchair_accessible BOOLEAN); INSERT INTO properties (id, city, square_footage, wheelchair_accessible) VALUES (1, 'Boston', 1000, true); INSERT INTO properties (id, city, square_footage, wheelchair_accessible) VALUES (2, 'Boston', 1200, false);", 'sql': "SELECT SUM(square_footage) FROM properties WHERE city = 'Boston' AND wheelchair_accessible = true;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the total square footage of wheelchair-accessible properties in Boston, we need to filter the properties table for entries where the city is "Boston" and the wheelchair_accessible column is true. Then, we will sum up the square_footage values that meet these criteria.\n\nHere\'s the SQL query:',
    sql="SELECT SUM(square_footage) AS total_wheelchair_accessible_sqft FROM properties WHERE city = 'Boston' AND wheelchair_accessible = true;"
), 1), (Example({'sql_prompt': 'Which operators have the highest average production quantity per well?', 'sql_context': "CREATE TABLE wells (well_id INT, well_name TEXT, production_qty FLOAT, operator_id INT); INSERT INTO wells (well_id, well_name, production_qty, operator_id) VALUES (1, 'Well A', 1000, 1), (2, 'Well B', 1500, 1), (3, 'Well C', 800, 2); CREATE TABLE operators (operator_id INT, operator_name TEXT); INSERT INTO operators (operator_id, operator_name) VALUES (1, 'ABC Inc.'), (2, 'DEF'), (3, 'GHI Inc.');", 'sql': 'SELECT o.operator_name, AVG(w.production_qty) as avg_production FROM wells w JOIN operators o ON w.operator_id = o.operator_id GROUP BY o.operator_name ORDER BY avg_production DESC;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the operators with the highest average production quantity per well, we need to calculate the average production quantity for each operator and then sort them in descending order based on this average value. Here is how you can write the SQL query:',
    sql='SELECT o.operator_name, AVG(w.production_qty) AS avg_production_quantity FROM wells w INNER JOIN operators o ON w.operator_id = o.operator_id GROUP BY o.operator_id ORDER BY avg_production_quantity DESC;'
), 0), (Example({'sql_prompt': 'What was the average number of comments per post in Oceania in the last month?', 'sql_context': "CREATE TABLE comments_posts(region VARCHAR(20), post_date DATE, comments INT, posts INT); INSERT INTO comments_posts(region, post_date, comments, posts) VALUES('Oceania', '2021-09-01', 10, 10), ('Oceania', '2021-09-02', 12, 12), ('Oceania', '2021-09-03', 14, 14), ('Oceania', '2021-09-04', 16, 16), ('Oceania', '2021-09-05', 18, 18), ('Oceania', '2021-09-06', 20, 20), ('Oceania', '2021-09-07', 22, 22);", 'sql': "SELECT AVG(comments/posts) FROM comments_posts WHERE region = 'Oceania' AND post_date >= DATEADD(month, -1, CURRENT_DATE)"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the average number of comments per post in Oceania for the last month, we need to calculate the total number of comments and posts separately for each day. Then, divide the sum of all daily comment counts by the sum of all daily post counts within the specified time frame (last month).\n\nHere's a SQL query that accomplishes this:\n\n```sql\nSELECT AVG(comments_per_post) AS avg_comments_per_post\nFROM (\n    SELECT \n        SUM(comments) / SUM(posts) AS comments_per_post\n    FROM comments_posts\n    WHERE region = 'Oceania' AND post_date >= DATEADD(month, -1",
    sql="```sql\nSELECT AVG(comments_per_post) AS avg_comments_per_post\nFROM (\n    SELECT \n        SUM(comments) / NULLIF(SUM(posts), 0) AS comments_per_post\n    FROM \n        comments_posts\n    WHERE \n        region = 'Oceania' AND\n        post_date >= DATEADD(month, -1, GETDATE()) AND\n        post_date < GETDATE()\n) AS subquery;\n```"
), 1), (Example({'sql_prompt': 'What is the geopolitical risk assessment score for each country in 2020?', 'sql_context': "CREATE TABLE GeopoliticalRiskAssessments (assessment_id INT, assessment_name VARCHAR(50), score INT, assessment_date DATE, country VARCHAR(50)); INSERT INTO GeopoliticalRiskAssessments (assessment_id, assessment_name, score, assessment_date, country) VALUES (1, 'Assessment A', 7, '2020-01-01', 'USA'), (2, 'Assessment B', 5, '2020-02-15', 'Russia'), (3, 'Assessment C', 8, '2020-03-31', 'China');", 'sql': "SELECT country, score FROM GeopoliticalRiskAssessments WHERE assessment_date BETWEEN '2020-01-01' AND '2020-12-31';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the geopolitical risk assessment score for each country in 2020, we need to filter the data based on the year and then group it by country. We can use the `YEAR()` function to extract the year from the `assessment_date` column and compare it with 2020. Then, we will select the distinct countries along with their corresponding scores for that year.',
    sql='SELECT DISTINCT country, score FROM GeopoliticalRiskAssessments WHERE YEAR(assessment_date) = 2020 ORDER BY country;'
), 0), (Example({'sql_prompt': 'Find the total revenue for events with an attendance over 200 in 2021.', 'sql_context': "CREATE TABLE events (event_id INT, event_name VARCHAR(50), attendance INT, revenue DECIMAL(10,2), event_date DATE); INSERT INTO events (event_id, event_name, attendance, revenue, event_date) VALUES (1, 'Art Exhibition', 250, 15000, '2021-06-01'); INSERT INTO events (event_id, event_name, attendance, revenue, event_date) VALUES (2, 'Theater Performance', 180, 12000, '2021-07-15');", 'sql': 'SELECT SUM(revenue) FROM events WHERE attendance > 200 AND YEAR(event_date) = 2021;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the total revenue for events with an attendance over 200 in 2021, we need to filter the events based on their attendance and event_date. Then, we can sum up the revenues of these filtered events.\n\nHere's the SQL query that accomplishes this:\n\n```sql\nSELECT SUM(revenue) AS total_revenue\nFROM events\nWHERE attendance > 200 AND YEAR(event_date) = 2021;\n```",
    sql="Sql Prompt: Find the total revenue for events with an attendance over 200 in 2021.\n\nSql Context: CREATE TABLE events (event_id INT, event_name VARCHAR(50), attendance INT, revenue DECIMAL(10,2), event_date DATE); INSERT INTO events (event_id, event_name, attendance, revenue, event_date) VALUES (1, 'Art Exhibition', 250, 15000, '2021-06-01'); INSERT INTO events (event_id, event_name, attendance, revenue, event_date) VALUES ("
), 1), (Example({'sql_prompt': "find the number of records in the CommunityHealthStatistics table where the State is 'TX' and the County is 'Harris'", 'sql_context': "CREATE TABLE CommunityHealthStatistics (ID INT, State TEXT, County TEXT, Population INT, AverageIncome FLOAT); INSERT INTO CommunityHealthStatistics (ID, State, County, Population, AverageIncome) VALUES (1, 'TX', 'Harris', 4500000, 60000), (2, 'CA', 'LA', 2500000, 70000);", 'sql': "SELECT * FROM CommunityHealthStatistics WHERE State = 'TX' AND County = 'Harris';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the number of records in the CommunityHealthStatistics table where the State is 'TX' and the County is 'Harris', we can use a simple SELECT statement with a WHERE clause that filters based on these conditions.",
    sql="SELECT COUNT(*) FROM CommunityHealthStatistics WHERE State = 'TX' AND County = 'Harris';"
), 0), (Example({'sql_prompt': "Insert a new record into the 'weapons' table with the following data: 'Javelin', 'USA', 'in-development'", 'sql_context': "CREATE TABLE weapons (id INT PRIMARY KEY, name VARCHAR(255), origin VARCHAR(255), status VARCHAR(255)); INSERT INTO weapons (id, name, origin) VALUES (1, 'AK-47', 'Russia'), (2, 'RPG-7', 'Russia');", 'sql': "INSERT INTO weapons (name, origin, status) VALUES ('Javelin', 'USA', 'in-development');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To insert a new record into the 'weapons' table with the given data ('Javelin', 'USA', 'in-development'), we need to follow these steps:\n\n1. Determine an appropriate value for the `id` field, since it is set as the primary key and must be unique within the table. We can either manually assign a new id or use an auto-increment feature if supported by the database system (e.g., AUTO_INCREMENT in MySQL).\n2. Use the INSERT INTO statement to add the new record with the specified values for `name`, `origin`, and `status`.\n\nAssuming we manually assign a value of 3 as the id, here",
    sql="INSERT INTO weapons (id, name, origin, status) VALUES (3, 'Javelin', 'USA', 'in-development');"
), 0), (Example({'sql_prompt': 'Count the number of mining incidents per month in 2021.', 'sql_context': "CREATE TABLE incidents (id INT, date DATE, incident_type TEXT); INSERT INTO incidents (id, date, incident_type) VALUES (1, '2021-01-05', 'equipment_failure'); INSERT INTO incidents (id, date, incident_type) VALUES (2, '2021-03-12', 'safety_violation');", 'sql': "SELECT DATE_PART('month', date) AS month, COUNT(*) FROM incidents WHERE date >= '2021-01-01' AND date < '2022-01-01' GROUP BY month;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To count the number of mining incidents per month in 2021, we need to extract the year and month from the date column. Then, group the results by these extracted values (year and month) and count the occurrences for each group.',
    sql='SELECT EXTRACT(YEAR FROM date) AS year, EXTRACT(MONTH FROM date) AS month, COUNT(*) as incident_count FROM incidents WHERE EXTRACT(YEAR FROM date) = 2021 GROUP BY year, month ORDER BY year, month;'
), 0), (Example({'sql_prompt': "How many workers are employed in 'renewable energy' sector?", 'sql_context': "CREATE TABLE workers (id INT, worker_name VARCHAR(255), department VARCHAR(255)); INSERT INTO workers (id, worker_name, department) VALUES (1, 'John Doe', 'renewable energy'), (2, 'Jane Smith', 'textiles'), (3, 'Michael Brown', 'renewable energy');", 'sql': "SELECT COUNT(*) FROM workers WHERE department = 'renewable energy';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the number of workers employed in the 'renewable energy' sector, we need to count the rows where the department column has the value 'renewable energy'. We can achieve this using a simple SQL query with a WHERE clause.",
    sql="SELECT COUNT(*) FROM workers WHERE department = 'renewable energy';"
), 1), (Example({'sql_prompt': 'What is the average performance score for each game genre?', 'sql_context': "CREATE TABLE game_genre_performance (game_id INT, game_genre VARCHAR(255), performance_score INT); INSERT INTO game_genre_performance (game_id, game_genre, performance_score) VALUES (1, 'RPG', 85), (2, 'Strategy', 90), (3, 'RPG', 80);", 'sql': 'SELECT game_genre, AVG(performance_score) as avg_score FROM game_genre_performance GROUP BY game_genre;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the average performance score for each game genre, we need to group the data by `game_genre` and then calculate the average of `performance_score` within each group. The SQL query will look like this:',
    sql='SELECT game_genre, AVG(performance_score) AS avg_performance_score FROM game_genre_performance GROUP BY game_genre;'
), 1), (Example({'sql_prompt': 'How many Indigenous communities in the Arctic are experiencing negative socio-economic impacts due to climate change?', 'sql_context': "CREATE TABLE IndigenousCommunities(community TEXT, socio_economic_impact TEXT, climate_change_impact TEXT); INSERT INTO IndigenousCommunities(community, socio_economic_impact, climate_change_impact) VALUES ('Inuit', 'High', 'Very High'), ('Sami', 'Medium', 'High');", 'sql': "SELECT COUNT(*) FROM IndigenousCommunities WHERE socio_economic_impact = 'High' AND climate_change_impact = 'High' OR socio_economic_impact = 'Very High' AND climate_change_impact = 'Very High';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the number of Indigenous communities in the Arctic experiencing negative socio-economic impacts due to climate change, we need to filter the table based on both `socio_economic_impact` and `climate_change_impact`. We can consider "High" or "Very High" as indicators of negative socio-economic impact.',
    sql="SELECT COUNT(*) FROM IndigenousCommunities WHERE (socio_economic_impact = 'High' OR socio_economic_impact = 'Very High') AND climate_change_impact IN ('High', 'Very High');"
), 1), (Example({'sql_prompt': 'What is the minimum depth recorded in the Mariana Trench?', 'sql_context': "CREATE TABLE ocean_floor_mapping (location VARCHAR(255), depth FLOAT);   INSERT INTO ocean_floor_mapping (location, depth) VALUES ('Mariana Trench', 10994.0), ('Challenger Deep', 10972.8);", 'sql': "SELECT MIN(depth) FROM ocean_floor_mapping WHERE location = 'Mariana Trench';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the minimum depth recorded in the Mariana Trench specifically, we need to filter the records for locations that are part of or related to the Mariana Trench and then select the record with the smallest depth value. Here is how you can write the SQL query:',
    sql="SELECT MIN(depth) AS min_depth FROM ocean_floor_mapping WHERE location LIKE '%Mariana Trench%';"
), 0), (Example({'sql_prompt': 'List all farmers who have not serviced their irrigation systems in the last 6 months.', 'sql_context': "CREATE TABLE farmer_irrigation (id INT, farmer_id INT, system_type VARCHAR(50), service_date DATE); INSERT INTO farmer_irrigation (id, farmer_id, system_type, service_date) VALUES (1, 1, 'Drip', '2021-08-01'), (2, 2, 'Sprinkler', '2021-10-15'), (3, 3, 'Drip', '2021-11-01'), (4, 4, 'Sprinkler', '2022-02-01'), (5, 5, 'Drip', '2022-03-01'), (6, 6, 'Sprinkler', '2022-01-15'), (7, 7, 'Drip', '2021-06-01'), (8, 8, 'Sprinkler', '2022-04-01'), (9, 9, 'Drip', '2021-12-01'), (10, 10, 'Sprinkler', '2022-05-15');", 'sql': 'SELECT farmers.name FROM farmers LEFT JOIN farmer_irrigation ON farmers.id = farmer_irrigation.farmer_id WHERE farmer_irrigation.service_date <= DATE_SUB(CURDATE(), INTERVAL 6 MONTH);'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find all farmers who have not serviced their irrigation systems in the last 6 months, we need to compare each service date with today's date (assuming today is April 30, 2022) and filter out those whose service dates are older than 6 months.\n\nHere's a SQL query that accomplishes this:\n\n```sql\nSELECT DISTINCT farmer_id\nFROM farmer_irrigation\nWHERE service_date <= DATE_SUB(CURDATE(), INTERVAL 6 MONTH);\n```\n\nThis query selects distinct `farmer_id` values from the `farmer_irrigation` table where the `service",
    sql='SELECT DISTINCT farmer_id FROM farmer_irrigation WHERE service_date <= DATE_SUB(CURDATE(), INTERVAL 6 MONTH);'
), 0), (Example({'sql_prompt': 'What is the most common type of medical equipment across hospitals?', 'sql_context': "CREATE TABLE medical_equipment (id INT, hospital_name TEXT, location TEXT, equipment TEXT, quantity INT, last_updated_date DATE); INSERT INTO medical_equipment (id, hospital_name, location, equipment, quantity, last_updated_date) VALUES (1, 'NY Presbyterian', 'NYC', 'Ventilators', 80, '2021-03-31'); INSERT INTO medical_equipment (id, hospital_name, location, equipment, quantity, last_updated_date) VALUES (2, 'Stanford Hospital', 'Palo Alto', 'Ventilators', 90, '2021-03-31');", 'sql': 'SELECT equipment, MAX(quantity) as max_quantity FROM medical_equipment GROUP BY equipment ORDER BY max_quantity DESC LIMIT 1;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the most common type of medical equipment across hospitals, we need to count the occurrences of each equipment type and then select the one with the highest count. Here is how you can write the SQL query for this task:',
    sql='SELECT equipment, COUNT(*) as frequency FROM medical_equipment GROUP BY equipment ORDER BY frequency DESC LIMIT 1;'
), 0), (Example({'sql_prompt': "What is the average rating for 'Gluten-Free' items?", 'sql_context': "CREATE TABLE ratings (item_name TEXT, is_gluten_free BOOLEAN, rating INTEGER); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Quinoa Salad', true, 4); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Chicken Stir Fry', false, 5);", 'sql': 'SELECT AVG(rating) FROM ratings WHERE is_gluten_free = true;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the average rating for 'Gluten-Free' items, we need to filter the ratings table based on the `is_gluten_free` column and then calculate the average of the `rating` column. Here is the SQL query that accomplishes this:",
    sql='SELECT AVG(rating) as avg_gluten_free_rating FROM ratings WHERE is_gluten_free = true;'
), 1), (Example({'sql_prompt': 'How many water treatment facilities are there in each country, and what is their distribution by continent?', 'sql_context': "CREATE TABLE facilities (id INT, facility_name VARCHAR(50), country VARCHAR(50), total_employees INT); INSERT INTO facilities (id, facility_name, country, total_employees) VALUES (1, 'Water Treatment Plant 1', 'Brazil', 25); INSERT INTO facilities (id, facility_name, country, total_employees) VALUES (2, 'Water Treatment Plant 2', 'India', 30);", 'sql': 'SELECT country, COUNT(*) as facility_count, CONTINENT(location) as continent FROM facilities JOIN countries ON facilities.country = countries.country_name GROUP BY country, continent;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To answer the question about water treatment facilities distribution by continent and count per country, we need additional information that associates countries with their respective continents. Assuming there is a table named `countries` which contains this mapping, here's how you could write the SQL query:\n\n```sql\n-- Assume the existence of a 'countries' table like so:\nCREATE TABLE countries (country_name VARCHAR(50), continent VARCHAR(50));\nINSERT INTO countries VALUES ('Brazil', 'South America'), ('India', 'Asia');\n\n-- The SQL query to find the number of water treatment facilities in each country and their distribution by continent:\nSELECT c.continent, f.country",
    sql=', COUNT(*) AS facility_count FROM facilities f JOIN countries c ON f.country = c.country_name GROUP BY c.continent, f.country ORDER BY c.continent, f.country;'
), 0), (Example({'sql_prompt': "What is the maximum data usage in the 'urban' region?", 'sql_context': "CREATE TABLE subscribers (id INT, name VARCHAR(50), data_usage FLOAT, region VARCHAR(20)); INSERT INTO subscribers (id, name, data_usage, region) VALUES (1, 'John Doe', 20.0, 'urban'), (2, 'Jane Doe', 18.0, 'urban');", 'sql': "SELECT MAX(data_usage) FROM subscribers WHERE region = 'urban';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the maximum data usage in the 'urban' region, we need to filter the subscribers table for rows where the region is 'urban'. Then, from this filtered result set, we can identify the highest value of data_usage.\n\nHere's the SQL query that accomplishes this:\n\n```sql\nSELECT MAX(data_usage) AS max_data_usage_in_urban FROM subscribers WHERE region = 'urban';\n```",
    sql="SELECT MAX(data_usage) AS max_data_usage_in_urban FROM subscribers WHERE region = 'urban';"
), 1), (Example({'sql_prompt': 'Find the average depth of all underwater volcanoes in the Atlantic Ocean.', 'sql_context': "CREATE TABLE underwater_volcanoes (id INT, name VARCHAR(50), depth FLOAT, ocean VARCHAR(20)); INSERT INTO underwater_volcanoes (id, name, depth, ocean) VALUES (1, 'Lost City', 800, 'Atlantic'); INSERT INTO underwater_volcanoes (id, name, depth, ocean) VALUES (2, 'Eyjafjallajokull', 1650, 'Atlantic');", 'sql': "SELECT AVG(depth) FROM underwater_volcanoes WHERE ocean = 'Atlantic';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the average depth of all underwater volcanoes in the Atlantic Ocean, we need to select only those records from the `underwater_volcanoes` table where the ocean is "Atlantic". Then, we can calculate the average depth using the AVG() function.\n\nHere\'s the SQL query:',
    sql="SELECT AVG(depth) AS avg_depth FROM underwater_volcanoes WHERE ocean = 'Atlantic';"
), 1), (Example({'sql_prompt': 'What is the total cost of Mars rover missions that have successfully landed?', 'sql_context': 'CREATE TABLE mars_rovers (id INT PRIMARY KEY, name VARCHAR(255), mission_type VARCHAR(255), agency VARCHAR(255), cost FLOAT, launched_date DATE, landed_date DATE);', 'sql': "SELECT SUM(cost) FROM mars_rovers WHERE mission_type = 'Lander' AND landed_date IS NOT NULL;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the total cost of Mars rover missions that have successfully landed, we need to filter out only those entries where `landed_date` is not NULL (indicating a successful landing) and then sum up their costs.',
    sql='SELECT SUM(cost) AS total_successful_missions_cost FROM mars_rovers WHERE landed_date IS NOT NULL;'
), 0), (Example({'sql_prompt': "What is the earliest year a peacekeeping operation was conducted in 'Asia'?", 'sql_context': "CREATE TABLE Peacekeeping_Years (id INT, location VARCHAR(30), year INT); INSERT INTO Peacekeeping_Years (id, location, year) VALUES (1, 'Asia', 1990), (2, 'Asia', 2000);", 'sql': "SELECT MIN(year) FROM Peacekeeping_Years WHERE location = 'Asia';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the earliest year a peacekeeping operation was conducted in Asia, we need to select the minimum value of the `year` column from the Peacekeeping_Years table where the location is 'Asia'. Here's how you can write the SQL query:",
    sql="SELECT MIN(year) AS earliest_peacekeeping_year FROM Peacekeeping_Years WHERE location = 'Asia';"
), 1), (Example({'sql_prompt': 'Identify the drug with the lowest sales amount in Europe in 2022.', 'sql_context': "CREATE TABLE sales (drug_name TEXT, continent TEXT, sales_amount INT, sale_date DATE); INSERT INTO sales (drug_name, continent, sales_amount, sale_date) VALUES ('Aspirin', 'Europe', 1000, '2022-01-01');", 'sql': "SELECT drug_name, MIN(sales_amount) FROM sales WHERE continent = 'Europe' AND sale_date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY drug_name;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To identify the drug with the lowest sales amount in Europe for the year 2022, we need to filter the data based on continent and sale_date. Then, we can use an aggregate function (MIN) to find the minimum sales_amount among these filtered records. Here's how you can write the SQL query:",
    sql="SELECT drug_name, MIN(sales_amount) as lowest_sales FROM sales WHERE continent = 'Europe' AND EXTRACT(YEAR FROM sale_date) = 2022 GROUP BY drug_name ORDER BY lowest_sales ASC LIMIT 1;"
), 0), (Example({'sql_prompt': "Insert a new record into 'customer_preferences' for customer 101 and menu item 1 with a preference score of 90", 'sql_context': 'CREATE TABLE customer_preferences (customer_id INT, item_id INT, preference_score INT);', 'sql': 'INSERT INTO customer_preferences (customer_id, item_id, preference_score) VALUES (101, 1, 90);'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To insert a new record into the 'customer_preferences' table for customer 101 and menu item 1 with a preference score of 90, we need to use an INSERT statement. The SQL command will look like this:\n\n```sql\nINSERT INTO customer_preferences (customer_id, item_id, preference_score) VALUES (101, 1, 90);\n```\n\nThis statement adds a new row with the specified values for 'customer_id', 'item_id', and 'preference_score' to the 'customer_preferences' table.",
    sql='INSERT INTO customer_preferences (customer_id, item_id, preference_score) VALUES (101, 1, 90);'
), 1), (Example({'sql_prompt': 'Who is the oldest donor from each city?', 'sql_context': "CREATE TABLE donors_2 (id INT PRIMARY KEY, name VARCHAR(50), age INT, city VARCHAR(50), state VARCHAR(50)); INSERT INTO donors_2 (id, name, age, city, state) VALUES (1, 'John Doe', 35, 'New York', 'NY'), (2, 'Jane Smith', 40, 'Buffalo', 'NY'), (3, 'Mike Johnson', 50, 'Boston', 'MA');", 'sql': 'SELECT city, MAX(age) as oldest_donor_age FROM donors_2 GROUP BY city;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the oldest donor from each city, we need to group the data by city and then select the individual with the maximum age within each group. We can achieve this using a combination of GROUP BY and MAX functions along with a JOIN operation on the original table to get the corresponding names.\n\nHere's the SQL query:\n\n```sql\nSELECT d2.name, d2.age, d2.city\nFROM donors_2 d2\nINNER JOIN (\n    SELECT city, MAX(age) AS max_age\n    FROM donors_2\n    GROUP BY city\n) grouped ON d2.city = grouped.city AND d2.age = grouped.max_age;",
    sql="SQL Prompt: Who is the oldest donor from each city?\n\nSQL Context: CREATE TABLE donors_2 (id INT PRIMARY KEY, name VARCHAR(50), age INT, city VARCHAR(50), state VARCHAR(50)); INSERT INTO donors_2 (id, name, age, city, state) VALUES (1, 'John Doe', 35, 'New York', 'NY'), (2, 'Jane Smith', 40, 'Buffalo', 'NY'), (3, 'Mike Johnson', 50, 'Boston', 'MA');\n\nReasoning: Let's think step by step in order to find the oldest don"
), 1), (Example({'sql_prompt': 'What are the union membership statistics for unions that have engaged in successful collective bargaining in the healthcare sector?', 'sql_context': "CREATE TABLE Membership (UnionName TEXT, Sector TEXT, MemberCount INT); INSERT INTO Membership (UnionName, Sector, MemberCount) VALUES ('UnionHealthA', 'Healthcare', 3000), ('UnionHealthB', 'Healthcare', 5000), ('UnionHealthC', 'Healthcare', 2000);", 'sql': "SELECT UnionName, MemberCount FROM Membership WHERE Sector = 'Healthcare' AND UnionName IN (SELECT UnionName FROM CBAs WHERE ExpirationDate > CURDATE());"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the union membership statistics for unions that have engaged in successful collective bargaining in the healthcare sector, we need additional information about which unions have successfully engaged in collective bargaining. Assuming there is a table named `CollectiveBargaining` with columns `UnionName`, `Sector`, and `Successful` (a boolean indicating whether the bargaining was successful), we can write an SQL query to retrieve this data.\n\nFirst, let's create the hypothetical `CollectiveBargaining` table:\n\n```sql\nCREATE TABLE CollectiveBargaining (UnionName TEXT, Sector TEXT, Successful BOOLEAN);\nINSERT INTO Collective",
    sql="```sql\nCREATE TABLE CollectiveBargaining (UnionName TEXT, Sector TEXT, Successful BOOLEAN);\nINSERT INTO CollectiveBargaining (UnionName, Sector, Successful) VALUES \n('UnionHealthA', 'Healthcare', TRUE),\n('UnionHealthB', 'Healthcare', FALSE),\n('UnionHealthC', 'Healthcare', TRUE);\n```\n\nReasoning: Let's think step by step in order to produce the SQL. We need to join the `Membership` table with the `CollectiveBargaining` table on the `UnionName` and `Sector` columns, filtering for successful collect"
), 0), (Example({'sql_prompt': 'Calculate the total gas consumption for Nigeria in 2019', 'sql_context': "CREATE TABLE gas_consumption (country VARCHAR(50), consumption_year INT, gas_consumption FLOAT); INSERT INTO gas_consumption (country, consumption_year, gas_consumption) VALUES ('Nigeria', 2019, 12000), ('Nigeria', 2018, 10000), ('Ghana', 2019, 8000), ('Ghana', 2018, 6000), ('Ivory Coast', 2019, 10000), ('Ivory Coast', 2018, 8000);", 'sql': "SELECT gas_consumption FROM gas_consumption WHERE country = 'Nigeria' AND consumption_year = 2019;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To calculate the total gas consumption for Nigeria in 2019, we need to filter the records based on the country and year. Then, we can sum up the gas_consumption values for those filtered records. Here is the SQL query that accomplishes this:',
    sql="SELECT SUM(gas_consumption) AS total_gas_consumption FROM gas_consumption WHERE country = 'Nigeria' AND consumption_year = 2019;"
), 0), (Example({'sql_prompt': 'What is the average socially responsible lending loan amount for microfinance institutions in Southeast Asia?', 'sql_context': "CREATE TABLE socially_responsible_lending(id INT, loan_number INT, institution_region VARCHAR(50), amount INT); INSERT INTO socially_responsible_lending VALUES (1, 701, 'Southeast Asia', 5000); INSERT INTO socially_responsible_lending VALUES (2, 702, 'South Asia', 7000); INSERT INTO socially_responsible_lending VALUES (3, 703, 'East Asia', 9000); INSERT INTO socially_responsible_lending VALUES (4, 704, 'Southeast Asia', 6000);", 'sql': "SELECT AVG(amount) FROM socially_responsible_lending WHERE institution_region = 'Southeast Asia' AND type = 'microfinance';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the average loan amount for microfinance institutions in Southeast Asia, we need to filter the records based on the institution_region and then calculate the average of the amounts. Here is the SQL query that accomplishes this task:',
    sql="SELECT AVG(amount) AS avg_loan_amount FROM socially_responsible_lending WHERE institution_region = 'Southeast Asia';"
), 0), (Example({'sql_prompt': 'What is the average salary of employees who identify as Latinx in the Engineering department?', 'sql_context': "CREATE TABLE Employees (EmployeeID int, Name varchar(50), Gender varchar(10), Department varchar(50), Salary decimal(10,2), Ethnicity varchar(50)); INSERT INTO Employees (EmployeeID, Name, Gender, Department, Salary, Ethnicity) VALUES (1, 'Juan Garcia', 'Male', 'Engineering', 85000.00, 'Latinx'); INSERT INTO Employees (EmployeeID, Name, Gender, Department, Salary, Ethnicity) VALUES (2, 'Maria Rodriguez', 'Female', 'Engineering', 90000.00, 'Latinx');", 'sql': "SELECT AVG(Salary) FROM Employees WHERE Department = 'Engineering' AND Ethnicity = 'Latinx';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the average salary of employees who identify as Latinx in the Engineering department, we need to filter the Employees table based on two conditions: Ethnicity should be "Latinx" and Department should be "Engineering". Then, we can calculate the average salary for these filtered records.\n\nHere\'s the SQL query that accomplishes this task:\n\n```sql\nSELECT AVG(Salary) AS avg_salary\nFROM Employees\nWHERE Ethnicity = \'Latinx\' AND Department = \'Engineering\';\n```',
    sql="SELECT AVG(Salary) AS avg_salary \nFROM Employees \nWHERE Ethnicity = 'Latinx' AND Department = 'Engineering';"
), 1), (Example({'sql_prompt': 'What is the name and type of the vessel with the highest average speed?', 'sql_context': "CREATE TABLE Vessels (ID VARCHAR(20), Name VARCHAR(20), Type VARCHAR(20), AverageSpeed FLOAT); INSERT INTO Vessels VALUES ('V012', 'Vessel L', 'Passenger', 35.0), ('V013', 'Vessel M', 'Cargo', 19.5), ('V014', 'Vessel N', 'Passenger', 32.0);", 'sql': 'SELECT Name, Type FROM Vessels WHERE AverageSpeed = (SELECT MAX(AverageSpeed) FROM Vessels);'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the name and type of the vessel with the highest average speed, we need to perform a query that selects the maximum average speed from the Vessels table and then retrieves the corresponding vessel details (name and type). Here is how you can write this SQL statement:',
    sql='SELECT Name, Type FROM Vessels WHERE AverageSpeed = (SELECT MAX(AverageSpeed) FROM Vessels);'
), 1), (Example({'sql_prompt': "List all the distinct producers of Gadolinium from the 'production' table, ordered alphabetically.", 'sql_context': 'CREATE TABLE production (element VARCHAR(10), year INT, month INT, producer VARCHAR(20), quantity INT);', 'sql': "SELECT DISTINCT producer FROM production WHERE element = 'Gadolinium' ORDER BY producer ASC;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To list all distinct producers of Gadolinium from the \'production\' table and order them alphabetically, we need to select the unique values of the `producer` column where the element is "Gadolinium". We can achieve this using a simple SELECT statement with DISTINCT keyword.',
    sql="SELECT DISTINCT producer FROM production WHERE element = 'Gadolinium' ORDER BY producer ASC;"
), 1)]