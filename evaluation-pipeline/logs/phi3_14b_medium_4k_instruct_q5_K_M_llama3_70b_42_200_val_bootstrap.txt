[(Example({'sql_prompt': 'What is the average ticket price for art exhibits in each city?', 'sql_context': "CREATE TABLE Exhibits (exhibit_id INT, city VARCHAR(50), price DECIMAL(5,2)); INSERT INTO Exhibits (exhibit_id, city, price) VALUES (1, 'New York', 25.99), (2, 'Los Angeles', 22.49), (3, 'Chicago', 30.00);", 'sql': 'SELECT city, AVG(price) as avg_price FROM Exhibits GROUP BY city;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the average ticket price for art exhibits in each city, we need to group the data by city and calculate the mean of the prices within each group. The SQL query will use the AVG() function on the 'price' column while grouping the results by the 'city' column.",
    sql='SELECT city, AVG(price) as average_ticket_price FROM Exhibits GROUP BY city;'
), 1), (Example({'sql_prompt': 'What is the average number of heritage sites per region?', 'sql_context': "CREATE TABLE HeritageSites (id INT, region VARCHAR(255), site_name VARCHAR(255)); INSERT INTO HeritageSites (id, region, site_name) VALUES (1, 'Africa', 'Giza Pyramids'), (2, 'Asia', 'Great Wall'), (3, 'Europe', 'Colosseum'), (4, 'Africa', 'Victoria Falls'), (5, 'Asia', 'Angkor Wat');", 'sql': 'SELECT region, AVG(ROW_NUMBER() OVER(PARTITION BY region) ) as avg_heritage_sites FROM HeritageSites;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the average number of heritage sites per region, we first need to count the total number of heritage sites for each region and then calculate the average. Here is how you can do it using SQL:\n\n1. Count the number of heritage sites for each region.\n2. Calculate the average by dividing the sum of all site counts by the number of unique regions.\n\nHere's the SQL query to achieve this:\n\n```sql\nSELECT AVG(site_count) AS avg_sites_per_region FROM (\n    SELECT region, COUNT(*) as site_count \n    FROM HeritageSites \n    GROUP BY region\n) AS regional_site_counts",
    sql='SELECT AVG(site_count) AS avg_sites_per_region \nFROM (SELECT region, COUNT(*) AS site_count \n      FROM HeritageSites \n      GROUP BY region) AS regional_site_counts;'
), 1), (Example({'sql_prompt': 'Count the number of events per game', 'sql_context': 'CREATE TABLE esports_events (event_id INT PRIMARY KEY, name VARCHAR(50), date DATE, game VARCHAR(50), location VARCHAR(50));', 'sql': 'SELECT game, COUNT(*) as event_count FROM esports_events GROUP BY game;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To count the number of events per game from the `esports_events` table, we need to group the data by the `game` column and then count the occurrences for each group. This will give us the total number of events that have taken place for each specific game.\n\nHere's the SQL query to achieve this:\n\n```sql\nSELECT game, COUNT(*) AS event_count\nFROM esports_events\nGROUP BY game;\n```\n\nThis query selects two columns: `game` and a count of rows as `event_count`. The `COUNT(*)` function counts all rows for each group defined by the `GROUP BY game` clause. As a result, we get the number of",
    sql='SELECT game, COUNT(*) AS event_count FROM esports_events GROUP BY game;'
), 1), (Example({'sql_prompt': 'List all sustainable tourism initiatives in Canada and their respective number of participants.', 'sql_context': "CREATE TABLE initiatives (initiative_id INT, name TEXT, country TEXT); CREATE TABLE participants (initiative_id INT, participant_id INT); INSERT INTO initiatives VALUES (1, 'Green Trails', 'Canada'), (2, 'Eco-friendly Cruises', 'Canada'); INSERT INTO participants VALUES (1, 1), (1, 2), (2, 3), (2, 4), (2, 5);", 'sql': "SELECT initiatives.name, COUNT(participants.participant_id) FROM initiatives INNER JOIN participants ON initiatives.initiative_id = participants.initiative_id WHERE country = 'Canada' GROUP BY initiatives.name;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To list all sustainable tourism initiatives in Canada and their respective number of participants, we need to join the `initiatives` table with the `participants` table on the `initiative_id`, filter for those initiatives that are located in Canada, and then count the number of participants per initiative.\n\nHere's how you can write the SQL query:\n\n```sql\nSELECT i.name AS InitiativeName, COUNT(p.participant_id) AS NumberOfParticipants\nFROM initiatives i\nJOIN participants p ON i.initiative_id = p.initiative_id\nWHERE i.country = 'Canada'",
    sql="```sql\nSELECT \n    i.name AS InitiativeName, \n    COUNT(p.participant_id) AS NumberOfParticipants \nFROM \n    initiatives i \nJOIN \n    participants p ON i.initiative_id = p.initiative_id \nWHERE \n    i.country = 'Canada'\nGROUP BY \n    i.name;\n```"
), 0), (Example({'sql_prompt': "Update the name of the research vessel 'RV Ocean Explorer' to 'RV Ocean Guardian'.", 'sql_context': "CREATE TABLE research_vessels (id INT, name VARCHAR(50), type VARCHAR(20), year INT); INSERT INTO research_vessels (id, name, type, year) VALUES (1, 'RV Ocean Explorer', 'Oceanographic', 2015), (2, 'RV Deep Diver', 'Underwater', 2018), (3, 'RV Sea Rover', 'Hydrographic', 2020);", 'sql': "UPDATE research_vessels SET name = 'RV Ocean Guardian' WHERE name = 'RV Ocean Explorer';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To update the name of the research vessel from 'RV Ocean Explorer' to 'RV Ocean Guardian', we need to execute an UPDATE statement on the `research_vessels` table. We will use a WHERE clause to specify that only the row with the current name should be updated.\n\nHere is the SQL command:\n\n```sql\nUPDATE research_vessels\nSET name = 'RV Ocean Guardian'\nWHERE name = 'RV Ocean Explorer';\n```\n\nThis statement sets the `name` column to 'RV Ocean Guardian' for all rows where the current value of the `name` column is 'RV Ocean Explorer'.",
    sql="UPDATE research_vessels SET name = 'RV Ocean Guardian' WHERE name = 'RV Ocean Explorer';"
), 1), (Example({'sql_prompt': 'Which mining operations have a higher than average monthly CO2 emission?', 'sql_context': "CREATE TABLE co2_emissions (mine_id INT, emission_date DATE, co2_amount INT); INSERT INTO co2_emissions (mine_id, emission_date, co2_amount) VALUES (1, '2021-01-01', 30000), (1, '2021-02-01', 32000), (1, '2021-03-01', 35000), (2, '2021-01-01', 28000), (2, '2021-02-01', 30000), (2, '2021-03-01', 33000), (3, '2021-01-01', 25000), (3, '2021-02-01', 27000), (3, '2021-03-01', 29000); CREATE TABLE mine_info (mine_id INT, mine_name TEXT); INSERT INTO mine_info (mine_id, mine_name) VALUES (1, 'Golden Mine'), (2, 'Silver Mine'), (3, 'Bronze Mine');", 'sql': 'SELECT mine_name, AVG(co2_amount) AS avg_monthly_emission FROM co2_emissions JOIN mine_info ON co2_emissions.mine_id = mine_info.mine_id GROUP BY mine_id HAVING AVG(co2_amount) > (SELECT AVG(co2_amount) FROM co2_emissions);'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the mining operations with higher than average monthly CO2 emissions, we need to follow these steps:\n\n1. Calculate the total CO2 emissions for each mine over a given period (e.g., 3 months).\n2. Compute the average monthly CO2 emission across all mines during that same period.\n3. Identify the mining operations with higher than average monthly CO2 emissions by comparing their individual averages to the overall average calculated in step 2.\n4. Return a list of mine names and IDs for those operations exceeding the average.\n\nHere's an SQL query that accomplishes this:\n\n```sql\nWITH MonthlyEmissions",
    sql="SELECT mi.mine_id, mi.mine_name, AVG(ce.co2_amount) AS avg_monthly_emission\nFROM co2_emissions ce\nJOIN mine_info mi ON ce.mine_id = mi.mine_id\nWHERE emission_date BETWEEN '2021-01-01' AND '2021-03-31' -- Assuming we are considering the first quarter of 2021\nGROUP BY mi.mine_id, mi.mine_name\nHAVING AVG(ce.co2_amount) > (SELECT AVG(co2_amount) FROM co2_"
), 0), (Example({'sql_prompt': "What's the name and market capitalization of digital assets in the 'Cosmos' network with a market capitalization above 300?", 'sql_context': "CREATE TABLE cosmos_digital_assets (id INT, name VARCHAR(255), network VARCHAR(255), market_cap DECIMAL(10, 2)); INSERT INTO cosmos_digital_assets (id, name, network, market_cap) VALUES (1, 'Asset1', 'cosmos', 400), (2, 'Asset2', 'cosmos', 350);", 'sql': "SELECT name, market_cap FROM cosmos_digital_assets WHERE network = 'cosmos' AND market_cap > 300;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the names and market capitalizations of digital assets on the 'Cosmos' network with a market cap above 300, we need to select these two columns from the `cosmos_digital_assets` table where the `network` column is equal to 'cosmos' and the `market_cap` column value is greater than 300.\n\nThe SQL query for this would be:\n\n```sql\nSELECT name, market_cap FROM cosmos_digital_assets WHERE network = 'Cosmos' AND market_cap > 300;\n```",
    sql="SELECT name, market_cap FROM cosmos_digital_assets WHERE network = 'cosmos' AND market_cap > 300;"
), 1), (Example({'sql_prompt': 'What is the combined energy output of all hydro power projects in South America?', 'sql_context': "CREATE TABLE project_south_america (project_name TEXT, type TEXT, capacity NUMERIC); INSERT INTO project_south_america (project_name, type, capacity) VALUES ('Hydro Dam A', 'Hydro', 15000), ('Hydro Dam B', 'Hydro', 16000), ('Solar Park C', 'Solar', 5000), ('Wind Farm D', 'Wind', 8000);", 'sql': "SELECT SUM(capacity) FROM project_south_america WHERE type = 'Hydro';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the combined energy output of all hydro power projects in South America, we need to sum up the capacity values for only those entries where the type is "Hydro". Here\'s how you can write the SQL query:',
    sql="SELECT SUM(capacity) FROM project_south_america WHERE type = 'Hydro';"
), 1), (Example({'sql_prompt': 'Add a new station to the stations table for the city of Oslo, Norway.', 'sql_context': 'stations (id, name, city, country, latitude, longitude)', 'sql': "INSERT INTO stations (name, city, country) VALUES ('Oslo Central', 'Oslo', 'Norway');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To add a new station to the `stations` table for the city of Oslo, Norway, we need to insert a new row into the table with appropriate values for each column. Assuming that you have been assigned an ID (let's say 101), and using the latitude and longitude coordinates for Oslo (59.913902, 10.752245), we can construct the following SQL statement:\n\n```sql\nINSERT INTO stations (id, name, city, country, latitude, longitude) VALUES (101, 'Oslo Central Station', 'Oslo', 'Norway', 59.913902,",
    sql="INSERT INTO stations (id, name, city, country, latitude, longitude) VALUES (101, 'Oslo Central Station', 'Oslo', 'Norway', 59.913902, 10.752245);"
), 1), (Example({'sql_prompt': 'What was the total revenue from cannabis-infused edibles sold by each dispensary in the city of San Francisco in the month of December 2021?', 'sql_context': "CREATE TABLE Dispensaries (id INT, name VARCHAR(255), city VARCHAR(255), state VARCHAR(255));CREATE TABLE Inventory (id INT, dispensary_id INT, revenue DECIMAL(10, 2), product_type VARCHAR(255), month INT, year INT);INSERT INTO Dispensaries (id, name, city, state) VALUES (1, 'Golden Gate Greens', 'San Francisco', 'CA');INSERT INTO Inventory (id, dispensary_id, revenue, product_type, month, year) VALUES (1, 1, 2000, 'edibles', 12, 2021);", 'sql': "SELECT d.name, SUM(i.revenue) as total_revenue FROM Dispensaries d JOIN Inventory i ON d.id = i.dispensary_id WHERE d.city = 'San Francisco' AND i.product_type = 'edibles' AND i.month = 12 AND i.year = 2021 GROUP BY d.name;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the total revenue from cannabis-infused edibles sold by each dispensary in San Francisco for December 2021, we need to join the Dispensaries and Inventory tables based on their common column (dispensary_id), filter the results for the city of San Francisco, product type 'edibles', month as 12, and year as 2021. Then, group by dispensary name and sum up the revenue.",
    sql='SELECT d.name AS dispensary_name, SUM(i.revenue) AS total_revenue FROM Dispensaries d JOIN Inventory i ON d.id = i.disp'
), 0), (Example({'sql_prompt': 'Who is responsible for AI oversight in Canada?', 'sql_context': "CREATE TABLE ai_oversight (id INT, organization VARCHAR(50), region VARCHAR(50)); INSERT INTO ai_oversight (id, organization, region) VALUES (1, 'AI Ethics Board', 'Canada'), (2, 'Data Privacy Commissioner', 'Canada'), (3, 'Innovation Science and Economic Development Canada', 'Canada');", 'sql': "SELECT organization FROM ai_oversight WHERE region = 'Canada';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find out who is responsible for AI oversight in Canada from the given SQL context, we need to select the organization(s) that are associated with the region "Canada" within the ai_oversight table.\n\nThe SQL query would be:\n\n```sql\nSELECT organization FROM ai_oversight WHERE region = \'Canada\';\n```',
    sql="SELECT organization FROM ai_oversight WHERE region = 'Canada';"
), 0), (Example({'sql_prompt': 'How many properties have more than 3 co-owners in the co-ownership program?', 'sql_context': 'CREATE TABLE extended_co_ownership (property_id INT, co_owner_count INT); INSERT INTO extended_co_ownership (property_id, co_owner_count) VALUES (1001, 2), (1002, 3), (1003, 1), (1004, 5), (1005, 4), (1006, 2);', 'sql': 'SELECT COUNT(*) FROM extended_co_ownership WHERE co_owner_count > 3;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find out how many properties have more than 3 co-owners in the co-ownership program, we need to count the number of rows where `co_owner_count` is greater than 3. We can achieve this using a SQL query with a WHERE clause that filters for these conditions and then counting the resulting rows.\n\nHere's the SQL query:\n\n```sql\nSELECT COUNT(*) AS properties_with_more_than_three_owners\nFROM extended_co_ownership\nWHERE co_owner_count > 3;\n```",
    sql='SELECT COUNT(*) AS properties_with_more_than_three_owners FROM extended_co_ownership WHERE co_owner_count > 3;'
), 0), (Example({'sql_prompt': 'How many animals have been successfully relocated to their natural habitats in South America?', 'sql_context': "CREATE TABLE Relocation (AnimalID INT, AnimalName VARCHAR(50), Success INT, Location VARCHAR(50)); INSERT INTO Relocation (AnimalID, AnimalName, Success, Location) VALUES (1, 'Jaguar', 120, 'South America'); INSERT INTO Relocation (AnimalID, AnimalName, Success, Location) VALUES (2, 'Anaconda', 150, 'South America');", 'sql': "SELECT SUM(Success) FROM Relocation WHERE Location = 'South America';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find out how many animals have been successfully relocated to their natural habitats in South America, we need to count the number of successful relocations for each animal where the location is "South America". We can achieve this using a SQL query that filters based on the \'Location\' column and counts rows with \'Success\' greater than 0.',
    sql="SELECT COUNT(*) FROM Relocation WHERE Location = 'South America' AND Success > 0;"
), 1), (Example({'sql_prompt': 'What is the average income of residents in each city in the state of California, grouped by city and ordered by average income in descending order?', 'sql_context': "CREATE TABLE cities (id INT PRIMARY KEY, name TEXT, state TEXT); INSERT INTO cities (id, name, state) VALUES (1, 'Los Angeles', 'California'), (2, 'San Diego', 'California'), (3, 'San Jose', 'California'); CREATE TABLE incomes (id INT PRIMARY KEY, city_id INT, income INT); INSERT INTO incomes (id, city_id, income) VALUES (1, 1, 50000), (2, 1, 70000), (3, 2, 45000), (4, 2, 60000), (5, 3, 48000), (6, 3, 52000);", 'sql': "SELECT c.name, AVG(i.income) FROM cities c JOIN incomes i ON c.id = i.city_id WHERE c.state = 'California' GROUP BY c.name ORDER BY AVG(i.income) DESC;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the average income of residents in each city in the state of California, grouped by city and ordered by average income in descending order, we can use a SQL query that joins the `cities` table with the `incomes` table on their respective IDs. Then, we'll filter for cities within the state of California, calculate the average income per city, group the results by city name, and finally sort them in descending order based on the calculated average income.\n\nHere is the SQL query:\n\n```sql\nSELECT c.name AS City, AVG(i.income) AS Average_Income\nFROM cities c\nJOIN incomes i ON c.id = i.city",
    sql="SELECT c.name AS City, AVG(i.income) AS Average_Income \nFROM cities c \nJOIN incomes i ON c.id = i.city_id \nWHERE c.state = 'California' \nGROUP BY c.name \nORDER BY Average_Income DESC;"
), 1), (Example({'sql_prompt': 'Delete all paintings created by the artist with ArtistID 2.', 'sql_context': "CREATE TABLE Artists (ArtistID INT, Name VARCHAR(50), Nationality VARCHAR(50)); INSERT INTO Artists (ArtistID, Name, Nationality) VALUES (1, 'Vincent van Gogh', 'Dutch'); INSERT INTO Artists (ArtistID, Name, Nationality) VALUES (2, 'Pablo Picasso', 'Spanish'); CREATE TABLE Paintings (PaintingID INT, Title VARCHAR(50), ArtistID INT, YearCreated INT); INSERT INTO Paintings (PaintingID, Title, ArtistID, YearCreated) VALUES (1, 'The Starry Night', 1, 1889); INSERT INTO Paintings (PaintingID, Title, ArtistID, YearCreated) VALUES (2, 'Guernica', 2, 1937);", 'sql': 'DELETE FROM Paintings WHERE ArtistID = 2;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To delete all paintings created by the artist with ArtistID 2, we need to perform a DELETE operation on the Paintings table. The condition for deletion is that the ArtistID must match the given value (in this case, 2).\n\nHere's the SQL statement:\n\n```sql\nDELETE FROM Paintings WHERE ArtistID = 2;\n```\n\nThis query will remove all rows from the Paintings table where the ArtistID is equal to 2. As a result, paintings created by Pablo Picasso (ArtistID 2) will be deleted from the database.",
    sql='DELETE FROM Paintings WHERE ArtistID = 2;'
), 1), (Example({'sql_prompt': 'What is the minimum conservation status score of marine species in the Atlantic Ocean?', 'sql_context': "CREATE TABLE conservation_status_scores (id INT, species_id INT, score FLOAT, location TEXT, PRIMARY KEY (id, species_id), FOREIGN KEY (species_id) REFERENCES marine_species(id)); INSERT INTO conservation_status_scores (id, species_id, score, location) VALUES (1, 1, 60.0, 'Atlantic Ocean'), (2, 2, 85.0, 'Pacific Ocean'), (3, 3, 35.0, 'Indian Ocean');", 'sql': "SELECT MIN(score) FROM conservation_status_scores WHERE location = 'Atlantic Ocean';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the minimum conservation status score of marine species in the Atlantic Ocean, we need to select the lowest score from the `conservation_status_scores` table where the location is specified as "Atlantic Ocean". The SQL query for this would be:\n\n```sql\nSELECT MIN(score) AS min_conservation_status_score FROM conservation_status_scores WHERE location = \'Atlantic Ocean\';\n```',
    sql="SELECT MIN(score) AS min_conservation_status_score FROM conservation_status_scores WHERE location = 'Atlantic Ocean';"
), 1), (Example({'sql_prompt': 'What is the maximum number of meals served daily in any refugee camp?', 'sql_context': "CREATE TABLE meals_served (id INT PRIMARY KEY, camp VARCHAR(50), month VARCHAR(20), day INT, number INT); INSERT INTO meals_served (id, camp, month, day, number) VALUES (1, 'Camp A', 'April', 1, 1500), (2, 'Camp B', 'April', 1, 1200), (3, 'Camp A', 'April', 2, 1600), (4, 'Camp B', 'April', 2, 1400), (5, 'Camp C', 'April', 3, 1800);", 'sql': 'SELECT MAX(number) FROM meals_served;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the maximum number of meals served daily in any refugee camp, we need to group the data by both camp and day. Then, for each group, we will select the maximum value of the 'number' column which represents the number of meals served. Finally, we can sort these values in descending order and limit our result set to 1 to get the highest daily serving count across all camps.\n\nHere is the SQL query that accomplishes this:\n\n```sql\nSELECT camp, day, MAX(number) AS max_meals_served\nFROM meals_served\nGROUP BY camp, day\nORDER BY max_meals_served DESC\nLIMIT 1;",
    sql='SELECT camp, day, MAX(number) AS max_meals_served FROM meals_served GROUP BY camp, day ORDER BY max_meals_served DESC LIMIT 1;'
), 0), (Example({'sql_prompt': 'What are the dissolved oxygen levels for fish farms in the Atlantic ocean?', 'sql_context': "CREATE TABLE atlantic_fish_farms (id INT, name VARCHAR(50), country VARCHAR(50), dissolved_oxygen FLOAT); INSERT INTO atlantic_fish_farms (id, name, country, dissolved_oxygen) VALUES (1, 'Farm G', 'USA', 6.8), (2, 'Farm H', 'Canada', 7.2), (3, 'Farm I', 'USA', 7.0), (4, 'Farm J', 'Brazil', 6.5);", 'sql': "SELECT country, dissolved_oxygen FROM atlantic_fish_farms WHERE country IN ('USA', 'Canada', 'Brazil');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the dissolved oxygen levels for fish farms in the Atlantic Ocean, we need to select the relevant data from the atlantic_fish_farms table based on a condition that specifies the region (Atlantic Ocean) and possibly other criteria if needed.\n\nHowever, since there is no direct column indicating the ocean or region of each fish farm, we will assume all entries in this table are related to the Atlantic Ocean as per the context provided. If additional filtering based on country was required, it could be done by adding a WHERE clause with appropriate conditions for countries located in the Atlantic Ocean.\n\nHere's an SQL query that retrieves the dissolved oxygen levels for fish farms in the Atlantic",
    sql='SELECT name, dissolved_oxygen FROM atlantic_fish_farms;'
), 0), (Example({'sql_prompt': "Add the name 'Hubble Space Telescope' to the satellites table", 'sql_context': "CREATE TABLE satellites (id INT, name VARCHAR(255), international_designator VARCHAR(20)); INSERT INTO satellites (id, name, international_designator) VALUES (1, 'Spitzer Space Telescope', '979F');", 'sql': "INSERT INTO satellites (name) VALUES ('Hubble Space Telescope');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To add the name 'Hubble Space Telescope' to the `satellites` table, we need to insert a new row with an appropriate ID and international designator. Assuming that the next available ID is 2 and using a hypothetical international designator for illustration purposes (e.g., '1986-047A'), the SQL statement would be:\n\n```sql\nINSERT INTO satellites (id, name, international_designator) VALUES (2, 'Hubble Space Telescope', '1986-047A');\n```",
    sql="INSERT INTO satellites (id, name, international_designator) VALUES (2, 'Hubble Space Telescope', '1986-047A');"
), 0), (Example({'sql_prompt': 'What is the total number of healthcare providers by type?', 'sql_context': "CREATE TABLE providers (provider_id INT, provider_type VARCHAR(20)); INSERT INTO providers (provider_id, provider_type) VALUES (1, 'Physician'), (2, 'Nurse Practitioner'), (3, 'Physician Assistant');", 'sql': 'SELECT provider_type, COUNT(*) as total_providers FROM providers GROUP BY provider_type;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the total number of healthcare providers by type, we need to count the occurrences of each provider_type within the providers table. This can be achieved using a GROUP BY clause on the provider_type column and applying the COUNT() aggregate function to count the rows for each group.\n\nHere's the SQL query that accomplishes this:\n\n```sql\nSELECT provider_type, COUNT(*) AS total_providers\nFROM providers\nGROUP BY provider_type;\n```",
    sql='SELECT provider_type, COUNT(*) AS total_providers FROM providers GROUP BY provider_type;'
), 1), (Example({'sql_prompt': 'What is the total installed capacity of hydroelectric power plants in Brazil and Canada?', 'sql_context': "CREATE TABLE hydroelectric_power (country TEXT, capacity INTEGER); INSERT INTO hydroelectric_power (country, capacity) VALUES ('Brazil', 104000), ('Canada', 78000), ('China', 350000), ('United States', 100000), ('Russia', 45000);", 'sql': "(SELECT capacity FROM hydroelectric_power WHERE country = 'Brazil') UNION (SELECT capacity FROM hydroelectric_power WHERE country = 'Canada');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the total installed capacity of hydroelectric power plants in Brazil and Canada, we need to sum up the capacities for these two countries. We can do this using a SQL query that filters the data based on country names and then aggregates the results.\n\nHere's the SQL query:\n\n```sql\nSELECT SUM(capacity) AS total_installed_capacity\nFROM hydroelectric_power\nWHERE country IN ('Brazil', 'Canada');\n```",
    sql="SELECT SUM(capacity) AS total_installed_capacity FROM hydroelectric_power WHERE country IN ('Brazil', 'Canada');"
), 1), (Example({'sql_prompt': 'Show the total quantity of each garment in the inventory table', 'sql_context': 'CREATE TABLE inventory (id INT, garment_id INT, quantity INT);', 'sql': 'SELECT garment_id, SUM(quantity) as total_quantity FROM inventory GROUP BY garment_id;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To show the total quantity of each garment in the inventory table, we need to group the data by `garment_id` and sum up the quantities for each unique garment. This will give us a clear picture of how many items are available for each type of garment in our inventory.\n\nHere's the SQL query that accomplishes this:\n\n```sql\nSELECT garment_id, SUM(quantity) AS total_quantity\nFROM inventory\nGROUP BY garment_id;\n```\n\nThis query selects two columns: `garment_id` and the sum of quantities for each garment (aliased as `total_quantity`). The `SUM()` function calculates the total",
    sql='SELECT garment_id, SUM(quantity) AS total_quantity FROM inventory GROUP BY garment_id;'
), 1), (Example({'sql_prompt': 'Which countries received shipments of Chemical E in the last 3 months?', 'sql_context': "CREATE TABLE shipments (id INT, product VARCHAR(255), shipped_to VARCHAR(255), shipped_date DATE); INSERT INTO shipments (id, product, shipped_to, shipped_date) VALUES (1, 'Chemical A', 'Canada', '2022-05-21'), (2, 'Chemical B', 'USA', '2022-04-15'), (3, 'Chemical A', 'Canada', '2022-07-05'), (4, 'Chemical E', 'Mexico', '2022-06-10'), (5, 'Chemical E', 'Brazil', '2022-06-25');", 'sql': "SELECT DISTINCT shipped_to FROM shipments WHERE product = 'Chemical E' AND shipped_date >= '2022-04-01'"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find out which countries received shipments of Chemical E in the last 3 months, we need to filter the data based on the product name and shipped_date. We can use the CURDATE() function to get today's date and subtract an interval of 3 months from it. Then, we will group by the country (shipped_to) to see which countries received shipments.\n\nHere is the SQL query:\n\n```sql\nSELECT shipped_to AS Country, COUNT(*) AS ShipmentCount\nFROM shipments\nWHERE product = 'Chemical E' AND shipped_date >= CURDATE() - INTERVAL 3 MONTH\nGROUP BY shipped",
    sql="SELECT shipped_to AS Country, COUNT(*) AS ShipmentCount FROM shipments WHERE product = 'Chemical E' AND shipped_date >= CURDATE() - INTERVAL 3 MONTH GROUP BY shipped_to;"
), 0), (Example({'sql_prompt': 'Update the age column for a player in the players table', 'sql_context': 'CREATE TABLE players (id INT PRIMARY KEY, name VARCHAR(50), age INT, sport VARCHAR(50));', 'sql': "UPDATE players SET age = 25 WHERE name = 'John Doe';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To update the age of a specific player in the `players` table, you need to know the player's ID and their new age. Once you have this information, you can use an UPDATE statement to modify the age for that particular player.\n\nHere is an example SQL query to update the age of a player with ID 10:\n\n```sql\nUPDATE players SET age = 25 WHERE id = 10;\n```\n\nIn this example, we are updating the `age` column to 25 for the player whose `id` is 10.",
    sql='UPDATE players SET age = new_age WHERE id = specific_player_id;'
), 0), (Example({'sql_prompt': 'Show the number of humanitarian assistance missions conducted by the European Union in 2021', 'sql_context': "CREATE TABLE humanitarian_assistance_missions (mission_id INT, organization VARCHAR(255), mission_name VARCHAR(255), start_date DATE, end_date DATE); INSERT INTO humanitarian_assistance_missions (mission_id, organization, mission_name, start_date, end_date) VALUES (1, 'European Union', 'Mission A', '2021-01-01', '2021-12-31');", 'sql': "SELECT COUNT(*) FROM humanitarian_assistance_missions WHERE organization = 'European Union' AND YEAR(start_date) = 2021;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To show the number of humanitarian assistance missions conducted by the European Union in 2021, we need to count the rows where the organization is "European Union" and the start_date falls within the year 2021.',
    sql="SELECT COUNT(*) FROM humanitarian_assistance_missions WHERE organization = 'European Union' AND YEAR(start_date) = 2021;"
), 0), (Example({'sql_prompt': 'Show the number of green bond issuances for each country and the total value of green bonds issued for each country.', 'sql_context': "CREATE TABLE green_bonds (id INT, issuer_country VARCHAR(255), issue_year INT, value FLOAT); INSERT INTO green_bonds (id, issuer_country, issue_year, value) VALUES (1, 'USA', 2017, 3000000), (2, 'China', 2018, 4000000), (3, 'Germany', 2017, 2000000), (4, 'USA', 2018, 5000000), (5, 'India', 2019, 1000000), (6, 'Brazil', 2019, 2000000), (7, 'Canada', 2018, 1500000);", 'sql': 'SELECT issuer_country, COUNT(*) as num_issuances, SUM(value) as total_value FROM green_bonds GROUP BY issuer_country;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To show the number of green bond issuances for each country and the total value of green bonds issued for each country, we need to group the data by issuer_country. Then, count the number of issuances (rows) per country and sum up the values of the green bonds for each country.\n\nThe SQL query would be:\n\n```sql\nSELECT \n    issuer_country,\n    COUNT(*) AS num_issuances,\n    SUM(value) AS total_value\nFROM \n    green_bonds\nGROUP BY \n    issuer_country;\n```',
    sql='SELECT issuer_country, COUNT(*) AS num_issuances, SUM(value) AS total_value FROM green_bonds GROUP BY issuer_country;'
), 1), (Example({'sql_prompt': 'What is the average disability accommodation cost per program by state, ordered from highest to lowest?', 'sql_context': "CREATE TABLE Disability_Accommodations (State VARCHAR(2), Program VARCHAR(50), Cost DECIMAL(5,2)); INSERT INTO Disability_Accommodations VALUES ('CA', 'ASL Interpretation', 1500.00), ('CA', 'Wheelchair Ramp', 3500.00), ('NY', 'ASL Interpretation', 1200.00), ('NY', 'Wheelchair Ramp', 3200.00);", 'sql': 'SELECT AVG(Cost) as Avg_Cost, State FROM Disability_Accommodations GROUP BY State ORDER BY Avg_Cost DESC;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the average disability accommodation cost per program by state, we need to calculate the total cost for each program within a state and then divide it by the number of programs offered in that state. After calculating these averages, we will sort them from highest to lowest.\n\nHere's the SQL query:\n\n```sql\nSELECT \n    State,\n    AVG(Cost) AS Avg_Accommodation_Cost\nFROM \n    Disability_Accommodations\nGROUP BY \n    State\nORDER BY \n    Avg_Accommodation_Cost DESC;\n```\n\nThis query groups the data by state, calculates the average cost of accommodations for",
    sql='SELECT State, AVG(Cost) AS Avg_Accommodation_Cost FROM Disability_Accommodations GROUP BY State ORDER BY Avg_Accommodation_Cost DESC;'
), 1), (Example({'sql_prompt': 'What is the maximum depth ever recorded for a marine species habitat?', 'sql_context': "CREATE TABLE species (id INT, name VARCHAR(255), max_habitat_depth FLOAT); INSERT INTO species (id, name, max_habitat_depth) VALUES (1, 'Atlantic Salmon', 100.0), (2, 'Blue Whale', 500.0);", 'sql': 'SELECT MAX(max_habitat_depth) FROM species;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the maximum depth ever recorded for a marine species habitat, we need to select the highest value from the `max_habitat_depth` column of the `species` table. This will give us the deepest known habitat among all listed marine species.',
    sql='SELECT MAX(max_habitat_depth) FROM species;'
), 1), (Example({'sql_prompt': "What is the maximum fare for 'Train' mode of transport in 'June'?", 'sql_context': "CREATE TABLE Fares(fare INT, journey_date DATE, mode_of_transport VARCHAR(20)); INSERT INTO Fares(fare, journey_date, mode_of_transport) VALUES (7, '2022-06-01', 'Train'), (8, '2022-06-02', 'Train'), (9, '2022-07-01', 'Train');", 'sql': "SELECT MAX(fare) FROM Fares WHERE mode_of_transport = 'Train' AND EXTRACT(MONTH FROM journey_date) = 6;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the maximum fare for 'Train' mode of transport in 'June', we need to filter the data based on the `mode_of_transport` and extract only the records from June. Then, we can use the MAX() function to get the highest fare value among those filtered records.\n\nHere is the SQL query:\n\n```sql\nSELECT MAX(fare) AS max_train_fare_in_june\nFROM Fares\nWHERE mode_of_transport = 'Train' AND MONTH(journey_date) = 6;\n```",
    sql="SELECT MAX(fare) AS max_train_fare_in_june FROM Fares WHERE mode_of_transport = 'Train' AND MONTH(journey_date) = 6;"
), 1), (Example({'sql_prompt': 'What was the total amount of ESG investments made by Green Ventures in Q1 2021?', 'sql_context': "CREATE TABLE Green_Ventures (id INT, quarter VARCHAR(10), amount FLOAT); INSERT INTO Green_Ventures (id, quarter, amount) VALUES (1, 'Q1 2021', 500000), (2, 'Q2 2021', 700000);", 'sql': "SELECT SUM(amount) FROM Green_Ventures WHERE quarter = 'Q1 2021' AND context ILIKE '%ESG%';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the total amount of ESG investments made by Green Ventures in Q1 2021, we need to filter the data based on the quarter and then sum up the amounts. The SQL query for this would be as follows:',
    sql="SELECT SUM(amount) FROM Green_Ventures WHERE quarter = 'Q1 2021';"
), 1), (Example({'sql_prompt': 'Who is the top points scorer for the Lakers?', 'sql_context': "CREATE TABLE players (player_id INT, player_name VARCHAR(50), team_id INT); INSERT INTO players (player_id, player_name, team_id) VALUES (1, 'James', 5), (2, 'Davis', 5), (3, 'Green', 5); CREATE TABLE games (game_id INT, player_id INT, team_id INT, points INT); INSERT INTO games (game_id, player_id, team_id, points) VALUES (1, 1, 5, 30), (2, 2, 5, 40), (3, 1, 5, 50), (4, 3, 5, 20), (5, 1, 5, 60);", 'sql': 'SELECT player_id, player_name, SUM(points) as total_points FROM games JOIN players ON games.player_id = players.player_id WHERE team_id = 5 GROUP BY player_id ORDER BY total_points DESC LIMIT 1;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the top points scorer for the Lakers, we need to join the `players` and `games` tables on the `player_id` column. Then, filter the results based on the team ID of the Lakers (which is 5). After that, group by player name and sum up their total points scored in all games. Finally, order the result in descending order to get the top scorer at the top.\n\nHere's the SQL query:\n\n```sql\nSELECT p.player_name, SUM(g.points) AS total_points\nFROM players p\nJOIN games g ON p.player_id = g.player_id AND p.team_",
    sql='SELECT p.player_name, SUM(g.points) AS total_points \nFROM players p \nJOIN games g ON p.player_id = g.player_id \nWHERE p.team_id = 5 \nGROUP BY p.player_name \nORDER BY total_points DESC \nLIMIT 1;'
), 1), (Example({'sql_prompt': 'Identify the regions with sales of organic makeup products', 'sql_context': "CREATE TABLE sales (product_type VARCHAR(20), region VARCHAR(10), sales NUMERIC(10,2)); INSERT INTO sales (product_type, region, sales) VALUES ('foundation', 'North', 500), ('lipstick', 'East', 600), ('eyeshadow', 'West', 400), ('blush', 'South', 700), ('mascara', 'North', 800), ('foundation', 'West', 900); CREATE TABLE products (product_type VARCHAR(20), organic BOOLEAN); INSERT INTO products (product_type, organic) VALUES ('foundation', TRUE), ('lipstick', FALSE), ('eyeshadow', TRUE), ('blush', FALSE), ('mascara', TRUE);", 'sql': "SELECT DISTINCT region FROM sales INNER JOIN products ON sales.product_type = products.product_type WHERE products.organic = TRUE AND sales.product_type = 'makeup';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To identify the regions with sales of organic makeup products, we need to join the `sales` table and the `products` table on the `product_type` column. Then, filter for rows where `organic` is true (indicating that the product type is an organic makeup product). Finally, group by region and sum up sales in each region.',
    sql='SELECT s.region, SUM(s.sales) as total_sales FROM sales s JOIN products p ON s.product_type = p.product_type WHERE p.organic = TRUE GROUP BY s.region;'
), 1), (Example({'sql_prompt': 'How many space missions were successfully completed before 2010?', 'sql_context': "CREATE TABLE SpaceMissions (id INT, mission_name VARCHAR(255), start_date DATE, end_date DATE, status VARCHAR(50)); INSERT INTO SpaceMissions (id, mission_name, start_date, end_date, status) VALUES (1, 'Apollo 11', '1969-07-16', '1969-07-24', 'Success'), (2, 'Apollo 13', '1970-04-11', '1970-04-17', 'Failure');", 'sql': "SELECT COUNT(*) FROM SpaceMissions WHERE status = 'Success' AND start_date < '2010-01-01';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the number of space missions that were successfully completed before 2010, we need to filter the SpaceMissions table based on two conditions: the status should be "Success" and the end_date should be earlier than January 1st, 2010.\n\nHere\'s the SQL query for this requirement:\n\n```sql\nSELECT COUNT(*) AS successful_missions_before_2010 FROM SpaceMissions WHERE status = \'Success\' AND end_date < \'2010-01-01\';\n```',
    sql="SELECT COUNT(*) AS successful_missions_before_2010 FROM SpaceMissions WHERE status = 'Success' AND end_date < '2010-01-01';"
), 1), (Example({'sql_prompt': 'What is the total number of eco-friendly hotels in Rome?', 'sql_context': "CREATE TABLE eco_hotels (hotel_id INT, city TEXT, sustainable_certification BOOLEAN); INSERT INTO eco_hotels (hotel_id, city, sustainable_certification) VALUES (1, 'Rome', true), (2, 'Rome', false);", 'sql': "SELECT COUNT(*) FROM eco_hotels WHERE city = 'Rome' AND sustainable_certification = true;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find the total number of eco-friendly hotels in Rome, we need to count all the hotels that have a sustainable certification and are located in Rome. The SQL query for this would be as follows:',
    sql="SELECT COUNT(*) FROM eco_hotels WHERE city = 'Rome' AND sustainable_certification = true;"
), 1), (Example({'sql_prompt': "What is the total number of cargo and tanker vessels in the 'fleet_inventory' table?", 'sql_context': "CREATE TABLE fleet_inventory (id INT, vessel_name TEXT, type TEXT, quantity INT); INSERT INTO fleet_inventory (id, vessel_name, type, quantity) VALUES (1, 'Cargo Ship 1', 'Cargo', 20), (2, 'Tanker Vessel 1', 'Tanker', 30);", 'sql': "SELECT SUM(quantity) FROM fleet_inventory WHERE type IN ('Cargo', 'Tanker');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the total number of cargo and tanker vessels in the fleet_inventory table, we need to sum up the quantities for both vessel types. We can achieve this using a SQL query with an OR condition within the WHERE clause or by using two separate queries combined with UNION ALL.\n\nUsing OR condition:\n```sql\nSELECT SUM(quantity) AS total_vessels FROM fleet_inventory WHERE type = 'Cargo' OR type = 'Tanker';\n```\n\nUsing UNION ALL and then summing the results:\n```sql\nSELECT SUM(quantity) as total_vessels FROM (\n    SELECT quantity FROM fleet_inventory WHERE type = 'Cargo'\n    UNION ALL",
    sql="SELECT SUM(quantity) AS total_vessels FROM fleet_inventory WHERE type = 'Cargo' OR type = 'Tanker';"
), 1), (Example({'sql_prompt': 'Which sustainable material has the highest average order quantity?', 'sql_context': "CREATE TABLE materials (id INT, name VARCHAR(255), type VARCHAR(255)); INSERT INTO materials (id, name, type) VALUES (1, 'cotton', 'sustainable'), (2, 'polyester', 'unsustainable');   CREATE TABLE order_items (id INT, material_id INT, order_quantity INT); INSERT INTO order_items (id, material_id, order_quantity) VALUES (1, 1, 100), (2, 2, 150);", 'sql': "SELECT AVG(order_quantity) FROM order_items INNER JOIN materials ON order_items.material_id = materials.id WHERE materials.type = 'sustainable' GROUP BY materials.name ORDER BY AVG(order_quantity) DESC LIMIT 1;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the sustainable material with the highest average order quantity, we need to join the `materials` table and the `order_items` table on their respective IDs. Then, filter for only 'sustainable' materials and calculate the average order quantity for each of them. Finally, select the top result based on this average value.",
    sql="SELECT m.name, AVG(oi.order_quantity) as avg_order_quantity FROM materials m JOIN order_items oi ON m.id = oi.material_id WHERE m.type = 'sustainable' GROUP BY m.name ORDER BY avg_order_quantity DESC LIMIT 1;"
), 1), (Example({'sql_prompt': 'List Smart City initiatives and their corresponding countries.', 'sql_context': "CREATE TABLE Countries (id INT, name VARCHAR(50)); INSERT INTO Countries (id, name) VALUES (1, 'CountryA'), (2, 'CountryB'); CREATE TABLE SmartCities (id INT, country_id INT, initiative VARCHAR(50)); INSERT INTO SmartCities (id, country_id, initiative) VALUES (1, 1, 'InitiativeA'), (2, 1, 'InitiativeB'), (3, 2, 'InitiativeC');", 'sql': 'SELECT SmartCities.initiative, Countries.name FROM SmartCities INNER JOIN Countries ON SmartCities.country_id = Countries.id;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To list Smart City initiatives and their corresponding countries, we need to join the `Countries` table with the `SmartCities` table on the country ID. This will allow us to retrieve the name of each country along with its associated smart city initiative(s).\n\nHere's the SQL query that accomplishes this:\n\n```sql\nSELECT c.name AS Country, sc.initiative AS SmartCityInitiative\nFROM Countries c\nJOIN SmartCities sc ON c.id = sc.country_id;\n```\n\nThis query selects the country name and smart city initiative from both tables by joining them on their respective ID fields (`c.id`",
    sql='SELECT c.name AS Country, sc.initiative AS SmartCityInitiative FROM Countries c JOIN SmartCities sc ON c.id = sc.country_id;'
), 1), (Example({'sql_prompt': "How many rural infrastructure projects were completed in each year from the 'project_completion_dates' table?", 'sql_context': "CREATE TABLE project_completion_dates (id INT, project_id INT, completion_date DATE); INSERT INTO project_completion_dates (id, project_id, completion_date) VALUES (1, 1, '2018-06-25'), (2, 2, '2019-12-18'), (3, 3, '2018-03-04');", 'sql': 'SELECT EXTRACT(YEAR FROM completion_date) AS Year, COUNT(DISTINCT project_id) AS Number_Of_Projects FROM project_completion_dates GROUP BY Year;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To find out how many rural infrastructure projects were completed each year from the `project_completion_dates` table, we need to extract the year from the completion date and then count the number of projects for that year. Here is the SQL query to achieve this:',
    sql='SELECT YEAR(completion_date) as year, COUNT(*) as total_projects FROM project_completion_dates GROUP BY YEAR(completion_date);'
), 1), (Example({'sql_prompt': "How many unique one-time donors made donations in 'q4' of '2022'?", 'sql_context': "CREATE TABLE Donations (id INT, donor_type VARCHAR(10), donation_amount DECIMAL(10,2), donation_date DATE); INSERT INTO Donations (id, donor_type, donation_amount, donation_date) VALUES (1, 'one-time', 50.00, '2022-01-01'); INSERT INTO Donations (id, donor_type, donation_amount, donation_date) VALUES (2, 'recurring', 25.00, '2022-01-15'); INSERT INTO Donations (id, donor_type, donation_amount, donation_date) VALUES (3, 'one-time', 75.00, '2022-12-31');", 'sql': "SELECT COUNT(DISTINCT donor_id) FROM Donations WHERE donor_type = 'one-time' AND QUARTER(donation_date) = 4 AND YEAR(donation_date) = 2022;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="To find the number of unique one-time donors who made donations in Q4 of 2022, we need to filter the data based on the `donor_type` and `donation_date`. We can use the following SQL query:\n\n```sql\nSELECT COUNT(DISTINCT id) AS unique_one_time_donors\nFROM Donations\nWHERE donor_type = 'one-time' AND \n      YEAR(donation_date) = 2022 AND \n      QUARTER(donation_date) = 4;\n```\n\nThis query will return the count of unique one-time donors who made a don",
    sql="SELECT COUNT(DISTINCT id) AS unique_one_time_donors FROM Donations WHERE donor_type = 'one-time' AND YEAR(donation_date) = 2022 AND QUARTER(donation_date) = 4;"
), 1), (Example({'sql_prompt': 'Update the description of a sustainable urbanism initiative in the sustainable_urbanism_initiatives table', 'sql_context': "CREATE TABLE public.sustainable_urbanism_initiatives (id SERIAL PRIMARY KEY, initiative_name VARCHAR(255), initiative_description TEXT, city_name VARCHAR(255), state_name VARCHAR(255)); INSERT INTO public.sustainable_urbanism_initiatives (initiative_name, initiative_description, city_name, state_name) VALUES ('Green City Program', 'Promotes green spaces and sustainable transportation options in urban areas', 'Portland', 'Oregon'), ('EcoDistricts Initiative', 'Encourages sustainable community development in city neighborhoods', 'Vancouver', 'British Columbia');", 'sql': "WITH updated_initiative AS (UPDATE public.sustainable_urbanism_initiatives SET initiative_description = 'Promotes green spaces, sustainable transportation, and energy-efficient buildings in urban areas' WHERE initiative_name = 'Green City Program' RETURNING *) INSERT INTO public.sustainable_urbanism_initiatives (initiative_name, initiative_description, city_name, state_name) SELECT initiative_name, initiative_description, city_name, state_name FROM updated_initiative;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='To update the description of a specific initiative, we need to identify which initiative we want to update. For this example, let\'s assume we want to update the "Green City Program" initiative located in Portland, Oregon.\n\nFirst, we will write an SQL query that updates the `initiative_description` for the specified initiative:\n\n```sql\nUPDATE public.sustainable_urbanism_initiatives\nSET initiative_description = \'Promotes green spaces, sustainable transportation options, and energy-efficient buildings in urban areas\'\nWHERE initiative_name = \'Green City Program\';\n```\n\nThis query will update the description of the "Green City',
    sql="UPDATE public.sustainable_urbanism_initiatives SET initiative_description = 'Promotes green spaces, sustainable transportation options, and energy-efficient buildings in urban areas' WHERE initiative_name = 'Green City Program';"
), 1)]