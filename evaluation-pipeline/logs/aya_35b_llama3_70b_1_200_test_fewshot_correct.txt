[(Example({'sql_prompt': 'Delete records with sales amount over $50,000 in the MilitaryEquipmentSales table', 'sql_context': "CREATE TABLE MilitaryEquipmentSales (id INT, equipment_name VARCHAR(50), sale_amount INT, sale_date DATE); INSERT INTO MilitaryEquipmentSales (id, equipment_name, sale_amount, sale_date) VALUES (1, 'Fighter Jet', 45000, '2021-01-01'), (2, 'Tank', 75000, '2021-02-01');", 'sql': 'DELETE FROM MilitaryEquipmentSales WHERE sale_amount > 50000;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: DELETE FROM MilitaryEquipmentSales WHERE sale_amount > 50000;',
    sql="Sql Prompt: Delete records with sales amount over $50,000 in the 'MilitaryEquipmentSales' table.\n\nSql Context: CREATE TABLE MilitaryEquipmentSales (id INT, equipment_name VARCHAR(50), sale_amount INT, sale_date DATE); INSERT INTO MilitaryEquipmentSales (id, equipment_name, sale_amount, sale_date) VALUES (1, 'Fighter Jet', 45000, '2021-01-01'), (2, 'Tank', 75000, '2021-02-01');\n\nReasoning: We need to delete records where the 'sale_amount' is greater than $"
), 1), (Example({'sql_prompt': 'What is the average number of visitor reviews for heritage sites in each category?', 'sql_context': "CREATE TABLE HeritageSitesReviews (ID INT, SiteName VARCHAR(100), Category VARCHAR(50), Reviews INT); INSERT INTO HeritageSitesReviews (ID, SiteName, Category, Reviews) VALUES (1, 'Machu Picchu', 'Archaeological', 5000); INSERT INTO HeritageSitesReviews (ID, SiteName, Category, Reviews) VALUES (2, 'Taj Mahal', 'Architectural', 8000);", 'sql': 'SELECT Category, AVG(Reviews) OVER (PARTITION BY Category) AS AvgReviews FROM HeritageSitesReviews;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT Category, AVG(Reviews) AS Average_Reviews FROM HeritageSitesReviews GROUP BY Category;',
    sql='Here is the SQL query based on the provided prompt and context:\n\n```sql\nSELECT Category, AVG(Reviews) AS Average_Reviews\nFROM HeritageSitesReviews\nGROUP BY Category;\n```\n\nThis query calculates the average number of visitor reviews for heritage sites in each category by using the `AVG` function and grouping the results by the "Category" column.'
), 1), (Example({'sql_prompt': 'What is the total revenue from ads targeting users interested in veganism in Q3 2022?', 'sql_context': 'CREATE TABLE ads (id INT, user INT, platform VARCHAR(50), target VARCHAR(50), start_date DATE, end_date DATE, revenue DECIMAL(10, 2));', 'sql': "SELECT SUM(revenue) FROM ads WHERE target = 'veganism' AND platform IN ('Facebook', 'Instagram') AND start_date BETWEEN '2022-07-01' AND '2022-09-30';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query based on the provided prompt and context:\n```sql\nSELECT SUM(revenue) AS total_revenue\nFROM ads\nWHERE target = 'Veganism'\n  AND EXTRACT(QUARTER FROM start_date) = 3\n  AND EXTRACT(YEAR FROM start_date) = 2022;\n```\n\n**Reasoning:**\nTo answer the question, we need to find all ads that target users interested in veganism and were active during the third quarter of 2022. We use the `target` column to filter for ads related to veganism. The `EXTRACT` function is used to get the quarter and year from the `start_date`",
    sql="Here is the SQL query based on the provided prompt and context:\n```sql\nSELECT SUM(revenue) AS total_revenue\nFROM ads\nWHERE target = 'Veganism'\n  AND EXTRACT(QUARTER FROM start_date) = 3\n  AND EXTRACT(YEAR FROM start_date) = 2022;\n```\n\n**Reasoning:** To answer the question, we need to find all ads that target users interested in veganism and were active during the third quarter of 2022. We use the `target` column to filter for ads related to veganism. The `EXTRACT` function is used to get the quarter and year from the `start_date`."
), 1), (Example({'sql_prompt': 'What is the minimum duration of workouts for members who joined in 2019, grouped by gender?', 'sql_context': 'CREATE TABLE Workout (WorkoutID INT PRIMARY KEY, MemberID INT, Duration INT, Date DATE); CREATE TABLE Member (MemberID INT PRIMARY KEY, Age INT, Gender VARCHAR(10), MembershipStart DATE);', 'sql': "SELECT Member.Gender, MIN(Workout.Duration) FROM Workout INNER JOIN Member ON Workout.MemberID = Member.MemberID WHERE Member.MembershipStart BETWEEN '2019-01-01' AND '2019-12-31' GROUP BY Member.Gender;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query based on the provided prompt and context:\n```sql\nSELECT m.Gender, MIN(w.Duration) AS MinWorkoutDuration\nFROM Workout w\nJOIN Member m ON w.MemberID = m.MemberID\nWHERE EXTRACT(YEAR FROM m.MembershipStart) = 2019\nGROUP BY m.Gender;\n```\n\n**Reasoning:**\nTo find the minimum duration of workouts for members who joined in 2019, we need to join the 'Workout' and 'Member' tables on the 'MemberID' column. We then filter the results to only include members who joined in 2019 using the 'MembershipStart' date",
    sql="Here is the SQL query based on the provided prompt and context:\n```sql\nSELECT m.Gender, MIN(w.Duration) AS MinWorkoutDuration\nFROM Workout w\nJOIN Member m ON w.MemberID = m.MemberID\nWHERE EXTRACT(YEAR FROM m.MembershipStart) = 2019\nGROUP BY m.Gender;\n```\n\n**Reasoning:** To find the minimum duration of workouts for members who joined in 2019, we need to join the 'Workout' and 'Member' tables on the 'MemberID' column. We then filter the results to only include members who joined in 2019 using the 'MembershipStart' date."
), 1), (Example({'sql_prompt': 'How many employees were hired in each month of 2022?', 'sql_context': "CREATE TABLE Employees (EmployeeID INT, HireDate DATE); INSERT INTO Employees (EmployeeID, HireDate) VALUES (1, '2022-01-15'); INSERT INTO Employees (EmployeeID, HireDate) VALUES (2, '2022-02-01');", 'sql': "SELECT EXTRACT(MONTH FROM HireDate) AS Month, COUNT(*) AS NumberOfHires FROM Employees WHERE HireDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY Month;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT EXTRACT(MONTH FROM HireDate) as month, COUNT(*) as total_hires FROM Employees WHERE EXTRACT(YEAR FROM HireDate) = 2022 GROUP BY month;',
    sql="Here is the SQL query based on the provided SQL prompt and context:\n\n```sql\nSELECT EXTRACT(MONTH FROM HireDate) AS month, COUNT(*) AS total_hires\nFROM Employees\nWHERE EXTRACT(YEAR FROM HireDate) = 2022\nGROUP BY month;\n```\n\nThis query extracts the month from the 'HireDate' column and counts the number of employees hired in each month of the year 2022. The results are grouped by month."
), 1), (Example({'sql_prompt': 'What is the maximum quantity of a single organic product delivered in the DELIVERY_RECORDS table?', 'sql_context': 'CREATE TABLE DELIVERY_RECORDS (id INT, supplier_id INT, product_id INT, is_organic BOOLEAN, quantity INT); INSERT INTO DELIVERY_RECORDS (id, supplier_id, product_id, is_organic, quantity) VALUES (1, 1, 1, true, 50), (2, 2, 2, true, 30);', 'sql': 'SELECT MAX(quantity) FROM DELIVERY_RECORDS WHERE is_organic = true;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT MAX(quantity) FROM DELIVERY_RECORDS WHERE is_organic = TRUE;',
    sql="Here is the SQL query based on the provided SQL prompt and context:\n\n**SQL Prompt:** What is the maximum quantity of a single organic product delivered in the 'DELIVERY_RECORDS' table?\n**SQL Context:**\n```sql\nCREATE TABLE DELIVERY_RECORDS (\n    id INT,\n    supplier_id INT,\n    product_id INT,\n    is_organic BOOLEAN,\n    quantity INT\n);\nINSERT INTO DELIVERY_RECORDS (id, supplier_id, product_id, is_organic, quantity)\nVALUES (1, 1, 1, true, 50),\n       (2, 2, 2, true, 30);\n```"
), 1), (Example({'sql_prompt': 'Update the description of a sustainable urbanism initiative in the sustainable_urbanism_initiatives table', 'sql_context': "CREATE TABLE public.sustainable_urbanism_initiatives (id SERIAL PRIMARY KEY, initiative_name VARCHAR(255), initiative_description TEXT, city_name VARCHAR(255), state_name VARCHAR(255)); INSERT INTO public.sustainable_urbanism_initiatives (initiative_name, initiative_description, city_name, state_name) VALUES ('Green City Program', 'Promotes green spaces and sustainable transportation options in urban areas', 'Portland', 'Oregon'), ('EcoDistricts Initiative', 'Encourages sustainable community development in city neighborhoods', 'Vancouver', 'British Columbia');", 'sql': "WITH updated_initiative AS (UPDATE public.sustainable_urbanism_initiatives SET initiative_description = 'Promotes green spaces, sustainable transportation, and energy-efficient buildings in urban areas' WHERE initiative_name = 'Green City Program' RETURNING *) INSERT INTO public.sustainable_urbanism_initiatives (initiative_name, initiative_description, city_name, state_name) SELECT initiative_name, initiative_description, city_name, state_name FROM updated_initiative;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: UPDATE public.sustainable_urbanism_initiatives SET initiative_description = 'Promotes green spaces, sustainable transportation, and eco-friendly practices in urban areas.' WHERE initiative_name = 'Green City Program';",
    sql="SQL: UPDATE public.sustainable_urbanism_initiatives\nSET initiative_description = 'Promotes green spaces, sustainable transportation, and eco-friendly practices in urban areas.'\nWHERE initiative_name = 'Green City Program';"
), 1), (Example({'sql_prompt': 'Calculate the year-over-year revenue growth for each restaurant.', 'sql_context': "CREATE TABLE restaurants (restaurant_id INT, restaurant_name VARCHAR(50), city VARCHAR(50), state VARCHAR(50), revenue FLOAT, year INT); INSERT INTO restaurants (restaurant_id, restaurant_name, city, state, revenue, year) VALUES (1, 'Restaurant A', 'City A', 'State A', 123456.78, 2021);", 'sql': 'SELECT restaurant_name, (revenue - LAG(revenue) OVER (PARTITION BY restaurant_name ORDER BY year)) / ABS(LAG(revenue) OVER (PARTITION BY restaurant_name ORDER BY year)) as revenue_growth FROM restaurants;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT restaurant_name, year, revenue,\n        (revenue - LAG(revenue) OVER (PARTITION BY restaurant_name ORDER BY year)) / LAG(revenue) OVER (PARTITION BY restaurant_name ORDER BY year) * 100 AS revenue_growth_percentage\nFROM restaurants;',
    sql="Here is the SQL query based on the provided prompt and context:\n\n```sql\nSELECT restaurant_name, year, revenue,\n       (revenue - LAG(revenue) OVER (PARTITION BY restaurant_name ORDER BY year)) / LAG(revenue) OVER (PARTITION BY restaurant_name ORDER BY year) * 100 AS revenue_growth_percentage\nFROM restaurants;\n```\n\nThis query calculates the year-over-year revenue growth percentage for each restaurant. The `LAG` function is used to access the previous row's revenue value within a partition of restaurant names, ordered by year. Subtracting the previous year's revenue and dividing it by the previous year's revenue gives us the growth percentage."
), 1), (Example({'sql_prompt': 'What is the percentage of users in Canada who have used the hashtag #travel?', 'sql_context': "CREATE TABLE posts (id INT, user_id INT, hashtags TEXT); INSERT INTO posts (id, user_id, hashtags) VALUES (1, 1, '#travel'), (2, 1, '#food'), (3, 2, '#travel'), (4, 3, '#art'), (5, 4, '#music'); CREATE TABLE users (id INT, country VARCHAR(2)); INSERT INTO users (id, country) VALUES (1, 'CA'), (2, 'US'), (3, 'CA'), (4, 'DE');", 'sql': "SELECT 100.0 * COUNT(DISTINCT user_id) / (SELECT COUNT(DISTINCT user_id) FROM posts JOIN users ON posts.user_id = users.id WHERE users.country = 'CA') as percentage_travel FROM posts JOIN users ON posts.user_id = users.id WHERE hashtags LIKE '%#travel%' AND users.country = 'CA';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT (COUNT(*) / (SELECT COUNT(*) FROM users WHERE country = 'CA')) * 100 AS percentage_canada FROM posts WHERE hashtags LIKE '%#travel%';",
    sql='Let\'s think step by step in order to produce the SQL query.\n\n1. We need to count the number of posts with the hashtag "#travel" that are from users in Canada.\n2. We can use a subquery to find the total number of users from Canada.\n3. Then, we can calculate the percentage of Canadian users who have used the hashtag "#travel".\n\nHere\'s the SQL query:\n```sql\nSELECT (COUNT(*) / (SELECT COUNT(*) FROM users WHERE country = \'CA\')) * 100 AS percentage_canada\nFROM posts\nWHERE hashtags LIKE \'%#travel%\';\n```\n\nThis query calculates the percentage of users in Canada who have used the hashtag "#travel".'
), 1), (Example({'sql_prompt': 'What is the total number of points scored by each team in the NBA this season?', 'sql_context': "CREATE TABLE nba_teams (team_name TEXT, points_scored INT); INSERT INTO nba_teams (team_name, points_scored) VALUES ('Cavaliers', 8000), ('Warriors', 8500), ('Celtics', 7500);", 'sql': 'SELECT team_name, SUM(points_scored) FROM nba_teams GROUP BY team_name;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT team_name, SUM(points_scored) AS total_points FROM nba_teams GROUP BY team_name;',
    sql="Sql Prompt: What is the total number of points scored by each team in the NBA this season?\n\nSql Context: CREATE TABLE nba_teams (team_name TEXT, points_scored INT); INSERT INTO nba_teams (team_name, points_scored) VALUES ('Cavaliers', 8000), ('Warriors', 8500), ('Celtics', 7500);\n\nReasoning: To answer this query, we need to sum up the points scored by each team and group the results by team name. This can be achieved using the SUM() function along with the GROUP BY clause.\n\nSql: SELECT team_name, SUM(points_scored) AS total"
), 1), (Example({'sql_prompt': 'What is the highest number of hat-tricks scored by a player in a single Bundesliga season?', 'sql_context': "CREATE TABLE german_teams (team_id INT, team_name VARCHAR(50)); INSERT INTO german_teams (team_id, team_name) VALUES (1, 'Bayern Munich'), (2, 'Borussia Dortmund'), (3, 'RB Leipzig'); CREATE TABLE german_matches (match_id INT, home_team_id INT, away_team_id INT, home_team_player_hat_tricks INT, away_team_player_hat_tricks INT); INSERT INTO german_matches (match_id, home_team_id, away_team_id, home_team_player_hat_tricks, away_team_player_hat_tricks) VALUES (1, 1, 2, 1, 0), (2, 2, 3, 0, 1), (3, 3, 1, 1, 0);", 'sql': 'SELECT MAX(home_team_player_hat_tricks + away_team_player_hat_tricks) AS max_hat_tricks FROM german_matches;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to answer the prompt:\n```sql\nSELECT home_team_id, MAX(home_team_player_hat_tricks) AS max_hat_tricks\nFROM german_matches\nGROUP BY home_team_id;\n```\n\nStep-by-step reasoning:\n1. We want to find the highest number of hat-tricks scored by a player in a single Bundesliga season.\n2. The relevant tables are `german_teams` and `german_matches`.\n3. We need to aggregate the data by team and calculate the maximum number of hat-tricks for each team.\n4. The SQL query uses the `MAX` function to find the highest value of `home',
    sql='```sql\nSELECT home_team_id, MAX(home_team_player_hat_tricks) AS max_hat_tricks\nFROM german_matches\nGROUP BY home_team_id;\n```\n\nStep-by-step reasoning:\n\n1. We want to find the highest number of hat-tricks scored by a player in a single Bundesliga season.\n2. The relevant tables are `german_teams` and `german_matches`.\n3. We need to aggregate the data by team and calculate the maximum number of hat-tricks for each team.\n4. The SQL query uses the `MAX` function to find the highest value of `home_team_player_hat_tricks` for each'
), 0), (Example({'sql_prompt': "What is the average word count for articles published in the 'news' schema, grouped by author?", 'sql_context': "CREATE TABLE news.articles (article_id INT, title VARCHAR(100), author VARCHAR(100), word_count INT); INSERT INTO news.articles (article_id, title, author, word_count) VALUES (1, 'Article 1', 'John Doe', 500), (2, 'Article 2', 'Jane Doe', 600), (3, 'Article 3', 'John Doe', 700);", 'sql': 'SELECT author, AVG(word_count) FROM news.articles GROUP BY author;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT author, AVG(word_count) AS average_word_count FROM news.articles GROUP BY author;',
    sql='Let\'s think step by step in order to produce the SQL query:\n\n**Step 1:** Start by understanding the prompt and context. The prompt asks for the average word count of articles grouped by author. The context provides a table named "news.articles" with columns for article ID, title, author, and word count.\n\n**Step 2:** Identify the key elements needed for the query:\n- The selection of columns: We need to select the "author" column to group the results by author and the "word_count" column to calculate the average.\n- The aggregation function: We need to use the AVG() function to calculate the average word count.\n- The grouping clause: We need to use'
), 1), (Example({'sql_prompt': 'Show the total budget allocation for healthcare services in the top 5 states with the highest budget allocation', 'sql_context': 'CREATE TABLE healthcare_services (service_id INT, state_id INT, budget FLOAT);CREATE TABLE states (state_id INT, state_name TEXT);', 'sql': 'SELECT s.state_name, SUM(hs.budget)  FROM healthcare_services hs INNER JOIN states s ON hs.state_id = s.state_id GROUP BY s.state_name ORDER BY SUM(hs.budget) DESC LIMIT 5;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query based on the provided prompt and context:\n```sql\nWITH StateBudget AS (\n    SELECT s.state_name, hs.budget\n    FROM states s\n    JOIN healthcare_services hs ON s.state_id = hs.state_id\n)\nSELECT state_name, SUM(budget) AS total_budget\nFROM StateBudget\nGROUP BY state_name\nORDER BY total_budget DESC\nLIMIT 5;\n```\n\n**Reasoning:**\nTo answer the query, we need to join the `healthcare_services` table with the `states` table on the `state_id` to get the state name for each budget allocation. We then group the results by state name',
    sql='Here is the SQL query based on the provided prompt and context:\n```sql\nWITH StateBudget AS (\n    SELECT s.state_name, hs.budget\n    FROM states s\n    JOIN healthcare_services hs ON s.state_id = hs.state_id\n)\nSELECT state_name, SUM(budget) AS total_budget\nFROM StateBudget\nGROUP BY state_name\nORDER BY total_budget DESC\nLIMIT 5;\n```\n\n**Reasoning:** To answer the query, we need to join the `healthcare_services` table with the `states` table on the `state_id` to get the state name for each budget allocation. We then group the results by state name and'
), 1), (Example({'sql_prompt': 'Find the total volume of timber sold in 2021', 'sql_context': "CREATE TABLE forests (id INT, name VARCHAR(50), hectares DECIMAL(5,2), year_planted INT, PRIMARY KEY (id)); INSERT INTO forests (id, name, hectares, year_planted) VALUES (1, 'Forest A', 123.45, 1990), (2, 'Forest B', 654.32, 1985); CREATE TABLE timber_sales (id INT, forest_id INT, year INT, volume DECIMAL(10,2), PRIMARY KEY (id)); INSERT INTO timber_sales (id, forest_id, year, volume) VALUES (1, 1, 2021, 120.50), (2, 1, 2022, 150.75), (3, 2, 2021, 450.23), (4, 2, 2022, 520.89);", 'sql': 'SELECT SUM(ts.volume) FROM timber_sales ts INNER JOIN forests f ON ts.forest_id = f.id WHERE ts.year = 2021;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT SUM(volume) AS total_volume_sold FROM timber_sales WHERE year = 2021;',
    sql="Here is the SQL query based on the provided SQL prompt and context:\n\n**SQL Prompt:** Find the total volume of timber sold in 2021.\n**SQL Context:** \n```sql\nCREATE TABLE forests (\n    id INT,\n    name VARCHAR(50),\n    hectares DECIMAL(5, 2),\n    year_planted INT,\n    PRIMARY KEY (id)\n);\n\nINSERT INTO forests (id, name, hectares, year_planted) VALUES (1, 'Forest A', 123.45, 1990), (2, 'Forest B', 654.32, 1985);\n\nCREATE TABLE timber_"
), 0), (Example({'sql_prompt': 'Who are the top 3 suppliers of recycled polyester?', 'sql_context': "CREATE TABLE suppliers (id INT, name VARCHAR(255), material VARCHAR(255)); INSERT INTO suppliers (id, name, material) VALUES (1, 'Supplier A', 'Recycled Polyester'), (2, 'Supplier B', 'Organic Cotton'), (3, 'Supplier C', 'Recycled Polyester'), (4, 'Supplier D', 'Hemp'), (5, 'Supplier E', 'Recycled Polyester');", 'sql': "SELECT name FROM suppliers WHERE material = 'Recycled Polyester' GROUP BY name ORDER BY COUNT(*) DESC LIMIT 3;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT name, material, COUNT(*) as total_supply FROM suppliers WHERE material = 'Recycled Polyester' GROUP BY name ORDER BY total_supply DESC LIMIT 3;",
    sql="Let's think step by step in order to produce the SQL query.\n\nGiven the prompt and context:\n\n**Sql Prompt:** Who are the top 3 suppliers of recycled polyester?\n\n**Sql Context:** We have a table named `suppliers` with columns `id`, `name`, and `material`. The `material` column indicates the type of material each supplier provides. We want to find the top 3 suppliers who supply 'Recycled Polyester'.\n\nHere are the steps:\n\n1. Select the relevant columns: `name` and `material`.\n2. Use a WHERE clause to filter rows where the `material` is 'Recycled Polyester'.\n3. Group the results by supplier"
), 0), (Example({'sql_prompt': "How many donors have donated more than $100 in the 'Donations' table?", 'sql_context': "CREATE TABLE Donations (DonorID INT, DonationDate DATE, Amount DECIMAL(10, 2)); INSERT INTO Donations (DonorID, DonationDate, Amount) VALUES (1, '2022-02-01', 120.00), (2, '2022-01-15', 75.00), (3, '2022-03-05', 150.00);", 'sql': 'SELECT COUNT(*) FROM Donations WHERE Amount > 100;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT COUNT(*) FROM Donations WHERE Amount > 100;',
    sql="Here is the SQL query based on the provided prompt and context:\n\n**SQL Prompt:** How many donors have donated more than $100 in the 'Donations' table?\n**SQL Context:** \n```sql\nCREATE TABLE Donations (\n    DonorID INT,\n    DonationDate DATE,\n    Amount DECIMAL(10, 2)\n);\nINSERT INTO Donations (DonorID, DonationDate, Amount)\nVALUES (1, '2022-02-01', 120.00),\n       (2, '2022-01-15', 75.00),\n       (3, '2022-03"
), 1), (Example({'sql_prompt': "Update the 'Angkor Wat' excavation to have a start date of 1300-01-01.", 'sql_context': "CREATE TABLE ExcavationSites (SiteID INT PRIMARY KEY, Name VARCHAR(255), Country VARCHAR(255), StartDate DATE, EndDate DATE); INSERT INTO ExcavationSites (SiteID, Name, Country, StartDate, EndDate) VALUES (5, 'Angkor Wat', 'Cambodia', '1860-01-01', '1860-05-01');", 'sql': "UPDATE ExcavationSites SET StartDate = '1300-01-01' WHERE Name = 'Angkor Wat';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: UPDATE ExcavationSites SET StartDate = '1300-01-01' WHERE Name = 'Angkor Wat';",
    sql="SQL: UPDATE ExcavationSites SET StartDate = '1300-01-01' WHERE Name = 'Angkor Wat';"
), 1), (Example({'sql_prompt': 'Calculate the total CO2 emissions (in metric tons) per capita for each country in the population_data and carbon_emissions tables.', 'sql_context': 'CREATE TABLE population_data (country VARCHAR(50), year INT, population INT); CREATE TABLE carbon_emissions (country VARCHAR(50), year INT, co2_emissions FLOAT);', 'sql': 'SELECT p.country, AVG(co2_emissions/population*1000000) as co2_emissions_per_capita FROM population_data p JOIN carbon_emissions c ON p.country = c.country GROUP BY p.country;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query that addresses the prompt:\n```sql\nSELECT p.country,\n       (ce.co2_emissions * 1000) / p.population AS co2_emissions_per_capita\nFROM population_data p\nJOIN carbon_emissions ce ON p.country = ce.country AND p.year = ce.year;\n```\n\n**Reasoning:**\nTo calculate the total CO2 emissions per capita for each country, we need to join the `population_data` and `carbon_emissions` tables on the country name and year. We then multiply the CO2 emissions by 1000 to convert them from tons to metric tons and divide',
    sql='```sql\nSELECT p.country,\n       (ce.co2_emissions * 1000) / p.population AS co2_emissions_per_capita\nFROM population_data p\nJOIN carbon_emissions ce ON p.country = ce.country AND p.year = ce.year;\n```'
), 1), (Example({'sql_prompt': "How many rural infrastructure projects were completed in '2022' in the 'Asia-Pacific' region?", 'sql_context': "CREATE TABLE rural_infrastructure(id INT, project TEXT, location TEXT, completion_year INT); INSERT INTO rural_infrastructure (id, project, location, completion_year) VALUES (1, 'Rural Road Project', 'Asia-Pacific', 2022);", 'sql': "SELECT COUNT(*) FROM rural_infrastructure WHERE location = 'Asia-Pacific' AND completion_year = 2022;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT COUNT(*) FROM rural_infrastructure WHERE completion_year = 2022 AND location = 'Asia-Pacific';",
    sql="Sql Prompt: How many rural infrastructure projects were completed in '2022' in the 'Asia-Pacific' region?\n\nSql Context: CREATE TABLE rural_infrastructure(id INT, project TEXT, location TEXT, completion_year INT); INSERT INTO rural_infrastructure (id, project, location, completion_year) VALUES  (1, 'Rural Road Project', 'Asia-Pacific', 2022);\n\nReasoning: We need to count the number of rows in the 'rural_infrastructure' table where the completion year is 2022 and the location is 'Asia-Pacific'.\n\nSql: SELECT COUNT(*) FROM rural_infrastructure WHERE completion_year = 2022 AND"
), 1), (Example({'sql_prompt': "What is the average horsepower of luxury vehicles in the 'GreenCar' database produced after 2017?", 'sql_context': 'CREATE TABLE LuxuryVehicles (Id INT, Make VARCHAR(50), Model VARCHAR(50), Year INT, Horsepower INT);', 'sql': 'SELECT AVG(Horsepower) FROM LuxuryVehicles WHERE Year > 2017;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query based on the provided prompt and context:\n```sql\nSELECT AVG(Horsepower) AS Average_Horsepower\nFROM LuxuryVehicles\nWHERE Year > 2017;\n```\n\n**Reasoning:** To calculate the average horsepower of luxury vehicles produced after 2017, we use the `AVG` function on the "Horsepower" column. We filter the data using a `WHERE` clause to only include vehicles with a production year greater than 2017. The result will give us the average horsepower for those vehicles.',
    sql='Here is the SQL query based on the provided prompt and context:\n```sql\nSELECT AVG(Horsepower) AS Average_Horsepower\nFROM LuxuryVehicles\nWHERE Year > 2017;\n```\n\n**Reasoning:** To calculate the average horsepower of luxury vehicles produced after 2017, we use the `AVG` function on the "Horsepower" column. We filter the data using a `WHERE` clause to only include vehicles with a production year greater than 2017. The result will give us the average horsepower for those vehicles.'
), 1), (Example({'sql_prompt': 'What is the maximum response time for emergency calls in the city of Los Angeles?', 'sql_context': 'CREATE TABLE emergency_calls (id INT, city VARCHAR(20), response_time INT);', 'sql': "SELECT MAX(response_time) FROM emergency_calls WHERE city = 'Los Angeles';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query based on the provided SQL context and prompt:\n```sql\nSELECT MAX(response_time) AS max_response_time\nFROM emergency_calls\nWHERE city = 'Los Angeles';\n```\n\n**Reasoning:** To find the maximum response time for emergency calls in the city of Los Angeles, we need to select the maximum value of the `response_time` column from the `emergency_calls` table where the `city` is 'Los Angeles'. This can be achieved using the `MAX` aggregate function along with a `WHERE` clause to filter the data by city.",
    sql="Here is the SQL query based on the provided SQL context and prompt:\n```sql\nSELECT MAX(response_time) AS max_response_time\nFROM emergency_calls\nWHERE city = 'Los Angeles';\n```\n\n**Reasoning:** To find the maximum response time for emergency calls in the city of Los Angeles, we need to select the maximum value of the `response_time` column from the `emergency_calls` table where the `city` is 'Los Angeles'. This can be achieved using the `MAX` aggregate function along with a `WHERE` clause to filter the data by city."
), 1), (Example({'sql_prompt': 'What is the maximum loan amount for socially responsible loans in the Asia-Pacific region?', 'sql_context': "CREATE TABLE socially_responsible_loans (loan_id INT, region VARCHAR(20), loan_amount DECIMAL(10,2)); INSERT INTO socially_responsible_loans (loan_id, region, loan_amount) VALUES (101, 'Asia-Pacific', 50000), (102, 'Europe', 30000), (103, 'Asia-Pacific', 70000);", 'sql': "SELECT MAX(srl.loan_amount) FROM socially_responsible_loans srl WHERE srl.region = 'Asia-Pacific';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT MAX(loan_amount) FROM socially_responsible_loans WHERE region = 'Asia-Pacific';",
    sql="Let's think step by step in order to produce the SQL query. \n\nGiven the prompt and context:\n\n**Sql Prompt:** What is the maximum loan amount for socially responsible loans in the Asia-Pacific region?\n\n**Sql Context:** We have a table named `socially_responsible_loans` with columns `loan_id`, `region`, and `loan_amount`. The context also includes sample data with loan amounts and regions. \n\n**Reasoning:** To find the maximum loan amount for socially responsible loans in the Asia-Pacific region, we need to filter the data by the 'Asia-Pacific' region and then find the maximum value of the `loan_amount` column within that subset of data."
), 1), (Example({'sql_prompt': 'What is the maximum number of years a traditional art form has been preserved in each country?', 'sql_context': "CREATE TABLE countries (id INT, name TEXT); INSERT INTO countries (id, name) VALUES (1, 'Nigeria'), (2, 'Brazil'); CREATE TABLE art_forms (id INT, country_id INT, name TEXT, year_preserved INT); INSERT INTO art_forms (id, country_id, name, year_preserved) VALUES (1, 1, 'Tie-dye', 500), (2, 1, 'Batik', 1000), (3, 2, 'Capoeira', 400);", 'sql': 'SELECT c.name, MAX(af.year_preserved) FROM countries c JOIN art_forms af ON c.id = af.country_id GROUP BY c.id;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT af.country_id, c.name AS country, MAX(af.year_preserved) AS max_years_preserved\nFROM art_forms af\nJOIN countries c ON af.country_id = c.id\nGROUP BY af.country_id, c.name;',
    sql='Here is the SQL query based on the provided SQL prompt and context:\n\n```sql\nSELECT af.country_id, c.name AS country, MAX(af.year_preserved) AS max_years_preserved\nFROM art_forms af\nJOIN countries c ON af.country_id = c.id\nGROUP BY af.country_id, c.name;\n```\n\n**Reasoning:** \n\nTo find the maximum number of years a traditional art form has been preserved in each country, we need to join the `art_forms` table with the `countries` table on the `country_id` column. This will allow us to associate each art form with its respective country. \n\nThen'
), 1), (Example({'sql_prompt': 'What is the maximum hourly wage for each labor category in the construction industry?', 'sql_context': 'CREATE TABLE labor_statistics (id INT, industry VARCHAR(255), category VARCHAR(255), title VARCHAR(255), hourly_wage DECIMAL(5,2));', 'sql': "SELECT industry, category, MAX(hourly_wage) as max_hourly_wage FROM labor_statistics WHERE industry = 'construction' GROUP BY industry, category;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query based on the provided prompt and context:\n```sql\nSELECT category, MAX(hourly_wage) AS max_hourly_wage\nFROM labor_statistics\nWHERE industry = 'Construction'\nGROUP BY category;\n```\n\n**Reasoning:**\nTo find the maximum hourly wage for each labor category in the construction industry, we follow these steps:\n1. **Table Selection:** We are working with the `labor_statistics` table, which contains information about different industries and their labor categories along with their respective hourly wages.\n2. **Filter by Industry:** We want to focus on the construction industry, so we use a `WHERE` clause to filter the data and only consider rows where",
    sql="```sql\nSELECT category, MAX(hourly_wage) AS max_hourly_wage\nFROM labor_statistics\nWHERE industry = 'Construction'\nGROUP BY category;\n```\n\n**Reasoning:** \n\nTo find the maximum hourly wage for each labor category in the construction industry, we follow these steps: \n\n1. **Table Selection:** We are working with the `labor_statistics` table, which contains information about different industries and their labor categories along with their respective hourly wages. \n\n2. **Filter by Industry:** We want to focus on the construction industry, so we use a `WHERE` clause to filter the data and only consider rows where the `industry` column is equal to 'Construction'. \n\n3"
), 1), (Example({'sql_prompt': 'List all the drought-impacted counties in Texas in 2018.', 'sql_context': "CREATE TABLE drought_impact(county VARCHAR(20), state VARCHAR(20), year INT, impacted BOOLEAN); INSERT INTO drought_impact(county, state, year, impacted) VALUES ('Harris', 'Texas', 2015, true), ('Harris', 'Texas', 2016, true), ('Harris', 'Texas', 2017, true), ('Harris', 'Texas', 2018, true), ('Bexar', 'Texas', 2015, false), ('Bexar', 'Texas', 2016, false), ('Bexar', 'Texas', 2017, false), ('Bexar', 'Texas', 2018, false);", 'sql': "SELECT county FROM drought_impact WHERE state = 'Texas' AND year = 2018 AND impacted = true;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT county\nFROM drought_impact\nWHERE state = 'Texas' AND year = 2018 AND impacted = true;",
    sql="Sql Prompt: List all the drought-impacted counties in Texas in 2018.\n\nSql Context: CREATE TABLE drought_impact(county VARCHAR(20), state VARCHAR(20), year INT, impacted BOOLEAN); INSERT INTO drought_impact(county, state, year, impacted) VALUES ('Harris', 'Texas', 2015, true), ('Harris', 'Texas', 2016, true), ('Harris', 'Texas', 2017, true), ('Harris', 'Texas', 2018, true), ('Bexar', 'Texas', 2015, false), ('Bexar', 'Texas', 2016,"
), 0), (Example({'sql_prompt': 'Find the top 3 genres with the highest revenue in 2022 for streaming services in the USA.', 'sql_context': "CREATE TABLE streaming_services (service_id INT, service_name VARCHAR(255), revenue DECIMAL(10,2)); INSERT INTO streaming_services (service_id, service_name, revenue) VALUES (1, 'StreamingCo', 5000000.00); CREATE TABLE genre_sales (sale_id INT, service_id INT, genre VARCHAR(255), sales DECIMAL(10,2)); INSERT INTO genre_sales (sale_id, service_id, genre, sales) VALUES (1, 1, 'Rock', 150000.00);", 'sql': "SELECT genre, SUM(sales) as total_sales FROM genre_sales gs JOIN streaming_services s ON gs.service_id = s.service_id WHERE s.service_country = 'USA' AND s.service_year = 2022 GROUP BY genre ORDER BY total_sales DESC LIMIT 3;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query based on the provided prompt and context:\n```sql\nWITH GenreRevenue AS (\n    SELECT g.genre, s.service_name, SUM(g.sales) AS total_revenue\n    FROM genre_sales g\n    JOIN streaming_services s ON g.service_id = s.service_id\n    WHERE EXTRACT(YEAR FROM g.sale_date) = 2022 AND s.service_name = 'StreamingCo'\n    GROUP BY g.genre, s.service_name\n)\nSELECT genre, service_name, total_revenue\nFROM GenreRevenue\nORDER BY total_revenue DESC\nLIMIT 3;\n```\n\n**Reasoning:** \n\nTo",
    sql="Here is the SQL query based on the provided prompt and context:\n```sql\nWITH GenreRevenue AS (\n    SELECT g.genre, s.service_name, SUM(g.sales) AS total_revenue\n    FROM genre_sales g\n    JOIN streaming_services s ON g.service_id = s.service_id\n    WHERE EXTRACT(YEAR FROM g.sale_date) = 2022 AND s.service_name = 'StreamingCo'\n    GROUP BY g.genre, s.service_name\n)\nSELECT genre, service_name, total_revenue\nFROM GenreRevenue\nORDER BY total_revenue DESC\nLIMIT 3;\n```\n\n**Reasoning:**\nTo find"
), 0), (Example({'sql_prompt': "List all unique fields from the 'geology' and 'infrastructure' tables.", 'sql_context': 'CREATE TABLE geology (well_id INT, rock_type VARCHAR(50)); CREATE TABLE infrastructure (well_id INT, platform_type VARCHAR(50));', 'sql': "SELECT field FROM (SELECT 'geology' as table_name, column_name as field FROM information_schema.columns WHERE table_name = 'geology' UNION ALL SELECT 'infrastructure' as table_name, column_name as field FROM information_schema.columns WHERE table_name = 'infrastructure') as subquery;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query that answers the prompt:\n```sql\nSELECT DISTINCT g.rock_type, i.platform_type\nFROM geology g\nJOIN infrastructure i ON g.well_id = i.well_id;\n```\n\nReasoning: To list all unique fields from both tables, we need to combine data from both the 'geology' and 'infrastructure' tables. Since both tables use 'well_id' as a common identifier, we can perform an inner join on this column to link the two tables. By using the DISTINCT keyword, we ensure that only unique combinations of rock_type and platform_type are included in the result set.",
    sql="Here is the SQL query that answers the prompt:\n```sql\nSELECT DISTINCT g.rock_type, i.platform_type\nFROM geology g\nJOIN infrastructure i ON g.well_id = i.well_id;\n```\n\nReasoning: To list all unique fields from both tables, we need to combine data from both the 'geology' and 'infrastructure' tables. Since both tables use 'well_id' as a common identifier, we can perform an inner join on this column to link the two tables. By using the DISTINCT keyword, we ensure that only unique combinations of rock_type and platform_type are included in the result set."
), 0), (Example({'sql_prompt': 'Calculate the percentage of total Europium production for each country.', 'sql_context': 'CREATE TABLE europium_production (country VARCHAR(50), quantity INT);', 'sql': 'SELECT country, quantity * 100.0 / SUM(quantity) OVER (PARTITION BY NULL) AS percentage FROM europium_production;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to calculate the percentage of total Europium production for each country:\n```sql\nSELECT country, SUM(quantity) AS total_production,\n       (SUM(quantity) / SUM(SUM(quantity)) OVER ()) * 100 AS percentage_of_total\nFROM europium_production;\n```\n\nStep-by-step reasoning:\n1. We start by selecting the `country` column from the `europium_production` table.\n2. We use the `SUM` function to calculate the total production quantity for each country, aliasing it as `total_production`.\n3. To calculate the percentage of total Europium production for each country, we divide the',
    sql='```sql\nSELECT country, SUM(quantity) AS total_production, (SUM(quantity) / SUM(SUM(quantity)) OVER ()) * 100 AS percentage_of_total\nFROM europium_production;\n```\n\nStep-by-step reasoning:\n\n1. We start by selecting the `country` column from the `europium_production` table.\n2. We use the `SUM` function to calculate the total production quantity for each country, aliasing it as `total_production`.\n3. To calculate the percentage of total Europium production for each country, we divide the sum of quantities for each country by the total sum of quantities across all countries. This is achieved using'
), 1), (Example({'sql_prompt': 'Find the mobile subscribers with consecutive speed drops greater than 25% for the last 3 months, ordered by subscription IDs.', 'sql_context': 'CREATE TABLE mobile_usage_detailed (subscriber_id INT, month INT, speed FLOAT); INSERT INTO mobile_usage_detailed (subscriber_id, month, speed) VALUES (1, 1, 100), (1, 2, 80), (1, 3, 70), (2, 1, 200), (2, 2, 180), (2, 3, 160), (3, 1, 150), (3, 2, 130), (3, 3, 110);', 'sql': 'SELECT subscriber_id, speed, month FROM (SELECT subscriber_id, speed, month, LAG(speed, 1) OVER (PARTITION BY subscriber_id ORDER BY month) as prev_speed, LAG(speed, 2) OVER (PARTITION BY subscriber_id ORDER BY month) as prev_prev_speed FROM mobile_usage_detailed) t WHERE t.speed < 0.75 * t.prev_speed AND t.speed < 0.75 * t.prev_prev_speed ORDER BY subscriber_id;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT subscriber_id, speed, month\nFROM mobile_usage_detailed\nWHERE speed < 0.75 * (SELECT speed FROM mobile_usage_detailed WHERE month = m.month - 1 AND subscriber_id = m.subscriber_id)\nAND month BETWEEN 10 AND 12\nORDER BY subscriber_id;',
    sql="Let's think step by step in order to produce the SQL query:\n\n**Step 1:** We need to identify mobile subscribers who have experienced a speed drop greater than 25% for three consecutive months.\n\n**Step 2:** We can use a self-join on the `mobile_usage_detailed` table to compare speeds between consecutive months for each subscriber.\n\n**Step 3:** The condition for a speed drop greater than 25% can be calculated by multiplying the previous month's speed by 0.75 and comparing it with the current month's speed.\n\n**Step 4:** We need to filter the data for the last 3 months, which are months 10,"
), 0), (Example({'sql_prompt': 'What is the distribution of AI safety research topics by year?', 'sql_context': "CREATE TABLE if not exists ai_safety_research (year INT, topic VARCHAR(255)); INSERT INTO ai_safety_research (year, topic) VALUES (2018, 'Explainable AI'), (2019, 'Algorithmic fairness'), (2020, 'AI safety'), (2021, 'Robust AI'), (2022, 'AI ethics');", 'sql': 'SELECT year, topic, COUNT(*) OVER (PARTITION BY year) as research_count FROM ai_safety_research ORDER BY year;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT year, COUNT(*) AS topic_count FROM ai_safety_research GROUP BY year ORDER BY year;',
    sql="Here is the SQL query based on the provided SQL prompt and context:\n\n```sql\nSELECT year, COUNT(*) AS topic_count\nFROM ai_safety_research\nGROUP BY year\nORDER BY year;\n```\n\nThis query groups the data by the 'year' column and counts the number of research topics in each year. The results are then ordered by year to show the distribution of AI safety research topics over time."
), 1), (Example({'sql_prompt': "How many forest management practices are recorded in the 'tropical_forests'?", 'sql_context': "CREATE TABLE forest_management (id INT, forest_type VARCHAR(50), practice_count INT); INSERT INTO forest_management (id, forest_type, practice_count) VALUES (1, 'Tropical Forests', 45); INSERT INTO forest_management (id, forest_type, practice_count) VALUES (2, 'Temperate Forests', 34);", 'sql': "SELECT practice_count FROM forest_management WHERE forest_type = 'Tropical Forests';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT practice_count FROM forest_management WHERE forest_type = 'Tropical Forests';",
    sql="Sql Prompt: How many forest management practices are recorded for tropical forests?\n\nSql Context: CREATE TABLE forest_management (id INT, forest_type VARCHAR(50), practice_count INT); INSERT INTO forest_management (id, forest_type, practice_count) VALUES (1, 'Tropical Forests', 45), (2, 'Temperate Forests', 34);\n\nReasoning: We want to know the number of forest management practices for tropical forests. The relevant table is 'forest_management', and we need to filter the results by the 'forest_type' column where the value is 'Tropical Forests'. The SQL query counts the 'practice_count' for these rows.\n\nSql:"
), 1), (Example({'sql_prompt': 'What is the distribution of lifelong learning course enrollments by age group, in total?', 'sql_context': 'CREATE TABLE lifelong_learning (student_id INT, age_group VARCHAR(255), course_id INT); CREATE TABLE courses (course_id INT, course_name VARCHAR(255));', 'sql': 'SELECT l.age_group, COUNT(l.course_id) FROM lifelong_learning l INNER JOIN courses c ON l.course_id = c.course_id GROUP BY l.age_group;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query that addresses the prompt:\n```sql\nSELECT ll.age_group, COUNT(*) AS total_enrollments\nFROM lifelong_learning ll\nJOIN courses c ON ll.course_id = c.course_id\nGROUP BY ll.age_group;\n```\n\n**Reasoning:**\nTo answer the question, we need to count the number of course enrollments for each age group. Here's how we construct the SQL query step by step:\n\n1. We start by selecting from the `lifelong_learning` table (aliased as `ll`) to access the student data.\n2. We use a `JOIN` operation to combine the `lifelong_learning` table",
    sql="Here is the SQL query that addresses the prompt:\n```sql\nSELECT ll.age_group, COUNT(*) AS total_enrollments\nFROM lifelong_learning ll\nJOIN courses c ON ll.course_id = c.course_id\nGROUP BY ll.age_group;\n```\n\n**Reasoning:** To answer the question, we need to count the number of course enrollments for each age group. Here's how we construct the SQL query step by step:\n\n1. We start by selecting from the `lifelong_learning` table (aliased as `ll`) to access the student data.\n2. We use a `JOIN` operation to combine the `lifelong_learning` table with"
), 1), (Example({'sql_prompt': "Insert new records into the Employee table with the following data: EmployeeID 3, FirstName 'Mike', LastName 'Smith', Department 'Environment'.", 'sql_context': 'CREATE TABLE Employee (EmployeeID INT, FirstName VARCHAR(50), LastName VARCHAR(50), Department VARCHAR(50));', 'sql': "INSERT INTO Employee (EmployeeID, FirstName, LastName, Department) VALUES (3, 'Mike', 'Smith', 'Environment');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: INSERT INTO Employee (EmployeeID, FirstName, LastName, Department) VALUES (3, 'Mike', 'Smith', 'Environment');",
    sql="Sql Prompt: Insert new records into the 'Employee' table with the following data: EmployeeID 4, FirstName 'Emma', LastName 'Johnson', Department 'Marketing'.\n\nSql Context: CREATE TABLE Employee (EmployeeID INT, FirstName VARCHAR(50), LastName VARCHAR(50), Department VARCHAR(50));\n\nReasoning: Let's think step by step in order to produce the SQL. We need to insert a new record into the 'Employee' table with the provided data. The SQL INSERT INTO statement is used for this purpose.\n\nSql: INSERT INTO Employee (EmployeeID, FirstName, LastName, Department) VALUES (4, 'Emma', 'Johnson', 'Marketing');"
), 0), (Example({'sql_prompt': 'Which cosmetic brands have the highest average customer rating?', 'sql_context': "CREATE TABLE brand (id INT, name VARCHAR(255), avg_rating FLOAT); CREATE TABLE rating (brand_id INT, rating FLOAT); INSERT INTO brand (id, name, avg_rating) VALUES (1, 'Lush', 4.2), (2, 'The Body Shop', 4.1), (3, 'Sephora', 4.3); INSERT INTO rating (brand_id, rating) VALUES (1, 4.5), (1, 4.0), (2, 4.1), (2, 4.2), (3, 4.4), (3, 4.3);", 'sql': 'SELECT b.name, AVG(r.rating) as avg_rating FROM brand b JOIN rating r ON b.id = r.brand_id GROUP BY b.name ORDER BY avg_rating DESC;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT b.name AS brand_name, AVG(r.rating) AS avg_rating\nFROM brand b\nJOIN rating r ON b.id = r.brand_id\nGROUP BY b.id, b.name\nORDER BY avg_rating DESC;',
    sql="Let's think step by step in order to produce the SQL query:\n\n**Step 1: Understanding the Problem**\nYou want to find the cosmetic brands with the highest average customer ratings.\n\n**Step 2: Identifying the Tables and Columns**\nWe have two tables: 'brand' and 'rating'. The relevant columns are 'name' (brand name) and 'avg_rating' (average rating) from the 'brand' table, and 'rating' from the 'rating' table.\n\n**Step 3: Formulating the SQL Query**\nWe need to join the two tables on the 'id' and 'brand_id' columns, calculate the average rating for each brand, and then order"
), 0), (Example({'sql_prompt': 'How many unique volunteers worked on projects in each cause area?', 'sql_context': "CREATE TABLE volunteers (id INT, name VARCHAR(30), cause_area VARCHAR(20)); INSERT INTO volunteers (id, name, cause_area) VALUES (1, 'Bob', 'children'), (2, 'Alice', 'children'), (3, 'Charlie', 'health');", 'sql': 'SELECT cause_area, COUNT(DISTINCT name) FROM volunteers GROUP BY cause_area;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT cause_area, COUNT(DISTINCT name) AS unique_volunteers FROM volunteers GROUP BY cause_area;',
    sql='Here is the SQL query based on the provided prompt and context:\n\n```sql\nSELECT cause_area, COUNT(DISTINCT name) AS unique_volunteers\nFROM volunteers\nGROUP BY cause_area;\n```\n\nThis query selects the `cause_area` and counts the distinct names of volunteers for each cause area using the `COUNT(DISTINCT ...)` function. The `GROUP BY` clause groups the results by `cause_area`, so you get the number of unique volunteers for each cause area.'
), 1), (Example({'sql_prompt': 'Who were the top 3 content creators in terms of likes received on their posts in January 2022?', 'sql_context': "CREATE SCHEMA content; CREATE TABLE creators(creator_id INT, name VARCHAR(255), total_likes INT); INSERT INTO creators (creator_id, name, total_likes) VALUES (1, 'Alice', 5000); INSERT INTO creators (creator_id, name, total_likes) VALUES (2, 'Bob', 7000);", 'sql': 'SELECT name, SUM(total_likes) AS total_likes_january FROM content.creators WHERE MONTH(created_date) = 1 GROUP BY name ORDER BY total_likes_january DESC LIMIT 3;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query to answer the prompt:\n```sql\nSELECT name, SUM(total_likes) AS total_likes_january\nFROM creators\nJOIN (\n    SELECT creator_id, SUM(likes) AS total_likes\n    FROM content.posts\n    WHERE EXTRACT(MONTH FROM publication_date) = 1 AND EXTRACT(YEAR FROM publication_date) = 2022\n    GROUP BY creator_id\n) AS post_likes ON creators.creator_id = post_likes.creator_id\nGROUP BY name\nORDER BY total_likes_january DESC\nLIMIT 3;\n```\n\nStep-by-step reasoning:\n1. We first create a subquery',
    sql='Here is the SQL query to answer the prompt: \n\n```sql\nSELECT name, SUM(total_likes) AS total_likes_january\nFROM creators\nJOIN (\n    SELECT creator_id, SUM(likes) AS total_likes\n    FROM content.posts\n    WHERE EXTRACT(MONTH FROM publication_date) = 1 AND EXTRACT(YEAR FROM publication_date) = 2022\n    GROUP BY creator_id\n) AS post_likes\nON creators.creator_id = post_likes.creator_id\nGROUP BY name\nORDER BY total_likes_january DESC\nLIMIT 3;\n```\n\nStep-by-step reasoning: \n\n1. We first create a'
), 0), (Example({'sql_prompt': "Update records in the 'Volunteers' table where the volunteer's skill level is 'Beginner' and change it to 'Intermediate'", 'sql_context': 'CREATE TABLE Volunteers (id INT PRIMARY KEY, volunteer_name VARCHAR(255), skill_level VARCHAR(255), last_volunteered DATE);', 'sql': "UPDATE Volunteers SET skill_level = 'Intermediate' WHERE skill_level = 'Beginner';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: UPDATE Volunteers SET skill_level = 'Intermediate' WHERE skill_level = 'Beginner';",
    sql="SQL Prompt: Update records in the 'Volunteers' table where the volunteer's skill level is 'Beginner' and change it to 'Intermediate'.\n\nSQL Context: CREATE TABLE Volunteers (id INT PRIMARY KEY, volunteer_name VARCHAR(255), skill_level VARCHAR(255), last_volunteered DATE);\n\nReasoning: We want to update records in the 'Volunteers' table where the skill level is 'Beginner' and change it to 'Intermediate'. We will use the UPDATE statement with a WHERE clause to specify the condition for updating only the records with the skill level 'Beginner'.\n\nSQL: UPDATE Volunteers SET skill_level = 'Intermediate' WHERE skill_level = 'Beginner"
), 1), (Example({'sql_prompt': 'Identify the number of farmers involved in urban agriculture initiatives in California and New York in 2019.', 'sql_context': "CREATE TABLE Urban_Agriculture (Farmer_ID INT, State VARCHAR(20), Initiative VARCHAR(20), Year INT); INSERT INTO Urban_Agriculture (Farmer_ID, State, Initiative, Year) VALUES (101, 'California', 'Community_Garden', 2019), (102, 'California', 'Rooftop_Farming', 2019), (103, 'New_York', 'Community_Garden', 2019);", 'sql': "SELECT COUNT(DISTINCT Farmer_ID) FROM Urban_Agriculture WHERE State IN ('California', 'New York') AND Year = 2019 AND Initiative IN ('Community_Garden', 'Rooftop_Farming');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT State, COUNT(Farmer_ID) AS NumberOfFarmers FROM Urban_Agriculture WHERE Year = 2019 GROUP BY State;',
    sql='Here is the SQL query based on the provided prompt and context:\n\n```sql\nSELECT State, COUNT(Farmer_ID) AS NumberOfFarmers\nFROM Urban_Agriculture\nWHERE Year = 2019\nGROUP BY State;\n```\n\nThis query selects the state and counts the number of unique farmer IDs from the `Urban_Agriculture` table where the year is 2019. The results are then grouped by state, providing the number of farmers involved in urban agriculture initiatives in California and New York for that specific year.'
), 1), (Example({'sql_prompt': "Update the accommodation type for a student with a StudentID of 2 from 'Assistive Listening Devices' to 'Sign Language Interpretation'.", 'sql_context': "CREATE TABLE StudentAccommodations (StudentID INT, StudentName VARCHAR(255), DisabilityType VARCHAR(255), AccommodationType VARCHAR(255), GraduationYear INT); INSERT INTO StudentAccommodations (StudentID, StudentName, DisabilityType, AccommodationType, GraduationYear) VALUES (1, 'John Doe', 'Visual Impairment', 'Sign Language Interpretation', 2018), (2, 'Jane Smith', 'Hearing Impairment', 'Assistive Listening Devices', NULL), (3, 'Michael Johnson', 'Mobility Impairment', 'Assistive Technology', 2019), (4, 'Sara Johnson', 'Physical Disability', 'Mobility Assistance', 2022);", 'sql': "UPDATE StudentAccommodations SET AccommodationType = 'Sign Language Interpretation' WHERE StudentID = 2;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: UPDATE StudentAccommodations SET AccommodationType = 'Sign Language Interpretation' WHERE StudentID = 2;",
    sql="Sql Prompt: Update the accommodation type for a student with a StudentID of 2 from 'Assistive Listening Devices' to 'Sign Language Interpretation'.\n\nSql Context: CREATE TABLE StudentAccommodations (StudentID INT, StudentName VARCHAR(255), DisabilityType VARCHAR(255), AccommodationType VARCHAR(255), GraduationYear INT); INSERT INTO StudentAccommodations (StudentID, StudentName, DisabilityType, AccommodationType, GraduationYear) VALUES (1, 'John Doe', 'Visual Impairment', 'Sign Language Interpretation', 2018), (2, 'Jane Smith', 'Hearing Impairment', 'Assistive Listening Devices', NULL), (3, 'Michael Johnson', '"
), 1), (Example({'sql_prompt': 'What is the minimum square footage of an inclusive housing unit in the city of Miami?', 'sql_context': "CREATE TABLE housing (id INT, city VARCHAR(20), size INT, inclusive BOOLEAN); INSERT INTO housing (id, city, size, inclusive) VALUES (1, 'Miami', 800, TRUE), (2, 'Miami', 1000, FALSE), (3, 'Miami', 1200, TRUE);", 'sql': "SELECT MIN(size) FROM housing WHERE city = 'Miami' AND inclusive = TRUE;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT MIN(size) FROM housing WHERE city = 'Miami' AND inclusive = TRUE;",
    sql="Sql Prompt: What is the minimum square footage of an inclusive housing unit in the city of Miami?\n\nSql Context: CREATE TABLE housing (id INT, city VARCHAR(20), size INT, inclusive BOOLEAN); INSERT INTO housing (id, city, size, inclusive) VALUES (1, 'Miami', 800, TRUE), (2, 'Miami', 1000, FALSE), (3, 'Miami', 1200, TRUE);\n\nReasoning: To find the minimum square footage of an inclusive housing unit in Miami, we need to select the minimum value of the 'size' column from the 'housing' table where the city is 'Miami' and the 'inclusive' column is"
), 1), (Example({'sql_prompt': 'How many works were exhibited in the year 1950?', 'sql_context': "CREATE TABLE exhibitions (exhibition_id INT PRIMARY KEY, exhibition_name TEXT, year INT, location TEXT);CREATE TABLE exhibits (exhibit_id INT PRIMARY KEY, work_id INT, exhibition_id INT, FOREIGN KEY (work_id) REFERENCES works(work_id), FOREIGN KEY (exhibition_id) REFERENCES exhibitions(exhibition_id));INSERT INTO exhibitions (exhibition_id, exhibition_name, year, location) VALUES (1, 'Documenta', 1950, 'Kassel, Germany'); INSERT INTO exhibits (exhibit_id, work_id, exhibition_id) VALUES (1, 1, 1);", 'sql': 'SELECT COUNT(*) FROM exhibits e JOIN exhibitions ex ON e.exhibition_id = ex.exhibition_id WHERE ex.year = 1950;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT COUNT(DISTINCT e.exhibition_id) AS num_exhibitions\nFROM exhibitions e\nJOIN exhibits ex ON e.exhibition_id = ex.exhibition_id\nWHERE e.year = 1950;',
    sql="Let's think step by step in order to produce the SQL query:\n\n**Step 1:** We want to count the number of unique exhibitions from the 'exhibitions' table where the year is 1950.\n\n**Step 2:** We will use a SELECT statement with the COUNT() function to count the distinct exhibition_ids from the 'exhibitions' table.\n\n**Step 3:** We need to join the 'exhibitions' table with the 'exhibits' table on the 'exhibition_id' column to link the exhibitions with the exhibited works.\n\n**Step 4:** We use a WHERE clause to filter the results for the year 1950"
), 0), (Example({'sql_prompt': 'What is the total number of articles written by each author in each region?', 'sql_context': "CREATE TABLE authors (id INT, name TEXT); CREATE TABLE regions (id INT, name TEXT); CREATE TABLE articles (id INT, title TEXT, content TEXT, author_id INT, region_id INT); INSERT INTO authors (id, name) VALUES (1, 'John Doe'), (2, 'Jane Smith'); INSERT INTO regions (id, name) VALUES (1, 'North'), (2, 'South'), (3, 'East'), (4, 'West'); INSERT INTO articles (id, title, content, author_id, region_id) VALUES (1, 'Article 1', 'Content 1', 1, 1), (2, 'Article 2', 'Content 2', 2, 2), (3, 'Article 3', 'Content 3', 1, 3), (4, 'Article 4', 'Content 4', 2, 4);", 'sql': 'SELECT authors.name, regions.name, COUNT(articles.id) FROM authors INNER JOIN articles ON authors.id = articles.author_id INNER JOIN regions ON regions.id = articles.region_id GROUP BY authors.name, regions.name;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT a.name AS author_name, r.name AS region_name, COUNT(*) AS total_articles\nFROM authors a\nJOIN articles art ON a.id = art.author_id\nJOIN regions r ON art.region_id = r.id\nGROUP BY a.id, r.id;',
    sql='Let\'s think step by step in order to produce the SQL query:\n\n**Step 1:** We want to know the total number of articles written by each author in each region. This suggests that we need to join the "authors" and "articles" tables on the "author_id" field, and then join the "regions" table based on the "region_id" field.\n\n**Step 2:** We need to group the results by author and region to get the count of articles for each unique combination.\n\n**Step 3:** We want to alias the tables and fields for clarity in the query result.\n\nPutting this all together, we get the following SQL query:\n\n```sql'
), 1), (Example({'sql_prompt': 'How many tunnels in Washington state were constructed after 2010?', 'sql_context': "CREATE TABLE tunnels (id INT, name TEXT, state TEXT, build_year INT); INSERT INTO tunnels (id, name, state, build_year) VALUES (1, 'WA-1 Underpass', 'WA', 2012);", 'sql': "SELECT COUNT(*) FROM tunnels WHERE state = 'WA' AND build_year > 2010;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT COUNT(*) FROM tunnels WHERE state = 'WA' AND build_year > 2010;",
    sql="Here is the SQL query based on the provided SQL prompt and context:\n\n**SQL Prompt:** How many tunnels in Washington state were constructed after 2010?\n**SQL Context:** \n```sql\nCREATE TABLE tunnels (\n    id INT,\n    name TEXT,\n    state TEXT,\n    build_year INT\n);\nINSERT INTO tunnels (id, name, state, build_year)\nVALUES (1, 'WA-1 Underpass', 'WA', 2012);\n```\n**SQL Query:** \n```sql\nSELECT COUNT(*)\nFROM tunnels\nWHERE state = 'WA' AND build_year > 2010;\n```\n\n**Reasoning:**"
), 1), (Example({'sql_prompt': 'List the top 5 models with the highest explainability scores and their development team names.', 'sql_context': 'CREATE TABLE ModelExplainabilityScores (ModelID INT, ExplainabilityScore INT, TeamID INT); CREATE TABLE TeamNames (TeamID INT, TeamName VARCHAR(50));', 'sql': 'SELECT ModelExplainabilityScores.ModelID, MAX(ModelExplainabilityScores.ExplainabilityScore) AS MaxExplainabilityScore, TeamNames.TeamName FROM ModelExplainabilityScores INNER JOIN TeamNames ON ModelExplainabilityScores.TeamID = TeamNames.TeamID GROUP BY ModelExplainabilityScores.TeamID ORDER BY MaxExplainabilityScore DESC, TeamNames.TeamName DESC LIMIT 5;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query based on the provided prompt and context:\n```sql\nSELECT m.ModelID, t.TeamName, m.ExplainabilityScore\nFROM ModelExplainabilityScores m\nJOIN TeamNames t ON m.TeamID = t.TeamID\nORDER BY m.ExplainabilityScore DESC\nLIMIT 5;\n```\n\n**Reasoning:**\nTo list the top 5 models with the highest explainability scores and their development team names, we need to join the `ModelExplainabilityScores` table (aliased as `m`) with the `TeamNames` table (aliased as `t`) on the `TeamID` column. This will allow us to associate each model's score with its",
    sql="Here is the SQL query based on the provided prompt and context: \n\n```sql\nSELECT m.ModelID, t.TeamName, m.ExplainabilityScore\nFROM ModelExplainabilityScores m\nJOIN TeamNames t ON m.TeamID = t.TeamID\nORDER BY m.ExplainabilityScore DESC\nLIMIT 5;\n```\n\n**Reasoning:** To list the top 5 models with the highest explainability scores and their development team names, we need to join the `ModelExplainabilityScores` table (aliased as `m`) with the `TeamNames` table (aliased as `t`) on the `TeamID` column. This will allow us to associate each model's score with its"
), 1), (Example({'sql_prompt': 'How many renewable energy power plants are there in Texas?', 'sql_context': "CREATE TABLE power_plants (state VARCHAR(255), source_type VARCHAR(255), count INT); INSERT INTO power_plants (state, source_type, count) VALUES ('Texas', 'Wind', 45), ('Texas', 'Solar', 25), ('Texas', 'Hydro', 10);", 'sql': "SELECT SUM(count) FROM power_plants WHERE state = 'Texas';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT COUNT(*) FROM power_plants WHERE state = 'Texas' AND source_type = 'Renewable';",
    sql="Sql Prompt: How many renewable energy power plants are there in Texas?\n\nSql Context: CREATE TABLE power_plants (state VARCHAR(255), source_type VARCHAR(255), count INT); INSERT INTO power_plants (state, source_type, count) VALUES ('Texas', 'Wind', 45), ('Texas', 'Solar', 25), ('Texas', 'Hydro', 10);\n\nReasoning: To answer this query, we need to count the number of rows in the 'power_plants' table where the 'state' is 'Texas' and the 'source_type' is a renewable energy source. The 'source_type' field includes different types of renewable energy"
), 1), (Example({'sql_prompt': 'Find the top 5 countries with the lowest financial capability scores in Europe.', 'sql_context': 'CREATE TABLE financial_capability (id INT, country VARCHAR(255), score INT);', 'sql': "SELECT country, score FROM (SELECT country, score, ROW_NUMBER() OVER (ORDER BY score ASC) rn FROM financial_capability WHERE region = 'Europe') t WHERE rn <= 5;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query to find the top 5 countries with the lowest financial capability scores in Europe:\n```sql\nSELECT country, score\nFROM financial_capability\nWHERE country IN (\n    SELECT country\n    FROM financial_capability\n    WHERE score = (\n        SELECT MIN(score)\n        FROM financial_capability\n        WHERE country IN (\n            SELECT country\n            FROM countries\n            WHERE continent = 'Europe'\n        )\n    )\n)\nORDER BY score ASC\nLIMIT 5;\n```\n\nStep-by-step reasoning:\n\n1. We first select the countries in Europe using the `countries` table and filtering by the continent 'Europe'.\n2. We then select the rows from the `financial_capability` table where the",
    sql="SELECT country, score FROM financial_capability WHERE country IN ( SELECT country FROM financial_capability WHERE score = ( SELECT MIN(score) FROM financial_capability WHERE country IN ( SELECT country FROM countries WHERE continent = 'Europe' ) ) ) ORDER BY score ASC LIMIT 5;"
), 0), (Example({'sql_prompt': 'What is the correlation between climate change and biodiversity in the Arctic?', 'sql_context': "CREATE TABLE Climate_Change (id INT PRIMARY KEY, year INT, temperature FLOAT, region VARCHAR(50)); CREATE TABLE Biodiversity (id INT, year INT, species_count INT, region VARCHAR(50), climate_id INT, FOREIGN KEY (climate_id) REFERENCES Climate_Change(id)); INSERT INTO Climate_Change (id, year, temperature, region) VALUES (1, 2000, -10.0, 'Arctic'), (2, 2010, -9.5, 'Arctic'); INSERT INTO Biodiversity (id, year, species_count, region, climate_id) VALUES (1, 2000, 100, 'Arctic', 1), (2, 2010, 105, 'Arctic', 2);", 'sql': "SELECT Climate_Change.year, Climate_Change.temperature, Biodiversity.species_count FROM Climate_Change INNER JOIN Biodiversity ON Climate_Change.id = Biodiversity.climate_id WHERE Climate_Change.region = 'Arctic';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT c.region, b.species_count, c.temperature, CORRELATE(b.species_count, c.temperature) AS correlation\nFROM Climate_Change c\nJOIN Biodiversity b ON c.id = b.climate_id\nWHERE c.region = 'Arctic';",
    sql='Here is the SQL query based on the provided prompt and context:\n\n**Sql Prompt:** What is the correlation between climate change and biodiversity in the Arctic?\n**Sql Context:** \n```sql\nCREATE TABLE Climate_Change (\n    id INT PRIMARY KEY,\n    year INT,\n    temperature FLOAT,\n    region VARCHAR(50)\n);\n\nCREATE TABLE Biodiversity (\n    id INT,\n    year INT,\n    species_count INT,\n    region VARCHAR(50),\n    climate_id INT,\n    FOREIGN KEY (climate_id) REFERENCES Climate_Change(id)\n);\n\nINSERT INTO Climate_Change (id, year, temperature, region)\nVALUES (1, 2000, -1'
), 0), (Example({'sql_prompt': 'What is the average budget allocated for ethical AI research by country?', 'sql_context': "CREATE TABLE Country (CountryID INT PRIMARY KEY, CountryName VARCHAR(100), Budget DECIMAL(10,2)); INSERT INTO Country (CountryID, CountryName, Budget) VALUES (1, 'USA', 5000000.00), (2, 'Canada', 3000000.00), (3, 'Mexico', 1000000.00);", 'sql': 'SELECT AVG(Budget) as AvgBudget, CountryName FROM Country GROUP BY CountryName;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT CountryName, AVG(Budget) AS Average_Budget FROM Country GROUP BY CountryName;',
    sql='Here is the SQL query based on the provided SQL prompt and context:\n\n```sql\nSELECT CountryName, AVG(Budget) AS Average_Budget\nFROM Country\nGROUP BY CountryName;\n```\n\nThis query calculates the average budget allocated for ethical AI research by grouping the data by country name and then computing the average of the budget values within each group.'
), 0), (Example({'sql_prompt': 'What is the total fare collected for each train line?', 'sql_context': "CREATE TABLE train_lines (line_id INT, line_name TEXT); CREATE TABLE fares (fare_id INT, line_id INT, fare DECIMAL); INSERT INTO train_lines VALUES (1, 'Line 1'), (2, 'Line 2'), (3, 'Line 3'); INSERT INTO fares VALUES (1, 1, 3.50), (2, 1, 3.50), (3, 2, 4.25), (4, 3, 5.00), (5, 3, 5.00);", 'sql': 'SELECT train_lines.line_name, SUM(fares.fare) AS total_fare FROM train_lines INNER JOIN fares ON train_lines.line_id = fares.line_id GROUP BY train_lines.line_id;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT tl.line_name, SUM(f.fare) AS total_fare_collected\nFROM train_lines tl\nJOIN fares f ON tl.line_id = f.line_id\nGROUP BY tl.line_name;',
    sql="Let's think step by step in order to produce the SQL query:\n\n**Step 1:** We want to calculate the total fare collected for each train line.\n\n**Step 2:** We have two tables: `train_lines` and `fares`. The `train_lines` table contains information about the different train lines, and the `fares` table contains information about the fares collected for each line.\n\n**Step 3:** We need to join the two tables on the common column, which is `line_id`, to associate the fares with their respective train lines.\n\n**Step 4:** To calculate the total fare collected for each train line, we will use the `SUM` function on the"
), 0), (Example({'sql_prompt': 'What is the total revenue for cosmetics products that are not cruelty-free?', 'sql_context': 'CREATE TABLE product (product_id INT, name TEXT, price FLOAT, cruelty_free BOOLEAN); CREATE TABLE sales (sale_id INT, product_id INT, quantity INT);', 'sql': 'SELECT SUM(price * quantity) FROM product INNER JOIN sales ON product.product_id = sales.product_id WHERE cruelty_free = FALSE;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Here is the SQL query based on the provided prompt and context:\n```sql\nSELECT p.name AS product_name, s.quantity * p.price AS revenue\nFROM product p\nJOIN sales s ON p.product_id = s.product_id\nWHERE p.cruelty_free = FALSE;\n```\n\nReasoning: To calculate the total revenue for cosmetics products that are not cruelty-free, we need to join the `product` table with the `sales` table on the `product_id` column. We then filter the results to include only those products where the `cruelty_free` column is set to `FALSE`. The revenue for each product is calculated by multiplying the quantity',
    sql='Here is the SQL query based on the provided prompt and context:\n```sql\nSELECT p.name AS product_name, s.quantity * p.price AS revenue\nFROM product p\nJOIN sales s ON p.product_id = s.product_id\nWHERE p.cruelty_free = FALSE;\n```\n\nReasoning: To calculate the total revenue for cosmetics products that are not cruelty-free, we need to join the `product` table with the `sales` table on the `product_id` column. We then filter the results to include only those products where the `cruelty_free` column is set to `FALSE`. The revenue for each product is calculated by multiplying the quantity'
), 0), (Example({'sql_prompt': 'What is the total cost of permits for projects with permit numbers greater than 700?', 'sql_context': "CREATE TABLE permit_data (id INT, project VARCHAR(50), permit_number INT, start_date DATE, permit_cost DECIMAL(10,2)); INSERT INTO permit_data (id, project, permit_number, start_date, permit_cost) VALUES (1, 'Office Building', 450, '2019-12-20', 850.00), (2, 'Residential Apartments', 751, '2021-03-01', 1200.50), (3, 'School', 333, '2020-06-15', 500.25), (4, 'Mall', 780, '2020-12-01', 1500.75);", 'sql': 'SELECT SUM(permit_cost) FROM permit_data WHERE permit_number > 700;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT SUM(permit_cost) AS total_cost FROM permit_data WHERE permit_number > 700;',
    sql="Here is the SQL query based on the provided SQL prompt and context:\n\n**SQL Prompt:** What is the total cost of permits for projects with permit numbers greater than 700?\n**SQL Context:**\n```sql\nCREATE TABLE permit_data (\n    id INT,\n    project VARCHAR(50),\n    permit_number INT,\n    start_date DATE,\n    permit_cost DECIMAL(10,2)\n);\nINSERT INTO permit_data (id, project, permit_number, start_date, permit_cost)\nVALUES (1, 'Office Building', 450, '2019-12-20', 850.00),\n       ("
), 0), (Example({'sql_prompt': 'Find the total square footage of wheelchair-accessible properties in Boston.', 'sql_context': "CREATE TABLE properties (id INT, city VARCHAR(20), square_footage INT, wheelchair_accessible BOOLEAN); INSERT INTO properties (id, city, square_footage, wheelchair_accessible) VALUES (1, 'Boston', 1000, true); INSERT INTO properties (id, city, square_footage, wheelchair_accessible) VALUES (2, 'Boston', 1200, false);", 'sql': "SELECT SUM(square_footage) FROM properties WHERE city = 'Boston' AND wheelchair_accessible = true;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT SUM(square_footage) AS total_square_footage FROM properties WHERE city = 'Boston' AND wheelchair_accessible = TRUE;",
    sql="Here is the SQL query based on the provided SQL prompt and context:\n\n**SQL Prompt:** Find the total square footage of wheelchair-accessible properties in Boston.\n**SQL Context:**\n```sql\nCREATE TABLE properties (\n    id INT,\n    city VARCHAR(20),\n    square_footage INT,\n    wheelchair_accessible BOOLEAN\n);\nINSERT INTO properties (id, city, square_footage, wheelchair_accessible)\nVALUES (1, 'Boston', 1000, true),\n       (2, 'Boston', 1200, false);\n```\n**Reasoning:** We want to find the total square footage of properties in Boston that are wheelchair accessible. To do this, we will"
), 1), (Example({'sql_prompt': 'Which operators have the highest average production quantity per well?', 'sql_context': "CREATE TABLE wells (well_id INT, well_name TEXT, production_qty FLOAT, operator_id INT); INSERT INTO wells (well_id, well_name, production_qty, operator_id) VALUES (1, 'Well A', 1000, 1), (2, 'Well B', 1500, 1), (3, 'Well C', 800, 2); CREATE TABLE operators (operator_id INT, operator_name TEXT); INSERT INTO operators (operator_id, operator_name) VALUES (1, 'ABC Inc.'), (2, 'DEF'), (3, 'GHI Inc.');", 'sql': 'SELECT o.operator_name, AVG(w.production_qty) as avg_production FROM wells w JOIN operators o ON w.operator_id = o.operator_id GROUP BY o.operator_name ORDER BY avg_production DESC;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT o.operator_name, AVG(w.production_qty) AS avg_production\nFROM wells w\nJOIN operators o ON w.operator_id = o.operator_id\nGROUP BY o.operator_name\nORDER BY avg_production DESC;',
    sql="Let's think step by step in order to produce the SQL query:\n\n**Step 1:** We need to join the `wells` table with the `operators` table on the `operator_id` column to associate each well with its respective operator.\n**Step 2:** Next, we group the results by operator name to calculate the average production quantity for each operator.\n**Step 3:** Finally, we order the results in descending order based on the average production quantity to identify the operators with the highest averages first.\n\nSql: ```sql\nSELECT o.operator_name, AVG(w.production_qty) AS avg_production\nFROM wells w\nJOIN operators o ON w.operator_id ="
), 1), (Example({'sql_prompt': 'What was the average number of comments per post in Oceania in the last month?', 'sql_context': "CREATE TABLE comments_posts(region VARCHAR(20), post_date DATE, comments INT, posts INT); INSERT INTO comments_posts(region, post_date, comments, posts) VALUES('Oceania', '2021-09-01', 10, 10), ('Oceania', '2021-09-02', 12, 12), ('Oceania', '2021-09-03', 14, 14), ('Oceania', '2021-09-04', 16, 16), ('Oceania', '2021-09-05', 18, 18), ('Oceania', '2021-09-06', 20, 20), ('Oceania', '2021-09-07', 22, 22);", 'sql': "SELECT AVG(comments/posts) FROM comments_posts WHERE region = 'Oceania' AND post_date >= DATEADD(month, -1, CURRENT_DATE)"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT region, AVG(comments) AS average_comments FROM comments_posts WHERE region = 'Oceania' AND post_date BETWEEN '2021-08-22' AND '2021-09-22' GROUP BY region;",
    sql="Here is the SQL query based on the provided SQL prompt and context:\n\n```sql\nSELECT region,\n       AVG(comments) AS average_comments\nFROM comments_posts\nWHERE region = 'Oceania'\n  AND post_date BETWEEN '2021-08-22' AND '2021-09-22'\nGROUP BY region;\n```\n\nThis query calculates the average number of comments per post for the region 'Oceania' within the specified date range. The `AVG` function is used to calculate the average, and the `GROUP BY` clause groups the results by region."
), 0), (Example({'sql_prompt': 'What is the geopolitical risk assessment score for each country in 2020?', 'sql_context': "CREATE TABLE GeopoliticalRiskAssessments (assessment_id INT, assessment_name VARCHAR(50), score INT, assessment_date DATE, country VARCHAR(50)); INSERT INTO GeopoliticalRiskAssessments (assessment_id, assessment_name, score, assessment_date, country) VALUES (1, 'Assessment A', 7, '2020-01-01', 'USA'), (2, 'Assessment B', 5, '2020-02-15', 'Russia'), (3, 'Assessment C', 8, '2020-03-31', 'China');", 'sql': "SELECT country, score FROM GeopoliticalRiskAssessments WHERE assessment_date BETWEEN '2020-01-01' AND '2020-12-31';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT country, score AS geopolitical_risk_score FROM GeopoliticalRiskAssessments WHERE EXTRACT(YEAR FROM assessment_date) = 2020;',
    sql="Here is the SQL query based on the provided SQL prompt and context:\n\n```sql\nSELECT country, score AS geopolitical_risk_score\nFROM GeopoliticalRiskAssessments\nWHERE EXTRACT(YEAR FROM assessment_date) = 2020;\n```\n\nReasoning: In this query, we are selecting the 'country' column and calculating the average 'score' for each country. We use the `EXTRACT` function to get the year from the 'assessment_date' column and filter the results to only include assessments from the year 2020. This will give us the geopolitical risk assessment score for each country in that specific year."
), 1), (Example({'sql_prompt': 'Find the total revenue for events with an attendance over 200 in 2021.', 'sql_context': "CREATE TABLE events (event_id INT, event_name VARCHAR(50), attendance INT, revenue DECIMAL(10,2), event_date DATE); INSERT INTO events (event_id, event_name, attendance, revenue, event_date) VALUES (1, 'Art Exhibition', 250, 15000, '2021-06-01'); INSERT INTO events (event_id, event_name, attendance, revenue, event_date) VALUES (2, 'Theater Performance', 180, 12000, '2021-07-15');", 'sql': 'SELECT SUM(revenue) FROM events WHERE attendance > 200 AND YEAR(event_date) = 2021;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT SUM(revenue) AS total_revenue\nFROM events\nWHERE attendance > 200 AND EXTRACT(YEAR FROM event_date) = 2021;',
    sql="Sql Prompt: Find the total revenue for events with an attendance over 200 in 2021.\n\nSql Context: CREATE TABLE events (event_id INT, event_name VARCHAR(50), attendance INT, revenue DECIMAL(10,2), event_date DATE); INSERT INTO events (event_id, event_name, attendance, revenue, event_date) VALUES (1, 'Art Exhibition', 250, 15000, '2021-06-01'); INSERT INTO events (event_id, event_name, attendance, revenue, event_date) VALUES (2, 'Theater Performance', 180, 1"
), 0), (Example({'sql_prompt': "find the number of records in the CommunityHealthStatistics table where the State is 'TX' and the County is 'Harris'", 'sql_context': "CREATE TABLE CommunityHealthStatistics (ID INT, State TEXT, County TEXT, Population INT, AverageIncome FLOAT); INSERT INTO CommunityHealthStatistics (ID, State, County, Population, AverageIncome) VALUES (1, 'TX', 'Harris', 4500000, 60000), (2, 'CA', 'LA', 2500000, 70000);", 'sql': "SELECT * FROM CommunityHealthStatistics WHERE State = 'TX' AND County = 'Harris';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT COUNT(*) FROM CommunityHealthStatistics WHERE State = 'TX' AND County = 'Harris';",
    sql="Sql Prompt: Find the number of records in the 'CommunityHealthStatistics' table where the state is 'TX' and the county is 'Harris'.\n\nSql Context: CREATE TABLE CommunityHealthStatistics (ID INT, State TEXT, County TEXT, Population INT, AverageIncome FLOAT); INSERT INTO CommunityHealthStatistics (ID, State, County, Population, AverageIncome) VALUES (1, 'TX', 'Harris', 4500000, 60000), (2, 'CA', 'LA', 2500000, 70000);\n\nReasoning: We want to count the number of records in the table that meet specific conditions. The conditions are that"
), 1), (Example({'sql_prompt': "Insert a new record into the 'weapons' table with the following data: 'Javelin', 'USA', 'in-development'", 'sql_context': "CREATE TABLE weapons (id INT PRIMARY KEY, name VARCHAR(255), origin VARCHAR(255), status VARCHAR(255)); INSERT INTO weapons (id, name, origin) VALUES (1, 'AK-47', 'Russia'), (2, 'RPG-7', 'Russia');", 'sql': "INSERT INTO weapons (name, origin, status) VALUES ('Javelin', 'USA', 'in-development');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: INSERT INTO weapons (name, origin, status) VALUES ('Javelin', 'USA', 'in-development');",
    sql="Sql Prompt: Insert a new record into the 'weapons' table with the following data: 'Javelin', 'USA', and 'in-development'.\n\nSql Context: CREATE TABLE weapons (id INT PRIMARY KEY, name VARCHAR(255), origin VARCHAR(255), status VARCHAR(255)); INSERT INTO weapons (id, name, origin) VALUES (1, 'AK-47', 'Russia'), (2, 'RPG-7', 'Russia');\n\nReasoning: To insert a new record into the 'weapons' table, we need to use the INSERT INTO statement. We will provide values for the name, origin, and status columns as specified in the prompt. The origin is"
), 1), (Example({'sql_prompt': 'Count the number of mining incidents per month in 2021.', 'sql_context': "CREATE TABLE incidents (id INT, date DATE, incident_type TEXT); INSERT INTO incidents (id, date, incident_type) VALUES (1, '2021-01-05', 'equipment_failure'); INSERT INTO incidents (id, date, incident_type) VALUES (2, '2021-03-12', 'safety_violation');", 'sql': "SELECT DATE_PART('month', date) AS month, COUNT(*) FROM incidents WHERE date >= '2021-01-01' AND date < '2022-01-01' GROUP BY month;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT EXTRACT(MONTH FROM date) as month, COUNT(*) as incident_count FROM incidents WHERE EXTRACT(YEAR FROM date) = 2021 GROUP BY month;',
    sql="Here is the SQL query based on the provided SQL prompt and context:\n\n```sql\nSELECT EXTRACT(MONTH FROM date) AS month, COUNT(*) AS incident_count\nFROM incidents\nWHERE EXTRACT(YEAR FROM date) = 2021\nGROUP BY month;\n```\n\nThis query extracts the month from the 'date' column and counts the number of incidents for each month in the year 2021. The results are grouped by month, providing a count of mining incidents for each month during that year."
), 1), (Example({'sql_prompt': "How many workers are employed in 'renewable energy' sector?", 'sql_context': "CREATE TABLE workers (id INT, worker_name VARCHAR(255), department VARCHAR(255)); INSERT INTO workers (id, worker_name, department) VALUES (1, 'John Doe', 'renewable energy'), (2, 'Jane Smith', 'textiles'), (3, 'Michael Brown', 'renewable energy');", 'sql': "SELECT COUNT(*) FROM workers WHERE department = 'renewable energy';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT COUNT(*) FROM workers WHERE department = 'renewable energy';",
    sql="Here is the SQL query based on the provided SQL prompt and context:\n\n**SQL Prompt:** How many workers are employed in the 'renewable energy' sector?\n**SQL Context:** \n```sql\nCREATE TABLE workers (\n    id INT,\n    worker_name VARCHAR(255),\n    department VARCHAR(255)\n);\nINSERT INTO workers (id, worker_name, department)\nVALUES (1, 'John Doe', 'renewable energy'),\n       (2, 'Jane Smith', 'textiles'),\n       (3, 'Michael Brown', 'renewable energy');\n```\n**Reasoning:** We want to count the number of workers in the 'renewable energy' sector. To do"
), 1), (Example({'sql_prompt': 'What is the average performance score for each game genre?', 'sql_context': "CREATE TABLE game_genre_performance (game_id INT, game_genre VARCHAR(255), performance_score INT); INSERT INTO game_genre_performance (game_id, game_genre, performance_score) VALUES (1, 'RPG', 85), (2, 'Strategy', 90), (3, 'RPG', 80);", 'sql': 'SELECT game_genre, AVG(performance_score) as avg_score FROM game_genre_performance GROUP BY game_genre;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT game_genre, AVG(performance_score) AS average_score FROM game_genre_performance GROUP BY game_genre;',
    sql="Here is the SQL query based on the given prompt and context:\n\n**Sql Prompt:** What is the average performance score for each game genre?\n\n**Sql Context:** \n\n```sql\nCREATE TABLE game_genre_performance (\n    game_id INT,\n    game_genre VARCHAR(255),\n    performance_score INT\n);\n\nINSERT INTO game_genre_performance (game_id, game_genre, performance_score)\nVALUES (1, 'RPG', 85),\n       (2, 'Strategy', 90),\n       (3, 'RPG', 80);\n```\n\n**Reasoning:** \n\nTo find the average performance score for each game genre, we"
), 1), (Example({'sql_prompt': 'How many Indigenous communities in the Arctic are experiencing negative socio-economic impacts due to climate change?', 'sql_context': "CREATE TABLE IndigenousCommunities(community TEXT, socio_economic_impact TEXT, climate_change_impact TEXT); INSERT INTO IndigenousCommunities(community, socio_economic_impact, climate_change_impact) VALUES ('Inuit', 'High', 'Very High'), ('Sami', 'Medium', 'High');", 'sql': "SELECT COUNT(*) FROM IndigenousCommunities WHERE socio_economic_impact = 'High' AND climate_change_impact = 'High' OR socio_economic_impact = 'Very High' AND climate_change_impact = 'Very High';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT COUNT(*) FROM IndigenousCommunities WHERE socio_economic_impact = 'Negative' AND climate_change_impact = 'Yes';",
    sql="Here is the SQL query based on the provided prompt and context:\n\n```sql\nSELECT COUNT(*) FROM IndigenousCommunities\nWHERE socio_economic_impact = 'Negative' AND climate_change_impact = 'Yes';\n```\n\n**Reasoning:** \n\nThe goal is to count the number of Indigenous communities that are experiencing negative socio-economic impacts due to climate change. The SQL context provides a table named `IndigenousCommunities` with columns for the community name, their socio-economic impact, and their climate change impact. \n\nThe query filters the data by selecting only those rows where the `socio_economic_impact` is 'Negative' and `climate_change_impact` is 'Yes', representing"
), 0), (Example({'sql_prompt': 'What is the minimum depth recorded in the Mariana Trench?', 'sql_context': "CREATE TABLE ocean_floor_mapping (location VARCHAR(255), depth FLOAT);   INSERT INTO ocean_floor_mapping (location, depth) VALUES ('Mariana Trench', 10994.0), ('Challenger Deep', 10972.8);", 'sql': "SELECT MIN(depth) FROM ocean_floor_mapping WHERE location = 'Mariana Trench';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT MIN(depth) AS min_depth FROM ocean_floor_mapping WHERE location = 'Mariana Trench';",
    sql="SQL query:\n```sql\nSELECT MIN(depth) AS min_depth\nFROM ocean_floor_mapping\nWHERE location = 'Mariana Trench';\n```"
), 1), (Example({'sql_prompt': 'List all farmers who have not serviced their irrigation systems in the last 6 months.', 'sql_context': "CREATE TABLE farmer_irrigation (id INT, farmer_id INT, system_type VARCHAR(50), service_date DATE); INSERT INTO farmer_irrigation (id, farmer_id, system_type, service_date) VALUES (1, 1, 'Drip', '2021-08-01'), (2, 2, 'Sprinkler', '2021-10-15'), (3, 3, 'Drip', '2021-11-01'), (4, 4, 'Sprinkler', '2022-02-01'), (5, 5, 'Drip', '2022-03-01'), (6, 6, 'Sprinkler', '2022-01-15'), (7, 7, 'Drip', '2021-06-01'), (8, 8, 'Sprinkler', '2022-04-01'), (9, 9, 'Drip', '2021-12-01'), (10, 10, 'Sprinkler', '2022-05-15');", 'sql': 'SELECT farmers.name FROM farmers LEFT JOIN farmer_irrigation ON farmers.id = farmer_irrigation.farmer_id WHERE farmer_irrigation.service_date <= DATE_SUB(CURDATE(), INTERVAL 6 MONTH);'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT DISTINCT fi.farmer_id\nFROM farmer_irrigation fi\nWHERE fi.service_date < DATEADD(MONTH, -6, GETDATE());',
    sql="Here is the SQL query based on the provided SQL prompt and context:\n\n**SQL Prompt:** List all farmers who have not serviced their irrigation systems in the last 6 months.\n**SQL Context:**\n```sql\nCREATE TABLE farmer_irrigation (\n    id INT,\n    farmer_id INT,\n    system_type VARCHAR(50),\n    service_date DATE\n);\nINSERT INTO farmer_irrigation (id, farmer_id, system_type, service_date)\nVALUES\n    (1, 1, 'Drip', '2021-08-01'),\n    (2, 2, 'Sprinkler', '2021-10-15'),"
), 0), (Example({'sql_prompt': 'What is the most common type of medical equipment across hospitals?', 'sql_context': "CREATE TABLE medical_equipment (id INT, hospital_name TEXT, location TEXT, equipment TEXT, quantity INT, last_updated_date DATE); INSERT INTO medical_equipment (id, hospital_name, location, equipment, quantity, last_updated_date) VALUES (1, 'NY Presbyterian', 'NYC', 'Ventilators', 80, '2021-03-31'); INSERT INTO medical_equipment (id, hospital_name, location, equipment, quantity, last_updated_date) VALUES (2, 'Stanford Hospital', 'Palo Alto', 'Ventilators', 90, '2021-03-31');", 'sql': 'SELECT equipment, MAX(quantity) as max_quantity FROM medical_equipment GROUP BY equipment ORDER BY max_quantity DESC LIMIT 1;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT equipment, COUNT(*) AS total_equipment FROM medical_equipment GROUP BY equipment ORDER BY total_equipment DESC LIMIT 1;',
    sql="Let's think step by step in order to produce the SQL query.\n\nGiven the prompt and context:\n\n**Sql Prompt:** What is the most common type of medical equipment across hospitals?\n\n**Sql Context:** We have a table named `medical_equipment` with columns: `id`, `hospital_name`, `location`, `equipment`, `quantity`, and `last_updated_date`. The table contains records of medical equipment along with their quantities in different hospitals.\n\n**Reasoning:** To find the most common type of medical equipment across hospitals, we need to group the data by the `equipment` column and then order the results by the count of occurrences in descending order. We can use the `COUNT`"
), 0), (Example({'sql_prompt': "What is the average rating for 'Gluten-Free' items?", 'sql_context': "CREATE TABLE ratings (item_name TEXT, is_gluten_free BOOLEAN, rating INTEGER); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Quinoa Salad', true, 4); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Chicken Stir Fry', false, 5);", 'sql': 'SELECT AVG(rating) FROM ratings WHERE is_gluten_free = true;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT AVG(rating) FROM ratings WHERE is_gluten_free = TRUE;',
    sql="Sql Prompt: What is the average rating for 'Gluten-Free' items?\n\nSql Context: CREATE TABLE ratings (item_name TEXT, is_gluten_free BOOLEAN, rating INTEGER); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Quinoa Salad', true, 4), ('Chicken Stir Fry', false, 5);\n\nReasoning: To find the average rating for 'Gluten-Free' items, we need to select the ratings where is_gluten_free is true and then calculate the average of those ratings.\n\nSql: SELECT AVG(rating) FROM ratings WHERE is_gluten_free = TRUE;"
), 1), (Example({'sql_prompt': 'How many water treatment facilities are there in each country, and what is their distribution by continent?', 'sql_context': "CREATE TABLE facilities (id INT, facility_name VARCHAR(50), country VARCHAR(50), total_employees INT); INSERT INTO facilities (id, facility_name, country, total_employees) VALUES (1, 'Water Treatment Plant 1', 'Brazil', 25); INSERT INTO facilities (id, facility_name, country, total_employees) VALUES (2, 'Water Treatment Plant 2', 'India', 30);", 'sql': 'SELECT country, COUNT(*) as facility_count, CONTINENT(location) as continent FROM facilities JOIN countries ON facilities.country = countries.country_name GROUP BY country, continent;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT country, continent, COUNT(*) AS facility_count FROM facilities JOIN countries ON facilities.country = countries.country_name JOIN continents ON countries.continent_code = continents.code GROUP BY country, continent;',
    sql='Here is the SQL query based on the provided SQL prompt and context:\n\n```sql\nSELECT country, continent, COUNT(*) AS facility_count\nFROM facilities\nJOIN countries ON facilities.country = countries.country_name\nJOIN continents ON countries.continent_code = continents.code\nGROUP BY country, continent;\n```\n\nThis query joins the `facilities` table with the `countries` and `continents` tables based on their respective codes/names. It then groups the results by country and continent, counting the number of water treatment facilities in each group. This will provide a distribution of water treatment facilities by country and continent.'
), 1), (Example({'sql_prompt': "What is the maximum data usage in the 'urban' region?", 'sql_context': "CREATE TABLE subscribers (id INT, name VARCHAR(50), data_usage FLOAT, region VARCHAR(20)); INSERT INTO subscribers (id, name, data_usage, region) VALUES (1, 'John Doe', 20.0, 'urban'), (2, 'Jane Doe', 18.0, 'urban');", 'sql': "SELECT MAX(data_usage) FROM subscribers WHERE region = 'urban';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT region, MAX(data_usage) FROM subscribers WHERE region = 'urban' GROUP BY region;",
    sql="Sql Prompt: What is the maximum data usage in the 'urban' region?\n\nSql Context: CREATE TABLE subscribers (id INT, name VARCHAR(50), data_usage FLOAT, region VARCHAR(20)); INSERT INTO subscribers (id, name, data_usage, region) VALUES (1, 'John Doe', 20.0, 'urban'), (2, 'Jane Doe', 18.0, 'urban');\n\nReasoning: To find the maximum data usage in the 'urban' region, we can use the MAX() function along with a WHERE clause to filter data for the 'urban' region.\n\nSql: SELECT region, MAX(data_usage) AS max_data_"
), 0), (Example({'sql_prompt': 'Find the average depth of all underwater volcanoes in the Atlantic Ocean.', 'sql_context': "CREATE TABLE underwater_volcanoes (id INT, name VARCHAR(50), depth FLOAT, ocean VARCHAR(20)); INSERT INTO underwater_volcanoes (id, name, depth, ocean) VALUES (1, 'Lost City', 800, 'Atlantic'); INSERT INTO underwater_volcanoes (id, name, depth, ocean) VALUES (2, 'Eyjafjallajokull', 1650, 'Atlantic');", 'sql': "SELECT AVG(depth) FROM underwater_volcanoes WHERE ocean = 'Atlantic';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT AVG(depth) AS average_depth FROM underwater_volcanoes WHERE ocean = 'Atlantic';",
    sql="Let's think step by step in order to produce the SQL query.\n\n1. The goal is to find the average depth of underwater volcanoes in the Atlantic Ocean.\n2. The relevant table is `underwater_volcanoes`, and the specific columns needed are `depth` and `ocean`.\n3. We need to filter the results to only include volcanoes in the Atlantic Ocean.\n4. To calculate the average depth, we use the `AVG()` function on the `depth` column.\n\nSql: ```sql\nSELECT AVG(depth) AS average_depth\nFROM underwater_volcanoes\nWHERE ocean = 'Atlantic';\n```"
), 1), (Example({'sql_prompt': 'What is the total cost of Mars rover missions that have successfully landed?', 'sql_context': 'CREATE TABLE mars_rovers (id INT PRIMARY KEY, name VARCHAR(255), mission_type VARCHAR(255), agency VARCHAR(255), cost FLOAT, launched_date DATE, landed_date DATE);', 'sql': "SELECT SUM(cost) FROM mars_rovers WHERE mission_type = 'Lander' AND landed_date IS NOT NULL;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query based on the provided prompt and context:\n```sql\nSELECT SUM(cost) AS total_cost\nFROM mars_rovers\nWHERE mission_type = 'Mars Rover'\n  AND landed_date IS NOT NULL;\n```\n\nReasoning: We are looking for the total cost of Mars rover missions that have successfully landed. In the provided context, the `mars_rovers` table contains information about different Mars rovers and their missions. We need to filter the data to include only those missions that are of type 'Mars Rover' and have a non-null `landed_date`, indicating a successful landing. The `SUM` function is then used to calculate the total cost of these successful Mars rover",
    sql="Here is the SQL query based on the provided prompt and context: \n ```sql\nSELECT SUM(cost) AS total_cost\nFROM mars_rovers\nWHERE mission_type = 'Mars Rover' AND landed_date IS NOT NULL;\n```\n\nReasoning: We are looking for the total cost of Mars rover missions that have successfully landed. In the provided context, the `mars_rovers` table contains information about different Mars rovers and their missions. We need to filter the data to include only those missions that are of type 'Mars Rover' and have a non-null `landed_date`, indicating a successful landing. The `SUM` function is then used to calculate the total cost of these successful Mars rover missions"
), 1), (Example({'sql_prompt': "What is the earliest year a peacekeeping operation was conducted in 'Asia'?", 'sql_context': "CREATE TABLE Peacekeeping_Years (id INT, location VARCHAR(30), year INT); INSERT INTO Peacekeeping_Years (id, location, year) VALUES (1, 'Asia', 1990), (2, 'Asia', 2000);", 'sql': "SELECT MIN(year) FROM Peacekeeping_Years WHERE location = 'Asia';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT MIN(year) AS earliest_year FROM Peacekeeping_Years WHERE location = 'Asia';",
    sql="SQL query:\n```sql\nSELECT MIN(year) AS earliest_year\nFROM Peacekeeping_Years\nWHERE location = 'Asia';\n```"
), 1), (Example({'sql_prompt': 'Identify the drug with the lowest sales amount in Europe in 2022.', 'sql_context': "CREATE TABLE sales (drug_name TEXT, continent TEXT, sales_amount INT, sale_date DATE); INSERT INTO sales (drug_name, continent, sales_amount, sale_date) VALUES ('Aspirin', 'Europe', 1000, '2022-01-01');", 'sql': "SELECT drug_name, MIN(sales_amount) FROM sales WHERE continent = 'Europe' AND sale_date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY drug_name;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT drug_name, sales_amount\nFROM sales\nWHERE continent = 'Europe' AND EXTRACT(YEAR FROM sale_date) = 2022\nORDER BY sales_amount ASC\nLIMIT 1;",
    sql="Let's think step by step in order to produce the SQL query:\n\n**Step 1:** We need to select data from the 'sales' table where the continent is 'Europe' and the sale year is 2022.\n**Step 2:** Next, we want to order the results by sales amount in ascending order to ensure that the lowest sales amount appears first.\n**Step 3:** Finally, we use the LIMIT 1 clause to retrieve only the first row from the ordered result set, which represents the drug with the lowest sales amount in Europe in 2022.\n\nSql: ```sql\nSELECT drug_name, sales_amount\nFROM sales\nWHERE continent = 'Europe'"
), 0), (Example({'sql_prompt': "Insert a new record into 'customer_preferences' for customer 101 and menu item 1 with a preference score of 90", 'sql_context': 'CREATE TABLE customer_preferences (customer_id INT, item_id INT, preference_score INT);', 'sql': 'INSERT INTO customer_preferences (customer_id, item_id, preference_score) VALUES (101, 1, 90);'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: INSERT INTO customer_preferences (customer_id, item_id, preference_score) VALUES (101, 1, 90);',
    sql="Sql Prompt: Insert a new record into 'customer_preferences' for customer 101 and menu item 1 with a preference score of 90.\n\nSql Context: CREATE TABLE customer_preferences (customer_id INT, item_id INT, preference_score INT);\n\nReasoning: We need to insert a new record into the 'customer_preferences' table with the given values. The SQL INSERT INTO statement is used to add new records to a table. The values for customer_id, item_id, and preference_score are provided in the prompt and context.\n\nSql: INSERT INTO customer_preferences (customer_id, item_id, preference_score) VALUES (101,"
), 1), (Example({'sql_prompt': 'Who is the oldest donor from each city?', 'sql_context': "CREATE TABLE donors_2 (id INT PRIMARY KEY, name VARCHAR(50), age INT, city VARCHAR(50), state VARCHAR(50)); INSERT INTO donors_2 (id, name, age, city, state) VALUES (1, 'John Doe', 35, 'New York', 'NY'), (2, 'Jane Smith', 40, 'Buffalo', 'NY'), (3, 'Mike Johnson', 50, 'Boston', 'MA');", 'sql': 'SELECT city, MAX(age) as oldest_donor_age FROM donors_2 GROUP BY city;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT name, city, MAX(age) AS max_age\nFROM donors_2\nGROUP BY city;',
    sql="Here is the SQL query based on the provided SQL prompt and context:\n\n**SQL Prompt:** Who is the oldest donor from each city?\n**SQL Context:** \n```sql\nCREATE TABLE donors_2 (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    age INT,\n    city VARCHAR(50),\n    state VARCHAR(50)\n);\nINSERT INTO donors_2 (id, name, age, city, state)\nVALUES (1, 'John Doe', 35, 'New York', 'NY'),\n       (2, 'Jane Smith', 40, 'Buffalo', 'NY'),\n       (3, 'Mike Johnson', 50, 'Boston', 'MA"
), 1), (Example({'sql_prompt': 'What are the union membership statistics for unions that have engaged in successful collective bargaining in the healthcare sector?', 'sql_context': "CREATE TABLE Membership (UnionName TEXT, Sector TEXT, MemberCount INT); INSERT INTO Membership (UnionName, Sector, MemberCount) VALUES ('UnionHealthA', 'Healthcare', 3000), ('UnionHealthB', 'Healthcare', 5000), ('UnionHealthC', 'Healthcare', 2000);", 'sql': "SELECT UnionName, MemberCount FROM Membership WHERE Sector = 'Healthcare' AND UnionName IN (SELECT UnionName FROM CBAs WHERE ExpirationDate > CURDATE());"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT UnionName, Sector, SUM(MemberCount) AS TotalMembers FROM Membership WHERE Sector = 'Healthcare' AND UnionName IN (SELECT UnionName FROM CollectiveBargaining WHERE Result = 'Successful') GROUP BY UnionName, Sector;",
    sql="Here is the SQL query based on the provided prompt and context:\n\n**SQL Prompt:** What are the union membership statistics for unions that have engaged in successful collective bargaining in the healthcare sector?\n\n**SQL Context:** \n\n```sql\nCREATE TABLE Membership (\n    UnionName TEXT,\n    Sector TEXT,\n    MemberCount INT\n);\n\nINSERT INTO Membership (UnionName, Sector, MemberCount)\nVALUES ('UnionHealthA', 'Healthcare', 3000),\n       ('UnionHealthB', 'Healthcare', 5000),\n       ('UnionHealthC', 'Healthcare', 2000);\n```\n\n**Reasoning:** \n\nTo answer the query, we need to retrieve data from"
), 0), (Example({'sql_prompt': 'Calculate the total gas consumption for Nigeria in 2019', 'sql_context': "CREATE TABLE gas_consumption (country VARCHAR(50), consumption_year INT, gas_consumption FLOAT); INSERT INTO gas_consumption (country, consumption_year, gas_consumption) VALUES ('Nigeria', 2019, 12000), ('Nigeria', 2018, 10000), ('Ghana', 2019, 8000), ('Ghana', 2018, 6000), ('Ivory Coast', 2019, 10000), ('Ivory Coast', 2018, 8000);", 'sql': "SELECT gas_consumption FROM gas_consumption WHERE country = 'Nigeria' AND consumption_year = 2019;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT country, consumption_year, SUM(gas_consumption) AS total_consumption\nFROM gas_consumption\nWHERE country = 'Nigeria' AND consumption_year = 2019\nGROUP BY country, consumption_year;",
    sql="Let's think step by step in order to produce the SQL query. \n\nGiven the prompt and context:\n\n**Sql Prompt:** Calculate the total gas consumption for Nigeria in 2019.\n**Sql Context:** The `gas_consumption` table contains data on gas consumption for different countries, with columns for country name, consumption year, and gas consumption volume.\n\nHere are the steps to construct the SQL query:\n1. We want to retrieve data for a specific country ('Nigeria') and a specific year (2019). So, we'll use the `WHERE` clause to filter the data based on these conditions.\n2. We also want to calculate the total gas consumption for the selected country and"
), 0), (Example({'sql_prompt': 'What is the average socially responsible lending loan amount for microfinance institutions in Southeast Asia?', 'sql_context': "CREATE TABLE socially_responsible_lending(id INT, loan_number INT, institution_region VARCHAR(50), amount INT); INSERT INTO socially_responsible_lending VALUES (1, 701, 'Southeast Asia', 5000); INSERT INTO socially_responsible_lending VALUES (2, 702, 'South Asia', 7000); INSERT INTO socially_responsible_lending VALUES (3, 703, 'East Asia', 9000); INSERT INTO socially_responsible_lending VALUES (4, 704, 'Southeast Asia', 6000);", 'sql': "SELECT AVG(amount) FROM socially_responsible_lending WHERE institution_region = 'Southeast Asia' AND type = 'microfinance';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT institution_region, AVG(amount) AS average_loan_amount FROM socially_responsible_lending WHERE institution_region = 'Southeast Asia' GROUP BY institution_region;",
    sql="Sql Prompt: What is the average socially responsible lending loan amount for microfinance institutions in Southeast Asia?\n\nSql Context: CREATE TABLE socially_responsible_lending(id INT, loan_number INT, institution_region VARCHAR(50), amount INT); INSERT INTO socially_responsible_lending VALUES  (1, 701, 'Southeast Asia', 5000), (2, 702, 'South Asia', 7000), (3, 703, 'East Asia', 9000), (4, 704, 'Southeast Asia', 6000);\n\nReasoning: To answer this query, we need to"
), 1), (Example({'sql_prompt': 'What is the average salary of employees who identify as Latinx in the Engineering department?', 'sql_context': "CREATE TABLE Employees (EmployeeID int, Name varchar(50), Gender varchar(10), Department varchar(50), Salary decimal(10,2), Ethnicity varchar(50)); INSERT INTO Employees (EmployeeID, Name, Gender, Department, Salary, Ethnicity) VALUES (1, 'Juan Garcia', 'Male', 'Engineering', 85000.00, 'Latinx'); INSERT INTO Employees (EmployeeID, Name, Gender, Department, Salary, Ethnicity) VALUES (2, 'Maria Rodriguez', 'Female', 'Engineering', 90000.00, 'Latinx');", 'sql': "SELECT AVG(Salary) FROM Employees WHERE Department = 'Engineering' AND Ethnicity = 'Latinx';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Sql: SELECT AVG(Salary) AS average_salary\nFROM Employees\nWHERE Department = 'Engineering' AND Ethnicity = 'Latinx';",
    sql="Sql Prompt: What is the average salary of employees who identify as Latinx in the Engineering department?\n\nSql Context: CREATE TABLE Employees (EmployeeID int, Name varchar(50), Gender varchar(10), Department varchar(50), Salary decimal(10,2), Ethnicity varchar(50)); INSERT INTO Employees (EmployeeID, Name, Gender, Department, Salary, Ethnicity) VALUES (1, 'Juan Garcia', 'Male', 'Engineering', 85000.00, 'Latinx'), (2, 'Maria Rodriguez', 'Female', 'Engineering', 90000.00, 'Latinx');\n\nReasoning: To find the average salary of employees who"
), 1), (Example({'sql_prompt': 'What is the name and type of the vessel with the highest average speed?', 'sql_context': "CREATE TABLE Vessels (ID VARCHAR(20), Name VARCHAR(20), Type VARCHAR(20), AverageSpeed FLOAT); INSERT INTO Vessels VALUES ('V012', 'Vessel L', 'Passenger', 35.0), ('V013', 'Vessel M', 'Cargo', 19.5), ('V014', 'Vessel N', 'Passenger', 32.0);", 'sql': 'SELECT Name, Type FROM Vessels WHERE AverageSpeed = (SELECT MAX(AverageSpeed) FROM Vessels);'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='Sql: SELECT Name, Type, AverageSpeed FROM Vessels ORDER BY AverageSpeed DESC LIMIT 1;',
    sql="Let's think step by step in order to produce the SQL query:\n\n**Step 1:** We want to retrieve the name and type of the vessel with the highest average speed.\n**Step 2:** We will use the `Vessels` table, which contains information about different vessels, including their names, types, and average speeds.\n**Step 3:** To find the vessel with the highest average speed, we can use the `ORDER BY` clause to sort the rows based on the `AverageSpeed` column in descending order. This will place the vessels with the highest average speeds at the top of the result set.\n**Step 4:** We then use the `LIMIT 1` clause to retrieve only"
), 1), (Example({'sql_prompt': "List all the distinct producers of Gadolinium from the 'production' table, ordered alphabetically.", 'sql_context': 'CREATE TABLE production (element VARCHAR(10), year INT, month INT, producer VARCHAR(20), quantity INT);', 'sql': "SELECT DISTINCT producer FROM production WHERE element = 'Gadolinium' ORDER BY producer ASC;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here is the SQL query based on the provided prompt and context:\n```sql\nSELECT DISTINCT producer\nFROM production\nWHERE element = 'Gadolinium'\nORDER BY producer;\n```\n\n**Reasoning:** \n1. We want to list all distinct producers of Gadolinium from the 'production' table.\n2. The `SELECT DISTINCT` clause ensures that only unique values of the 'producer' column are included in the result set.\n3. The `WHERE` clause filters the data to include only rows where the 'element' is 'Gadolinium'.\n4. Finally, we use the `ORDER BY` clause to sort the results alphabetically by the 'producer' column.",
    sql="Here is the SQL query based on the provided prompt and context:\n```sql\nSELECT DISTINCT producer\nFROM production\nWHERE element = 'Gadolinium'\nORDER BY producer;\n```\n\n**Reasoning:** \n1. We want to list all distinct producers of Gadolinium from the 'production' table. \n2. The `SELECT DISTINCT` clause ensures that only unique values of the 'producer' column are included in the result set. \n3. The `WHERE` clause filters the data to include only rows where the 'element' is 'Gadolinium'. \n4. Finally, we use the `ORDER BY` clause to sort the results alphabetically by the 'producer' column."
), 1)]