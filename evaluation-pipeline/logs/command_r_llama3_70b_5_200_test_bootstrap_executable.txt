[(Example({'sql_prompt': "Update the name of the passenger with the id 3 to 'Emily Lee'.", 'sql_context': "CREATE TABLE PASSENGERS (id INT, name VARCHAR(50)); INSERT INTO PASSENGERS VALUES (3, 'James Brown');", 'sql': "UPDATE PASSENGERS SET name = 'Emily Lee' WHERE id = 3;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="```sql\nUPDATE PASSENGERS SET name = 'Emily Lee' WHERE id = 3;\n```",
    sql="```sql\nUPDATE PASSENGERS SET name = 'Emily Lee' WHERE id = 3;\n```"
), 1), (Example({'sql_prompt': "What is the number of women-led agricultural businesses in the 'business_data' table?", 'sql_context': "CREATE TABLE business_data (business_id INT, business_name VARCHAR(50), gender VARCHAR(10)); INSERT INTO business_data (business_id, business_name, gender) VALUES (1, 'Green Acres', 'female'), (2, 'Brown Farms', 'male'), (3, 'Eco Harvest', 'non-binary');", 'sql': "SELECT COUNT(business_id) FROM business_data WHERE gender = 'female';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="```sql\n-- Query to find the number of women-led agricultural businesses\nSELECT COUNT(*) \nFROM business_data \nWHERE gender = 'female';\n```",
    sql="```sql\nSELECT COUNT(*) \nFROM business_data \nWHERE gender = 'female';\n```"
), 1), (Example({'sql_prompt': "What is the average rating for 'Gluten-Free' items?", 'sql_context': "CREATE TABLE ratings (item_name TEXT, is_gluten_free BOOLEAN, rating INTEGER); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Quinoa Salad', true, 4); INSERT INTO ratings (item_name, is_gluten_free, rating) VALUES ('Chicken Stir Fry', false, 5);", 'sql': 'SELECT AVG(rating) FROM ratings WHERE is_gluten_free = true;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='```sql\nSELECT AVG(rating) FROM ratings WHERE is_gluten_free;\n```',
    sql='```sql\nSELECT AVG(rating) FROM ratings WHERE is_gluten_free = true;\n```'
), 0), (Example({'sql_prompt': 'What is the maximum amount of dissolved oxygen (DO) in the ocean_health table for each month in 2021?', 'sql_context': "CREATE TABLE ocean_health (date DATE, do_value INT); INSERT INTO ocean_health (date, do_value) VALUES ('2021-01-01', 8), ('2021-01-02', 7), ('2021-02-01', 6), ('2021-02-02', 9);", 'sql': "SELECT EXTRACT(MONTH FROM date) as month, MAX(do_value) as max_do_value FROM ocean_health WHERE date BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY EXTRACT(MONTH FROM date);"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="```sql\nSELECT MAX(do_value) AS max_DO, DATE_FORMAT(date, '%B') AS month\nFROM ocean_health\nWHERE YEAR(date) = 2021\nGROUP BY month\nORDER BY month;\n```",
    sql='```sql\nSELECT MAX(do_value) AS max_DO, MONTH(date) AS month FROM ocean_health WHERE YEAR(date) = 2021 GROUP BY month ORDER BY month;\n```'
), 1), (Example({'sql_prompt': 'What are the total sales and quantity of goods sold by each salesperson, grouped by city?', 'sql_context': 'CREATE TABLE salesperson (id INT, name TEXT, city TEXT); CREATE TABLE sales (id INT, salesperson_id INT, product TEXT, quantity INT, total_sales FLOAT);', 'sql': 'SELECT s.name, s.city, SUM(s.total_sales) as total_sales, SUM(s.quantity) as total_quantity FROM sales s JOIN salesperson sp ON s.salesperson_id = sp.id GROUP BY s.city, s.name;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here's the SQL query:\n```sql\nSELECT city, SUM(total_sales), SUM(quantity) \nFROM sales s\nJOIN salesperson p ON s.salesperson_id = p.id\nGROUP BY city;\n```\nDo you need help with any other SQL generation tasks?",
    sql='```sql\nSELECT city, SUM(total_sales), SUM(quantity) \nFROM sales s \nJOIN salesperson p ON s.salesperson_id = p.id \nGROUP BY city;\n```'
), 0), (Example({'sql_prompt': 'What is the total funding received by startups in the technology sector that were founded by women?', 'sql_context': "CREATE TABLE startups(id INT, name TEXT, sector TEXT, founder_gender TEXT, funding FLOAT); INSERT INTO startups VALUES (1, 'Acme Inc', 'Technology', 'Female', 2000000); INSERT INTO startups VALUES (2, 'Beta Corp', 'Retail', 'Male', 3000000); INSERT INTO startups VALUES (3, 'Gamma Start', 'Technology', 'Female', 5000000);", 'sql': "SELECT SUM(funding) FROM startups WHERE sector = 'Technology' AND founder_gender = 'Female';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="```sql\nSELECT sum(funding) FROM startups WHERE sector = 'Technology' AND founder_gender = 'Female';\n```",
    sql="```sql\nSELECT sum(funding) FROM startups WHERE sector = 'Technology' AND founder_gender = 'Female';\n```"
), 1), (Example({'sql_prompt': 'What is the recycling rate of plastic in the residential sector in the state of New York?', 'sql_context': "CREATE TABLE recycling_rates_city (sector VARCHAR(20), city VARCHAR(20), material VARCHAR(20), recycling_rate DECIMAL(5,2)); INSERT INTO recycling_rates_city (sector, city, material, recycling_rate) VALUES ('residential', 'New York City', 'plastic', 0.25), ('commercial', 'New York City', 'plastic', 0.30), ('residential', 'New York City', 'paper', 0.45), ('commercial', 'New York City', 'paper', 0.50), ('residential', 'Los Angeles', 'plastic', 0.20), ('commercial', 'Los Angeles', 'plastic', 0.35), ('residential', 'Los Angeles', 'paper', 0.40), ('commercial', 'Los Angeles', 'paper', 0.50);", 'sql': "SELECT recycling_rate FROM recycling_rates_city WHERE sector = 'residential' AND material = 'plastic' AND city = 'New York City';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='produce the SQL. We can start by selecting the recycling rate of plastic from the recycling_rates_city table, but we need to filter only the rows corresponding to the residential sector in New York City.',
    sql="SELECT recycling_rate FROM recycling_rates_city WHERE sector = 'residential' AND city = 'New York';"
), 0), (Example({'sql_prompt': "Which startups in the 'StartupFunding' table received funding in 2020 or later and have a budget greater than $500,000?", 'sql_context': "CREATE SCHEMA BiotechStartups; CREATE TABLE StartupFunding (startup_name VARCHAR(50), funding_year INT, funding DECIMAL(10, 2)); INSERT INTO StartupFunding VALUES ('StartupA', 2019, 500000), ('StartupB', 2020, 750000);", 'sql': 'SELECT startup_name FROM BiotechStartups.StartupFunding WHERE funding_year >= 2020 AND funding > 500000;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='```sql\nSELECT startup_name FROM StartupFunding WHERE funding_year >= 2020 AND funding > 500000;\n```',
    sql='```sql\nSELECT startup_name \nFROM StartupFunding \nWHERE funding_year >= 2020 AND funding > 500000;\n```'
), 0), (Example({'sql_prompt': "How many female engineers are there in 'australian_mines'?", 'sql_context': "CREATE SCHEMA if not exists australia_schema;CREATE TABLE australia_schema.australian_mines (id INT, name VARCHAR, gender VARCHAR, role VARCHAR);INSERT INTO australia_schema.australian_mines (id, name, gender, role) VALUES (1, 'S worker', 'Female', 'Engineer'), (2, 'T engineer', 'Male', 'Engineer');", 'sql': "SELECT COUNT(*) FROM australia_schema.australian_mines WHERE gender = 'Female' AND role = 'Engineer';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="```sql\nSELECT count(*) FROM australian_mines WHERE gender = 'Female' AND role = 'Engineer';\n```",
    sql="```sql\nSELECT count(*) \nFROM australia_schema.australian_mines \nWHERE gender = 'Female' AND role = 'Engineer';\n```"
), 0), (Example({'sql_prompt': 'What is the average salary of employees in each position?', 'sql_context': "CREATE TABLE Employees (EmployeeID INT, Name VARCHAR(50), Department VARCHAR(50), Position VARCHAR(50), Salary FLOAT); INSERT INTO Employees (EmployeeID, Name, Department, Position, Salary) VALUES (1, 'John Doe', 'IT', 'Developer', 75000.00), (2, 'Jane Smith', 'IT', 'Developer', 80000.00), (3, 'Alice Johnson', 'Marketing', 'Marketing Specialist', 60000.00), (4, 'Bob Brown', 'HR', 'HR Specialist', 65000.00);", 'sql': 'SELECT Position, AVG(Salary) FROM Employees GROUP BY Position;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='```sql\nSELECT Position, AVG(Salary) AS AverageSalary FROM Employees GROUP BY Position;\n```',
    sql='```sql\nSELECT Position, AVG(Salary) AS AverageSalary FROM Employees GROUP BY Position;\n```'
), 1), (Example({'sql_prompt': 'What are the names and ranks of all military personnel in country W who were demoted in the year 2019?', 'sql_context': "CREATE TABLE military_demotions (id INT, name TEXT, country TEXT, rank TEXT, demotion_year INT);INSERT INTO military_demotions (id, name, country, rank, demotion_year) VALUES (1, 'John Doe', 'Country W', 'Colonel', 2019);", 'sql': "SELECT name, rank FROM military_demotions WHERE country = 'Country W' AND demotion_year = 2019;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="```sql\nSELECT name ,  rank FROM military_demotions WHERE country = 'Country W' AND demotion_year = 2019;\n```",
    sql="```sql\nSELECT name ,  rank FROM military_demotions WHERE country = 'W' AND demotion_year = 2019;\n```"
), 0), (Example({'sql_prompt': "List the top 2 sectors with the highest donation amounts in the 'Asia' region for the year 2018, ordered by the donation amount in descending order.", 'sql_context': "CREATE TABLE Donors (donor_id INT, donor_name VARCHAR(255), donation_amount INT, sector VARCHAR(255), region VARCHAR(255), donation_date DATE); INSERT INTO Donors (donor_id, donor_name, donation_amount, sector, region, donation_date) VALUES (1, 'DonorA', 100000, 'Health', 'Asia', '2018-01-01');", 'sql': "SELECT sector, SUM(donation_amount) AS total_donation FROM Donors WHERE region = 'Asia' AND donation_date >= '2018-01-01' AND donation_date < '2019-01-01' GROUP BY sector ORDER BY total_donation DESC LIMIT 2;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here's the SQL query:\n```sql\nSELECT sector, SUM(donation_amount) AS total_donation\nFROM Donors\nWHERE region = 'Asia' AND YEAR(donation_date) = 2018\nGROUP BY sector\nORDER BY total_donation DESC\nLIMIT 2;\n```\nThe signature for the text-to-SQL task would be:\n```\nSql Prompt: List the top 2 sectors with the highest donation amounts in the 'Asia' region for the year 2018, ordered by the donation amount in descending order.",
    sql='SELECT sector, <aggregate function> AS total_donation ...\n```'
), 0), (Example({'sql_prompt': "Display the vendor with the highest average price for 'Salmon' in the 'sales' table.", 'sql_context': "CREATE TABLE sales (id INT PRIMARY KEY, vendor VARCHAR(50), quantity INT, species VARCHAR(50), price DECIMAL(5,2)); INSERT INTO sales (id, vendor, quantity, species, price) VALUES (1, 'Seafood Haven', 20, 'Salmon', 15.99), (2, 'Sea Bounty', 30, 'Tilapia', 9.49), (3, 'Sea Bounty', 15, 'Cod', 14.50), (4, 'Fresh Catch', 25, 'Salmon', 17.99);", 'sql': "SELECT vendor, AVG(price) FROM sales WHERE species = 'Salmon' GROUP BY vendor ORDER BY AVG(price) DESC LIMIT 1;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here's the SQL query:\n```sql\nSELECT vendor\nFROM sales\nWHERE species = 'Salmon'\nGROUP BY vendor\nORDER BY AVG(price) DESC\nLIMIT 1;\n```",
    sql="```sql\nSELECT vendor\nFROM sales\nWHERE species = 'Salmon'\nGROUP BY vendor\nORDER BY AVG(price) DESC\nLIMIT 1;\n```"
), 0), (Example({'sql_prompt': "Add new military equipment to 'military_equipment' table", 'sql_context': "CREATE TABLE military_equipment (id INT PRIMARY KEY, name VARCHAR(255), type VARCHAR(255), country VARCHAR(255)); INSERT INTO military_equipment (id, name, type, country) VALUES (1, 'M1 Abrams', 'Tank', 'USA');", 'sql': "INSERT INTO military_equipment (id, name, type, country) VALUES (2, 'Leopard 2', 'Tank', 'Germany');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='INSERT INTO military_equipment (id, name, type, country) VALUES (<new_id>, <new_name>, <new_type>, <new_country>);',
    sql="INSERT INTO military_equipment (id, name, type, country) VALUES (2, 'F-35 Lightning', 'Fighter Jet', 'USA');"
), 1), (Example({'sql_prompt': 'Show total number of union members by state', 'sql_context': "CREATE TABLE union_members (id INT, name VARCHAR(50), state VARCHAR(2), city VARCHAR(20), occupation VARCHAR(20)); INSERT INTO union_members (id, name, state, city, occupation) VALUES (1, 'John Doe', 'NY', 'New York', 'Engineer'); INSERT INTO union_members (id, name, state, city, occupation) VALUES (2, 'Jane Smith', 'CA', 'Los Angeles', 'Teacher'); INSERT INTO union_members (id, name, state, city, occupation) VALUES (3, 'Alice Johnson', 'NY', 'Buffalo', 'Nurse');", 'sql': 'SELECT state, COUNT(*) as total_members FROM union_members GROUP BY state;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='count the number of members for each state.',
    sql='SELECT state, COUNT(*) AS total_members FROM union_members GROUP BY state;'
), 1), (Example({'sql_prompt': 'What is the total value of military equipment sales to all countries?', 'sql_context': "CREATE TABLE military_sales (id INT, country VARCHAR, value FLOAT); INSERT INTO military_sales (id, country, value) VALUES (1, 'Canada', 5000000), (2, 'Mexico', 3000000), (3, 'Canada', 7000000);", 'sql': 'SELECT SUM(value) FROM military_sales;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='```sql\nSELECT SUM(value) AS total_sales FROM military_sales;\n```',
    sql='```sql\nSELECT SUM(value) AS total_sales_value FROM military_sales;\n```'
), 1), (Example({'sql_prompt': 'Identify the top 3 countries with the highest number of social impact projects in 2019.', 'sql_context': "CREATE TABLE countries (id INT, name VARCHAR(255), total_projects INT); INSERT INTO countries (id, name, total_projects) VALUES (1, 'Brazil', 500), (2, 'India', 700), (3, 'South Africa', 350); CREATE TABLE projects_by_country (country VARCHAR(255), project_count INT); INSERT INTO projects_by_country (country, project_count) SELECT country, COUNT(*) FROM projects GROUP BY country;", 'sql': 'SELECT c.name, p.project_count FROM countries c JOIN (SELECT country, COUNT(*) AS project_count FROM projects GROUP BY country ORDER BY project_count DESC LIMIT 3) p ON c.name = p.country;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='```sql\nSELECT name, project_count \nFROM countries c LEFT JOIN projects_by_country pbc ON c.name = pbc.country \nWHERE YEAR(project_start_date) = 2019 \nORDER BY project_count DESC \nLIMIT 3;\n```',
    sql='```sql\nSELECT name, total_projects FROM countries ORDER BY total_projects DESC LIMIT 3;\n```'
), 0), (Example({'sql_prompt': 'What is the maximum market price of Terbium in China for 2017?', 'sql_context': 'CREATE TABLE Terbium_Market_Prices (id INT, year INT, country VARCHAR(255), market_price FLOAT);', 'sql': "SELECT MAX(market_price) FROM Terbium_Market_Prices WHERE year = 2017 AND country = 'China';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="```sql\nSELECT MAX(market_price) FROM Terbium_Market_Prices WHERE year = 2017 AND country = 'China';\n```",
    sql="```sql\nSELECT MAX(market_price) AS max_market_price\nFROM Terbium_Market_Prices\nWHERE year = 2017 AND country = 'China';\n```"
), 1), (Example({'sql_prompt': 'What is the maximum amount of research grant received by a faculty member in the Arts and Humanities department?', 'sql_context': "CREATE TABLE grants_faculty (id INT, department VARCHAR(50), faculty_name VARCHAR(50), amount DECIMAL(10,2), grant_date DATE); INSERT INTO grants_faculty (id, department, faculty_name, amount, grant_date) VALUES (1, 'Arts and Humanities', 'Grace', 12000.00, '2018-06-10'), (2, 'Arts and Humanities', 'Harry', 18000.00, '2019-12-20'), (3, 'Arts and Humanities', 'Ida', 20000.00, '2020-08-05');", 'sql': "SELECT MAX(amount) FROM grants_faculty WHERE department = 'Arts and Humanities';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='find the maximum amount of research grant received by a faculty member in the Arts and Humanities department. We can start by selecting the relevant columns, specifying the department filter, and then finding the maximum value of the amount column.',
    sql="SELECT MAX(amount) AS max_amount FROM grants_faculty WHERE department = 'Arts and Humanities';"
), 1), (Example({'sql_prompt': 'What is the total mass of all space debris in orbit?', 'sql_context': "CREATE TABLE Space_Debris (ID INT, Object_Type VARCHAR(50), Mass FLOAT); INSERT INTO Space_Debris (ID, Object_Type, Mass) VALUES (1, 'Defunct Satellite', 1500.0), (2, 'Rocket Body', 2000.0), (3, 'Fuel Tank', 500.0), (4, 'Nuts and Bolts', 100.0), (5, 'Spent Rocket Stage', 3000.0);", 'sql': 'SELECT SUM(Mass) FROM Space_Debris;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here's the SQL query:\n```sql\nSELECT SUM(Mass) FROM Space_Debris;\n```",
    sql='```sql\nSELECT SUM(Mass) AS total_mass FROM Space_Debris;\n```'
), 1), (Example({'sql_prompt': 'What is the average age of players who play "Racing Simulator 2022"?', 'sql_context': "CREATE TABLE Players (PlayerID INT, PlayerName VARCHAR(50), Game VARCHAR(50), Age INT); INSERT INTO Players (PlayerID, PlayerName, Game, Age) VALUES (1, 'John Doe', 'Racing Simulator 2022', 25), (2, 'Jane Smith', 'Racing Simulator 2022', 30), (3, 'Alice Johnson', 'Shooter Game 2022', 22);", 'sql': "SELECT AVG(Age) FROM Players WHERE Game = 'Racing Simulator 2022';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="```sql\nSELECT AVG(Age) AS Average_Age\nFROM Players\nWHERE Game = 'Racing Simulator 2022';\n```",
    sql="```sql\nSELECT AVG(Age) AS Average_Age FROM table WHERE Game = 'Racing Simulator 2022'\n```"
), 0), (Example({'sql_prompt': 'What is the total revenue generated by concert ticket sales in the US?', 'sql_context': "CREATE TABLE concert_tickets (ticket_id int, venue_id int, ticket_price decimal, timestamp datetime, country varchar(255)); INSERT INTO concert_tickets (ticket_id, venue_id, ticket_price, timestamp, country) VALUES (1, 789, 50.00, '2022-06-01 12:00:00', 'United States');", 'sql': "SELECT SUM(ticket_price) as total_revenue FROM concert_tickets WHERE timestamp BETWEEN '2022-01-01' AND '2022-12-31' AND country = 'United States';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="```sql\nSELECT SUM(ticket_price) AS total_revenue\nFROM concert_tickets\nWHERE country = 'United States';\n```",
    sql="```sql\nSELECT SUM(ticket_price) AS total_revenue\nFROM concert_tickets\nWHERE country = 'US';\n```"
), 0), (Example({'sql_prompt': "How many cases did attorney 'Jane Doe' handle in total?", 'sql_context': "CREATE TABLE Attorneys (AttorneyID int, Name varchar(50), Specialty varchar(50)); INSERT INTO Attorneys (AttorneyID, Name, Specialty) VALUES (2, 'Jane Doe', 'Civil'); CREATE TABLE Cases (CaseID int, ClientID int, Category varchar(50), AttorneyID int); INSERT INTO Cases (CaseID, ClientID, Category, AttorneyID) VALUES (301, 3, 'Civil', 2);", 'sql': "SELECT COUNT(*) as TotalCases FROM Cases WHERE AttorneyID = (SELECT AttorneyID FROM Attorneys WHERE Name = 'Jane Doe');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="count the number of cases that 'Jane Doe' has handled. We can achieve this by joining the Attorneys and Cases tables on the respective AttorneyID columns and filtering the results for our specified attorney.",
    sql="```sql\nSELECT COUNT(*) \nFROM Cases c\nJOIN Attorneys a ON c.AttorneyID = a.AttorneyID\nWHERE a.Name = 'Jane Doe';\n```"
), 1), (Example({'sql_prompt': 'Show the top 3 content categories in Japan with the most posts.', 'sql_context': "CREATE TABLE content_categories (id INT, content_category VARCHAR(255)); CREATE TABLE posts_extended (id INT, content_category_id INT, content TEXT, country VARCHAR(255)); INSERT INTO content_categories (id, content_category) VALUES (1, 'AI'), (2, 'Data Science'), (3, 'Machine Learning'); INSERT INTO posts_extended (id, content_category_id, content, country) VALUES (1, 1, 'Hello', 'Japan'), (2, 1, 'World', 'Japan'), (3, 2, 'AI', 'Japan');", 'sql': "SELECT content_categories.content_category, COUNT(posts_extended.id) AS post_count FROM content_categories JOIN posts_extended ON posts_extended.content_category_id = content_categories.id WHERE posts_extended.country = 'Japan' GROUP BY content_categories.content_category ORDER BY post_count DESC LIMIT 3;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='count the number of posts for each content category in Japan. We can then ORDER BY the count and LIMIT the result to the top 3.',
    sql="```sql\nSELECT content_category, COUNT(*) AS post_count\nFROM posts_extended\nWHERE country = 'Japan'\nGROUP BY content_category\nORDER BY post_count DESC\nLIMIT 3;\n```"
), 1), (Example({'sql_prompt': 'How many defense contracts were signed in each quarter of 2020?', 'sql_context': "CREATE TABLE defense_contracts (contract_id INT, contract_date DATE); INSERT INTO defense_contracts VALUES (1, '2020-03-15'), (2, '2020-06-01'), (3, '2020-09-15');", 'sql': "SELECT TO_CHAR(contract_date, 'YYYY-Q') AS quarter, COUNT(*) FROM defense_contracts WHERE contract_date >= DATE '2020-01-01' AND contract_date < DATE '2021-01-01' GROUP BY quarter;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='```sql\nSELECT COUNT(*) AS contracts_signed, QUARTER(contract_date) AS quarter\nFROM defense_contracts\nWHERE YEAR(contract_date) = 2020\nGROUP BY QUARTER(contract_date);\n```',
    sql='```sql\nSELECT COUNT(*) AS contracts_signed, QUARTER(contract_date) AS quarter\nFROM defense_contracts\nWHERE YEAR(contract_date) = 2020\nGROUP BY QUARTER(contract_date);\n```'
), 0), (Example({'sql_prompt': 'What is the total duration played for each player?', 'sql_context': "CREATE TABLE PlayerGame (PlayerID INT, GameID INT, Played DATE, StartTime TIMESTAMP, EndTime TIMESTAMP); INSERT INTO PlayerGame (PlayerID, GameID, Played, StartTime, EndTime) VALUES (1, 1, '2022-01-01', '2022-01-01 10:00:00', '2022-01-01 12:00:00'), (2, 2, '2022-01-02', '2022-01-02 14:00:00', '2022-01-02 16:00:00'), (3, 1, '2022-01-03', '2022-01-03 10:00:00', '2022-01-03 11:00:00'), (4, 3, '2022-01-04', '2022-01-04 18:00:00', '2022-01-04 19:00:00');", 'sql': 'SELECT PlayerID, SUM(TIMESTAMPDIFF(MINUTE, StartTime, EndTime)) FROM PlayerGame GROUP BY PlayerID;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here's the SQL query. \n\n```SQL\n-- Calculate the duration played for each player and display their PlayerID and the total duration in minutes\nSELECT PlayerID, SUM(TIMESTAMPDIFF(MINUTE, StartTime, EndTime)) as TotalDuration\nFROM PlayerGame\nGROUP BY PlayerID;\n```\nDo you require any further assistance?",
    sql='```sql\nSELECT PlayerID, SUM(TIMESTAMPDIFF(MINUTE, StartTime, EndTime)) as TotalDuration \nFROM PlayerGame \nGROUP BY PlayerID;\n```'
), 1), (Example({'sql_prompt': 'Find the percentage change in tourism to Thailand between 2019 and 2021.', 'sql_context': 'CREATE TABLE thailand_tourism (year INT, total_visitors INT); INSERT INTO thailand_tourism (year, total_visitors) VALUES (2019, 40000), (2021, 30000);', 'sql': 'SELECT (30000 - 40000) * 100.0 / 40000 AS change_percentage FROM thailand_tourism WHERE year = 2021;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='```sql\nSELECT ((2021 - 2019) / 2019) * 100 AS percentage_change\nFROM thailand_tourism;\n```',
    sql='```sql\nSELECT percentage_change \nFROM (SELECT ((2021 - 2019) / 2019) * 100 AS percentage_change \n      FROM thailand_tourism);\n```'
), 0), (Example({'sql_prompt': 'How many students with physical disabilities have not received any accommodations in the last year?', 'sql_context': 'CREATE TABLE Accommodations (id INT, student VARCHAR(255), date DATE); CREATE TABLE Students (id INT, name VARCHAR(255), age INT, disability VARCHAR(255));', 'sql': "SELECT COUNT(*) FROM Students LEFT JOIN Accommodations ON Students.id = Accommodations.student WHERE disability = 'physical disability' AND date IS NULL;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='count the number of students with physical disabilities who have not received any accommodations. \n\nWe can join the `Students` table with itself, once for students with physical disabilities and once for those without any accommodations in the past year. Using a NOT EXISTS clause we can filter out students who have received accommodations.',
    sql="```sql\nSELECT count(*) \nFROM Students s1 \nWHERE s1.disability = 'physical' \n    AND NOT EXISTS (\n        SELECT 1 \n        FROM Accommodations a \n        WHERE a.student = s1.id \n        AND DATE_PART('year', a.date) = DATE_PART('year', CURRENT_DATE) - 1\n    )\n```"
), 1), (Example({'sql_prompt': 'What is the maximum property price in neighborhoods with inclusive housing policies, and the minimum size of properties in those neighborhoods?', 'sql_context': "CREATE TABLE property (id INT, price INT, size_sqft INT, area VARCHAR(255), has_inclusive_policy BOOLEAN); INSERT INTO property (id, price, size_sqft, area, has_inclusive_policy) VALUES (1, 500000, 1500, 'urban', true), (2, 400000, 1200, 'urban', false);", 'sql': "SELECT MAX(price), MIN(size_sqft) FROM property WHERE area = 'urban' AND has_inclusive_policy = true;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='```sql\nSELECT max(price) ,  min(size_sqft) FROM property WHERE has_inclusive_policy = true;\n```',
    sql='```sql\nSELECT max(price) , min(size_sqft) FROM property WHERE has_inclusive_policy = true;\n```'
), 0), (Example({'sql_prompt': "Add a new safety incident to the safety_incidents table (id: 4, aircraft: 'Space Shuttle Challenger', date: '1986-01-28', description: 'O-ring failure')", 'sql_context': 'CREATE TABLE safety_incidents (id INT, aircraft VARCHAR(255), date DATE, description VARCHAR(255));', 'sql': "INSERT INTO safety_incidents (id, aircraft, date, description) VALUES (4, 'Space Shuttle Challenger', '1986-01-28', 'O-ring failure');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="INSERT INTO safety_incidents (id, aircraft, date, description) VALUES (4, 'Space Shuttle Challenger', '1986-01-28', 'O-ring failure').",
    sql="INSERT INTO statement looks good. Here's the signature for the text to SQL generation task:\n```sql\n---\nSQL Prompt: \nSql Context: \nReasoning: \nSQL:\n---\n```"
), 0), (Example({'sql_prompt': "What is the average age of players who prefer the 'FPS' genre in the 'player_preferences' and 'player_demographics' tables?", 'sql_context': "CREATE TABLE player_preferences (player_id INT, genre VARCHAR(50)); CREATE TABLE player_demographics (player_id INT, age INT); INSERT INTO player_preferences (player_id, genre) VALUES (1, 'FPS'), (2, 'RPG'), (3, 'FPS'), (4, 'Simulation'); INSERT INTO player_demographics (player_id, age) VALUES (1, 25), (2, 30), (3, 35), (4, 40);", 'sql': "SELECT AVG(age) as avg_fps_age FROM player_demographics JOIN player_preferences ON player_preferences.player_id = player_demographics.player_id WHERE genre = 'FPS';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here's the SQL query:\n```sql\nSELECT AVG(age) FROM player_demographics pd INNER JOIN player_preferences pp ON pd.player_id = pp.player_id WHERE pp.genre = 'FPS';\n```\nDo you require any further assistance?",
    sql="```sql\nSELECT AVG(age) FROM player_demographics AS pd INNER JOIN player_preferences AS pp ON pd.player_id = pp.player_id WHERE pp.genre = 'FPS';\n```"
), 1), (Example({'sql_prompt': 'What is the diversity ratio (percentage of non-male employees) in each department?', 'sql_context': "CREATE TABLE Employees (EmployeeID int, Department varchar(20), Gender varchar(10)); INSERT INTO Employees (EmployeeID, Department, Gender) VALUES (1, 'Marketing', 'Male'); INSERT INTO Employees (EmployeeID, Department, Gender) VALUES (2, 'Marketing', 'Female'); INSERT INTO Employees (EmployeeID, Department, Gender) VALUES (3, 'IT', 'Male'); INSERT INTO Employees (EmployeeID, Department, Gender) VALUES (4, 'IT', 'Non-binary');", 'sql': "SELECT Department, (COUNT(CASE WHEN Gender <> 'Male' THEN 1 END) / COUNT(*)) * 100 AS DiversityRatio FROM Employees GROUP BY Department;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='```sql\nSELECT Department, (COUNT(*) * 100.0 / (COUNT(*) + 0.0)) AS Diversity_Ratio\nFROM Employees\nGROUP BY Department;\n```',
    sql='```sql\nSELECT Department, COUNT(*)/COUNT(*)::float * 100 AS diversity_ratio FROM Employees GROUP BY Department;\n```'
), 0), (Example({'sql_prompt': 'What is the average donation per donor in India?', 'sql_context': "CREATE TABLE donations (donor_id INT, donation_amount DECIMAL(10, 2), donation_date DATE, country TEXT); INSERT INTO donations VALUES (1, 50.00, '2021-05-15', 'India'), (2, 100.00, '2021-06-10', 'India'), (3, 25.00, '2021-04-01', 'India');", 'sql': "SELECT AVG(donation_amount) FROM donations WHERE country = 'India';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="```sql\nSELECT AVG(donation_amount) AS average_donation\nFROM donations\nWHERE country = 'India';\n```",
    sql="```sql\nSELECT AVG(donation_amount) AS average_donation_per_donor FROM donations WHERE country = 'India';\n```"
), 1), (Example({'sql_prompt': 'How many wildlife habitats in South Africa have a total area greater than 50000 hectares?', 'sql_context': 'CREATE TABLE wildlife_habitats (id INT, name TEXT, area REAL, country TEXT);', 'sql': "SELECT COUNT(*) FROM wildlife_habitats WHERE country = 'South Africa' GROUP BY country HAVING SUM(area) > 50000;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='count the number of rows in the `wildlife_habitats` table that meet the specified condition. \n\nWe can use the `SELECT` statement with the `WHERE` clause to filter the rows. The condition for the WHERE clause is `area > 50000`. We also need to count the number of rows returned by this query. For that, we can use the `COUNT(*)` aggregate function.',
    sql="```sql\nSELECT COUNT(*) \nFROM wildlife_habitats \nWHERE area > 50000 AND country = 'South Africa';\n```"
), 0), (Example({'sql_prompt': 'What is the percentage of faculty members who identify as AAPI in the School of Business?', 'sql_context': "CREATE TABLE faculty_members (id INT, faculty_name VARCHAR(50), faculty_department VARCHAR(50), faculty_race VARCHAR(20)); INSERT INTO faculty_members (id, faculty_name, faculty_department, faculty_race) VALUES (1, 'Taylor Smith', 'Business Administration', 'AAPI'), (2, 'James Johnson', 'Marketing', 'White'), (3, 'Avery Brown', 'Finance', 'Black'), (4, 'Katie Davis', 'Management', 'White'), (5, 'Jamie Wilson', 'Accounting', 'Latinx'), (6, 'Leah Kim', 'Business Analytics', 'AAPI');", 'sql': "SELECT (COUNT(*) FILTER (WHERE faculty_race = 'AAPI')) * 100.0 / COUNT(*) FROM faculty_members WHERE faculty_department LIKE '%Business%';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="produce the SQL. We can start by identifying the columns we need to select and the table we need to query. We'll also need to calculate the total number of faculty members in the School of Business who identify as AAPI, and then divide that number by the total faculty count to get the percentage.\n\nSince the prompt mentions faculty race and department, we know that the faculty_race and faculty_department columns will be involved. We'll need to filter the data to only include the School of Business.",
    sql="SELECT faculty_race, COUNT(*) AS aapi_count\nFROM faculty_members\nWHERE faculty_department = 'Business' AND faculty_race = 'AAPI'\nGROUP BY faculty_race;"
), 0), (Example({'sql_prompt': 'How many water treatment plants are there in the province of Ontario, Canada?', 'sql_context': "CREATE TABLE water_treatment_plants_ontario (id INT, province VARCHAR); INSERT INTO water_treatment_plants_ontario (id, province) VALUES (1, 'Ontario'), (2, 'Quebec'), (3, 'Ontario'), (4, 'British Columbia');", 'sql': "SELECT COUNT(*) FROM water_treatment_plants_ontario WHERE province = 'Ontario';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='count the number of water treatment plants in the province of Ontario. We can use the COUNT() function in SQL to count the number of rows that match a specific condition.',
    sql="```sql\nSELECT COUNT(*) \nFROM water_treatment_plants_ontario \nWHERE province = 'Ontario';\n```"
), 1), (Example({'sql_prompt': 'Delete vessels that have not been inspected in the last 12 months', 'sql_context': "CREATE TABLE vessel_inspection (vessel_id INT, inspection_date DATE); INSERT INTO vessel_inspection (vessel_id, inspection_date) VALUES (1, '2020-01-01'), (2, '2021-06-15'), (3, '2019-12-20');", 'sql': 'DELETE FROM vessel_inspection WHERE vessel_id IN (SELECT vessel_id FROM vessel_inspection WHERE inspection_date < DATE_SUB(CURDATE(), INTERVAL 12 MONTH));'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='```sql\nDELETE FROM vessel_inspection WHERE inspection_date < DATEADD(month, -12, GETDATE());\n```',
    sql='```sql\n-- Delete vessels that have not been inspected in the last 12 months\nDELETE FROM vessel_inspection \nWHERE inspection_date < DATEADD(month, -12, CURDATE());\n```'
), 0), (Example({'sql_prompt': "Which materials in the 'inventory' table have a quantity of at least 100 and are not used in the production of any product in the 'products' table?", 'sql_context': "CREATE TABLE inventory(id INT, material VARCHAR(255), quantity INT); CREATE TABLE products(id INT, material VARCHAR(255), quantity INT); INSERT INTO inventory(id, material, quantity) VALUES (1, 'organic cotton', 75), (2, 'conventional cotton', 100), (3, 'organic cotton', 30), (4, 'hemp', 60); INSERT INTO products(id, material, quantity) VALUES (1, 'organic cotton', 150), (2, 'conventional cotton', 200), (3, 'hemp', 100);", 'sql': 'SELECT material FROM inventory i WHERE quantity >= 100 AND NOT EXISTS (SELECT * FROM products p WHERE i.material = p.material);'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='```sql\nSELECT material, quantity \nFROM inventory \nWHERE quantity >= 100 \nAND material NOT IN (\n    SELECT material \n    FROM products\n);\n```',
    sql='```sql\nSELECT material, quantity \nFROM inventory \nWHERE quantity >= 100 \n      AND material NOT IN (\n          SELECT material \n          FROM products\n      );\n```'
), 1), (Example({'sql_prompt': "What is the minimum billing amount for cases in the region 'South'?", 'sql_context': 'CREATE TABLE cases (case_id INT, region TEXT, billing_amount INT);', 'sql': "SELECT MIN(billing_amount) FROM cases WHERE region = 'South';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="```sql\nSELECT MIN(billing_amount) FROM cases WHERE region = 'South';\n```",
    sql="```sql\nSELECT MIN(billing_amount) AS min_billing_amount\nFROM cases\nWHERE region = 'South';\n```"
), 1), (Example({'sql_prompt': 'What is the total number of postpaid and prepaid mobile subscribers in each region?', 'sql_context': "CREATE TABLE mobile_subscribers (subscriber_id INT, subscriber_type VARCHAR(10), region VARCHAR(20)); INSERT INTO mobile_subscribers (subscriber_id, subscriber_type, region) VALUES (1, 'postpaid', 'West'), (2, 'prepaid', 'East'), (3, 'postpaid', 'North'), (4, 'prepaid', 'South'), (5, 'postpaid', 'East');", 'sql': 'SELECT region, COUNT(*) as total_subscribers FROM mobile_subscribers GROUP BY region;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="```sql\n-- SQL query starts\nSELECT region, SUM(CASE WHEN subscriber_type = 'postpaid' THEN 1 ELSE 0 END) AS postpaid, SUM(CASE WHEN subscriber_type = 'prepaid' THEN 1 ELSE 0 END) AS prepaid\nFROM mobile_subscribers\nGROUP BY region;\n-- SQL query ends\n```",
    sql="```sql\nSELECT region, COUNT(*) FILTER (WHERE subscriber_type = 'postpaid') AS postpaid, COUNT(*) FILTER (WHERE subscriber_type = 'prepaid') AS prepaid FROM mobile_subscribers GROUP BY region;\n```"
), 1), (Example({'sql_prompt': 'Identify the top 3 mining companies with the highest total production of Praseodymium in 2021 and their respective production amounts.', 'sql_context': "CREATE TABLE Company (Name TEXT, Location TEXT, Established INT); INSERT INTO Company (Name, Location, Established) VALUES ('Delta Minerals', 'Brazil', 2000), ('Epsilon Ore', 'South Africa', 2010), ('Zeta Extraction', 'Canada', 2005), ('Eta Mines', 'Russia', 2008); CREATE TABLE ProductionCompany (Year INT, Company TEXT, Element TEXT, Quantity INT); INSERT INTO ProductionCompany (Year, Company, Element, Quantity) VALUES (2021, 'Delta Minerals', 'Praseodymium', 1000), (2021, 'Epsilon Ore', 'Praseodymium', 1400), (2021, 'Zeta Extraction', 'Praseodymium', 1800), (2021, 'Eta Mines', 'Praseodymium', 1100);", 'sql': "SELECT Company, SUM(Quantity) FROM ProductionCompany WHERE Element = 'Praseodymium' AND Year = 2021 GROUP BY Company ORDER BY SUM(Quantity) DESC FETCH FIRST 3 ROWS ONLY;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="```sql\nSELECT Company, SUM(Quantity) AS Production\nFROM ProductionCompany\nWHERE Element = 'Praseodymium' AND Year = 2021\nGROUP BY Company\nORDER BY Production DESC\nLIMIT 3;\n```",
    sql="```sql\nSELECT Company, SUM(Quantity) as Total_Production\nFROM ProductionCompany\nWHERE Element = 'Praseodymium' AND Year = 2021\nGROUP BY Company\nORDER BY Total_Production DESC\nLIMIT 3;\n```"
), 1), (Example({'sql_prompt': 'How many volunteer hours were recorded for each program in Q2 2021?', 'sql_context': "CREATE TABLE VolunteerHours (VolunteerID INT, ProgramID INT, Hours DECIMAL(5,2), HourDate DATE); INSERT INTO VolunteerHours (VolunteerID, ProgramID, Hours, HourDate) VALUES (1, 1, 5, '2021-04-15'), (2, 2, 3, '2021-06-02'), (1, 1, 4, '2021-05-31'), (3, 3, 2, '2021-04-01'); CREATE TABLE Programs (ProgramID INT, ProgramName TEXT); INSERT INTO Programs (ProgramID, ProgramName) VALUES (1, 'Arts & Culture'), (2, 'Health & Wellness'), (3, 'Environment');", 'sql': "SELECT ProgramID, SUM(Hours) as TotalHours FROM VolunteerHours WHERE HourDate BETWEEN '2021-04-01' AND '2021-06-30' GROUP BY ProgramID;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="```sql\nSELECT ProgramID, SUM(Hours) AS TotalHours \nFROM VolunteerHours \nWHERE HourDate BETWEEN '2021-04-01' AND '2021-06-30' \nGROUP BY ProgramID;\n```",
    sql="```sql\nSELECT p.ProgramName, SUM(v.Hours) AS TotalHours\nFROM VolunteerHours v\nJOIN Programs p ON v.ProgramID = p.ProgramID\nWHERE HourDate BETWEEN '2021-04-01' AND '2021-06-30'\nGROUP BY p.ProgramName;\n```"
), 1), (Example({'sql_prompt': 'What is the maximum production capacity of the chemical manufacturing plants located in Canada?', 'sql_context': "CREATE TABLE chemical_plants (id INT, plant_name VARCHAR(100), country VARCHAR(50), production_capacity INT); INSERT INTO chemical_plants (id, plant_name, country, production_capacity) VALUES (1, 'Canada Plant 1', 'Canada', 5000), (2, 'Canada Plant 2', 'Canada', 7000);", 'sql': "SELECT MAX(production_capacity) FROM chemical_plants WHERE country = 'Canada';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="```sql\n-- Maximum production capacity of Canadian chemical plants\nSELECT MAX(production_capacity) AS max_capacity\nFROM chemical_plants\nWHERE country = 'Canada';\n```",
    sql="```sql\nSELECT MAX(production_capacity) AS max_capacity FROM chemical_plants WHERE country = 'Canada';\n```"
), 1), (Example({'sql_prompt': 'Who is the oldest artist from the United States?', 'sql_context': "CREATE TABLE artists (id INT, name VARCHAR(255), age INT, country VARCHAR(255)); INSERT INTO artists (id, name, age, country) VALUES (1, 'Bruce Springsteen', 72, 'United States'), (2, 'Beyoncé', 40, 'United States');", 'sql': "SELECT name, MAX(age) FROM artists WHERE country = 'United States';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='find the artist with the maximum age among those from the United States.',
    sql="```sql\nSELECT name FROM artists WHERE country = 'United States' ORDER BY age DESC LIMIT 1;\n```"
), 0), (Example({'sql_prompt': 'Find the average height of basketball players in the NBA, categorized by their position.', 'sql_context': 'CREATE TABLE nba_players_height (id INT, player_id INT, height_feet INT, height_inches INT); CREATE TABLE nba_players (id INT, name VARCHAR(100), team VARCHAR(50), position VARCHAR(50));', 'sql': 'SELECT position, AVG(height_feet + height_inches / 12) as avg_height FROM nba_players_height JOIN nba_players ON nba_players_height.player_id = nba_players.id GROUP BY position;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='```sql\nSELECT position, AVG(height) AS average_height\nFROM nba_players_height nh JOIN nba_players n ON nh.player_id = n.id\nGROUP BY position;\n```',
    sql='```sql\nSELECT position, AVG(height_feet * 12 + height_inches) / 12.0 AS average_height FROM nba_players_height nh JOIN nba_players n ON nh.player_id = n.id GROUP BY position;\n```'
), 1), (Example({'sql_prompt': 'Identify all suppliers who provide non-GMO ingredients to restaurants with Michelin stars.', 'sql_context': 'CREATE TABLE Suppliers (id INT, name VARCHAR(50), isNonGMO BOOLEAN); CREATE TABLE Restaurants (id INT, name VARCHAR(50), numStars INT); CREATE TABLE Ingredients (supplierId INT, restaurantId INT, isNonGMO BOOLEAN);', 'sql': 'SELECT Suppliers.name FROM Suppliers INNER JOIN Ingredients ON Suppliers.id = Ingredients.supplierId INNER JOIN Restaurants ON Ingredients.restaurantId = Restaurants.id WHERE Restaurants.numStars > 2 AND Ingredients.isNonGMO = TRUE;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='```sql\nSELECT T1.name FROM Suppliers AS T1 JOIN Ingredients AS T2 ON T1.id = T2.supplierId JOIN Restaurants AS T3 ON T2.restaurantId = T3.id WHERE T1.isNonGMO = true AND T3.numStars > 0\n```',
    sql='```sql\nSELECT T1.name\nFROM Suppliers AS T1\nJOIN Ingredients AS T2 ON T1.id = T2.supplierId\nJOIN Restaurants AS T3 ON T2.restaurantId = T3.id\nWHERE T1.isNonGMO = true AND T3.numStars > 0;\n```'
), 0), (Example({'sql_prompt': 'How many licenses were issued in each state as of 2022-01-01?', 'sql_context': "CREATE TABLE Licenses (id INT, state TEXT, issued_date DATE); INSERT INTO Licenses (id, state, issued_date) VALUES (1, 'California', '2021-01-01'), (2, 'Oregon', '2021-01-01'), (3, 'Washington', '2021-01-01');", 'sql': "SELECT state, COUNT(*) AS num_licenses FROM Licenses WHERE issued_date <= '2022-01-01' GROUP BY state;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="count the number of licenses for each state. We can use the GROUP BY clause to group the results by the 'state' column and count the rows in each group.",
    sql="```sql\nSELECT state, COUNT(*) AS license_count\nFROM Licenses\nWHERE issued_date = '2022-01-01'\nGROUP BY state;\n```"
), 1), (Example({'sql_prompt': 'What is the number of smart city initiatives implemented in each country?', 'sql_context': "CREATE TABLE smart_city_initiatives (initiative_id INT, country VARCHAR(50), city VARCHAR(100), status VARCHAR(50)); INSERT INTO smart_city_initiatives (initiative_id, country, city, status) VALUES (1, 'France', 'Paris', 'Implemented');", 'sql': "SELECT country, COUNT(*) as implemented_initiatives FROM smart_city_initiatives WHERE status = 'Implemented' GROUP BY country;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='count the number of initiatives for each country.',
    sql='```sql\nSELECT country, count(*) AS initiative_count\nFROM smart_city_initiatives\nGROUP BY country;\n```'
), 0), (Example({'sql_prompt': "How many tickets were sold for each team's away games in Q2 of 2022?", 'sql_context': "CREATE TABLE teams (id INT, name VARCHAR(255)); INSERT INTO teams (id, name) VALUES (1, 'TeamA'), (2, 'TeamB'), (3, 'TeamC'); CREATE TABLE games (id INT, home_team_id INT, away_team_id INT, home_team_score INT, away_team_score INT, price DECIMAL(5,2), game_date DATE); CREATE VIEW away_games AS SELECT id, away_team_id, price, game_date FROM games;", 'sql': "SELECT t.name, COUNT(*) as tickets_sold FROM away_games h JOIN teams t ON h.away_team_id = t.id WHERE h.game_date BETWEEN '2022-04-01' AND '2022-06-30' GROUP BY t.name;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='```sql\nSELECT a.away_team_id, SUM(price) as total_tickets \nFROM away_games a\nJOIN games g ON a.id = g.id\nWHERE QUARTER(g.game_date, 2022) = 2\nGROUP BY a.away_team_id;\n```',
    sql='```sql\nSELECT away_team_id, SUM(price) AS total_tickets_sold\nFROM away_games\nJOIN games ON away_games.id = games.id\nWHERE QUARTER(game_date, 2022) = 2\nGROUP BY away_team_id;\n```'
), 1), (Example({'sql_prompt': 'Show the names of companies that produced any Rare Earth elements in both 2015 and 2020.', 'sql_context': 'CREATE TABLE Producers (ProducerID INT PRIMARY KEY, Name TEXT, ProductionYear INT, RareEarth TEXT, Quantity INT);', 'sql': 'SELECT DISTINCT Name FROM Producers p1 JOIN Producers p2 ON p1.Name = p2.Name WHERE p1.ProductionYear = 2015 AND p2.ProductionYear = 2020;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="```sql\nSELECT Name FROM Producers WHERE RareEarth = 'Rare Earth' AND ProductionYear IN (2015, 2020)\n```",
    sql="```sql\nSELECT Name FROM Producers WHERE RareEarth = 'Rare Earth' AND ProductionYear IN (2015, 2020)\n```"
), 0), (Example({'sql_prompt': 'What is the total CO2 emissions of silk production in China?', 'sql_context': 'CREATE TABLE SilkProduction (id INT, country VARCHAR, co2_emissions INT);', 'sql': "SELECT SUM(co2_emissions) FROM SilkProduction WHERE country = 'China';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="```sql\nSELECT SUM(co2_emissions) FROM SilkProduction WHERE country = 'China';\n```",
    sql="SELECT SUM(co2_emissions) AS total_CO2 FROM SilkProduction WHERE country = 'China';"
), 1), (Example({'sql_prompt': 'What is the total number of AI models developed in North America with an explainability score below 70?', 'sql_context': "CREATE TABLE na_models (model_name TEXT, region TEXT, explainability_score INTEGER); INSERT INTO na_models (model_name, region, explainability_score) VALUES ('Model1', 'North America', 75), ('Model2', 'North America', 65), ('Model3', 'North America', 80);", 'sql': "SELECT SUM(incident_count) FROM na_models WHERE region = 'North America' AND explainability_score < 70;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="count the number of rows in the `na_models` table where the region is 'North America' and the explainability score is below 70.",
    sql="```sql\nSELECT COUNT(*) FROM na_models WHERE region = 'North America' AND explainability_score < 70;\n```"
), 1), (Example({'sql_prompt': 'Which mobile and broadband subscribers have not used their services in the last 30 days?', 'sql_context': "CREATE TABLE mobile_usage (customer_id INT, last_usage DATE); CREATE TABLE broadband_usage (customer_id INT, last_usage DATE); INSERT INTO mobile_usage (customer_id, last_usage) VALUES (1, '2022-01-01'), (2, '2022-02-01'); INSERT INTO broadband_usage (customer_id, last_usage) VALUES (1, '2022-01-15'), (3, '2022-02-10');", 'sql': 'SELECT customer_id FROM mobile_usage WHERE last_usage < NOW() - INTERVAL 30 DAY UNION SELECT customer_id FROM broadband_usage WHERE last_usage < NOW() - INTERVAL 30 DAY;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="find the customers who have not used their services recently. We can use the 'DATE' and 'LAST_USAGE' columns to filter out the relevant records.",
    sql='```sql\nSELECT customer_id \nFROM mobile_usage \nWHERE last_usage < DATEADD(day, -30, GETDATE()) \nUNION \nSELECT customer_id \nFROM broadband_usage \nWHERE last_usage < DATEADD(day, -30, GETDATE());\n```'
), 0), (Example({'sql_prompt': 'What is the total number of grants given per city?', 'sql_context': 'CREATE TABLE Nonprofits (NonprofitID INT, Name VARCHAR(50), City VARCHAR(50), State VARCHAR(2), Zip VARCHAR(10), MissionStatement TEXT); CREATE TABLE Grants (GrantID INT, DonorID INT, NonprofitID INT, GrantAmount DECIMAL(10,2), Date DATE); CREATE TABLE Donors (DonorID INT, Name VARCHAR(50), City VARCHAR(50), State VARCHAR(2), Zip VARCHAR(10), DonationAmount DECIMAL(10,2));', 'sql': 'SELECT City, COUNT(*) FROM Grants G INNER JOIN Nonprofits N ON G.NonprofitID = N.NonprofitID GROUP BY City;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="count the number of grants for each city. We can use the `Nonprofits` and `Grants` tables, joining on the `NonprofitID` column. Since we're grouping by cities, we'll need to use the `City` column from the `Nonprofits` table. The count function will tally the number of grants for each city.\n\nHere's the SQL query:\n```sql\nSELECT Nonprofits.City, COUNT(Grants.GrantID) AS TotalGrants\nFROM Nonprofits\nLEFT JOIN Grants ON Nonprofits.NonprofitID = Grants.NonprofitID\nGROUP BY Nonprofits.City;\n```",
    sql='```sql\nSELECT Nonprofits.City, COUNT(Grants.GrantID) AS TotalGrantsPerCity\nFROM Nonprofits LEFT JOIN Grants ON Nonprofits.NonprofitID = Grants.NonprofitID\nGROUP BY Nonprofits.City;\n```'
), 1), (Example({'sql_prompt': 'Show the average soil moisture level for each field in the past week', 'sql_context': 'CREATE TABLE field (id INT, name VARCHAR(255), farm_id INT);CREATE TABLE soil_moisture (id INT, field_id INT, measurement DATE, level INT);', 'sql': 'SELECT field_id, AVG(level) FROM soil_moisture WHERE measurement >= DATEADD(day, -7, GETDATE()) GROUP BY field_id;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='```sql\nSELECT T1.name ,  avg(T2.level) \nFROM field AS T1 JOIN soil_moisture AS T2 ON T1.id  =  T2.field_id \nWHERE T2.measurement BETWEEN DATE_SUB(CURDATE() ,  INTERVAL  7  DAY) AND CURDATE() \nGROUP BY T1.name;\n```',
    sql='```sql\nSELECT T1.name ,  avg(T2.level) FROM field AS T1 JOIN soil_moisture AS T2 ON T1.id  =  T2.field_id WHERE T2.measurement BETWEEN DATE_SUB(CURDATE() ,  INTERVAL  7 DAY) AND CURDATE() GROUP BY T1.name;\n```'
), 1), (Example({'sql_prompt': 'What is the total number of satellites deployed by SpaceComm in the Middle East?', 'sql_context': 'CREATE TABLE SatelliteDeployment (satellite_id INT, company VARCHAR(255), region VARCHAR(255));', 'sql': "SELECT COUNT(*) FROM SatelliteDeployment WHERE company = 'SpaceComm' AND region = 'Middle East';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="count the number of satellites for SpaceComm in the Middle East. \n\nWe can use the following SQL query:\n```sql\nSELECT COUNT(*) \nFROM SatelliteDeployment \nWHERE company = 'SpaceComm' AND region = 'Middle East';\n```",
    sql="```sql\nSELECT COUNT(*) FROM table WHERE company = 'SpaceComm' AND region = 'Middle East';\n```"
), 0), (Example({'sql_prompt': 'What is the total number of tickets sold for performances with a rating of 5?', 'sql_context': "CREATE TABLE performance (id INT PRIMARY KEY, name VARCHAR(255), date DATE, artist_id INT, rating INT); INSERT INTO performance (id, name, date, artist_id, rating) VALUES (1, 'Dance Recital', '2022-03-01', 1, 5);", 'sql': 'SELECT SUM(t.quantity) as total_tickets_sold FROM performance p INNER JOIN ticket t ON p.id = t.performance_id WHERE p.rating = 5;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='count the number of rows that meet the condition.',
    sql='`SELECT COUNT(*) FROM performance WHERE rating = 5`'
), 1), (Example({'sql_prompt': 'What is the average emergency response time by region for fire incidents?', 'sql_context': 'CREATE TABLE Regions (RegionID INT, RegionName VARCHAR(255)); CREATE TABLE Incidents (IncidentID INT, IncidentType VARCHAR(255), RegionID INT, ResponseTime INT);', 'sql': "SELECT AVG(ResponseTime) as AvgResponseTime, RegionName FROM Incidents i JOIN Regions r ON i.RegionID = r.RegionID WHERE IncidentType = 'Fire' GROUP BY RegionName;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here's the SQL query:\n```sql\nSELECT RegionName, AVG(ResponseTime) AS Average_Response_Time FROM Incidents INNER JOIN Regions ON Incidents.RegionID = Regions.RegionID WHERE IncidentType = 'fire' GROUP BY RegionName;\n```\nDo you require any further assistance?",
    sql="```sql\nSELECT RegionName, AVG(ResponseTime) AS Average_Response_Time\nFROM Incidents\nINNER JOIN Regions ON Incidents.RegionID = Regions.RegionID\nWHERE IncidentType = 'fire'\nGROUP BY RegionName;\n```"
), 1), (Example({'sql_prompt': "What is the average revenue of virtual tours in 'Spain'?", 'sql_context': "CREATE TABLE virtual_tours (id INT, name TEXT, country TEXT, revenue FLOAT); INSERT INTO virtual_tours (id, name, country, revenue) VALUES (1, 'Virtual Barcelona Tour', 'Spain', 2000);", 'sql': "SELECT AVG(revenue) FROM virtual_tours WHERE country = 'Spain';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="produce the SQL. We can start by selecting the revenue column from the virtual_tours table, but we need to filter only the rows where the country is 'Spain'. \n\nSince we want the average revenue, we'll use the AVG() function on the revenue column.",
    sql="SELECT AVG(revenue) FROM virtual_tours WHERE country = 'Spain';"
), 1), (Example({'sql_prompt': 'What is the total number of students and staff with accommodations in the "disability_services" schema, excluding the "accessibility_parking" type?', 'sql_context': 'CREATE SCHEMA disability_services; CREATE TABLE staff (id INT, name VARCHAR(50), accommodation VARCHAR(50)); CREATE TABLE students (id INT, name VARCHAR(50), accommodation VARCHAR(50));', 'sql': "SELECT COUNT(*) FROM disability_services.staff WHERE accommodation != 'accessibility_parking' UNION SELECT COUNT(*) FROM disability_services.students WHERE accommodation != 'accessibility_parking';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="```sql\nSELECT count(*) FROM disability_services.staff s INNER JOIN disability_services.students st ON s.accommodation != 'accessibility_parking' AND st.accommodation != 'accessibility_parking'\n```",
    sql="```sql\nSELECT count(*) \nFROM disability_services.staff s \nINNER JOIN disability_services.students st \nON s.accommodation != 'accessibility_parking' \nAND st.accommodation != 'accessibility_parking';\n```"
), 0), (Example({'sql_prompt': 'What is the number of electric trams in service in Istanbul in 2021?', 'sql_context': "CREATE TABLE electric_trams (tram_id INT, service_date DATE, in_service INT); INSERT INTO electric_trams (tram_id, service_date, in_service) VALUES (1, '2021-01-01', 1), (2, '2021-01-02', 1), (3, '2021-01-03', 0);", 'sql': "SELECT COUNT(*) FROM electric_trams WHERE in_service = 1 AND service_date BETWEEN '2021-01-01' AND '2021-12-31';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='count the number of rows where the `in_service` column is 1 and the `service_date` corresponds to a date in the year 2021.',
    sql='```sql\nSELECT COUNT(*) FROM electric_trams WHERE in_service = 1 AND YEAR(service_date) = 2021;\n```'
), 1), (Example({'sql_prompt': "What is the total number of trips taken on accessible vehicles in the 'East' region for the current year?", 'sql_context': "CREATE TABLE Vehicles (VehicleID int, VehicleType varchar(255), Region varchar(255)); INSERT INTO Vehicles (VehicleID, VehicleType, Region) VALUES (1, 'Bus', 'East'), (2, 'Tram', 'West'), (3, 'Wheelchair Bus', 'South'), (4, 'Accessible Tram', 'East'); CREATE TABLE Trips (TripID int, VehicleID int, TripDateTime datetime);", 'sql': "SELECT COUNT(*) FROM Vehicles JOIN Trips ON Vehicles.VehicleID = Trips.VehicleID WHERE Vehicles.Region = 'East' AND Vehicles.VehicleType IN ('Wheelchair Bus', 'Accessible Tram') AND YEAR(Trips.TripDateTime) = YEAR(GETDATE());"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="```sql\n-- First, we select the count of trips taken on accessible vehicles in the 'East' region.\nSELECT COUNT(*) \nFROM Vehicles v \nJOIN Trips t ON v.VehicleID = t.VehicleID\n-- We filter by vehicles which are accessible and in the 'East' region.\nWHERE v.Region = 'East' AND v.VehicleType LIKE '%Accessible%'\n-- We consider only the current year.\nAND YEAR(TripDateTime) = YEAR(CURRENT_DATE());\n```",
    sql="```sql\nSELECT COUNT(*) FROM Vehicles v JOIN Trips t ON v.VehicleID = t.VehicleID WHERE v.Region = 'East' AND v.VehicleType LIKE '%Accessible%' AND YEAR(TripDateTime) = YEAR(CURRENT_DATE())\n```"
), 0), (Example({'sql_prompt': 'Identify the suppliers with the highest and lowest sustainability ratings in the supplier_ratings table.', 'sql_context': 'CREATE TABLE supplier_ratings (supplier_id INT, sustainability_rating INT); INSERT INTO supplier_ratings (supplier_id, sustainability_rating) VALUES (100, 95), (101, 60), (102, 90);', 'sql': 'SELECT supplier_id, sustainability_rating FROM (SELECT supplier_id, sustainability_rating, RANK() OVER (ORDER BY sustainability_rating DESC) AS rank, RANK() OVER (ORDER BY sustainability_rating ASC) AS reverse_rank FROM supplier_ratings) WHERE rank = 1 OR reverse_rank = 1;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='```sql\nSELECT supplier_id, sustainability_rating FROM supplier_ratings ORDER BY sustainability_rating DESC LIMIT 1,1 INTERSECT SELECT supplier_id, sustainability_rating FROM supplier_ratings ORDER BY sustainability_rating ASC LIMIT 1,1;\n```',
    sql='```sql\nSELECT supplier_id, sustainability_rating \nFROM supplier_ratings \nORDER BY sustainability_rating DESC LIMIT 1 \nINTERSECT \nSELECT supplier_id, sustainability_rating \nFROM supplier_ratings \nORDER BY sustainability_rating ASC LIMIT 1;\n```'
), 1), (Example({'sql_prompt': 'What is the total amount of socially responsible loans issued to women in 2021?', 'sql_context': 'CREATE TABLE socially_responsible_lending (id INT PRIMARY KEY, loan_amount DECIMAL(10, 2), borrower_gender TEXT, lending_date DATE);', 'sql': "SELECT SUM(loan_amount) FROM socially_responsible_lending WHERE borrower_gender = 'Female' AND lending_date BETWEEN '2021-01-01' AND '2021-12-31';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='produce the SQL. We can start by selecting the relevant columns and filtering the data based on the lending date and borrower gender. The total amount can be calculated by summing up the loan amounts.',
    sql="```sql\nSELECT SUM(loan_amount) AS total_amount\nFROM socially_responsible_lending\nWHERE borrower_gender = 'women' AND DATEPART(year, lending_date) = 2021;\n```"
), 0), (Example({'sql_prompt': 'What is the maximum energy efficiency rating of hydroelectric dams in Canada?', 'sql_context': "CREATE TABLE hydro_dams (id INT, name TEXT, country TEXT, energy_efficiency_rating FLOAT); INSERT INTO hydro_dams (id, name, country, energy_efficiency_rating) VALUES (1, 'Robert-Bourassa', 'Canada', 0.94), (2, 'Churchill Falls', 'Canada', 0.92);", 'sql': "SELECT MAX(energy_efficiency_rating) FROM hydro_dams WHERE country = 'Canada';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="```sql\nSELECT MAX(energy_efficiency_rating) FROM hydro_dams WHERE country = 'Canada';\n```",
    sql="```sql\nSELECT MAX(energy_efficiency_rating) AS max_energy_efficiency \nFROM hydro_dams \nWHERE country = 'Canada';\n```"
), 1), (Example({'sql_prompt': 'How many streams did each song by an artist get in a given month?', 'sql_context': "CREATE TABLE Songs (id INT, artist_id INT, title VARCHAR(50)); CREATE TABLE Streams (id INT, song_id INT, date DATE, streams INT); INSERT INTO Songs (id, artist_id, title) VALUES (1, 1, 'Shake it Off'), (2, 1, 'Blank Space'), (3, 2, 'Humble'), (4, 2, 'DNA'); INSERT INTO Streams (id, song_id, date, streams) VALUES (1, 1, '2022-01-01', 1000), (2, 1, '2022-01-02', 1500), (3, 2, '2022-01-01', 2000), (4, 2, '2022-01-02', 2500), (5, 3, '2022-01-01', 3000), (6, 3, '2022-01-02', 3500), (7, 4, '2022-01-01', 4000), (8, 4, '2022-01-02', 4500);", 'sql': "SELECT s.title, SUM(s.streams) as total_streams FROM Songs s JOIN Streams st ON s.id = st.song_id WHERE st.date BETWEEN '2022-01-01' AND '2022-01-31' GROUP BY s.title;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='```sql\nSELECT T1.title ,  SUM(T2.streams) AS total_streams\nFROM Songs AS T1 JOIN Streams AS T2 ON T1.id  =  T2.song_id\nGROUP BY T1.title;\n```',
    sql="```sql\nSELECT T1.artist_id, T1.title, SUM(T2.streams) AS total_streams\nFROM Songs AS T1\nJOIN Streams AS T2 ON T1.id = T2.song_id\nWHERE T2.date IN ('2022-01-01', '2022-01-02')\nGROUP BY T1.artist_id, T1.title;\n```"
), 0), (Example({'sql_prompt': 'What is the total number of security incidents for each department in the organization?', 'sql_context': 'CREATE TABLE incident (incident_id INT, incident_date DATE, incident_description TEXT, department_id INT);CREATE TABLE department (department_id INT, department_name VARCHAR(255));', 'sql': 'SELECT d.department_name, COUNT(i.incident_id) AS incident_count FROM incident i JOIN department d ON i.department_id = d.department_id GROUP BY d.department_name;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='count the number of incidents for each department. \n\nWe can use a JOIN to combine the incident and department tables, grouping by department_id and then counting the incidents.',
    sql='```sql\nSELECT department_id, COUNT(incident_id) AS total_incidents\nFROM incident \nJOIN department USING (department_id)\nGROUP BY department_id;\n```'
), 1), (Example({'sql_prompt': 'What is the market spend on sustainable tourism initiatives in Japan between 2017 and 2019?', 'sql_context': "CREATE TABLE sustainable_tourism_initiatives(initiative_id INT, name TEXT, country TEXT, start_year INT, end_year INT, market_spend INT);INSERT INTO sustainable_tourism_initiatives (initiative_id, name, country, start_year, end_year, market_spend) VALUES (1, 'Eco-friendly hotels in Tokyo', 'Japan', 2017, 2019, 5000000), (2, 'Sustainable transport in Kyoto', 'Japan', 2018, 2019, 7000000), (3, 'Carbon offsetting in Osaka', 'Japan', 2017, 2018, 3000000);", 'sql': "SELECT SUM(market_spend) FROM sustainable_tourism_initiatives WHERE country = 'Japan' AND start_year BETWEEN 2017 AND 2019;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='produce the SQL. We can start by selecting the relevant columns and filtering the rows for the specified country and time period.',
    sql="SELECT market_spend FROM sustainable_tourism_initiatives WHERE country = 'Japan' AND (start_year BETWEEN 2017 AND 2019 OR end_year BETWEEN 2017 AND 2019);"
), 0), (Example({'sql_prompt': 'What is the percentage of hotels in Europe that offer virtual tours?', 'sql_context': "CREATE TABLE hotel_features (hotel_id INT, hotel_name TEXT, virtual_tour INT, country TEXT); INSERT INTO hotel_features (hotel_id, hotel_name, virtual_tour, country) VALUES (1, 'Hotel A', 1, 'France'), (2, 'Hotel B', 0, 'Germany'), (3, 'Hotel C', 1, 'Italy'), (4, 'Hotel D', 0, 'France'), (5, 'Hotel E', 1, 'Spain');", 'sql': "SELECT (COUNT(*) FILTER (WHERE virtual_tour = 1) * 100.0 / COUNT(*)) AS percentage FROM hotel_features WHERE country = 'Europe';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='produce the SQL. We can start by counting the number of hotels in Europe and then count the ones that offer virtual tours. To find the percentage, we divide the latter count by the former and multiply by 100.',
    sql="```sql\nSELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM hotel_features) AS percentage\nFROM hotel_features\nWHERE country IN ('France', 'Germany', 'Italy', 'Spain');\n```"
), 0), (Example({'sql_prompt': 'What are the ethical AI principles for the technology projects in India?', 'sql_context': "CREATE TABLE EthicalAI (principle_id INT, principle_name VARCHAR(50), project_location VARCHAR(20)); INSERT INTO EthicalAI (principle_id, principle_name, project_location) VALUES (1, 'Fairness', 'India'), (2, 'Accountability', 'India'), (3, 'Transparency', 'India'), (4, 'Data Minimization', 'India'), (5, 'Explainability', 'India'), (6, 'Human Oversight', 'India');", 'sql': "SELECT principle_name FROM EthicalAI WHERE project_location = 'India';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="produce the correct SQL. We can start by selecting the principle_name from the EthicalAI table, where project_location is 'India'.",
    sql="```sql\nSELECT principle_name FROM EthicalAI WHERE project_location = 'India';\n```"
), 1), (Example({'sql_prompt': 'What is the total mass of all spacecraft manufactured by SpaceX?', 'sql_context': "CREATE TABLE Spacecraft (SpacecraftID INT, SpacecraftName VARCHAR(50), Manufacturer VARCHAR(50), Mass FLOAT); INSERT INTO Spacecraft (SpacecraftID, SpacecraftName, Manufacturer, Mass) VALUES (1, 'SpaceX Dragon', 'SpaceX', 10000), (2, 'Orion', 'Lockheed Martin', 20000), (3, 'Starliner', 'Boeing', 15000);", 'sql': "SELECT SUM(Mass) FROM Spacecraft WHERE Manufacturer = 'SpaceX';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="```sql\nSELECT sum(Mass) FROM Spacecraft WHERE Manufacturer = 'SpaceX';\n```",
    sql="```sql\nSELECT sum(Mass) AS total_mass FROM Spacecraft WHERE Manufacturer = 'SpaceX';\n```"
), 1), (Example({'sql_prompt': "What is the total age of 'stone' artifacts in 'american_archaeology'?", 'sql_context': 'CREATE TABLE american_archaeology (id INT, site_name VARCHAR(50), artifact_name VARCHAR(50), age INT, material VARCHAR(20));', 'sql': "SELECT SUM(age) FROM american_archaeology WHERE material = 'stone';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="SELECT sum(age) FROM american_archaeology WHERE artifact_name = 'stone';\nDo you require any further assistance?",
    sql="SELECT sum(age) FROM american_archaeology WHERE artifact_name = 'stone';"
), 0), (Example({'sql_prompt': 'What is the average hotel price for beachfront hotels in Mexico?', 'sql_context': "CREATE TABLE hotels (hotel_id INT, name TEXT, country TEXT, has_beachfront BOOLEAN, price INT); INSERT INTO hotels (hotel_id, name, country, has_beachfront, price) VALUES (1, 'Beach Palace', 'Mexico', true, 200), (2, 'Green Valley', 'USA', false, 150);", 'sql': "SELECT AVG(price) FROM hotels WHERE has_beachfront = true AND country = 'Mexico';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="```sql\nSELECT AVG(price) FROM hotels WHERE country = 'mexico' AND has_beachfront = true;\n```",
    sql="```sql\nSELECT AVG(price) FROM hotels WHERE country='Mexico' AND has_beachfront = true;\n```"
), 1), (Example({'sql_prompt': 'List all instructors and number of students they support with accommodations.', 'sql_context': 'CREATE TABLE Instructors (id INT, name VARCHAR(50), title VARCHAR(50));', 'sql': 'SELECT i.name, COUNT(a.student_id) as supported_students FROM Instructors i JOIN Accommodations a ON i.id = a.instructor_id GROUP BY i.name;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='```sql\nSELECT T1.name ,  COUNT(*) AS num_students\nFROM Instructors AS T1 JOIN Students AS T2 ON T1.id  =  T2.instructor_id\nWHERE T2.accommodations  =  1\nGROUP BY T1.name;\n```',
    sql='```sql\nSELECT T1.name ,  COUNT(*) AS num_students FROM Instructors AS T1 JOIN Students AS T2 ON T1.id  =  T2.instructor_id WHERE T2.accommodations  =  1 GROUP BY T1.name;\n```'
), 1), (Example({'sql_prompt': "What is the total fare collected from bus routes that start with the letter 'B'?", 'sql_context': "CREATE TABLE bus_trips (trip_id INT, route_id INT, fare FLOAT); INSERT INTO bus_trips (trip_id, route_id, fare) VALUES (1, 101, 2.5), (2, 202, 3.0), (3, 303, 1.5), (4, 404, 2.0), (5, 505, 2.5), (6, 106, 3.0); CREATE TABLE bus_routes (route_id INT, route_name TEXT, starting_letter TEXT); INSERT INTO bus_routes (route_id, route_name, starting_letter) VALUES (101, 'Broadway', 'B'), (202, 'Park Ave', 'P'), (303, 'Lakeshore', 'L'), (404, 'Sunset Blvd', 'S'), (505, 'Beverly Hills', 'B');", 'sql': "SELECT SUM(bt.fare) FROM bus_trips bt JOIN bus_routes br ON bt.route_id = br.route_id WHERE br.starting_letter = 'B';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="```sql\nSELECT SUM(fare) FROM bus_trips AS t JOIN bus_routes AS r ON t.route_id = r.route_id WHERE r.starting_letter = 'B';\n```",
    sql="```sql\nSELECT SUM(fare) FROM bus_trips AS t JOIN bus_routes AS r ON t.route_id = r.route_id WHERE r.starting_letter = 'B';\n```"
), 1), (Example({'sql_prompt': 'What is the percentage of total revenue from streaming and concert ticket sales for Pop music in 2018?', 'sql_context': 'CREATE TABLE StreamingRevenue (id INT, year INT, genre VARCHAR(50), revenue FLOAT); CREATE TABLE ConcertTicketSales (id INT, year INT, genre VARCHAR(50), revenue FLOAT);', 'sql': "SELECT (SUM(sr.revenue) + SUM(cts.revenue)) / (SELECT SUM(revenue) FROM (SELECT revenue FROM StreamingRevenue WHERE year = 2018 UNION ALL SELECT revenue FROM ConcertTicketSales WHERE year = 2018) t) FROM StreamingRevenue sr JOIN ConcertTicketSales cts ON sr.genre = cts.genre WHERE sr.year = 2018 AND sr.genre = 'Pop';"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here's the SQL query:\n```sql\nSELECT (StreamingRevenue.revenue + ConcertTicketSales.revenue) / sum(StreamingRevenue.revenue + ConcertTicketSales.revenue) * 100 AS percentage\nFROM StreamingRevenue, ConcertTicketSales\nWHERE StreamingRevenue.genre = 'Pop' AND ConcertTicketSales.genre = 'Pop' AND StreamingRevenue.year = 2018 AND ConcertTicketSales.year = 2018;\n```\nDo you require any further assistance?",
    sql='```sql\nSELECT percentage_revenue FROM table AS StreamingRevenue JOIN table AS ConcertTicketSales ON StreamingRevenue.genre = ConcertTicketSales.genre WHERE StreamingRevenue.year = 2018 AND ConcertTicketSales.year = 2018 AND StreamingRevenue.revenue + ConcertTicketSales.revenue > 0 LIMIT 1\n```'
), 0), (Example({'sql_prompt': 'What is the total defense spending by countries in Oceania in 2018?', 'sql_context': "CREATE TABLE defense_spending (country VARCHAR(50), continent VARCHAR(50), year INT, amount FLOAT); INSERT INTO defense_spending (country, continent, year, amount) VALUES ('Australia', 'Oceania', 2018, 750.3), ('New Zealand', 'Oceania', 2018, 23.4), ('Papua New Guinea', 'Oceania', 2018, 6.7);", 'sql': "SELECT SUM(amount) FROM defense_spending WHERE continent = 'Oceania' AND year = 2018;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="```sql\nSELECT SUM(amount) AS total_defense_spending\nFROM defense_spending\nWHERE continent = 'Oceania' AND year = 2018;\n```",
    sql="```sql\nSELECT SUM(amount) AS total_defense_spending\nFROM defense_spending\nWHERE continent = 'Oceania' AND year = 2018;\n```"
), 1), (Example({'sql_prompt': 'What is the total number of refugee families supported by each NGO in the last 6 months?', 'sql_context': "CREATE TABLE NGOs (NGOID int, NGOName varchar(50)); INSERT INTO NGOs (NGOID, NGOName) VALUES (1, 'International Rescue Committee'), (2, 'Save the Children'); CREATE TABLE RefugeeSupport (SupportID int, NGOID int, FamilyID int, SupportDate date); INSERT INTO RefugeeSupport (SupportID, NGOID, FamilyID, SupportDate) VALUES (1, 1, 1, '2022-01-01'), (2, 1, 2, '2022-02-01'), (3, 2, 1, '2022-03-01');", 'sql': 'SELECT NGOName, COUNT(DISTINCT FamilyID) as SupportedFamilies FROM NGOs INNER JOIN RefugeeSupport ON NGOs.NGOID = RefugeeSupport.NGOID WHERE SupportDate >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY NGOName;'}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale='count the number of distinct FamilyIDs for each NGO within the last 6 months. We can use the date functions and the JOIN clause to achieve this.',
    sql="```sql\nSELECT NGOs.NGOName, COUNT(RefugeeSupport.FamilyID) AS Total_Families_Supported\nFROM RefugeeSupport\nJOIN NGOs ON RefugeeSupport.NGOID = NGOs.NGOID\nWHERE RefugeeSupport.SupportDate >= DATEADD(month, -6, '2023-07-07')\nGROUP BY NGOs.NGOName;\n```"
), 0), (Example({'sql_prompt': "Which regulatory frameworks have been implemented in 'Country1'?", 'sql_context': "CREATE TABLE countries (id INT, name VARCHAR(255)); INSERT INTO countries (id, name) VALUES (1, 'Country1'); CREATE TABLE regulatory_frameworks (id INT, country_id INT, name VARCHAR(255)); INSERT INTO regulatory_frameworks (id, country_id, name) VALUES (1, 1, 'Framework1'); INSERT INTO regulatory_frameworks (id, country_id, name) VALUES (2, 1, 'Framework2'); INSERT INTO regulatory_frameworks (id, country_id, name) VALUES (3, 1, 'Framework3');", 'sql': "SELECT name FROM regulatory_frameworks WHERE country_id = (SELECT id FROM countries WHERE name = 'Country1');"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="Here's the SQL query:\n```sql\nSELECT name FROM regulatory_frameworks rf LEFT JOIN countries c ON rf.country_id = c.id WHERE c.name = 'Country1';\n```",
    sql="```sql\nSELECT name FROM regulatory_frameworks rf LEFT JOIN countries c ON rf.country_id = c.id WHERE c.name = 'Country1';\n```"
), 0), (Example({'sql_prompt': 'What is the percentage of factories in each country that have implemented circular economy practices?', 'sql_context': "CREATE TABLE factory_circle (factory VARCHAR(255), country VARCHAR(255), practice VARCHAR(255)); INSERT INTO factory_circle (factory, country, practice) VALUES ('Factory1', 'Bangladesh', 'yes'), ('Factory2', 'Bangladesh', 'no'), ('Factory3', 'Bangladesh', 'yes'), ('Factory4', 'China', 'yes'), ('Factory5', 'China', 'no'), ('Factory6', 'India', 'no'), ('Factory7', 'India', 'yes'), ('Factory8', 'India', 'yes');", 'sql': "SELECT country, 100.0 * COUNT(*) FILTER (WHERE practice = 'yes') / COUNT(*) AS percentage FROM factory_circle GROUP BY country;"}) (input_keys={'sql_context', 'sql_prompt'}), Prediction(
    rationale="```sql\nSELECT country, COUNT(*) / COUNT(*) OVER () * 100 AS percentage\nFROM factory_circle\nWHERE practice = 'yes'\nGROUP BY country;\n```",
    sql="```sql\nSELECT country, COUNT(*) / (SELECT COUNT(*) FROM factory_circle) * 100 AS percentage FROM factory_circle WHERE practice = 'yes' GROUP BY country;\n```"
), 1)]