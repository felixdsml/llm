{
  "program": {
    "lm": null,
    "traces": [],
    "train": [],
    "demos": [
      {
        "augmented": true,
        "sql_prompt": "Who are the manufacturers with the highest number of overdue maintenance for electrical components?",
        "sql_context": "CREATE TABLE Equipment (EquipmentID INT, EquipmentName VARCHAR(50), Type VARCHAR(50), Manufacturer VARCHAR(50)); INSERT INTO Equipment (EquipmentID, EquipmentName, Type, Manufacturer) VALUES (1, 'Component1', 'Electrical', 'Manufacturer1'); CREATE TABLE Maintenance (EquipmentID INT, EquipmentName VARCHAR(50), Manufacturer VARCHAR(50), LastMaintenance DATE, NextMaintenance DATE); INSERT INTO Maintenance (EquipmentID, EquipmentName, Manufacturer, LastMaintenance, NextMaintenance) VALUES (1, 'Component1', 'Manufacturer1', '2021-12-01', '2022-06-01');",
        "rationale": "Here is the signature for the Text-to-SQL generation task:\n\n**Sql Prompt:** Natural language describing a query\n**Sql Context:** Optional context information, such as table schema and sample data\n**Sql:** The corresponding SQL query that answers the question or solves the problem described by the Sql Prompt.",
        "sql": "Here is the completed signature:\n\nSql Prompt: Who are the manufacturers with the highest number of overdue maintenance for electrical components?\n\nSql Context: CREATE TABLE Equipment (EquipmentID INT, EquipmentName VARCHAR(50), Type VARCHAR(50), Manufacturer VARCHAR(50)); INSERT INTO Equipment (EquipmentID, EquipmentName, Type, Manufacturer) VALUES (1, 'Component1', 'Electrical', 'Manufacturer1'); CREATE TABLE Maintenance (EquipmentID INT, EquipmentName VARCHAR(50), Manufacturer VARCHAR(50), LastMaintenance DATE, NextMaintenance DATE); INSERT INTO Maintenance (EquipmentID, EquipmentName, Manufacturer, LastMaintenance, NextMaintenance) VALUES (1, 'Component1', 'Manufacturer1', '2021-12-01', '2022-"
      },
      {
        "augmented": true,
        "sql_prompt": "What is the total production of rice in the 'agriculture' database, grouped by country?",
        "sql_context": "CREATE TABLE production (id INT, crop VARCHAR(255), country VARCHAR(255), quantity INT); INSERT INTO production (id, crop, country, quantity) VALUES (1, 'wheat', 'USA', 5000000), (2, 'wheat', 'Canada', 3000000), (3, 'rice', 'China', 8000000), (4, 'wheat', 'Australia', 2500000);",
        "rationale": "Here is the signature for Text-to-SQL generation task:\n\n**Input**: \n- `Sql Prompt`: A natural language question or prompt.\n- `Sql Context`: Optional database schema and sample data.\n\n**Output**: \n- `Sql`: A SQL query that answers the question or solves the problem posed by the `Sql Prompt`.\n\nLet me know if you have any further questions!",
        "sql": "Here is the completed signature:\n\nSql Prompt: What is the total production of rice in the 'agriculture' database, grouped by country?\n\nSql Context: CREATE TABLE production (id INT, crop VARCHAR(255), country VARCHAR(255), quantity INT); INSERT INTO production (id, crop, country, quantity) VALUES (1, 'wheat', 'USA', 5000000), (2, 'wheat', 'Canada', 3000000), (3, 'rice', 'China', 8000000), (4, 'wheat', 'Australia', 2500000);\n\nReasoning: Let's think step by step in order to produce the SQL. We need to filter the production table for rows where"
      },
      {
        "sql_prompt": "What is the change in co-ownership cost per property between consecutive rows, ordered by the 'co_ownership' table's ID?",
        "sql_context": "CREATE TABLE co_ownership (id INT, city VARCHAR(255), co_ownership_cost INT, property_id INT); INSERT INTO co_ownership (id, city, co_ownership_cost, property_id) VALUES (1, 'Seattle', 550000, 101), (2, 'Seattle', 560000, 102), (3, 'Portland', 420000, 103), (4, 'Portland', 430000, 104), (5, 'Portland', 440000, 105);",
        "sql": "SELECT id, city, co_ownership_cost, LAG(co_ownership_cost) OVER (PARTITION BY city ORDER BY id) AS previous_co_ownership_cost, co_ownership_cost - LAG(co_ownership_cost) OVER (PARTITION BY city ORDER BY id) AS cost_change FROM co_ownership ORDER BY id;"
      },
      {
        "sql_prompt": "What is the total number of locations in the fish_stock table?",
        "sql_context": "CREATE TABLE fish_stock (location VARCHAR(50)); INSERT INTO fish_stock (location) VALUES ('Lake Victoria'), ('Lake Tanganyika'), ('Pacific Ocean');",
        "sql": "SELECT COUNT(DISTINCT location) FROM fish_stock;"
      },
      {
        "sql_prompt": "What are the total fares collected from each vehicle type, sorted in descending order?",
        "sql_context": "CREATE TABLE Fares (id INT, vehicle_type VARCHAR(10), fare DECIMAL(5,2)); INSERT INTO Fares (id, vehicle_type, fare) VALUES (1, 'Bus', 2.50), (2, 'Tram', 3.00), (3, 'Train', 5.00);",
        "sql": "SELECT vehicle_type, SUM(fare) FROM Fares GROUP BY vehicle_type ORDER BY SUM(fare) DESC;"
      },
      {
        "sql_prompt": "Show the total calories of dishes served in 'HealthyHarvest' that have a price above the average.",
        "sql_context": "CREATE TABLE Dishes (dish_name VARCHAR(50), calories INT, price INT); INSERT INTO Dishes (dish_name, calories, price) VALUES ('Chia Pudding', 250, 10), ('Veggie Wrap', 500, 15), ('Spinach Salad', 300, 12), ('Quinoa Salad', 400, 13);",
        "sql": "SELECT SUM(Dishes.calories) FROM Dishes WHERE Dishes.dish_name LIKE 'HealthyHarvest%' AND Dishes.price > (SELECT AVG(price) FROM Dishes)"
      },
      {
        "sql_prompt": "What is the average temperature for each crop type in the 'agriculture' database?",
        "sql_context": "CREATE TABLE crop (id INT, type VARCHAR(255), temperature FLOAT); INSERT INTO crop (id, type, temperature) VALUES (1, 'corn', 20.5), (2, 'wheat', 15.3), (3, 'rice', 22.1);",
        "sql": "SELECT type, AVG(temperature) as avg_temperature FROM crop GROUP BY type;"
      },
      {
        "sql_prompt": "Identify the most common disability-related complaints in each of the last 3 months, and the total number of complaints in each of those months?",
        "sql_context": "CREATE TABLE complaints (complaint_id INT, complaint_type VARCHAR(255), date DATE); INSERT INTO complaints (complaint_id, complaint_type, date) VALUES (1, 'Physical Barrier', '2021-03-15'); INSERT INTO complaints (complaint_id, complaint_type, date) VALUES (2, 'Lack of Communication', '2021-02-20');",
        "sql": "SELECT MONTH(date) as month, complaint_type, COUNT(*) as num_complaints FROM complaints WHERE date BETWEEN DATE_SUB(NOW(), INTERVAL 3 MONTH) AND NOW() GROUP BY month, complaint_type;"
      },
      {
        "sql_prompt": "Which company has manufactured the most satellites?",
        "sql_context": "CREATE TABLE manufacturers (id INT, name TEXT); CREATE TABLE satellites (id INT, manufacturer_id INT, name TEXT, launch_date DATE); INSERT INTO manufacturers (id, name) VALUES (1, 'SpaceX'), (2, 'Blue Origin'), (3, 'ISRO'), (4, 'CAST'); INSERT INTO satellites (id, manufacturer_id, name, launch_date) VALUES (1, 1, 'StarDragon', '2012-05-25'), (2, 1, 'Falcon', '2015-12-21'), (3, 2, 'New Glenn', '2022-01-11'), (4, 3, 'ChinaSat 1E', '2000-12-05'), (5, 3, 'ChinaSat 2A', '2003-08-13'), (6, 4, 'Shijian 9', '2017-11-19'), (7, 1, 'StarLink', '2020-05-24'), (8, 1, 'StarLink', '2020-06-13');",
        "sql": "SELECT m.name, COUNT(s.id) FROM manufacturers m JOIN satellites s ON m.id = s.manufacturer_id GROUP BY m.name ORDER BY COUNT(s.id) DESC;"
      },
      {
        "sql_prompt": "Update records in the safety_records table where the vessel_id is 401 and incident_type is 'Collision', set the resolution to 'Resolved'",
        "sql_context": "CREATE TABLE safety_records (id INT, vessel_id INT, incident_type VARCHAR(20), resolution VARCHAR(20));",
        "sql": "UPDATE safety_records SET resolution = 'Resolved' WHERE vessel_id = 401 AND incident_type = 'Collision';"
      },
      {
        "sql_prompt": "What is the average mental health score for patients from historically marginalized communities?",
        "sql_context": "CREATE TABLE patients (id INT, name VARCHAR(100), community VARCHAR(50), mental_health_score INT); INSERT INTO patients (id, name, community, mental_health_score) VALUES (1, 'Alice', 'African American', 70), (2, 'Brian', 'Latinx', 65), (3, 'Carla', 'Asian American', 80);",
        "sql": "SELECT AVG(mental_health_score) FROM patients WHERE community IN ('African American', 'Latinx');"
      },
      {
        "sql_prompt": "How many movies were released by Studio Ghibli between 1985 and 2010?",
        "sql_context": "CREATE TABLE Studio_Ghibli (title TEXT, year INTEGER); INSERT INTO Studio_Ghibli (title, year) VALUES ('Movie1', 1986), ('Movie2', 1988), ('Movie3', 1992), ('Movie4', 1997), ('Movie5', 2001), ('Movie6', 2004), ('Movie7', 2008), ('Movie8', 2010);",
        "sql": "SELECT COUNT(*) FROM Studio_Ghibli WHERE year BETWEEN 1985 AND 2010;"
      },
      {
        "sql_prompt": "Find the number of explainable AI projects and their total budget, partitioned by project type, ordered by budget in descending order?",
        "sql_context": "CREATE TABLE explainable_ai_projects (project_id INT, project_type VARCHAR(50), budget DECIMAL(10,2)); INSERT INTO explainable_ai_projects (project_id, project_type, budget) VALUES (1, 'Healthcare', 50000.00), (2, 'Finance', 75000.00), (3, 'Education', 35000.00), (4, 'Manufacturing', 60000.00);",
        "sql": "SELECT project_type, COUNT(*) as num_projects, SUM(budget) as total_budget FROM explainable_ai_projects GROUP BY project_type ORDER BY total_budget DESC;"
      },
      {
        "sql_prompt": "What is the number of patients who received CBT in each region?",
        "sql_context": "CREATE TABLE patients (id INT, region VARCHAR(255), country VARCHAR(255)); INSERT INTO patients (id, region, country) VALUES (1, 'North', 'USA'), (2, 'South', 'USA'), (3, 'North', 'Canada'); CREATE TABLE therapy (patient_id INT, therapy_type VARCHAR(255)); INSERT INTO therapy (patient_id, therapy_type) VALUES (1, 'CBT'), (2, 'CBT'), (3, 'DBT');",
        "sql": "SELECT region, COUNT(*) as patient_count FROM patients JOIN therapy ON patients.id = therapy.patient_id WHERE therapy_type = 'CBT' GROUP BY region;"
      },
      {
        "sql_prompt": "What is the average claim amount per region?",
        "sql_context": "CREATE TABLE claims (id INT, policyholder_id INT, region VARCHAR(20), claim_amount DECIMAL(10,2)); INSERT INTO claims (id, policyholder_id, region, claim_amount) VALUES (1, 1, 'South', 1500.00), (2, 2, 'West', 3000.00), (3, 3, 'South', 500.00), (4, 4, 'East', 4500.00), (5, 1, 'South', 2000.00);",
        "sql": "SELECT region, AVG(claim_amount) as avg_claim_amount FROM claims GROUP BY region;"
      },
      {
        "sql_prompt": "List all renewable energy projects in the 'renewable_projects' view that started after a specific date (e.g., '2020-01-01').",
        "sql_context": "CREATE VIEW renewable_projects AS SELECT project_id, city, start_date FROM energy_projects WHERE renewable = TRUE; CREATE TABLE energy_projects (project_id INT, city VARCHAR(255), start_date DATE, renewable BOOLEAN);",
        "sql": "SELECT * FROM renewable_projects WHERE start_date > '2020-01-01';"
      }
    ],
    "signature_instructions": "Signature for Text to SQL generation task.",
    "signature_prefix": "Sql:",
    "extended_signature_instructions": "Signature for Text to SQL generation task.",
    "extended_signature_prefix": "Sql:"
  }
}