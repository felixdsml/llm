{
  "program": {
    "lm": null,
    "traces": [],
    "train": [],
    "demos": [
      {
        "augmented": true,
        "sql_prompt": "What is the total mass of all spacecraft manufactured by SpaceX?",
        "sql_context": "CREATE TABLE Spacecraft (SpacecraftID INT, SpacecraftName VARCHAR(50), Manufacturer VARCHAR(50), Mass FLOAT); INSERT INTO Spacecraft (SpacecraftID, SpacecraftName, Manufacturer, Mass) VALUES (1, 'SpaceX Dragon', 'SpaceX', 10000), (2, 'Orion', 'Lockheed Martin', 20000), (3, 'Starliner', 'Boeing', 15000);",
        "rationale": "answer the SQL prompt. \n\n**Prompt:** What is the total mass of all spacecraft manufactured by SpaceX?\n\n**Context:**\n- `Spacecraft` table with columns:\n    - `SpacecraftID`: Integer, unique identifier for each spacecraft.\n    - `SpacecraftName`: String, name of the spacecraft.\n    - `Manufacturer`: String, manufacturer of the spacecraft.\n    - `Mass`: Float, mass of the spacecraft in kilograms.\n\n**Data:**\n- 1 row with SpaceX Dragon (mass = 10,000 kg)\n- 1 row with Orion (mass = 20,000 kg) \n- 1 row with Starliner (mass = 15,000 kg)",
        "sql": "SELECT SUM(Mass) AS TotalMass FROM Spacecraft WHERE Manufacturer = 'SpaceX';"
      },
      {
        "sql_prompt": "What is the total number of articles published by each author in a specific year and month from the 'investigative_reports' table?",
        "sql_context": "CREATE TABLE investigative_reports (id INT, title VARCHAR(255), author VARCHAR(255), publication_date DATE);",
        "sql": "SELECT author, EXTRACT(YEAR FROM publication_date) as year, EXTRACT(MONTH FROM publication_date) as month, COUNT(*) as total_articles FROM investigative_reports WHERE EXTRACT(YEAR FROM publication_date) = 2021 AND EXTRACT(MONTH FROM publication_date) = 12 GROUP BY author, year, month;"
      },
      {
        "sql_prompt": "What is the total budget and the number of programs in each department for the next fiscal year?",
        "sql_context": "CREATE TABLE department_budget (id INT, department VARCHAR(255), fiscal_year VARCHAR(255), program_budget DECIMAL(10, 2)); INSERT INTO department_budget (id, department, fiscal_year, program_budget) VALUES (1, 'Education', '2023', 5000), (2, 'Health', '2023', 7000), (3, 'Education', '2023', 3000), (4, 'Environment', '2023', 8000), (5, 'Health', '2023', 9000), (6, 'Education', '2023', 4000);",
        "sql": "SELECT department, SUM(program_budget) AS total_budget, COUNT(*) AS num_programs FROM department_budget WHERE fiscal_year = '2024' GROUP BY department;"
      },
      {
        "sql_prompt": "How many tunnels are there in New York with a length greater than 5 miles?",
        "sql_context": "CREATE TABLE Tunnels (id INT, name TEXT, location TEXT, state TEXT, length FLOAT); INSERT INTO Tunnels (id, name, location, state, length) VALUES (1, 'Tunnel A', 'Location A', 'New York', 7.5), (2, 'Tunnel B', 'Location B', 'New Jersey', 4.5);",
        "sql": "SELECT COUNT(*) FROM Tunnels WHERE state = 'New York' AND length > 5;"
      },
      {
        "sql_prompt": "What is the number of companies founded by immigrants each year?",
        "sql_context": "CREATE TABLE founders (founder_id INT, company_id INT, immigrant BOOLEAN); CREATE TABLE companies (company_id INT, founding_year INT); INSERT INTO founders (founder_id, company_id, immigrant) VALUES (1, 1, true), (2, 2, false), (3, 3, true), (4, 4, false); INSERT INTO companies (company_id, founding_year) VALUES (1, 2018), (2, 2017), (3, 2019), (4, 2018);",
        "sql": "SELECT founding_year, COUNT(f.founder_id) as num_immigrant_founded_companies FROM founders f JOIN companies c ON f.company_id = c.company_id WHERE f.immigrant = true GROUP BY founding_year;"
      },
      {
        "sql_prompt": "Which countries have the highest marine pollution levels in the Atlantic Ocean?",
        "sql_context": "CREATE TABLE CountryPollution (id INT, country VARCHAR(255), pollution_level FLOAT); INSERT INTO CountryPollution (id, country, pollution_level) VALUES (1, 'United States', 6.2); INSERT INTO CountryPollution (id, country, pollution_level) VALUES (2, 'Brazil', 5.8);",
        "sql": "SELECT country, pollution_level FROM CountryPollution WHERE location = 'Atlantic Ocean' AND pollution_level = (SELECT MAX(pollution_level) FROM CountryPollution WHERE location = 'Atlantic Ocean');"
      },
      {
        "sql_prompt": "What is the change in co-ownership cost per property between consecutive rows, ordered by the 'co_ownership' table's ID?",
        "sql_context": "CREATE TABLE co_ownership (id INT, city VARCHAR(255), co_ownership_cost INT, property_id INT); INSERT INTO co_ownership (id, city, co_ownership_cost, property_id) VALUES (1, 'Seattle', 550000, 101), (2, 'Seattle', 560000, 102), (3, 'Portland', 420000, 103), (4, 'Portland', 430000, 104), (5, 'Portland', 440000, 105);",
        "sql": "SELECT id, city, co_ownership_cost, LAG(co_ownership_cost) OVER (PARTITION BY city ORDER BY id) AS previous_co_ownership_cost, co_ownership_cost - LAG(co_ownership_cost) OVER (PARTITION BY city ORDER BY id) AS cost_change FROM co_ownership ORDER BY id;"
      },
      {
        "sql_prompt": "Identify the number of unique causes supported by volunteers from different countries.",
        "sql_context": "CREATE TABLE volunteers (id INT, name VARCHAR(100), country VARCHAR(50), cause VARCHAR(50)); INSERT INTO volunteers VALUES (1, 'John Doe', 'USA', 'Environment'); INSERT INTO volunteers VALUES (2, 'Jane Smith', 'Canada', 'Animals');",
        "sql": "SELECT country, COUNT(DISTINCT cause) as unique_causes FROM volunteers GROUP BY country;"
      },
      {
        "sql_prompt": "What is the total amount donated by each donor, ordered from highest to lowest?",
        "sql_context": "CREATE TABLE Donors (DonorID INT, DonorName VARCHAR(50), TotalDonation DECIMAL(10,2)); INSERT INTO Donors VALUES (1, 'John Doe', 5000.00), (2, 'Jane Smith', 3500.00), (3, 'Mike Johnson', 2000.00);",
        "sql": "SELECT DonorName, TotalDonation FROM Donors ORDER BY TotalDonation DESC;"
      },
      {
        "sql_prompt": "What was the average daily revenue for each cuisine type in the first quarter of 2022?",
        "sql_context": "CREATE TABLE daily_revenue (date DATE, cuisine VARCHAR(255), revenue DECIMAL(10,2)); INSERT INTO daily_revenue (date, cuisine, revenue) VALUES ('2022-01-01', 'Italian', 150.00), ('2022-01-01', 'Mexican', 120.00), ('2022-01-02', 'Italian', 170.00), ('2022-01-02', 'Mexican', 140.00);",
        "sql": "SELECT cuisine, AVG(revenue) as avg_daily_revenue FROM daily_revenue WHERE date BETWEEN '2022-01-01' AND '2022-03-31' GROUP BY cuisine;"
      },
      {
        "sql_prompt": "How many gluten-free menu items were sold in the second quarter of 2022?",
        "sql_context": "CREATE TABLE menus (menu_id INT, menu_name TEXT, type TEXT, price DECIMAL, quarter DATE); INSERT INTO menus (menu_id, menu_name, type, price, quarter) VALUES (1, 'Quinoa Salad', 'Vegetarian', 12.99, '2022-01-01'), (2, 'Chicken Caesar Wrap', 'Gluten-free', 10.99, '2022-02-15');",
        "sql": "SELECT COUNT(*) FROM menus WHERE type = 'Gluten-free' AND quarter = '2022-02-15';"
      },
      {
        "sql_prompt": "How many marine species are affected by ocean acidification?",
        "sql_context": "CREATE TABLE species_impact (id INTEGER, name VARCHAR(255), species VARCHAR(255), affected_by_acidification BOOLEAN);",
        "sql": "SELECT COUNT(*) FROM species_impact WHERE affected_by_acidification = TRUE;"
      },
      {
        "sql_prompt": "What is the total number of construction permits issued in each state?",
        "sql_context": "CREATE TABLE PermitsByState (State VARCHAR(50), PermitCount INT); INSERT INTO PermitsByState (State, PermitCount) VALUES ('Texas', 100);",
        "sql": "SELECT State, SUM(PermitCount) AS TotalPermits FROM PermitsByState GROUP BY State;"
      },
      {
        "sql_prompt": "What is the average mental health score of students for each district, ordered by the average score?",
        "sql_context": "CREATE TABLE districts (district_id INT, district_name VARCHAR(50)); INSERT INTO districts VALUES (1, 'District A'), (2, 'District B'), (3, 'District C'); CREATE TABLE student_mental_health (student_id INT, district_id INT, mental_health_score INT); INSERT INTO student_mental_health VALUES (1, 1, 80), (2, 1, 90), (3, 2, 70), (4, 2, 60), (5, 3, 95), (6, 3, 85);",
        "sql": "SELECT district_id, AVG(mental_health_score) as avg_score FROM student_mental_health GROUP BY district_id ORDER BY avg_score DESC;"
      },
      {
        "sql_prompt": "Identify the number of UNESCO World Heritage sites in Asia with virtual tourism offerings.",
        "sql_context": "CREATE TABLE world_heritage_sites (site_id INT, site_name TEXT, country TEXT, has_virtual_tour BOOLEAN); INSERT INTO world_heritage_sites (site_id, site_name, country, has_virtual_tour) VALUES (1, 'Angkor Wat', 'Cambodia', true), (2, 'Forbidden City', 'China', false), (3, 'Taj Mahal', 'India', true);",
        "sql": "SELECT COUNT(*) FROM world_heritage_sites WHERE has_virtual_tour = true AND country IN (SELECT name FROM countries WHERE continent = 'Asia');"
      },
      {
        "sql_prompt": "Insert a new record into the 'energy_storage' table for a flow battery with 5 MWh capacity, located in 'Quebec'",
        "sql_context": "CREATE TABLE energy_storage (id INT PRIMARY KEY, technology VARCHAR(255), capacity FLOAT, location VARCHAR(255));",
        "sql": "INSERT INTO energy_storage (technology, capacity, location) VALUES ('flow', 5, 'Quebec');"
      }
    ],
    "signature_instructions": "Signature for Text to SQL generation task.",
    "signature_prefix": "Sql:",
    "extended_signature_instructions": "Signature for Text to SQL generation task.",
    "extended_signature_prefix": "Sql:"
  }
}