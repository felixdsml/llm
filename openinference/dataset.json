[{"sql_prompt": "What is the average monthly data usage for each mobile network operator?", "sql_context": "CREATE TABLE mobile_operators (operator_id INT, operator_name VARCHAR(50)); CREATE TABLE mobile_plans (plan_id INT, plan_name VARCHAR(50), operator_id INT, data_limit INT); CREATE TABLE usage (usage_id INT, subscriber_id INT, plan_id INT, usage_amount INT, usage_date DATE);", "sql": "SELECT o.operator_name, AVG(u.usage_amount) AS avg_monthly_data_usage FROM mobile_operators o INNER JOIN mobile_plans p ON o.operator_id = p.operator_id INNER JOIN usage u ON p.plan_id = u.plan_id WHERE u.usage_date >= DATEADD(month, -1, GETDATE()) GROUP BY o.operator_name;"}, {"sql_prompt": "What is the average mental health score for patients from historically marginalized communities?", "sql_context": "CREATE TABLE patients (id INT, name VARCHAR(100), community VARCHAR(50), mental_health_score INT); INSERT INTO patients (id, name, community, mental_health_score) VALUES (1, 'Alice', 'African American', 70), (2, 'Brian', 'Latinx', 65), (3, 'Carla', 'Asian American', 80);", "sql": "SELECT AVG(mental_health_score) FROM patients WHERE community IN ('African American', 'Latinx');"}, {"sql_prompt": "Who are the top 3 contributors to explainable AI research by total word count?", "sql_context": "CREATE TABLE if not exists explainable_ai_research (author VARCHAR(255), word_count INT); INSERT INTO explainable_ai_research (author, word_count) VALUES ('Alice', 5000), ('Bob', 3000), ('Carol', 7000), ('Dave', 4000), ('Eve', 6000);", "sql": "SELECT author, word_count, RANK() OVER (ORDER BY word_count DESC) as rank FROM explainable_ai_research WHERE rank <= 3;"}, {"sql_prompt": "What is the maximum daily water usage in MWh for the industrial sector in October 2021?", "sql_context": "CREATE TABLE max_daily_water_usage (year INT, month INT, sector VARCHAR(20), day INT, usage FLOAT); INSERT INTO max_daily_water_usage (year, month, sector, day, usage) VALUES (2021, 10, 'industrial', 1, 8000); INSERT INTO max_daily_water_usage (year, month, sector, day, usage) VALUES (2021, 10, 'industrial', 2, 8500); INSERT INTO max_daily_water_usage (year, month, sector, day, usage) VALUES (2021, 10, 'industrial', 3, 9000);", "sql": "SELECT MAX(usage) FROM max_daily_water_usage WHERE year = 2021 AND month = 10 AND sector = 'industrial';"}, {"sql_prompt": "Insert a new compliance violation for dispensary 1 on 2022-01-05 with the description 'Expired products'.", "sql_context": "CREATE TABLE compliance_violations (id INT, dispensary_id INT, violation_date DATE, description TEXT); INSERT INTO compliance_violations (id, dispensary_id, violation_date, description) VALUES (1, 1, '2021-02-15', 'Inadequate labeling'), (2, 2, '2021-03-02', 'Improper storage'), (3, 3, '2021-06-28', 'Expired products');", "sql": "INSERT INTO compliance_violations (dispensary_id, violation_date, description) VALUES (1, '2022-01-05', 'Expired products');"}, {"sql_prompt": "List all cases where the client is from 'California' and the attorney is 'Smith'", "sql_context": "CREATE TABLE cases (case_id INT, client_state VARCHAR(2), attorney_name VARCHAR(20));", "sql": "SELECT * FROM cases WHERE client_state = 'CA' AND attorney_name = 'Smith';"}, {"sql_prompt": "Find the number of students who received accommodations in the \"Online Learning\" category", "sql_context": "CREATE TABLE accommodations (student_id INT, accommodation_category VARCHAR(20)); INSERT INTO accommodations (student_id, accommodation_category) VALUES (1, 'Online Learning'), (2, 'Exam'), (3, 'Note Taking');", "sql": "SELECT COUNT(*) FROM accommodations WHERE accommodation_category = 'Online Learning';"}, {"sql_prompt": "What is the total inventory value for each category in the UK?", "sql_context": "CREATE TABLE inventory (id INT, item_id INT, category TEXT, quantity INT, price DECIMAL(5,2));INSERT INTO inventory (id, item_id, category, quantity, price) VALUES (1, 1, 'Pizza', 100, 5.99), (2, 2, 'Pasta', 75, 6.99), (3, 3, 'Salad', 50, 4.99);", "sql": "SELECT c.category, SUM(i.quantity * i.price) AS total_inventory_value FROM inventory i JOIN categories c ON i.category = c.id WHERE c.country = 'UK' GROUP BY c.category;"}, {"sql_prompt": "What is the total retail value of the \"Winter 2022\" collection for each manufacturer?", "sql_context": "CREATE TABLE Winter2022 (garment_id INT, manufacturer_id INT, garment_name VARCHAR(50), retail_price DECIMAL(5,2)); INSERT INTO Winter2022 (garment_id, manufacturer_id, garment_name, retail_price) VALUES (1, 100, 'Wool Coat', 250.00), (2, 100, 'Cotton Shirt', 50.00), (3, 200, 'Denim Jeans', 75.00), (4, 200, 'Fleece Hoodie', 50.00); CREATE TABLE Manufacturers (manufacturer_id INT, manufacturer_name VARCHAR(50)); INSERT INTO Manufacturers (manufacturer_id, manufacturer_name) VALUES (100, 'GreenFashions'), (200, 'SustainaWear');", "sql": "SELECT m.manufacturer_name, SUM(w.retail_price) FROM Winter2022 w INNER JOIN Manufacturers m ON w.manufacturer_id = m.manufacturer_id GROUP BY m.manufacturer_name;"}, {"sql_prompt": "What is the total number of traditional art pieces created in each region with a population greater than 500,000?", "sql_context": "CREATE TABLE regions (id INT, name TEXT, population INT); INSERT INTO regions (id, name, population) VALUES (1, 'West Africa', 6000000), (2, 'Amazon Basin', 500000); CREATE TABLE art_pieces (id INT, region_id INT, type TEXT, year INT); INSERT INTO art_pieces (id, region_id, type, year) VALUES (1, 1, 'Mask', 2000), (2, 1, 'Statue', 1950), (3, 2, 'Painting', 2020);", "sql": "SELECT r.name, COUNT(ap.id) FROM regions r JOIN art_pieces ap ON r.id = ap.region_id WHERE r.population > 500000 GROUP BY r.id;"}, {"sql_prompt": "What are the total views for all open education resources in each language and format, ordered by views?", "sql_context": "CREATE TABLE open_education_resources (id INT, title VARCHAR(50), format VARCHAR(10), language VARCHAR(20), views INT); INSERT INTO open_education_resources (id, title, format, language, views) VALUES (1, 'Introduction to SQL', 'Video', 'English', 1000);", "sql": "SELECT language, format, SUM(views) as total_views FROM open_education_resources GROUP BY language, format ORDER BY total_views DESC;"}, {"sql_prompt": "What is the average age of patients who have been diagnosed with diabetes in the rural health clinic located in Texas?", "sql_context": "CREATE TABLE rural_clinic (clinic_id INT, location VARCHAR(20), capacity INT); INSERT INTO rural_clinic (clinic_id, location, capacity) VALUES (1, 'Texas', 50); CREATE TABLE patient (patient_id INT, clinic_id INT, age INT, diagnosis VARCHAR(20)); INSERT INTO patient (patient_id, clinic_id, age, diagnosis) VALUES (1, 1, 45, 'diabetes'), (2, 1, 60, 'asthma'), (3, 1, 30, 'diabetes');", "sql": "SELECT AVG(age) FROM patient WHERE diagnosis = 'diabetes' AND clinic_id = 1;"}, {"sql_prompt": "Show the percentage of natural ingredients in each beauty product", "sql_context": "CREATE TABLE product_ingredients (product VARCHAR(255), ingredient VARCHAR(255), is_natural BOOLEAN); INSERT INTO product_ingredients (product, ingredient, is_natural) VALUES ('Shampoo', 'Water', TRUE), ('Conditioner', 'Silicones', FALSE);", "sql": "SELECT product, (SUM(CASE WHEN is_natural THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS natural_ingredient_percentage FROM product_ingredients GROUP BY product;"}, {"sql_prompt": "What is the average number of employees for companies in the 'Technology' industry, categorized by founding year?", "sql_context": "CREATE TABLE Company_Info (company_name VARCHAR(50), industry VARCHAR(20), employee_count INT); INSERT INTO Company_Info (company_name, industry, employee_count) VALUES ('Waystar Royco', 'Media', 5000); INSERT INTO Company_Info (company_name, industry, employee_count) VALUES ('Pied Piper', 'Technology', 50); INSERT INTO Company_Info (company_name, industry, employee_count) VALUES ('Austin Biotech', 'Biotechnology', 250); INSERT INTO Company_Info (company_name, industry, employee_count) VALUES ('Everest Technologies', 'Technology', 100);", "sql": "SELECT founding_year, AVG(employee_count) FROM (SELECT company_name, CASE WHEN industry = 'Technology' THEN founding_year END as founding_year, employee_count FROM Company_Info) t GROUP BY founding_year;"}, {"sql_prompt": "What was the average financial wellbeing score for customers of InclusiveFinance in Q3 2021?", "sql_context": "CREATE TABLE InclusiveFinance (id INT, customer_id INT, score INT, score_date DATE); INSERT INTO InclusiveFinance (id, customer_id, score, score_date) VALUES (1, 3001, 80, '2021-07-01');", "sql": "SELECT AVG(score) FROM InclusiveFinance WHERE QUARTER(score_date) = 3 AND YEAR(score_date) = 2021;"}, {"sql_prompt": "Delete all records from the 'threat_intelligence' table for the country of Russia", "sql_context": "threat_intelligence(threat_id, country, category, sub_category, description, threat_level)", "sql": "DELETE FROM threat_intelligence WHERE country = 'Russia';"}, {"sql_prompt": "List the number of BIPOC-led startups in the green technology sector with Series B funding or higher", "sql_context": "CREATE TABLE founders (id INT, company_id INT, ethnicity VARCHAR(255)); CREATE TABLE companies (id INT, industry VARCHAR(255), funding_round VARCHAR(255)); INSERT INTO founders SELECT 1, 1, 'BIPOC'; INSERT INTO founders SELECT 2, 2, 'White'; INSERT INTO founders SELECT 3, 3, 'BIPOC'; INSERT INTO companies (id, industry, funding_round) SELECT 2, 'Finance', 'Series A'; INSERT INTO companies (id, industry, funding_round) SELECT 3, 'Green Technology', 'Series B'; INSERT INTO companies (id, industry, funding_round) SELECT 4, 'Retail', 'Series C';", "sql": "SELECT COUNT(DISTINCT companies.id) FROM founders JOIN companies ON founders.company_id = companies.id WHERE companies.industry = 'Green Technology' AND founders.ethnicity = 'BIPOC' AND companies.funding_round >= 'Series B';"}, {"sql_prompt": "What is the adoption rate of electric vehicles in major cities?", "sql_context": "CREATE TABLE ElectricVehicleAdoption (City VARCHAR(50), Make VARCHAR(50), Model VARCHAR(50), Year INT, Adoption DECIMAL(5,2)); INSERT INTO ElectricVehicleAdoption (City, Make, Model, Year, Adoption) VALUES ('Los Angeles', 'Tesla', 'Model 3', 2020, 25.3), ('New York', 'Chevrolet', 'Bolt', 2020, 12.6), ('Beijing', 'BYD', 'e5', 2020, 18.8), ('Berlin', 'Audi', 'e-Tron', 2020, 10.5), ('Tokyo', 'Nissan', 'Leaf', 2020, 15.2);", "sql": "SELECT City, AVG(Adoption) as Avg_Adoption_Rate FROM ElectricVehicleAdoption GROUP BY City;"}, {"sql_prompt": "Identify the number of genetic research projects in each country.", "sql_context": "CREATE SCHEMA if not exists genetics;CREATE TABLE if not exists genetics.projects (id INT, name VARCHAR(50), country VARCHAR(50)); INSERT INTO genetics.projects (id, name, country) VALUES (1, 'ProjectX', 'UK'), (2, 'ProjectY', 'Germany'), (3, 'ProjectZ', 'UK'), (4, 'ProjectA', 'USA'), (5, 'ProjectB', 'France');", "sql": "SELECT country, COUNT(*) FROM genetics.projects GROUP BY country;"}, {"sql_prompt": "Who is the oldest donor from each city?", "sql_context": "CREATE TABLE donors_2 (id INT PRIMARY KEY, name VARCHAR(50), age INT, city VARCHAR(50), state VARCHAR(50)); INSERT INTO donors_2 (id, name, age, city, state) VALUES (1, 'John Doe', 35, 'New York', 'NY'), (2, 'Jane Smith', 40, 'Buffalo', 'NY'), (3, 'Mike Johnson', 50, 'Boston', 'MA');", "sql": "SELECT city, MAX(age) as oldest_donor_age FROM donors_2 GROUP BY city;"}, {"sql_prompt": "Alter 'Courses' table to add a column 'StudentsEnrolled'", "sql_context": "CREATE TABLE Students (StudentId INT, Name VARCHAR(50), Age INT); INSERT INTO Students (StudentId, Name, Age) VALUES (1001, 'John Doe', 16); CREATE VIEW StudentNames AS SELECT * FROM Students; CREATE TABLE Courses (CourseId INT, CourseName VARCHAR(50), Instructor VARCHAR(50), StudentsEnrolled INT); INSERT INTO Courses (CourseId, CourseName, Instructor, StudentsEnrolled) VALUES (1001, 'Introduction to Programming', 'Mr. Smith', 0);", "sql": "ALTER TABLE Courses ADD COLUMN StudentsEnrolled INT;"}, {"sql_prompt": "Find the number of wastewater treatment plants in California and Texas.", "sql_context": "CREATE TABLE treatment_plants (state TEXT, num_plants INT); INSERT INTO treatment_plants (state, num_plants) VALUES ('California', 321), ('Texas', 456), ('New York', 123), ('Florida', 345);", "sql": "SELECT num_plants FROM treatment_plants WHERE state IN ('California', 'Texas')"}, {"sql_prompt": "List all materials used in the manufacturing sector in Brazil and South Africa.", "sql_context": "CREATE TABLE material_data (material_name VARCHAR(50), country VARCHAR(50), industry VARCHAR(50)); INSERT INTO material_data (material_name, country, industry) VALUES ('Steel', 'Brazil', 'Manufacturing'), ('Aluminum', 'Brazil', 'Manufacturing'), ('Plastic', 'Brazil', 'Manufacturing'), ('Glass', 'Brazil', 'Manufacturing'), ('Titanium', 'South Africa', 'Manufacturing'), ('Steel', 'South Africa', 'Manufacturing'), ('Aluminum', 'South Africa', 'Manufacturing');", "sql": "SELECT DISTINCT material_name FROM material_data WHERE country IN ('Brazil', 'South Africa') AND industry = 'Manufacturing';"}, {"sql_prompt": "How many pallets were handled by each warehouse in 'Paris'?", "sql_context": "CREATE TABLE Warehouse (id INT, name VARCHAR(20), city VARCHAR(20)); INSERT INTO Warehouse (id, name, city) VALUES (1, 'Paris Warehouse 1', 'Paris'), (2, 'Paris Warehouse 2', 'Paris'); CREATE TABLE Handling (id INT, shipment_id INT, warehouse_id INT, pallets INT); INSERT INTO Handling (id, shipment_id, warehouse_id, pallets) VALUES (1, 101, 1, 500), (2, 102, 1, 750), (3, 103, 2, 300);", "sql": "SELECT w.name, SUM(h.pallets) FROM Handling h JOIN Warehouse w ON h.warehouse_id = w.id WHERE w.city = 'Paris' GROUP BY h.warehouse_id;"}, {"sql_prompt": "Calculate the percentage of employees in each department who are from underrepresented racial or ethnic groups.", "sql_context": "CREATE TABLE Employees (EmployeeID int, Department varchar(20), RaceEthnicity varchar(50)); INSERT INTO Employees (EmployeeID, Department, RaceEthnicity) VALUES (1, 'IT', 'Asian'), (2, 'IT', 'White'), (3, 'Sales', 'Black'), (4, 'Sales', 'Hispanic'), (5, 'Sales', 'Asian');", "sql": "SELECT e.Department, ROUND(COUNT(CASE WHEN e.RaceEthnicity IN ('Black', 'Hispanic', 'Native American', 'Pacific Islander') THEN 1 END) * 100.0 / COUNT(*), 1) AS Percent_Underrepresented FROM Employees e GROUP BY e.Department;"}, {"sql_prompt": "How many organic food suppliers are there in the EU?", "sql_context": "CREATE TABLE suppliers (id INT, country VARCHAR(20), organic BOOLEAN); INSERT INTO suppliers (id, country, organic) VALUES (1, 'Germany', true), (2, 'France', false);", "sql": "SELECT COUNT(*) FROM suppliers WHERE country IN ('EU countries') AND organic = true;"}, {"sql_prompt": "What is the average revenue for each genre, excluding genres with less than 3 concerts?", "sql_context": "CREATE SCHEMA if not exists music_schema;CREATE TABLE if not exists concerts (id INT, name VARCHAR, city VARCHAR, genre VARCHAR, revenue FLOAT);INSERT INTO concerts (id, name, city, genre, revenue) VALUES (1, 'Music Festival', 'New York', 'Pop', 50000.00), (2, 'Rock Concert', 'Chicago', 'Rock', 75000.00), (3, 'Jazz Festival', 'Los Angeles', 'Jazz', 125000.00), (4, 'Hip Hop Concert', 'Miami', 'Hip Hop', 60000.00), (5, 'Country Music Festival', 'Nashville', 'Country', 40000.00), (6, 'EDM Festival', 'Las Vegas', 'EDM', 80000.00), (7, 'Pop Concert', 'Los Angeles', 'Pop', 70000.00), (8, 'Rock Festival', 'Chicago', 'Rock', 65000.00), (9, 'Jazz Concert', 'Los Angeles', 'Jazz', 110000.00), (10, 'Hip Hop Festival', 'Miami', 'Hip Hop', 75000.00);", "sql": "SELECT genre, AVG(revenue) as avg_revenue FROM music_schema.concerts GROUP BY genre HAVING COUNT(*) >= 3;"}, {"sql_prompt": "What is the total defense spending by the United States for each year from 2015 to 2020?", "sql_context": "CREATE TABLE defense_spending (year INT, amount DECIMAL); INSERT INTO defense_spending (year, amount) VALUES (2015, 600), (2016, 610), (2017, 620), (2018, 630), (2019, 640), (2020, 650);", "sql": "SELECT year, SUM(amount) FROM defense_spending WHERE year BETWEEN 2015 AND 2020 GROUP BY year;"}, {"sql_prompt": "What is the total number of military bases and their types in the Asia-Pacific region?", "sql_context": "CREATE TABLE military_bases (id INT, name VARCHAR(255), type VARCHAR(255), region VARCHAR(255)); INSERT INTO military_bases (id, name, type, region) VALUES (1, 'Base 1', 'Air Force', 'Asia-Pacific'), (2, 'Base 2', 'Navy', 'Asia-Pacific');", "sql": "SELECT COUNT(*), type FROM military_bases WHERE region = 'Asia-Pacific' GROUP BY type;"}, {"sql_prompt": "List the R&D expenditures for the top 5 pharmaceutical companies in Germany.", "sql_context": "CREATE TABLE r_and_d_expenditures (company VARCHAR(255), country VARCHAR(255), amount FLOAT); INSERT INTO r_and_d_expenditures (company, country, amount) VALUES ('PharmaA', 'Germany', 5000000);", "sql": "SELECT company, SUM(amount) FROM r_and_d_expenditures WHERE country = 'Germany' GROUP BY company ORDER BY SUM(amount) DESC LIMIT 5;"}, {"sql_prompt": "Find the maximum depth of any ocean floor mapping project", "sql_context": "CREATE TABLE ocean_floor_mapping (project_name VARCHAR(255), max_depth DECIMAL(5,2)); INSERT INTO ocean_floor_mapping (project_name, max_depth) VALUES ('Project A', 8000.0), ('Project B', 7000.0), ('Project C', 9000.0);", "sql": "SELECT MAX(max_depth) FROM ocean_floor_mapping;"}, {"sql_prompt": "How many peacekeeping operations were led by the Association of Southeast Asian Nations (ASEAN) in the past decade?", "sql_context": "CREATE SCHEMA if not exists peacekeeping;CREATE TABLE if not exists asean_operations (id INT, operation_name VARCHAR(255), operation_start_date DATE, operation_end_date DATE); INSERT INTO asean_operations (id, operation_name, operation_start_date, operation_end_date) VALUES (1, 'ASEAN Peacekeeping Force', '2011-05-15', '2022-01-01');", "sql": "SELECT COUNT(*) FROM asean_operations WHERE operation_start_date BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 10 YEAR) AND CURRENT_DATE;"}, {"sql_prompt": "What is the total quantity of each product shipped from the Tokyo warehouse?", "sql_context": "CREATE TABLE Warehouses (WarehouseID int, WarehouseName varchar(255), City varchar(255), Country varchar(255)); INSERT INTO Warehouses (WarehouseID, WarehouseName, City, Country) VALUES (3, 'Tokyo Warehouse', 'Tokyo', 'Japan'); CREATE TABLE Shipments (ShipmentID int, WarehouseID int, ProductName varchar(255), Quantity int, ShippedDate date); INSERT INTO Shipments (ShipmentID, WarehouseID, ProductName, Quantity, ShippedDate) VALUES (3, 3, 'Oranges', 70, '2022-01-03');", "sql": "SELECT ProductName, SUM(Quantity) AS TotalQuantity FROM Shipments WHERE WarehouseID = 3 GROUP BY ProductName;"}, {"sql_prompt": "What is the total number of labor rights advocacy events for each region, by region name?", "sql_context": "CREATE TABLE Region (Id INT, Name VARCHAR(50)); INSERT INTO Region (Id, Name) VALUES (1, 'Region A'), (2, 'Region B'), (3, 'Region C'); CREATE TABLE AdvocacyEvents (Id INT, RegionId INT, EventCount INT); INSERT INTO AdvocacyEvents (Id, RegionId, EventCount) VALUES (1, 1, 50), (2, 1, 30), (3, 2, 70), (4, 2, 80), (5, 3, 60), (6, 3, 40);", "sql": "SELECT R.Name, SUM(A.EventCount) as TotalEvents FROM Region R JOIN AdvocacyEvents A ON R.Id = A.RegionId GROUP BY R.Name;"}, {"sql_prompt": "What is the total number of crimes reported in each city?", "sql_context": "CREATE TABLE CrimeStatistics (id INT, city VARCHAR(255), crime_type VARCHAR(50), reported_date DATE); CREATE VIEW CityCrimeCount AS SELECT city, COUNT(*) as total FROM CrimeStatistics GROUP BY city;", "sql": "SELECT city, SUM(total) FROM CityCrimeCount GROUP BY city;"}, {"sql_prompt": "What is the minimum temperature reading for sensor with ID 102 in the 'sensors' table?", "sql_context": "CREATE TABLE sensors (id INT, sensor_id INT, temperature DECIMAL(5,2)); INSERT INTO sensors (id, sensor_id, temperature) VALUES (1, 101, 23.5), (2, 102, 25.7), (3, 103, 21.8), (4, 104, 27.3);", "sql": "SELECT MIN(temperature) FROM sensors WHERE sensor_id = 102;"}, {"sql_prompt": "List the number of cultural heritage sites in Tokyo and Seoul.", "sql_context": "CREATE TABLE asian_sites (site_id INT, name VARCHAR(255), city VARCHAR(255), type VARCHAR(255)); INSERT INTO asian_sites (site_id, name, city, type) VALUES (1, 'Todai-ji Temple', 'Nara', 'historical'), (2, 'Gyeongbokgung Palace', 'Seoul', 'historical');", "sql": "SELECT city, COUNT(*) FROM asian_sites WHERE city IN ('Tokyo', 'Seoul') AND type = 'historical' GROUP BY city;"}, {"sql_prompt": "What is the most common type of cargo for each vessel?", "sql_context": "CREATE TABLE vessels (vessel_id INT, vessel_name VARCHAR(50), status VARCHAR(50)); CREATE TABLE cargo (cargo_id INT, vessel_id INT, cargo_type VARCHAR(50), weight INT);", "sql": "SELECT V.vessel_name, cargo_type, COUNT(cargo_type) AS frequency FROM cargo C JOIN vessels V ON C.vessel_id = V.vessel_id GROUP BY V.vessel_name, cargo_type ORDER BY frequency DESC;"}, {"sql_prompt": "What is the total funding received by startups in the technology sector that were founded by women?", "sql_context": "CREATE TABLE startups(id INT, name TEXT, sector TEXT, founder_gender TEXT, funding FLOAT); INSERT INTO startups VALUES (1, 'Acme Inc', 'Technology', 'Female', 2000000); INSERT INTO startups VALUES (2, 'Beta Corp', 'Retail', 'Male', 3000000); INSERT INTO startups VALUES (3, 'Gamma Start', 'Technology', 'Female', 5000000);", "sql": "SELECT SUM(funding) FROM startups WHERE sector = 'Technology' AND founder_gender = 'Female';"}, {"sql_prompt": "What is the total number of peacekeeping operations conducted by each country, ranked from highest to lowest?", "sql_context": "CREATE TABLE PeacekeepingOperations (Country VARCHAR(50), Year INT, Operations INT); INSERT INTO PeacekeepingOperations (Country, Year, Operations) VALUES ('USA', 2020, 15), ('China', 2020, 10), ('France', 2020, 12), ('USA', 2021, 18), ('China', 2021, 14), ('France', 2021, 16);", "sql": "SELECT Country, SUM(Operations) OVER (PARTITION BY Country ORDER BY Year ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS TotalOperations, RANK() OVER (ORDER BY SUM(Operations) DESC) AS PeacekeepingRank FROM PeacekeepingOperations GROUP BY Country ORDER BY PeacekeepingRank;"}, {"sql_prompt": "Which vessels have traveled between the Port of Santos and the Port of Hong Kong, and what is the median travel time (in days)?", "sql_context": "CREATE TABLE Routes (route_id INT, departure_port VARCHAR(20), arrival_port VARCHAR(20)); CREATE TABLE VesselTravel (vessel_id INT, route INT, departure_date DATE, travel_time INT); INSERT INTO Routes (route_id, departure_port, arrival_port) VALUES (1, 'Los Angeles', 'Tokyo'), (2, 'Rotterdam', 'New York'), (3, 'Santos', 'Hong Kong'); INSERT INTO VesselTravel (vessel_id, route, departure_date, travel_time) VALUES (1, 1, '2021-01-01', 14), (2, 1, '2021-02-01', 15), (3, 1, '2021-03-01', 16), (4, 3, '2021-01-01', 20), (5, 3, '2021-02-01', 21), (6, 3, '2021-03-01', 22), (7, 3, '2021-04-01', 19), (8, 3, '2021-05-01', 20), (9, 3, '2021-06-01', 23);", "sql": "SELECT vessel_id, MEDIAN(travel_time) as median_travel_time FROM VesselTravel WHERE route = 3 GROUP BY vessel_id;"}, {"sql_prompt": "List the top 2 AI algorithms with the highest explainability scores, by algorithm subtype, ordered by scores in descending order for the European region.", "sql_context": "CREATE TABLE ai_algorithms (algorithm_id INT, algorithm_name VARCHAR(50), algorithm_subtype VARCHAR(50), region VARCHAR(50), explainability_score FLOAT); INSERT INTO ai_algorithms (algorithm_id, algorithm_name, algorithm_subtype, region, explainability_score) VALUES (1, 'AlgoA', 'Tree-based', 'Europe', 0.85), (2, 'AlgoB', 'Computer Vision', 'Europe', 0.92), (3, 'AlgoC', 'Tree-based', 'Europe', 0.78), (4, 'AlgoD', 'Transformer', 'Europe', 0.90), (5, 'AlgoE', 'Tree-based', 'Europe', 0.80);", "sql": "SELECT algorithm_subtype, region, * FROM (SELECT algorithm_subtype, region, algorithm_id, algorithm_name, explainability_score, RANK() OVER (PARTITION BY algorithm_subtype ORDER BY explainability_score DESC) AS rank FROM ai_algorithms WHERE region = 'Europe') ranked WHERE rank <= 2 ORDER BY algorithm_subtype, region, explainability_score DESC;"}, {"sql_prompt": "When did the first fraud alert occur?", "sql_context": "CREATE TABLE fraud_alerts (id INT, account_number VARCHAR(20), alert_type VARCHAR(20), alert_date DATE); INSERT INTO fraud_alerts (id, account_number, alert_type, alert_date) VALUES (1, '1234567890', 'Suspicious Activity', '2022-01-01'); INSERT INTO fraud_alerts (id, account_number, alert_type, alert_date) VALUES (2, '0987654321', 'Identity Theft', '2022-01-02');", "sql": "SELECT MIN(alert_date) FROM fraud_alerts;"}, {"sql_prompt": "What is the total cost of permits for projects with permit numbers greater than 700?", "sql_context": "CREATE TABLE permit_data (id INT, project VARCHAR(50), permit_number INT, start_date DATE, permit_cost DECIMAL(10,2)); INSERT INTO permit_data (id, project, permit_number, start_date, permit_cost) VALUES (1, 'Office Building', 450, '2019-12-20', 850.00), (2, 'Residential Apartments', 751, '2021-03-01', 1200.50), (3, 'School', 333, '2020-06-15', 500.25), (4, 'Mall', 780, '2020-12-01', 1500.75);", "sql": "SELECT SUM(permit_cost) FROM permit_data WHERE permit_number > 700;"}, {"sql_prompt": "Find the supplier with the lowest average delivery time for orders in the last month.", "sql_context": "CREATE TABLE Suppliers (SupplierID int, SupplierName varchar(50)); CREATE TABLE Products (ProductID int, ProductName varchar(50), SupplierID int); CREATE TABLE Orders (OrderID int, ProductID int, OrderDate date, DeliveryTime int); INSERT INTO Suppliers VALUES (1, 'SupplierA'), (2, 'SupplierB'); INSERT INTO Products VALUES (1, 'Organic Apples', 1), (2, 'Bananas', 2); INSERT INTO Orders VALUES (1, 1, '2022-01-01', 2), (2, 2, '2022-01-03', 3);", "sql": "SELECT SupplierName, AVG(DeliveryTime) as AvgDeliveryTime FROM Orders o JOIN Products p ON o.ProductID = p.ProductID JOIN Suppliers sp ON p.SupplierID = sp.SupplierID WHERE OrderDate >= DATEADD(month, -1, GETDATE()) GROUP BY SupplierName ORDER BY AvgDeliveryTime ASC;"}, {"sql_prompt": "How many sports_events took place in '2018'?", "sql_context": "CREATE TABLE sports_events (event_id INT, year INT, sport VARCHAR(20)); INSERT INTO sports_events (event_id, year, sport) VALUES (1, 2017, 'Football'), (2, 2018, 'Basketball'), (3, 2018, 'Baseball');", "sql": "SELECT COUNT(*) FROM sports_events WHERE year = 2018;"}, {"sql_prompt": "How many sustainable sourcing audits were conducted in 'Florida'?", "sql_context": "CREATE TABLE sourcing_audits (restaurant_name TEXT, location TEXT, audit_date DATE); INSERT INTO sourcing_audits (restaurant_name, location, audit_date) VALUES ('Restaurant A', 'Florida', '2021-05-01'), ('Restaurant B', 'California', '2021-07-15'), ('Restaurant C', 'Florida', '2021-08-05');", "sql": "SELECT COUNT(*) FROM sourcing_audits WHERE location = 'Florida';"}, {"sql_prompt": "Find and delete duplicate records in the resource_depletion table", "sql_context": "CREATE TABLE resource_depletion (id INT, resource VARCHAR(255), depletion_rate DECIMAL(10,2));", "sql": "DELETE t1 FROM resource_depletion t1 INNER JOIN (SELECT id, resource, depletion_rate, COUNT(*) FROM resource_depletion GROUP BY resource, depletion_rate HAVING COUNT(*) > 1) t2 ON t1.resource = t2.resource AND t1.depletion_rate = t2.depletion_rate AND t1.id < t2.id;"}, {"sql_prompt": "Delete the record with date '2022-01-02' in the FishTank table.", "sql_context": "CREATE TABLE FishTank (date DATE, temperature FLOAT); INSERT INTO FishTank (date, temperature) VALUES ('2022-01-01', 20.5), ('2022-01-02', 21.0), ('2022-01-03', 21.5);", "sql": "DELETE FROM FishTank WHERE date = '2022-01-02';"}, {"sql_prompt": "How many solar power projects were completed in California and Texas in 2020 and 2021?", "sql_context": "CREATE TABLE solar_projects (project_id INT, state VARCHAR(50), completion_year INT); INSERT INTO solar_projects (project_id, state, completion_year) VALUES (1, 'California', 2020), (2, 'Texas', 2021), (3, 'California', 2019), (4, 'Texas', 2020), (5, 'California', 2021), (6, 'Texas', 2019), (7, 'California', 2018), (8, 'Texas', 2018);", "sql": "SELECT state, COUNT(*) FROM solar_projects WHERE completion_year IN (2020, 2021) AND state IN ('California', 'Texas') GROUP BY state;"}, {"sql_prompt": "Update the privacy setting of users who reside in California to 'high'", "sql_context": "CREATE TABLE users (id INT, state VARCHAR(20), privacy_setting VARCHAR(20)); INSERT INTO users (id, state, privacy_setting) VALUES (1, 'California', 'medium'), (2, 'New York', 'high'), (3, 'Texas', 'low');", "sql": "UPDATE users SET privacy_setting = 'high' WHERE state = 'California';"}, {"sql_prompt": "Delete records in the 'sensor_data' table where the 'sensor_type' is 'temperature' and the reading is greater than 30", "sql_context": "CREATE TABLE sensor_data (sensor_id INT, sensor_type VARCHAR(20), reading FLOAT, timestamp TIMESTAMP);", "sql": "DELETE FROM sensor_data WHERE sensor_type = 'temperature' AND reading > 30;"}, {"sql_prompt": "What is the number of companies founded by immigrants each year?", "sql_context": "CREATE TABLE founders (founder_id INT, company_id INT, immigrant BOOLEAN); CREATE TABLE companies (company_id INT, founding_year INT); INSERT INTO founders (founder_id, company_id, immigrant) VALUES (1, 1, true), (2, 2, false), (3, 3, true), (4, 4, false); INSERT INTO companies (company_id, founding_year) VALUES (1, 2018), (2, 2017), (3, 2019), (4, 2018);", "sql": "SELECT founding_year, COUNT(f.founder_id) as num_immigrant_founded_companies FROM founders f JOIN companies c ON f.company_id = c.company_id WHERE f.immigrant = true GROUP BY founding_year;"}, {"sql_prompt": "What is the sum of lanthanum imports to Norway and Sweden for the years 2018 and 2019?", "sql_context": "CREATE TABLE lanthanum_imports (year INT, country TEXT, quantity INT); INSERT INTO lanthanum_imports (year, country, quantity) VALUES (2018, 'Norway', 150), (2019, 'Norway', 160), (2018, 'Sweden', 140), (2019, 'Sweden', 150);", "sql": "SELECT SUM(quantity) FROM lanthanum_imports WHERE country IN ('Norway', 'Sweden') AND year IN (2018, 2019);"}, {"sql_prompt": "What is the average age of female fans who prefer the 'Soccer' team in the 'fan_demographics' table?", "sql_context": "CREATE TABLE fan_demographics (id INT PRIMARY KEY, name VARCHAR(100), gender VARCHAR(10), age INT, favorite_team VARCHAR(50)); CREATE TABLE teams (id INT PRIMARY KEY, name VARCHAR(100), sport VARCHAR(50));", "sql": "SELECT AVG(fd.age) as avg_age FROM fan_demographics fd JOIN teams t ON fd.favorite_team = t.name WHERE fd.gender = 'Female' AND t.name = 'Soccer';"}, {"sql_prompt": "What is the total revenue generated from ethical labor practices in South America?", "sql_context": "CREATE TABLE Revenue (RID INT, Practice VARCHAR(20), Revenue FLOAT, Country VARCHAR(20)); INSERT INTO Revenue VALUES (1, 'Ethical Labor', 5000, 'South America'); INSERT INTO Revenue VALUES (2, 'Ethical Labor', 7000, 'South America');", "sql": "SELECT SUM(Revenue) FROM Revenue WHERE Practice = 'Ethical Labor' AND Country = 'South America';"}, {"sql_prompt": "List the names of all sensors and their respective locations from the 'sensor_data' and 'sensor_location' tables", "sql_context": "CREATE TABLE sensor_data (sensor_id INT, water_level FLOAT, timestamp TIMESTAMP); CREATE TABLE sensor_location (sensor_id INT, location VARCHAR(50));", "sql": "SELECT sensor_data.sensor_id, sensor_location.location FROM sensor_data INNER JOIN sensor_location ON sensor_data.sensor_id = sensor_location.sensor_id;"}, {"sql_prompt": "What is the average transaction amount for retail customers in New York?", "sql_context": "CREATE TABLE retail_customers (customer_id INT, name VARCHAR(50), state VARCHAR(20), transaction_amount DECIMAL(10,2)); INSERT INTO retail_customers (customer_id, name, state, transaction_amount) VALUES (1, 'John Doe', 'NY', 120.50), (2, 'Jane Smith', 'NY', 75.30);", "sql": "SELECT AVG(transaction_amount) FROM retail_customers WHERE state = 'NY';"}, {"sql_prompt": "Find the minimum transaction amount for 'ETH'.", "sql_context": "CREATE TABLE digital_assets (asset_id varchar(10), asset_name varchar(10)); INSERT INTO digital_assets (asset_id, asset_name) VALUES ('ETH', 'Ethereum'), ('BTC', 'Bitcoin'); CREATE TABLE transactions (transaction_id serial, asset_id varchar(10), transaction_amount numeric); INSERT INTO transactions (asset_id, transaction_amount) VALUES ('ETH', 120), ('ETH', 230), ('BTC', 500), ('ETH', 100);", "sql": "SELECT MIN(transaction_amount) FROM transactions WHERE asset_id = 'ETH';"}, {"sql_prompt": "What is the total number of donations and total amount donated for each region in the 'Regions' table?", "sql_context": "CREATE TABLE Regions (RegionID int, RegionName varchar(50), DonationCount int, TotalDonations numeric(18,2));", "sql": "SELECT RegionName, SUM(DonationCount) as TotalDonationsCount, SUM(TotalDonations) as TotalDonationsAmount FROM Regions GROUP BY RegionName;"}, {"sql_prompt": "What was the total attendance at poetry readings in San Francisco?", "sql_context": "CREATE TABLE events (id INT, event_type VARCHAR(50), city VARCHAR(50), attendance INT); INSERT INTO events (id, event_type, city, attendance) VALUES (1, 'Poetry Reading', 'San Francisco', 50), (2, 'Music Concert', 'Los Angeles'), (3, 'Poetry Reading', 'San Francisco', 75);", "sql": "SELECT SUM(attendance) FROM events WHERE event_type = 'Poetry Reading' AND city = 'San Francisco';"}, {"sql_prompt": "Determine the percentage of autonomous vehicles in the 'inventory' table, partitioned by location.", "sql_context": "CREATE TABLE inventory (vehicle_type VARCHAR(10), inventory_location VARCHAR(10), quantity_on_hand INT);", "sql": "SELECT inventory_location, 100.0 * AVG(CASE WHEN vehicle_type LIKE '%Autonomous%' THEN 1.0 ELSE 0.0 END) AS autonomy_percentage FROM inventory GROUP BY inventory_location;"}, {"sql_prompt": "What are the AI safety principles and their corresponding descriptions?", "sql_context": "CREATE TABLE ai_safety_principles (principle_id INTEGER, principle_name TEXT, principle_description TEXT);", "sql": "SELECT principle_name, principle_description FROM ai_safety_principles;"}, {"sql_prompt": "Which artists have their works exhibited in the 'Contemporary Art Museum' located in 'New York'?", "sql_context": "CREATE TABLE Artists (ArtistID int, Name varchar(50), Nationality varchar(50)); INSERT INTO Artists VALUES (1, 'Pablo Picasso', 'Spanish'); INSERT INTO Artists VALUES (2, 'Andy Warhol', 'American'); CREATE TABLE Exhibitions (ExhibitionID int, Title varchar(50), Museum varchar(50), City varchar(50)); INSERT INTO Exhibitions VALUES (1, 'Cubism', 'Museum of Modern Art', 'New York'); INSERT INTO Exhibitions VALUES (2, 'Pop Art', 'Contemporary Art Museum', 'New York'); CREATE TABLE Exhibits (ExhibitionID int, ArtistID int); INSERT INTO Exhibits VALUES (2, 2);", "sql": "SELECT Artists.Name FROM Artists JOIN Exhibits ON Artists.ArtistID = Exhibits.ArtistID JOIN Exhibitions ON Exhibits.ExhibitionID = Exhibitions.ExhibitionID WHERE Exhibitions.Museum = 'Contemporary Art Museum' AND Exhibitions.City = 'New York';"}, {"sql_prompt": "List all policies, claim types, and claim amounts for policyholders living in 'California'?", "sql_context": "CREATE TABLE Policyholders (PolicyholderID INT, State VARCHAR(20)); INSERT INTO Policyholders (PolicyholderID, State) VALUES (1, 'California'), (2, 'New York'), (3, 'Florida'); CREATE TABLE Claims (ClaimID INT, PolicyholderID INT, ClaimType VARCHAR(20), ClaimAmount INT); INSERT INTO Claims (ClaimID, PolicyholderID, ClaimType, ClaimAmount) VALUES (1, 1, 'Theft', 5000), (2, 1, 'Fire', 20000), (3, 2, 'Accident', 7000);", "sql": "SELECT Policyholders.State, Claims.ClaimType, Claims.ClaimAmount FROM Policyholders INNER JOIN Claims ON Policyholders.PolicyholderID = Claims.PolicyholderID WHERE Policyholders.State = 'California';"}, {"sql_prompt": "What is the total number of packages shipped to the Midwest from all warehouses?", "sql_context": "CREATE TABLE midwest_states (state_id INT, state_name VARCHAR(50)); INSERT INTO midwest_states (state_id, state_name) VALUES (1, 'Illinois'), (2, 'Indiana'), (3, 'Iowa'), (4, 'Kansas'), (5, 'Michigan'), (6, 'Minnesota'), (7, 'Missouri'), (8, 'Nebraska'), (9, 'Ohio'), (10, 'Wisconsin'); CREATE TABLE packages (package_id INT, package_weight INT, warehouse_id INT, recipient_state VARCHAR(50)); INSERT INTO packages (package_id, package_weight, warehouse_id, recipient_state) VALUES (1, 5, 1, 'California'), (2, 3, 2, 'Texas'), (3, 4, 3, 'Illinois');", "sql": "SELECT COUNT(package_id) FROM packages WHERE recipient_state IN (SELECT state_name FROM midwest_states);"}, {"sql_prompt": "What is the maximum solar capacity in Mexico?", "sql_context": "CREATE TABLE solar_capacity (id INT, name TEXT, country TEXT, capacity FLOAT);", "sql": "SELECT MAX(capacity) FROM solar_capacity WHERE country = 'Mexico';"}, {"sql_prompt": "What is the distribution of security incidents by day of the week for the last year?", "sql_context": "CREATE TABLE security_incidents_by_day (day_of_week VARCHAR(10), incident_count INT, incident_date DATE); INSERT INTO security_incidents_by_day (day_of_week, incident_count, incident_date) VALUES ('Monday', 120, '2022-01-01'), ('Tuesday', 140, '2022-01-02'), ('Wednesday', 160, '2022-01-03'), ('Thursday', 130, '2022-01-04'), ('Friday', 110, '2022-01-05');", "sql": "SELECT DATENAME(dw, incident_date) AS day_of_week, COUNT(*) AS incident_count FROM security_incidents WHERE incident_date >= DATEADD(year, -1, GETDATE()) GROUP BY DATENAME(dw, incident_date);"}, {"sql_prompt": "What is the regulatory framework status in 'singapore'?", "sql_context": "CREATE TABLE regulation (id INT, country VARCHAR(20), status VARCHAR(20)); INSERT INTO regulation (id, country, status) VALUES (1, 'singapore', 'approved');", "sql": "SELECT status FROM regulation WHERE country = 'singapore';"}, {"sql_prompt": "How many support programs were implemented in the Northeast region each year?", "sql_context": "CREATE TABLE SupportPrograms (ProgramID INT, ProgramName VARCHAR(50), Region VARCHAR(50), ImplementationYear INT); INSERT INTO SupportPrograms (ProgramID, ProgramName, Region, ImplementationYear) VALUES (1, 'Assistive Technology', 'Northeast', 2018), (2, 'Sign Language Interpretation', 'Northeast', 2019), (3, 'Accessible Furniture', 'Northeast', 2020);", "sql": "SELECT ImplementationYear, COUNT(ProgramID) FROM SupportPrograms WHERE Region = 'Northeast' GROUP BY ImplementationYear;"}, {"sql_prompt": "What is the total number of relief_operations in 'relief_ops' table for 'Asia' in Q1 2022?", "sql_context": "CREATE TABLE relief_ops (operation_id INT, operation_type VARCHAR(50), operation_date DATE, region VARCHAR(50)); INSERT INTO relief_ops (operation_id, operation_type, operation_date, region) VALUES (1, 'food distribution', '2022-01-01', 'Asia'), (2, 'medical aid', '2022-01-02', 'Asia');", "sql": "SELECT COUNT(operation_id) FROM relief_ops WHERE EXTRACT(QUARTER FROM operation_date) = 1 AND region = 'Asia';"}, {"sql_prompt": "What is the average height of players in the basketball team 'Atlanta Hawks'?", "sql_context": "CREATE TABLE players (player_name TEXT, team TEXT, height FLOAT); INSERT INTO players (player_name, team, height) VALUES ('John Doe', 'Atlanta Hawks', 196.85); INSERT INTO players (player_name, team, height) VALUES ('Jane Smith', 'Atlanta Hawks', 185.42);", "sql": "SELECT AVG(height) FROM players WHERE team = 'Atlanta Hawks';"}, {"sql_prompt": "Which organizations have provided legal assistance to refugees in the Middle East and North Africa?", "sql_context": "CREATE TABLE legal_assistance (id INT, organization_name VARCHAR(50), region VARCHAR(20), provided_legal_assistance BOOLEAN); INSERT INTO legal_assistance (id, organization_name, region, provided_legal_assistance) VALUES (1, 'Amnesty International', 'Middle East', TRUE), (2, 'International Rescue Committee', 'North Africa', TRUE), (3, 'Save the Children', 'Asia', FALSE), (4, 'Oxfam', 'Africa', FALSE);", "sql": "SELECT DISTINCT organization_name FROM legal_assistance WHERE region IN ('Middle East', 'North Africa') AND provided_legal_assistance = TRUE;"}, {"sql_prompt": "How many mental health parity complaints were filed in the last 12 months by state?", "sql_context": "CREATE TABLE mental_health_parity_complaints (complaint_id INT, complaint_date DATE, state VARCHAR(20)); INSERT INTO mental_health_parity_complaints (complaint_id, complaint_date, state) VALUES (1, '2021-01-01', 'California'), (2, '2021-03-15', 'New York'), (3, '2020-12-31', 'Texas');", "sql": "SELECT state, COUNT(*) as num_complaints FROM mental_health_parity_complaints WHERE complaint_date >= DATE_SUB(CURRENT_DATE, INTERVAL 12 MONTH) GROUP BY state;"}, {"sql_prompt": "What is the total number of veteran employment applications and hires in Florida in the past quarter?", "sql_context": "CREATE TABLE veteran_employment (application_id INT, application_date DATE, application_status VARCHAR(255), state VARCHAR(255)); INSERT INTO veteran_employment (application_id, application_date, application_status, state) VALUES (1, '2021-01-01', 'Applied', 'Florida'); INSERT INTO veteran_employment (application_id, application_date, application_status, state) VALUES (2, '2021-03-01', 'Hired', 'Florida');", "sql": "SELECT SUM(CASE WHEN application_status = 'Applied' THEN 1 ELSE 0 END) as total_applications, SUM(CASE WHEN application_status = 'Hired' THEN 1 ELSE 0 END) as total_hires FROM veteran_employment WHERE state = 'Florida' AND application_date >= DATEADD(quarter, -1, GETDATE());"}, {"sql_prompt": "What is the total amount of microfinance loans provided by the BRAC Bank last year?", "sql_context": "CREATE TABLE microfinance_loans (bank VARCHAR(50), product VARCHAR(50), amount FLOAT, loan_date DATE); INSERT INTO microfinance_loans (bank, product, amount, loan_date) VALUES ('BRAC Bank', 'Microenterprise Loan', 1000.00, '2022-01-01'), ('BRAC Bank', 'Education Loan', 2000.00, '2022-02-01'), ('BRAC Bank', 'Housing Loan', 3000.00, '2022-03-01');", "sql": "SELECT SUM(amount) FROM microfinance_loans WHERE bank = 'BRAC Bank' AND YEAR(loan_date) = YEAR(CURRENT_DATE()) - 1;"}, {"sql_prompt": "What is the total number of disability accommodations requested and approved by department?", "sql_context": "CREATE TABLE Accommodation_Data (Request_ID INT, Request_Date DATE, Accommodation_Type VARCHAR(50), Request_Status VARCHAR(10), Department VARCHAR(50));", "sql": "SELECT Department, COUNT(*) as Total_Requests FROM Accommodation_Data WHERE Request_Status = 'Approved' GROUP BY Department;"}, {"sql_prompt": "Add a new training to the table", "sql_context": "CREATE TABLE cultural_competency_training (id INT PRIMARY KEY, organization_name VARCHAR(50), training_title TEXT, training_date DATE);", "sql": "INSERT INTO cultural_competency_training (id, organization_name, training_title, training_date) VALUES (1, 'University Hospital', 'Cultural Competency Training', '2023-01-01');"}, {"sql_prompt": "What is the total installed capacity of renewable energy projects in the US?", "sql_context": "CREATE TABLE Renewable_Energy_Projects (id INT, country VARCHAR(20), installed_capacity FLOAT); INSERT INTO Renewable_Energy_Projects (id, country, installed_capacity) VALUES (1, 'US', 1200.5), (2, 'Canada', 1500.2), (3, 'Mexico', 900.1);", "sql": "SELECT SUM(installed_capacity) FROM Renewable_Energy_Projects WHERE country = 'US';"}, {"sql_prompt": "What is the minimum health equity metric score achieved by healthcare providers working in rural areas?", "sql_context": "CREATE TABLE healthcare_providers (id INT, name VARCHAR(100), location VARCHAR(50), health_equity_metric_score INT); INSERT INTO healthcare_providers (id, name, location, health_equity_metric_score) VALUES (1, 'Pat', 'Rural', 80), (2, 'Quinn', 'Urban', 85), (3, 'Riley', 'Rural', 75);", "sql": "SELECT MIN(health_equity_metric_score) FROM healthcare_providers WHERE location = 'Rural';"}, {"sql_prompt": "What is the average attendance at NFL games?", "sql_context": "CREATE TABLE nfl_games (game_date DATE, home_team VARCHAR(100), away_team VARCHAR(100), attendance INT); INSERT INTO nfl_games VALUES ('2022-01-09', 'Los Angeles Rams', 'Arizona Cardinals', 74200), ('2022-01-09', 'Tampa Bay Buccaneers', 'Philadelphia Eagles', 65890), ('2022-01-09', 'Dallas Cowboys', 'San Francisco 49ers', 93753);", "sql": "SELECT AVG(attendance) FROM nfl_games;"}, {"sql_prompt": "Compare the landfill capacity of 'Ontario' and 'Quebec'", "sql_context": "CREATE TABLE landfill_capacity (id INT, region VARCHAR(20), capacity INT); INSERT INTO landfill_capacity (id, region, capacity) VALUES (1, 'Ontario', 400000), (2, 'Quebec', 500000);", "sql": "SELECT region, capacity FROM landfill_capacity WHERE region IN ('Ontario', 'Quebec');"}, {"sql_prompt": "What is the number of smart contracts developed by individuals from underrepresented communities in the Ethereum network?", "sql_context": "CREATE TABLE if not exists smart_contracts (contract_id INT, contract_address VARCHAR(255), developer_community VARCHAR(255)); INSERT INTO smart_contracts (contract_id, contract_address, developer_community) VALUES (1, '0x123...', 'Women in Tech'), (2, '0x456...', 'Minority Ethnic Group'), (3, '0x789...', 'LGBTQ+'), (4, '0xabc...', 'People with Disabilities'), (5, '0xdef...', 'Indigenous People'), (6, '0xghi...', 'Young Developers');", "sql": "SELECT COUNT(*) FROM smart_contracts WHERE developer_community IN ('Women in Tech', 'Minority Ethnic Group', 'LGBTQ+', 'People with Disabilities', 'Indigenous People', 'Young Developers');"}, {"sql_prompt": "What is the average safety score for each creative AI application, grouped by region?", "sql_context": "CREATE TABLE CreativeAIs (id INT, name VARCHAR(50), safety_score INT, region VARCHAR(50)); INSERT INTO CreativeAIs (id, name, safety_score, region) VALUES (1, 'AI Painter', 85, 'North America'); INSERT INTO CreativeAIs (id, name, safety_score, region) VALUES (2, 'AI Music Composer', 90, 'Europe'); INSERT INTO CreativeAIs (id, name, safety_score, region) VALUES (3, 'AI Poet', 80, 'Asia');", "sql": "SELECT region, AVG(safety_score) as avg_safety_score FROM CreativeAIs GROUP BY region;"}, {"sql_prompt": "Delete the row with the lowest quantity of Gadolinium produced in 2020.", "sql_context": "CREATE TABLE gadolinium_production (id INT, name VARCHAR(255), element VARCHAR(10), country VARCHAR(100), production_date DATE, quantity FLOAT); INSERT INTO gadolinium_production (id, name, element, country, production_date, quantity) VALUES (1, 'Company A', 'Gd', 'China', '2020-01-01', 15.0), (2, 'Company B', 'Gd', 'Australia', '2020-01-15', 20.0), (3, 'Company C', 'Gd', 'Malaysia', '2020-02-01', 25.0), (4, 'Company D', 'Gd', 'China', '2020-02-15', 30.0), (5, 'Company E', 'Gd', 'Australia', '2020-03-01', 35.0);", "sql": "DELETE FROM gadolinium_production WHERE (name, element, production_date, quantity) IN (SELECT name, element, production_date, MIN(quantity) FROM gadolinium_production WHERE element = 'Gd' AND YEAR(production_date) = 2020 GROUP BY name, element, production_date);"}, {"sql_prompt": "List the broadband subscribers with compliance issues and the corresponding compliance issue description.", "sql_context": "CREATE TABLE broadband_subscribers (subscriber_id INT, name VARCHAR(50), has_compliance_issue INT); CREATE TABLE compliance_issues (issue_id INT, description VARCHAR(100)); INSERT INTO broadband_subscribers (subscriber_id, name, has_compliance_issue) VALUES (1, 'Jane Doe', 1); INSERT INTO compliance_issues (issue_id, description) VALUES (1, 'Non-payment of annual fee');", "sql": "SELECT subscribers.name, compliance_issues.description FROM broadband_subscribers AS subscribers JOIN compliance_issues ON subscribers.has_compliance_issue = compliance_issues.issue_id;"}, {"sql_prompt": "List faculty diversity metrics including the number of female, male, and non-binary faculty members in the Mathematics department", "sql_context": "CREATE TABLE Department (id INT, name VARCHAR(255)); INSERT INTO Department (id, name) VALUES (1, 'Computer Science'), (2, 'Physics'), (3, 'Mathematics'), (4, 'English'); CREATE TABLE Faculty (id INT, name VARCHAR(255), gender VARCHAR(10), department_id INT); INSERT INTO Faculty (id, name, gender, department_id) VALUES (1, 'John Doe', 'Male', 1), (2, 'Jane Smith', 'Female', 3), (3, 'Jamie Johnson', 'Non-binary', 2), (4, 'Alice Davis', 'Female', 3), (5, 'Bob Brown', 'Male', 1);", "sql": "SELECT f.gender, COUNT(*) as num_faculty FROM Faculty f WHERE f.department_id = (SELECT id FROM Department WHERE name = 'Mathematics') GROUP BY f.gender;"}, {"sql_prompt": "Delete the record of employee with ID 2", "sql_context": "CREATE SCHEMA IF NOT EXISTS hr;CREATE TABLE IF NOT EXISTS employees (id INT, name VARCHAR(50), department VARCHAR(50), hire_date DATE);INSERT INTO employees (id, name, department, hire_date) VALUES (1, 'John Doe', 'IT', '2020-01-15');INSERT INTO employees (id, name, department, hire_date) VALUES (2, 'Jane Smith', 'HR', '2019-06-20');INSERT INTO employees (id, name, department, hire_date) VALUES (3, 'Jim Brown', 'Finance', '2020-04-01');", "sql": "DELETE FROM hr.employees WHERE id = 2;"}, {"sql_prompt": "What is the virtual tour engagement rate for the top 2 countries with the highest engagement rates, ordered by engagement rate in descending order?", "sql_context": "CREATE TABLE virtual_tours (tour_id INT, hotel_name TEXT, country TEXT, engagement_rate FLOAT); INSERT INTO virtual_tours (tour_id, hotel_name, country, engagement_rate) VALUES (1, 'Hotel A', 'USA', 0.06), (2, 'Hotel B', 'Canada', 0.08), (3, 'Hotel C', 'Mexico', 0.05), (4, 'Hotel D', 'USA', 0.07);", "sql": "SELECT country, engagement_rate FROM (SELECT country, engagement_rate, RANK() OVER (ORDER BY engagement_rate DESC) as rank FROM virtual_tours) as subquery WHERE rank <= 2 ORDER BY engagement_rate DESC;"}, {"sql_prompt": "What is the difference in average salary between employees who have and have not completed diversity and inclusion training, by job title and region?", "sql_context": "CREATE TABLE Employees (EmployeeID INT, Gender VARCHAR(10), JobTitle VARCHAR(50), Region VARCHAR(50), Salary INT, CompletedDiversityTraining BOOLEAN); INSERT INTO Employees (EmployeeID, Gender, JobTitle, Region, Salary, CompletedDiversityTraining) VALUES (1, 'Male', 'Manager', 'North', 70000, TRUE), (2, 'Female', 'Manager', 'South', 65000, FALSE), (3, 'Male', 'Developer', 'East', 60000, TRUE), (4, 'Female', 'Developer', 'West', 62000, FALSE);", "sql": "SELECT Region, JobTitle, AVG(CASE WHEN CompletedDiversityTraining THEN Salary ELSE NULL END) - AVG(CASE WHEN NOT CompletedDiversityTraining THEN Salary ELSE NULL END) AS Salary_Difference FROM Employees GROUP BY Region, JobTitle;"}, {"sql_prompt": "What is the total number of eco-friendly hotels in Rome?", "sql_context": "CREATE TABLE eco_hotels (hotel_id INT, city TEXT, sustainable_certification BOOLEAN); INSERT INTO eco_hotels (hotel_id, city, sustainable_certification) VALUES (1, 'Rome', true), (2, 'Rome', false);", "sql": "SELECT COUNT(*) FROM eco_hotels WHERE city = 'Rome' AND sustainable_certification = true;"}, {"sql_prompt": "What was the change in water consumption between 2020 and 2021 for each city?", "sql_context": "CREATE TABLE city_water_usage (city VARCHAR(50), year INT, consumption INT); INSERT INTO city_water_usage (city, year, consumption) VALUES ('CityA', 2019, 1200), ('CityA', 2020, 1500), ('CityA', 2021, 1700), ('CityB', 2019, 1000), ('CityB', 2020, 1100), ('CityB', 2021, 1300);", "sql": "SELECT a.city, (a.consumption - b.consumption) AS consumption_change FROM city_water_usage a INNER JOIN city_water_usage b ON a.city = b.city AND a.year = 2021 AND b.year = 2020;"}, {"sql_prompt": "Add a new soccer match to the 'matches' table with the given details.", "sql_context": "CREATE TABLE matches (match_id INT, home_team TEXT, away_team TEXT, home_goals INT, away_goals INT, match_date DATE);", "sql": "INSERT INTO matches (match_id, home_team, away_team, home_goals, away_goals, match_date) VALUES (1, 'Barcelona', 'Real Madrid', 3, 2, '2022-10-02');"}, {"sql_prompt": "What is the average population size of marine turtles?", "sql_context": "CREATE TABLE marine_species (name TEXT, category TEXT, population INT); INSERT INTO marine_species (name, category, population) VALUES ('Leatherback Turtle', 'Turtle', 5000), ('Green Sea Turtle', 'Turtle', 8000), ('Loggerhead Turtle', 'Turtle', 6000);", "sql": "SELECT AVG(population) FROM marine_species WHERE category = 'Turtle';"}, {"sql_prompt": "Which excavation sites have over 2000 artifacts?", "sql_context": "CREATE TABLE Excavation_Sites (Site_ID INT, Site_Name TEXT, Country TEXT, Number_of_Artifacts INT);INSERT INTO Excavation_Sites (Site_ID, Site_Name, Country, Number_of_Artifacts) VALUES (1, 'Pompeii', 'Italy', 10000);INSERT INTO Excavation_Sites (Site_ID, Site_Name, Country, Number_of_Artifacts) VALUES (2, 'Tutankhamun', 'Egypt', 5000);INSERT INTO Excavation_Sites (Site_ID, Site_Name, Country, Number_of_Artifacts) VALUES (3, 'Machu Picchu', 'Peru', 3000);INSERT INTO Excavation_Sites (Site_ID, Site_Name, Country, Number_of_Artifacts) VALUES (4, 'Angkor Wat', 'Cambodia', 2500);INSERT INTO Excavation_Sites (Site_ID, Site_Name, Country, Number_of_Artifacts) VALUES (5, 'Teotihuacan', 'Mexico', 2001);", "sql": "SELECT Site_ID, Site_Name, Number_of_Artifacts FROM Excavation_Sites WHERE Number_of_Artifacts > 2000;"}, {"sql_prompt": "Insert a new record into the 'energy_storage' table for a flow battery with 5 MWh capacity, located in 'Quebec'", "sql_context": "CREATE TABLE energy_storage (id INT PRIMARY KEY, technology VARCHAR(255), capacity FLOAT, location VARCHAR(255));", "sql": "INSERT INTO energy_storage (technology, capacity, location) VALUES ('flow', 5, 'Quebec');"}, {"sql_prompt": "How many employees were hired in each month of 2022?", "sql_context": "CREATE TABLE Employees (EmployeeID INT, HireDate DATE); INSERT INTO Employees (EmployeeID, HireDate) VALUES (1, '2022-01-15'); INSERT INTO Employees (EmployeeID, HireDate) VALUES (2, '2022-02-01');", "sql": "SELECT EXTRACT(MONTH FROM HireDate) AS Month, COUNT(*) AS NumberOfHires FROM Employees WHERE HireDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY Month;"}, {"sql_prompt": "What is the total revenue from concert ticket sales for artists who identify as transgender, in the last year?", "sql_context": "CREATE TABLE concerts (id INT, artist_id INT, location VARCHAR(255), revenue DECIMAL(10,2), concert_date DATE); CREATE TABLE artists (id INT, gender VARCHAR(255));", "sql": "SELECT SUM(revenue) FROM concerts INNER JOIN artists ON concerts.artist_id = artists.id WHERE artists.gender LIKE '%transgender%' AND concert_date >= NOW() - INTERVAL 1 YEAR;"}, {"sql_prompt": "What is the average donation amount in 'Asia' region?", "sql_context": "CREATE TABLE donations (id INT, donor_id INT, donation_amount DECIMAL(10,2), region VARCHAR(50)); INSERT INTO donations (id, donor_id, donation_amount, region) VALUES (1, 1, 100.00, 'Asia'); INSERT INTO donations (id, donor_id, donation_amount, region) VALUES (2, 2, 200.00, 'Africa'); INSERT INTO donations (id, donor_id, donation_amount, region) VALUES (3, 3, 300.00, 'Europe');", "sql": "SELECT AVG(donation_amount) FROM donations WHERE region = 'Asia';"}, {"sql_prompt": "What is the total production of iron mines in Russia?", "sql_context": "CREATE TABLE mine (id INT, name TEXT, location TEXT, mineral TEXT, production INT); INSERT INTO mine (id, name, location, mineral, production) VALUES (1, 'Mikhailovsky GOK', 'Russia', 'Iron', 12000), (2, 'Lebedinsky GOK', 'Russia', 'Iron', 15000);", "sql": "SELECT SUM(production) FROM mine WHERE mineral = 'Iron' AND location = 'Russia';"}, {"sql_prompt": "What is the total quantity of 'Tencel Lyocell' and 'Bamboo Viscose' fabrics in stock?", "sql_context": "CREATE TABLE inventory (id INT PRIMARY KEY, fabric_name VARCHAR(50), size VARCHAR(10), quantity INT, color VARCHAR(10)); INSERT INTO inventory (id, fabric_name, size, quantity, color) VALUES (1, 'Organic Cotton', 'S', 100, 'White'); INSERT INTO inventory (id, fabric_name, size, quantity, color) VALUES (2, 'Tencel Lyocell', 'M', 75, 'Green'); INSERT INTO inventory (id, fabric_name, size, quantity, color) VALUES (3, 'Bamboo Viscose', 'L', 50, 'Natural');", "sql": "SELECT SUM(quantity) as total_quantity FROM inventory WHERE fabric_name IN ('Tencel Lyocell', 'Bamboo Viscose');"}, {"sql_prompt": "What is the percentage of parolees who have reoffended in Texas, broken down by gender and race, for the years 2017 and 2018?", "sql_context": "CREATE TABLE parolee (parolee_id INT, year INT, gender TEXT, race TEXT, reoffender BOOLEAN); INSERT INTO parolee (parolee_id, year, gender, race, reoffender) VALUES (1, 2017, 'Male', 'White', TRUE); INSERT INTO parolee (parolee_id, year, gender, race, reoffender) VALUES (2, 2017, 'Female', 'Black', FALSE); INSERT INTO parolee (parolee_id, year, gender, race, reoffender) VALUES (3, 2018, 'Male', 'Hispanic', TRUE); INSERT INTO parolee (parolee_id, year, gender, race, reoffender) VALUES (4, 2018, 'Female', 'Asian', FALSE);", "sql": "SELECT c.year, c.gender, c.race, COUNT(c.parolee_id) AS parolees, AVG(CAST(c.reoffender AS FLOAT)) * 100 AS reoffender_percentage FROM parolee c WHERE c.year IN (2017, 2018) GROUP BY c.year, c.gender, c.race;"}, {"sql_prompt": "What are the top 5 states with the most dispensaries?", "sql_context": "CREATE TABLE DispensariesByState (State TEXT, DispensaryCount INTEGER); INSERT INTO DispensariesByState (State, DispensaryCount) VALUES ('California', 1000), ('Colorado', 750), ('Oregon', 550), ('Washington', 400), ('Nevada', 350);", "sql": "SELECT State, DispensaryCount FROM DispensariesByState ORDER BY DispensaryCount DESC LIMIT 5;"}, {"sql_prompt": "For the 'design_standards' table, add a new row with the following information: ID 4, name 'Bridge Design Standards for Earthquake Zones', version '2022', and description 'New standards for bridge design in earthquake zones'.", "sql_context": "CREATE TABLE design_standards (id INT, name VARCHAR(50), version INT, description VARCHAR(100));", "sql": "INSERT INTO design_standards (id, name, version, description) VALUES (4, 'Bridge Design Standards for Earthquake Zones', 2022, 'New standards for bridge design in earthquake zones');"}, {"sql_prompt": "Which rugby team has the most tries scored in the 'tries' table?", "sql_context": "CREATE TABLE tries (try_id INT, player_id INT, match_id INT, team_id INT, tries INT); INSERT INTO tries (try_id, player_id, match_id, team_id, tries) VALUES (1, 4, 6, 403, 1);", "sql": "SELECT team_id, SUM(tries) FROM tries GROUP BY team_id ORDER BY SUM(tries) DESC LIMIT 1;"}, {"sql_prompt": "Delete the workout row with the id of 2.", "sql_context": "CREATE TABLE Workouts (id INT, user_id INT, workout_name TEXT, calories INT); INSERT INTO Workouts (id, user_id, workout_name, calories) VALUES (1, 1, 'Running', 300); INSERT INTO Workouts (id, user_id, workout_name, calories) VALUES (2, 1, 'Cycling', 400); INSERT INTO Workouts (id, user_id, workout_name, calories) VALUES (3, 2, 'Yoga', 200);", "sql": "DELETE FROM Workouts WHERE id = 2;"}, {"sql_prompt": "How many volunteers with 'Medical' skills were assigned before a volunteer with 'Engineering' skills?", "sql_context": "CREATE TABLE volunteers_ext (id INT, name VARCHAR(50), age INT, gender VARCHAR(10), skill VARCHAR(50), assignment_date DATE, end_date DATE); INSERT INTO volunteers_ext (id, name, age, gender, skill, assignment_date, end_date) VALUES (1, 'David', 25, 'Male', 'Medical', '2022-06-01', '2022-09-30'), (2, 'Emma', 30, 'Female', 'Engineering', '2022-07-15', '2023-06-30');", "sql": "SELECT COUNT(*) FROM (SELECT skill, assignment_date, LAG(skill) OVER (ORDER BY assignment_date) AS prev_skill FROM volunteers_ext WHERE skill = 'Medical') t WHERE prev_skill = 'Engineering';"}, {"sql_prompt": "What is the average age of female athletes in the 'basketball_players' table?", "sql_context": "CREATE TABLE basketball_players (id INT, name VARCHAR(50), position VARCHAR(50), age INT, team VARCHAR(50)); INSERT INTO basketball_players (id, name, position, age, team) VALUES (1, 'Alice Johnson', 'Guard', 25, 'Lakers'); INSERT INTO basketball_players (id, name, position, age, team) VALUES (2, 'Bella Smith', 'Forward', 28, 'Celtics');", "sql": "SELECT AVG(age) FROM basketball_players WHERE gender = 'female';"}, {"sql_prompt": "Find the total number of fans who have attended football and basketball games separately.", "sql_context": "CREATE TABLE fans (id INT, name VARCHAR(50)); CREATE TABLE events (id INT, event_type VARCHAR(20), tickets_bought INT); INSERT INTO fans (id, name) VALUES (1, 'John Doe'), (2, 'Jane Smith'), (3, 'Richard Roe'); INSERT INTO events (id, event_type, tickets_bought) VALUES (1, 'Football', 2), (1, 'Basketball', 1), (2, 'Football', 1), (2, 'Basketball', 3), (3, 'Football', 1), (3, 'Basketball', 2);", "sql": "SELECT SUM(CASE WHEN event_type = 'Basketball' THEN tickets_bought ELSE 0 END) + SUM(CASE WHEN event_type = 'Football' THEN tickets_bought ELSE 0 END) FROM events INNER JOIN fans ON events.id = fans.id;"}, {"sql_prompt": "Delete all records in the \"hotel_reviews\" table that do not have a rating of at least 4?", "sql_context": "CREATE TABLE hotel_reviews (review_id INT, hotel_id INT, rating INT, review TEXT); INSERT INTO hotel_reviews (review_id, hotel_id, rating, review) VALUES (1, 101, 5, 'Excellent stay'), (2, 102, 3, 'Average stay'), (3, 103, 4, 'Good stay'), (4, 104, 1, 'Terrible stay');", "sql": "DELETE FROM hotel_reviews WHERE rating < 4;"}, {"sql_prompt": "What is the total cost of space missions led by each country?", "sql_context": "CREATE TABLE missions (mission_name VARCHAR(50), country VARCHAR(50), cost INT); INSERT INTO missions (mission_name, country, cost) VALUES ('Apollo', 'USA', 25000000000), ('Artemis', 'USA', 30000000000), ('Luna', 'Russia', 5000000000);", "sql": "SELECT country, SUM(cost) as total_cost FROM missions GROUP BY country ORDER BY total_cost DESC;"}, {"sql_prompt": "What is the minimum speed in knots for vessels that docked at the port of Hong Kong between the dates of June 15th and June 30th, 2021?", "sql_context": "CREATE TABLE Vessels(Id INT, Name VARCHAR(255), AverageSpeed DECIMAL(5,2)); CREATE TABLE DockingHistory(Id INT, VesselId INT, Port VARCHAR(255), DockingDateTime DATETIME); INSERT INTO Vessels VALUES (1, 'VesselA', 15.5), (2, 'VesselB', 18.3), (3, 'VesselC', 20.2); INSERT INTO DockingHistory VALUES (1, 1, 'Hong Kong', '2021-06-16 12:00:00'), (2, 1, 'Hong Kong', '2021-06-25 15:00:00'), (3, 2, 'Hong Kong', '2021-06-20 09:00:00'), (4, 3, 'Hong Kong', '2021-06-22 18:00:00');", "sql": "SELECT MIN(v.AverageSpeed) FROM Vessels v INNER JOIN DockingHistory dh ON v.Id = dh.VesselId WHERE dh.Port = 'Hong Kong' AND dh.DockingDateTime BETWEEN '2021-06-15' AND '2021-06-30';"}, {"sql_prompt": "What is the average income of residents in each city in the state of California, grouped by city and ordered by average income in descending order?", "sql_context": "CREATE TABLE cities (id INT PRIMARY KEY, name TEXT, state TEXT); INSERT INTO cities (id, name, state) VALUES (1, 'Los Angeles', 'California'), (2, 'San Diego', 'California'), (3, 'San Jose', 'California'); CREATE TABLE incomes (id INT PRIMARY KEY, city_id INT, income INT); INSERT INTO incomes (id, city_id, income) VALUES (1, 1, 50000), (2, 1, 70000), (3, 2, 45000), (4, 2, 60000), (5, 3, 48000), (6, 3, 52000);", "sql": "SELECT c.name, AVG(i.income) FROM cities c JOIN incomes i ON c.id = i.city_id WHERE c.state = 'California' GROUP BY c.name ORDER BY AVG(i.income) DESC;"}, {"sql_prompt": "What is the total quantity of a specific dish sold on a given date?", "sql_context": "CREATE TABLE dishes (id INT, name TEXT, type TEXT, price DECIMAL, inventory INT); INSERT INTO dishes (id, name, type, price, inventory) VALUES (1, 'Pizza Margherita', 'Veg', 7.50, 50), (2, 'Chicken Alfredo', 'Non-Veg', 12.00, 30), (3, 'Veggie Delight Sandwich', 'Veg', 6.50, 75); CREATE TABLE sales (id INT, dish_id INT, quantity INT, date DATE); INSERT INTO sales (id, dish_id, quantity, date) VALUES (1, 2, 3, '2022-01-01'), (2, 1, 2, '2022-01-02'), (3, 3, 1, '2022-01-03');", "sql": "SELECT SUM(quantity) as total_quantity_sold FROM sales WHERE dish_id = 1 AND date = '2022-01-02';"}, {"sql_prompt": "What is the minimum depth recorded in the Mariana Trench?", "sql_context": "CREATE TABLE ocean_floor_mapping (location VARCHAR(255), depth FLOAT);   INSERT INTO ocean_floor_mapping (location, depth) VALUES ('Mariana Trench', 10994.0), ('Challenger Deep', 10972.8);", "sql": "SELECT MIN(depth) FROM ocean_floor_mapping WHERE location = 'Mariana Trench';"}, {"sql_prompt": "List the top 3 states with the highest average claim amount for auto policies, ordered by the average claim amount in descending order.", "sql_context": "CREATE TABLE Claims (ClaimID INT, PolicyType VARCHAR(255), PolicyholderID INT, ClaimAmount DECIMAL(10,2), State VARCHAR(255)); INSERT INTO Claims VALUES (1, 'Auto', 1, 5000, 'NY'), (2, 'Home', 2, 7000, 'CA'), (3, 'Auto', 3, 8000, 'ON'), (4, 'Life', 4, 6000, 'CA'), (5, 'Auto', 5, 9000, 'CA');", "sql": "SELECT State, AVG(ClaimAmount) as AvgClaimAmount FROM Claims WHERE PolicyType = 'Auto' GROUP BY State ORDER BY AvgClaimAmount DESC LIMIT 3;"}, {"sql_prompt": "List all the farms in the European region that have a yield per acre for wheat that is at least 15% higher than the average yield per acre for wheat in the entire database.", "sql_context": "CREATE TABLE Farm (id INT, name TEXT, crop TEXT, yield_per_acre FLOAT, region TEXT); INSERT INTO Farm (id, name, crop, yield_per_acre, region) VALUES (1, 'Jansen Farm', 'Wheat', 180, 'European'), (2, 'Schmidt Farm', 'Rye', 160, 'European'), (3, 'Garcia Farm', 'Wheat', 210, 'European'); CREATE TABLE Average (crop TEXT, avg_yield FLOAT); INSERT INTO Average (crop, avg_yield) VALUES ('Wheat', 170);", "sql": "SELECT * FROM Farm WHERE region = 'European' AND crop = 'Wheat' AND yield_per_acre >= (SELECT 1.15 * avg_yield FROM Average WHERE crop = 'Wheat');"}, {"sql_prompt": "What is the average heart rate for runners in the morning?", "sql_context": "CREATE TABLE workout_data (id INT, user_id INT, activity_type VARCHAR(20), heart_rate INT, workout_time TIME); INSERT INTO workout_data (id, user_id, activity_type, heart_rate, workout_time) VALUES (1, 10, 'Running', 140, '07:00:00'), (2, 10, 'Cycling', 120, '08:00:00'), (3, 15, 'Running', 150, '06:00:00');", "sql": "SELECT AVG(heart_rate) FROM workout_data WHERE activity_type = 'Running' AND EXTRACT(HOUR FROM workout_time) BETWEEN 0 AND 6;"}, {"sql_prompt": "Insert a new record for a TV show with title \"ShowC\", genre \"Drama\", and release year 2020.", "sql_context": "CREATE TABLE tv_shows (id INT, title VARCHAR(100), genre VARCHAR(50), release_year INT);", "sql": "INSERT INTO tv_shows (title, genre, release_year) VALUES ('ShowC', 'Drama', 2020);"}, {"sql_prompt": "What is the percentage of male and female fans who participated in athlete wellbeing programs in the last 6 months, by age group?", "sql_context": "CREATE TABLE wellbeing_participants (fan_id INT, gender VARCHAR(50), age INT, last_event_date DATE); INSERT INTO wellbeing_participants (fan_id, gender, age, last_event_date) VALUES (1, 'Male', 25, '2022-01-01'), (2, 'Female', 35, '2022-02-01'), (3, 'Male', 28, '2022-03-01'), (4, 'Female', 45, '2022-04-01'), (5, 'Male', 32, '2022-05-01');", "sql": "SELECT age_group, gender, COUNT(*) * 100.0 / (SELECT COUNT(*) FROM wellbeing_participants WHERE gender = age_group AND last_event_date >= CURDATE() - INTERVAL 6 MONTH) AS percentage FROM (SELECT CASE WHEN age < 30 THEN '18-29' WHEN age < 40 THEN '30-39' ELSE '40+' END AS age_group, gender FROM wellbeing_participants WHERE last_event_date >= CURDATE() - INTERVAL 6 MONTH) AS age_groups GROUP BY age_group, gender;"}, {"sql_prompt": "How many artworks were created by 'Vincent van Gogh'?", "sql_context": "CREATE TABLE artworks (id INT PRIMARY KEY, title VARCHAR(255), artist VARCHAR(255), year INT);", "sql": "SELECT COUNT(*) FROM artworks WHERE artist = 'Vincent van Gogh';"}, {"sql_prompt": "How many products are sourced from fair-trade suppliers?", "sql_context": "CREATE TABLE products (product_id INT PRIMARY KEY, fair_trade BOOLEAN); INSERT INTO products (product_id, fair_trade) VALUES (1, true), (2, false), (3, true), (4, false);", "sql": "SELECT COUNT(*) FROM products WHERE fair_trade = true;"}, {"sql_prompt": "How many workers are represented by the 'United Steelworkers' union?", "sql_context": "CREATE TABLE if not exists union_membership (union_id INT, worker_id INT); INSERT INTO union_membership (union_id, worker_id) VALUES (1, 1001), (1, 1002), (1, 1003), (2, 2001), (2, 2002), (3, 3001);", "sql": "SELECT COUNT(worker_id) FROM union_membership WHERE union_id = (SELECT union_id FROM unions WHERE union_name = 'United Steelworkers');"}, {"sql_prompt": "What is the total quantity of resources extracted by gender and race in the 'mining_operations' database?", "sql_context": "CREATE TABLE resource_extraction (resource_id INT PRIMARY KEY, resource_name VARCHAR(50), quantity INT, extractor_gender VARCHAR(10), extractor_race VARCHAR(30)); INSERT INTO resource_extraction (resource_id, resource_name, quantity, extractor_gender, extractor_race) VALUES (1, 'Gold', 1000, 'Male', 'Caucasian'), (2, 'Silver', 800, 'Female', 'African American'), (3, 'Copper', 1200, 'Non-binary', 'Hispanic'), (4, 'Iron', 1500, 'Male', 'Asian');", "sql": "SELECT extractor_gender, extractor_race, SUM(quantity) as total_quantity FROM resource_extraction GROUP BY extractor_gender, extractor_race;"}, {"sql_prompt": "What are the smart contracts written in Vyper by developers from the USA?", "sql_context": "CREATE TABLE developers (developer_id INT PRIMARY KEY, name VARCHAR(50), age INT, gender VARCHAR(10), country VARCHAR(50)); INSERT INTO developers (developer_id, name, age, gender, country) VALUES (1, 'Alice', 30, 'Female', 'USA'); INSERT INTO developers (developer_id, name, age, gender, country) VALUES (2, 'Bob', 35, 'Male', 'Canada'); CREATE TABLE smart_contracts (contract_id INT PRIMARY KEY, contract_name VARCHAR(50), developer_id INT, language VARCHAR(20), FOREIGN KEY (developer_id) REFERENCES developers(developer_id)); INSERT INTO smart_contracts (contract_id, contract_name, developer_id, language) VALUES (1, 'Contract1', 1, 'Solidity'); INSERT INTO smart_contracts (contract_id, contract_name, developer_id, language) VALUES (2, 'Contract2', 2, 'Vyper');", "sql": "SELECT smart_contracts.contract_name FROM smart_contracts INNER JOIN developers ON smart_contracts.developer_id = developers.developer_id WHERE developers.country = 'USA' AND smart_contracts.language = 'Vyper';"}, {"sql_prompt": "List the number of IoT sensors in the 'PrecisionFarming' schema that have a 'moisture' measurement and were installed after 2019-01-01.", "sql_context": "CREATE SCHEMA PrecisionFarming; CREATE TABLE IoT_Sensors (sensor_id INT, sensor_name VARCHAR(50), measurement VARCHAR(50), install_date DATE); INSERT INTO PrecisionFarming.IoT_Sensors (sensor_id, sensor_name, measurement, install_date) VALUES (4, 'Sensor4', 'moisture', '2020-01-01'), (5, 'Sensor5', 'moisture', '2019-06-15'), (6, 'Sensor6', 'temperature', '2021-03-02'), (7, 'Sensor7', 'humidity', '2018-12-31');", "sql": "SELECT COUNT(*) FROM PrecisionFarming.IoT_Sensors WHERE measurement = 'moisture' AND install_date > '2019-01-01';"}, {"sql_prompt": "What is the maximum quantity of a single organic product delivered in the DELIVERY_RECORDS table?", "sql_context": "CREATE TABLE DELIVERY_RECORDS (id INT, supplier_id INT, product_id INT, is_organic BOOLEAN, quantity INT); INSERT INTO DELIVERY_RECORDS (id, supplier_id, product_id, is_organic, quantity) VALUES (1, 1, 1, true, 50), (2, 2, 2, true, 30);", "sql": "SELECT MAX(quantity) FROM DELIVERY_RECORDS WHERE is_organic = true;"}, {"sql_prompt": "What is the total budget allocated for accommodations and support programs in the West?", "sql_context": "CREATE TABLE Accommodations (ID INT, Type VARCHAR(50), Cost FLOAT, Region VARCHAR(50)); INSERT INTO Accommodations (ID, Type, Cost, Region) VALUES (1, 'Note-taking Services', 20000.0, 'West'), (2, 'Accessible Furniture', 25000.0, 'West'); CREATE TABLE SupportPrograms (ID INT, Type VARCHAR(50), Cost FLOAT, Region VARCHAR(50)); INSERT INTO SupportPrograms (ID, Type, Cost, Region) VALUES (1, 'Assistive Technology Grant', 30000.0, 'West'), (2, 'Disability Awareness Training', 35000.0, 'West');", "sql": "SELECT SUM(A.Cost) + SUM(S.Cost) FROM Accommodations A, SupportPrograms S WHERE A.Region = 'West' AND S.Region = 'West';"}, {"sql_prompt": "Show the number of electric vehicle charging stations in the top 10 most populous cities in the US.", "sql_context": "CREATE TABLE cities (city_name TEXT, population INT);CREATE TABLE charging_stations (station_id INT, station_name TEXT, city_name TEXT, num_charging_points INT);", "sql": "SELECT c.city_name, COUNT(cs.station_id) AS num_charging_stations FROM cities c JOIN charging_stations cs ON c.city_name = cs.city_name GROUP BY c.city_name ORDER BY population DESC LIMIT 10;"}, {"sql_prompt": "What is the maximum and minimum population of animals for each species?", "sql_context": "CREATE TABLE animal_population (species VARCHAR(50), population INT); INSERT INTO animal_population (species, population) VALUES ('Tiger', 300), ('Lion', 250), ('Elephant', 500), ('Giraffe', 200);", "sql": "SELECT species, MIN(population) OVER (PARTITION BY species) as min_population, MAX(population) OVER (PARTITION BY species) as max_population FROM animal_population ORDER BY species;"}, {"sql_prompt": "What is the total amount of mineral extraction by type?", "sql_context": "CREATE TABLE extraction (extraction_id INT, mine_id INT, year INT, mineral VARCHAR(255), quantity INT); INSERT INTO extraction (extraction_id, mine_id, year, mineral, quantity) VALUES (1, 1, 2018, 'Gold', 1000), (2, 1, 2019, 'Gold', 1200), (3, 2, 2018, 'Uranium', 2000), (4, 2, 2019, 'Uranium', 2500);", "sql": "SELECT mineral, SUM(quantity) FROM extraction GROUP BY mineral;"}, {"sql_prompt": "What is the average rating of hotels that have a spa and a gym?", "sql_context": "CREATE TABLE hotel_ratings (id INT, hotel_id INT, rating INT); INSERT INTO hotel_ratings (id, hotel_id, rating) VALUES (1, 101, 4); INSERT INTO hotel_amenities (id, hotel_id, amenity) VALUES (1, 101, 'Spa'), (2, 101, 'Gym');", "sql": "SELECT AVG(hr.rating) as avg_rating FROM hotel_ratings hr INNER JOIN hotel_amenities ha ON hr.hotel_id = ha.hotel_id WHERE ha.amenity IN ('Spa', 'Gym') GROUP BY hr.hotel_id;"}, {"sql_prompt": "What is the minimum wage for 'temporary' workers in the 'logistics' sector, and how many such workers are there?", "sql_context": "CREATE TABLE employee_records (id INT, employment_type VARCHAR(10), sector VARCHAR(20), wage FLOAT); INSERT INTO employee_records (id, employment_type, sector, wage) VALUES (1, 'temporary', 'logistics', 14.00), (2, 'permanent', 'logistics', 18.00), (3, 'temporary', 'logistics', 13.50), (4, 'permanent', 'logistics', 20.00);", "sql": "SELECT MIN(wage), COUNT(*) FROM employee_records WHERE employment_type = 'temporary' AND sector = 'logistics';"}, {"sql_prompt": "List the number of virtual tours in India and Argentina.", "sql_context": "CREATE TABLE virtual_tours (tour_id INT, location VARCHAR(255), type VARCHAR(255)); INSERT INTO virtual_tours (tour_id, location, type) VALUES (1, 'India Virtual Tour', 'virtual'), (2, 'Argentina Virtual Tour', 'virtual');", "sql": "SELECT COUNT(*) FROM virtual_tours WHERE location IN ('India', 'Argentina');"}, {"sql_prompt": "What is the average water temperature for each species in the 'fish_tanks' table?", "sql_context": "CREATE TABLE fish_tanks (tank_id INT, species VARCHAR(255), water_temperature DECIMAL(5,2)); INSERT INTO fish_tanks (tank_id, species, water_temperature) VALUES (1, 'Tilapia', 26.5), (2, 'Salmon', 12.0), (3, 'Tilapia', 27.3), (4, 'Catfish', 24.6), (5, 'Salmon', 12.5);", "sql": "SELECT species, AVG(water_temperature) as avg_temp FROM fish_tanks GROUP BY species;"}, {"sql_prompt": "What is the average number of installations visited per visitor, partitioned by city?", "sql_context": "CREATE TABLE Cities (CityID INT, City VARCHAR(50)); INSERT INTO Cities (CityID, City) VALUES (1, 'New York'), (2, 'Los Angeles'); CREATE TABLE Visits (VisitID INT, VisitorID INT, CityID INT, InstallationID INT); INSERT INTO Visits (VisitID, VisitorID, CityID, InstallationID) VALUES (1, 1, 1, 1), (2, 1, 1, 2), (3, 2, 2, 3);", "sql": "SELECT City, AVG(InstallationID) OVER (PARTITION BY CityID) AS AvgInstallationsPerVisitor FROM Visits V JOIN Cities C ON V.CityID = C.CityID;"}, {"sql_prompt": "What is the maximum age of patients diagnosed with Hypertension?", "sql_context": "CREATE TABLE Patients (PatientID INT, Age INT, Gender VARCHAR(10), Diagnosis VARCHAR(20), Location VARCHAR(20)); INSERT INTO Patients (PatientID, Age, Gender, Diagnosis, Location) VALUES (1, 35, 'Male', 'Asthma', 'Texas'); INSERT INTO Patients (PatientID, Age, Gender, Diagnosis, Location) VALUES (2, 42, 'Female', 'Asthma', 'Texas'); INSERT INTO Patients (PatientID, Age, Gender, Diagnosis, Location) VALUES (3, 50, 'Male', 'Diabetes', 'Urban'); INSERT INTO Patients (PatientID, Age, Gender, Diagnosis, Location) VALUES (4, 60, 'Female', 'Hypertension', 'Rural');", "sql": "SELECT MAX(Age) FROM Patients WHERE Diagnosis = 'Hypertension';"}, {"sql_prompt": "How many socially responsible loans were issued to customers in the South?", "sql_context": "CREATE TABLE loans (loan_number INT, customer_name VARCHAR(50), issue_date DATE, is_socially_responsible BOOLEAN, region VARCHAR(20)); INSERT INTO loans (loan_number, customer_name, issue_date, is_socially_responsible, region) VALUES (1, 'Ahmed', '2021-01-01', true, 'South'), (2, 'Sara', '2021-02-15', false, 'North'), (3, 'Mohammed', '2021-03-03', true, 'South');", "sql": "SELECT COUNT(*) FROM loans WHERE is_socially_responsible = true AND region = 'South';"}, {"sql_prompt": "What is the total number of volunteers for nonprofits in California?", "sql_context": "CREATE TABLE Nonprofits (NonprofitID INT, Name VARCHAR(50), City VARCHAR(50), State VARCHAR(2), Zip VARCHAR(10), MissionStatement TEXT, TotalVolunteers INT); CREATE TABLE Volunteers (VolunteerID INT, VolunteerName VARCHAR(50), NonprofitID INT, Hours INT);", "sql": "SELECT SUM(V.Hours) FROM Volunteers V INNER JOIN Nonprofits N ON V.NonprofitID = N.NonprofitID WHERE N.State = 'CA';"}, {"sql_prompt": "What is the total quantity of corn sold by farmers in 'Summerfield'?", "sql_context": "CREATE TABLE farmers (id INT, name VARCHAR(50), location VARCHAR(50), crops VARCHAR(50)); CREATE TABLE crops (id INT, name VARCHAR(50), yield INT); CREATE TABLE sales (id INT, farmer_id INT, crop_name VARCHAR(50), quantity INT, price DECIMAL(5,2)); INSERT INTO farmers VALUES (1, 'Jane Doe', 'Summerfield', 'Corn'); INSERT INTO crops VALUES (1, 'Corn', 100); INSERT INTO sales VALUES (1, 1, 'Corn', 50, 2.50);", "sql": "SELECT SUM(quantity) FROM sales INNER JOIN farmers ON sales.farmer_id = farmers.id INNER JOIN crops ON sales.crop_name = crops.name WHERE farmers.location = 'Summerfield' AND crops.name = 'Corn';"}, {"sql_prompt": "Delete all rows in the comments table with a rating of 1.", "sql_context": "CREATE TABLE comments (id INT, article_id INT, user VARCHAR(255), comment TEXT, rating INT);", "sql": "DELETE FROM comments WHERE rating = 1;"}, {"sql_prompt": "Update the names of all news agencies from country X to their official English names.", "sql_context": "CREATE TABLE news_agencies (id INT, name TEXT, country TEXT); INSERT INTO news_agencies (id, name, country) VALUES (1, 'Agency 1', 'Country X'); CREATE TABLE articles (id INT, title TEXT, agency_id INT); INSERT INTO articles (id, title, agency_id) VALUES (1, 'Article 1', 1);", "sql": "UPDATE news_agencies SET name = CASE WHEN country = 'Country X' THEN 'Official English Name 1' ELSE name END;"}, {"sql_prompt": "Create a view that displays all fish in the 'tropical' and 'temperate' locations", "sql_context": "CREATE TABLE fish_stock (fish_id INT PRIMARY KEY, species VARCHAR(50), location VARCHAR(50), biomass FLOAT); INSERT INTO fish_stock (fish_id, species, location, biomass) VALUES (1, 'tuna', 'tropical', 250.5), (2, 'salmon', 'arctic', 180.3), (3, 'cod', 'temperate', 120.0);", "sql": "CREATE VIEW fish_in_warm_waters AS SELECT * FROM fish_stock WHERE location IN ('tropical', 'temperate');"}, {"sql_prompt": "Remove customers not interested in sustainable fashion", "sql_context": "CREATE TABLE CustomerPreferences (CustomerID INT, PrefersSustainable BOOLEAN); INSERT INTO CustomerPreferences (CustomerID, PrefersSustainable) VALUES (1, TRUE), (2, FALSE), (3, TRUE);", "sql": "DELETE FROM CustomerPreferences WHERE PrefersSustainable = FALSE;"}, {"sql_prompt": "Which region has the highest average shelter capacity?", "sql_context": "CREATE TABLE region (region_id INT, name VARCHAR(255)); INSERT INTO region (region_id, name) VALUES (1, 'west_africa'), (2, 'east_asia'), (3, 'south_america'); CREATE TABLE shelter (shelter_id INT, name VARCHAR(255), region_id INT, capacity INT); INSERT INTO shelter (shelter_id, name, region_id, capacity) VALUES (1, 'Shelter1', 1, 50), (2, 'Shelter2', 1, 75), (3, 'Shelter3', 2, 100), (4, 'Shelter4', 3, 150);", "sql": "SELECT region_id, AVG(capacity) as avg_capacity FROM shelter GROUP BY region_id ORDER BY avg_capacity DESC LIMIT 1;"}, {"sql_prompt": "List all projects that were completed before their scheduled completion date", "sql_context": "CREATE TABLE Project (id INT, name VARCHAR(255), scheduled_completion_date DATE, actual_completion_date DATE); INSERT INTO Project (id, name, scheduled_completion_date, actual_completion_date) VALUES (1, 'Project A', '2020-12-31', '2020-12-15'), (2, 'Project B', '2021-03-31', '2022-04-15'), (3, 'Project C', '2022-06-30', '2022-06-30');", "sql": "SELECT * FROM Project WHERE actual_completion_date < scheduled_completion_date;"}, {"sql_prompt": "What is the average water usage for crops in Spain?", "sql_context": "CREATE TABLE crops (id INT, name VARCHAR(50), country VARCHAR(50), water_usage INT); INSERT INTO crops (id, name, country, water_usage) VALUES (1, 'Wheat', 'Spain', 1000), (2, 'Barley', 'Spain', 800);", "sql": "SELECT AVG(water_usage) FROM crops WHERE country = 'Spain';"}, {"sql_prompt": "How many regulatory violations have been committed by Coinbase and Huobi combined?", "sql_context": "CREATE TABLE regulatory_violations (platform VARCHAR(255), violation_count INT); INSERT INTO regulatory_violations (platform, violation_count) VALUES ('Coinbase', 10); INSERT INTO regulatory_violations (platform, violation_count) VALUES ('Huobi', 15);", "sql": "SELECT SUM(violation_count) FROM regulatory_violations WHERE platform IN ('Coinbase', 'Huobi');"}, {"sql_prompt": "What is the total mass of space objects in high Earth orbit?", "sql_context": "CREATE TABLE space_objects_heo (id INT, name VARCHAR(255), mass FLOAT, orbit VARCHAR(255)); INSERT INTO space_objects_heo (id, name, mass, orbit) VALUES (1, 'Space Object 1', 1000.0, 'High Earth Orbit'), (2, 'Space Object 2', 1500.0, 'High Earth Orbit');", "sql": "SELECT SUM(mass) FROM space_objects_heo;"}, {"sql_prompt": "How many volunteers helped in the education programs in 2021?", "sql_context": "CREATE TABLE volunteers (id INT, name TEXT, program TEXT, hours FLOAT, volunteer_date DATE); INSERT INTO volunteers (id, name, program, hours, volunteer_date) VALUES (1, 'Jim Brown', 'Education', 5, '2021-02-03'); INSERT INTO volunteers (id, name, program, hours, volunteer_date) VALUES (2, 'Karen Green', 'Health', 3, '2021-06-15');", "sql": "SELECT COUNT(*) FROM volunteers WHERE program = 'Education' AND volunteer_date BETWEEN '2021-01-01' AND '2021-12-31';"}, {"sql_prompt": "What is the distribution of biotech startup funding sources?", "sql_context": "CREATE TABLE funding_sources (funding_source_id INT, funding_source_type VARCHAR(20)); INSERT INTO funding_sources (funding_source_id, funding_source_type) VALUES (1, 'Venture capital'), (2, 'Angel investors'), (3, 'Grants'), (4, 'Crowdfunding');", "sql": "SELECT funding_source_type, COUNT(*) FROM funding_sources GROUP BY funding_source_type"}, {"sql_prompt": "List the names, types, and last maintenance dates of machines in factories with circular economy initiatives.", "sql_context": "CREATE TABLE machines (machine_id INT, name TEXT, type TEXT, last_maintenance DATE); CREATE TABLE factories (factory_id INT, initiative TEXT);", "sql": "SELECT machines.name, machines.type, machines.last_maintenance FROM machines INNER JOIN factories ON machines.factory_id = factories.factory_id WHERE factories.initiative = 'circular economy';"}, {"sql_prompt": "Find the top 3 most popular garment types sold in the European market.", "sql_context": "CREATE TABLE garment_sales (id INT, garment_type VARCHAR(255), region VARCHAR(255), quantity INT); INSERT INTO garment_sales (id, garment_type, region, quantity) VALUES (1, 'T-Shirt', 'Europe', 500), (2, 'Jeans', 'Europe', 700), (3, 'Sweater', 'Europe', 800);", "sql": "SELECT garment_type, SUM(quantity) as total_quantity FROM garment_sales WHERE region = 'Europe' GROUP BY garment_type ORDER BY total_quantity DESC LIMIT 3;"}, {"sql_prompt": "List the number of affordable housing units in each neighborhood of San Francisco.", "sql_context": "CREATE TABLE affordable_housing (id INT, neighborhood VARCHAR(30), num_units INT); INSERT INTO affordable_housing (id, neighborhood, num_units) VALUES (1, 'Mission', 100), (2, 'SoMa', 150), (3, 'Haight-Ashbury', 120), (4, 'Richmond', 80), (5, 'Sunset', 130), (6, 'Tenderloin', 140), (7, 'Chinatown', 90), (8, 'Nob Hill', 70), (9, 'Pacific Heights', 60), (10, 'Marina', 50);", "sql": "SELECT neighborhood, num_units FROM affordable_housing;"}, {"sql_prompt": "What is the average price of vegan products in the USA?", "sql_context": "CREATE TABLE vendors (vendor_id INT, vendor_name TEXT, country TEXT);CREATE TABLE products (product_id INT, product_name TEXT, price DECIMAL, vegan BOOLEAN, vendor_id INT); INSERT INTO vendors (vendor_id, vendor_name, country) VALUES (1, 'VendorA', 'USA'), (2, 'VendorB', 'Canada'); INSERT INTO products (product_id, product_name, price, vegan, vendor_id) VALUES (1, 'ProductA', 25.99, true, 1), (2, 'ProductB', 18.49, false, 1), (3, 'ProductC', 22.99, true, 2);", "sql": "SELECT AVG(price) FROM products JOIN vendors ON products.vendor_id = vendors.vendor_id WHERE vegan = true AND country = 'USA';"}, {"sql_prompt": "List the names and nationalities of coaches in the 'coaches' table.", "sql_context": "CREATE TABLE coaches (coach_id INT, name VARCHAR(50), nationality VARCHAR(30));", "sql": "SELECT name, nationality FROM coaches;"}, {"sql_prompt": "Find the average soil moisture reading for each crop type in the month of May for 2021.", "sql_context": "CREATE TABLE crop_data (id INT, crop_type VARCHAR(255), soil_moisture INT, measurement_date DATE); INSERT INTO crop_data (id, crop_type, soil_moisture, measurement_date) VALUES (1, 'Corn', 60, '2021-05-01'); INSERT INTO crop_data (id, crop_type, soil_moisture, measurement_date) VALUES (2, 'Soybean', 55, '2021-05-03');", "sql": "SELECT crop_type, AVG(soil_moisture) as avg_moisture FROM crop_data WHERE measurement_date BETWEEN '2021-05-01' AND '2021-05-31' GROUP BY crop_type;"}, {"sql_prompt": "What is the average landfill capacity in megatons in the United States and Canada?", "sql_context": "CREATE TABLE LandfillCapacity (country VARCHAR(50), capacity_mt FLOAT);", "sql": "SELECT AVG(capacity_mt) FROM LandfillCapacity WHERE country IN ('United States', 'Canada');"}, {"sql_prompt": "What is the average production of Gadolinium in 2018 for countries with production > 15,000?", "sql_context": "CREATE TABLE production (country VARCHAR(255), year INT, element VARCHAR(10), quantity INT); INSERT INTO production (country, year, element, quantity) VALUES ('China', 2018, 'Gd', 25000), ('Australia', 2018, 'Gd', 20000), ('China', 2018, 'Gd', 26000), ('Russia', 2018, 'Gd', 15000);", "sql": "SELECT AVG(quantity) FROM production WHERE year = 2018 AND country IN (SELECT country FROM production WHERE element = 'Gd' AND quantity > 15000 GROUP BY country);"}, {"sql_prompt": "Add a new record to the \"PolicyImpact\" table", "sql_context": "CREATE TABLE PolicyImpact (ID INT, Policy TEXT, Impact TEXT, StartDate DATE, EndDate DATE);", "sql": "INSERT INTO PolicyImpact (ID, Policy, Impact, StartDate, EndDate) VALUES (3002, 'Community Policing', 'Increase in community trust by 30%', '2021-01-01', '2022-12-31');"}, {"sql_prompt": "Show all research projects focused on Mars exploration.", "sql_context": "CREATE TABLE ResearchProjects (id INT, project_name VARCHAR(100), field VARCHAR(50), leader VARCHAR(50), start_date DATE, end_date DATE); INSERT INTO ResearchProjects (id, project_name, field, leader, start_date, end_date) VALUES (1, 'Project1', 'Space Exploration', 'Jane Smith', '2021-01-01', '2022-12-31'), (2, 'Project2', 'Mars Exploration', 'Jim Brown', '2022-01-01', '2023-12-31');", "sql": "SELECT * FROM ResearchProjects WHERE field = 'Mars Exploration';"}, {"sql_prompt": "What is the total number of policies for 'High-Risk' drivers?", "sql_context": "CREATE TABLE policies (id INT, policy_number TEXT, driver_risk TEXT); INSERT INTO policies (id, policy_number, driver_risk) VALUES (1, 'P1234', 'Medium-Risk'); INSERT INTO policies (id, policy_number, driver_risk) VALUES (2, 'P5678', 'High-Risk'); INSERT INTO policies (id, policy_number, driver_risk) VALUES (3, 'P9012', 'Low-Risk');", "sql": "SELECT COUNT(*) FROM policies WHERE driver_risk = 'High-Risk';"}, {"sql_prompt": "Delete records of users who joined after Jan 5, 2022 from the \"Members\" table", "sql_context": "CREATE TABLE Members (Id INT PRIMARY KEY, FirstName VARCHAR(50), LastName VARCHAR(50), JoinDate DATETIME, LastLogin DATETIME);", "sql": "DELETE FROM Members WHERE JoinDate > '2022-01-05';"}, {"sql_prompt": "What is the average investment amount in 'Asia'?", "sql_context": "CREATE TABLE investment_regions (region VARCHAR(20), investment_amount FLOAT); INSERT INTO investment_regions (region, investment_amount) VALUES ('Africa', 450000), ('Asia', 650000), ('South America', 700000), ('Europe', 800000);", "sql": "SELECT AVG(investment_amount) FROM investment_regions WHERE region = 'Asia';"}, {"sql_prompt": "Show the total revenue from concert ticket sales for the artist 'BTS'", "sql_context": "CREATE TABLE concerts (id INT, artist_name VARCHAR(255), tickets_sold INT, ticket_price DECIMAL(5,2)); INSERT INTO concerts (id, artist_name, tickets_sold, ticket_price) VALUES (1, 'Taylor Swift', 12000, 75), (2, 'BTS', 15000, 100);", "sql": "SELECT artist_name, SUM(tickets_sold * ticket_price) as total_revenue FROM concerts WHERE artist_name = 'BTS' GROUP BY artist_name;"}, {"sql_prompt": "What is the waste generation in kg per capita for each city in the year 2020?", "sql_context": "CREATE TABLE CityPopulation (city VARCHAR(50), year INT, population INT); INSERT INTO CityPopulation (city, year, population) VALUES ('CityA', 2018, 100000), ('CityA', 2019, 105000), ('CityA', 2020, 110000), ('CityB', 2018, 200000), ('CityB', 2019, 210000), ('CityB', 2020, 220000);", "sql": "SELECT wg.city, (SUM(wg.amount) / cp.population) FROM WasteGeneration wg INNER JOIN CityPopulation cp ON wg.city = cp.city AND wg.year = cp.year WHERE wg.year = 2020 GROUP BY wg.city;"}, {"sql_prompt": "Which countries have the most urban agriculture initiatives in the 'urban_agriculture' table?", "sql_context": "CREATE TABLE urban_agriculture (id INT, country VARCHAR(255), initiatives INT); INSERT INTO urban_agriculture (id, country, initiatives) VALUES (1, 'Brazil', 500), (2, 'India', 750), (3, 'China', 800), (4, 'South Africa', 300);", "sql": "SELECT country, initiatives FROM urban_agriculture ORDER BY initiatives DESC;"}, {"sql_prompt": "Get the number of visitors and exhibitions for each art category.", "sql_context": "CREATE TABLE art_categories (id INT, category VARCHAR(50), num_visitors INT, num_exhibitions INT); INSERT INTO art_categories (id, category, num_visitors, num_exhibitions) VALUES (1, 'Painting', 1200, 500), (2, 'Sculpture', 800, 300);", "sql": "SELECT category, SUM(num_visitors) as total_visitors, SUM(num_exhibitions) as total_exhibitions FROM art_categories GROUP BY category;"}, {"sql_prompt": "How many products were sold by women-owned businesses in Africa in Q3 2021?", "sql_context": "CREATE TABLE ProductSales (product_id INT, sale_date DATE, women_owned_business BOOLEAN);", "sql": "SELECT COUNT(*) FROM ProductSales WHERE sale_date BETWEEN '2021-07-01' AND '2021-09-30' AND women_owned_business = TRUE AND country = 'Africa';"}, {"sql_prompt": "Insert a new row into the 'startups' table for 'Health Startup 5', founded in '2022-03-15' by 'Middle Eastern' founder, with a funding amount of $7,500,000", "sql_context": "CREATE TABLE startups (id INT, name TEXT, industry TEXT, founding_date DATE, raised_funding FLOAT, founder_race TEXT);", "sql": "INSERT INTO startups (name, industry, founding_date, raised_funding, founder_race) VALUES ('Health Startup 5', 'Healthcare', '2022-03-15', 7500000.00, 'Middle Eastern');"}, {"sql_prompt": "Which workers in the 'fair_labor' table earn more than the worker 'Alice'?", "sql_context": "CREATE TABLE fair_labor (id INT, worker VARCHAR(20), hourly_wage DECIMAL(4,2)); INSERT INTO fair_labor (id, worker, hourly_wage) VALUES (1, 'John', 15.00), (2, 'Jane', 14.50), (3, 'Alice', 17.00);", "sql": "SELECT * FROM fair_labor WHERE hourly_wage > (SELECT hourly_wage FROM fair_labor WHERE worker = 'Alice');"}, {"sql_prompt": "Determine the number of mines in Colombia with environmental impact assessments that exceed 80 points.", "sql_context": "CREATE TABLE mines (id INT, name TEXT, location TEXT, eia_score INT); INSERT INTO mines (id, name, location, eia_score) VALUES (1, 'Emerald Mine', 'Colombia', 85); INSERT INTO mines (id, name, location, eia_score) VALUES (2, 'Ruby Mine', 'Colombia', 70);", "sql": "SELECT COUNT(*) FROM mines WHERE location = 'Colombia' AND eia_score > 80;"}, {"sql_prompt": "Identify the top 5 threat intelligence sources with the highest number of reported incidents in the last year, according to our Incident Tracking database.", "sql_context": "CREATE TABLE IncidentTracking (id INT, source VARCHAR(50), incident_count INT, timestamp DATETIME); INSERT INTO IncidentTracking (id, source, incident_count, timestamp) VALUES (1, 'TechFirmA', 200, '2021-01-01 10:00:00'), (2, 'TechFirmB', 150, '2021-01-01 10:00:00');", "sql": "SELECT source, SUM(incident_count) as total_incidents FROM IncidentTracking WHERE timestamp >= DATE_SUB(NOW(), INTERVAL 1 YEAR) GROUP BY source ORDER BY total_incidents DESC LIMIT 5;"}, {"sql_prompt": "Delete genetic research experiments conducted before 2010", "sql_context": "CREATE TABLE genetic_research_experiments (experiment_id INT, experiment_name VARCHAR(255), experiment_date DATE);", "sql": "DELETE FROM genetic_research_experiments WHERE experiment_date < '2010-01-01';"}, {"sql_prompt": "What is the total cost of ingredients for gluten-free dishes in the healthy menu?", "sql_context": "CREATE TABLE ingredients (id INT, dish_id INT, name TEXT, cost FLOAT, is_gluten_free BOOLEAN); INSERT INTO ingredients (id, dish_id, name, cost, is_gluten_free) VALUES (1, 1, 'Quinoa', 2.00, true), (2, 1, 'Olive Oil', 1.50, true), (3, 2, 'Chickpeas', 2.75, false), (4, 2, 'Coconut Milk', 3.00, true), (5, 3, 'Beef', 8.00, false);", "sql": "SELECT SUM(cost) FROM ingredients WHERE is_gluten_free = true;"}, {"sql_prompt": "What are the names of vessels that have never had safety incidents in North America?", "sql_context": "CREATE TABLE Vessels (VesselID INT, VesselName VARCHAR(50));CREATE TABLE SafetyIncidents (IncidentID INT, VesselID INT, IncidentLocation VARCHAR(50), IncidentDate DATE); INSERT INTO Vessels (VesselID, VesselName) VALUES (1, 'VesselA'), (2, 'VesselB'), (3, 'VesselC'), (4, 'VesselD'), (5, 'VesselE'); INSERT INTO SafetyIncidents (IncidentID, VesselID, IncidentLocation, IncidentDate) VALUES (1, 1, 'Canada', '2021-01-01'), (2, 2, 'USA', '2021-02-01'), (3, 3, 'Mexico', '2021-03-01');", "sql": "SELECT Vessels.VesselName FROM Vessels LEFT JOIN SafetyIncidents ON Vessels.VesselID = SafetyIncidents.VesselID WHERE SafetyIncidents.IncidentLocation IS NULL;"}, {"sql_prompt": "Which countries have the highest number of eco-friendly accommodations in Asia?", "sql_context": "CREATE TABLE asia_accommodations (country VARCHAR(50), type VARCHAR(50)); INSERT INTO asia_accommodations VALUES ('Japan', 'Eco-friendly'), ('Thailand', 'Eco-friendly'), ('Indonesia', 'Eco-friendly'), ('Malaysia', 'Eco-friendly'), ('Vietnam', 'Eco-friendly');", "sql": "SELECT country, COUNT(*) as count FROM asia_accommodations WHERE type = 'Eco-friendly' GROUP BY country ORDER BY count DESC;"}, {"sql_prompt": "What is the total number of workers in unions involved in collective bargaining in each state?", "sql_context": "CREATE TABLE unions (id INT, state VARCHAR(2), workers INT); CREATE VIEW collective_bargaining AS SELECT * FROM unions WHERE issue = 'collective_bargaining';", "sql": "SELECT state, SUM(workers) FROM collective_bargaining GROUP BY state;"}, {"sql_prompt": "Delete diversity metrics for 2019 from the database.", "sql_context": "CREATE TABLE Diversity (Company VARCHAR(50), Year INT, DiverseEmployees INT); INSERT INTO Diversity (Company, Year, DiverseEmployees) VALUES ('Acme Inc.', 2018, 50), ('Acme Inc.', 2019, 75), ('Acme Inc.', 2020, 85), ('Beta Corp.', 2018, 30), ('Beta Corp.', 2019, 35), ('Beta Corp.', 2020, 40);", "sql": "DELETE FROM Diversity WHERE Year = 2019;"}, {"sql_prompt": "What is the total number of articles published per day for a specific author?", "sql_context": "CREATE TABLE articles (article_id INT, author VARCHAR(50), title VARCHAR(100), category VARCHAR(50), publication_date DATE);", "sql": "SELECT publication_date, COUNT(article_id) AS articles_per_day FROM articles WHERE author = 'John Doe' GROUP BY publication_date ORDER BY publication_date;"}, {"sql_prompt": "What are the average maintenance costs for airports in Germany?", "sql_context": "CREATE TABLE Airport (id INT, name VARCHAR(50), maintenance_cost FLOAT, country VARCHAR(50)); INSERT INTO Airport (id, name, maintenance_cost, country) VALUES (1, 'Frankfurt Airport', 5000000, 'Germany');", "sql": "SELECT AVG(maintenance_cost) FROM Airport WHERE country = 'Germany' AND type = 'Airport';"}, {"sql_prompt": "List all accommodation requests with their approval status and date approved, if applicable, for students with visual impairments?", "sql_context": "CREATE TABLE Students (StudentID int, StudentName varchar(50), DisabilityType varchar(50)); INSERT INTO Students (StudentID, StudentName, DisabilityType) VALUES (1, 'John Doe', 'Visual Impairment'), (2, 'Jane Smith', 'Mobility Impairment'), (3, 'Michael Johnson', 'Learning Disability'); CREATE TABLE AccommodationRequests (RequestID int, StudentID int, RequestDate date, ApprovalStatus varchar(50)); INSERT INTO AccommodationRequests (RequestID, StudentID, RequestDate, ApprovalStatus) VALUES (1, 1, '2021-01-01', 'Approved'), (2, 1, '2021-02-01', 'Pending'), (3, 2, '2021-03-01', 'Approved'), (4, 3, '2021-04-01', 'Denied');", "sql": "SELECT StudentName, DisabilityType, ApprovalStatus, RequestDate as DateApproved FROM AccommodationRequests AR JOIN Students S ON AR.StudentID = S.StudentID WHERE DisabilityType = 'Visual Impairment' AND ApprovalStatus <> 'Pending';"}, {"sql_prompt": "What is the average height of trees in the 'BorealForest' table?", "sql_context": "CREATE TABLE BorealForest (id INT, species VARCHAR(255), diameter FLOAT, height FLOAT, volume FLOAT); INSERT INTO BorealForest (id, species, diameter, height, volume) VALUES (1, 'Pine', 2.1, 30, 8.1); INSERT INTO BorealForest (id, species, diameter, height, volume) VALUES (2, 'Spruce', 2.5, 35, 10.5);", "sql": "SELECT AVG(height) FROM BorealForest;"}, {"sql_prompt": "How many depression patients are there in each age group?", "sql_context": "CREATE TABLE age_groups (age_group_id INT, age_group_name VARCHAR(50), lower_limit INT, upper_limit INT); INSERT INTO age_groups (age_group_id, age_group_name, lower_limit, upper_limit) VALUES (1, '18-30', 18, 30);", "sql": "SELECT age_groups.age_group_name, COUNT(patients.patient_id) FROM patients INNER JOIN age_groups ON patients.age BETWEEN age_groups.lower_limit AND age_groups.upper_limit WHERE patients.diagnosis = 'Depression' GROUP BY age_groups.age_group_name;"}, {"sql_prompt": "Update the names of athletes whose names start with 'J' to 'X'", "sql_context": "CREATE TABLE athletes (athlete_id INT, name VARCHAR(50), sport VARCHAR(50), join_year INT); INSERT INTO athletes (athlete_id, name, sport, join_year) VALUES (1, 'Jane Doe', 'Basketball', 2021), (2, 'John Smith', 'Soccer', 2019);", "sql": "UPDATE athletes SET name = REPLACE(name, 'J', 'X') WHERE name LIKE 'J%';"}, {"sql_prompt": "how many tree species are there in each continent?", "sql_context": "CREATE TABLE trees (id INT, species VARCHAR(255), continent VARCHAR(255));", "sql": "SELECT continent, COUNT(DISTINCT species) as num_species FROM trees GROUP BY continent;"}, {"sql_prompt": "What is the average time to remediate high severity vulnerabilities for each organization?", "sql_context": "CREATE TABLE vulnerabilities (vuln_id INT, org_id INT, vuln_severity VARCHAR(50), vuln_report_date DATE, vuln_remediation_date DATE); INSERT INTO vulnerabilities (vuln_id, org_id, vuln_severity, vuln_report_date, vuln_remediation_date) VALUES (1, 1, 'high', '2022-01-01', '2022-01-05'), (2, 1, 'medium', '2022-01-02', '2022-01-07'), (3, 2, 'high', '2022-01-03', '2022-01-10');", "sql": "SELECT org_id, AVG(DATEDIFF(day, vuln_report_date, vuln_remediation_date)) as avg_remediation_time FROM vulnerabilities WHERE vuln_severity = 'high' GROUP BY org_id;"}, {"sql_prompt": "What was the total revenue generated from adult ticket sales for the Modern Art exhibition?", "sql_context": "CREATE TABLE exhibitions (name VARCHAR(50), tickets_sold INT, price DECIMAL(5,2)); INSERT INTO exhibitions (name, tickets_sold, price) VALUES ('Modern Art', 300, 20.00), ('Classic Art', 250, 15.00);", "sql": "SELECT SUM(price * tickets_sold) FROM exhibitions WHERE name = 'Modern Art' AND tickets_sold = (SELECT SUM(tickets_sold) FROM tickets WHERE age_group = 'Adult');"}, {"sql_prompt": "What is the average mental health score of students by gender?", "sql_context": "CREATE TABLE students (student_id INT, student_name VARCHAR(50), gender VARCHAR(10), mental_health_score INT); INSERT INTO students (student_id, student_name, gender, mental_health_score) VALUES (1, 'John Doe', 'Male', 70), (2, 'Jane Smith', 'Female', 80);", "sql": "SELECT gender, AVG(mental_health_score) FROM students GROUP BY gender;"}, {"sql_prompt": "Display the number of unique users who have streamed or downloaded music on each platform in Africa.", "sql_context": "CREATE TABLE users (id INT, name TEXT, country TEXT); CREATE TABLE user_actions (id INT, user_id INT, action TEXT, album_id INT, platform TEXT); CREATE VIEW platform_users_africa AS SELECT platform, COUNT(DISTINCT user_id) as user_count FROM user_actions JOIN users u ON user_actions.user_id = u.id WHERE u.country IN ('Nigeria', 'South Africa', 'Egypt', 'Algeria', 'Morocco');", "sql": "SELECT platform, user_count FROM platform_users_africa;"}, {"sql_prompt": "Find the maximum construction cost for wastewater treatment plants in 'Ontario'", "sql_context": "CREATE TABLE wastewater_treatment_plants (id INT, name VARCHAR(50), location VARCHAR(50), construction_cost DECIMAL(10,2)); INSERT INTO wastewater_treatment_plants (id, name, location, construction_cost) VALUES (1, 'Toronto Wastewater Treatment Plant', 'Ontario', 80000000.00);", "sql": "SELECT MAX(construction_cost) FROM wastewater_treatment_plants WHERE location = 'Ontario';"}, {"sql_prompt": "What was the total R&D expenditure for 'DrugA'?", "sql_context": "CREATE TABLE rd_expenditure (drug_name TEXT, amount INTEGER); INSERT INTO rd_expenditure VALUES ('DrugA', 5000000);", "sql": "SELECT SUM(amount) FROM rd_expenditure WHERE drug_name = 'DrugA';"}, {"sql_prompt": "List all the forests that have 'Quercus' species in the 'wildlife' table.", "sql_context": "CREATE TABLE wildlife (id INT, forest_id INT, species VARCHAR(50));", "sql": "SELECT DISTINCT forest_id FROM wildlife WHERE species = 'Quercus';"}, {"sql_prompt": "What is the average response time for emergency calls during different times of the day?", "sql_context": "CREATE TABLE emergency_calls (id INT, call_time TIME, response_time INT);CREATE TABLE districts (district_id INT, district_name VARCHAR(255));", "sql": "SELECT DATEPART(hour, call_time) AS hour_of_day, AVG(response_time) AS avg_response_time FROM emergency_calls JOIN districts ON 1=1 GROUP BY DATEPART(hour, call_time);"}, {"sql_prompt": "What is the average ocean acidification level in each ocean?", "sql_context": "CREATE TABLE ocean_acidification_data (location text, level decimal); INSERT INTO ocean_acidification_data (location, level) VALUES ('Pacific Ocean', 8.2), ('Atlantic Ocean', 8.3), ('Indian Ocean', 8.1);", "sql": "SELECT location, AVG(level) FROM ocean_acidification_data GROUP BY location;"}, {"sql_prompt": "What is the total number of labor rights violations for unions in the construction sector, ordered by the number of violations in descending order?", "sql_context": "CREATE TABLE union_construction (union_id INT, union_name TEXT, sector TEXT, violations INT); INSERT INTO union_construction (union_id, union_name, sector, violations) VALUES (1, 'Union P', 'Construction', 30), (2, 'Union Q', 'Construction', 40), (3, 'Union R', 'Construction', 25);", "sql": "SELECT sector, SUM(violations) as total_violations FROM union_construction WHERE sector = 'Construction' GROUP BY sector ORDER BY total_violations DESC;"}, {"sql_prompt": "Add a record for a depression patient who underwent CBT", "sql_context": "CREATE TABLE patients (id INT PRIMARY KEY, name VARCHAR(255), age INT, gender VARCHAR(50)); CREATE TABLE mental_health_conditions (id INT PRIMARY KEY, name VARCHAR(255), description TEXT); CREATE TABLE mental_health_treatment_approaches (id INT PRIMARY KEY, name VARCHAR(255), description TEXT); CREATE TABLE patient_outcomes (id INT PRIMARY KEY, patient_id INT, mental_health_condition_id INT, treatment_approach_id INT, outcome_date DATE, outcome_description TEXT);", "sql": "INSERT INTO patient_outcomes (id, patient_id, mental_health_condition_id, treatment_approach_id, outcome_date, outcome_description) VALUES (1, 1, 1, 1, '2022-06-01', 'Improved mood and energy levels.');"}, {"sql_prompt": "How many sustainable accommodations are there in North America with a rating of 4 or higher?", "sql_context": "CREATE TABLE Accommodations (accommodation_id INT, name VARCHAR(50), country VARCHAR(50), sustainability_rating INT); INSERT INTO Accommodations (accommodation_id, name, country, sustainability_rating) VALUES (1, 'Eco Resort', 'Canada', 5); INSERT INTO Accommodations (accommodation_id, name, country, sustainability_rating) VALUES (2, 'Green Hotel', 'USA', 4);", "sql": "SELECT COUNT(*) FROM Accommodations WHERE country IN ('North America') AND sustainability_rating >= 4;"}, {"sql_prompt": "What is the total quantity of sustainable material 'organic cotton' used by manufacturers in the 'Europe' region?", "sql_context": "CREATE TABLE Manufacturers (ManufacturerID INT, ManufacturerName VARCHAR(50), Region VARCHAR(50)); INSERT INTO Manufacturers (ManufacturerID, ManufacturerName, Region) VALUES (1, 'EcoFriendlyFabrics', 'Europe'), (2, 'GreenYarns', 'Asia'); CREATE TABLE Materials (MaterialID INT, MaterialName VARCHAR(50), QuantityUsed INT); INSERT INTO Materials (MaterialID, MaterialName, QuantityUsed) VALUES (1, 'organic cotton', 2000, (2, 'recycled polyester', 1500));", "sql": "SELECT SUM(QuantityUsed) FROM Materials WHERE MaterialName = 'organic cotton' AND Region = 'Europe';"}, {"sql_prompt": "Provide the number of tourists visiting Canada, grouped by continent.", "sql_context": "CREATE TABLE tourism_stats (visitor_country VARCHAR(255), continent VARCHAR(255)); INSERT INTO tourism_stats (visitor_country, continent) VALUES ('Canada', 'North America');", "sql": "SELECT continent, COUNT(*) FROM tourism_stats GROUP BY continent;"}]